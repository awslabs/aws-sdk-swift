// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyXML
import typealias Foundation.TimeInterval

extension S3ClientTypes.AbortIncompleteMultipartUpload: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case daysAfterInitiation = "DaysAfterInitiation"
    }

    static func writingClosure(_ value: S3ClientTypes.AbortIncompleteMultipartUpload?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DaysAfterInitiation")].write(value.daysAfterInitiation)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysAfterInitiationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .daysAfterInitiation)
        daysAfterInitiation = daysAfterInitiationDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide.
    public struct AbortIncompleteMultipartUpload: Swift.Equatable {
        /// Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload.
        public var daysAfterInitiation: Swift.Int?

        public init(
            daysAfterInitiation: Swift.Int? = nil
        )
        {
            self.daysAfterInitiation = daysAfterInitiation
        }
    }

}

extension AbortMultipartUploadInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension AbortMultipartUploadInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "AbortMultipartUpload"))
            guard let uploadId = uploadId else {
                let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            items.append(uploadIdQueryItem)
            return items
        }
    }
}

extension AbortMultipartUploadInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct AbortMultipartUploadInput: Swift.Equatable {
    /// The bucket name to which the upload was taking place. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Key of the object for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Upload ID that identifies the multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.uploadId = uploadId
    }
}

extension AbortMultipartUploadOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct AbortMultipartUploadOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

enum AbortMultipartUploadOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchUpload": return try await NoSuchUpload(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.AccelerateConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.AccelerateConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketAccelerateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the Amazon S3 User Guide.
    public struct AccelerateConfiguration: Swift.Equatable {
        /// Specifies the transfer acceleration status of the bucket.
        public var status: S3ClientTypes.BucketAccelerateStatus?

        public init(
            status: S3ClientTypes.BucketAccelerateStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes.AccessControlPolicy: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    static func writingClosure(_ value: S3ClientTypes.AccessControlPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessControlList")].writeList(value.grants, memberWritingClosure: S3ClientTypes.Grant.writingClosure(_:to:), memberNodeInfo: .init("Grant"), isFlattened: false)
        try writer[.init("Owner")].write(value.owner, writingClosure: S3ClientTypes.Owner.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes {
    /// Contains the elements that set the ACL permissions for an object per grantee.
    public struct AccessControlPolicy: Swift.Equatable {
        /// A list of grants.
        public var grants: [S3ClientTypes.Grant]?
        /// Container for the bucket owner's display name and ID.
        public var owner: S3ClientTypes.Owner?

        public init(
            grants: [S3ClientTypes.Grant]? = nil,
            owner: S3ClientTypes.Owner? = nil
        )
        {
            self.grants = grants
            self.owner = owner
        }
    }

}

extension S3ClientTypes.AccessControlTranslation: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case owner = "Owner"
    }

    static func writingClosure(_ value: S3ClientTypes.AccessControlTranslation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Owner")].write(value.owner)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnerOverride.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes {
    /// A container for information about access control for replicas.
    public struct AccessControlTranslation: Swift.Equatable {
        /// Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference.
        /// This member is required.
        public var owner: S3ClientTypes.OwnerOverride?

        public init(
            owner: S3ClientTypes.OwnerOverride? = nil
        )
        {
            self.owner = owner
        }
    }

}

extension S3ClientTypes.AnalyticsAndOperator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `prefix` = "Prefix"
        case tags = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.AnalyticsAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes {
    /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply.
    public struct AnalyticsAndOperator: Swift.Equatable {
        /// The prefix to use when evaluating an AND predicate: The prefix that an object must have to be included in the metrics results.
        public var `prefix`: Swift.String?
        /// The list of tags to use when evaluating an AND predicate.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }

}

extension S3ClientTypes.AnalyticsConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
        case storageClassAnalysis = "StorageClassAnalysis"
    }

    static func writingClosure(_ value: S3ClientTypes.AnalyticsConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.AnalyticsFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("StorageClassAnalysis")].write(value.storageClassAnalysis, writingClosure: S3ClientTypes.StorageClassAnalysis.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsFilter.self, forKey: .filter)
        filter = filterDecoded
        let storageClassAnalysisDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysis.self, forKey: .storageClassAnalysis)
        storageClassAnalysis = storageClassAnalysisDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
    public struct AnalyticsConfiguration: Swift.Equatable {
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public var filter: S3ClientTypes.AnalyticsFilter?
        /// The ID that identifies the analytics configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
        /// This member is required.
        public var storageClassAnalysis: S3ClientTypes.StorageClassAnalysis?

        public init(
            filter: S3ClientTypes.AnalyticsFilter? = nil,
            id: Swift.String? = nil,
            storageClassAnalysis: S3ClientTypes.StorageClassAnalysis? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
        }
    }

}

extension S3ClientTypes.AnalyticsExportDestination: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketDestination = "S3BucketDestination"
    }

    static func writingClosure(_ value: S3ClientTypes.AnalyticsExportDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("S3BucketDestination")].write(value.s3BucketDestination, writingClosure: S3ClientTypes.AnalyticsS3BucketDestination.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDestinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsS3BucketDestination.self, forKey: .s3BucketDestination)
        s3BucketDestination = s3BucketDestinationDecoded
    }
}

extension S3ClientTypes {
    /// Where to publish the analytics results.
    public struct AnalyticsExportDestination: Swift.Equatable {
        /// A destination signifying output to an S3 bucket.
        /// This member is required.
        public var s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination?

        public init(
            s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }

}

extension S3ClientTypes.AnalyticsFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case `prefix` = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    static func writingClosure(_ value: S3ClientTypes.AnalyticsFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        switch value {
            case let .and(and):
                try writer[.init("And")].write(and, writingClosure: S3ClientTypes.AnalyticsAndOperator.writingClosure(_:to:))
            case let .`prefix`(`prefix`):
                try writer[.init("Prefix")].write(`prefix`)
            case let .tag(tag):
                try writer[.init("Tag")].write(tag, writingClosure: S3ClientTypes.Tag.writingClosure(_:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer[.init("sdkUnknown")].write(sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let key = containerValues.allKeys.first
        switch key {
            case .`prefix`:
                let prefixDecoded = try containerValues.decode(Swift.String.self, forKey: .prefix)
                self = .prefix(prefixDecoded)
            case .tag:
                let tagDecoded = try containerValues.decode(S3ClientTypes.Tag.self, forKey: .tag)
                self = .tag(tagDecoded)
            case .and:
                let andDecoded = try containerValues.decode(S3ClientTypes.AnalyticsAndOperator.self, forKey: .and)
                self = .and(andDecoded)
            default:
                self = .sdkUnknown("")
        }
    }
}

extension S3ClientTypes {
    /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
    public enum AnalyticsFilter: Swift.Equatable {
        /// The prefix to use when evaluating an analytics filter.
        case `prefix`(Swift.String)
        /// The tag to use when evaluating an analytics filter.
        case tag(S3ClientTypes.Tag)
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        case and(S3ClientTypes.AnalyticsAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes.AnalyticsS3BucketDestination: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case bucketAccountId = "BucketAccountId"
        case format = "Format"
        case `prefix` = "Prefix"
    }

    static func writingClosure(_ value: S3ClientTypes.AnalyticsS3BucketDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Bucket")].write(value.bucket)
        try writer[.init("BucketAccountId")].write(value.bucketAccountId)
        try writer[.init("Format")].write(value.format)
        try writer[.init("Prefix")].write(value.`prefix`)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsS3ExportFileFormat.self, forKey: .format)
        format = formatDecoded
        let bucketAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketAccountId)
        bucketAccountId = bucketAccountIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension S3ClientTypes {
    /// Contains information about where to publish the analytics results.
    public struct AnalyticsS3BucketDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the bucket to which data is exported.
        /// This member is required.
        public var bucket: Swift.String?
        /// The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data. Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        public var bucketAccountId: Swift.String?
        /// Specifies the file format used when exporting data to Amazon S3.
        /// This member is required.
        public var format: S3ClientTypes.AnalyticsS3ExportFileFormat?
        /// The prefix to use when exporting data. The prefix is prepended to all results.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            bucketAccountId: Swift.String? = nil,
            format: S3ClientTypes.AnalyticsS3ExportFileFormat? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bucketAccountId = bucketAccountId
            self.format = format
            self.`prefix` = `prefix`
        }
    }

}

extension S3ClientTypes {
    public enum AnalyticsS3ExportFileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsS3ExportFileFormat] {
            return [
                .csv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnalyticsS3ExportFileFormat(rawValue: rawValue) ?? AnalyticsS3ExportFileFormat.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ArchiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [ArchiveStatus] {
            return [
                .archiveAccess,
                .deepArchiveAccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArchiveStatus(rawValue: rawValue) ?? ArchiveStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Bucket: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case name = "Name"
    }

    static func writingClosure(_ value: S3ClientTypes.Bucket?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CreationDate")].writeTimestamp(value.creationDate, format: .dateTime)
        try writer[.init("Name")].write(value.name)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension S3ClientTypes {
    /// In terms of implementation, a Bucket is a resource.
    public struct Bucket: Swift.Equatable {
        /// Date the bucket was created. This date can change when making changes to your bucket, such as editing its bucket policy.
        public var creationDate: ClientRuntime.Date?
        /// The name of the bucket.
        public var name: Swift.String?

        public init(
            creationDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.name = name
        }
    }

}

extension S3ClientTypes {
    public enum BucketAccelerateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketAccelerateStatus] {
            return [
                .enabled,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketAccelerateStatus(rawValue: rawValue) ?? BucketAccelerateStatus.sdkUnknown(rawValue)
        }
    }
}

extension BucketAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The requested bucket name is not available. The bucket namespace is shared by all users of the system. Select a different name and try again.
public struct BucketAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "BucketAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension BucketAlreadyOwnedByYou {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all Amazon Web Services Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs).
public struct BucketAlreadyOwnedByYou: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "BucketAlreadyOwnedByYou" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {
    public enum BucketCannedACL: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketCannedACL] {
            return [
                .authenticatedRead,
                .private,
                .publicRead,
                .publicReadWrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketCannedACL(rawValue: rawValue) ?? BucketCannedACL.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.BucketInfo: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRedundancy = "DataRedundancy"
        case type = "Type"
    }

    static func writingClosure(_ value: S3ClientTypes.BucketInfo?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DataRedundancy")].write(value.dataRedundancy)
        try writer[.init("Type")].write(value.type)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataRedundancyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DataRedundancy.self, forKey: .dataRedundancy)
        dataRedundancy = dataRedundancyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketType.self, forKey: .type)
        type = typeDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the information about the bucket that will be created. For more information about directory buckets, see [Directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) in the Amazon S3 User Guide. This functionality is only supported by directory buckets.
    public struct BucketInfo: Swift.Equatable {
        /// The number of Availability Zone that's used for redundancy for the bucket.
        public var dataRedundancy: S3ClientTypes.DataRedundancy?
        /// The type of bucket.
        public var type: S3ClientTypes.BucketType?

        public init(
            dataRedundancy: S3ClientTypes.DataRedundancy? = nil,
            type: S3ClientTypes.BucketType? = nil
        )
        {
            self.dataRedundancy = dataRedundancy
            self.type = type
        }
    }

}

extension S3ClientTypes.BucketLifecycleConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    static func writingClosure(_ value: S3ClientTypes.BucketLifecycleConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Rule")].writeList(value.rules, memberWritingClosure: S3ClientTypes.LifecycleRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.LifecycleRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.LifecycleRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.LifecycleRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes {
    /// Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct BucketLifecycleConfiguration: Swift.Equatable {
        /// A lifecycle rule for individual objects in an Amazon S3 bucket.
        /// This member is required.
        public var rules: [S3ClientTypes.LifecycleRule]?

        public init(
            rules: [S3ClientTypes.LifecycleRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes {
    public enum BucketLocationConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eu
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSouth2
        case apSoutheast1
        case apSoutheast2
        case apSoutheast3
        case caCentral1
        case cnNorth1
        case cnNorthwest1
        case euCentral1
        case euNorth1
        case euSouth1
        case euSouth2
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast2
        case usGovEast1
        case usGovWest1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLocationConstraint] {
            return [
                .eu,
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSouth2,
                .apSoutheast1,
                .apSoutheast2,
                .apSoutheast3,
                .caCentral1,
                .cnNorth1,
                .cnNorthwest1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euSouth2,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast2,
                .usGovEast1,
                .usGovWest1,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eu: return "EU"
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSouth2: return "ap-south-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .apSoutheast3: return "ap-southeast-3"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .cnNorthwest1: return "cn-northwest-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euSouth2: return "eu-south-2"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast2: return "us-east-2"
            case .usGovEast1: return "us-gov-east-1"
            case .usGovWest1: return "us-gov-west-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketLocationConstraint(rawValue: rawValue) ?? BucketLocationConstraint.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.BucketLoggingStatus: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingEnabled = "LoggingEnabled"
    }

    static func writingClosure(_ value: S3ClientTypes.BucketLoggingStatus?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("LoggingEnabled")].write(value.loggingEnabled, writingClosure: S3ClientTypes.LoggingEnabled.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LoggingEnabled.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
    }
}

extension S3ClientTypes {
    /// Container for logging status information.
    public struct BucketLoggingStatus: Swift.Equatable {
        /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
        public var loggingEnabled: S3ClientTypes.LoggingEnabled?

        public init(
            loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
        )
        {
            self.loggingEnabled = loggingEnabled
        }
    }

}

extension S3ClientTypes {
    public enum BucketLogsPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullControl
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLogsPermission] {
            return [
                .fullControl,
                .read,
                .write,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketLogsPermission(rawValue: rawValue) ?? BucketLogsPermission.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum BucketType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directory
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketType] {
            return [
                .directory,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directory: return "Directory"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketType(rawValue: rawValue) ?? BucketType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum BucketVersioningStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketVersioningStatus] {
            return [
                .enabled,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketVersioningStatus(rawValue: rawValue) ?? BucketVersioningStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.CORSConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case corsRules = "CORSRule"
    }

    static func writingClosure(_ value: S3ClientTypes.CORSConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CORSRule")].writeList(value.corsRules, memberWritingClosure: S3ClientTypes.CORSRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.corsRules) {
            let corsRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .corsRules)
            if corsRulesWrappedContainer != nil {
                let corsRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CORSRule].self, forKey: .corsRules)
                var corsRulesBuffer:[S3ClientTypes.CORSRule]? = nil
                if let corsRulesContainer = corsRulesContainer {
                    corsRulesBuffer = [S3ClientTypes.CORSRule]()
                    for structureContainer0 in corsRulesContainer {
                        corsRulesBuffer?.append(structureContainer0)
                    }
                }
                corsRules = corsRulesBuffer
            } else {
                corsRules = []
            }
        } else {
            corsRules = nil
        }
    }
}

extension S3ClientTypes {
    /// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon S3 User Guide.
    public struct CORSConfiguration: Swift.Equatable {
        /// A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
        /// This member is required.
        public var corsRules: [S3ClientTypes.CORSRule]?

        public init(
            corsRules: [S3ClientTypes.CORSRule]? = nil
        )
        {
            self.corsRules = corsRules
        }
    }

}

extension S3ClientTypes.CORSRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHeaders = "AllowedHeader"
        case allowedMethods = "AllowedMethod"
        case allowedOrigins = "AllowedOrigin"
        case exposeHeaders = "ExposeHeader"
        case id = "ID"
        case maxAgeSeconds = "MaxAgeSeconds"
    }

    static func writingClosure(_ value: S3ClientTypes.CORSRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AllowedHeader")].writeList(value.allowedHeaders, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("AllowedMethod")].writeList(value.allowedMethods, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("AllowedOrigin")].writeList(value.allowedOrigins, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("ExposeHeader")].writeList(value.exposeHeaders, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("ID")].write(value.id)
        try writer[.init("MaxAgeSeconds")].write(value.maxAgeSeconds)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        if containerValues.contains(.allowedHeaders) {
            let allowedHeadersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedHeaders)
            if allowedHeadersWrappedContainer != nil {
                let allowedHeadersContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedHeaders)
                var allowedHeadersBuffer:[Swift.String]? = nil
                if let allowedHeadersContainer = allowedHeadersContainer {
                    allowedHeadersBuffer = [Swift.String]()
                    for stringContainer0 in allowedHeadersContainer {
                        allowedHeadersBuffer?.append(stringContainer0)
                    }
                }
                allowedHeaders = allowedHeadersBuffer
            } else {
                allowedHeaders = []
            }
        } else {
            allowedHeaders = nil
        }
        if containerValues.contains(.allowedMethods) {
            let allowedMethodsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedMethods)
            if allowedMethodsWrappedContainer != nil {
                let allowedMethodsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedMethods)
                var allowedMethodsBuffer:[Swift.String]? = nil
                if let allowedMethodsContainer = allowedMethodsContainer {
                    allowedMethodsBuffer = [Swift.String]()
                    for stringContainer0 in allowedMethodsContainer {
                        allowedMethodsBuffer?.append(stringContainer0)
                    }
                }
                allowedMethods = allowedMethodsBuffer
            } else {
                allowedMethods = []
            }
        } else {
            allowedMethods = nil
        }
        if containerValues.contains(.allowedOrigins) {
            let allowedOriginsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedOrigins)
            if allowedOriginsWrappedContainer != nil {
                let allowedOriginsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedOrigins)
                var allowedOriginsBuffer:[Swift.String]? = nil
                if let allowedOriginsContainer = allowedOriginsContainer {
                    allowedOriginsBuffer = [Swift.String]()
                    for stringContainer0 in allowedOriginsContainer {
                        allowedOriginsBuffer?.append(stringContainer0)
                    }
                }
                allowedOrigins = allowedOriginsBuffer
            } else {
                allowedOrigins = []
            }
        } else {
            allowedOrigins = nil
        }
        if containerValues.contains(.exposeHeaders) {
            let exposeHeadersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .exposeHeaders)
            if exposeHeadersWrappedContainer != nil {
                let exposeHeadersContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .exposeHeaders)
                var exposeHeadersBuffer:[Swift.String]? = nil
                if let exposeHeadersContainer = exposeHeadersContainer {
                    exposeHeadersBuffer = [Swift.String]()
                    for stringContainer0 in exposeHeadersContainer {
                        exposeHeadersBuffer?.append(stringContainer0)
                    }
                }
                exposeHeaders = exposeHeadersBuffer
            } else {
                exposeHeaders = []
            }
        } else {
            exposeHeaders = nil
        }
        let maxAgeSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAgeSeconds)
        maxAgeSeconds = maxAgeSecondsDecoded
    }
}

extension S3ClientTypes {
    /// Specifies a cross-origin access rule for an Amazon S3 bucket.
    public struct CORSRule: Swift.Equatable {
        /// Headers that are specified in the Access-Control-Request-Headers header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
        public var allowedHeaders: [Swift.String]?
        /// An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, and DELETE.
        /// This member is required.
        public var allowedMethods: [Swift.String]?
        /// One or more origins you want customers to be able to access the bucket from.
        /// This member is required.
        public var allowedOrigins: [Swift.String]?
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public var exposeHeaders: [Swift.String]?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var id: Swift.String?
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public var maxAgeSeconds: Swift.Int?

        public init(
            allowedHeaders: [Swift.String]? = nil,
            allowedMethods: [Swift.String]? = nil,
            allowedOrigins: [Swift.String]? = nil,
            exposeHeaders: [Swift.String]? = nil,
            id: Swift.String? = nil,
            maxAgeSeconds: Swift.Int? = nil
        )
        {
            self.allowedHeaders = allowedHeaders
            self.allowedMethods = allowedMethods
            self.allowedOrigins = allowedOrigins
            self.exposeHeaders = exposeHeaders
            self.id = id
            self.maxAgeSeconds = maxAgeSeconds
        }
    }

}

extension S3ClientTypes.CSVInput: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
        case comments = "Comments"
        case fieldDelimiter = "FieldDelimiter"
        case fileHeaderInfo = "FileHeaderInfo"
        case quoteCharacter = "QuoteCharacter"
        case quoteEscapeCharacter = "QuoteEscapeCharacter"
        case recordDelimiter = "RecordDelimiter"
    }

    static func writingClosure(_ value: S3ClientTypes.CSVInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AllowQuotedRecordDelimiter")].write(value.allowQuotedRecordDelimiter)
        try writer[.init("Comments")].write(value.comments)
        try writer[.init("FieldDelimiter")].write(value.fieldDelimiter)
        try writer[.init("FileHeaderInfo")].write(value.fileHeaderInfo)
        try writer[.init("QuoteCharacter")].write(value.quoteCharacter)
        try writer[.init("QuoteEscapeCharacter")].write(value.quoteEscapeCharacter)
        try writer[.init("RecordDelimiter")].write(value.recordDelimiter)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileHeaderInfoDecoded = try containerValues.decodeIfPresent(S3ClientTypes.FileHeaderInfo.self, forKey: .fileHeaderInfo)
        fileHeaderInfo = fileHeaderInfoDecoded
        let commentsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comments)
        comments = commentsDecoded
        let quoteEscapeCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteEscapeCharacter)
        quoteEscapeCharacter = quoteEscapeCharacterDecoded
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
        let fieldDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldDelimiter)
        fieldDelimiter = fieldDelimiterDecoded
        let quoteCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteCharacter)
        quoteCharacter = quoteCharacterDecoded
        let allowQuotedRecordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowQuotedRecordDelimiter)
        allowQuotedRecordDelimiter = allowQuotedRecordDelimiterDecoded
    }
}

extension S3ClientTypes {
    /// Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
    public struct CSVInput: Swift.Equatable {
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public var allowQuotedRecordDelimiter: Swift.Bool?
        /// A single character used to indicate that a row should be ignored when the character is present at the start of that row. You can specify any character to indicate a comment line. The default character is #. Default: #
        public var comments: Swift.String?
        /// A single character used to separate individual fields in a record. You can specify an arbitrary delimiter.
        public var fieldDelimiter: Swift.String?
        /// Describes the first line of input. Valid values are:
        ///
        /// * NONE: First line is not a header.
        ///
        /// * IGNORE: First line is a header, but you can't use the header values to indicate the column in an expression. You can use column position (such as _1, _2, …) to indicate the column (SELECT s._1 FROM OBJECT s).
        ///
        /// * Use: First line is a header, and you can use the header value to identify a column in an expression (SELECT "name" FROM OBJECT).
        public var fileHeaderInfo: S3ClientTypes.FileHeaderInfo?
        /// A single character used for escaping when the field delimiter is part of the value. For example, if the value is a, b, Amazon S3 wraps this field value in quotation marks, as follows: " a , b ". Type: String Default: " Ancestors: CSV
        public var quoteCharacter: Swift.String?
        /// A single character used for escaping the quotation mark character inside an already escaped value. For example, the value """ a , b """ is parsed as " a , b ".
        public var quoteEscapeCharacter: Swift.String?
        /// A single character used to separate individual records in the input. Instead of the default value, you can specify an arbitrary delimiter.
        public var recordDelimiter: Swift.String?

        public init(
            allowQuotedRecordDelimiter: Swift.Bool? = nil,
            comments: Swift.String? = nil,
            fieldDelimiter: Swift.String? = nil,
            fileHeaderInfo: S3ClientTypes.FileHeaderInfo? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.comments = comments
            self.fieldDelimiter = fieldDelimiter
            self.fileHeaderInfo = fileHeaderInfo
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes.CSVOutput: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldDelimiter = "FieldDelimiter"
        case quoteCharacter = "QuoteCharacter"
        case quoteEscapeCharacter = "QuoteEscapeCharacter"
        case quoteFields = "QuoteFields"
        case recordDelimiter = "RecordDelimiter"
    }

    static func writingClosure(_ value: S3ClientTypes.CSVOutput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("FieldDelimiter")].write(value.fieldDelimiter)
        try writer[.init("QuoteCharacter")].write(value.quoteCharacter)
        try writer[.init("QuoteEscapeCharacter")].write(value.quoteEscapeCharacter)
        try writer[.init("QuoteFields")].write(value.quoteFields)
        try writer[.init("RecordDelimiter")].write(value.recordDelimiter)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quoteFieldsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.QuoteFields.self, forKey: .quoteFields)
        quoteFields = quoteFieldsDecoded
        let quoteEscapeCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteEscapeCharacter)
        quoteEscapeCharacter = quoteEscapeCharacterDecoded
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
        let fieldDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldDelimiter)
        fieldDelimiter = fieldDelimiterDecoded
        let quoteCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteCharacter)
        quoteCharacter = quoteCharacterDecoded
    }
}

extension S3ClientTypes {
    /// Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
    public struct CSVOutput: Swift.Equatable {
        /// The value used to separate individual fields in a record. You can specify an arbitrary delimiter.
        public var fieldDelimiter: Swift.String?
        /// A single character used for escaping when the field delimiter is part of the value. For example, if the value is a, b, Amazon S3 wraps this field value in quotation marks, as follows: " a , b ".
        public var quoteCharacter: Swift.String?
        /// The single character used for escaping the quote character inside an already escaped value.
        public var quoteEscapeCharacter: Swift.String?
        /// Indicates whether to use quotation marks around output fields.
        ///
        /// * ALWAYS: Always use quotation marks for output fields.
        ///
        /// * ASNEEDED: Use quotation marks for output fields when needed.
        public var quoteFields: S3ClientTypes.QuoteFields?
        /// A single character used to separate individual records in the output. Instead of the default value, you can specify an arbitrary delimiter.
        public var recordDelimiter: Swift.String?

        public init(
            fieldDelimiter: Swift.String? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            quoteFields: S3ClientTypes.QuoteFields? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.quoteFields = quoteFields
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes.Checksum: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
    }

    static func writingClosure(_ value: S3ClientTypes.Checksum?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

extension S3ClientTypes {
    /// Contains all the possible checksum or digest values for an object.
    public struct Checksum: Swift.Equatable {
        /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
        }
    }

}

extension S3ClientTypes {
    public enum ChecksumAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crc32
        case crc32c
        case sha1
        case sha256
        case sdkUnknown(Swift.String)

        public static var allCases: [ChecksumAlgorithm] {
            return [
                .crc32,
                .crc32c,
                .sha1,
                .sha256,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crc32: return "CRC32"
            case .crc32c: return "CRC32C"
            case .sha1: return "SHA1"
            case .sha256: return "SHA256"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChecksumAlgorithm(rawValue: rawValue) ?? ChecksumAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ChecksumMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ChecksumMode] {
            return [
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChecksumMode(rawValue: rawValue) ?? ChecksumMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.CommonPrefix: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `prefix` = "Prefix"
    }

    static func writingClosure(_ value: S3ClientTypes.CommonPrefix?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Prefix")].write(value.`prefix`)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension S3ClientTypes {
    /// Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/.
    public struct CommonPrefix: Swift.Equatable {
        /// Container for the specified common prefix.
        public var `prefix`: Swift.String?

        public init(
            `prefix`: Swift.String? = nil
        )
        {
            self.`prefix` = `prefix`
        }
    }

}

extension CompleteMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadInput(bucket: \(Swift.String(describing: bucket)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), multipartUpload: \(Swift.String(describing: multipartUpload)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension CompleteMultipartUploadInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multipartUpload = "CompleteMultipartUpload"
    }

    static func writingClosure(_ value: CompleteMultipartUploadInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CompleteMultipartUpload")].write(value.multipartUpload, writingClosure: S3ClientTypes.CompletedMultipartUpload.writingClosure(_:to:))
    }
}

extension CompleteMultipartUploadInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumCRC32 = checksumCRC32 {
            items.add(Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = checksumCRC32C {
            items.add(Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = checksumSHA1 {
            items.add(Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = checksumSHA256 {
            items.add(Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension CompleteMultipartUploadInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "CompleteMultipartUpload"))
            guard let uploadId = uploadId else {
                let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            items.append(uploadIdQueryItem)
            return items
        }
    }
}

extension CompleteMultipartUploadInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct CompleteMultipartUploadInput: Swift.Equatable {
    /// Name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// The container for the multipart upload request information.
    public var multipartUpload: S3ClientTypes.CompletedMultipartUpload?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is required only when the object was created using a checksum algorithm or if your bucket policy requires the use of SSE-C. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html#ssec-require-condition-key) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// ID for the initiated multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        multipartUpload: S3ClientTypes.CompletedMultipartUpload? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.multipartUpload = multipartUpload
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

struct CompleteMultipartUploadInputBody: Swift.Equatable {
    let multipartUpload: S3ClientTypes.CompletedMultipartUpload?
}

extension CompleteMultipartUploadInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multipartUpload = "CompleteMultipartUpload"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multipartUploadDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CompletedMultipartUpload.self, forKey: .multipartUpload)
        multipartUpload = multipartUploadDecoded
    }
}

extension CompleteMultipartUploadOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadOutput(bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), key: \(Swift.String(describing: key)), location: \(Swift.String(describing: location)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension CompleteMultipartUploadOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CompleteMultipartUploadOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.checksumCRC32 = output.checksumCRC32
            self.checksumCRC32C = output.checksumCRC32C
            self.checksumSHA1 = output.checksumSHA1
            self.checksumSHA256 = output.checksumSHA256
            self.eTag = output.eTag
            self.key = output.key
            self.location = output.location
        } else {
            self.bucket = nil
            self.checksumCRC32 = nil
            self.checksumCRC32C = nil
            self.checksumSHA1 = nil
            self.checksumSHA256 = nil
            self.eTag = nil
            self.key = nil
            self.location = nil
        }
    }
}

public struct CompleteMultipartUploadOutput: Swift.Equatable {
    /// The name of the bucket that contains the newly created object. Does not return the access point ARN or access point alias if used. Access points are not supported by directory buckets.
    public var bucket: Swift.String?
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag that identifies the newly created object's data. Objects with different object data will have different entity tags. The entity tag is an opaque string. The entity tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5 digest of the object data, it will contain one or more nonhexadecimal characters and/or will consist of less than 32 or more than 32 hexadecimal digits. For more information about how the entity tag is calculated, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var eTag: Swift.String?
    /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The object key of the newly created object.
    public var key: Swift.String?
    /// The URI that identifies the newly created object.
    public var location: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the newly created object, in case the bucket has versioning turned on. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        key: Swift.String? = nil,
        location: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.expiration = expiration
        self.key = key
        self.location = location
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

struct CompleteMultipartUploadOutputBody: Swift.Equatable {
    let location: Swift.String?
    let bucket: Swift.String?
    let key: Swift.String?
    let eTag: Swift.String?
    let checksumCRC32: Swift.String?
    let checksumCRC32C: Swift.String?
    let checksumSHA1: Swift.String?
    let checksumSHA256: Swift.String?
}

extension CompleteMultipartUploadOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case eTag = "ETag"
        case key = "Key"
        case location = "Location"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

enum CompleteMultipartUploadOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.CompletedMultipartUpload: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parts = "Part"
    }

    static func writingClosure(_ value: S3ClientTypes.CompletedMultipartUpload?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Part")].writeList(value.parts, memberWritingClosure: S3ClientTypes.CompletedPart.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.CompletedPart].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.CompletedPart]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.CompletedPart]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
    }
}

extension S3ClientTypes {
    /// The container for the completed multipart upload details.
    public struct CompletedMultipartUpload: Swift.Equatable {
        /// Array of CompletedPart data types. If you do not supply a valid Part with your request, the service sends back an HTTP 400 response.
        public var parts: [S3ClientTypes.CompletedPart]?

        public init(
            parts: [S3ClientTypes.CompletedPart]? = nil
        )
        {
            self.parts = parts
        }
    }

}

extension S3ClientTypes.CompletedPart: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case eTag = "ETag"
        case partNumber = "PartNumber"
    }

    static func writingClosure(_ value: S3ClientTypes.CompletedPart?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("PartNumber")].write(value.partNumber)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
        let partNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partNumber)
        partNumber = partNumberDecoded
    }
}

extension S3ClientTypes {
    /// Details of the parts that were uploaded.
    public struct CompletedPart: Swift.Equatable {
        /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag returned when the part was uploaded.
        public var eTag: Swift.String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        ///
        /// * General purpose buckets - In CompleteMultipartUpload, when a additional checksum (including x-amz-checksum-crc32, x-amz-checksum-crc32c, x-amz-checksum-sha1, or x-amz-checksum-sha256) is applied to each part, the PartNumber must start at 1 and the part numbers must be consecutive. Otherwise, Amazon S3 generates an HTTP 400 Bad Request status code and an InvalidPartOrder error code.
        ///
        /// * Directory buckets - In CompleteMultipartUpload, the PartNumber must start at 1 and the part numbers must be consecutive.
        public var partNumber: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            partNumber: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.partNumber = partNumber
        }
    }

}

extension S3ClientTypes {
    public enum CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bzip2
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionType] {
            return [
                .bzip2,
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bzip2: return "BZIP2"
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompressionType(rawValue: rawValue) ?? CompressionType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Condition: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
        case keyPrefixEquals = "KeyPrefixEquals"
    }

    static func writingClosure(_ value: S3ClientTypes.Condition?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("HttpErrorCodeReturnedEquals")].write(value.httpErrorCodeReturnedEquals)
        try writer[.init("KeyPrefixEquals")].write(value.keyPrefixEquals)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpErrorCodeReturnedEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpErrorCodeReturnedEquals)
        httpErrorCodeReturnedEquals = httpErrorCodeReturnedEqualsDecoded
        let keyPrefixEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefixEquals)
        keyPrefixEquals = keyPrefixEqualsDecoded
    }
}

extension S3ClientTypes {
    /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
    public struct Condition: Swift.Equatable {
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public var httpErrorCodeReturnedEquals: Swift.String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var keyPrefixEquals: Swift.String?

        public init(
            httpErrorCodeReturnedEquals: Swift.String? = nil,
            keyPrefixEquals: Swift.String? = nil
        )
        {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }
    }

}

extension S3ClientTypes.ContinuationEvent: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.ContinuationEvent?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    ///
    public struct ContinuationEvent: Swift.Equatable {

        public init() { }
    }

}

extension CopyObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectInput(acl: \(Swift.String(describing: acl)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), metadataDirective: \(Swift.String(describing: metadataDirective)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), taggingDirective: \(Swift.String(describing: taggingDirective)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), copySourceSSECustomerKey: \"CONTENT_REDACTED\", sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension CopyObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = bucketKeyEnabled {
            items.add(Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = cacheControl {
            items.add(Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentDisposition = contentDisposition {
            items.add(Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = contentEncoding {
            items.add(Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = contentLanguage {
            items.add(Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentType = contentType {
            items.add(Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let copySource = copySource {
            items.add(Header(name: "x-amz-copy-source", value: Swift.String(copySource)))
        }
        if let copySourceIfMatch = copySourceIfMatch {
            items.add(Header(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch)))
        }
        if let copySourceIfModifiedSince = copySourceIfModifiedSince {
            items.add(Header(name: "x-amz-copy-source-if-modified-since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: copySourceIfModifiedSince))))
        }
        if let copySourceIfNoneMatch = copySourceIfNoneMatch {
            items.add(Header(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch)))
        }
        if let copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince {
            items.add(Header(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: copySourceIfUnmodifiedSince))))
        }
        if let copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm)))
        }
        if let copySourceSSECustomerKey = copySourceSSECustomerKey {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey)))
        }
        if let copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5 {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expectedSourceBucketOwner = expectedSourceBucketOwner {
            items.add(Header(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner)))
        }
        if let expires = expires {
            items.add(Header(name: "Expires", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: expires))))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let metadataDirective = metadataDirective {
            items.add(Header(name: "x-amz-metadata-directive", value: Swift.String(metadataDirective.rawValue)))
        }
        if let objectLockLegalHoldStatus = objectLockLegalHoldStatus {
            items.add(Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = objectLockMode {
            items.add(Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = objectLockRetainUntilDate {
            items.add(Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = ssekmsEncryptionContext {
            items.add(Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = ssekmsKeyId {
            items.add(Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = serverSideEncryption {
            items.add(Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = storageClass {
            items.add(Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = tagging {
            items.add(Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let taggingDirective = taggingDirective {
            items.add(Header(name: "x-amz-tagging-directive", value: Swift.String(taggingDirective.rawValue)))
        }
        if let websiteRedirectLocation = websiteRedirectLocation {
            items.add(Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension CopyObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "CopyObject"))
            return items
        }
    }
}

extension CopyObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct CopyObjectInput: Swift.Equatable {
    /// The canned access control list (ACL) to apply to the object. When you copy an object, the ACL metadata is not preserved and is set to private by default. Only the owner has full access control. To override the default ACL setting, specify a new ACL when you generate a copy request. For more information, see [Using ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html). If the destination bucket that you're copying objects to uses the bucket owner enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect permissions. Buckets that use this setting only accept PUT requests that don't specify an ACL or PUT requests that specify bucket owner full control ACLs, such as the bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed in the XML format. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide.
    ///
    /// * If your destination bucket uses the bucket owner enforced setting for Object Ownership, all objects written to the bucket by any account will be owned by the bucket owner.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The name of the destination bucket. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). If a target object uses SSE-KMS, you can enable an S3 Bucket Key for the object. Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Specifying this header with a COPY action doesn’t affect bucket-level settings for S3 Bucket Key. For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the Amazon S3 User Guide. This functionality is not supported when the destination bucket is a directory bucket.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies the caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// Indicates the algorithm that you want Amazon S3 to use to create the checksum for the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. When you copy an object, if the source object has a checksum, that checksum value will be copied to the new object by default. If the CopyObject request does not include this x-amz-checksum-algorithm header, the checksum algorithm will be copied from the source object to the destination object (if it's present on the source object). You can optionally specify a different checksum algorithm to use with the x-amz-checksum-algorithm header. Unrecognized or unsupported values will respond with the HTTP status code 400 Bad Request. For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Specifies presentational information for the object. Indicates whether an object should be displayed in a web browser or downloaded as a file. It allows specifying the desired filename for the downloaded file.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For directory buckets, only the aws-chunked value is supported in this header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// A standard MIME type that describes the format of the object data.
    public var contentType: Swift.String?
    /// Specifies the source object for the copy operation. The source object can be up to 5 GB. If the source object is an object that was uploaded by using a multipart upload, the object copy will be a single part object after the source object is copied to the destination bucket. You specify the value of the copy source in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):
    ///
    /// * For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, to copy the object reports/january.pdf from the general purpose bucket awsexamplebucket, use awsexamplebucket/reports/january.pdf. The value must be URL-encoded. To copy the object reports/january.pdf from the directory bucket awsexamplebucket--use1-az5--x-s3, use awsexamplebucket--use1-az5--x-s3/reports/january.pdf. The value must be URL-encoded.
    ///
    /// * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:::accesspoint//object/. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
    ///
    /// * Amazon S3 supports copy operations using Access points only when the source and destination buckets are in the same Amazon Web Services Region.
    ///
    /// * Access points are not supported by directory buckets.
    ///
    ///
    /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:::outpost//object/. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL-encoded.
    ///
    ///
    /// If your source bucket versioning is enabled, the x-amz-copy-source header by default identifies the current version of an object to copy. If the current version is a delete marker, Amazon S3 behaves as if the object was deleted. To copy a different version, use the versionId query parameter. Specifically, append ?versionId= to the value (for example, awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If you don't specify a version ID, Amazon S3 copies the latest version of the source object. If you enable versioning on the destination bucket, Amazon S3 generates a unique version ID for the copied object. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the x-amz-version-id response header in the response. If you do not enable versioning or suspend it on the destination bucket, the version ID that Amazon S3 generates in the x-amz-version-id response header is always null. Directory buckets - S3 Versioning isn't enabled and supported for directory buckets.
    /// This member is required.
    public var copySource: Swift.String?
    /// Copies the object if its entity tag (ETag) matches the specified tag. If both the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data:
    ///
    /// * x-amz-copy-source-if-match condition evaluates to true
    ///
    /// * x-amz-copy-source-if-unmodified-since condition evaluates to false
    public var copySourceIfMatch: Swift.String?
    /// Copies the object if it has been modified since the specified time. If both the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request and evaluate as follows, Amazon S3 returns the 412 Precondition Failed response code:
    ///
    /// * x-amz-copy-source-if-none-match condition evaluates to false
    ///
    /// * x-amz-copy-source-if-modified-since condition evaluates to true
    public var copySourceIfModifiedSince: ClientRuntime.Date?
    /// Copies the object if its entity tag (ETag) is different than the specified ETag. If both the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request and evaluate as follows, Amazon S3 returns the 412 Precondition Failed response code:
    ///
    /// * x-amz-copy-source-if-none-match condition evaluates to false
    ///
    /// * x-amz-copy-source-if-modified-since condition evaluates to true
    public var copySourceIfNoneMatch: Swift.String?
    /// Copies the object if it hasn't been modified since the specified time. If both the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data:
    ///
    /// * x-amz-copy-source-if-match condition evaluates to true
    ///
    /// * x-amz-copy-source-if-unmodified-since condition evaluates to false
    public var copySourceIfUnmodifiedSince: ClientRuntime.Date?
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256). If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be the same one that was used when the source object was created. If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKeyMD5: Swift.String?
    /// The account ID of the expected destination bucket owner. If the account ID that you provide does not match the actual owner of the destination bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The account ID of the expected source bucket owner. If the account ID that you provide does not match the actual owner of the source bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedSourceBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: ClientRuntime.Date?
    /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to read the object data and its metadata.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the object ACL.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to write the ACL for the applicable object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// The key of the destination object.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// Specifies whether the metadata is copied from the source object or replaced with metadata that's provided in the request. When copying an object, you can preserve all metadata (the default) or specify new metadata. If this header isn’t specified, COPY is the default behavior. General purpose bucket - For general purpose buckets, when you grant permissions, you can use the s3:x-amz-metadata-directive condition key to enforce certain metadata behavior when objects are uploaded. For more information, see [Amazon S3 condition key examples](https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html) in the Amazon S3 User Guide. x-amz-website-redirect-location is unique to each object and is not copied when using the x-amz-metadata-directive header. To copy the value, you must specify x-amz-website-redirect-location in the request header.
    public var metadataDirective: S3ClientTypes.MetadataDirective?
    /// Specifies whether you want to apply a legal hold to the object copy. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that you want to apply to the object copy. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when you want the Object Lock of the object copy to expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). Unrecognized or unsupported values won’t write a destination object and will receive a 400 Bad Request response. Amazon S3 automatically encrypts all new objects that are copied to an S3 bucket. When copying an object, if you don't specify encryption information in your copy request, the encryption setting of the target object is set to the default encryption configuration of the destination bucket. By default, all buckets have a base level of encryption configuration that uses server-side encryption with Amazon S3 managed keys (SSE-S3). If the destination bucket has a default encryption configuration that uses server-side encryption with Key Management Service (KMS) keys (SSE-KMS), dual-layer server-side encryption with Amazon Web Services KMS keys (DSSE-KMS), or server-side encryption with customer-provided encryption keys (SSE-C), Amazon S3 uses the corresponding KMS key, or a customer-provided key to encrypt the target object copy. When you perform a CopyObject operation, if you want to use a different type of encryption setting for the target object, you can specify appropriate encryption-related headers to encrypt the target object with an Amazon S3 managed key, a KMS key, or a customer-provided key. If the encryption setting in your request is different from the default encryption configuration of the destination bucket, the encryption setting in your request takes precedence. With server-side encryption, Amazon S3 encrypts your data as it writes your data to disks in its data centers and decrypts the data when you access it. For more information about server-side encryption, see [Using Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html) in the Amazon S3 User Guide. For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). When you perform a CopyObject operation, if you want to use a different type of encryption setting for the target object, you can specify appropriate encryption-related headers to encrypt the target object with an Amazon S3 managed key, a KMS key, or a customer-provided key. If the encryption setting in your request is different from the default encryption configuration of the destination bucket, the encryption setting in your request takes precedence. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded. Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This value must be explicitly added to specify encryption context for CopyObject requests. This functionality is not supported when the destination bucket is a directory bucket.
    public var ssekmsEncryptionContext: Swift.String?
    /// Specifies the KMS ID (Key ID, Key ARN, or Key Alias) to use for object encryption. All GET and PUT requests for an object protected by KMS will fail if they're not made via SSL or using SigV4. For information about configuring any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI, see [Specifying the Signature Version in Request Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version) in the Amazon S3 User Guide. This functionality is not supported when the destination bucket is a directory bucket.
    public var ssekmsKeyId: Swift.String?
    /// If the x-amz-storage-class header is not used, the copied object will be stored in the STANDARD Storage Class by default. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class.
    ///
    /// * Directory buckets - For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects. Unsupported storage class values won't write a destination object and will respond with the HTTP status code 400 Bad Request.
    ///
    /// * Amazon S3 on Outposts - S3 on Outposts only uses the OUTPOSTS Storage Class.
    ///
    ///
    /// You can use the CopyObject action to change the storage class of an object that is already stored in Amazon S3 by using the x-amz-storage-class header. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide. Before using an object as a source object for the copy operation, you must restore a copy of it if it meets any of the following conditions:
    ///
    /// * The storage class of the source object is GLACIER or DEEP_ARCHIVE.
    ///
    /// * The storage class of the source object is INTELLIGENT_TIERING and it's [S3 Intelligent-Tiering access tier](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intelligent-tiering-overview.html#intel-tiering-tier-definition) is Archive Access or Deep Archive Access.
    ///
    ///
    /// For more information, see [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html) and [Copying Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html) in the Amazon S3 User Guide.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object copy in the destination bucket. This value must be used in conjunction with the x-amz-tagging-directive if you choose REPLACE for the x-amz-tagging-directive. If you choose COPY for the x-amz-tagging-directive, you don't need to set the x-amz-tagging header, because the tag-set will be copied from the source object directly. The tag-set must be encoded as URL Query parameters. The default value is the empty value. Directory buckets - For directory buckets in a CopyObject operation, only the empty tag-set is supported. Any requests that attempt to write non-empty tags into directory buckets will receive a 501 Not Implemented status code. When the destination bucket is a directory bucket, you will receive a 501 Not Implemented response in any of the following situations:
    ///
    /// * When you attempt to COPY the tag-set from an S3 source object that has non-empty tags.
    ///
    /// * When you attempt to REPLACE the tag-set of a source object and set a non-empty value to x-amz-tagging.
    ///
    /// * When you don't set the x-amz-tagging-directive header and the source object has non-empty tags. This is because the default value of x-amz-tagging-directive is COPY.
    ///
    ///
    /// Because only the empty tag-set is supported for directory buckets in a CopyObject operation, the following situations are allowed:
    ///
    /// * When you attempt to COPY the tag-set from a directory bucket source object that has no tags to a general purpose bucket. It copies an empty tag-set to the destination object.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a general purpose bucket source object that has non-empty tags and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and don't set the x-amz-tagging value of the directory bucket destination object. This is because the default value of x-amz-tagging is the empty value.
    public var tagging: Swift.String?
    /// Specifies whether the object tag-set is copied from the source object or replaced with the tag-set that's provided in the request. The default value is COPY. Directory buckets - For directory buckets in a CopyObject operation, only the empty tag-set is supported. Any requests that attempt to write non-empty tags into directory buckets will receive a 501 Not Implemented status code. When the destination bucket is a directory bucket, you will receive a 501 Not Implemented response in any of the following situations:
    ///
    /// * When you attempt to COPY the tag-set from an S3 source object that has non-empty tags.
    ///
    /// * When you attempt to REPLACE the tag-set of a source object and set a non-empty value to x-amz-tagging.
    ///
    /// * When you don't set the x-amz-tagging-directive header and the source object has non-empty tags. This is because the default value of x-amz-tagging-directive is COPY.
    ///
    ///
    /// Because only the empty tag-set is supported for directory buckets in a CopyObject operation, the following situations are allowed:
    ///
    /// * When you attempt to COPY the tag-set from a directory bucket source object that has no tags to a general purpose bucket. It copies an empty tag-set to the destination object.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a general purpose bucket source object that has non-empty tags and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and don't set the x-amz-tagging value of the directory bucket destination object. This is because the default value of x-amz-tagging is the empty value.
    public var taggingDirective: S3ClientTypes.TaggingDirective?
    /// If the destination bucket is configured as a website, redirects requests for this object copy to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This value is unique to each object and is not copied when using the x-amz-metadata-directive header. Instead, you may opt to provide this header in combination with the x-amz-metadata-directive header. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: ClientRuntime.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: ClientRuntime.Date? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        metadataDirective: S3ClientTypes.MetadataDirective? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        taggingDirective: S3ClientTypes.TaggingDirective? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.metadataDirective = metadataDirective
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.taggingDirective = taggingDirective
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension CopyObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyObjectResult: \(Swift.String(describing: copyObjectResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension CopyObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            self.copySourceVersionId = copySourceVersionIdHeaderValue
        } else {
            self.copySourceVersionId = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        } else {
            self.ssekmsEncryptionContext = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.CopyObjectResult = try responseDecoder.decode(responseBody: data)
            self.copyObjectResult = output
        } else {
            self.copyObjectResult = nil
        }
    }
}

public struct CopyObjectOutput: Swift.Equatable {
    /// Indicates whether the copied object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Container for all response elements.
    public var copyObjectResult: S3ClientTypes.CopyObjectResult?
    /// Version ID of the source object that was copied. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceVersionId: Swift.String?
    /// If the object expiration is configured, the response includes this header. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This functionality is not supported for directory buckets.
    public var ssekmsEncryptionContext: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the newly created copy. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        copyObjectResult: S3ClientTypes.CopyObjectResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyObjectResult = copyObjectResult
        self.copySourceVersionId = copySourceVersionId
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

struct CopyObjectOutputBody: Swift.Equatable {
    let copyObjectResult: S3ClientTypes.CopyObjectResult?
}

extension CopyObjectOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyObjectResult = "CopyObjectResult"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyObjectResultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CopyObjectResult.self, forKey: .copyObjectResult)
        copyObjectResult = copyObjectResultDecoded
    }
}

enum CopyObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "ObjectNotInActiveTierError": return try await ObjectNotInActiveTierError(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.CopyObjectResult: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case eTag = "ETag"
        case lastModified = "LastModified"
    }

    static func writingClosure(_ value: S3ClientTypes.CopyObjectResult?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

extension S3ClientTypes {
    /// Container for all response elements.
    public struct CopyObjectResult: Swift.Equatable {
        /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata.
        public var eTag: Swift.String?
        /// Creation date of the object.
        public var lastModified: ClientRuntime.Date?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }

}

extension S3ClientTypes.CopyPartResult: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case eTag = "ETag"
        case lastModified = "LastModified"
    }

    static func writingClosure(_ value: S3ClientTypes.CopyPartResult?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

extension S3ClientTypes {
    /// Container for all response elements.
    public struct CopyPartResult: Swift.Equatable {
        /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag of the object.
        public var eTag: Swift.String?
        /// Date and time at which the object was uploaded.
        public var lastModified: ClientRuntime.Date?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }

}

extension S3ClientTypes.CreateBucketConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case location = "Location"
        case locationConstraint = "LocationConstraint"
    }

    static func writingClosure(_ value: S3ClientTypes.CreateBucketConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Bucket")].write(value.bucket, writingClosure: S3ClientTypes.BucketInfo.writingClosure(_:to:))
        try writer[.init("Location")].write(value.location, writingClosure: S3ClientTypes.LocationInfo.writingClosure(_:to:))
        try writer[.init("LocationConstraint")].write(value.locationConstraint)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationConstraintDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLocationConstraint.self, forKey: .locationConstraint)
        locationConstraint = locationConstraintDecoded
        let locationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LocationInfo.self, forKey: .location)
        location = locationDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketInfo.self, forKey: .bucket)
        bucket = bucketDecoded
    }
}

extension S3ClientTypes {
    /// The configuration information for the bucket.
    public struct CreateBucketConfiguration: Swift.Equatable {
        /// Specifies the information about the bucket that will be created. This functionality is only supported by directory buckets.
        public var bucket: S3ClientTypes.BucketInfo?
        /// Specifies the location where the bucket will be created. For directory buckets, the location type is Availability Zone. This functionality is only supported by directory buckets.
        public var location: S3ClientTypes.LocationInfo?
        /// Specifies the Region where the bucket will be created. You might choose a Region to optimize latency, minimize costs, or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous to create buckets in the Europe (Ireland) Region. For more information, see [Accessing a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro) in the Amazon S3 User Guide. If you don't specify a Region, the bucket is created in the US East (N. Virginia) Region (us-east-1) by default. This functionality is not supported for directory buckets.
        public var locationConstraint: S3ClientTypes.BucketLocationConstraint?

        public init(
            bucket: S3ClientTypes.BucketInfo? = nil,
            location: S3ClientTypes.LocationInfo? = nil,
            locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
        )
        {
            self.bucket = bucket
            self.location = location
            self.locationConstraint = locationConstraint
        }
    }

}

extension CreateBucketInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createBucketConfiguration = "CreateBucketConfiguration"
    }

    static func writingClosure(_ value: CreateBucketInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CreateBucketConfiguration")].write(value.createBucketConfiguration, writingClosure: S3ClientTypes.CreateBucketConfiguration.writingClosure(_:to:))
    }
}

extension CreateBucketInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = grantWrite {
            items.add(Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockEnabledForBucket = objectLockEnabledForBucket {
            items.add(Header(name: "x-amz-bucket-object-lock-enabled", value: Swift.String(objectLockEnabledForBucket)))
        }
        if let objectOwnership = objectOwnership {
            items.add(Header(name: "x-amz-object-ownership", value: Swift.String(objectOwnership.rawValue)))
        }
        return items
    }
}

extension CreateBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBucketInput: Swift.Equatable {
    /// The canned ACL to apply to the bucket. This functionality is not supported for directory buckets.
    public var acl: S3ClientTypes.BucketCannedACL?
    /// The name of the bucket to create. General purpose buckets - For information about bucket naming restrictions, see [Bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html) in the Amazon S3 User Guide. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The configuration information for the bucket.
    public var createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket. This functionality is not supported for directory buckets.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket. This functionality is not supported for directory buckets.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL. This functionality is not supported for directory buckets.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects. This functionality is not supported for directory buckets.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket. This functionality is not supported for directory buckets.
    public var grantWriteACP: Swift.String?
    /// Specifies whether you want S3 Object Lock to be enabled for the new bucket. This functionality is not supported for directory buckets.
    public var objectLockEnabledForBucket: Swift.Bool?
    /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
    public var objectOwnership: S3ClientTypes.ObjectOwnership?

    public init(
        acl: S3ClientTypes.BucketCannedACL? = nil,
        bucket: Swift.String? = nil,
        createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        objectLockEnabledForBucket: Swift.Bool? = nil,
        objectOwnership: S3ClientTypes.ObjectOwnership? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.createBucketConfiguration = createBucketConfiguration
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.objectLockEnabledForBucket = objectLockEnabledForBucket
        self.objectOwnership = objectOwnership
    }
}

struct CreateBucketInputBody: Swift.Equatable {
    let createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration?
}

extension CreateBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createBucketConfiguration = "CreateBucketConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createBucketConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CreateBucketConfiguration.self, forKey: .createBucketConfiguration)
        createBucketConfiguration = createBucketConfigurationDecoded
    }
}

extension CreateBucketOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
    }
}

public struct CreateBucketOutput: Swift.Equatable {
    /// A forward slash followed by the name of the bucket.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

enum CreateBucketOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "BucketAlreadyExists": return try await BucketAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            case "BucketAlreadyOwnedByYou": return try await BucketAlreadyOwnedByYou(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadInput(acl: \(Swift.String(describing: acl)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension CreateMultipartUploadInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = bucketKeyEnabled {
            items.add(Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = cacheControl {
            items.add(Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentDisposition = contentDisposition {
            items.add(Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = contentEncoding {
            items.add(Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = contentLanguage {
            items.add(Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentType = contentType {
            items.add(Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expires = expires {
            items.add(Header(name: "Expires", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: expires))))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockLegalHoldStatus = objectLockLegalHoldStatus {
            items.add(Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = objectLockMode {
            items.add(Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = objectLockRetainUntilDate {
            items.add(Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = ssekmsEncryptionContext {
            items.add(Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = ssekmsKeyId {
            items.add(Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = serverSideEncryption {
            items.add(Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = storageClass {
            items.add(Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = tagging {
            items.add(Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let websiteRedirectLocation = websiteRedirectLocation {
            items.add(Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension CreateMultipartUploadInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "uploads", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "CreateMultipartUpload"))
            return items
        }
    }
}

extension CreateMultipartUploadInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct CreateMultipartUploadInput: Swift.Equatable {
    /// The canned ACL to apply to the object. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL) in the Amazon S3 User Guide. By default, all objects are private. Only the owner has full access control. When uploading an object, you can grant access permissions to individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the new object. For more information, see [Using ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html). One way to grant the permissions using the request headers is to specify a canned ACL with the x-amz-acl request header.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The name of the bucket where the multipart upload is initiated and where the object is uploaded. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Specifying this header with an object action doesn’t affect bucket-level settings for S3 Bucket Key. This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// Indicates the algorithm that you want Amazon S3 to use to create the checksum for the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For directory buckets, only the aws-chunked value is supported in this header field.
    public var contentEncoding: Swift.String?
    /// The language that the content is in.
    public var contentLanguage: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: ClientRuntime.Date?
    /// Specify access permissions explicitly to give the grantee READ, READ_ACP, and WRITE_ACP permissions on the object. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Specify access permissions explicitly to allow grantee to read the object data and its metadata. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Specify access permissions explicitly to allows grantee to read the object ACL. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Specify access permissions explicitly to allows grantee to allow grantee to write the ACL for the applicable object. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Object key for which the multipart upload is to be initiated.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// Specifies whether you want to apply a legal hold to the uploaded object. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// Specifies the Object Lock mode that you want to apply to the uploaded object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// Specifies the date and time when you want the Object Lock to expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the customer-provided encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This functionality is not supported for directory buckets.
    public var ssekmsEncryptionContext: Swift.String?
    /// Specifies the ID (Key ID, Key ARN, or Key Alias) of the symmetric encryption customer managed key to use for object encryption. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide.
    ///
    /// * For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects.
    ///
    /// * Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. This functionality is not supported for directory buckets.
    public var tagging: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension CreateMultipartUploadOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadOutput(abortDate: \(Swift.String(describing: abortDate)), abortRuleId: \(Swift.String(describing: abortRuleId)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), key: \(Swift.String(describing: key)), requestCharged: \(Swift.String(describing: requestCharged)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), uploadId: \(Swift.String(describing: uploadId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension CreateMultipartUploadOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            self.abortDate = TimestampFormatter(format: .httpDate).date(from: abortDateHeaderValue)
        } else {
            self.abortDate = nil
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            self.abortRuleId = abortRuleIdHeaderValue
        } else {
            self.abortRuleId = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let checksumAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-algorithm") {
            self.checksumAlgorithm = S3ClientTypes.ChecksumAlgorithm(rawValue: checksumAlgorithmHeaderValue)
        } else {
            self.checksumAlgorithm = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        } else {
            self.ssekmsEncryptionContext = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateMultipartUploadOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.key = output.key
            self.uploadId = output.uploadId
        } else {
            self.bucket = nil
            self.key = nil
            self.uploadId = nil
        }
    }
}

public struct CreateMultipartUploadOutput: Swift.Equatable {
    /// If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, the response includes this header. The header indicates when the initiated multipart upload becomes eligible for an abort operation. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide. The response also includes the x-amz-abort-rule-id header that provides the ID of the lifecycle configuration rule that defines the abort action. This functionality is not supported for directory buckets.
    public var abortDate: ClientRuntime.Date?
    /// This header is returned along with the x-amz-abort-date header. It identifies the applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads. This functionality is not supported for directory buckets.
    public var abortRuleId: Swift.String?
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used. Access points are not supported by directory buckets.
    public var bucket: Swift.String?
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// The algorithm that was used to create a checksum of the object.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Object key for which the multipart upload was initiated.
    public var key: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This functionality is not supported for directory buckets.
    public var ssekmsEncryptionContext: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// ID for the initiated multipart upload.
    public var uploadId: Swift.String?

    public init(
        abortDate: ClientRuntime.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        key: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumAlgorithm = checksumAlgorithm
        self.key = key
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.uploadId = uploadId
    }
}

struct CreateMultipartUploadOutputBody: Swift.Equatable {
    let bucket: Swift.String?
    let key: Swift.String?
    let uploadId: Swift.String?
}

extension CreateMultipartUploadOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
        case uploadId = "UploadId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
    }
}

enum CreateMultipartUploadOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateSessionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let sessionMode = sessionMode {
            items.add(Header(name: "x-amz-create-session-mode", value: Swift.String(sessionMode.rawValue)))
        }
        return items
    }
}

extension CreateSessionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "session", value: nil))
            return items
        }
    }
}

extension CreateSessionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSessionInput: Swift.Equatable {
    /// The name of the bucket that you create a session for.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies the mode of the session that will be created, either ReadWrite or ReadOnly. By default, a ReadWrite session is created. A ReadWrite session is capable of executing all the Zonal endpoint APIs on a directory bucket. A ReadOnly session is constrained to execute the following Zonal endpoint APIs: GetObject, HeadObject, ListObjectsV2, GetObjectAttributes, ListParts, and ListMultipartUploads.
    public var sessionMode: S3ClientTypes.SessionMode?

    public init(
        bucket: Swift.String? = nil,
        sessionMode: S3ClientTypes.SessionMode? = nil
    )
    {
        self.bucket = bucket
        self.sessionMode = sessionMode
    }
}

extension CreateSessionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateSessionOutputBody = try responseDecoder.decode(responseBody: data)
            self.credentials = output.credentials
        } else {
            self.credentials = nil
        }
    }
}

public struct CreateSessionOutput: Swift.Equatable {
    /// The established temporary security credentials for the created session..
    /// This member is required.
    public var credentials: S3ClientTypes.SessionCredentials?

    public init(
        credentials: S3ClientTypes.SessionCredentials? = nil
    )
    {
        self.credentials = credentials
    }
}

struct CreateSessionOutputBody: Swift.Equatable {
    let credentials: S3ClientTypes.SessionCredentials?
}

extension CreateSessionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SessionCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

enum CreateSessionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchBucket": return try await NoSuchBucket(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes {
    public enum DataRedundancy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singleavailabilityzone
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRedundancy] {
            return [
                .singleavailabilityzone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singleavailabilityzone: return "SingleAvailabilityZone"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataRedundancy(rawValue: rawValue) ?? DataRedundancy.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.DefaultRetention: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case days = "Days"
        case mode = "Mode"
        case years = "Years"
    }

    static func writingClosure(_ value: S3ClientTypes.DefaultRetention?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Days")].write(value.days)
        try writer[.init("Mode")].write(value.mode)
        try writer[.init("Years")].write(value.years)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetentionMode.self, forKey: .mode)
        mode = modeDecoded
        let daysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let yearsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .years)
        years = yearsDecoded
    }
}

extension S3ClientTypes {
    /// The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.
    ///
    /// * The DefaultRetention settings require both a mode and a period.
    ///
    /// * The DefaultRetention period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
    public struct DefaultRetention: Swift.Equatable {
        /// The number of days that you want to specify for the default retention period. Must be used with Mode.
        public var days: Swift.Int?
        /// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Must be used with either Days or Years.
        public var mode: S3ClientTypes.ObjectLockRetentionMode?
        /// The number of years that you want to specify for the default retention period. Must be used with Mode.
        public var years: Swift.Int?

        public init(
            days: Swift.Int? = nil,
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            years: Swift.Int? = nil
        )
        {
            self.days = days
            self.mode = mode
            self.years = years
        }
    }

}

extension S3ClientTypes.Delete: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objects = "Object"
        case quiet = "Quiet"
    }

    static func writingClosure(_ value: S3ClientTypes.Delete?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Object")].writeList(value.objects, memberWritingClosure: S3ClientTypes.ObjectIdentifier.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("Quiet")].write(value.quiet)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.objects) {
            let objectsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .objects)
            if objectsWrappedContainer != nil {
                let objectsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectIdentifier].self, forKey: .objects)
                var objectsBuffer:[S3ClientTypes.ObjectIdentifier]? = nil
                if let objectsContainer = objectsContainer {
                    objectsBuffer = [S3ClientTypes.ObjectIdentifier]()
                    for structureContainer0 in objectsContainer {
                        objectsBuffer?.append(structureContainer0)
                    }
                }
                objects = objectsBuffer
            } else {
                objects = []
            }
        } else {
            objects = nil
        }
        let quietDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .quiet)
        quiet = quietDecoded
    }
}

extension S3ClientTypes {
    /// Container for the objects to delete.
    public struct Delete: Swift.Equatable {
        /// The object to delete. Directory buckets - For directory buckets, an object that's composed entirely of whitespace characters is not supported by the DeleteObjects API operation. The request will receive a 400 Bad Request error and none of the objects in the request will be deleted.
        /// This member is required.
        public var objects: [S3ClientTypes.ObjectIdentifier]?
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public var quiet: Swift.Bool?

        public init(
            objects: [S3ClientTypes.ObjectIdentifier]? = nil,
            quiet: Swift.Bool? = nil
        )
        {
            self.objects = objects
            self.quiet = quiet
        }
    }

}

extension DeleteBucketAnalyticsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketAnalyticsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension DeleteBucketAnalyticsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// The name of the bucket from which an analytics configuration is deleted.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension DeleteBucketAnalyticsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketAnalyticsConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketCorsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketCorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "cors", value: nil))
            return items
        }
    }
}

extension DeleteBucketCorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketCorsInput: Swift.Equatable {
    /// Specifies the bucket whose cors configuration is being deleted.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketCorsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketCorsOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketCorsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketEncryptionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketEncryptionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
            return items
        }
    }
}

extension DeleteBucketEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketEncryptionInput: Swift.Equatable {
    /// The name of the bucket containing the server-side encryption configuration to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketEncryptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketEncryptionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketEncryptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketInput: Swift.Equatable {
    /// Specifies the bucket being deleted. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketIntelligentTieringConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension DeleteBucketIntelligentTieringConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

extension DeleteBucketIntelligentTieringConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketIntelligentTieringConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketInventoryConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketInventoryConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension DeleteBucketInventoryConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketInventoryConfigurationInput: Swift.Equatable {
    /// The name of the bucket containing the inventory configuration to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension DeleteBucketInventoryConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketInventoryConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketLifecycleInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketLifecycleInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
            return items
        }
    }
}

extension DeleteBucketLifecycleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketLifecycleInput: Swift.Equatable {
    /// The bucket name of the lifecycle to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketLifecycleOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketLifecycleOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketLifecycleOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketMetricsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketMetricsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension DeleteBucketMetricsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketMetricsConfigurationInput: Swift.Equatable {
    /// The name of the bucket containing the metrics configuration to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension DeleteBucketMetricsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketMetricsConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketOwnershipControlsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketOwnershipControlsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
            return items
        }
    }
}

extension DeleteBucketOwnershipControlsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketOwnershipControlsInput: Swift.Equatable {
    /// The Amazon S3 bucket whose OwnershipControls you want to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketOwnershipControlsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketOwnershipControlsOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketPolicyInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "policy", value: nil))
            return items
        }
    }
}

extension DeleteBucketPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketPolicyInput: Swift.Equatable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketReplicationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketReplicationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "replication", value: nil))
            return items
        }
    }
}

extension DeleteBucketReplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketReplicationInput: Swift.Equatable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketReplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketReplicationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketReplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            return items
        }
    }
}

extension DeleteBucketTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketTaggingInput: Swift.Equatable {
    /// The bucket that has the tag set to be removed.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketTaggingOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteBucketWebsiteInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketWebsiteInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "website", value: nil))
            return items
        }
    }
}

extension DeleteBucketWebsiteInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketWebsiteInput: Swift.Equatable {
    /// The bucket name for which you want to remove the website configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeleteBucketWebsiteOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteBucketWebsiteOutput: Swift.Equatable {

    public init() { }
}

enum DeleteBucketWebsiteOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.DeleteMarkerEntry: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isLatest = "IsLatest"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case versionId = "VersionId"
    }

    static func writingClosure(_ value: S3ClientTypes.DeleteMarkerEntry?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("IsLatest")].write(value.isLatest)
        try writer[.init("Key")].write(value.key)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
        try writer[.init("Owner")].write(value.owner, writingClosure: S3ClientTypes.Owner.writingClosure(_:to:))
        try writer[.init("VersionId")].write(value.versionId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isLatestDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLatest)
        isLatest = isLatestDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
    }
}

extension S3ClientTypes {
    /// Information about the delete marker.
    public struct DeleteMarkerEntry: Swift.Equatable {
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Swift.Bool?
        /// The object key.
        public var key: Swift.String?
        /// Date and time when the object was last modified.
        public var lastModified: ClientRuntime.Date?
        /// The account that created the delete marker.>
        public var owner: S3ClientTypes.Owner?
        /// Version ID of an object.
        public var versionId: Swift.String?

        public init(
            isLatest: Swift.Bool? = nil,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.DeleteMarkerReplication: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.DeleteMarkerReplication?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DeleteMarkerReplicationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// Specifies whether Amazon S3 replicates delete markers. If you specify a Filter in your replication configuration, you must also include a DeleteMarkerReplication element. If your Filter includes a Tag element, the DeleteMarkerReplicationStatus must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
    public struct DeleteMarkerReplication: Swift.Equatable {
        /// Indicates whether to replicate delete markers. Indicates whether to replicate delete markers.
        public var status: S3ClientTypes.DeleteMarkerReplicationStatus?

        public init(
            status: S3ClientTypes.DeleteMarkerReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum DeleteMarkerReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteMarkerReplicationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeleteMarkerReplicationStatus(rawValue: rawValue) ?? DeleteMarkerReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeleteObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let bypassGovernanceRetention = bypassGovernanceRetention {
            items.add(Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = mfa {
            items.add(Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension DeleteObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "DeleteObject"))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension DeleteObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct DeleteObjectInput: Swift.Equatable {
    /// The bucket name of the bucket containing the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process this operation. To use this header, you must have the s3:BypassGovernanceRetention permission. This functionality is not supported for directory buckets.
    public var bypassGovernanceRetention: Swift.Bool?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Key name of the object to delete.
    /// This member is required.
    public var key: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled. This functionality is not supported for directory buckets.
    public var mfa: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. For directory buckets in this API operation, only the null value of the version ID is supported.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        mfa: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.mfa = mfa
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension DeleteObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct DeleteObjectOutput: Swift.Equatable {
    /// Indicates whether the specified object version that was permanently deleted was (true) or was not (false) a delete marker before deletion. In a simple DELETE, this header indicates whether (true) or not (false) the current version of the object is a delete marker. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Returns the version ID of the delete marker created as a result of the DELETE operation. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        deleteMarker: Swift.Bool? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.deleteMarker = deleteMarker
        self.requestCharged = requestCharged
        self.versionId = versionId
    }
}

enum DeleteObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteObjectTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteObjectTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension DeleteObjectTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct DeleteObjectTaggingInput: Swift.Equatable {
    /// The bucket name containing the objects from which to remove the tags. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key that identifies the object in the bucket from which to remove all tags.
    /// This member is required.
    public var key: Swift.String?
    /// The versionId of the object that the tag-set will be removed from.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.versionId = versionId
    }
}

extension DeleteObjectTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct DeleteObjectTaggingOutput: Swift.Equatable {
    /// The versionId of the object the tag-set was removed from.
    public var versionId: Swift.String?

    public init(
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

enum DeleteObjectTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteObjectsInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delete = "Delete"
    }

    static func writingClosure(_ value: DeleteObjectsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Delete")].write(value.delete, writingClosure: S3ClientTypes.Delete.writingClosure(_:to:))
    }
}

extension DeleteObjectsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let bypassGovernanceRetention = bypassGovernanceRetention {
            items.add(Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = mfa {
            items.add(Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension DeleteObjectsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "delete", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "DeleteObjects"))
            return items
        }
    }
}

extension DeleteObjectsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteObjectsInput: Swift.Equatable {
    /// The bucket name containing the objects to delete. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. To use this header, you must have the s3:BypassGovernanceRetention permission. This functionality is not supported for directory buckets.
    public var bypassGovernanceRetention: Swift.Bool?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Container for the request.
    /// This member is required.
    public var delete: S3ClientTypes.Delete?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled. When performing the DeleteObjects operation on an MFA delete enabled bucket, which attempts to delete the specified versioned objects, you must include an MFA token. If you don't provide an MFA token, the entire request will fail, even if there are non-versioned objects that you are trying to delete. If you provide an invalid token, whether there are versioned object keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see [ MFA Delete](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var mfa: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        delete: S3ClientTypes.Delete? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mfa: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.checksumAlgorithm = checksumAlgorithm
        self.delete = delete
        self.expectedBucketOwner = expectedBucketOwner
        self.mfa = mfa
        self.requestPayer = requestPayer
    }
}

struct DeleteObjectsInputBody: Swift.Equatable {
    let delete: S3ClientTypes.Delete?
}

extension DeleteObjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delete = "Delete"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Delete.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension DeleteObjectsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteObjectsOutputBody = try responseDecoder.decode(responseBody: data)
            self.deleted = output.deleted
            self.errors = output.errors
        } else {
            self.deleted = nil
            self.errors = nil
        }
    }
}

public struct DeleteObjectsOutput: Swift.Equatable {
    /// Container element for a successful delete. It identifies the object that was successfully deleted.
    public var deleted: [S3ClientTypes.DeletedObject]?
    /// Container for a failed delete action that describes the object that Amazon S3 attempted to delete and the error it encountered.
    public var errors: [S3ClientTypes.Error]?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        deleted: [S3ClientTypes.DeletedObject]? = nil,
        errors: [S3ClientTypes.Error]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.deleted = deleted
        self.errors = errors
        self.requestCharged = requestCharged
    }
}

struct DeleteObjectsOutputBody: Swift.Equatable {
    let deleted: [S3ClientTypes.DeletedObject]?
    let errors: [S3ClientTypes.Error]?
}

extension DeleteObjectsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case errors = "Error"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.deleted) {
            let deletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleted)
            if deletedWrappedContainer != nil {
                let deletedContainer = try containerValues.decodeIfPresent([S3ClientTypes.DeletedObject].self, forKey: .deleted)
                var deletedBuffer:[S3ClientTypes.DeletedObject]? = nil
                if let deletedContainer = deletedContainer {
                    deletedBuffer = [S3ClientTypes.DeletedObject]()
                    for structureContainer0 in deletedContainer {
                        deletedBuffer?.append(structureContainer0)
                    }
                }
                deleted = deletedBuffer
            } else {
                deleted = []
            }
        } else {
            deleted = nil
        }
        if containerValues.contains(.errors) {
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .errors)
            if errorsWrappedContainer != nil {
                let errorsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Error].self, forKey: .errors)
                var errorsBuffer:[S3ClientTypes.Error]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [S3ClientTypes.Error]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}

enum DeleteObjectsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension DeletePublicAccessBlockInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeletePublicAccessBlockInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
            return items
        }
    }
}

extension DeletePublicAccessBlockInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePublicAccessBlockInput: Swift.Equatable {
    /// The Amazon S3 bucket whose PublicAccessBlock configuration you want to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension DeletePublicAccessBlockOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeletePublicAccessBlockOutput: Swift.Equatable {

    public init() { }
}

enum DeletePublicAccessBlockOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.DeletedObject: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteMarker = "DeleteMarker"
        case deleteMarkerVersionId = "DeleteMarkerVersionId"
        case key = "Key"
        case versionId = "VersionId"
    }

    static func writingClosure(_ value: S3ClientTypes.DeletedObject?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DeleteMarker")].write(value.deleteMarker)
        try writer[.init("DeleteMarkerVersionId")].write(value.deleteMarkerVersionId)
        try writer[.init("Key")].write(value.key)
        try writer[.init("VersionId")].write(value.versionId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let deleteMarkerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteMarker)
        deleteMarker = deleteMarkerDecoded
        let deleteMarkerVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deleteMarkerVersionId)
        deleteMarkerVersionId = deleteMarkerVersionIdDecoded
    }
}

extension S3ClientTypes {
    /// Information about the deleted object.
    public struct DeletedObject: Swift.Equatable {
        /// Indicates whether the specified object version that was permanently deleted was (true) or was not (false) a delete marker before deletion. In a simple DELETE, this header indicates whether (true) or not (false) the current version of the object is a delete marker. This functionality is not supported for directory buckets.
        public var deleteMarker: Swift.Bool?
        /// The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted. This functionality is not supported for directory buckets.
        public var deleteMarkerVersionId: Swift.String?
        /// The name of the deleted object.
        public var key: Swift.String?
        /// The version ID of the deleted object. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            deleteMarker: Swift.Bool? = nil,
            deleteMarkerVersionId: Swift.String? = nil,
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.deleteMarker = deleteMarker
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.key = key
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.Destination: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlTranslation = "AccessControlTranslation"
        case account = "Account"
        case bucket = "Bucket"
        case encryptionConfiguration = "EncryptionConfiguration"
        case metrics = "Metrics"
        case replicationTime = "ReplicationTime"
        case storageClass = "StorageClass"
    }

    static func writingClosure(_ value: S3ClientTypes.Destination?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessControlTranslation")].write(value.accessControlTranslation, writingClosure: S3ClientTypes.AccessControlTranslation.writingClosure(_:to:))
        try writer[.init("Account")].write(value.account)
        try writer[.init("Bucket")].write(value.bucket)
        try writer[.init("EncryptionConfiguration")].write(value.encryptionConfiguration, writingClosure: S3ClientTypes.EncryptionConfiguration.writingClosure(_:to:))
        try writer[.init("Metrics")].write(value.metrics, writingClosure: S3ClientTypes.Metrics.writingClosure(_:to:))
        try writer[.init("ReplicationTime")].write(value.replicationTime, writingClosure: S3ClientTypes.ReplicationTime.writingClosure(_:to:))
        try writer[.init("StorageClass")].write(value.storageClass)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let accessControlTranslationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlTranslation.self, forKey: .accessControlTranslation)
        accessControlTranslation = accessControlTranslationDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let replicationTimeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTime.self, forKey: .replicationTime)
        replicationTime = replicationTimeDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Metrics.self, forKey: .metrics)
        metrics = metricsDecoded
    }
}

extension S3ClientTypes {
    /// Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
    public struct Destination: Swift.Equatable {
        /// Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the Amazon Web Services account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same Amazon Web Services account that owns the source object.
        public var accessControlTranslation: S3ClientTypes.AccessControlTranslation?
        /// Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the Amazon Web Services account that owns the destination bucket by specifying the AccessControlTranslation property, this is the account ID of the destination bucket owner. For more information, see [Replication Additional Configuration: Changing the Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html) in the Amazon S3 User Guide.
        public var account: Swift.String?
        /// The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
        /// This member is required.
        public var bucket: Swift.String?
        /// A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element.
        public var encryptionConfiguration: S3ClientTypes.EncryptionConfiguration?
        /// A container specifying replication metrics-related settings enabling replication metrics and events.
        public var metrics: S3ClientTypes.Metrics?
        /// A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
        public var replicationTime: S3ClientTypes.ReplicationTime?
        /// The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. For valid values, see the StorageClass element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the Amazon S3 API Reference.
        public var storageClass: S3ClientTypes.StorageClass?

        public init(
            accessControlTranslation: S3ClientTypes.AccessControlTranslation? = nil,
            account: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryptionConfiguration: S3ClientTypes.EncryptionConfiguration? = nil,
            metrics: S3ClientTypes.Metrics? = nil,
            replicationTime: S3ClientTypes.ReplicationTime? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil
        )
        {
            self.accessControlTranslation = accessControlTranslation
            self.account = account
            self.bucket = bucket
            self.encryptionConfiguration = encryptionConfiguration
            self.metrics = metrics
            self.replicationTime = replicationTime
            self.storageClass = storageClass
        }
    }

}

extension S3ClientTypes {
    /// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key can contain any Unicode character; however, the XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    public enum EncodingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [EncodingType] {
            return [
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .url: return "url"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncodingType(rawValue: rawValue) ?? EncodingType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Encryption: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case kmsContext = "KMSContext"
        case kmsKeyId = "KMSKeyId"
    }

    static func writingClosure(_ value: S3ClientTypes.Encryption?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("EncryptionType")].write(value.encryptionType)
        try writer[.init("KMSContext")].write(value.kmsContext)
        try writer[.init("KMSKeyId")].write(value.kmsKeyId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryption.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let kmsContextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsContext)
        kmsContext = kmsContextDecoded
    }
}

extension S3ClientTypes.Encryption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Encryption(encryptionType: \(Swift.String(describing: encryptionType)), kmsContext: \(Swift.String(describing: kmsContext)), kmsKeyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {
    /// Contains the type of server-side encryption used.
    public struct Encryption: Swift.Equatable {
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (for example, AES256, aws:kms).
        /// This member is required.
        public var encryptionType: S3ClientTypes.ServerSideEncryption?
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public var kmsContext: Swift.String?
        /// If the encryption type is aws:kms, this optional value specifies the ID of the symmetric encryption customer managed key to use for encryption of job results. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?

        public init(
            encryptionType: S3ClientTypes.ServerSideEncryption? = nil,
            kmsContext: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsContext = kmsContext
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension S3ClientTypes.EncryptionConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicaKmsKeyID = "ReplicaKmsKeyID"
    }

    static func writingClosure(_ value: S3ClientTypes.EncryptionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ReplicaKmsKeyID")].write(value.replicaKmsKeyID)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicaKmsKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaKmsKeyID)
        replicaKmsKeyID = replicaKmsKeyIDDecoded
    }
}

extension S3ClientTypes {
    /// Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
    public struct EncryptionConfiguration: Swift.Equatable {
        /// Specifies the ID (Key ARN or Alias ARN) of the customer managed Amazon Web Services KMS key stored in Amazon Web Services Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var replicaKmsKeyID: Swift.String?

        public init(
            replicaKmsKeyID: Swift.String? = nil
        )
        {
            self.replicaKmsKeyID = replicaKmsKeyID
        }
    }

}

extension S3ClientTypes.EndEvent: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.EndEvent?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    /// A message that indicates the request is complete and no more messages will be sent. You should not assume that the request is complete until the client receives an EndEvent.
    public struct EndEvent: Swift.Equatable {

        public init() { }
    }

}

extension S3ClientTypes.Error: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case key = "Key"
        case message = "Message"
        case versionId = "VersionId"
    }

    static func writingClosure(_ value: S3ClientTypes.Error?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Code")].write(value.code)
        try writer[.init("Key")].write(value.key)
        try writer[.init("Message")].write(value.message)
        try writer[.init("VersionId")].write(value.versionId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension S3ClientTypes {
    /// Container for all error elements.
    public struct Error: Swift.Equatable {
        /// The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. The following is a list of Amazon S3 error codes. For more information, see [Error responses](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html).
        ///
        ///
        /// * Code: AccessDenied
        ///
        /// * Description: Access Denied
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AccountProblem
        ///
        /// * Description: There is a problem with your Amazon Web Services account that prevents the action from completing successfully. Contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AllAccessDisabled
        ///
        /// * Description: All access to this Amazon S3 resource has been disabled. Contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AmbiguousGrantByEmailAddress
        ///
        /// * Description: The email address you provided is associated with more than one account.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AuthorizationHeaderMalformed
        ///
        /// * Description: The authorization header you provided is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * HTTP Status Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: BadDigest
        ///
        /// * Description: The Content-MD5 you specified did not match what we received.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketAlreadyExists
        ///
        /// * Description: The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketAlreadyOwnedByYou
        ///
        /// * Description: The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all Amazon Web Services Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs).
        ///
        /// * Code: 409 Conflict (in all Regions except the North Virginia Region)
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketNotEmpty
        ///
        /// * Description: The bucket you tried to delete is not empty.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: CredentialsNotSupported
        ///
        /// * Description: This request does not support credentials.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: CrossLocationLoggingProhibited
        ///
        /// * Description: Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: EntityTooSmall
        ///
        /// * Description: Your proposed upload is smaller than the minimum allowed object size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: EntityTooLarge
        ///
        /// * Description: Your proposed upload exceeds the maximum allowed object size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: ExpiredToken
        ///
        /// * Description: The provided token has expired.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IllegalVersioningConfigurationException
        ///
        /// * Description: Indicates that the versioning configuration specified in the request is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IncompleteBody
        ///
        /// * Description: You did not provide the number of bytes specified by the Content-Length HTTP header
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IncorrectNumberOfFilesInPostRequest
        ///
        /// * Description: POST requires exactly one file upload per request.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InlineDataTooLarge
        ///
        /// * Description: Inline data exceeds the maximum allowed size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InternalError
        ///
        /// * Description: We encountered an internal error. Please try again.
        ///
        /// * HTTP Status Code: 500 Internal Server Error
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidAccessKeyId
        ///
        /// * Description: The Amazon Web Services access key ID you provided does not exist in our records.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidAddressingHeader
        ///
        /// * Description: You must specify the Anonymous role.
        ///
        /// * HTTP Status Code: N/A
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidArgument
        ///
        /// * Description: Invalid Argument
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidBucketName
        ///
        /// * Description: The specified bucket is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidBucketState
        ///
        /// * Description: The request is not valid with the current state of the bucket.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidDigest
        ///
        /// * Description: The Content-MD5 you specified is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidEncryptionAlgorithmError
        ///
        /// * Description: The encryption request you specified is not valid. The valid value is AES256.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidLocationConstraint
        ///
        /// * Description: The specified location constraint is not valid. For more information about Regions, see [How to Select a Region for Your Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro).
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidObjectState
        ///
        /// * Description: The action is not valid for the current state of the object.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPart
        ///
        /// * Description: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPartOrder
        ///
        /// * Description: The list of parts was not in ascending order. Parts list must be specified in order by part number.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPayer
        ///
        /// * Description: All access to this object has been disabled. Please contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPolicyDocument
        ///
        /// * Description: The content of the form does not meet the conditions specified in the policy document.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRange
        ///
        /// * Description: The requested range cannot be satisfied.
        ///
        /// * HTTP Status Code: 416 Requested Range Not Satisfiable
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Please use AWS4-HMAC-SHA256.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: SOAP requests must be made over an HTTPS connection.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate endpoint only supports virtual style requests.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate is not configured on this bucket.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate is disabled on this bucket.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported on this bucket. Contact Amazon Web Services Support for more information.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact Amazon Web Services Support for more information.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidSecurity
        ///
        /// * Description: The provided security credentials are not valid.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidSOAPRequest
        ///
        /// * Description: The SOAP request body is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidStorageClass
        ///
        /// * Description: The storage class you specified is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidTargetBucketForLogging
        ///
        /// * Description: The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidToken
        ///
        /// * Description: The provided token is malformed or otherwise invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidURI
        ///
        /// * Description: Couldn't parse the specified URI.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: KeyTooLongError
        ///
        /// * Description: Your key is too long.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedACLError
        ///
        /// * Description: The XML you provided was not well-formed or did not validate against our published schema.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedPOSTRequest
        ///
        /// * Description: The body of your POST request is not well-formed multipart/form-data.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedXML
        ///
        /// * Description: This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MaxMessageLengthExceeded
        ///
        /// * Description: Your request was too big.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MaxPostPreDataLengthExceededError
        ///
        /// * Description: Your POST request fields preceding the upload file were too large.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MetadataTooLarge
        ///
        /// * Description: Your metadata headers exceed the maximum allowed metadata size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MethodNotAllowed
        ///
        /// * Description: The specified method is not allowed against this resource.
        ///
        /// * HTTP Status Code: 405 Method Not Allowed
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingAttachment
        ///
        /// * Description: A SOAP attachment was expected, but none were found.
        ///
        /// * HTTP Status Code: N/A
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingContentLength
        ///
        /// * Description: You must provide the Content-Length HTTP header.
        ///
        /// * HTTP Status Code: 411 Length Required
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingRequestBodyError
        ///
        /// * Description: This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingSecurityElement
        ///
        /// * Description: The SOAP 1.1 request is missing a security element.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingSecurityHeader
        ///
        /// * Description: Your request is missing a required header.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoLoggingStatusForKey
        ///
        /// * Description: There is no such thing as a logging status subresource for a key.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchBucket
        ///
        /// * Description: The specified bucket does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchBucketPolicy
        ///
        /// * Description: The specified bucket does not have a bucket policy.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchKey
        ///
        /// * Description: The specified key does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchLifecycleConfiguration
        ///
        /// * Description: The lifecycle configuration does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchUpload
        ///
        /// * Description: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchVersion
        ///
        /// * Description: Indicates that the version ID specified in the request does not match an existing version.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NotImplemented
        ///
        /// * Description: A header you provided implies functionality that is not implemented.
        ///
        /// * HTTP Status Code: 501 Not Implemented
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: NotSignedUp
        ///
        /// * Description: Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: [Amazon S3](http://aws.amazon.com/s3)
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: OperationAborted
        ///
        /// * Description: A conflicting conditional action is currently in progress against this resource. Try again.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: PermanentRedirect
        ///
        /// * Description: The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint.
        ///
        /// * HTTP Status Code: 301 Moved Permanently
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: PreconditionFailed
        ///
        /// * Description: At least one of the preconditions you specified did not hold.
        ///
        /// * HTTP Status Code: 412 Precondition Failed
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: Redirect
        ///
        /// * Description: Temporary redirect.
        ///
        /// * HTTP Status Code: 307 Moved Temporarily
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RestoreAlreadyInProgress
        ///
        /// * Description: Object restore is already in progress.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestIsNotMultiPartContent
        ///
        /// * Description: Bucket POST must be of the enclosure-type multipart/form-data.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTimeout
        ///
        /// * Description: Your socket connection to the server was not read from or written to within the timeout period.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTimeTooSkewed
        ///
        /// * Description: The difference between the request time and the server's time is too large.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTorrentOfBucketError
        ///
        /// * Description: Requesting the torrent file of a bucket is not permitted.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: SignatureDoesNotMatch
        ///
        /// * Description: The request signature we calculated does not match the signature you provided. Check your Amazon Web Services secret access key and signing method. For more information, see [REST Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html) and [SOAP Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html) for details.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: ServiceUnavailable
        ///
        /// * Description: Service is unable to handle request.
        ///
        /// * HTTP Status Code: 503 Service Unavailable
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: SlowDown
        ///
        /// * Description: Reduce your request rate.
        ///
        /// * HTTP Status Code: 503 Slow Down
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: TemporaryRedirect
        ///
        /// * Description: You are being redirected to the bucket while DNS updates.
        ///
        /// * HTTP Status Code: 307 Moved Temporarily
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: TokenRefreshRequired
        ///
        /// * Description: The provided token must be refreshed.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: TooManyBuckets
        ///
        /// * Description: You have attempted to create more buckets than allowed.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UnexpectedContent
        ///
        /// * Description: This request does not support content.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UnresolvableGrantByEmailAddress
        ///
        /// * Description: The email address you provided does not match any account on record.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UserKeyMustBeSpecified
        ///
        /// * Description: The bucket POST must contain the specified field name. If it is specified, check the order of the fields.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        public var code: Swift.String?
        /// The error key.
        public var key: Swift.String?
        /// The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.
        public var message: Swift.String?
        /// The version ID of the error. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            code: Swift.String? = nil,
            key: Swift.String? = nil,
            message: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.code = code
            self.key = key
            self.message = message
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.ErrorDocument: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    static func writingClosure(_ value: S3ClientTypes.ErrorDocument?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Key")].write(value.key)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension S3ClientTypes {
    /// The error information.
    public struct ErrorDocument: Swift.Equatable {
        /// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var key: Swift.String?

        public init(
            key: Swift.String? = nil
        )
        {
            self.key = key
        }
    }

}

extension S3ClientTypes {
    /// The bucket event for which to send notifications.
    public enum Event: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3Intelligenttiering
        case s3Lifecycleexpiration
        case s3LifecycleexpirationDelete
        case s3LifecycleexpirationDeletemarkercreated
        case s3Lifecycletransition
        case s3ObjectaclPut
        case s3Objectcreated
        case s3ObjectcreatedCompletemultipartupload
        case s3ObjectcreatedCopy
        case s3ObjectcreatedPost
        case s3ObjectcreatedPut
        case s3Objectremoved
        case s3ObjectremovedDelete
        case s3ObjectremovedDeletemarkercreated
        case s3Objectrestore
        case s3ObjectrestoreCompleted
        case s3ObjectrestoreDelete
        case s3ObjectrestorePost
        case s3Objecttagging
        case s3ObjecttaggingDelete
        case s3ObjecttaggingPut
        case s3Reducedredundancylostobject
        case s3Replication
        case s3ReplicationOperationfailedreplication
        case s3ReplicationOperationmissedthreshold
        case s3ReplicationOperationnottracked
        case s3ReplicationOperationreplicatedafterthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [Event] {
            return [
                .s3Intelligenttiering,
                .s3Lifecycleexpiration,
                .s3LifecycleexpirationDelete,
                .s3LifecycleexpirationDeletemarkercreated,
                .s3Lifecycletransition,
                .s3ObjectaclPut,
                .s3Objectcreated,
                .s3ObjectcreatedCompletemultipartupload,
                .s3ObjectcreatedCopy,
                .s3ObjectcreatedPost,
                .s3ObjectcreatedPut,
                .s3Objectremoved,
                .s3ObjectremovedDelete,
                .s3ObjectremovedDeletemarkercreated,
                .s3Objectrestore,
                .s3ObjectrestoreCompleted,
                .s3ObjectrestoreDelete,
                .s3ObjectrestorePost,
                .s3Objecttagging,
                .s3ObjecttaggingDelete,
                .s3ObjecttaggingPut,
                .s3Reducedredundancylostobject,
                .s3Replication,
                .s3ReplicationOperationfailedreplication,
                .s3ReplicationOperationmissedthreshold,
                .s3ReplicationOperationnottracked,
                .s3ReplicationOperationreplicatedafterthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3Intelligenttiering: return "s3:IntelligentTiering"
            case .s3Lifecycleexpiration: return "s3:LifecycleExpiration:*"
            case .s3LifecycleexpirationDelete: return "s3:LifecycleExpiration:Delete"
            case .s3LifecycleexpirationDeletemarkercreated: return "s3:LifecycleExpiration:DeleteMarkerCreated"
            case .s3Lifecycletransition: return "s3:LifecycleTransition"
            case .s3ObjectaclPut: return "s3:ObjectAcl:Put"
            case .s3Objectcreated: return "s3:ObjectCreated:*"
            case .s3ObjectcreatedCompletemultipartupload: return "s3:ObjectCreated:CompleteMultipartUpload"
            case .s3ObjectcreatedCopy: return "s3:ObjectCreated:Copy"
            case .s3ObjectcreatedPost: return "s3:ObjectCreated:Post"
            case .s3ObjectcreatedPut: return "s3:ObjectCreated:Put"
            case .s3Objectremoved: return "s3:ObjectRemoved:*"
            case .s3ObjectremovedDelete: return "s3:ObjectRemoved:Delete"
            case .s3ObjectremovedDeletemarkercreated: return "s3:ObjectRemoved:DeleteMarkerCreated"
            case .s3Objectrestore: return "s3:ObjectRestore:*"
            case .s3ObjectrestoreCompleted: return "s3:ObjectRestore:Completed"
            case .s3ObjectrestoreDelete: return "s3:ObjectRestore:Delete"
            case .s3ObjectrestorePost: return "s3:ObjectRestore:Post"
            case .s3Objecttagging: return "s3:ObjectTagging:*"
            case .s3ObjecttaggingDelete: return "s3:ObjectTagging:Delete"
            case .s3ObjecttaggingPut: return "s3:ObjectTagging:Put"
            case .s3Reducedredundancylostobject: return "s3:ReducedRedundancyLostObject"
            case .s3Replication: return "s3:Replication:*"
            case .s3ReplicationOperationfailedreplication: return "s3:Replication:OperationFailedReplication"
            case .s3ReplicationOperationmissedthreshold: return "s3:Replication:OperationMissedThreshold"
            case .s3ReplicationOperationnottracked: return "s3:Replication:OperationNotTracked"
            case .s3ReplicationOperationreplicatedafterthreshold: return "s3:Replication:OperationReplicatedAfterThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Event(rawValue: rawValue) ?? Event.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.EventBridgeConfiguration: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.EventBridgeConfiguration?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    /// A container for specifying the configuration for Amazon EventBridge.
    public struct EventBridgeConfiguration: Swift.Equatable {

        public init() { }
    }

}

extension S3ClientTypes.ExistingObjectReplication: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.ExistingObjectReplication?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExistingObjectReplicationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// Optional configuration to replicate existing source bucket objects. For more information, see [Replicating Existing Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication) in the Amazon S3 User Guide.
    public struct ExistingObjectReplication: Swift.Equatable {
        /// Specifies whether Amazon S3 replicates existing source bucket objects.
        /// This member is required.
        public var status: S3ClientTypes.ExistingObjectReplicationStatus?

        public init(
            status: S3ClientTypes.ExistingObjectReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ExistingObjectReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExistingObjectReplicationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExistingObjectReplicationStatus(rawValue: rawValue) ?? ExistingObjectReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ExpirationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExpirationStatus(rawValue: rawValue) ?? ExpirationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ExpressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpressionType] {
            return [
                .sql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExpressionType(rawValue: rawValue) ?? ExpressionType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum FileHeaderInfo: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case `none`
        case use
        case sdkUnknown(Swift.String)

        public static var allCases: [FileHeaderInfo] {
            return [
                .ignore,
                .none,
                .use,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .none: return "NONE"
            case .use: return "USE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileHeaderInfo(rawValue: rawValue) ?? FileHeaderInfo.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.FilterRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    static func writingClosure(_ value: S3ClientTypes.FilterRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Name")].write(value.name)
        try writer[.init("Value")].write(value.value)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(S3ClientTypes.FilterRuleName.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
    public struct FilterRule: Swift.Equatable {
        /// The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        public var name: S3ClientTypes.FilterRuleName?
        /// The value that the filter searches for in object key names.
        public var value: Swift.String?

        public init(
            name: S3ClientTypes.FilterRuleName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension S3ClientTypes {
    public enum FilterRuleName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `prefix`
        case suffix
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRuleName] {
            return [
                .prefix,
                .suffix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .prefix: return "prefix"
            case .suffix: return "suffix"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterRuleName(rawValue: rawValue) ?? FilterRuleName.sdkUnknown(rawValue)
        }
    }
}

extension GetBucketAccelerateConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetBucketAccelerateConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "accelerate", value: nil))
            return items
        }
    }
}

extension GetBucketAccelerateConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketAccelerateConfigurationInput: Swift.Equatable {
    /// The name of the bucket for which the accelerate configuration is retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.requestPayer = requestPayer
    }
}

extension GetBucketAccelerateConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketAccelerateConfigurationOutputBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct GetBucketAccelerateConfigurationOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The accelerate configuration of the bucket.
    public var status: S3ClientTypes.BucketAccelerateStatus?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        status: S3ClientTypes.BucketAccelerateStatus? = nil
    )
    {
        self.requestCharged = requestCharged
        self.status = status
    }
}

struct GetBucketAccelerateConfigurationOutputBody: Swift.Equatable {
    let status: S3ClientTypes.BucketAccelerateStatus?
}

extension GetBucketAccelerateConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketAccelerateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum GetBucketAccelerateConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketAclInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketAclInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "acl", value: nil))
            return items
        }
    }
}

extension GetBucketAclInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketAclInput: Swift.Equatable {
    /// Specifies the S3 bucket whose ACL is being requested. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketAclOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketAclOutputBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.owner = output.owner
        } else {
            self.grants = nil
            self.owner = nil
        }
    }
}

public struct GetBucketAclOutput: Swift.Equatable {
    /// A list of grants.
    public var grants: [S3ClientTypes.Grant]?
    /// Container for the bucket owner's display name and ID.
    public var owner: S3ClientTypes.Owner?

    public init(
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil
    )
    {
        self.grants = grants
        self.owner = owner
    }
}

struct GetBucketAclOutputBody: Swift.Equatable {
    let owner: S3ClientTypes.Owner?
    let grants: [S3ClientTypes.Grant]?
}

extension GetBucketAclOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
    }
}

enum GetBucketAclOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketAnalyticsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketAnalyticsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketAnalyticsConfiguration"))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension GetBucketAnalyticsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// The name of the bucket from which an analytics configuration is retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension GetBucketAnalyticsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.AnalyticsConfiguration = try responseDecoder.decode(responseBody: data)
            self.analyticsConfiguration = output
        } else {
            self.analyticsConfiguration = nil
        }
    }
}

public struct GetBucketAnalyticsConfigurationOutput: Swift.Equatable {
    /// The configuration and any analyses for the analytics filter.
    public var analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?

    public init(
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
    }
}

struct GetBucketAnalyticsConfigurationOutputBody: Swift.Equatable {
    let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
}

extension GetBucketAnalyticsConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsConfiguration.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
    }
}

enum GetBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketCorsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketCorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "cors", value: nil))
            return items
        }
    }
}

extension GetBucketCorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketCorsInput: Swift.Equatable {
    /// The bucket name for which to get the cors configuration. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketCorsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketCorsOutputBody = try responseDecoder.decode(responseBody: data)
            self.corsRules = output.corsRules
        } else {
            self.corsRules = nil
        }
    }
}

public struct GetBucketCorsOutput: Swift.Equatable {
    /// A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
    public var corsRules: [S3ClientTypes.CORSRule]?

    public init(
        corsRules: [S3ClientTypes.CORSRule]? = nil
    )
    {
        self.corsRules = corsRules
    }
}

struct GetBucketCorsOutputBody: Swift.Equatable {
    let corsRules: [S3ClientTypes.CORSRule]?
}

extension GetBucketCorsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case corsRules = "CORSRule"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.corsRules) {
            let corsRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .corsRules)
            if corsRulesWrappedContainer != nil {
                let corsRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CORSRule].self, forKey: .corsRules)
                var corsRulesBuffer:[S3ClientTypes.CORSRule]? = nil
                if let corsRulesContainer = corsRulesContainer {
                    corsRulesBuffer = [S3ClientTypes.CORSRule]()
                    for structureContainer0 in corsRulesContainer {
                        corsRulesBuffer?.append(structureContainer0)
                    }
                }
                corsRules = corsRulesBuffer
            } else {
                corsRules = []
            }
        } else {
            corsRules = nil
        }
    }
}

enum GetBucketCorsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketEncryptionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketEncryptionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
            return items
        }
    }
}

extension GetBucketEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketEncryptionInput: Swift.Equatable {
    /// The name of the bucket from which the server-side encryption configuration is retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketEncryptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.ServerSideEncryptionConfiguration = try responseDecoder.decode(responseBody: data)
            self.serverSideEncryptionConfiguration = output
        } else {
            self.serverSideEncryptionConfiguration = nil
        }
    }
}

public struct GetBucketEncryptionOutput: Swift.Equatable {
    /// Specifies the default server-side-encryption configuration.
    public var serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init(
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

struct GetBucketEncryptionOutputBody: Swift.Equatable {
    let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?
}

extension GetBucketEncryptionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
    }
}

enum GetBucketEncryptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketIntelligentTieringConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketIntelligentTieringConfiguration"))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension GetBucketIntelligentTieringConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

extension GetBucketIntelligentTieringConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.IntelligentTieringConfiguration = try responseDecoder.decode(responseBody: data)
            self.intelligentTieringConfiguration = output
        } else {
            self.intelligentTieringConfiguration = nil
        }
    }
}

public struct GetBucketIntelligentTieringConfigurationOutput: Swift.Equatable {
    /// Container for S3 Intelligent-Tiering configuration.
    public var intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init(
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

struct GetBucketIntelligentTieringConfigurationOutputBody: Swift.Equatable {
    let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?
}

extension GetBucketIntelligentTieringConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intelligentTieringConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringConfiguration.self, forKey: .intelligentTieringConfiguration)
        intelligentTieringConfiguration = intelligentTieringConfigurationDecoded
    }
}

enum GetBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketInventoryConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketInventoryConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketInventoryConfiguration"))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension GetBucketInventoryConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketInventoryConfigurationInput: Swift.Equatable {
    /// The name of the bucket containing the inventory configuration to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension GetBucketInventoryConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.InventoryConfiguration = try responseDecoder.decode(responseBody: data)
            self.inventoryConfiguration = output
        } else {
            self.inventoryConfiguration = nil
        }
    }
}

public struct GetBucketInventoryConfigurationOutput: Swift.Equatable {
    /// Specifies the inventory configuration.
    public var inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init(
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.inventoryConfiguration = inventoryConfiguration
    }
}

struct GetBucketInventoryConfigurationOutputBody: Swift.Equatable {
    let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?
}

extension GetBucketInventoryConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inventoryConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryConfiguration.self, forKey: .inventoryConfiguration)
        inventoryConfiguration = inventoryConfigurationDecoded
    }
}

enum GetBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketLifecycleConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLifecycleConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
            return items
        }
    }
}

extension GetBucketLifecycleConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketLifecycleConfigurationInput: Swift.Equatable {
    /// The name of the bucket for which to get the lifecycle information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketLifecycleConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketLifecycleConfigurationOutputBody = try responseDecoder.decode(responseBody: data)
            self.rules = output.rules
        } else {
            self.rules = nil
        }
    }
}

public struct GetBucketLifecycleConfigurationOutput: Swift.Equatable {
    /// Container for a lifecycle rule.
    public var rules: [S3ClientTypes.LifecycleRule]?

    public init(
        rules: [S3ClientTypes.LifecycleRule]? = nil
    )
    {
        self.rules = rules
    }
}

struct GetBucketLifecycleConfigurationOutputBody: Swift.Equatable {
    let rules: [S3ClientTypes.LifecycleRule]?
}

extension GetBucketLifecycleConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.LifecycleRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.LifecycleRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.LifecycleRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

enum GetBucketLifecycleConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketLocationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLocationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "location", value: nil))
            return items
        }
    }
}

extension GetBucketLocationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketLocationInput: Swift.Equatable {
    /// The name of the bucket for which to get the location. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketLocationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketLocationOutputBody = try responseDecoder.decode(responseBody: data)
            self.locationConstraint = output.locationConstraint
        } else {
            self.locationConstraint = nil
        }
    }
}

public struct GetBucketLocationOutput: Swift.Equatable {
    /// Specifies the Region where the bucket resides. For a list of all the Amazon S3 supported location constraints by Region, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). Buckets in Region us-east-1 have a LocationConstraint of null.
    public var locationConstraint: S3ClientTypes.BucketLocationConstraint?

    public init(
        locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
    )
    {
        self.locationConstraint = locationConstraint
    }
}

struct GetBucketLocationOutputBody: Swift.Equatable {
    let locationConstraint: S3ClientTypes.BucketLocationConstraint?
}

extension GetBucketLocationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationConstraint = "LocationConstraint"
    }

    public init(from decoder: Swift.Decoder) throws {
        var containerValues = try decoder.unkeyedContainer()
        let locationConstraintDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLocationConstraint.self)
        locationConstraint = locationConstraintDecoded
    }
}

enum GetBucketLocationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketLoggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLoggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "logging", value: nil))
            return items
        }
    }
}

extension GetBucketLoggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketLoggingInput: Swift.Equatable {
    /// The bucket name for which to get the logging information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketLoggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketLoggingOutputBody = try responseDecoder.decode(responseBody: data)
            self.loggingEnabled = output.loggingEnabled
        } else {
            self.loggingEnabled = nil
        }
    }
}

public struct GetBucketLoggingOutput: Swift.Equatable {
    /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
    public var loggingEnabled: S3ClientTypes.LoggingEnabled?

    public init(
        loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
    )
    {
        self.loggingEnabled = loggingEnabled
    }
}

struct GetBucketLoggingOutputBody: Swift.Equatable {
    let loggingEnabled: S3ClientTypes.LoggingEnabled?
}

extension GetBucketLoggingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingEnabled = "LoggingEnabled"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LoggingEnabled.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
    }
}

enum GetBucketLoggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketMetricsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketMetricsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketMetricsConfiguration"))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension GetBucketMetricsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketMetricsConfigurationInput: Swift.Equatable {
    /// The name of the bucket containing the metrics configuration to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension GetBucketMetricsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.MetricsConfiguration = try responseDecoder.decode(responseBody: data)
            self.metricsConfiguration = output
        } else {
            self.metricsConfiguration = nil
        }
    }
}

public struct GetBucketMetricsConfigurationOutput: Swift.Equatable {
    /// Specifies the metrics configuration.
    public var metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init(
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.metricsConfiguration = metricsConfiguration
    }
}

struct GetBucketMetricsConfigurationOutputBody: Swift.Equatable {
    let metricsConfiguration: S3ClientTypes.MetricsConfiguration?
}

extension GetBucketMetricsConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
    }
}

enum GetBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketNotificationConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketNotificationConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "notification", value: nil))
            return items
        }
    }
}

extension GetBucketNotificationConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketNotificationConfigurationInput: Swift.Equatable {
    /// The name of the bucket for which to get the notification configuration. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketNotificationConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketNotificationConfigurationOutputBody = try responseDecoder.decode(responseBody: data)
            self.eventBridgeConfiguration = output.eventBridgeConfiguration
            self.lambdaFunctionConfigurations = output.lambdaFunctionConfigurations
            self.queueConfigurations = output.queueConfigurations
            self.topicConfigurations = output.topicConfigurations
        } else {
            self.eventBridgeConfiguration = nil
            self.lambdaFunctionConfigurations = nil
            self.queueConfigurations = nil
            self.topicConfigurations = nil
        }
    }
}

/// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
public struct GetBucketNotificationConfigurationOutput: Swift.Equatable {
    /// Enables delivery of events to Amazon EventBridge.
    public var eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration?
    /// Describes the Lambda functions to invoke and the events for which to invoke them.
    public var lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
    /// The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
    public var queueConfigurations: [S3ClientTypes.QueueConfiguration]?
    /// The topic to which notifications are sent and the events for which notifications are generated.
    public var topicConfigurations: [S3ClientTypes.TopicConfiguration]?

    public init(
        eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration? = nil,
        lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
        queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
        topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
    )
    {
        self.eventBridgeConfiguration = eventBridgeConfiguration
        self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        self.queueConfigurations = queueConfigurations
        self.topicConfigurations = topicConfigurations
    }
}

struct GetBucketNotificationConfigurationOutputBody: Swift.Equatable {
    let topicConfigurations: [S3ClientTypes.TopicConfiguration]?
    let queueConfigurations: [S3ClientTypes.QueueConfiguration]?
    let lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
    let eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration?
}

extension GetBucketNotificationConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventBridgeConfiguration = "EventBridgeConfiguration"
        case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        case queueConfigurations = "QueueConfiguration"
        case topicConfigurations = "TopicConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.topicConfigurations) {
            let topicConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .topicConfigurations)
            if topicConfigurationsWrappedContainer != nil {
                let topicConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.TopicConfiguration].self, forKey: .topicConfigurations)
                var topicConfigurationsBuffer:[S3ClientTypes.TopicConfiguration]? = nil
                if let topicConfigurationsContainer = topicConfigurationsContainer {
                    topicConfigurationsBuffer = [S3ClientTypes.TopicConfiguration]()
                    for structureContainer0 in topicConfigurationsContainer {
                        topicConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                topicConfigurations = topicConfigurationsBuffer
            } else {
                topicConfigurations = []
            }
        } else {
            topicConfigurations = nil
        }
        if containerValues.contains(.queueConfigurations) {
            let queueConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueConfigurations)
            if queueConfigurationsWrappedContainer != nil {
                let queueConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.QueueConfiguration].self, forKey: .queueConfigurations)
                var queueConfigurationsBuffer:[S3ClientTypes.QueueConfiguration]? = nil
                if let queueConfigurationsContainer = queueConfigurationsContainer {
                    queueConfigurationsBuffer = [S3ClientTypes.QueueConfiguration]()
                    for structureContainer0 in queueConfigurationsContainer {
                        queueConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                queueConfigurations = queueConfigurationsBuffer
            } else {
                queueConfigurations = []
            }
        } else {
            queueConfigurations = nil
        }
        if containerValues.contains(.lambdaFunctionConfigurations) {
            let lambdaFunctionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .lambdaFunctionConfigurations)
            if lambdaFunctionConfigurationsWrappedContainer != nil {
                let lambdaFunctionConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.LambdaFunctionConfiguration].self, forKey: .lambdaFunctionConfigurations)
                var lambdaFunctionConfigurationsBuffer:[S3ClientTypes.LambdaFunctionConfiguration]? = nil
                if let lambdaFunctionConfigurationsContainer = lambdaFunctionConfigurationsContainer {
                    lambdaFunctionConfigurationsBuffer = [S3ClientTypes.LambdaFunctionConfiguration]()
                    for structureContainer0 in lambdaFunctionConfigurationsContainer {
                        lambdaFunctionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                lambdaFunctionConfigurations = lambdaFunctionConfigurationsBuffer
            } else {
                lambdaFunctionConfigurations = []
            }
        } else {
            lambdaFunctionConfigurations = nil
        }
        let eventBridgeConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EventBridgeConfiguration.self, forKey: .eventBridgeConfiguration)
        eventBridgeConfiguration = eventBridgeConfigurationDecoded
    }
}

enum GetBucketNotificationConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketOwnershipControlsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketOwnershipControlsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
            return items
        }
    }
}

extension GetBucketOwnershipControlsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketOwnershipControlsInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose OwnershipControls you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketOwnershipControlsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.OwnershipControls = try responseDecoder.decode(responseBody: data)
            self.ownershipControls = output
        } else {
            self.ownershipControls = nil
        }
    }
}

public struct GetBucketOwnershipControlsOutput: Swift.Equatable {
    /// The OwnershipControls (BucketOwnerEnforced, BucketOwnerPreferred, or ObjectWriter) currently in effect for this Amazon S3 bucket.
    public var ownershipControls: S3ClientTypes.OwnershipControls?

    public init(
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.ownershipControls = ownershipControls
    }
}

struct GetBucketOwnershipControlsOutputBody: Swift.Equatable {
    let ownershipControls: S3ClientTypes.OwnershipControls?
}

extension GetBucketOwnershipControlsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownershipControlsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnershipControls.self, forKey: .ownershipControls)
        ownershipControls = ownershipControlsDecoded
    }
}

enum GetBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketPolicyInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "policy", value: nil))
            return items
        }
    }
}

extension GetBucketPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketPolicyInput: Swift.Equatable {
    /// The bucket name to get the bucket policy for. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide Access points - When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. Object Lambda access points - When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList). Access points and Object Lambda access points are not supported by directory buckets.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let output = Swift.String(data: data, encoding: .utf8) {
            self.policy = output
        } else {
            self.policy = nil
        }
    }
}

public struct GetBucketPolicyOutput: Swift.Equatable {
    /// The bucket policy as a JSON document.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetBucketPolicyOutputBody: Swift.Equatable {
    let policy: Swift.String?
}

extension GetBucketPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

enum GetBucketPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketPolicyStatusInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketPolicyStatusInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "policyStatus", value: nil))
            return items
        }
    }
}

extension GetBucketPolicyStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketPolicyStatusInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose policy status you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketPolicyStatusOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.PolicyStatus = try responseDecoder.decode(responseBody: data)
            self.policyStatus = output
        } else {
            self.policyStatus = nil
        }
    }
}

public struct GetBucketPolicyStatusOutput: Swift.Equatable {
    /// The policy status for the specified bucket.
    public var policyStatus: S3ClientTypes.PolicyStatus?

    public init(
        policyStatus: S3ClientTypes.PolicyStatus? = nil
    )
    {
        self.policyStatus = policyStatus
    }
}

struct GetBucketPolicyStatusOutputBody: Swift.Equatable {
    let policyStatus: S3ClientTypes.PolicyStatus?
}

extension GetBucketPolicyStatusOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyStatus = "PolicyStatus"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PolicyStatus.self, forKey: .policyStatus)
        policyStatus = policyStatusDecoded
    }
}

enum GetBucketPolicyStatusOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketReplicationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketReplicationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "replication", value: nil))
            return items
        }
    }
}

extension GetBucketReplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketReplicationInput: Swift.Equatable {
    /// The bucket name for which to get the replication information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketReplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.ReplicationConfiguration = try responseDecoder.decode(responseBody: data)
            self.replicationConfiguration = output
        } else {
            self.replicationConfiguration = nil
        }
    }
}

public struct GetBucketReplicationOutput: Swift.Equatable {
    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    public var replicationConfiguration: S3ClientTypes.ReplicationConfiguration?

    public init(
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil
    )
    {
        self.replicationConfiguration = replicationConfiguration
    }
}

struct GetBucketReplicationOutputBody: Swift.Equatable {
    let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
}

extension GetBucketReplicationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationConfiguration.self, forKey: .replicationConfiguration)
        replicationConfiguration = replicationConfigurationDecoded
    }
}

enum GetBucketReplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketRequestPaymentInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketRequestPaymentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "requestPayment", value: nil))
            return items
        }
    }
}

extension GetBucketRequestPaymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketRequestPaymentInput: Swift.Equatable {
    /// The name of the bucket for which to get the payment request configuration
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketRequestPaymentOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketRequestPaymentOutputBody = try responseDecoder.decode(responseBody: data)
            self.payer = output.payer
        } else {
            self.payer = nil
        }
    }
}

public struct GetBucketRequestPaymentOutput: Swift.Equatable {
    /// Specifies who pays for the download and request fees.
    public var payer: S3ClientTypes.Payer?

    public init(
        payer: S3ClientTypes.Payer? = nil
    )
    {
        self.payer = payer
    }
}

struct GetBucketRequestPaymentOutputBody: Swift.Equatable {
    let payer: S3ClientTypes.Payer?
}

extension GetBucketRequestPaymentOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payer = "Payer"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Payer.self, forKey: .payer)
        payer = payerDecoded
    }
}

enum GetBucketRequestPaymentOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            return items
        }
    }
}

extension GetBucketTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketTaggingInput: Swift.Equatable {
    /// The name of the bucket for which to get the tagging information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketTaggingOutputBody = try responseDecoder.decode(responseBody: data)
            self.tagSet = output.tagSet
        } else {
            self.tagSet = nil
        }
    }
}

public struct GetBucketTaggingOutput: Swift.Equatable {
    /// Contains the tag set.
    /// This member is required.
    public var tagSet: [S3ClientTypes.Tag]?

    public init(
        tagSet: [S3ClientTypes.Tag]? = nil
    )
    {
        self.tagSet = tagSet
    }
}

struct GetBucketTaggingOutputBody: Swift.Equatable {
    let tagSet: [S3ClientTypes.Tag]?
}

extension GetBucketTaggingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

enum GetBucketTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketVersioningInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketVersioningInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "versioning", value: nil))
            return items
        }
    }
}

extension GetBucketVersioningInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketVersioningInput: Swift.Equatable {
    /// The name of the bucket for which to get the versioning information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketVersioningOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketVersioningOutputBody = try responseDecoder.decode(responseBody: data)
            self.mfaDelete = output.mfaDelete
            self.status = output.status
        } else {
            self.mfaDelete = nil
            self.status = nil
        }
    }
}

public struct GetBucketVersioningOutput: Swift.Equatable {
    /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
    public var mfaDelete: S3ClientTypes.MFADeleteStatus?
    /// The versioning state of the bucket.
    public var status: S3ClientTypes.BucketVersioningStatus?

    public init(
        mfaDelete: S3ClientTypes.MFADeleteStatus? = nil,
        status: S3ClientTypes.BucketVersioningStatus? = nil
    )
    {
        self.mfaDelete = mfaDelete
        self.status = status
    }
}

struct GetBucketVersioningOutputBody: Swift.Equatable {
    let status: S3ClientTypes.BucketVersioningStatus?
    let mfaDelete: S3ClientTypes.MFADeleteStatus?
}

extension GetBucketVersioningOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaDelete = "MfaDelete"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketVersioningStatus.self, forKey: .status)
        status = statusDecoded
        let mfaDeleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MFADeleteStatus.self, forKey: .mfaDelete)
        mfaDelete = mfaDeleteDecoded
    }
}

enum GetBucketVersioningOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetBucketWebsiteInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketWebsiteInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "website", value: nil))
            return items
        }
    }
}

extension GetBucketWebsiteInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketWebsiteInput: Swift.Equatable {
    /// The bucket name for which to get the website configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetBucketWebsiteOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetBucketWebsiteOutputBody = try responseDecoder.decode(responseBody: data)
            self.errorDocument = output.errorDocument
            self.indexDocument = output.indexDocument
            self.redirectAllRequestsTo = output.redirectAllRequestsTo
            self.routingRules = output.routingRules
        } else {
            self.errorDocument = nil
            self.indexDocument = nil
            self.redirectAllRequestsTo = nil
            self.routingRules = nil
        }
    }
}

public struct GetBucketWebsiteOutput: Swift.Equatable {
    /// The object key name of the website error document to use for 4XX class errors.
    public var errorDocument: S3ClientTypes.ErrorDocument?
    /// The name of the index document for the website (for example index.html).
    public var indexDocument: S3ClientTypes.IndexDocument?
    /// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
    public var redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
    /// Rules that define when a redirect is applied and the redirect behavior.
    public var routingRules: [S3ClientTypes.RoutingRule]?

    public init(
        errorDocument: S3ClientTypes.ErrorDocument? = nil,
        indexDocument: S3ClientTypes.IndexDocument? = nil,
        redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
        routingRules: [S3ClientTypes.RoutingRule]? = nil
    )
    {
        self.errorDocument = errorDocument
        self.indexDocument = indexDocument
        self.redirectAllRequestsTo = redirectAllRequestsTo
        self.routingRules = routingRules
    }
}

struct GetBucketWebsiteOutputBody: Swift.Equatable {
    let redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
    let indexDocument: S3ClientTypes.IndexDocument?
    let errorDocument: S3ClientTypes.ErrorDocument?
    let routingRules: [S3ClientTypes.RoutingRule]?
}

extension GetBucketWebsiteOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDocument = "ErrorDocument"
        case indexDocument = "IndexDocument"
        case redirectAllRequestsTo = "RedirectAllRequestsTo"
        case routingRules = "RoutingRules"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redirectAllRequestsToDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RedirectAllRequestsTo.self, forKey: .redirectAllRequestsTo)
        redirectAllRequestsTo = redirectAllRequestsToDecoded
        let indexDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IndexDocument.self, forKey: .indexDocument)
        indexDocument = indexDocumentDecoded
        let errorDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ErrorDocument.self, forKey: .errorDocument)
        errorDocument = errorDocumentDecoded
        if containerValues.contains(.routingRules) {
            struct KeyVal0{struct RoutingRule{}}
            let routingRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RoutingRule>.CodingKeys.self, forKey: .routingRules)
            if let routingRulesWrappedContainer = routingRulesWrappedContainer {
                let routingRulesContainer = try routingRulesWrappedContainer.decodeIfPresent([S3ClientTypes.RoutingRule].self, forKey: .member)
                var routingRulesBuffer:[S3ClientTypes.RoutingRule]? = nil
                if let routingRulesContainer = routingRulesContainer {
                    routingRulesBuffer = [S3ClientTypes.RoutingRule]()
                    for structureContainer0 in routingRulesContainer {
                        routingRulesBuffer?.append(structureContainer0)
                    }
                }
                routingRules = routingRulesBuffer
            } else {
                routingRules = []
            }
        } else {
            routingRules = nil
        }
    }
}

enum GetBucketWebsiteOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectAclInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectAclInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "acl", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetObjectAclInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectAclInput: Swift.Equatable {
    /// The bucket name that contains the object for which to get the ACL information. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key of the object for which to get the ACL information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension GetObjectAclOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetObjectAclOutputBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.owner = output.owner
        } else {
            self.grants = nil
            self.owner = nil
        }
    }
}

public struct GetObjectAclOutput: Swift.Equatable {
    /// A list of grants.
    public var grants: [S3ClientTypes.Grant]?
    /// Container for the bucket owner's display name and ID.
    public var owner: S3ClientTypes.Owner?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.grants = grants
        self.owner = owner
        self.requestCharged = requestCharged
    }
}

struct GetObjectAclOutputBody: Swift.Equatable {
    let owner: S3ClientTypes.Owner?
    let grants: [S3ClientTypes.Grant]?
}

extension GetObjectAclOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
    }
}

enum GetObjectAclOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchKey": return try await NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectAttributesInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), objectAttributes: \(Swift.String(describing: objectAttributes)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension GetObjectAttributesInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let maxParts = maxParts {
            items.add(Header(name: "x-amz-max-parts", value: Swift.String(maxParts)))
        }
        if let objectAttributes = objectAttributes {
            objectAttributes.forEach { headerValue in
                items.add(Header(name: "x-amz-object-attributes", value: quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let partNumberMarker = partNumberMarker {
            items.add(Header(name: "x-amz-part-number-marker", value: Swift.String(partNumberMarker)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension GetObjectAttributesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "attributes", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetObjectAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectAttributesInput: Swift.Equatable {
    /// The name of the bucket that contains the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Sets the maximum number of parts to return.
    public var maxParts: Swift.Int?
    /// Specifies the fields at the root level that you want returned in the response. Fields that you do not specify are not returned.
    /// This member is required.
    public var objectAttributes: [S3ClientTypes.ObjectAttributes]?
    /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
    public var partNumberMarker: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// The version ID used to reference a specific version of the object. S3 Versioning isn't enabled and supported for directory buckets. For this API operation, only the null value of the version ID is supported by directory buckets. You can only specify null to the versionId query parameter in the request.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        objectAttributes: [S3ClientTypes.ObjectAttributes]? = nil,
        partNumberMarker: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.maxParts = maxParts
        self.objectAttributes = objectAttributes
        self.partNumberMarker = partNumberMarker
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension GetObjectAttributesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetObjectAttributesOutputBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.eTag = output.eTag
            self.objectParts = output.objectParts
            self.objectSize = output.objectSize
            self.storageClass = output.storageClass
        } else {
            self.checksum = nil
            self.eTag = nil
            self.objectParts = nil
            self.objectSize = nil
            self.storageClass = nil
        }
    }
}

public struct GetObjectAttributesOutput: Swift.Equatable {
    /// The checksum or digest of the object.
    public var checksum: S3ClientTypes.Checksum?
    /// Specifies whether the object retrieved was (true) or was not (false) a delete marker. If false, this response header does not appear in the response. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// The creation date of the object.
    public var lastModified: ClientRuntime.Date?
    /// A collection of parts associated with a multipart upload.
    public var objectParts: S3ClientTypes.GetObjectAttributesParts?
    /// The size of the object in bytes.
    public var objectSize: Swift.Int?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Provides the storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html). Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        checksum: S3ClientTypes.Checksum? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        lastModified: ClientRuntime.Date? = nil,
        objectParts: S3ClientTypes.GetObjectAttributesParts? = nil,
        objectSize: Swift.Int? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.lastModified = lastModified
        self.objectParts = objectParts
        self.objectSize = objectSize
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.versionId = versionId
    }
}

struct GetObjectAttributesOutputBody: Swift.Equatable {
    let eTag: Swift.String?
    let checksum: S3ClientTypes.Checksum?
    let objectParts: S3ClientTypes.GetObjectAttributesParts?
    let storageClass: S3ClientTypes.StorageClass?
    let objectSize: Swift.Int?
}

extension GetObjectAttributesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum = "Checksum"
        case eTag = "ETag"
        case objectParts = "ObjectParts"
        case objectSize = "ObjectSize"
        case storageClass = "StorageClass"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Checksum.self, forKey: .checksum)
        checksum = checksumDecoded
        let objectPartsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.GetObjectAttributesParts.self, forKey: .objectParts)
        objectParts = objectPartsDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let objectSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .objectSize)
        objectSize = objectSizeDecoded
    }
}

enum GetObjectAttributesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchKey": return try await NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.GetObjectAttributesParts: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxParts = "MaxParts"
        case nextPartNumberMarker = "NextPartNumberMarker"
        case partNumberMarker = "PartNumberMarker"
        case parts = "Part"
        case totalPartsCount = "PartsCount"
    }

    static func writingClosure(_ value: S3ClientTypes.GetObjectAttributesParts?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("IsTruncated")].write(value.isTruncated)
        try writer[.init("MaxParts")].write(value.maxParts)
        try writer[.init("NextPartNumberMarker")].write(value.nextPartNumberMarker)
        try writer[.init("PartNumberMarker")].write(value.partNumberMarker)
        try writer[.init("Part")].writeList(value.parts, memberWritingClosure: S3ClientTypes.ObjectPart.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("PartsCount")].write(value.totalPartsCount)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalPartsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalPartsCount)
        totalPartsCount = totalPartsCountDecoded
        let partNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partNumberMarker)
        partNumberMarker = partNumberMarkerDecoded
        let nextPartNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPartNumberMarker)
        nextPartNumberMarker = nextPartNumberMarkerDecoded
        let maxPartsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxParts)
        maxParts = maxPartsDecoded
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectPart].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.ObjectPart]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.ObjectPart]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
    }
}

extension S3ClientTypes {
    /// A collection of parts associated with a multipart upload.
    public struct GetObjectAttributesParts: Swift.Equatable {
        /// Indicates whether the returned list of parts is truncated. A value of true indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.
        public var isTruncated: Swift.Bool?
        /// The maximum number of parts allowed in the response.
        public var maxParts: Swift.Int?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the PartNumberMarker request parameter in a subsequent request.
        public var nextPartNumberMarker: Swift.String?
        /// The marker for the current part.
        public var partNumberMarker: Swift.String?
        /// A container for elements related to a particular part. A response can contain zero or more Parts elements.
        ///
        /// * General purpose buckets - For GetObjectAttributes, if a additional checksum (including x-amz-checksum-crc32, x-amz-checksum-crc32c, x-amz-checksum-sha1, or x-amz-checksum-sha256) isn't applied to the object specified in the request, the response doesn't return Part.
        ///
        /// * Directory buckets - For GetObjectAttributes, no matter whether a additional checksum is applied to the object specified in the request, the response returns Part.
        public var parts: [S3ClientTypes.ObjectPart]?
        /// The total number of parts.
        public var totalPartsCount: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            maxParts: Swift.Int? = nil,
            nextPartNumberMarker: Swift.String? = nil,
            partNumberMarker: Swift.String? = nil,
            parts: [S3ClientTypes.ObjectPart]? = nil,
            totalPartsCount: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.maxParts = maxParts
            self.nextPartNumberMarker = nextPartNumberMarker
            self.partNumberMarker = partNumberMarker
            self.parts = parts
            self.totalPartsCount = totalPartsCount
        }
    }

}

extension GetObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectInput(bucket: \(Swift.String(describing: bucket)), checksumMode: \(Swift.String(describing: checksumMode)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), responseCacheControl: \(Swift.String(describing: responseCacheControl)), responseContentDisposition: \(Swift.String(describing: responseContentDisposition)), responseContentEncoding: \(Swift.String(describing: responseContentEncoding)), responseContentLanguage: \(Swift.String(describing: responseContentLanguage)), responseContentType: \(Swift.String(describing: responseContentType)), responseExpires: \(Swift.String(describing: responseExpires)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension GetObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumMode = checksumMode {
            items.add(Header(name: "x-amz-checksum-mode", value: Swift.String(checksumMode.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        if let ifModifiedSince = ifModifiedSince {
            items.add(Header(name: "If-Modified-Since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: ifModifiedSince))))
        }
        if let ifNoneMatch = ifNoneMatch {
            items.add(Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let ifUnmodifiedSince = ifUnmodifiedSince {
            items.add(Header(name: "If-Unmodified-Since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: ifUnmodifiedSince))))
        }
        if let range = range {
            items.add(Header(name: "Range", value: Swift.String(range)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension GetObjectInput {
    public func presignURL(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> ClientRuntime.URL? {
        let serviceName = "S3"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        var operation = ClientRuntime.OperationStack<GetObjectInput, GetObjectOutput>(id: "getObject")
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<GetObjectInput, GetObjectOutput>())
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<GetObjectInput, GetObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.serviceSpecific.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.serviceSpecific.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.serviceSpecific.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.serviceSpecific.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.serviceSpecific.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.serviceSpecific.useGlobalEndpoint ?? false)
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware<GetObjectOutput>(endpointResolver: config.serviceSpecific.endpointResolver, endpointParams: endpointParams))
        operation.serializeStep.intercept(position: .after, middleware: GetObjectInputGETQueryItemMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: ClientRuntime.RetryMiddleware<ClientRuntime.DefaultRetryStrategy, AWSClientRuntime.AWSRetryErrorInfoProvider, GetObjectOutput>(options: config.retryStrategyOptions))
        let sigv4Config = AWSClientRuntime.SigV4Config(signatureType: .requestQueryParams, useDoubleURIEncode: false, shouldNormalizeURIPath: false, expiration: expiration, unsignedBody: true, signingAlgorithm: .sigv4)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware<GetObjectOutput>(config: sigv4Config))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware<GetObjectOutput>(responseClosure(decoder: decoder), responseErrorClosure(GetObjectOutputError.self, decoder: decoder)))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.LoggerMiddleware<GetObjectOutput>(clientLogMode: config.clientLogMode))
        let presignedRequestBuilder = try await operation.presignedRequest(context: context, input: input, output: GetObjectOutput(), next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build(), let presignedURL = builtRequest.endpoint.url else {
            return nil
        }
        return presignedURL
    }
}

extension GetObjectInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> ClientRuntime.SdkHttpRequest? {
        let serviceName = "S3"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        var operation = ClientRuntime.OperationStack<GetObjectInput, GetObjectOutput>(id: "getObject")
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<GetObjectInput, GetObjectOutput>())
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<GetObjectInput, GetObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.serviceSpecific.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.serviceSpecific.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.serviceSpecific.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.serviceSpecific.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.serviceSpecific.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.serviceSpecific.useGlobalEndpoint ?? false)
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware<GetObjectOutput>(endpointResolver: config.serviceSpecific.endpointResolver, endpointParams: endpointParams))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromConfig(serviceID: serviceName, version: "1.0", config: config)))
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<GetObjectInput, GetObjectOutput>())
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.QueryItemMiddleware<GetObjectInput, GetObjectOutput>())
        operation.finalizeStep.intercept(position: .after, middleware: ClientRuntime.RetryMiddleware<ClientRuntime.DefaultRetryStrategy, AWSClientRuntime.AWSRetryErrorInfoProvider, GetObjectOutput>(options: config.retryStrategyOptions))
        let sigv4Config = AWSClientRuntime.SigV4Config(useDoubleURIEncode: false, shouldNormalizeURIPath: false, expiration: expiration, signedBodyHeader: .contentSha256, unsignedBody: false, signingAlgorithm: .sigv4)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware<GetObjectOutput>(config: sigv4Config))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware<GetObjectOutput>(responseClosure(decoder: decoder), responseErrorClosure(GetObjectOutputError.self, decoder: decoder)))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.LoggerMiddleware<GetObjectOutput>(clientLogMode: config.clientLogMode))
        let presignedRequestBuilder = try await operation.presignedRequest(context: context, input: input, output: GetObjectOutput(), next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build() else {
            return nil
        }
        return builtRequest
    }
}

public struct GetObjectInputGETQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectInputGETQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<GetObjectOutput>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let bucket = input.operationInput.bucket {
            let queryItem = ClientRuntime.URLQueryItem(name: "Bucket".urlPercentEncoding(), value: Swift.String(bucket).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let ifMatch = input.operationInput.ifMatch {
            let queryItem = ClientRuntime.URLQueryItem(name: "IfMatch".urlPercentEncoding(), value: Swift.String(ifMatch).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let ifNoneMatch = input.operationInput.ifNoneMatch {
            let queryItem = ClientRuntime.URLQueryItem(name: "IfNoneMatch".urlPercentEncoding(), value: Swift.String(ifNoneMatch).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let key = input.operationInput.key {
            let queryItem = ClientRuntime.URLQueryItem(name: "Key".urlPercentEncoding(), value: Swift.String(key).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let range = input.operationInput.range {
            let queryItem = ClientRuntime.URLQueryItem(name: "Range".urlPercentEncoding(), value: Swift.String(range).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseCacheControl = input.operationInput.responseCacheControl {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseCacheControl".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentDisposition = input.operationInput.responseContentDisposition {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentDisposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentEncoding = input.operationInput.responseContentEncoding {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentEncoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentLanguage = input.operationInput.responseContentLanguage {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentLanguage".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentType = input.operationInput.responseContentType {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentType".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let versionId = input.operationInput.versionId {
            let queryItem = ClientRuntime.URLQueryItem(name: "VersionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerAlgorithm = input.operationInput.sseCustomerAlgorithm {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerAlgorithm".urlPercentEncoding(), value: Swift.String(sseCustomerAlgorithm).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerKey = input.operationInput.sseCustomerKey {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerKey".urlPercentEncoding(), value: Swift.String(sseCustomerKey).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerKeyMD5 = input.operationInput.sseCustomerKeyMD5 {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerKeyMD5".urlPercentEncoding(), value: Swift.String(sseCustomerKeyMD5).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let requestPayer = input.operationInput.requestPayer {
            let queryItem = ClientRuntime.URLQueryItem(name: "RequestPayer".urlPercentEncoding(), value: Swift.String(requestPayer.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            let queryItem = ClientRuntime.URLQueryItem(name: "ExpectedBucketOwner".urlPercentEncoding(), value: Swift.String(expectedBucketOwner).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let checksumMode = input.operationInput.checksumMode {
            let queryItem = ClientRuntime.URLQueryItem(name: "ChecksumMode".urlPercentEncoding(), value: Swift.String(checksumMode.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectOutput>
    public typealias Context = ClientRuntime.HttpContext
}

extension GetObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "GetObject"))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            if let responseContentDisposition = responseContentDisposition {
                let responseContentDispositionQueryItem = ClientRuntime.URLQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
                items.append(responseContentDispositionQueryItem)
            }
            if let partNumber = partNumber {
                let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
                items.append(partNumberQueryItem)
            }
            if let responseContentType = responseContentType {
                let responseContentTypeQueryItem = ClientRuntime.URLQueryItem(name: "response-content-type".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
                items.append(responseContentTypeQueryItem)
            }
            if let responseExpires = responseExpires {
                let responseExpiresQueryItem = ClientRuntime.URLQueryItem(name: "response-expires".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .httpDate).string(from: responseExpires)).urlPercentEncoding())
                items.append(responseExpiresQueryItem)
            }
            if let responseContentEncoding = responseContentEncoding {
                let responseContentEncodingQueryItem = ClientRuntime.URLQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
                items.append(responseContentEncodingQueryItem)
            }
            if let responseCacheControl = responseCacheControl {
                let responseCacheControlQueryItem = ClientRuntime.URLQueryItem(name: "response-cache-control".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
                items.append(responseCacheControlQueryItem)
            }
            if let responseContentLanguage = responseContentLanguage {
                let responseContentLanguageQueryItem = ClientRuntime.URLQueryItem(name: "response-content-language".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
                items.append(responseContentLanguageQueryItem)
            }
            return items
        }
    }
}

extension GetObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectInput: Swift.Equatable {
    /// The bucket name containing the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Object Lambda access points - When you use this action with an Object Lambda access point, you must direct requests to the Object Lambda access point hostname. The Object Lambda access point hostname takes the form AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// To retrieve the checksum, this mode must be enabled.
    public var checksumMode: S3ClientTypes.ChecksumMode?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Return the object only if its entity tag (ETag) is the same as the one specified in this header; otherwise, return a 412 Precondition Failed error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows: If-Match condition evaluates to true, and; If-Unmodified-Since condition evaluates to false; then, S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifMatch: Swift.String?
    /// Return the object only if it has been modified since the specified time; otherwise, return a 304 Not Modified error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows: If-None-Match condition evaluates to false, and; If-Modified-Since condition evaluates to true; then, S3 returns 304 Not Modified status code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifModifiedSince: ClientRuntime.Date?
    /// Return the object only if its entity tag (ETag) is different from the one specified in this header; otherwise, return a 304 Not Modified error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows: If-None-Match condition evaluates to false, and; If-Modified-Since condition evaluates to true; then, S3 returns 304 Not Modified HTTP status code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifNoneMatch: Swift.String?
    /// Return the object only if it has not been modified since the specified time; otherwise, return a 412 Precondition Failed error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows: If-Match condition evaluates to true, and; If-Unmodified-Since condition evaluates to false; then, S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifUnmodifiedSince: ClientRuntime.Date?
    /// Key of the object to get.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
    public var partNumber: Swift.Int?
    /// Downloads the specified byte range of an object. For more information about the HTTP Range header, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-range](https://www.rfc-editor.org/rfc/rfc9110.html#name-range). Amazon S3 doesn't support retrieving multiple ranges of data per GET request.
    public var range: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Sets the Cache-Control header of the response.
    public var responseCacheControl: Swift.String?
    /// Sets the Content-Disposition header of the response.
    public var responseContentDisposition: Swift.String?
    /// Sets the Content-Encoding header of the response.
    public var responseContentEncoding: Swift.String?
    /// Sets the Content-Language header of the response.
    public var responseContentLanguage: Swift.String?
    /// Sets the Content-Type header of the response.
    public var responseContentType: Swift.String?
    /// Sets the Expires header of the response.
    public var responseExpires: ClientRuntime.Date?
    /// Specifies the algorithm to use when decrypting the object (for example, AES256). If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key that you originally provided for Amazon S3 to encrypt the data before storing it. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the customer-provided encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Version ID used to reference a specific version of the object. By default, the GetObject operation returns the current version of an object. To return a different version, use the versionId subresource.
    ///
    /// * If you include a versionId in your request header, you must have the s3:GetObjectVersion permission to access a specific version of an object. The s3:GetObject permission is not required in this scenario.
    ///
    /// * If you request the current version of an object without a specific versionId in the request header, only the s3:GetObject permission is required. The s3:GetObjectVersion permission is not required in this scenario.
    ///
    /// * Directory buckets - S3 Versioning isn't enabled and supported for directory buckets. For this API operation, only the null value of the version ID is supported by directory buckets. You can only specify null to the versionId query parameter in the request.
    ///
    ///
    /// For more information about versioning, see [PutBucketVersioning](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html).
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumMode: S3ClientTypes.ChecksumMode? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: ClientRuntime.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: ClientRuntime.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        responseCacheControl: Swift.String? = nil,
        responseContentDisposition: Swift.String? = nil,
        responseContentEncoding: Swift.String? = nil,
        responseContentLanguage: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        responseExpires: ClientRuntime.Date? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumMode = checksumMode
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.responseCacheControl = responseCacheControl
        self.responseContentDisposition = responseContentDisposition
        self.responseContentEncoding = responseContentEncoding
        self.responseContentLanguage = responseContentLanguage
        self.responseContentType = responseContentType
        self.responseExpires = responseExpires
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension GetObjectLegalHoldInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectLegalHoldInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "legal-hold", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetObjectLegalHoldInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectLegalHoldInput: Swift.Equatable {
    /// The bucket name containing the object whose legal hold status you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object whose legal hold status you want to retrieve.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID of the object whose legal hold status you want to retrieve.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension GetObjectLegalHoldOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.ObjectLockLegalHold = try responseDecoder.decode(responseBody: data)
            self.legalHold = output
        } else {
            self.legalHold = nil
        }
    }
}

public struct GetObjectLegalHoldOutput: Swift.Equatable {
    /// The current legal hold status for the specified object.
    public var legalHold: S3ClientTypes.ObjectLockLegalHold?

    public init(
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil
    )
    {
        self.legalHold = legalHold
    }
}

struct GetObjectLegalHoldOutputBody: Swift.Equatable {
    let legalHold: S3ClientTypes.ObjectLockLegalHold?
}

extension GetObjectLegalHoldOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let legalHoldDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHold.self, forKey: .legalHold)
        legalHold = legalHoldDecoded
    }
}

enum GetObjectLegalHoldOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectLockConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetObjectLockConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "object-lock", value: nil))
            return items
        }
    }
}

extension GetObjectLockConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetObjectLockConfigurationInput: Swift.Equatable {
    /// The bucket whose Object Lock configuration you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetObjectLockConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.ObjectLockConfiguration = try responseDecoder.decode(responseBody: data)
            self.objectLockConfiguration = output
        } else {
            self.objectLockConfiguration = nil
        }
    }
}

public struct GetObjectLockConfigurationOutput: Swift.Equatable {
    /// The specified bucket's Object Lock configuration.
    public var objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?

    public init(
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil
    )
    {
        self.objectLockConfiguration = objectLockConfiguration
    }
}

struct GetObjectLockConfigurationOutputBody: Swift.Equatable {
    let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
}

extension GetObjectLockConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockConfiguration.self, forKey: .objectLockConfiguration)
        objectLockConfiguration = objectLockConfigurationDecoded
    }
}

enum GetObjectLockConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectOutput(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension GetObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            self.acceptRanges = acceptRangesHeaderValue
        } else {
            self.acceptRanges = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            self.cacheControl = cacheControlHeaderValue
        } else {
            self.cacheControl = nil
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            self.checksumCRC32 = checksumCRC32HeaderValue
        } else {
            self.checksumCRC32 = nil
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            self.checksumCRC32C = checksumCRC32CHeaderValue
        } else {
            self.checksumCRC32C = nil
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            self.checksumSHA1 = checksumSHA1HeaderValue
        } else {
            self.checksumSHA1 = nil
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            self.checksumSHA256 = checksumSHA256HeaderValue
        } else {
            self.checksumSHA256 = nil
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            self.contentDisposition = contentDispositionHeaderValue
        } else {
            self.contentDisposition = nil
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            self.contentEncoding = contentEncodingHeaderValue
        } else {
            self.contentEncoding = nil
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            self.contentLanguage = contentLanguageHeaderValue
        } else {
            self.contentLanguage = nil
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = nil
        }
        if let contentRangeHeaderValue = httpResponse.headers.value(for: "Content-Range") {
            self.contentRange = contentRangeHeaderValue
        } else {
            self.contentRange = nil
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            self.expires = expiresHeaderValue
        } else {
            self.expires = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            self.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        } else {
            self.missingMeta = nil
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            self.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        } else {
            self.objectLockLegalHoldStatus = nil
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            self.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        } else {
            self.objectLockMode = nil
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            self.objectLockRetainUntilDate = TimestampFormatter(format: .dateTime).date(from: objectLockRetainUntilDateHeaderValue)
        } else {
            self.objectLockRetainUntilDate = nil
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            self.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        } else {
            self.partsCount = nil
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            self.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        } else {
            self.replicationStatus = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            self.restore = restoreHeaderValue
        } else {
            self.restore = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            self.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        } else {
            self.storageClass = nil
        }
        if let tagCountHeaderValue = httpResponse.headers.value(for: "x-amz-tagging-count") {
            self.tagCount = Swift.Int(tagCountHeaderValue) ?? 0
        } else {
            self.tagCount = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            self.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        } else {
            self.websiteRedirectLocation = nil
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            self.metadata = mapMember
        } else {
            self.metadata = [:]
        }
        switch httpResponse.body {
        case .data(let data):
            self.body = .data(data)
        case .stream(let stream):
            self.body = .stream(stream)
        case .noStream:
            self.body = nil
        }
    }
}

public struct GetObjectOutput: Swift.Equatable {
    /// Indicates that a range of bytes was specified in the request.
    public var acceptRanges: Swift.String?
    /// Object data.
    public var body: ClientRuntime.ByteStream?
    /// Indicates whether the object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Indicates what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes.
    public var contentLength: Swift.Int?
    /// The portion of the object returned in the response.
    public var contentRange: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Indicates whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
    ///
    /// * If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes x-amz-delete-marker: true in the response.
    ///
    /// * If the specified version in the request is a delete marker, the response returns a 405 Method Not Allowed error and the Last-Modified: timestamp response header.
    public var deleteMarker: Swift.Bool?
    /// An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// If the object expiration is configured (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Date and time when the object was last modified. General purpose buckets - When you specify a versionId of the object in your request, if the specified version in the request is a delete marker, the response returns a 405 Method Not Allowed error and the Last-Modified: timestamp response header.
    public var lastModified: ClientRuntime.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// This is set to the number of metadata entries not returned in the headers that are prefixed with x-amz-meta-. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers. This functionality is not supported for directory buckets.
    public var missingMeta: Swift.Int?
    /// Indicates whether this object has an active legal hold. This field is only returned if you have permission to view an object's legal hold status. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that's currently in place for this object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when this object's Object Lock will expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// The count of parts this object has. This value is only returned if you specify partNumber in your request and the object was uploaded as a multipart upload.
    public var partsCount: Swift.Int?
    /// Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule. This functionality is not supported for directory buckets.
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Provides information about object restoration action and expiration time of the restored object copy. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The number of tags, if any, on the object, when you have the relevant permission to read object tags. You can use [GetObjectTagging](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html) to retrieve the tag set associated with an object. This functionality is not supported for directory buckets.
    public var tagCount: Swift.Int?
    /// Version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: Swift.String? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int? = nil,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct GetObjectOutputBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension GetObjectOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.data("".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

enum GetObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidObjectState": return try await InvalidObjectState(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            case "NoSuchKey": return try await NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectRetentionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectRetentionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "retention", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetObjectRetentionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectRetentionInput: Swift.Equatable {
    /// The bucket name containing the object whose retention settings you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object whose retention settings you want to retrieve.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID for the object whose retention settings you want to retrieve.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension GetObjectRetentionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.ObjectLockRetention = try responseDecoder.decode(responseBody: data)
            self.retention = output
        } else {
            self.retention = nil
        }
    }
}

public struct GetObjectRetentionOutput: Swift.Equatable {
    /// The container element for an object's retention settings.
    public var retention: S3ClientTypes.ObjectLockRetention?

    public init(
        retention: S3ClientTypes.ObjectLockRetention? = nil
    )
    {
        self.retention = retention
    }
}

struct GetObjectRetentionOutputBody: Swift.Equatable {
    let retention: S3ClientTypes.ObjectLockRetention?
}

extension GetObjectRetentionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetention.self, forKey: .retention)
        retention = retentionDecoded
    }
}

enum GetObjectRetentionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetObjectTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectTaggingInput: Swift.Equatable {
    /// The bucket name containing the object for which to get the tagging information. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which to get the tagging information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The versionId of the object for which to get the tagging information.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension GetObjectTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetObjectTaggingOutputBody = try responseDecoder.decode(responseBody: data)
            self.tagSet = output.tagSet
        } else {
            self.tagSet = nil
        }
    }
}

public struct GetObjectTaggingOutput: Swift.Equatable {
    /// Contains the tag set.
    /// This member is required.
    public var tagSet: [S3ClientTypes.Tag]?
    /// The versionId of the object for which you got the tagging information.
    public var versionId: Swift.String?

    public init(
        tagSet: [S3ClientTypes.Tag]? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.tagSet = tagSet
        self.versionId = versionId
    }
}

struct GetObjectTaggingOutputBody: Swift.Equatable {
    let tagSet: [S3ClientTypes.Tag]?
}

extension GetObjectTaggingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

enum GetObjectTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetObjectTorrentInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectTorrentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "torrent", value: nil))
            return items
        }
    }
}

extension GetObjectTorrentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct GetObjectTorrentInput: Swift.Equatable {
    /// The name of the bucket containing the object for which to get the torrent files.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The object key for which to get the information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
    }
}

extension GetObjectTorrentOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        switch httpResponse.body {
        case .data(let data):
            self.body = .data(data)
        case .stream(let stream):
            self.body = .stream(stream)
        case .noStream:
            self.body = nil
        }
    }
}

public struct GetObjectTorrentOutput: Swift.Equatable {
    /// A Bencoded dictionary as defined by the BitTorrent specification
    public var body: ClientRuntime.ByteStream?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        body: ClientRuntime.ByteStream? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.body = body
        self.requestCharged = requestCharged
    }
}

struct GetObjectTorrentOutputBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension GetObjectTorrentOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.data("".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

enum GetObjectTorrentOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension GetPublicAccessBlockInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetPublicAccessBlockInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
            return items
        }
    }
}

extension GetPublicAccessBlockInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPublicAccessBlockInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension GetPublicAccessBlockOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.PublicAccessBlockConfiguration = try responseDecoder.decode(responseBody: data)
            self.publicAccessBlockConfiguration = output
        } else {
            self.publicAccessBlockConfiguration = nil
        }
    }
}

public struct GetPublicAccessBlockOutput: Swift.Equatable {
    /// The PublicAccessBlock configuration currently in effect for this Amazon S3 bucket.
    public var publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init(
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

struct GetPublicAccessBlockOutputBody: Swift.Equatable {
    let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?
}

extension GetPublicAccessBlockOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PublicAccessBlockConfiguration.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
    }
}

enum GetPublicAccessBlockOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.GlacierJobParameters: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tier = "Tier"
    }

    static func writingClosure(_ value: S3ClientTypes.GlacierJobParameters?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Tier")].write(value.tier)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tier.self, forKey: .tier)
        tier = tierDecoded
    }
}

extension S3ClientTypes {
    /// Container for S3 Glacier job parameters.
    public struct GlacierJobParameters: Swift.Equatable {
        /// Retrieval tier at which the restore will be processed.
        /// This member is required.
        public var tier: S3ClientTypes.Tier?

        public init(
            tier: S3ClientTypes.Tier? = nil
        )
        {
            self.tier = tier
        }
    }

}

extension S3ClientTypes.Grant: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantee = "Grantee"
        case permission = "Permission"
    }

    static func writingClosure(_ value: S3ClientTypes.Grant?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Grantee", namespace: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].write(value.grantee, writingClosure: S3ClientTypes.Grantee.writingClosure(_:to:))
        try writer[.init("Permission")].write(value.permission)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Grantee.self, forKey: .grantee)
        grantee = granteeDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Permission.self, forKey: .permission)
        permission = permissionDecoded
    }
}

extension S3ClientTypes {
    /// Container for grant information.
    public struct Grant: Swift.Equatable {
        /// The person being granted permissions.
        public var grantee: S3ClientTypes.Grantee?
        /// Specifies the permission given to the grantee.
        public var permission: S3ClientTypes.Permission?

        public init(
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.Permission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }

}

extension S3ClientTypes.Grantee: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case emailAddress = "EmailAddress"
        case id = "ID"
        case type = "xsi:type"
        case uri = "URI"
    }

    static func writingClosure(_ value: S3ClientTypes.Grantee?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DisplayName")].write(value.displayName)
        try writer[.init("EmailAddress")].write(value.emailAddress)
        try writer[.init("ID")].write(value.id)
        try writer[.init("xsi:type", location: .attribute)].write(value.type)
        try writer[.init("URI")].write(value.uri)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}

extension S3ClientTypes {
    /// Container for the person being granted permissions.
    public struct Grantee: Swift.Equatable {
        /// Screen name of the grantee.
        public var displayName: Swift.String?
        /// Email address of the grantee. Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
        ///
        /// * US East (N. Virginia)
        ///
        /// * US West (N. California)
        ///
        /// * US West (Oregon)
        ///
        /// * Asia Pacific (Singapore)
        ///
        /// * Asia Pacific (Sydney)
        ///
        /// * Asia Pacific (Tokyo)
        ///
        /// * Europe (Ireland)
        ///
        /// * South America (São Paulo)
        ///
        ///
        /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
        public var emailAddress: Swift.String?
        /// The canonical user ID of the grantee.
        public var id: Swift.String?
        /// Type of grantee
        /// This member is required.
        public var type: S3ClientTypes.ModelType?
        /// URI of the grantee group.
        public var uri: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            emailAddress: Swift.String? = nil,
            id: Swift.String? = nil,
            type: S3ClientTypes.ModelType? = nil,
            uri: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.emailAddress = emailAddress
            self.id = id
            self.type = type
            self.uri = uri
        }
    }

}

extension HeadBucketInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension HeadBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct HeadBucketInput: Swift.Equatable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Object Lambda access points - When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList). Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension HeadBucketOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let accessPointAliasHeaderValue = httpResponse.headers.value(for: "x-amz-access-point-alias") {
            self.accessPointAlias = Swift.Bool(accessPointAliasHeaderValue) ?? false
        } else {
            self.accessPointAlias = nil
        }
        if let bucketLocationNameHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-location-name") {
            self.bucketLocationName = bucketLocationNameHeaderValue
        } else {
            self.bucketLocationName = nil
        }
        if let bucketLocationTypeHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-location-type") {
            self.bucketLocationType = S3ClientTypes.LocationType(rawValue: bucketLocationTypeHeaderValue)
        } else {
            self.bucketLocationType = nil
        }
        if let bucketRegionHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-region") {
            self.bucketRegion = bucketRegionHeaderValue
        } else {
            self.bucketRegion = nil
        }
    }
}

public struct HeadBucketOutput: Swift.Equatable {
    /// Indicates whether the bucket name used in the request is an access point alias. This functionality is not supported for directory buckets.
    public var accessPointAlias: Swift.Bool?
    /// The name of the location where the bucket will be created. For directory buckets, the AZ ID of the Availability Zone where the bucket is created. An example AZ ID value is usw2-az2. This functionality is only supported by directory buckets.
    public var bucketLocationName: Swift.String?
    /// The type of location where the bucket is created. This functionality is only supported by directory buckets.
    public var bucketLocationType: S3ClientTypes.LocationType?
    /// The Region that the bucket is located. This functionality is not supported for directory buckets.
    public var bucketRegion: Swift.String?

    public init(
        accessPointAlias: Swift.Bool? = nil,
        bucketLocationName: Swift.String? = nil,
        bucketLocationType: S3ClientTypes.LocationType? = nil,
        bucketRegion: Swift.String? = nil
    )
    {
        self.accessPointAlias = accessPointAlias
        self.bucketLocationName = bucketLocationName
        self.bucketLocationType = bucketLocationType
        self.bucketRegion = bucketRegion
    }
}

enum HeadBucketOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NotFound": return try await NotFound(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension HeadObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectInput(bucket: \(Swift.String(describing: bucket)), checksumMode: \(Swift.String(describing: checksumMode)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension HeadObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumMode = checksumMode {
            items.add(Header(name: "x-amz-checksum-mode", value: Swift.String(checksumMode.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        if let ifModifiedSince = ifModifiedSince {
            items.add(Header(name: "If-Modified-Since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: ifModifiedSince))))
        }
        if let ifNoneMatch = ifNoneMatch {
            items.add(Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let ifUnmodifiedSince = ifUnmodifiedSince {
            items.add(Header(name: "If-Unmodified-Since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: ifUnmodifiedSince))))
        }
        if let range = range {
            items.add(Header(name: "Range", value: Swift.String(range)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension HeadObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            if let partNumber = partNumber {
                let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
                items.append(partNumberQueryItem)
            }
            return items
        }
    }
}

extension HeadObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct HeadObjectInput: Swift.Equatable {
    /// The name of the bucket that contains the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// To retrieve the checksum, this parameter must be enabled. In addition, if you enable ChecksumMode and the object is encrypted with Amazon Web Services Key Management Service (Amazon Web Services KMS), you must have permission to use the kms:Decrypt action for the request to succeed.
    public var checksumMode: S3ClientTypes.ChecksumMode?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Return the object only if its entity tag (ETag) is the same as the one specified; otherwise, return a 412 (precondition failed) error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows:
    ///
    /// * If-Match condition evaluates to true, and;
    ///
    /// * If-Unmodified-Since condition evaluates to false;
    ///
    ///
    /// Then Amazon S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifMatch: Swift.String?
    /// Return the object only if it has been modified since the specified time; otherwise, return a 304 (not modified) error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows:
    ///
    /// * If-None-Match condition evaluates to false, and;
    ///
    /// * If-Modified-Since condition evaluates to true;
    ///
    ///
    /// Then Amazon S3 returns the 304 Not Modified response code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifModifiedSince: ClientRuntime.Date?
    /// Return the object only if its entity tag (ETag) is different from the one specified; otherwise, return a 304 (not modified) error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows:
    ///
    /// * If-None-Match condition evaluates to false, and;
    ///
    /// * If-Modified-Since condition evaluates to true;
    ///
    ///
    /// Then Amazon S3 returns the 304 Not Modified response code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifNoneMatch: Swift.String?
    /// Return the object only if it has not been modified since the specified time; otherwise, return a 412 (precondition failed) error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows:
    ///
    /// * If-Match condition evaluates to true, and;
    ///
    /// * If-Unmodified-Since condition evaluates to false;
    ///
    ///
    /// Then Amazon S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifUnmodifiedSince: ClientRuntime.Date?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
    public var partNumber: Swift.Int?
    /// HeadObject returns only the metadata for an object. If the Range is satisfiable, only the ContentLength is affected in the response. If the Range is not satisfiable, S3 returns a 416 - Requested Range Not Satisfiable error.
    public var range: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Version ID used to reference a specific version of the object. For directory buckets in this API operation, only the null value of the version ID is supported.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumMode: S3ClientTypes.ChecksumMode? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: ClientRuntime.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: ClientRuntime.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumMode = checksumMode
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension HeadObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectOutput(acceptRanges: \(Swift.String(describing: acceptRanges)), archiveStatus: \(Swift.String(describing: archiveStatus)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension HeadObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            self.acceptRanges = acceptRangesHeaderValue
        } else {
            self.acceptRanges = nil
        }
        if let archiveStatusHeaderValue = httpResponse.headers.value(for: "x-amz-archive-status") {
            self.archiveStatus = S3ClientTypes.ArchiveStatus(rawValue: archiveStatusHeaderValue)
        } else {
            self.archiveStatus = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            self.cacheControl = cacheControlHeaderValue
        } else {
            self.cacheControl = nil
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            self.checksumCRC32 = checksumCRC32HeaderValue
        } else {
            self.checksumCRC32 = nil
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            self.checksumCRC32C = checksumCRC32CHeaderValue
        } else {
            self.checksumCRC32C = nil
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            self.checksumSHA1 = checksumSHA1HeaderValue
        } else {
            self.checksumSHA1 = nil
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            self.checksumSHA256 = checksumSHA256HeaderValue
        } else {
            self.checksumSHA256 = nil
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            self.contentDisposition = contentDispositionHeaderValue
        } else {
            self.contentDisposition = nil
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            self.contentEncoding = contentEncodingHeaderValue
        } else {
            self.contentEncoding = nil
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            self.contentLanguage = contentLanguageHeaderValue
        } else {
            self.contentLanguage = nil
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = nil
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            self.expires = expiresHeaderValue
        } else {
            self.expires = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            self.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        } else {
            self.missingMeta = nil
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            self.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        } else {
            self.objectLockLegalHoldStatus = nil
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            self.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        } else {
            self.objectLockMode = nil
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            self.objectLockRetainUntilDate = TimestampFormatter(format: .dateTime).date(from: objectLockRetainUntilDateHeaderValue)
        } else {
            self.objectLockRetainUntilDate = nil
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            self.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        } else {
            self.partsCount = nil
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            self.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        } else {
            self.replicationStatus = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            self.restore = restoreHeaderValue
        } else {
            self.restore = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            self.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        } else {
            self.storageClass = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            self.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        } else {
            self.websiteRedirectLocation = nil
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            self.metadata = mapMember
        } else {
            self.metadata = [:]
        }
    }
}

public struct HeadObjectOutput: Swift.Equatable {
    /// Indicates that a range of bytes was specified.
    public var acceptRanges: Swift.String?
    /// The archive state of the head object. This functionality is not supported for directory buckets.
    public var archiveStatus: S3ClientTypes.ArchiveStatus?
    /// Indicates whether the object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Indicates what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes.
    public var contentLength: Swift.Int?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// If the object expiration is configured (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Date and time when the object was last modified.
    public var lastModified: ClientRuntime.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers. This functionality is not supported for directory buckets.
    public var missingMeta: Swift.Int?
    /// Specifies whether a legal hold is in effect for this object. This header is only returned if the requester has the s3:GetObjectLegalHold permission. This header is not returned if the specified version of this object has never had a legal hold applied. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode, if any, that's in effect for this object. This header is only returned if the requester has the s3:GetObjectRetention permission. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when the Object Lock retention period expires. This header is only returned if the requester has the s3:GetObjectRetention permission. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// The count of parts this object has. This value is only returned if you specify partNumber in your request and the object was uploaded as a multipart upload.
    public var partsCount: Swift.Int?
    /// Amazon S3 can return this header if your request involves a bucket that is either a source or a destination in a replication rule. In replication, you have a source bucket on which you configure replication and destination bucket or buckets where Amazon S3 stores object replicas. When you request an object (GetObject) or object metadata (HeadObject) from these buckets, Amazon S3 will return the x-amz-replication-status header in the response as follows:
    ///
    /// * If requesting an object from the source bucket, Amazon S3 will return the x-amz-replication-status header if the object in your request is eligible for replication. For example, suppose that in your replication configuration, you specify object prefix TaxDocs requesting Amazon S3 to replicate objects with key prefix TaxDocs. Any objects you upload with this key name prefix, for example TaxDocs/document1.pdf, are eligible for replication. For any object request with this key name prefix, Amazon S3 will return the x-amz-replication-status header with value PENDING, COMPLETED or FAILED indicating object replication status.
    ///
    /// * If requesting an object from a destination bucket, Amazon S3 will return the x-amz-replication-status header with value REPLICA if the object in your request is a replica that Amazon S3 created and there is no replica modification replication in progress.
    ///
    /// * When replicating objects to multiple destination buckets, the x-amz-replication-status header acts differently. The header of the source object will only return a value of COMPLETED when replication is successful to all destinations. The header will remain at value PENDING until replication has completed for all destinations. If one or more destinations fails replication the header will return FAILED.
    ///
    ///
    /// For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html). This functionality is not supported for directory buckets.
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// If the object is an archived object (an object whose storage class is GLACIER), the response includes this header if either the archive restoration is in progress (see [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html) or an archive copy is already restored. If an archive copy is already restored, the header value indicates when Amazon S3 is scheduled to delete the object copy. For example: x-amz-restore: ongoing-request="false", expiry-date="Fri, 21 Dec 2012 00:00:00 GMT" If the object restoration is in progress, the header returns the value ongoing-request="true". For more information about archiving objects, see [Transitioning Objects: General Considerations](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations). This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html). Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// Version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        archiveStatus: S3ClientTypes.ArchiveStatus? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: Swift.String? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.archiveStatus = archiveStatus
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

enum HeadObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NotFound": return try await NotFound(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.IndexDocument: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suffix = "Suffix"
    }

    static func writingClosure(_ value: S3ClientTypes.IndexDocument?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Suffix")].write(value.suffix)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suffixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .suffix)
        suffix = suffixDecoded
    }
}

extension S3ClientTypes {
    /// Container for the Suffix element.
    public struct IndexDocument: Swift.Equatable {
        /// A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var suffix: Swift.String?

        public init(
            suffix: Swift.String? = nil
        )
        {
            self.suffix = suffix
        }
    }

}

extension S3ClientTypes.Initiator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case id = "ID"
    }

    static func writingClosure(_ value: S3ClientTypes.Initiator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DisplayName")].write(value.displayName)
        try writer[.init("ID")].write(value.id)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension S3ClientTypes {
    /// Container element that identifies who initiated the multipart upload.
    public struct Initiator: Swift.Equatable {
        /// Name of the Principal. This functionality is not supported for directory buckets.
        public var displayName: Swift.String?
        /// If the principal is an Amazon Web Services account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value. Directory buckets - If the principal is an Amazon Web Services account, it provides the Amazon Web Services account ID. If the principal is an IAM User, it provides a user ARN value.
        public var id: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.id = id
        }
    }

}

extension S3ClientTypes.InputSerialization: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csv = "CSV"
        case compressionType = "CompressionType"
        case json = "JSON"
        case parquet = "Parquet"
    }

    static func writingClosure(_ value: S3ClientTypes.InputSerialization?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CSV")].write(value.csv, writingClosure: S3ClientTypes.CSVInput.writingClosure(_:to:))
        try writer[.init("CompressionType")].write(value.compressionType)
        try writer[.init("JSON")].write(value.json, writingClosure: S3ClientTypes.JSONInput.writingClosure(_:to:))
        try writer[.init("Parquet")].write(value.parquet, writingClosure: S3ClientTypes.ParquetInput.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let csvDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CSVInput.self, forKey: .csv)
        csv = csvDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let jsonDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONInput.self, forKey: .json)
        json = jsonDecoded
        let parquetDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ParquetInput.self, forKey: .parquet)
        parquet = parquetDecoded
    }
}

extension S3ClientTypes {
    /// Describes the serialization format of the object.
    public struct InputSerialization: Swift.Equatable {
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public var compressionType: S3ClientTypes.CompressionType?
        /// Describes the serialization of a CSV-encoded object.
        public var csv: S3ClientTypes.CSVInput?
        /// Specifies JSON as object's input serialization format.
        public var json: S3ClientTypes.JSONInput?
        /// Specifies Parquet as object's input serialization format.
        public var parquet: S3ClientTypes.ParquetInput?

        public init(
            compressionType: S3ClientTypes.CompressionType? = nil,
            csv: S3ClientTypes.CSVInput? = nil,
            json: S3ClientTypes.JSONInput? = nil,
            parquet: S3ClientTypes.ParquetInput? = nil
        )
        {
            self.compressionType = compressionType
            self.csv = csv
            self.json = json
            self.parquet = parquet
        }
    }

}

extension S3ClientTypes {
    public enum IntelligentTieringAccessTier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringAccessTier] {
            return [
                .archiveAccess,
                .deepArchiveAccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntelligentTieringAccessTier(rawValue: rawValue) ?? IntelligentTieringAccessTier.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.IntelligentTieringAndOperator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `prefix` = "Prefix"
        case tags = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.IntelligentTieringAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes {
    /// A container for specifying S3 Intelligent-Tiering filters. The filters determine the subset of objects to which the rule applies.
    public struct IntelligentTieringAndOperator: Swift.Equatable {
        /// An object key name prefix that identifies the subset of objects to which the configuration applies.
        public var `prefix`: Swift.String?
        /// All of these tags must exist in the object's tag set in order for the configuration to apply.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }

}

extension S3ClientTypes.IntelligentTieringConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
        case status = "Status"
        case tierings = "Tiering"
    }

    static func writingClosure(_ value: S3ClientTypes.IntelligentTieringConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.IntelligentTieringFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("Status")].write(value.status)
        try writer[.init("Tiering")].writeList(value.tierings, memberWritingClosure: S3ClientTypes.Tiering.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tierings) {
            let tieringsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tierings)
            if tieringsWrappedContainer != nil {
                let tieringsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tiering].self, forKey: .tierings)
                var tieringsBuffer:[S3ClientTypes.Tiering]? = nil
                if let tieringsContainer = tieringsContainer {
                    tieringsBuffer = [S3ClientTypes.Tiering]()
                    for structureContainer0 in tieringsContainer {
                        tieringsBuffer?.append(structureContainer0)
                    }
                }
                tierings = tieringsBuffer
            } else {
                tierings = []
            }
        } else {
            tierings = nil
        }
    }
}

extension S3ClientTypes {
    /// Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket. For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).
    public struct IntelligentTieringConfiguration: Swift.Equatable {
        /// Specifies a bucket filter. The configuration only includes objects that meet the filter's criteria.
        public var filter: S3ClientTypes.IntelligentTieringFilter?
        /// The ID used to identify the S3 Intelligent-Tiering configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies the status of the configuration.
        /// This member is required.
        public var status: S3ClientTypes.IntelligentTieringStatus?
        /// Specifies the S3 Intelligent-Tiering storage class tier of the configuration.
        /// This member is required.
        public var tierings: [S3ClientTypes.Tiering]?

        public init(
            filter: S3ClientTypes.IntelligentTieringFilter? = nil,
            id: Swift.String? = nil,
            status: S3ClientTypes.IntelligentTieringStatus? = nil,
            tierings: [S3ClientTypes.Tiering]? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.status = status
            self.tierings = tierings
        }
    }

}

extension S3ClientTypes.IntelligentTieringFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case `prefix` = "Prefix"
        case tag = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.IntelligentTieringFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("And")].write(value.and, writingClosure: S3ClientTypes.IntelligentTieringAndOperator.writingClosure(_:to:))
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].write(value.tag, writingClosure: S3ClientTypes.Tag.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        tag = tagDecoded
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAndOperator.self, forKey: .and)
        and = andDecoded
    }
}

extension S3ClientTypes {
    /// The Filter is used to identify objects that the S3 Intelligent-Tiering configuration applies to.
    public struct IntelligentTieringFilter: Swift.Equatable {
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public var and: S3ClientTypes.IntelligentTieringAndOperator?
        /// An object key name prefix that identifies the subset of objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var `prefix`: Swift.String?
        /// A container of a key value name pair.
        public var tag: S3ClientTypes.Tag?

        public init(
            and: S3ClientTypes.IntelligentTieringAndOperator? = nil,
            `prefix`: Swift.String? = nil,
            tag: S3ClientTypes.Tag? = nil
        )
        {
            self.and = and
            self.`prefix` = `prefix`
            self.tag = tag
        }
    }

}

extension S3ClientTypes {
    public enum IntelligentTieringStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntelligentTieringStatus(rawValue: rawValue) ?? IntelligentTieringStatus.sdkUnknown(rawValue)
        }
    }
}

extension InvalidObjectState {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: InvalidObjectStateBody = try responseDecoder.decode(responseBody: data)
            self.properties.accessTier = output.accessTier
            self.properties.storageClass = output.storageClass
        } else {
            self.properties.accessTier = nil
            self.properties.storageClass = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// Object is archived and inaccessible until restored. If the object you are retrieving is stored in the S3 Glacier Flexible Retrieval storage class, the S3 Glacier Deep Archive storage class, the S3 Intelligent-Tiering Archive Access tier, or the S3 Intelligent-Tiering Deep Archive Access tier, before you can retrieve the object you must first restore a copy using [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html). Otherwise, this operation returns an InvalidObjectState error. For information about restoring archived objects, see [Restoring Archived Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html) in the Amazon S3 User Guide.
public struct InvalidObjectState: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil
        public internal(set) var storageClass: S3ClientTypes.StorageClass? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidObjectState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init(
        accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil
    )
    {
        self.properties.accessTier = accessTier
        self.properties.storageClass = storageClass
    }
}

struct InvalidObjectStateBody: Swift.Equatable {
    let storageClass: S3ClientTypes.StorageClass?
    let accessTier: S3ClientTypes.IntelligentTieringAccessTier?
}

extension InvalidObjectStateBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case storageClass = "StorageClass"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
    }
}

extension S3ClientTypes.InventoryConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case filter = "Filter"
        case id = "Id"
        case includedObjectVersions = "IncludedObjectVersions"
        case isEnabled = "IsEnabled"
        case optionalFields = "OptionalFields"
        case schedule = "Schedule"
    }

    static func writingClosure(_ value: S3ClientTypes.InventoryConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Destination")].write(value.destination, writingClosure: S3ClientTypes.InventoryDestination.writingClosure(_:to:))
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.InventoryFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("IncludedObjectVersions")].write(value.includedObjectVersions)
        try writer[.init("IsEnabled")].write(value.isEnabled)
        try writer[.init("OptionalFields")].writeList(value.optionalFields, memberWritingClosure: S3ClientTypes.InventoryOptionalField.writingClosure(_:to:), memberNodeInfo: .init("Field"), isFlattened: false)
        try writer[.init("Schedule")].write(value.schedule, writingClosure: S3ClientTypes.InventorySchedule.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryDestination.self, forKey: .destination)
        destination = destinationDecoded
        let isEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFilter.self, forKey: .filter)
        filter = filterDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let includedObjectVersionsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryIncludedObjectVersions.self, forKey: .includedObjectVersions)
        includedObjectVersions = includedObjectVersionsDecoded
        if containerValues.contains(.optionalFields) {
            struct KeyVal0{struct Field{}}
            let optionalFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Field>.CodingKeys.self, forKey: .optionalFields)
            if let optionalFieldsWrappedContainer = optionalFieldsWrappedContainer {
                let optionalFieldsContainer = try optionalFieldsWrappedContainer.decodeIfPresent([S3ClientTypes.InventoryOptionalField].self, forKey: .member)
                var optionalFieldsBuffer:[S3ClientTypes.InventoryOptionalField]? = nil
                if let optionalFieldsContainer = optionalFieldsContainer {
                    optionalFieldsBuffer = [S3ClientTypes.InventoryOptionalField]()
                    for enumContainer0 in optionalFieldsContainer {
                        optionalFieldsBuffer?.append(enumContainer0)
                    }
                }
                optionalFields = optionalFieldsBuffer
            } else {
                optionalFields = []
            }
        } else {
            optionalFields = nil
        }
        let scheduleDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventorySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the Amazon S3 API Reference.
    public struct InventoryConfiguration: Swift.Equatable {
        /// Contains information about where to publish the inventory results.
        /// This member is required.
        public var destination: S3ClientTypes.InventoryDestination?
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public var filter: S3ClientTypes.InventoryFilter?
        /// The ID used to identify the inventory configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Object versions to include in the inventory list. If set to All, the list includes all the object versions, which adds the version-related fields VersionId, IsLatest, and DeleteMarker to the list. If set to Current, the list does not contain these version-related fields.
        /// This member is required.
        public var includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions?
        /// Specifies whether the inventory is enabled or disabled. If set to True, an inventory list is generated. If set to False, no inventory list is generated.
        /// This member is required.
        public var isEnabled: Swift.Bool?
        /// Contains the optional fields that are included in the inventory results.
        public var optionalFields: [S3ClientTypes.InventoryOptionalField]?
        /// Specifies the schedule for generating inventory results.
        /// This member is required.
        public var schedule: S3ClientTypes.InventorySchedule?

        public init(
            destination: S3ClientTypes.InventoryDestination? = nil,
            filter: S3ClientTypes.InventoryFilter? = nil,
            id: Swift.String? = nil,
            includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions? = nil,
            isEnabled: Swift.Bool? = nil,
            optionalFields: [S3ClientTypes.InventoryOptionalField]? = nil,
            schedule: S3ClientTypes.InventorySchedule? = nil
        )
        {
            self.destination = destination
            self.filter = filter
            self.id = id
            self.includedObjectVersions = includedObjectVersions
            self.isEnabled = isEnabled
            self.optionalFields = optionalFields
            self.schedule = schedule
        }
    }

}

extension S3ClientTypes.InventoryDestination: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketDestination = "S3BucketDestination"
    }

    static func writingClosure(_ value: S3ClientTypes.InventoryDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("S3BucketDestination")].write(value.s3BucketDestination, writingClosure: S3ClientTypes.InventoryS3BucketDestination.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDestinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryS3BucketDestination.self, forKey: .s3BucketDestination)
        s3BucketDestination = s3BucketDestinationDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the inventory configuration for an Amazon S3 bucket.
    public struct InventoryDestination: Swift.Equatable {
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        /// This member is required.
        public var s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination?

        public init(
            s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }

}

extension S3ClientTypes.InventoryEncryption: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ssekms = "SSE-KMS"
        case sses3 = "SSE-S3"
    }

    static func writingClosure(_ value: S3ClientTypes.InventoryEncryption?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("SSE-KMS")].write(value.ssekms, writingClosure: S3ClientTypes.SSEKMS.writingClosure(_:to:))
        try writer[.init("SSE-S3")].write(value.sses3, writingClosure: S3ClientTypes.SSES3.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sses3Decoded = try containerValues.decodeIfPresent(S3ClientTypes.SSES3.self, forKey: .sses3)
        sses3 = sses3Decoded
        let ssekmsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SSEKMS.self, forKey: .ssekms)
        ssekms = ssekmsDecoded
    }
}

extension S3ClientTypes {
    /// Contains the type of server-side encryption used to encrypt the inventory results.
    public struct InventoryEncryption: Swift.Equatable {
        /// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
        public var ssekms: S3ClientTypes.SSEKMS?
        /// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
        public var sses3: S3ClientTypes.SSES3?

        public init(
            ssekms: S3ClientTypes.SSEKMS? = nil,
            sses3: S3ClientTypes.SSES3? = nil
        )
        {
            self.ssekms = ssekms
            self.sses3 = sses3
        }
    }

}

extension S3ClientTypes.InventoryFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `prefix` = "Prefix"
    }

    static func writingClosure(_ value: S3ClientTypes.InventoryFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Prefix")].write(value.`prefix`)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension S3ClientTypes {
    /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
    public struct InventoryFilter: Swift.Equatable {
        /// The prefix that an object must have to be included in the inventory results.
        /// This member is required.
        public var `prefix`: Swift.String?

        public init(
            `prefix`: Swift.String? = nil
        )
        {
            self.`prefix` = `prefix`
        }
    }

}

extension S3ClientTypes {
    public enum InventoryFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case orc
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFormat] {
            return [
                .csv,
                .orc,
                .parquet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .orc: return "ORC"
            case .parquet: return "Parquet"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryFormat(rawValue: rawValue) ?? InventoryFormat.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case daily
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFrequency] {
            return [
                .daily,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .daily: return "Daily"
            case .weekly: return "Weekly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryFrequency(rawValue: rawValue) ?? InventoryFrequency.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryIncludedObjectVersions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case current
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryIncludedObjectVersions] {
            return [
                .all,
                .current,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .current: return "Current"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryIncludedObjectVersions(rawValue: rawValue) ?? InventoryIncludedObjectVersions.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryOptionalField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketkeystatus
        case checksumalgorithm
        case etag
        case encryptionstatus
        case intelligenttieringaccesstier
        case ismultipartuploaded
        case lastmodifieddate
        case objectaccesscontrollist
        case objectlocklegalholdstatus
        case objectlockmode
        case objectlockretainuntildate
        case objectowner
        case replicationstatus
        case size
        case storageclass
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryOptionalField] {
            return [
                .bucketkeystatus,
                .checksumalgorithm,
                .etag,
                .encryptionstatus,
                .intelligenttieringaccesstier,
                .ismultipartuploaded,
                .lastmodifieddate,
                .objectaccesscontrollist,
                .objectlocklegalholdstatus,
                .objectlockmode,
                .objectlockretainuntildate,
                .objectowner,
                .replicationstatus,
                .size,
                .storageclass,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketkeystatus: return "BucketKeyStatus"
            case .checksumalgorithm: return "ChecksumAlgorithm"
            case .etag: return "ETag"
            case .encryptionstatus: return "EncryptionStatus"
            case .intelligenttieringaccesstier: return "IntelligentTieringAccessTier"
            case .ismultipartuploaded: return "IsMultipartUploaded"
            case .lastmodifieddate: return "LastModifiedDate"
            case .objectaccesscontrollist: return "ObjectAccessControlList"
            case .objectlocklegalholdstatus: return "ObjectLockLegalHoldStatus"
            case .objectlockmode: return "ObjectLockMode"
            case .objectlockretainuntildate: return "ObjectLockRetainUntilDate"
            case .objectowner: return "ObjectOwner"
            case .replicationstatus: return "ReplicationStatus"
            case .size: return "Size"
            case .storageclass: return "StorageClass"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryOptionalField(rawValue: rawValue) ?? InventoryOptionalField.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.InventoryS3BucketDestination: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case bucket = "Bucket"
        case encryption = "Encryption"
        case format = "Format"
        case `prefix` = "Prefix"
    }

    static func writingClosure(_ value: S3ClientTypes.InventoryS3BucketDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccountId")].write(value.accountId)
        try writer[.init("Bucket")].write(value.bucket)
        try writer[.init("Encryption")].write(value.encryption, writingClosure: S3ClientTypes.InventoryEncryption.writingClosure(_:to:))
        try writer[.init("Format")].write(value.format)
        try writer[.init("Prefix")].write(value.`prefix`)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let formatDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFormat.self, forKey: .format)
        format = formatDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}

extension S3ClientTypes {
    /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
    public struct InventoryS3BucketDestination: Swift.Equatable {
        /// The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data. Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the bucket where inventory results will be published.
        /// This member is required.
        public var bucket: Swift.String?
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public var encryption: S3ClientTypes.InventoryEncryption?
        /// Specifies the output format of the inventory results.
        /// This member is required.
        public var format: S3ClientTypes.InventoryFormat?
        /// The prefix that is prepended to all inventory results.
        public var `prefix`: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryption: S3ClientTypes.InventoryEncryption? = nil,
            format: S3ClientTypes.InventoryFormat? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.bucket = bucket
            self.encryption = encryption
            self.format = format
            self.`prefix` = `prefix`
        }
    }

}

extension S3ClientTypes.InventorySchedule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case frequency = "Frequency"
    }

    static func writingClosure(_ value: S3ClientTypes.InventorySchedule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Frequency")].write(value.frequency)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the schedule for generating inventory results.
    public struct InventorySchedule: Swift.Equatable {
        /// Specifies how frequently inventory results are produced.
        /// This member is required.
        public var frequency: S3ClientTypes.InventoryFrequency?

        public init(
            frequency: S3ClientTypes.InventoryFrequency? = nil
        )
        {
            self.frequency = frequency
        }
    }

}

extension S3ClientTypes.JSONInput: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    static func writingClosure(_ value: S3ClientTypes.JSONInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Type")].write(value.type)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONType.self, forKey: .type)
        type = typeDecoded
    }
}

extension S3ClientTypes {
    /// Specifies JSON as object's input serialization format.
    public struct JSONInput: Swift.Equatable {
        /// The type of JSON. Valid values: Document, Lines.
        public var type: S3ClientTypes.JSONType?

        public init(
            type: S3ClientTypes.JSONType? = nil
        )
        {
            self.type = type
        }
    }

}

extension S3ClientTypes.JSONOutput: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recordDelimiter = "RecordDelimiter"
    }

    static func writingClosure(_ value: S3ClientTypes.JSONOutput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("RecordDelimiter")].write(value.recordDelimiter)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
    }
}

extension S3ClientTypes {
    /// Specifies JSON as request's output serialization format.
    public struct JSONOutput: Swift.Equatable {
        /// The value used to separate individual records in the output. If no value is specified, Amazon S3 uses a newline character ('\n').
        public var recordDelimiter: Swift.String?

        public init(
            recordDelimiter: Swift.String? = nil
        )
        {
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes {
    public enum JSONType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case document
        case lines
        case sdkUnknown(Swift.String)

        public static var allCases: [JSONType] {
            return [
                .document,
                .lines,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .document: return "DOCUMENT"
            case .lines: return "LINES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JSONType(rawValue: rawValue) ?? JSONType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.LambdaFunctionConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case lambdaFunctionArn = "CloudFunction"
    }

    static func writingClosure(_ value: S3ClientTypes.LambdaFunctionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Event")].writeList(value.events, memberWritingClosure: S3ClientTypes.Event.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.NotificationConfigurationFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("CloudFunction")].write(value.lambdaFunctionArn)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lambdaFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionArn)
        lambdaFunctionArn = lambdaFunctionArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for enumContainer0 in eventsContainer {
                        eventsBuffer?.append(enumContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes {
    /// A container for specifying the configuration for Lambda notifications.
    public struct LambdaFunctionConfiguration: Swift.Equatable {
        /// The Amazon S3 bucket event for which to invoke the Lambda function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Lambda function that Amazon S3 invokes when the specified event type occurs.
        /// This member is required.
        public var lambdaFunctionArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            lambdaFunctionArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.lambdaFunctionArn = lambdaFunctionArn
        }
    }

}

extension S3ClientTypes.LifecycleExpiration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case days = "Days"
        case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
    }

    static func writingClosure(_ value: S3ClientTypes.LifecycleExpiration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Date")].writeTimestamp(value.date, format: .dateTime)
        try writer[.init("Days")].write(value.days)
        try writer[.init("ExpiredObjectDeleteMarker")].write(value.expiredObjectDeleteMarker)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .date)
        date = dateDecoded
        let daysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let expiredObjectDeleteMarkerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .expiredObjectDeleteMarker)
        expiredObjectDeleteMarker = expiredObjectDeleteMarkerDecoded
    }
}

extension S3ClientTypes {
    /// Container for the expiration for the lifecycle of the object. For more information see, [Managing your storage lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct LifecycleExpiration: Swift.Equatable {
        /// Indicates at what date the object is to be moved or deleted. The date value must conform to the ISO 8601 format. The time is always midnight UTC.
        public var date: ClientRuntime.Date?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public var days: Swift.Int?
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public var expiredObjectDeleteMarker: Swift.Bool?

        public init(
            date: ClientRuntime.Date? = nil,
            days: Swift.Int? = nil,
            expiredObjectDeleteMarker: Swift.Bool? = nil
        )
        {
            self.date = date
            self.days = days
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
        }
    }

}

extension S3ClientTypes.LifecycleRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
        case expiration = "Expiration"
        case filter = "Filter"
        case id = "ID"
        case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
        case noncurrentVersionTransitions = "NoncurrentVersionTransition"
        case `prefix` = "Prefix"
        case status = "Status"
        case transitions = "Transition"
    }

    static func writingClosure(_ value: S3ClientTypes.LifecycleRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AbortIncompleteMultipartUpload")].write(value.abortIncompleteMultipartUpload, writingClosure: S3ClientTypes.AbortIncompleteMultipartUpload.writingClosure(_:to:))
        try writer[.init("Expiration")].write(value.expiration, writingClosure: S3ClientTypes.LifecycleExpiration.writingClosure(_:to:))
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.LifecycleRuleFilter.writingClosure(_:to:))
        try writer[.init("ID")].write(value.id)
        try writer[.init("NoncurrentVersionExpiration")].write(value.noncurrentVersionExpiration, writingClosure: S3ClientTypes.NoncurrentVersionExpiration.writingClosure(_:to:))
        try writer[.init("NoncurrentVersionTransition")].writeList(value.noncurrentVersionTransitions, memberWritingClosure: S3ClientTypes.NoncurrentVersionTransition.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Status")].write(value.status)
        try writer[.init("Transition")].writeList(value.transitions, memberWritingClosure: S3ClientTypes.Transition.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expirationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LifecycleExpiration.self, forKey: .expiration)
        expiration = expirationDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LifecycleRuleFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpirationStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.transitions) {
            let transitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .transitions)
            if transitionsWrappedContainer != nil {
                let transitionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Transition].self, forKey: .transitions)
                var transitionsBuffer:[S3ClientTypes.Transition]? = nil
                if let transitionsContainer = transitionsContainer {
                    transitionsBuffer = [S3ClientTypes.Transition]()
                    for structureContainer0 in transitionsContainer {
                        transitionsBuffer?.append(structureContainer0)
                    }
                }
                transitions = transitionsBuffer
            } else {
                transitions = []
            }
        } else {
            transitions = nil
        }
        if containerValues.contains(.noncurrentVersionTransitions) {
            let noncurrentVersionTransitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .noncurrentVersionTransitions)
            if noncurrentVersionTransitionsWrappedContainer != nil {
                let noncurrentVersionTransitionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.NoncurrentVersionTransition].self, forKey: .noncurrentVersionTransitions)
                var noncurrentVersionTransitionsBuffer:[S3ClientTypes.NoncurrentVersionTransition]? = nil
                if let noncurrentVersionTransitionsContainer = noncurrentVersionTransitionsContainer {
                    noncurrentVersionTransitionsBuffer = [S3ClientTypes.NoncurrentVersionTransition]()
                    for structureContainer0 in noncurrentVersionTransitionsContainer {
                        noncurrentVersionTransitionsBuffer?.append(structureContainer0)
                    }
                }
                noncurrentVersionTransitions = noncurrentVersionTransitionsBuffer
            } else {
                noncurrentVersionTransitions = []
            }
        } else {
            noncurrentVersionTransitions = nil
        }
        let noncurrentVersionExpirationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NoncurrentVersionExpiration.self, forKey: .noncurrentVersionExpiration)
        noncurrentVersionExpiration = noncurrentVersionExpirationDecoded
        let abortIncompleteMultipartUploadDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AbortIncompleteMultipartUpload.self, forKey: .abortIncompleteMultipartUpload)
        abortIncompleteMultipartUpload = abortIncompleteMultipartUploadDecoded
    }
}

extension S3ClientTypes {
    /// A lifecycle rule for individual objects in an Amazon S3 bucket. For more information see, [Managing your storage lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct LifecycleRule: Swift.Equatable {
        /// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide.
        public var abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload?
        /// Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
        public var expiration: S3ClientTypes.LifecycleExpiration?
        /// The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified. Filter is required if the LifecycleRule does not contain a Prefix element.
        public var filter: S3ClientTypes.LifecycleRuleFilter?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var id: Swift.String?
        /// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
        public var noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration?
        /// Specifies the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to a specific storage class at a set period in the object's lifetime.
        public var noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]?
        /// Prefix identifying one or more objects to which the rule applies. This is no longer used; use Filter instead. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        @available(*, deprecated)
        public var `prefix`: Swift.String?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        /// This member is required.
        public var status: S3ClientTypes.ExpirationStatus?
        /// Specifies when an Amazon S3 object transitions to a specified storage class.
        public var transitions: [S3ClientTypes.Transition]?

        public init(
            abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload? = nil,
            expiration: S3ClientTypes.LifecycleExpiration? = nil,
            filter: S3ClientTypes.LifecycleRuleFilter? = nil,
            id: Swift.String? = nil,
            noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration? = nil,
            noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]? = nil,
            `prefix`: Swift.String? = nil,
            status: S3ClientTypes.ExpirationStatus? = nil,
            transitions: [S3ClientTypes.Transition]? = nil
        )
        {
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.filter = filter
            self.id = id
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.`prefix` = `prefix`
            self.status = status
            self.transitions = transitions
        }
    }

}

extension S3ClientTypes.LifecycleRuleAndOperator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectSizeGreaterThan = "ObjectSizeGreaterThan"
        case objectSizeLessThan = "ObjectSizeLessThan"
        case `prefix` = "Prefix"
        case tags = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.LifecycleRuleAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ObjectSizeGreaterThan")].write(value.objectSizeGreaterThan)
        try writer[.init("ObjectSizeLessThan")].write(value.objectSizeLessThan)
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let objectSizeGreaterThanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .objectSizeGreaterThan)
        objectSizeGreaterThan = objectSizeGreaterThanDecoded
        let objectSizeLessThanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .objectSizeLessThan)
        objectSizeLessThan = objectSizeLessThanDecoded
    }
}

extension S3ClientTypes {
    /// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
    public struct LifecycleRuleAndOperator: Swift.Equatable {
        /// Minimum object size to which the rule applies.
        public var objectSizeGreaterThan: Swift.Int?
        /// Maximum object size to which the rule applies.
        public var objectSizeLessThan: Swift.Int?
        /// Prefix identifying one or more objects to which the rule applies.
        public var `prefix`: Swift.String?
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            objectSizeGreaterThan: Swift.Int? = nil,
            objectSizeLessThan: Swift.Int? = nil,
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.objectSizeGreaterThan = objectSizeGreaterThan
            self.objectSizeLessThan = objectSizeLessThan
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }

}

extension S3ClientTypes.LifecycleRuleFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case objectsizegreaterthan = "ObjectSizeGreaterThan"
        case objectsizelessthan = "ObjectSizeLessThan"
        case `prefix` = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    static func writingClosure(_ value: S3ClientTypes.LifecycleRuleFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        switch value {
            case let .and(and):
                try writer[.init("And")].write(and, writingClosure: S3ClientTypes.LifecycleRuleAndOperator.writingClosure(_:to:))
            case let .objectsizegreaterthan(objectsizegreaterthan):
                try writer[.init("ObjectSizeGreaterThan")].write(objectsizegreaterthan)
            case let .objectsizelessthan(objectsizelessthan):
                try writer[.init("ObjectSizeLessThan")].write(objectsizelessthan)
            case let .`prefix`(`prefix`):
                try writer[.init("Prefix")].write(`prefix`)
            case let .tag(tag):
                try writer[.init("Tag")].write(tag, writingClosure: S3ClientTypes.Tag.writingClosure(_:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer[.init("sdkUnknown")].write(sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let key = containerValues.allKeys.first
        switch key {
            case .`prefix`:
                let prefixDecoded = try containerValues.decode(Swift.String.self, forKey: .prefix)
                self = .prefix(prefixDecoded)
            case .tag:
                let tagDecoded = try containerValues.decode(S3ClientTypes.Tag.self, forKey: .tag)
                self = .tag(tagDecoded)
            case .objectsizegreaterthan:
                let objectsizegreaterthanDecoded = try containerValues.decode(Swift.Int.self, forKey: .objectsizegreaterthan)
                self = .objectsizegreaterthan(objectsizegreaterthanDecoded)
            case .objectsizelessthan:
                let objectsizelessthanDecoded = try containerValues.decode(Swift.Int.self, forKey: .objectsizelessthan)
                self = .objectsizelessthan(objectsizelessthanDecoded)
            case .and:
                let andDecoded = try containerValues.decode(S3ClientTypes.LifecycleRuleAndOperator.self, forKey: .and)
                self = .and(andDecoded)
            default:
                self = .sdkUnknown("")
        }
    }
}

extension S3ClientTypes {
    /// The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified.
    public enum LifecycleRuleFilter: Swift.Equatable {
        /// Prefix identifying one or more objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        case `prefix`(Swift.String)
        /// This tag must exist in the object's tag set in order for the rule to apply.
        case tag(S3ClientTypes.Tag)
        /// Minimum object size to which the rule applies.
        case objectsizegreaterthan(Swift.Int)
        /// Maximum object size to which the rule applies.
        case objectsizelessthan(Swift.Int)
        /// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
        case and(S3ClientTypes.LifecycleRuleAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension ListBucketAnalyticsConfigurationsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketAnalyticsConfigurationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketAnalyticsConfigurations"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            return items
        }
    }
}

extension ListBucketAnalyticsConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBucketAnalyticsConfigurationsInput: Swift.Equatable {
    /// The name of the bucket from which analytics configurations are retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension ListBucketAnalyticsConfigurationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListBucketAnalyticsConfigurationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.analyticsConfigurationList = output.analyticsConfigurationList
            self.continuationToken = output.continuationToken
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.analyticsConfigurationList = nil
            self.continuationToken = nil
            self.isTruncated = nil
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketAnalyticsConfigurationsOutput: Swift.Equatable {
    /// The list of analytics configurations for a bucket.
    public var analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]?
    /// The marker that is used as a starting point for this analytics configuration list response. This value is present if it was sent in the request.
    public var continuationToken: Swift.String?
    /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
    public var nextContinuationToken: Swift.String?

    public init(
        analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]? = nil,
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.analyticsConfigurationList = analyticsConfigurationList
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketAnalyticsConfigurationsOutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let continuationToken: Swift.String?
    let nextContinuationToken: Swift.String?
    let analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]?
}

extension ListBucketAnalyticsConfigurationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfigurationList = "AnalyticsConfiguration"
        case continuationToken = "ContinuationToken"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.analyticsConfigurationList) {
            let analyticsConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .analyticsConfigurationList)
            if analyticsConfigurationListWrappedContainer != nil {
                let analyticsConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.AnalyticsConfiguration].self, forKey: .analyticsConfigurationList)
                var analyticsConfigurationListBuffer:[S3ClientTypes.AnalyticsConfiguration]? = nil
                if let analyticsConfigurationListContainer = analyticsConfigurationListContainer {
                    analyticsConfigurationListBuffer = [S3ClientTypes.AnalyticsConfiguration]()
                    for structureContainer0 in analyticsConfigurationListContainer {
                        analyticsConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                analyticsConfigurationList = analyticsConfigurationListBuffer
            } else {
                analyticsConfigurationList = []
            }
        } else {
            analyticsConfigurationList = nil
        }
    }
}

enum ListBucketAnalyticsConfigurationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListBucketIntelligentTieringConfigurationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketIntelligentTieringConfigurations"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            return items
        }
    }
}

extension ListBucketIntelligentTieringConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBucketIntelligentTieringConfigurationsInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
    }
}

extension ListBucketIntelligentTieringConfigurationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListBucketIntelligentTieringConfigurationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.intelligentTieringConfigurationList = output.intelligentTieringConfigurationList
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.intelligentTieringConfigurationList = nil
            self.isTruncated = nil
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketIntelligentTieringConfigurationsOutput: Swift.Equatable {
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?
    /// The list of S3 Intelligent-Tiering configurations for a bucket.
    public var intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]?
    /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.intelligentTieringConfigurationList = intelligentTieringConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketIntelligentTieringConfigurationsOutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let continuationToken: Swift.String?
    let nextContinuationToken: Swift.String?
    let intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]?
}

extension ListBucketIntelligentTieringConfigurationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case intelligentTieringConfigurationList = "IntelligentTieringConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.intelligentTieringConfigurationList) {
            let intelligentTieringConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .intelligentTieringConfigurationList)
            if intelligentTieringConfigurationListWrappedContainer != nil {
                let intelligentTieringConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.IntelligentTieringConfiguration].self, forKey: .intelligentTieringConfigurationList)
                var intelligentTieringConfigurationListBuffer:[S3ClientTypes.IntelligentTieringConfiguration]? = nil
                if let intelligentTieringConfigurationListContainer = intelligentTieringConfigurationListContainer {
                    intelligentTieringConfigurationListBuffer = [S3ClientTypes.IntelligentTieringConfiguration]()
                    for structureContainer0 in intelligentTieringConfigurationListContainer {
                        intelligentTieringConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                intelligentTieringConfigurationList = intelligentTieringConfigurationListBuffer
            } else {
                intelligentTieringConfigurationList = []
            }
        } else {
            intelligentTieringConfigurationList = nil
        }
    }
}

enum ListBucketIntelligentTieringConfigurationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListBucketInventoryConfigurationsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketInventoryConfigurationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketInventoryConfigurations"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            return items
        }
    }
}

extension ListBucketInventoryConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBucketInventoryConfigurationsInput: Swift.Equatable {
    /// The name of the bucket containing the inventory configurations to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension ListBucketInventoryConfigurationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListBucketInventoryConfigurationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.inventoryConfigurationList = output.inventoryConfigurationList
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.inventoryConfigurationList = nil
            self.isTruncated = nil
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketInventoryConfigurationsOutput: Swift.Equatable {
    /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
    public var continuationToken: Swift.String?
    /// The list of inventory configurations for a bucket.
    public var inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]?
    /// Tells whether the returned list of inventory configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken is provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.inventoryConfigurationList = inventoryConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketInventoryConfigurationsOutputBody: Swift.Equatable {
    let continuationToken: Swift.String?
    let inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]?
    let isTruncated: Swift.Bool?
    let nextContinuationToken: Swift.String?
}

extension ListBucketInventoryConfigurationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case inventoryConfigurationList = "InventoryConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        if containerValues.contains(.inventoryConfigurationList) {
            let inventoryConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .inventoryConfigurationList)
            if inventoryConfigurationListWrappedContainer != nil {
                let inventoryConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.InventoryConfiguration].self, forKey: .inventoryConfigurationList)
                var inventoryConfigurationListBuffer:[S3ClientTypes.InventoryConfiguration]? = nil
                if let inventoryConfigurationListContainer = inventoryConfigurationListContainer {
                    inventoryConfigurationListBuffer = [S3ClientTypes.InventoryConfiguration]()
                    for structureContainer0 in inventoryConfigurationListContainer {
                        inventoryConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                inventoryConfigurationList = inventoryConfigurationListBuffer
            } else {
                inventoryConfigurationList = []
            }
        } else {
            inventoryConfigurationList = nil
        }
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
    }
}

enum ListBucketInventoryConfigurationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListBucketMetricsConfigurationsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketMetricsConfigurationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketMetricsConfigurations"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            return items
        }
    }
}

extension ListBucketMetricsConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBucketMetricsConfigurationsInput: Swift.Equatable {
    /// The name of the bucket containing the metrics configurations to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension ListBucketMetricsConfigurationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListBucketMetricsConfigurationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.isTruncated = output.isTruncated
            self.metricsConfigurationList = output.metricsConfigurationList
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.isTruncated = nil
            self.metricsConfigurationList = nil
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketMetricsConfigurationsOutput: Swift.Equatable {
    /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
    public var continuationToken: Swift.String?
    /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The list of metrics configurations for a bucket.
    public var metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
    /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool? = nil,
        metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.metricsConfigurationList = metricsConfigurationList
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketMetricsConfigurationsOutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let continuationToken: Swift.String?
    let nextContinuationToken: Swift.String?
    let metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
}

extension ListBucketMetricsConfigurationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case isTruncated = "IsTruncated"
        case metricsConfigurationList = "MetricsConfiguration"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.metricsConfigurationList) {
            let metricsConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .metricsConfigurationList)
            if metricsConfigurationListWrappedContainer != nil {
                let metricsConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.MetricsConfiguration].self, forKey: .metricsConfigurationList)
                var metricsConfigurationListBuffer:[S3ClientTypes.MetricsConfiguration]? = nil
                if let metricsConfigurationListContainer = metricsConfigurationListContainer {
                    metricsConfigurationListBuffer = [S3ClientTypes.MetricsConfiguration]()
                    for structureContainer0 in metricsConfigurationListContainer {
                        metricsConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                metricsConfigurationList = metricsConfigurationListBuffer
            } else {
                metricsConfigurationList = []
            }
        } else {
            metricsConfigurationList = nil
        }
    }
}

enum ListBucketMetricsConfigurationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListBucketsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBuckets"))
            return items
        }
    }
}

extension ListBucketsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBucketsInput: Swift.Equatable {

    public init() { }
}

extension ListBucketsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListBucketsOutputBody = try responseDecoder.decode(responseBody: data)
            self.buckets = output.buckets
            self.owner = output.owner
        } else {
            self.buckets = nil
            self.owner = nil
        }
    }
}

public struct ListBucketsOutput: Swift.Equatable {
    /// The list of buckets owned by the requester.
    public var buckets: [S3ClientTypes.Bucket]?
    /// The owner of the buckets listed.
    public var owner: S3ClientTypes.Owner?

    public init(
        buckets: [S3ClientTypes.Bucket]? = nil,
        owner: S3ClientTypes.Owner? = nil
    )
    {
        self.buckets = buckets
        self.owner = owner
    }
}

struct ListBucketsOutputBody: Swift.Equatable {
    let buckets: [S3ClientTypes.Bucket]?
    let owner: S3ClientTypes.Owner?
}

extension ListBucketsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buckets = "Buckets"
        case owner = "Owner"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.buckets) {
            struct KeyVal0{struct Bucket{}}
            let bucketsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Bucket>.CodingKeys.self, forKey: .buckets)
            if let bucketsWrappedContainer = bucketsWrappedContainer {
                let bucketsContainer = try bucketsWrappedContainer.decodeIfPresent([S3ClientTypes.Bucket].self, forKey: .member)
                var bucketsBuffer:[S3ClientTypes.Bucket]? = nil
                if let bucketsContainer = bucketsContainer {
                    bucketsBuffer = [S3ClientTypes.Bucket]()
                    for structureContainer0 in bucketsContainer {
                        bucketsBuffer?.append(structureContainer0)
                    }
                }
                buckets = bucketsBuffer
            } else {
                buckets = []
            }
        } else {
            buckets = nil
        }
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

enum ListBucketsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListDirectoryBucketsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListDirectoryBuckets"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            if let maxDirectoryBuckets = maxDirectoryBuckets {
                let maxDirectoryBucketsQueryItem = ClientRuntime.URLQueryItem(name: "max-directory-buckets".urlPercentEncoding(), value: Swift.String(maxDirectoryBuckets).urlPercentEncoding())
                items.append(maxDirectoryBucketsQueryItem)
            }
            return items
        }
    }
}

extension ListDirectoryBucketsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDirectoryBucketsInput: Swift.Equatable {
    /// ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results.
    public var continuationToken: Swift.String?
    /// Maximum number of buckets to be returned in response. When the number is more than the count of buckets that are owned by an Amazon Web Services account, return all the buckets in response.
    public var maxDirectoryBuckets: Swift.Int?

    public init(
        continuationToken: Swift.String? = nil,
        maxDirectoryBuckets: Swift.Int? = nil
    )
    {
        self.continuationToken = continuationToken
        self.maxDirectoryBuckets = maxDirectoryBuckets
    }
}

extension ListDirectoryBucketsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDirectoryBucketsOutputBody = try responseDecoder.decode(responseBody: data)
            self.buckets = output.buckets
            self.continuationToken = output.continuationToken
        } else {
            self.buckets = nil
            self.continuationToken = nil
        }
    }
}

public struct ListDirectoryBucketsOutput: Swift.Equatable {
    /// The list of buckets owned by the requester.
    public var buckets: [S3ClientTypes.Bucket]?
    /// If ContinuationToken was sent with the request, it is included in the response. You can use the returned ContinuationToken for pagination of the list response.
    public var continuationToken: Swift.String?

    public init(
        buckets: [S3ClientTypes.Bucket]? = nil,
        continuationToken: Swift.String? = nil
    )
    {
        self.buckets = buckets
        self.continuationToken = continuationToken
    }
}

struct ListDirectoryBucketsOutputBody: Swift.Equatable {
    let buckets: [S3ClientTypes.Bucket]?
    let continuationToken: Swift.String?
}

extension ListDirectoryBucketsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buckets = "Buckets"
        case continuationToken = "ContinuationToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.buckets) {
            struct KeyVal0{struct Bucket{}}
            let bucketsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Bucket>.CodingKeys.self, forKey: .buckets)
            if let bucketsWrappedContainer = bucketsWrappedContainer {
                let bucketsContainer = try bucketsWrappedContainer.decodeIfPresent([S3ClientTypes.Bucket].self, forKey: .member)
                var bucketsBuffer:[S3ClientTypes.Bucket]? = nil
                if let bucketsContainer = bucketsContainer {
                    bucketsBuffer = [S3ClientTypes.Bucket]()
                    for structureContainer0 in bucketsContainer {
                        bucketsBuffer?.append(structureContainer0)
                    }
                }
                buckets = bucketsBuffer
            } else {
                buckets = []
            }
        } else {
            buckets = nil
        }
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
    }
}

enum ListDirectoryBucketsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListMultipartUploadsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListMultipartUploadsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "uploads", value: nil))
            if let uploadIdMarker = uploadIdMarker {
                let uploadIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "upload-id-marker".urlPercentEncoding(), value: Swift.String(uploadIdMarker).urlPercentEncoding())
                items.append(uploadIdMarkerQueryItem)
            }
            if let delimiter = delimiter {
                let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
                items.append(delimiterQueryItem)
            }
            if let maxUploads = maxUploads {
                let maxUploadsQueryItem = ClientRuntime.URLQueryItem(name: "max-uploads".urlPercentEncoding(), value: Swift.String(maxUploads).urlPercentEncoding())
                items.append(maxUploadsQueryItem)
            }
            if let encodingType = encodingType {
                let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
                items.append(encodingTypeQueryItem)
            }
            if let `prefix` = `prefix` {
                let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
                items.append(prefixQueryItem)
            }
            if let keyMarker = keyMarker {
                let keyMarkerQueryItem = ClientRuntime.URLQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
                items.append(keyMarkerQueryItem)
            }
            return items
        }
    }
}

extension ListMultipartUploadsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMultipartUploadsInput: Swift.Equatable {
    /// The name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Character you use to group keys. All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, CommonPrefixes. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under CommonPrefixes result element are not returned elsewhere in the response. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key can contain any Unicode character; however, the XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the multipart upload after which listing should begin.
    ///
    /// * General purpose buckets - For general purpose buckets, key-marker is an object key. Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin. If upload-id-marker is not specified, only the keys lexicographically greater than the specified key-marker will be included in the list. If upload-id-marker is specified, any multipart uploads for a key equal to the key-marker might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified upload-id-marker.
    ///
    /// * Directory buckets - For directory buckets, key-marker is obfuscated and isn't a real object key. The upload-id-marker parameter isn't supported by directory buckets. To list the additional multipart uploads, you only need to set the value of key-marker to the NextKeyMarker value from the previous response. In the ListMultipartUploads response, the multipart uploads aren't sorted lexicographically based on the object keys.
    public var keyMarker: Swift.String?
    /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
    public var maxUploads: Swift.Int?
    /// Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way that you'd use a folder in a file system.) Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified upload-id-marker. This functionality is not supported for directory buckets.
    public var uploadIdMarker: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.uploadIdMarker = uploadIdMarker
    }
}

extension ListMultipartUploadsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListMultipartUploadsOutputBody = try responseDecoder.decode(responseBody: data)
            self.`prefix` = output.`prefix`
            self.bucket = output.bucket
            self.commonPrefixes = output.commonPrefixes
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyMarker = output.keyMarker
            self.maxUploads = output.maxUploads
            self.nextKeyMarker = output.nextKeyMarker
            self.nextUploadIdMarker = output.nextUploadIdMarker
            self.uploadIdMarker = output.uploadIdMarker
            self.uploads = output.uploads
        } else {
            self.bucket = nil
            self.commonPrefixes = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = nil
            self.keyMarker = nil
            self.maxUploads = nil
            self.nextKeyMarker = nil
            self.nextUploadIdMarker = nil
            self.`prefix` = nil
            self.uploadIdMarker = nil
            self.uploads = nil
        }
    }
}

public struct ListMultipartUploadsOutput: Swift.Equatable {
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
    public var bucket: Swift.String?
    /// If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a CommonPrefixes element. The distinct key prefixes are returned in the Prefix child element. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object keys in the response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: Delimiter, KeyMarker, Prefix, NextKeyMarker, Key.
    public var encodingType: S3ClientTypes.EncodingType?
    /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
    public var isTruncated: Swift.Bool?
    /// The key at or after which the listing began.
    public var keyMarker: Swift.String?
    /// Maximum number of multipart uploads that could have been included in the response.
    public var maxUploads: Swift.Int?
    /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
    public var nextKeyMarker: Swift.String?
    /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request. This functionality is not supported for directory buckets.
    public var nextUploadIdMarker: Swift.String?
    /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Upload ID after which listing began. This functionality is not supported for directory buckets.
    public var uploadIdMarker: Swift.String?
    /// Container for elements related to a particular multipart upload. A response can contain zero or more Upload elements.
    public var uploads: [S3ClientTypes.MultipartUpload]?

    public init(
        bucket: Swift.String? = nil,
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int? = nil,
        nextKeyMarker: Swift.String? = nil,
        nextUploadIdMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        uploadIdMarker: Swift.String? = nil,
        uploads: [S3ClientTypes.MultipartUpload]? = nil
    )
    {
        self.bucket = bucket
        self.commonPrefixes = commonPrefixes
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.nextKeyMarker = nextKeyMarker
        self.nextUploadIdMarker = nextUploadIdMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.uploadIdMarker = uploadIdMarker
        self.uploads = uploads
    }
}

struct ListMultipartUploadsOutputBody: Swift.Equatable {
    let bucket: Swift.String?
    let keyMarker: Swift.String?
    let uploadIdMarker: Swift.String?
    let nextKeyMarker: Swift.String?
    let `prefix`: Swift.String?
    let delimiter: Swift.String?
    let nextUploadIdMarker: Swift.String?
    let maxUploads: Swift.Int?
    let isTruncated: Swift.Bool?
    let uploads: [S3ClientTypes.MultipartUpload]?
    let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    let encodingType: S3ClientTypes.EncodingType?
}

extension ListMultipartUploadsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case commonPrefixes = "CommonPrefixes"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyMarker = "KeyMarker"
        case maxUploads = "MaxUploads"
        case nextKeyMarker = "NextKeyMarker"
        case nextUploadIdMarker = "NextUploadIdMarker"
        case `prefix` = "Prefix"
        case uploadIdMarker = "UploadIdMarker"
        case uploads = "Upload"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMarker)
        keyMarker = keyMarkerDecoded
        let uploadIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadIdMarker)
        uploadIdMarker = uploadIdMarkerDecoded
        let nextKeyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextKeyMarker)
        nextKeyMarker = nextKeyMarkerDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let nextUploadIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextUploadIdMarker)
        nextUploadIdMarker = nextUploadIdMarkerDecoded
        let maxUploadsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUploads)
        maxUploads = maxUploadsDecoded
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.uploads) {
            let uploadsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .uploads)
            if uploadsWrappedContainer != nil {
                let uploadsContainer = try containerValues.decodeIfPresent([S3ClientTypes.MultipartUpload].self, forKey: .uploads)
                var uploadsBuffer:[S3ClientTypes.MultipartUpload]? = nil
                if let uploadsContainer = uploadsContainer {
                    uploadsBuffer = [S3ClientTypes.MultipartUpload]()
                    for structureContainer0 in uploadsContainer {
                        uploadsBuffer?.append(structureContainer0)
                    }
                }
                uploads = uploadsBuffer
            } else {
                uploads = []
            }
        } else {
            uploads = nil
        }
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

enum ListMultipartUploadsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListObjectVersionsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = optionalObjectAttributes {
            optionalObjectAttributes.forEach { headerValue in
                items.add(Header(name: "x-amz-optional-object-attributes", value: quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "versions", value: nil))
            if let versionIdMarker = versionIdMarker {
                let versionIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "version-id-marker".urlPercentEncoding(), value: Swift.String(versionIdMarker).urlPercentEncoding())
                items.append(versionIdMarkerQueryItem)
            }
            if let delimiter = delimiter {
                let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
                items.append(delimiterQueryItem)
            }
            if let encodingType = encodingType {
                let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
                items.append(encodingTypeQueryItem)
            }
            if let `prefix` = `prefix` {
                let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
                items.append(prefixQueryItem)
            }
            if let maxKeys = maxKeys {
                let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
                items.append(maxKeysQueryItem)
            }
            if let keyMarker = keyMarker {
                let keyMarkerQueryItem = ClientRuntime.URLQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
                items.append(keyMarkerQueryItem)
            }
            return items
        }
    }
}

extension ListObjectVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListObjectVersionsInput: Swift.Equatable {
    /// The bucket name that contains the objects.
    /// This member is required.
    public var bucket: Swift.String?
    /// A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.
    public var delimiter: Swift.String?
    /// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key can contain any Unicode character; however, the XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the key to start with when listing objects in a bucket.
    public var keyMarker: Swift.String?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains true. To return the additional keys, see key-marker and version-id-marker.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way that you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the object version you want to start listing from.
    public var versionIdMarker: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.versionIdMarker = versionIdMarker
    }
}

extension ListObjectVersionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListObjectVersionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.`prefix` = output.`prefix`
            self.commonPrefixes = output.commonPrefixes
            self.deleteMarkers = output.deleteMarkers
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyMarker = output.keyMarker
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextKeyMarker = output.nextKeyMarker
            self.nextVersionIdMarker = output.nextVersionIdMarker
            self.versionIdMarker = output.versionIdMarker
            self.versions = output.versions
        } else {
            self.commonPrefixes = nil
            self.deleteMarkers = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = nil
            self.keyMarker = nil
            self.maxKeys = nil
            self.name = nil
            self.nextKeyMarker = nil
            self.nextVersionIdMarker = nil
            self.`prefix` = nil
            self.versionIdMarker = nil
            self.versions = nil
        }
    }
}

public struct ListObjectVersionsOutput: Swift.Equatable {
    /// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Container for an object that is a delete marker.
    public var deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]?
    /// The delimiter grouping the included keys. A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object key names in the XML response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: KeyMarker, NextKeyMarker, Prefix, Key, and Delimiter.
    public var encodingType: S3ClientTypes.EncodingType?
    /// A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request by using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
    public var isTruncated: Swift.Bool?
    /// Marks the last key returned in a truncated response.
    public var keyMarker: Swift.String?
    /// Specifies the maximum number of objects to return.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// When the number of responses exceeds the value of MaxKeys, NextKeyMarker specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request.
    public var nextKeyMarker: Swift.String?
    /// When the number of responses exceeds the value of MaxKeys, NextVersionIdMarker specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request.
    public var nextVersionIdMarker: Swift.String?
    /// Selects objects that start with the value supplied by this parameter.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Marks the last version of the key returned in a truncated response.
    public var versionIdMarker: Swift.String?
    /// Container for version information.
    public var versions: [S3ClientTypes.ObjectVersion]?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextKeyMarker: Swift.String? = nil,
        nextVersionIdMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        versionIdMarker: Swift.String? = nil,
        versions: [S3ClientTypes.ObjectVersion]? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.deleteMarkers = deleteMarkers
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.name = name
        self.nextKeyMarker = nextKeyMarker
        self.nextVersionIdMarker = nextVersionIdMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.versionIdMarker = versionIdMarker
        self.versions = versions
    }
}

struct ListObjectVersionsOutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let keyMarker: Swift.String?
    let versionIdMarker: Swift.String?
    let nextKeyMarker: Swift.String?
    let nextVersionIdMarker: Swift.String?
    let versions: [S3ClientTypes.ObjectVersion]?
    let deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]?
    let name: Swift.String?
    let `prefix`: Swift.String?
    let delimiter: Swift.String?
    let maxKeys: Swift.Int?
    let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    let encodingType: S3ClientTypes.EncodingType?
}

extension ListObjectVersionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case deleteMarkers = "DeleteMarker"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyMarker = "KeyMarker"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextKeyMarker = "NextKeyMarker"
        case nextVersionIdMarker = "NextVersionIdMarker"
        case `prefix` = "Prefix"
        case versionIdMarker = "VersionIdMarker"
        case versions = "Version"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let keyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMarker)
        keyMarker = keyMarkerDecoded
        let versionIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionIdMarker)
        versionIdMarker = versionIdMarkerDecoded
        let nextKeyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextKeyMarker)
        nextKeyMarker = nextKeyMarkerDecoded
        let nextVersionIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextVersionIdMarker)
        nextVersionIdMarker = nextVersionIdMarkerDecoded
        if containerValues.contains(.versions) {
            let versionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .versions)
            if versionsWrappedContainer != nil {
                let versionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectVersion].self, forKey: .versions)
                var versionsBuffer:[S3ClientTypes.ObjectVersion]? = nil
                if let versionsContainer = versionsContainer {
                    versionsBuffer = [S3ClientTypes.ObjectVersion]()
                    for structureContainer0 in versionsContainer {
                        versionsBuffer?.append(structureContainer0)
                    }
                }
                versions = versionsBuffer
            } else {
                versions = []
            }
        } else {
            versions = nil
        }
        if containerValues.contains(.deleteMarkers) {
            let deleteMarkersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleteMarkers)
            if deleteMarkersWrappedContainer != nil {
                let deleteMarkersContainer = try containerValues.decodeIfPresent([S3ClientTypes.DeleteMarkerEntry].self, forKey: .deleteMarkers)
                var deleteMarkersBuffer:[S3ClientTypes.DeleteMarkerEntry]? = nil
                if let deleteMarkersContainer = deleteMarkersContainer {
                    deleteMarkersBuffer = [S3ClientTypes.DeleteMarkerEntry]()
                    for structureContainer0 in deleteMarkersContainer {
                        deleteMarkersBuffer?.append(structureContainer0)
                    }
                }
                deleteMarkers = deleteMarkersBuffer
            } else {
                deleteMarkers = []
            }
        } else {
            deleteMarkers = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

enum ListObjectVersionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListObjectsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = optionalObjectAttributes {
            optionalObjectAttributes.forEach { headerValue in
                items.add(Header(name: "x-amz-optional-object-attributes", value: quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let delimiter = delimiter {
                let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
                items.append(delimiterQueryItem)
            }
            if let encodingType = encodingType {
                let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
                items.append(encodingTypeQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let `prefix` = `prefix` {
                let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
                items.append(prefixQueryItem)
            }
            if let maxKeys = maxKeys {
                let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
                items.append(maxKeysQueryItem)
            }
            return items
        }
    }
}

extension ListObjectsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListObjectsInput: Swift.Equatable {
    /// The name of the bucket containing the objects. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// A delimiter is a character that you use to group keys.
    public var delimiter: Swift.String?
    /// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key can contain any Unicode character; however, the XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. Marker can be any key in the bucket.
    public var marker: Swift.String?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Limits the response to keys that begin with the specified prefix.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.marker = marker
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
    }
}

extension ListObjectsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListObjectsOutputBody = try responseDecoder.decode(responseBody: data)
            self.`prefix` = output.`prefix`
            self.commonPrefixes = output.commonPrefixes
            self.contents = output.contents
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextMarker = output.nextMarker
        } else {
            self.commonPrefixes = nil
            self.contents = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = nil
            self.marker = nil
            self.maxKeys = nil
            self.name = nil
            self.nextMarker = nil
            self.`prefix` = nil
        }
    }
}

public struct ListObjectsOutput: Swift.Equatable {
    /// All of the keys (up to 1,000) rolled up in a common prefix count as a single return when calculating the number of returns. A response can contain CommonPrefixes only if you specify a delimiter. CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/), as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Metadata about each object returned.
    public var contents: [S3ClientTypes.Object]?
    /// Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the MaxKeys value.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria.
    public var isTruncated: Swift.Bool?
    /// Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.
    public var marker: Swift.String?
    /// The maximum number of keys returned in the response body.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// When the response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as the marker parameter in the subsequent request to get the next set of objects. Amazon S3 lists objects in alphabetical order. This element is returned only if you have the delimiter request parameter specified. If the response does not include the NextMarker element and it is truncated, you can use the value of the last Key element in the response as the marker parameter in the subsequent request to get the next set of object keys.
    public var nextMarker: Swift.String?
    /// Keys that begin with the indicated prefix.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxKeys = maxKeys
        self.name = name
        self.nextMarker = nextMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
    }
}

struct ListObjectsOutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let marker: Swift.String?
    let nextMarker: Swift.String?
    let contents: [S3ClientTypes.Object]?
    let name: Swift.String?
    let `prefix`: Swift.String?
    let delimiter: Swift.String?
    let maxKeys: Swift.Int?
    let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    let encodingType: S3ClientTypes.EncodingType?
}

extension ListObjectsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case contents = "Contents"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextMarker = "NextMarker"
        case `prefix` = "Prefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        if containerValues.contains(.contents) {
            let contentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .contents)
            if contentsWrappedContainer != nil {
                let contentsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Object].self, forKey: .contents)
                var contentsBuffer:[S3ClientTypes.Object]? = nil
                if let contentsContainer = contentsContainer {
                    contentsBuffer = [S3ClientTypes.Object]()
                    for structureContainer0 in contentsContainer {
                        contentsBuffer?.append(structureContainer0)
                    }
                }
                contents = contentsBuffer
            } else {
                contents = []
            }
        } else {
            contents = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

enum ListObjectsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchBucket": return try await NoSuchBucket(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListObjectsV2Input: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = optionalObjectAttributes {
            optionalObjectAttributes.forEach { headerValue in
                items.add(Header(name: "x-amz-optional-object-attributes", value: quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectsV2Input: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "list-type", value: "2"))
            if let continuationToken = continuationToken {
                let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
                items.append(continuationTokenQueryItem)
            }
            if let delimiter = delimiter {
                let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
                items.append(delimiterQueryItem)
            }
            if let fetchOwner = fetchOwner {
                let fetchOwnerQueryItem = ClientRuntime.URLQueryItem(name: "fetch-owner".urlPercentEncoding(), value: Swift.String(fetchOwner).urlPercentEncoding())
                items.append(fetchOwnerQueryItem)
            }
            if let encodingType = encodingType {
                let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
                items.append(encodingTypeQueryItem)
            }
            if let startAfter = startAfter {
                let startAfterQueryItem = ClientRuntime.URLQueryItem(name: "start-after".urlPercentEncoding(), value: Swift.String(startAfter).urlPercentEncoding())
                items.append(startAfterQueryItem)
            }
            if let `prefix` = `prefix` {
                let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
                items.append(prefixQueryItem)
            }
            if let maxKeys = maxKeys {
                let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
                items.append(maxKeysQueryItem)
            }
            return items
        }
    }
}

extension ListObjectsV2Input: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListObjectsV2Input: Swift.Equatable {
    /// Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results.
    public var continuationToken: Swift.String?
    /// A delimiter is a character that you use to group keys.
    ///
    /// * Directory buckets - For directory buckets, / is the only supported delimiter.
    ///
    /// * Directory buckets - When you query ListObjectsV2 with a delimiter during in-progress multipart uploads, the CommonPrefixes response parameter contains the prefixes that are associated with the in-progress multipart uploads. For more information about multipart uploads, see [Multipart Upload Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html) in the Amazon S3 User Guide.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The owner field is not present in ListObjectsV2 by default. If you want to return the owner field with each key in the result, then set the FetchOwner field to true. Directory buckets - For directory buckets, the bucket owner is returned as the object owner for all objects.
    public var fetchOwner: Swift.Bool?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned. This functionality is not supported for directory buckets.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Limits the response to keys that begin with the specified prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket. This functionality is not supported for directory buckets.
    public var startAfter: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        fetchOwner: Swift.Bool? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.fetchOwner = fetchOwner
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.startAfter = startAfter
    }
}

extension ListObjectsV2Output: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListObjectsV2OutputBody = try responseDecoder.decode(responseBody: data)
            self.`prefix` = output.`prefix`
            self.commonPrefixes = output.commonPrefixes
            self.contents = output.contents
            self.continuationToken = output.continuationToken
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyCount = output.keyCount
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextContinuationToken = output.nextContinuationToken
            self.startAfter = output.startAfter
        } else {
            self.commonPrefixes = nil
            self.contents = nil
            self.continuationToken = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = nil
            self.keyCount = nil
            self.maxKeys = nil
            self.name = nil
            self.nextContinuationToken = nil
            self.`prefix` = nil
            self.startAfter = nil
        }
    }
}

public struct ListObjectsV2Output: Swift.Equatable {
    /// All of the keys (up to 1,000) that share the same prefix are grouped together. When counting the total numbers of returns by this API operation, this group of keys is considered as one item. A response can contain CommonPrefixes only if you specify a delimiter. CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.
    ///
    /// * Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    ///
    /// * Directory buckets - When you query ListObjectsV2 with a delimiter during in-progress multipart uploads, the CommonPrefixes response parameter contains the prefixes that are associated with the in-progress multipart uploads. For more information about multipart uploads, see [Multipart Upload Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html) in the Amazon S3 User Guide.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Metadata about each object returned.
    public var contents: [S3ClientTypes.Object]?
    /// If ContinuationToken was sent with the request, it is included in the response. You can use the returned ContinuationToken for pagination of the list response. You can use this ContinuationToken for pagination of the list results.
    public var continuationToken: Swift.String?
    /// Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the MaxKeys value. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object key names in the XML response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: Delimiter, Prefix, Key, and StartAfter.
    public var encodingType: S3ClientTypes.EncodingType?
    /// Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.
    public var isTruncated: Swift.Bool?
    /// KeyCount is the number of keys returned with this request. KeyCount will always be less than or equal to the MaxKeys field. For example, if you ask for 50 keys, your result will include 50 keys or fewer.
    public var keyCount: Swift.Int?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// NextContinuationToken is sent when isTruncated is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
    public var nextContinuationToken: Swift.String?
    /// Keys that begin with the indicated prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// If StartAfter was sent with the request, it is included in the response. This functionality is not supported for directory buckets.
    public var startAfter: Swift.String?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyCount: Swift.Int? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextContinuationToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyCount = keyCount
        self.maxKeys = maxKeys
        self.name = name
        self.nextContinuationToken = nextContinuationToken
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.startAfter = startAfter
    }
}

struct ListObjectsV2OutputBody: Swift.Equatable {
    let isTruncated: Swift.Bool?
    let contents: [S3ClientTypes.Object]?
    let name: Swift.String?
    let `prefix`: Swift.String?
    let delimiter: Swift.String?
    let maxKeys: Swift.Int?
    let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    let encodingType: S3ClientTypes.EncodingType?
    let keyCount: Swift.Int?
    let continuationToken: Swift.String?
    let nextContinuationToken: Swift.String?
    let startAfter: Swift.String?
}

extension ListObjectsV2OutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case contents = "Contents"
        case continuationToken = "ContinuationToken"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyCount = "KeyCount"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextContinuationToken = "NextContinuationToken"
        case `prefix` = "Prefix"
        case startAfter = "StartAfter"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.contents) {
            let contentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .contents)
            if contentsWrappedContainer != nil {
                let contentsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Object].self, forKey: .contents)
                var contentsBuffer:[S3ClientTypes.Object]? = nil
                if let contentsContainer = contentsContainer {
                    contentsBuffer = [S3ClientTypes.Object]()
                    for structureContainer0 in contentsContainer {
                        contentsBuffer?.append(structureContainer0)
                    }
                }
                contents = contentsBuffer
            } else {
                contents = []
            }
        } else {
            contents = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
        let keyCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .keyCount)
        keyCount = keyCountDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        let startAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startAfter)
        startAfter = startAfterDecoded
    }
}

enum ListObjectsV2OutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchBucket": return try await NoSuchBucket(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension ListPartsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPartsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension ListPartsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension ListPartsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "ListParts"))
            if let partNumberMarker = partNumberMarker {
                let partNumberMarkerQueryItem = ClientRuntime.URLQueryItem(name: "part-number-marker".urlPercentEncoding(), value: Swift.String(partNumberMarker).urlPercentEncoding())
                items.append(partNumberMarkerQueryItem)
            }
            if let maxParts = maxParts {
                let maxPartsQueryItem = ClientRuntime.URLQueryItem(name: "max-parts".urlPercentEncoding(), value: Swift.String(maxParts).urlPercentEncoding())
                items.append(maxPartsQueryItem)
            }
            guard let uploadId = uploadId else {
                let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            items.append(uploadIdQueryItem)
            return items
        }
    }
}

extension ListPartsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct ListPartsInput: Swift.Equatable {
    /// The name of the bucket to which the parts are being uploaded. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Sets the maximum number of parts to return.
    public var maxParts: Swift.Int?
    /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
    public var partNumberMarker: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose parts are being listed.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        partNumberMarker: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.maxParts = maxParts
        self.partNumberMarker = partNumberMarker
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension ListPartsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            self.abortDate = TimestampFormatter(format: .httpDate).date(from: abortDateHeaderValue)
        } else {
            self.abortDate = nil
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            self.abortRuleId = abortRuleIdHeaderValue
        } else {
            self.abortRuleId = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListPartsOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.checksumAlgorithm = output.checksumAlgorithm
            self.initiator = output.initiator
            self.isTruncated = output.isTruncated
            self.key = output.key
            self.maxParts = output.maxParts
            self.nextPartNumberMarker = output.nextPartNumberMarker
            self.owner = output.owner
            self.partNumberMarker = output.partNumberMarker
            self.parts = output.parts
            self.storageClass = output.storageClass
            self.uploadId = output.uploadId
        } else {
            self.bucket = nil
            self.checksumAlgorithm = nil
            self.initiator = nil
            self.isTruncated = nil
            self.key = nil
            self.maxParts = nil
            self.nextPartNumberMarker = nil
            self.owner = nil
            self.partNumberMarker = nil
            self.parts = nil
            self.storageClass = nil
            self.uploadId = nil
        }
    }
}

public struct ListPartsOutput: Swift.Equatable {
    /// If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, then the response includes this header indicating when the initiated multipart upload will become eligible for abort operation. For more information, see [Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config). The response will also include the x-amz-abort-rule-id header that will provide the ID of the lifecycle configuration rule that defines this action. This functionality is not supported for directory buckets.
    public var abortDate: ClientRuntime.Date?
    /// This header is returned along with the x-amz-abort-date header. It identifies applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads. This functionality is not supported for directory buckets.
    public var abortRuleId: Swift.String?
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
    public var bucket: Swift.String?
    /// The algorithm that was used to create a checksum of the object.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Container element that identifies who initiated the multipart upload. If the initiator is an Amazon Web Services account, this element provides the same information as the Owner element. If the initiator is an IAM User, this element provides the user ARN and display name.
    public var initiator: S3ClientTypes.Initiator?
    /// Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.
    public var isTruncated: Swift.Bool?
    /// Object key for which the multipart upload was initiated.
    public var key: Swift.String?
    /// Maximum number of parts that were allowed in the response.
    public var maxParts: Swift.Int?
    /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    public var nextPartNumberMarker: Swift.String?
    /// Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name. Directory buckets - The bucket owner is returned as the object owner for all the parts.
    public var owner: S3ClientTypes.Owner?
    /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    public var partNumberMarker: Swift.String?
    /// Container for elements related to a particular part. A response can contain zero or more Part elements.
    public var parts: [S3ClientTypes.Part]?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The class of storage used to store the uploaded object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// Upload ID identifying the multipart upload whose parts are being listed.
    public var uploadId: Swift.String?

    public init(
        abortDate: ClientRuntime.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        initiator: S3ClientTypes.Initiator? = nil,
        isTruncated: Swift.Bool? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        nextPartNumberMarker: Swift.String? = nil,
        owner: S3ClientTypes.Owner? = nil,
        partNumberMarker: Swift.String? = nil,
        parts: [S3ClientTypes.Part]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.initiator = initiator
        self.isTruncated = isTruncated
        self.key = key
        self.maxParts = maxParts
        self.nextPartNumberMarker = nextPartNumberMarker
        self.owner = owner
        self.partNumberMarker = partNumberMarker
        self.parts = parts
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.uploadId = uploadId
    }
}

struct ListPartsOutputBody: Swift.Equatable {
    let bucket: Swift.String?
    let key: Swift.String?
    let uploadId: Swift.String?
    let partNumberMarker: Swift.String?
    let nextPartNumberMarker: Swift.String?
    let maxParts: Swift.Int?
    let isTruncated: Swift.Bool?
    let parts: [S3ClientTypes.Part]?
    let initiator: S3ClientTypes.Initiator?
    let owner: S3ClientTypes.Owner?
    let storageClass: S3ClientTypes.StorageClass?
    let checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
}

extension ListPartsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case checksumAlgorithm = "ChecksumAlgorithm"
        case initiator = "Initiator"
        case isTruncated = "IsTruncated"
        case key = "Key"
        case maxParts = "MaxParts"
        case nextPartNumberMarker = "NextPartNumberMarker"
        case owner = "Owner"
        case partNumberMarker = "PartNumberMarker"
        case parts = "Part"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let partNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partNumberMarker)
        partNumberMarker = partNumberMarkerDecoded
        let nextPartNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPartNumberMarker)
        nextPartNumberMarker = nextPartNumberMarkerDecoded
        let maxPartsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxParts)
        maxParts = maxPartsDecoded
        let isTruncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Part].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.Part]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.Part]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
        let initiatorDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let checksumAlgorithmDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ChecksumAlgorithm.self, forKey: .checksumAlgorithm)
        checksumAlgorithm = checksumAlgorithmDecoded
    }
}

enum ListPartsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.LocationInfo: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
    }

    static func writingClosure(_ value: S3ClientTypes.LocationInfo?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Name")].write(value.name)
        try writer[.init("Type")].write(value.type)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LocationType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the location where the bucket will be created. For directory buckets, the location type is Availability Zone. For more information about directory buckets, see [Directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) in the Amazon S3 User Guide. This functionality is only supported by directory buckets.
    public struct LocationInfo: Swift.Equatable {
        /// The name of the location where the bucket will be created. For directory buckets, the AZ ID of the Availability Zone where the bucket will be created. An example AZ ID value is usw2-az2.
        public var name: Swift.String?
        /// The type of location where the bucket will be created.
        public var type: S3ClientTypes.LocationType?

        public init(
            name: Swift.String? = nil,
            type: S3ClientTypes.LocationType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension S3ClientTypes {
    public enum LocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case availabilityzone
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationType] {
            return [
                .availabilityzone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .availabilityzone: return "AvailabilityZone"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocationType(rawValue: rawValue) ?? LocationType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.LoggingEnabled: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetBucket = "TargetBucket"
        case targetGrants = "TargetGrants"
        case targetObjectKeyFormat = "TargetObjectKeyFormat"
        case targetPrefix = "TargetPrefix"
    }

    static func writingClosure(_ value: S3ClientTypes.LoggingEnabled?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("TargetBucket")].write(value.targetBucket)
        try writer[.init("TargetGrants")].writeList(value.targetGrants, memberWritingClosure: S3ClientTypes.TargetGrant.writingClosure(_:to:), memberNodeInfo: .init("Grant"), isFlattened: false)
        try writer[.init("TargetObjectKeyFormat")].write(value.targetObjectKeyFormat, writingClosure: S3ClientTypes.TargetObjectKeyFormat.writingClosure(_:to:))
        try writer[.init("TargetPrefix")].write(value.targetPrefix)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetBucket)
        targetBucket = targetBucketDecoded
        if containerValues.contains(.targetGrants) {
            struct KeyVal0{struct Grant{}}
            let targetGrantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .targetGrants)
            if let targetGrantsWrappedContainer = targetGrantsWrappedContainer {
                let targetGrantsContainer = try targetGrantsWrappedContainer.decodeIfPresent([S3ClientTypes.TargetGrant].self, forKey: .member)
                var targetGrantsBuffer:[S3ClientTypes.TargetGrant]? = nil
                if let targetGrantsContainer = targetGrantsContainer {
                    targetGrantsBuffer = [S3ClientTypes.TargetGrant]()
                    for structureContainer0 in targetGrantsContainer {
                        targetGrantsBuffer?.append(structureContainer0)
                    }
                }
                targetGrants = targetGrantsBuffer
            } else {
                targetGrants = []
            }
        } else {
            targetGrants = nil
        }
        let targetPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPrefix)
        targetPrefix = targetPrefixDecoded
        let targetObjectKeyFormatDecoded = try containerValues.decodeIfPresent(S3ClientTypes.TargetObjectKeyFormat.self, forKey: .targetObjectKeyFormat)
        targetObjectKeyFormat = targetObjectKeyFormatDecoded
    }
}

extension S3ClientTypes {
    /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
    public struct LoggingEnabled: Swift.Equatable {
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case, you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        /// This member is required.
        public var targetBucket: Swift.String?
        /// Container for granting information. Buckets that use the bucket owner enforced setting for Object Ownership don't support target grants. For more information, see [Permissions for server access log delivery](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general) in the Amazon S3 User Guide.
        public var targetGrants: [S3ClientTypes.TargetGrant]?
        /// Amazon S3 key format for log objects.
        public var targetObjectKeyFormat: S3ClientTypes.TargetObjectKeyFormat?
        /// A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        /// This member is required.
        public var targetPrefix: Swift.String?

        public init(
            targetBucket: Swift.String? = nil,
            targetGrants: [S3ClientTypes.TargetGrant]? = nil,
            targetObjectKeyFormat: S3ClientTypes.TargetObjectKeyFormat? = nil,
            targetPrefix: Swift.String? = nil
        )
        {
            self.targetBucket = targetBucket
            self.targetGrants = targetGrants
            self.targetObjectKeyFormat = targetObjectKeyFormat
            self.targetPrefix = targetPrefix
        }
    }

}

extension S3ClientTypes {
    public enum MFADelete: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADelete] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MFADelete(rawValue: rawValue) ?? MFADelete.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum MFADeleteStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADeleteStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MFADeleteStatus(rawValue: rawValue) ?? MFADeleteStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum MetadataDirective: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [MetadataDirective] {
            return [
                .copy,
                .replace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetadataDirective(rawValue: rawValue) ?? MetadataDirective.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.MetadataEntry: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    static func writingClosure(_ value: S3ClientTypes.MetadataEntry?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Name")].write(value.name)
        try writer[.init("Value")].write(value.value)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes {
    /// A metadata key-value pair to store with an object.
    public struct MetadataEntry: Swift.Equatable {
        /// Name of the object.
        public var name: Swift.String?
        /// Value of the object.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension S3ClientTypes.Metrics: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventThreshold = "EventThreshold"
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.Metrics?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("EventThreshold")].write(value.eventThreshold, writingClosure: S3ClientTypes.ReplicationTimeValue.writingClosure(_:to:))
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsStatus.self, forKey: .status)
        status = statusDecoded
        let eventThresholdDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeValue.self, forKey: .eventThreshold)
        eventThreshold = eventThresholdDecoded
    }
}

extension S3ClientTypes {
    /// A container specifying replication metrics-related settings enabling replication metrics and events.
    public struct Metrics: Swift.Equatable {
        /// A container specifying the time threshold for emitting the s3:Replication:OperationMissedThreshold event.
        public var eventThreshold: S3ClientTypes.ReplicationTimeValue?
        /// Specifies whether the replication metrics are enabled.
        /// This member is required.
        public var status: S3ClientTypes.MetricsStatus?

        public init(
            eventThreshold: S3ClientTypes.ReplicationTimeValue? = nil,
            status: S3ClientTypes.MetricsStatus? = nil
        )
        {
            self.eventThreshold = eventThreshold
            self.status = status
        }
    }

}

extension S3ClientTypes.MetricsAndOperator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointArn = "AccessPointArn"
        case `prefix` = "Prefix"
        case tags = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.MetricsAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessPointArn")].write(value.accessPointArn)
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let accessPointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointArn)
        accessPointArn = accessPointArnDecoded
    }
}

extension S3ClientTypes {
    /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
    public struct MetricsAndOperator: Swift.Equatable {
        /// The access point ARN used when evaluating an AND predicate.
        public var accessPointArn: Swift.String?
        /// The prefix used when evaluating an AND predicate.
        public var `prefix`: Swift.String?
        /// The list of tags used when evaluating an AND predicate.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            accessPointArn: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.accessPointArn = accessPointArn
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }

}

extension S3ClientTypes.MetricsConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
    }

    static func writingClosure(_ value: S3ClientTypes.MetricsConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.MetricsFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes {
    /// Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
    public struct MetricsConfiguration: Swift.Equatable {
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).
        public var filter: S3ClientTypes.MetricsFilter?
        /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
        /// This member is required.
        public var id: Swift.String?

        public init(
            filter: S3ClientTypes.MetricsFilter? = nil,
            id: Swift.String? = nil
        )
        {
            self.filter = filter
            self.id = id
        }
    }

}

extension S3ClientTypes.MetricsFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accesspointarn = "AccessPointArn"
        case and = "And"
        case `prefix` = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    static func writingClosure(_ value: S3ClientTypes.MetricsFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        switch value {
            case let .accesspointarn(accesspointarn):
                try writer[.init("AccessPointArn")].write(accesspointarn)
            case let .and(and):
                try writer[.init("And")].write(and, writingClosure: S3ClientTypes.MetricsAndOperator.writingClosure(_:to:))
            case let .`prefix`(`prefix`):
                try writer[.init("Prefix")].write(`prefix`)
            case let .tag(tag):
                try writer[.init("Tag")].write(tag, writingClosure: S3ClientTypes.Tag.writingClosure(_:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer[.init("sdkUnknown")].write(sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let key = containerValues.allKeys.first
        switch key {
            case .`prefix`:
                let prefixDecoded = try containerValues.decode(Swift.String.self, forKey: .prefix)
                self = .prefix(prefixDecoded)
            case .tag:
                let tagDecoded = try containerValues.decode(S3ClientTypes.Tag.self, forKey: .tag)
                self = .tag(tagDecoded)
            case .accesspointarn:
                let accesspointarnDecoded = try containerValues.decode(Swift.String.self, forKey: .accesspointarn)
                self = .accesspointarn(accesspointarnDecoded)
            case .and:
                let andDecoded = try containerValues.decode(S3ClientTypes.MetricsAndOperator.self, forKey: .and)
                self = .and(andDecoded)
            default:
                self = .sdkUnknown("")
        }
    }
}

extension S3ClientTypes {
    /// Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator). For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html).
    public enum MetricsFilter: Swift.Equatable {
        /// The prefix used when evaluating a metrics filter.
        case `prefix`(Swift.String)
        /// The tag used when evaluating a metrics filter.
        case tag(S3ClientTypes.Tag)
        /// The access point ARN used when evaluating a metrics filter.
        case accesspointarn(Swift.String)
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        case and(S3ClientTypes.MetricsAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes {
    public enum MetricsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricsStatus(rawValue: rawValue) ?? MetricsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.MultipartUpload: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumAlgorithm = "ChecksumAlgorithm"
        case initiated = "Initiated"
        case initiator = "Initiator"
        case key = "Key"
        case owner = "Owner"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    static func writingClosure(_ value: S3ClientTypes.MultipartUpload?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumAlgorithm")].write(value.checksumAlgorithm)
        try writer[.init("Initiated")].writeTimestamp(value.initiated, format: .dateTime)
        try writer[.init("Initiator")].write(value.initiator, writingClosure: S3ClientTypes.Initiator.writingClosure(_:to:))
        try writer[.init("Key")].write(value.key)
        try writer[.init("Owner")].write(value.owner, writingClosure: S3ClientTypes.Owner.writingClosure(_:to:))
        try writer[.init("StorageClass")].write(value.storageClass)
        try writer[.init("UploadId")].write(value.uploadId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let initiatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .initiated)
        initiated = initiatedDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
        let checksumAlgorithmDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ChecksumAlgorithm.self, forKey: .checksumAlgorithm)
        checksumAlgorithm = checksumAlgorithmDecoded
    }
}

extension S3ClientTypes {
    /// Container for the MultipartUpload for the Amazon S3 object.
    public struct MultipartUpload: Swift.Equatable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
        /// Date and time at which the multipart upload was initiated.
        public var initiated: ClientRuntime.Date?
        /// Identifies who initiated the multipart upload.
        public var initiator: S3ClientTypes.Initiator?
        /// Key of the object for which the multipart upload was initiated.
        public var key: Swift.String?
        /// Specifies the owner of the object that is part of the multipart upload. Directory buckets - The bucket owner is returned as the object owner for all the objects.
        public var owner: S3ClientTypes.Owner?
        /// The class of storage used to store the object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var storageClass: S3ClientTypes.StorageClass?
        /// Upload ID that identifies the multipart upload.
        public var uploadId: Swift.String?

        public init(
            checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
            initiated: ClientRuntime.Date? = nil,
            initiator: S3ClientTypes.Initiator? = nil,
            key: Swift.String? = nil,
            owner: S3ClientTypes.Owner? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            uploadId: Swift.String? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.initiated = initiated
            self.initiator = initiator
            self.key = key
            self.owner = owner
            self.storageClass = storageClass
            self.uploadId = uploadId
        }
    }

}

extension NoSuchBucket {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The specified bucket does not exist.
public struct NoSuchBucket: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchBucket" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension NoSuchKey {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The specified key does not exist.
public struct NoSuchKey: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchKey" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension NoSuchUpload {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The specified multipart upload does not exist.
public struct NoSuchUpload: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchUpload" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes.NoncurrentVersionExpiration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newerNoncurrentVersions = "NewerNoncurrentVersions"
        case noncurrentDays = "NoncurrentDays"
    }

    static func writingClosure(_ value: S3ClientTypes.NoncurrentVersionExpiration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("NewerNoncurrentVersions")].write(value.newerNoncurrentVersions)
        try writer[.init("NoncurrentDays")].write(value.noncurrentDays)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncurrentDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noncurrentDays)
        noncurrentDays = noncurrentDaysDecoded
        let newerNoncurrentVersionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .newerNoncurrentVersions)
        newerNoncurrentVersions = newerNoncurrentVersionsDecoded
    }
}

extension S3ClientTypes {
    /// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
    public struct NoncurrentVersionExpiration: Swift.Equatable {
        /// Specifies how many newer noncurrent versions must exist before Amazon S3 can perform the associated action on a given version. If there are this many more recent noncurrent versions, Amazon S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the Amazon S3 User Guide.
        public var newerNoncurrentVersions: Swift.Int?
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. The value must be a non-zero positive integer. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon S3 User Guide.
        public var noncurrentDays: Swift.Int?

        public init(
            newerNoncurrentVersions: Swift.Int? = nil,
            noncurrentDays: Swift.Int? = nil
        )
        {
            self.newerNoncurrentVersions = newerNoncurrentVersions
            self.noncurrentDays = noncurrentDays
        }
    }

}

extension S3ClientTypes.NoncurrentVersionTransition: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newerNoncurrentVersions = "NewerNoncurrentVersions"
        case noncurrentDays = "NoncurrentDays"
        case storageClass = "StorageClass"
    }

    static func writingClosure(_ value: S3ClientTypes.NoncurrentVersionTransition?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("NewerNoncurrentVersions")].write(value.newerNoncurrentVersions)
        try writer[.init("NoncurrentDays")].write(value.noncurrentDays)
        try writer[.init("StorageClass")].write(value.storageClass)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncurrentDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noncurrentDays)
        noncurrentDays = noncurrentDaysDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.TransitionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let newerNoncurrentVersionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .newerNoncurrentVersions)
        newerNoncurrentVersions = newerNoncurrentVersionsDecoded
    }
}

extension S3ClientTypes {
    /// Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object's lifetime.
    public struct NoncurrentVersionTransition: Swift.Equatable {
        /// Specifies how many newer noncurrent versions must exist before Amazon S3 can perform the associated action on a given version. If there are this many more recent noncurrent versions, Amazon S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the Amazon S3 User Guide.
        public var newerNoncurrentVersions: Swift.Int?
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon S3 User Guide.
        public var noncurrentDays: Swift.Int?
        /// The class of storage used to store the object.
        public var storageClass: S3ClientTypes.TransitionStorageClass?

        public init(
            newerNoncurrentVersions: Swift.Int? = nil,
            noncurrentDays: Swift.Int? = nil,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.newerNoncurrentVersions = newerNoncurrentVersions
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }
    }

}

extension NotFound {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The specified content does not exist.
public struct NotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes.NotificationConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventBridgeConfiguration = "EventBridgeConfiguration"
        case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        case queueConfigurations = "QueueConfiguration"
        case topicConfigurations = "TopicConfiguration"
    }

    static func writingClosure(_ value: S3ClientTypes.NotificationConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("EventBridgeConfiguration")].write(value.eventBridgeConfiguration, writingClosure: S3ClientTypes.EventBridgeConfiguration.writingClosure(_:to:))
        try writer[.init("CloudFunctionConfiguration")].writeList(value.lambdaFunctionConfigurations, memberWritingClosure: S3ClientTypes.LambdaFunctionConfiguration.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("QueueConfiguration")].writeList(value.queueConfigurations, memberWritingClosure: S3ClientTypes.QueueConfiguration.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("TopicConfiguration")].writeList(value.topicConfigurations, memberWritingClosure: S3ClientTypes.TopicConfiguration.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.topicConfigurations) {
            let topicConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .topicConfigurations)
            if topicConfigurationsWrappedContainer != nil {
                let topicConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.TopicConfiguration].self, forKey: .topicConfigurations)
                var topicConfigurationsBuffer:[S3ClientTypes.TopicConfiguration]? = nil
                if let topicConfigurationsContainer = topicConfigurationsContainer {
                    topicConfigurationsBuffer = [S3ClientTypes.TopicConfiguration]()
                    for structureContainer0 in topicConfigurationsContainer {
                        topicConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                topicConfigurations = topicConfigurationsBuffer
            } else {
                topicConfigurations = []
            }
        } else {
            topicConfigurations = nil
        }
        if containerValues.contains(.queueConfigurations) {
            let queueConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueConfigurations)
            if queueConfigurationsWrappedContainer != nil {
                let queueConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.QueueConfiguration].self, forKey: .queueConfigurations)
                var queueConfigurationsBuffer:[S3ClientTypes.QueueConfiguration]? = nil
                if let queueConfigurationsContainer = queueConfigurationsContainer {
                    queueConfigurationsBuffer = [S3ClientTypes.QueueConfiguration]()
                    for structureContainer0 in queueConfigurationsContainer {
                        queueConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                queueConfigurations = queueConfigurationsBuffer
            } else {
                queueConfigurations = []
            }
        } else {
            queueConfigurations = nil
        }
        if containerValues.contains(.lambdaFunctionConfigurations) {
            let lambdaFunctionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .lambdaFunctionConfigurations)
            if lambdaFunctionConfigurationsWrappedContainer != nil {
                let lambdaFunctionConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.LambdaFunctionConfiguration].self, forKey: .lambdaFunctionConfigurations)
                var lambdaFunctionConfigurationsBuffer:[S3ClientTypes.LambdaFunctionConfiguration]? = nil
                if let lambdaFunctionConfigurationsContainer = lambdaFunctionConfigurationsContainer {
                    lambdaFunctionConfigurationsBuffer = [S3ClientTypes.LambdaFunctionConfiguration]()
                    for structureContainer0 in lambdaFunctionConfigurationsContainer {
                        lambdaFunctionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                lambdaFunctionConfigurations = lambdaFunctionConfigurationsBuffer
            } else {
                lambdaFunctionConfigurations = []
            }
        } else {
            lambdaFunctionConfigurations = nil
        }
        let eventBridgeConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EventBridgeConfiguration.self, forKey: .eventBridgeConfiguration)
        eventBridgeConfiguration = eventBridgeConfigurationDecoded
    }
}

extension S3ClientTypes {
    /// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
    public struct NotificationConfiguration: Swift.Equatable {
        /// Enables delivery of events to Amazon EventBridge.
        public var eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration?
        /// Describes the Lambda functions to invoke and the events for which to invoke them.
        public var lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
        /// The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        public var queueConfigurations: [S3ClientTypes.QueueConfiguration]?
        /// The topic to which notifications are sent and the events for which notifications are generated.
        public var topicConfigurations: [S3ClientTypes.TopicConfiguration]?

        public init(
            eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration? = nil,
            lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
            queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
            topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
        )
        {
            self.eventBridgeConfiguration = eventBridgeConfiguration
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
            self.queueConfigurations = queueConfigurations
            self.topicConfigurations = topicConfigurations
        }
    }

}

extension S3ClientTypes.NotificationConfigurationFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "S3Key"
    }

    static func writingClosure(_ value: S3ClientTypes.NotificationConfigurationFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("S3Key")].write(value.key, writingClosure: S3ClientTypes.S3KeyFilter.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.S3KeyFilter.self, forKey: .key)
        key = keyDecoded
    }
}

extension S3ClientTypes {
    /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
    public struct NotificationConfigurationFilter: Swift.Equatable {
        /// A container for object key name prefix and suffix filtering rules.
        public var key: S3ClientTypes.S3KeyFilter?

        public init(
            key: S3ClientTypes.S3KeyFilter? = nil
        )
        {
            self.key = key
        }
    }

}

extension S3ClientTypes.Object: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumAlgorithm = "ChecksumAlgorithm"
        case eTag = "ETag"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case restoreStatus = "RestoreStatus"
        case size = "Size"
        case storageClass = "StorageClass"
    }

    static func writingClosure(_ value: S3ClientTypes.Object?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumAlgorithm")].writeList(value.checksumAlgorithm, memberWritingClosure: S3ClientTypes.ChecksumAlgorithm.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("Key")].write(value.key)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
        try writer[.init("Owner")].write(value.owner, writingClosure: S3ClientTypes.Owner.writingClosure(_:to:))
        try writer[.init("RestoreStatus")].write(value.restoreStatus, writingClosure: S3ClientTypes.RestoreStatus.writingClosure(_:to:))
        try writer[.init("Size")].write(value.size)
        try writer[.init("StorageClass")].write(value.storageClass)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        if containerValues.contains(.checksumAlgorithm) {
            let checksumAlgorithmWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .checksumAlgorithm)
            if checksumAlgorithmWrappedContainer != nil {
                let checksumAlgorithmContainer = try containerValues.decodeIfPresent([S3ClientTypes.ChecksumAlgorithm].self, forKey: .checksumAlgorithm)
                var checksumAlgorithmBuffer:[S3ClientTypes.ChecksumAlgorithm]? = nil
                if let checksumAlgorithmContainer = checksumAlgorithmContainer {
                    checksumAlgorithmBuffer = [S3ClientTypes.ChecksumAlgorithm]()
                    for enumContainer0 in checksumAlgorithmContainer {
                        checksumAlgorithmBuffer?.append(enumContainer0)
                    }
                }
                checksumAlgorithm = checksumAlgorithmBuffer
            } else {
                checksumAlgorithm = []
            }
        } else {
            checksumAlgorithm = nil
        }
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
    }
}

extension S3ClientTypes {
    /// An object consists of data and its descriptive metadata.
    public struct Object: Swift.Equatable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]?
        /// The entity tag is a hash of the object. The ETag reflects changes only to the contents of an object, not its metadata. The ETag may or may not be an MD5 digest of the object data. Whether or not it is depends on how the object was created and how it is encrypted as described below:
        ///
        /// * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are an MD5 digest of their object data.
        ///
        /// * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are not an MD5 digest of their object data.
        ///
        /// * If an object is created by either the Multipart Upload or Part Copy operation, the ETag is not an MD5 digest, regardless of the method of encryption. If an object is larger than 16 MB, the Amazon Web Services Management Console will upload or copy that object as a Multipart Upload, and therefore the ETag will not be an MD5 digest.
        ///
        ///
        /// Directory buckets - MD5 is not supported by directory buckets.
        public var eTag: Swift.String?
        /// The name that you assign to an object. You use the object key to retrieve the object.
        public var key: Swift.String?
        /// Creation date of the object.
        public var lastModified: ClientRuntime.Date?
        /// The owner of the object Directory buckets - The bucket owner is returned as the object owner.
        public var owner: S3ClientTypes.Owner?
        /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var restoreStatus: S3ClientTypes.RestoreStatus?
        /// Size in bytes of the object
        public var size: Swift.Int?
        /// The class of storage used to store the object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var storageClass: S3ClientTypes.ObjectStorageClass?

        public init(
            checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]? = nil,
            eTag: Swift.String? = nil,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            restoreStatus: S3ClientTypes.RestoreStatus? = nil,
            size: Swift.Int? = nil,
            storageClass: S3ClientTypes.ObjectStorageClass? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.eTag = eTag
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.restoreStatus = restoreStatus
            self.size = size
            self.storageClass = storageClass
        }
    }

}

extension ObjectAlreadyInActiveTierError {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// This action is not allowed against this storage tier.
public struct ObjectAlreadyInActiveTierError: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ObjectAlreadyInActiveTierError" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {
    public enum ObjectAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case checksum
        case etag
        case objectParts
        case objectSize
        case storageClass
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectAttributes] {
            return [
                .checksum,
                .etag,
                .objectParts,
                .objectSize,
                .storageClass,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .checksum: return "Checksum"
            case .etag: return "ETag"
            case .objectParts: return "ObjectParts"
            case .objectSize: return "ObjectSize"
            case .storageClass: return "StorageClass"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectAttributes(rawValue: rawValue) ?? ObjectAttributes.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ObjectCannedACL: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedRead
        case awsExecRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectCannedACL] {
            return [
                .authenticatedRead,
                .awsExecRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .private,
                .publicRead,
                .publicReadWrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .awsExecRead: return "aws-exec-read"
            case .bucketOwnerFullControl: return "bucket-owner-full-control"
            case .bucketOwnerRead: return "bucket-owner-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectCannedACL(rawValue: rawValue) ?? ObjectCannedACL.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectIdentifier: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case versionId = "VersionId"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectIdentifier?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Key")].write(value.key)
        try writer[.init("VersionId")].write(value.versionId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension S3ClientTypes {
    /// Object Identifier is unique value to identify objects.
    public struct ObjectIdentifier: Swift.Equatable {
        /// Key name of the object. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var key: Swift.String?
        /// Version ID for the specific version of the object to delete. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.key = key
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.ObjectLockConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockEnabled = "ObjectLockEnabled"
        case rule = "Rule"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectLockConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ObjectLockEnabled")].write(value.objectLockEnabled)
        try writer[.init("Rule")].write(value.rule, writingClosure: S3ClientTypes.ObjectLockRule.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockEnabled.self, forKey: .objectLockEnabled)
        objectLockEnabled = objectLockEnabledDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension S3ClientTypes {
    /// The container element for Object Lock configuration parameters.
    public struct ObjectLockConfiguration: Swift.Equatable {
        /// Indicates whether this bucket has an Object Lock configuration enabled. Enable ObjectLockEnabled when you apply ObjectLockConfiguration to a bucket.
        public var objectLockEnabled: S3ClientTypes.ObjectLockEnabled?
        /// Specifies the Object Lock rule for the specified object. Enable the this rule when you apply ObjectLockConfiguration to a bucket. Bucket settings require both a mode and a period. The period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
        public var rule: S3ClientTypes.ObjectLockRule?

        public init(
            objectLockEnabled: S3ClientTypes.ObjectLockEnabled? = nil,
            rule: S3ClientTypes.ObjectLockRule? = nil
        )
        {
            self.objectLockEnabled = objectLockEnabled
            self.rule = rule
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockEnabled: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockEnabled] {
            return [
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockEnabled(rawValue: rawValue) ?? ObjectLockEnabled.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockLegalHold: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectLockLegalHold?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHoldStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// A legal hold configuration for an object.
    public struct ObjectLockLegalHold: Swift.Equatable {
        /// Indicates whether the specified object has a legal hold in place.
        public var status: S3ClientTypes.ObjectLockLegalHoldStatus?

        public init(
            status: S3ClientTypes.ObjectLockLegalHoldStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockLegalHoldStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockLegalHoldStatus] {
            return [
                .off,
                .on,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockLegalHoldStatus(rawValue: rawValue) ?? ObjectLockLegalHoldStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ObjectLockMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockMode] {
            return [
                .compliance,
                .governance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockMode(rawValue: rawValue) ?? ObjectLockMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockRetention: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mode = "Mode"
        case retainUntilDate = "RetainUntilDate"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectLockRetention?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Mode")].write(value.mode)
        try writer[.init("RetainUntilDate")].writeTimestamp(value.retainUntilDate, format: .dateTime)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetentionMode.self, forKey: .mode)
        mode = modeDecoded
        let retainUntilDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .retainUntilDate)
        retainUntilDate = retainUntilDateDecoded
    }
}

extension S3ClientTypes {
    /// A Retention configuration for an object.
    public struct ObjectLockRetention: Swift.Equatable {
        /// Indicates the Retention mode for the specified object.
        public var mode: S3ClientTypes.ObjectLockRetentionMode?
        /// The date on which this Object Lock Retention will expire.
        public var retainUntilDate: ClientRuntime.Date?

        public init(
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            retainUntilDate: ClientRuntime.Date? = nil
        )
        {
            self.mode = mode
            self.retainUntilDate = retainUntilDate
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockRetentionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockRetentionMode] {
            return [
                .compliance,
                .governance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockRetentionMode(rawValue: rawValue) ?? ObjectLockRetentionMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRetention = "DefaultRetention"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectLockRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DefaultRetention")].write(value.defaultRetention, writingClosure: S3ClientTypes.DefaultRetention.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultRetentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DefaultRetention.self, forKey: .defaultRetention)
        defaultRetention = defaultRetentionDecoded
    }
}

extension S3ClientTypes {
    /// The container element for an Object Lock rule.
    public struct ObjectLockRule: Swift.Equatable {
        /// The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. Bucket settings require both a mode and a period. The period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
        public var defaultRetention: S3ClientTypes.DefaultRetention?

        public init(
            defaultRetention: S3ClientTypes.DefaultRetention? = nil
        )
        {
            self.defaultRetention = defaultRetention
        }
    }

}

extension ObjectNotInActiveTierError {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
        self.requestID2 = requestID2
    }
}

/// The source object of the COPY action is not in the active tier and is only stored in Amazon S3 Glacier.
public struct ObjectNotInActiveTierError: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ObjectNotInActiveTierError" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {
    /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
    public enum ObjectOwnership: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketownerenforced
        case bucketownerpreferred
        case objectwriter
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectOwnership] {
            return [
                .bucketownerenforced,
                .bucketownerpreferred,
                .objectwriter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketownerenforced: return "BucketOwnerEnforced"
            case .bucketownerpreferred: return "BucketOwnerPreferred"
            case .objectwriter: return "ObjectWriter"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectOwnership(rawValue: rawValue) ?? ObjectOwnership.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectPart: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case partNumber = "PartNumber"
        case size = "Size"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectPart?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
        try writer[.init("PartNumber")].write(value.partNumber)
        try writer[.init("Size")].write(value.size)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partNumber)
        partNumber = partNumberDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

extension S3ClientTypes {
    /// A container for elements related to an individual part.
    public struct ObjectPart: Swift.Equatable {
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// The part number identifying the part. This value is a positive integer between 1 and 10,000.
        public var partNumber: Swift.Int?
        /// The size of the uploaded part in bytes.
        public var size: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            partNumber: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.partNumber = partNumber
            self.size = size
        }
    }

}

extension S3ClientTypes {
    public enum ObjectStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case expressOnezone
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case snow
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectStorageClass] {
            return [
                .deepArchive,
                .expressOnezone,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .snow,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .expressOnezone: return "EXPRESS_ONEZONE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .snow: return "SNOW"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectStorageClass(rawValue: rawValue) ?? ObjectStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectVersion: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumAlgorithm = "ChecksumAlgorithm"
        case eTag = "ETag"
        case isLatest = "IsLatest"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case restoreStatus = "RestoreStatus"
        case size = "Size"
        case storageClass = "StorageClass"
        case versionId = "VersionId"
    }

    static func writingClosure(_ value: S3ClientTypes.ObjectVersion?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumAlgorithm")].writeList(value.checksumAlgorithm, memberWritingClosure: S3ClientTypes.ChecksumAlgorithm.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("IsLatest")].write(value.isLatest)
        try writer[.init("Key")].write(value.key)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
        try writer[.init("Owner")].write(value.owner, writingClosure: S3ClientTypes.Owner.writingClosure(_:to:))
        try writer[.init("RestoreStatus")].write(value.restoreStatus, writingClosure: S3ClientTypes.RestoreStatus.writingClosure(_:to:))
        try writer[.init("Size")].write(value.size)
        try writer[.init("StorageClass")].write(value.storageClass)
        try writer[.init("VersionId")].write(value.versionId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        if containerValues.contains(.checksumAlgorithm) {
            let checksumAlgorithmWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .checksumAlgorithm)
            if checksumAlgorithmWrappedContainer != nil {
                let checksumAlgorithmContainer = try containerValues.decodeIfPresent([S3ClientTypes.ChecksumAlgorithm].self, forKey: .checksumAlgorithm)
                var checksumAlgorithmBuffer:[S3ClientTypes.ChecksumAlgorithm]? = nil
                if let checksumAlgorithmContainer = checksumAlgorithmContainer {
                    checksumAlgorithmBuffer = [S3ClientTypes.ChecksumAlgorithm]()
                    for enumContainer0 in checksumAlgorithmContainer {
                        checksumAlgorithmBuffer?.append(enumContainer0)
                    }
                }
                checksumAlgorithm = checksumAlgorithmBuffer
            } else {
                checksumAlgorithm = []
            }
        } else {
            checksumAlgorithm = nil
        }
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectVersionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isLatestDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLatest)
        isLatest = isLatestDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
    }
}

extension S3ClientTypes {
    /// The version of an object.
    public struct ObjectVersion: Swift.Equatable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]?
        /// The entity tag is an MD5 hash of that version of the object.
        public var eTag: Swift.String?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Swift.Bool?
        /// The object key.
        public var key: Swift.String?
        /// Date and time when the object was last modified.
        public var lastModified: ClientRuntime.Date?
        /// Specifies the owner of the object.
        public var owner: S3ClientTypes.Owner?
        /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide.
        public var restoreStatus: S3ClientTypes.RestoreStatus?
        /// Size in bytes of the object.
        public var size: Swift.Int?
        /// The class of storage used to store the object.
        public var storageClass: S3ClientTypes.ObjectVersionStorageClass?
        /// Version ID of an object.
        public var versionId: Swift.String?

        public init(
            checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]? = nil,
            eTag: Swift.String? = nil,
            isLatest: Swift.Bool? = nil,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            restoreStatus: S3ClientTypes.RestoreStatus? = nil,
            size: Swift.Int? = nil,
            storageClass: S3ClientTypes.ObjectVersionStorageClass? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.eTag = eTag
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.restoreStatus = restoreStatus
            self.size = size
            self.storageClass = storageClass
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes {
    public enum ObjectVersionStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectVersionStorageClass] {
            return [
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectVersionStorageClass(rawValue: rawValue) ?? ObjectVersionStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum OptionalObjectAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case restoreStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionalObjectAttributes] {
            return [
                .restoreStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .restoreStatus: return "RestoreStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OptionalObjectAttributes(rawValue: rawValue) ?? OptionalObjectAttributes.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.OutputLocation: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3 = "S3"
    }

    static func writingClosure(_ value: S3ClientTypes.OutputLocation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("S3")].write(value.s3, writingClosure: S3ClientTypes.S3Location.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try containerValues.decodeIfPresent(S3ClientTypes.S3Location.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension S3ClientTypes {
    /// Describes the location where the restore job's output is stored.
    public struct OutputLocation: Swift.Equatable {
        /// Describes an S3 location that will receive the results of the restore request.
        public var s3: S3ClientTypes.S3Location?

        public init(
            s3: S3ClientTypes.S3Location? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension S3ClientTypes.OutputSerialization: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csv = "CSV"
        case json = "JSON"
    }

    static func writingClosure(_ value: S3ClientTypes.OutputSerialization?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CSV")].write(value.csv, writingClosure: S3ClientTypes.CSVOutput.writingClosure(_:to:))
        try writer[.init("JSON")].write(value.json, writingClosure: S3ClientTypes.JSONOutput.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let csvDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CSVOutput.self, forKey: .csv)
        csv = csvDecoded
        let jsonDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONOutput.self, forKey: .json)
        json = jsonDecoded
    }
}

extension S3ClientTypes {
    /// Describes how results of the Select job are serialized.
    public struct OutputSerialization: Swift.Equatable {
        /// Describes the serialization of CSV-encoded Select results.
        public var csv: S3ClientTypes.CSVOutput?
        /// Specifies JSON as request's output serialization format.
        public var json: S3ClientTypes.JSONOutput?

        public init(
            csv: S3ClientTypes.CSVOutput? = nil,
            json: S3ClientTypes.JSONOutput? = nil
        )
        {
            self.csv = csv
            self.json = json
        }
    }

}

extension S3ClientTypes.Owner: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case id = "ID"
    }

    static func writingClosure(_ value: S3ClientTypes.Owner?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DisplayName")].write(value.displayName)
        try writer[.init("ID")].write(value.id)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension S3ClientTypes {
    /// Container for the owner's display name and ID.
    public struct Owner: Swift.Equatable {
        /// Container for the display name of the owner. This value is only supported in the following Amazon Web Services Regions:
        ///
        /// * US East (N. Virginia)
        ///
        /// * US West (N. California)
        ///
        /// * US West (Oregon)
        ///
        /// * Asia Pacific (Singapore)
        ///
        /// * Asia Pacific (Sydney)
        ///
        /// * Asia Pacific (Tokyo)
        ///
        /// * Europe (Ireland)
        ///
        /// * South America (São Paulo)
        ///
        ///
        /// This functionality is not supported for directory buckets.
        public var displayName: Swift.String?
        /// Container for the ID of the owner.
        public var id: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.id = id
        }
    }

}

extension S3ClientTypes {
    public enum OwnerOverride: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case destination
        case sdkUnknown(Swift.String)

        public static var allCases: [OwnerOverride] {
            return [
                .destination,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .destination: return "Destination"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OwnerOverride(rawValue: rawValue) ?? OwnerOverride.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.OwnershipControls: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    static func writingClosure(_ value: S3ClientTypes.OwnershipControls?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Rule")].writeList(value.rules, memberWritingClosure: S3ClientTypes.OwnershipControlsRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.OwnershipControlsRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.OwnershipControlsRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.OwnershipControlsRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes {
    /// The container element for a bucket's ownership controls.
    public struct OwnershipControls: Swift.Equatable {
        /// The container element for an ownership control rule.
        /// This member is required.
        public var rules: [S3ClientTypes.OwnershipControlsRule]?

        public init(
            rules: [S3ClientTypes.OwnershipControlsRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes.OwnershipControlsRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectOwnership = "ObjectOwnership"
    }

    static func writingClosure(_ value: S3ClientTypes.OwnershipControlsRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ObjectOwnership")].write(value.objectOwnership)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectOwnershipDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectOwnership.self, forKey: .objectOwnership)
        objectOwnership = objectOwnershipDecoded
    }
}

extension S3ClientTypes {
    /// The container element for an ownership control rule.
    public struct OwnershipControlsRule: Swift.Equatable {
        /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
        /// This member is required.
        public var objectOwnership: S3ClientTypes.ObjectOwnership?

        public init(
            objectOwnership: S3ClientTypes.ObjectOwnership? = nil
        )
        {
            self.objectOwnership = objectOwnership
        }
    }

}

extension S3ClientTypes.ParquetInput: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.ParquetInput?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    /// Container for Parquet.
    public struct ParquetInput: Swift.Equatable {

        public init() { }
    }

}

extension S3ClientTypes.Part: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumCRC32 = "ChecksumCRC32"
        case checksumCRC32C = "ChecksumCRC32C"
        case checksumSHA1 = "ChecksumSHA1"
        case checksumSHA256 = "ChecksumSHA256"
        case eTag = "ETag"
        case lastModified = "LastModified"
        case partNumber = "PartNumber"
        case size = "Size"
    }

    static func writingClosure(_ value: S3ClientTypes.Part?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ChecksumCRC32")].write(value.checksumCRC32)
        try writer[.init("ChecksumCRC32C")].write(value.checksumCRC32C)
        try writer[.init("ChecksumSHA1")].write(value.checksumSHA1)
        try writer[.init("ChecksumSHA256")].write(value.checksumSHA256)
        try writer[.init("ETag")].write(value.eTag)
        try writer[.init("LastModified")].writeTimestamp(value.lastModified, format: .dateTime)
        try writer[.init("PartNumber")].write(value.partNumber)
        try writer[.init("Size")].write(value.size)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partNumber)
        partNumber = partNumberDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let checksumCRC32Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32)
        checksumCRC32 = checksumCRC32Decoded
        let checksumCRC32CDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumCRC32C)
        checksumCRC32C = checksumCRC32CDecoded
        let checksumSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA1)
        checksumSHA1 = checksumSHA1Decoded
        let checksumSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksumSHA256)
        checksumSHA256 = checksumSHA256Decoded
    }
}

extension S3ClientTypes {
    /// Container for elements related to a part.
    public struct Part: Swift.Equatable {
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag returned when the part was uploaded.
        public var eTag: Swift.String?
        /// Date and time at which the part was uploaded.
        public var lastModified: ClientRuntime.Date?
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public var partNumber: Swift.Int?
        /// Size in bytes of the uploaded part data.
        public var size: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            partNumber: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
            self.partNumber = partNumber
            self.size = size
        }
    }

}

extension S3ClientTypes {
    public enum PartitionDateSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deliverytime
        case eventtime
        case sdkUnknown(Swift.String)

        public static var allCases: [PartitionDateSource] {
            return [
                .deliverytime,
                .eventtime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deliverytime: return "DeliveryTime"
            case .eventtime: return "EventTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PartitionDateSource(rawValue: rawValue) ?? PartitionDateSource.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.PartitionedPrefix: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionDateSource = "PartitionDateSource"
    }

    static func writingClosure(_ value: S3ClientTypes.PartitionedPrefix?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("PartitionDateSource")].write(value.partitionDateSource)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionDateSourceDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PartitionDateSource.self, forKey: .partitionDateSource)
        partitionDateSource = partitionDateSourceDecoded
    }
}

extension S3ClientTypes {
    /// Amazon S3 keys for log objects are partitioned in the following format: [DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString] PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
    public struct PartitionedPrefix: Swift.Equatable {
        /// Specifies the partition date source for the partitioned prefix. PartitionDateSource can be EventTime or DeliveryTime.
        public var partitionDateSource: S3ClientTypes.PartitionDateSource?

        public init(
            partitionDateSource: S3ClientTypes.PartitionDateSource? = nil
        )
        {
            self.partitionDateSource = partitionDateSource
        }
    }

}

extension S3ClientTypes {
    public enum Payer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketowner
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [Payer] {
            return [
                .bucketowner,
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketowner: return "BucketOwner"
            case .requester: return "Requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Payer(rawValue: rawValue) ?? Payer.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum Permission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullControl
        case read
        case readAcp
        case write
        case writeAcp
        case sdkUnknown(Swift.String)

        public static var allCases: [Permission] {
            return [
                .fullControl,
                .read,
                .readAcp,
                .write,
                .writeAcp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .readAcp: return "READ_ACP"
            case .write: return "WRITE"
            case .writeAcp: return "WRITE_ACP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Permission(rawValue: rawValue) ?? Permission.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.PolicyStatus: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isPublic = "IsPublic"
    }

    static func writingClosure(_ value: S3ClientTypes.PolicyStatus?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("IsPublic")].write(value.isPublic)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isPublicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPublic)
        isPublic = isPublicDecoded
    }
}

extension S3ClientTypes {
    /// The container element for a bucket's policy status.
    public struct PolicyStatus: Swift.Equatable {
        /// The policy status for this bucket. TRUE indicates that this bucket is public. FALSE indicates that the bucket is not public.
        public var isPublic: Swift.Bool?

        public init(
            isPublic: Swift.Bool? = nil
        )
        {
            self.isPublic = isPublic
        }
    }

}

extension S3ClientTypes.Progress: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesProcessed = "BytesProcessed"
        case bytesReturned = "BytesReturned"
        case bytesScanned = "BytesScanned"
    }

    static func writingClosure(_ value: S3ClientTypes.Progress?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("BytesProcessed")].write(value.bytesProcessed)
        try writer[.init("BytesReturned")].write(value.bytesReturned)
        try writer[.init("BytesScanned")].write(value.bytesScanned)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesScannedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesScanned)
        bytesScanned = bytesScannedDecoded
        let bytesProcessedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesProcessed)
        bytesProcessed = bytesProcessedDecoded
        let bytesReturnedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesReturned)
        bytesReturned = bytesReturnedDecoded
    }
}

extension S3ClientTypes {
    /// This data type contains information about progress of an operation.
    public struct Progress: Swift.Equatable {
        /// The current number of uncompressed object bytes processed.
        public var bytesProcessed: Swift.Int?
        /// The current number of bytes of records payload data returned.
        public var bytesReturned: Swift.Int?
        /// The current number of object bytes scanned.
        public var bytesScanned: Swift.Int?

        public init(
            bytesProcessed: Swift.Int? = nil,
            bytesReturned: Swift.Int? = nil,
            bytesScanned: Swift.Int? = nil
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }

}

extension S3ClientTypes.ProgressEvent: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
    }

    static func writingClosure(_ value: S3ClientTypes.ProgressEvent?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Details")].write(value.details, writingClosure: S3ClientTypes.Progress.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Progress.self, forKey: .details)
        details = detailsDecoded
    }
}

extension S3ClientTypes {
    /// This data type contains information about the progress event of an operation.
    public struct ProgressEvent: Swift.Equatable {
        /// The Progress event details.
        public var details: S3ClientTypes.Progress?

        public init(
            details: S3ClientTypes.Progress? = nil
        )
        {
            self.details = details
        }
    }

}

extension S3ClientTypes {
    public enum ModelProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelProtocol] {
            return [
                .http,
                .https,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "http"
            case .https: return "https"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelProtocol(rawValue: rawValue) ?? ModelProtocol.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.PublicAccessBlockConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAcls = "BlockPublicAcls"
        case blockPublicPolicy = "BlockPublicPolicy"
        case ignorePublicAcls = "IgnorePublicAcls"
        case restrictPublicBuckets = "RestrictPublicBuckets"
    }

    static func writingClosure(_ value: S3ClientTypes.PublicAccessBlockConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("BlockPublicAcls")].write(value.blockPublicAcls)
        try writer[.init("BlockPublicPolicy")].write(value.blockPublicPolicy)
        try writer[.init("IgnorePublicAcls")].write(value.ignorePublicAcls)
        try writer[.init("RestrictPublicBuckets")].write(value.restrictPublicBuckets)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAclsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .blockPublicAcls)
        blockPublicAcls = blockPublicAclsDecoded
        let ignorePublicAclsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignorePublicAcls)
        ignorePublicAcls = ignorePublicAclsDecoded
        let blockPublicPolicyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .blockPublicPolicy)
        blockPublicPolicy = blockPublicPolicyDecoded
        let restrictPublicBucketsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .restrictPublicBuckets)
        restrictPublicBuckets = restrictPublicBucketsDecoded
    }
}

extension S3ClientTypes {
    /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the Amazon S3 User Guide.
    public struct PublicAccessBlockConfiguration: Swift.Equatable {
        /// Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to TRUE causes the following behavior:
        ///
        /// * PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
        ///
        /// * PUT Object calls fail if the request includes a public ACL.
        ///
        /// * PUT Bucket calls fail if the request includes a public ACL.
        ///
        ///
        /// Enabling this setting doesn't affect existing policies or ACLs.
        public var blockPublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        public var blockPublicPolicy: Swift.Bool?
        /// Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        public var ignorePublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only Amazon Web Service principals and authorized users within this account if the bucket has a public policy. Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        public var restrictPublicBuckets: Swift.Bool?

        public init(
            blockPublicAcls: Swift.Bool? = nil,
            blockPublicPolicy: Swift.Bool? = nil,
            ignorePublicAcls: Swift.Bool? = nil,
            restrictPublicBuckets: Swift.Bool? = nil
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }

}

extension PutBucketAccelerateConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerateConfiguration = "AccelerateConfiguration"
    }

    static func writingClosure(_ value: PutBucketAccelerateConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccelerateConfiguration")].write(value.accelerateConfiguration, writingClosure: S3ClientTypes.AccelerateConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketAccelerateConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketAccelerateConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "accelerate", value: nil))
            return items
        }
    }
}

extension PutBucketAccelerateConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketAccelerateConfigurationInput: Swift.Equatable {
    /// Container for setting the transfer acceleration state.
    /// This member is required.
    public var accelerateConfiguration: S3ClientTypes.AccelerateConfiguration?
    /// The name of the bucket for which the accelerate configuration is set.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        accelerateConfiguration: S3ClientTypes.AccelerateConfiguration? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.accelerateConfiguration = accelerateConfiguration
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketAccelerateConfigurationInputBody: Swift.Equatable {
    let accelerateConfiguration: S3ClientTypes.AccelerateConfiguration?
}

extension PutBucketAccelerateConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerateConfiguration = "AccelerateConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerateConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccelerateConfiguration.self, forKey: .accelerateConfiguration)
        accelerateConfiguration = accelerateConfigurationDecoded
    }
}

extension PutBucketAccelerateConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketAccelerateConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketAccelerateConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketAclInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    static func writingClosure(_ value: PutBucketAclInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessControlPolicy")].write(value.accessControlPolicy, writingClosure: S3ClientTypes.AccessControlPolicy.writingClosure(_:to:))
    }
}

extension PutBucketAclInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = grantWrite {
            items.add(Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        return items
    }
}

extension PutBucketAclInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "acl", value: nil))
            return items
        }
    }
}

extension PutBucketAclInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketAclInput: Swift.Equatable {
    /// Contains the elements that set the ACL permissions for an object per grantee.
    public var accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// The canned ACL to apply to the bucket.
    public var acl: S3ClientTypes.BucketCannedACL?
    /// The bucket to which to apply the ACL.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket.
    public var grantWriteACP: Swift.String?

    public init(
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        acl: S3ClientTypes.BucketCannedACL? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil
    )
    {
        self.accessControlPolicy = accessControlPolicy
        self.acl = acl
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
    }
}

struct PutBucketAclInputBody: Swift.Equatable {
    let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
}

extension PutBucketAclInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlPolicyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlPolicy.self, forKey: .accessControlPolicy)
        accessControlPolicy = accessControlPolicyDecoded
    }
}

extension PutBucketAclOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketAclOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketAclOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketAnalyticsConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    static func writingClosure(_ value: PutBucketAnalyticsConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AnalyticsConfiguration")].write(value.analyticsConfiguration, writingClosure: S3ClientTypes.AnalyticsConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketAnalyticsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketAnalyticsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension PutBucketAnalyticsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// The configuration and any analyses for the analytics filter.
    /// This member is required.
    public var analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
    /// The name of the bucket to which an analytics configuration is stored.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil,
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct PutBucketAnalyticsConfigurationInputBody: Swift.Equatable {
    let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
}

extension PutBucketAnalyticsConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsConfiguration.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
    }
}

extension PutBucketAnalyticsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketAnalyticsConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketCorsInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case corsConfiguration = "CORSConfiguration"
    }

    static func writingClosure(_ value: PutBucketCorsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("CORSConfiguration")].write(value.corsConfiguration, writingClosure: S3ClientTypes.CORSConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketCorsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketCorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "cors", value: nil))
            return items
        }
    }
}

extension PutBucketCorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketCorsInput: Swift.Equatable {
    /// Specifies the bucket impacted by the corsconfiguration.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var corsConfiguration: S3ClientTypes.CORSConfiguration?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        corsConfiguration: S3ClientTypes.CORSConfiguration? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.corsConfiguration = corsConfiguration
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketCorsInputBody: Swift.Equatable {
    let corsConfiguration: S3ClientTypes.CORSConfiguration?
}

extension PutBucketCorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case corsConfiguration = "CORSConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let corsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CORSConfiguration.self, forKey: .corsConfiguration)
        corsConfiguration = corsConfigurationDecoded
    }
}

extension PutBucketCorsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketCorsOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketCorsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketEncryptionInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    static func writingClosure(_ value: PutBucketEncryptionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ServerSideEncryptionConfiguration")].write(value.serverSideEncryptionConfiguration, writingClosure: S3ClientTypes.ServerSideEncryptionConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketEncryptionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketEncryptionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
            return items
        }
    }
}

extension PutBucketEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketEncryptionInput: Swift.Equatable {
    /// Specifies default encryption for a bucket using server-side encryption with different key options. By default, all buckets have a default encryption configuration that uses server-side encryption with Amazon S3 managed keys (SSE-S3). You can optionally configure default encryption for a bucket by using server-side encryption with an Amazon Web Services KMS key (SSE-KMS) or a customer-provided key (SSE-C). For information about the bucket default encryption feature, see [Amazon S3 Bucket Default Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the default server-side-encryption configuration.
    /// This member is required.
    public var serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

struct PutBucketEncryptionInputBody: Swift.Equatable {
    let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?
}

extension PutBucketEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
    }
}

extension PutBucketEncryptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketEncryptionOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketEncryptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketIntelligentTieringConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    static func writingClosure(_ value: PutBucketIntelligentTieringConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("IntelligentTieringConfiguration")].write(value.intelligentTieringConfiguration, writingClosure: S3ClientTypes.IntelligentTieringConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketIntelligentTieringConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension PutBucketIntelligentTieringConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?
    /// Container for S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil,
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.id = id
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

struct PutBucketIntelligentTieringConfigurationInputBody: Swift.Equatable {
    let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?
}

extension PutBucketIntelligentTieringConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intelligentTieringConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringConfiguration.self, forKey: .intelligentTieringConfiguration)
        intelligentTieringConfiguration = intelligentTieringConfigurationDecoded
    }
}

extension PutBucketIntelligentTieringConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketIntelligentTieringConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketInventoryConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    static func writingClosure(_ value: PutBucketInventoryConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("InventoryConfiguration")].write(value.inventoryConfiguration, writingClosure: S3ClientTypes.InventoryConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketInventoryConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketInventoryConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension PutBucketInventoryConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketInventoryConfigurationInput: Swift.Equatable {
    /// The name of the bucket where the inventory configuration will be stored.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies the inventory configuration.
    /// This member is required.
    public var inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.inventoryConfiguration = inventoryConfiguration
    }
}

struct PutBucketInventoryConfigurationInputBody: Swift.Equatable {
    let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?
}

extension PutBucketInventoryConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inventoryConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryConfiguration.self, forKey: .inventoryConfiguration)
        inventoryConfiguration = inventoryConfigurationDecoded
    }
}

extension PutBucketInventoryConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketInventoryConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketLifecycleConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleConfiguration = "LifecycleConfiguration"
    }

    static func writingClosure(_ value: PutBucketLifecycleConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("LifecycleConfiguration")].write(value.lifecycleConfiguration, writingClosure: S3ClientTypes.BucketLifecycleConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketLifecycleConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketLifecycleConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
            return items
        }
    }
}

extension PutBucketLifecycleConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketLifecycleConfigurationInput: Swift.Equatable {
    /// The name of the bucket for which to set the configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for lifecycle rules. You can add as many as 1,000 rules.
    public var lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil,
        lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
        self.lifecycleConfiguration = lifecycleConfiguration
    }
}

struct PutBucketLifecycleConfigurationInputBody: Swift.Equatable {
    let lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration?
}

extension PutBucketLifecycleConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleConfiguration = "LifecycleConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLifecycleConfiguration.self, forKey: .lifecycleConfiguration)
        lifecycleConfiguration = lifecycleConfigurationDecoded
    }
}

extension PutBucketLifecycleConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketLifecycleConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketLifecycleConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketLoggingInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketLoggingStatus = "BucketLoggingStatus"
    }

    static func writingClosure(_ value: PutBucketLoggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("BucketLoggingStatus")].write(value.bucketLoggingStatus, writingClosure: S3ClientTypes.BucketLoggingStatus.writingClosure(_:to:))
    }
}

extension PutBucketLoggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketLoggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "logging", value: nil))
            return items
        }
    }
}

extension PutBucketLoggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketLoggingInput: Swift.Equatable {
    /// The name of the bucket for which to set the logging parameters.
    /// This member is required.
    public var bucket: Swift.String?
    /// Container for logging status information.
    /// This member is required.
    public var bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash of the PutBucketLogging request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketLoggingStatus = bucketLoggingStatus
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketLoggingInputBody: Swift.Equatable {
    let bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus?
}

extension PutBucketLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketLoggingStatus = "BucketLoggingStatus"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketLoggingStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLoggingStatus.self, forKey: .bucketLoggingStatus)
        bucketLoggingStatus = bucketLoggingStatusDecoded
    }
}

extension PutBucketLoggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketLoggingOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketLoggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketMetricsConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    static func writingClosure(_ value: PutBucketMetricsConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("MetricsConfiguration")].write(value.metricsConfiguration, writingClosure: S3ClientTypes.MetricsConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketMetricsConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketMetricsConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
            guard let id = id else {
                let message = "Creating a URL Query Item failed. id is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            items.append(idQueryItem)
            return items
        }
    }
}

extension PutBucketMetricsConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketMetricsConfigurationInput: Swift.Equatable {
    /// The name of the bucket for which the metrics configuration is set.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies the metrics configuration.
    /// This member is required.
    public var metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.metricsConfiguration = metricsConfiguration
    }
}

struct PutBucketMetricsConfigurationInputBody: Swift.Equatable {
    let metricsConfiguration: S3ClientTypes.MetricsConfiguration?
}

extension PutBucketMetricsConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
    }
}

extension PutBucketMetricsConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketMetricsConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketNotificationConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationConfiguration = "NotificationConfiguration"
    }

    static func writingClosure(_ value: PutBucketNotificationConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("NotificationConfiguration")].write(value.notificationConfiguration, writingClosure: S3ClientTypes.NotificationConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketNotificationConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let skipDestinationValidation = skipDestinationValidation {
            items.add(Header(name: "x-amz-skip-destination-validation", value: Swift.String(skipDestinationValidation)))
        }
        return items
    }
}

extension PutBucketNotificationConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "notification", value: nil))
            return items
        }
    }
}

extension PutBucketNotificationConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketNotificationConfigurationInput: Swift.Equatable {
    /// The name of the bucket.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
    /// This member is required.
    public var notificationConfiguration: S3ClientTypes.NotificationConfiguration?
    /// Skips validation of Amazon SQS, Amazon SNS, and Lambda destinations. True or false value.
    public var skipDestinationValidation: Swift.Bool?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        notificationConfiguration: S3ClientTypes.NotificationConfiguration? = nil,
        skipDestinationValidation: Swift.Bool? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.notificationConfiguration = notificationConfiguration
        self.skipDestinationValidation = skipDestinationValidation
    }
}

struct PutBucketNotificationConfigurationInputBody: Swift.Equatable {
    let notificationConfiguration: S3ClientTypes.NotificationConfiguration?
}

extension PutBucketNotificationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationConfiguration = "NotificationConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
    }
}

extension PutBucketNotificationConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketNotificationConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketNotificationConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketOwnershipControlsInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    static func writingClosure(_ value: PutBucketOwnershipControlsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("OwnershipControls")].write(value.ownershipControls, writingClosure: S3ClientTypes.OwnershipControls.writingClosure(_:to:))
    }
}

extension PutBucketOwnershipControlsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketOwnershipControlsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
            return items
        }
    }
}

extension PutBucketOwnershipControlsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketOwnershipControlsInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose OwnershipControls you want to set.
    /// This member is required.
    public var bucket: Swift.String?
    /// The MD5 hash of the OwnershipControls request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The OwnershipControls (BucketOwnerEnforced, BucketOwnerPreferred, or ObjectWriter) that you want to apply to this Amazon S3 bucket.
    /// This member is required.
    public var ownershipControls: S3ClientTypes.OwnershipControls?

    public init(
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.ownershipControls = ownershipControls
    }
}

struct PutBucketOwnershipControlsInputBody: Swift.Equatable {
    let ownershipControls: S3ClientTypes.OwnershipControls?
}

extension PutBucketOwnershipControlsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownershipControlsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnershipControls.self, forKey: .ownershipControls)
        ownershipControls = ownershipControlsDecoded
    }
}

extension PutBucketOwnershipControlsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketOwnershipControlsOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketPolicyInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    static func writingClosure(_ value: PutBucketPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Policy")].write(value.policy)
    }
}

extension PutBucketPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess {
            items.add(Header(name: "x-amz-confirm-remove-self-bucket-access", value: Swift.String(confirmRemoveSelfBucketAccess)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketPolicyInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "policy", value: nil))
            return items
        }
    }
}

extension PutBucketPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketPolicyInput: Swift.Equatable {
    /// The name of the bucket. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future. This functionality is not supported for directory buckets.
    public var confirmRemoveSelfBucketAccess: Swift.Bool?
    /// The MD5 hash of the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?
    /// The bucket policy as a JSON document. For directory buckets, the only IAM action supported in the bucket policy is s3express:CreateSession.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        confirmRemoveSelfBucketAccess: Swift.Bool? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.policy = policy
    }
}

struct PutBucketPolicyInputBody: Swift.Equatable {
    let policy: Swift.String?
}

extension PutBucketPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutBucketPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketPolicyOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketReplicationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    static func writingClosure(_ value: PutBucketReplicationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ReplicationConfiguration")].write(value.replicationConfiguration, writingClosure: S3ClientTypes.ReplicationConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketReplicationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let token = token {
            items.add(Header(name: "x-amz-bucket-object-lock-token", value: Swift.String(token)))
        }
        return items
    }
}

extension PutBucketReplicationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "replication", value: nil))
            return items
        }
    }
}

extension PutBucketReplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketReplicationInput: Swift.Equatable {
    /// The name of the bucket
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    /// This member is required.
    public var replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
    /// A token to allow Object Lock to be enabled for an existing bucket.
    public var token: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.replicationConfiguration = replicationConfiguration
        self.token = token
    }
}

struct PutBucketReplicationInputBody: Swift.Equatable {
    let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
}

extension PutBucketReplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationConfiguration.self, forKey: .replicationConfiguration)
        replicationConfiguration = replicationConfigurationDecoded
    }
}

extension PutBucketReplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketReplicationOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketReplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketRequestPaymentInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestPaymentConfiguration = "RequestPaymentConfiguration"
    }

    static func writingClosure(_ value: PutBucketRequestPaymentInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("RequestPaymentConfiguration")].write(value.requestPaymentConfiguration, writingClosure: S3ClientTypes.RequestPaymentConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketRequestPaymentInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketRequestPaymentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "requestPayment", value: nil))
            return items
        }
    }
}

extension PutBucketRequestPaymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketRequestPaymentInput: Swift.Equatable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for Payer.
    /// This member is required.
    public var requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.requestPaymentConfiguration = requestPaymentConfiguration
    }
}

struct PutBucketRequestPaymentInputBody: Swift.Equatable {
    let requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration?
}

extension PutBucketRequestPaymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestPaymentConfiguration = "RequestPaymentConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestPaymentConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RequestPaymentConfiguration.self, forKey: .requestPaymentConfiguration)
        requestPaymentConfiguration = requestPaymentConfigurationDecoded
    }
}

extension PutBucketRequestPaymentOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketRequestPaymentOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketRequestPaymentOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketTaggingInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    static func writingClosure(_ value: PutBucketTaggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Tagging")].write(value.tagging, writingClosure: S3ClientTypes.Tagging.writingClosure(_:to:))
    }
}

extension PutBucketTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            return items
        }
    }
}

extension PutBucketTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketTaggingInput: Swift.Equatable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for the TagSet and Tag elements.
    /// This member is required.
    public var tagging: S3ClientTypes.Tagging?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        tagging: S3ClientTypes.Tagging? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.tagging = tagging
    }
}

struct PutBucketTaggingInputBody: Swift.Equatable {
    let tagging: S3ClientTypes.Tagging?
}

extension PutBucketTaggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
    }
}

extension PutBucketTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketTaggingOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketVersioningInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versioningConfiguration = "VersioningConfiguration"
    }

    static func writingClosure(_ value: PutBucketVersioningInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("VersioningConfiguration")].write(value.versioningConfiguration, writingClosure: S3ClientTypes.VersioningConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketVersioningInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = mfa {
            items.add(Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        return items
    }
}

extension PutBucketVersioningInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "versioning", value: nil))
            return items
        }
    }
}

extension PutBucketVersioningInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketVersioningInput: Swift.Equatable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// >The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
    public var mfa: Swift.String?
    /// Container for setting the versioning state.
    /// This member is required.
    public var versioningConfiguration: S3ClientTypes.VersioningConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mfa: Swift.String? = nil,
        versioningConfiguration: S3ClientTypes.VersioningConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.mfa = mfa
        self.versioningConfiguration = versioningConfiguration
    }
}

struct PutBucketVersioningInputBody: Swift.Equatable {
    let versioningConfiguration: S3ClientTypes.VersioningConfiguration?
}

extension PutBucketVersioningInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versioningConfiguration = "VersioningConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
    }
}

extension PutBucketVersioningOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketVersioningOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketVersioningOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutBucketWebsiteInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case websiteConfiguration = "WebsiteConfiguration"
    }

    static func writingClosure(_ value: PutBucketWebsiteInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("WebsiteConfiguration")].write(value.websiteConfiguration, writingClosure: S3ClientTypes.WebsiteConfiguration.writingClosure(_:to:))
    }
}

extension PutBucketWebsiteInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketWebsiteInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "website", value: nil))
            return items
        }
    }
}

extension PutBucketWebsiteInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBucketWebsiteInput: Swift.Equatable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for the request.
    /// This member is required.
    public var websiteConfiguration: S3ClientTypes.WebsiteConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        websiteConfiguration: S3ClientTypes.WebsiteConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.websiteConfiguration = websiteConfiguration
    }
}

struct PutBucketWebsiteInputBody: Swift.Equatable {
    let websiteConfiguration: S3ClientTypes.WebsiteConfiguration?
}

extension PutBucketWebsiteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case websiteConfiguration = "WebsiteConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let websiteConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.WebsiteConfiguration.self, forKey: .websiteConfiguration)
        websiteConfiguration = websiteConfigurationDecoded
    }
}

extension PutBucketWebsiteOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutBucketWebsiteOutput: Swift.Equatable {

    public init() { }
}

enum PutBucketWebsiteOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectAclInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    static func writingClosure(_ value: PutObjectAclInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessControlPolicy")].write(value.accessControlPolicy, writingClosure: S3ClientTypes.AccessControlPolicy.writingClosure(_:to:))
    }
}

extension PutObjectAclInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = grantWrite {
            items.add(Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectAclInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "acl", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension PutObjectAclInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct PutObjectAclInput: Swift.Equatable {
    /// Contains the elements that set the ACL permissions for an object per grantee.
    public var accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// The canned ACL to apply to the object. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL).
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The bucket name that contains the object to which you want to attach the ACL. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.>](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL. This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Key for which the PUT action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.accessControlPolicy = accessControlPolicy
        self.acl = acl
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct PutObjectAclInputBody: Swift.Equatable {
    let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
}

extension PutObjectAclInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlPolicyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlPolicy.self, forKey: .accessControlPolicy)
        accessControlPolicy = accessControlPolicyDecoded
    }
}

extension PutObjectAclOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectAclOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

enum PutObjectAclOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "NoSuchKey": return try await NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectInput(acl: \(Swift.String(describing: acl)), body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension PutObjectInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    static func writingClosure(_ value: PutObjectInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Body")].write(value.body)
    }
}

extension PutObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = bucketKeyEnabled {
            items.add(Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = cacheControl {
            items.add(Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let checksumCRC32 = checksumCRC32 {
            items.add(Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = checksumCRC32C {
            items.add(Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = checksumSHA1 {
            items.add(Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = checksumSHA256 {
            items.add(Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentDisposition = contentDisposition {
            items.add(Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = contentEncoding {
            items.add(Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = contentLanguage {
            items.add(Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentLength = contentLength {
            items.add(Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let contentType = contentType {
            items.add(Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expires = expires {
            items.add(Header(name: "Expires", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: expires))))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockLegalHoldStatus = objectLockLegalHoldStatus {
            items.add(Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = objectLockMode {
            items.add(Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = objectLockRetainUntilDate {
            items.add(Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = ssekmsEncryptionContext {
            items.add(Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = ssekmsKeyId {
            items.add(Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = serverSideEncryption {
            items.add(Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = storageClass {
            items.add(Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = tagging {
            items.add(Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let websiteRedirectLocation = websiteRedirectLocation {
            items.add(Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension PutObjectInput {
    public func presignURL(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> ClientRuntime.URL? {
        let serviceName = "S3"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        var operation = ClientRuntime.OperationStack<PutObjectInput, PutObjectOutput>(id: "putObject")
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutput>())
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.serviceSpecific.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.serviceSpecific.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.serviceSpecific.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.serviceSpecific.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.serviceSpecific.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.serviceSpecific.useGlobalEndpoint ?? false)
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware<PutObjectOutput>(endpointResolver: config.serviceSpecific.endpointResolver, endpointParams: endpointParams))
        operation.serializeStep.intercept(position: .after, middleware: PutObjectPresignedURLMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: ClientRuntime.RetryMiddleware<ClientRuntime.DefaultRetryStrategy, AWSClientRuntime.AWSRetryErrorInfoProvider, PutObjectOutput>(options: config.retryStrategyOptions))
        let sigv4Config = AWSClientRuntime.SigV4Config(signatureType: .requestQueryParams, useDoubleURIEncode: false, shouldNormalizeURIPath: false, expiration: expiration, unsignedBody: true, signingAlgorithm: .sigv4)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware<PutObjectOutput>(config: sigv4Config))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware<PutObjectOutput>(responseClosure(decoder: decoder), responseErrorClosure(PutObjectOutputError.self, decoder: decoder)))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.LoggerMiddleware<PutObjectOutput>(clientLogMode: config.clientLogMode))
        let presignedRequestBuilder = try await operation.presignedRequest(context: context, input: input, output: PutObjectOutput(), next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build(), let presignedURL = builtRequest.endpoint.url else {
            return nil
        }
        return presignedURL
    }
}

extension PutObjectInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> ClientRuntime.SdkHttpRequest? {
        let serviceName = "S3"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        var operation = ClientRuntime.OperationStack<PutObjectInput, PutObjectOutput>(id: "putObject")
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutput>())
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.serviceSpecific.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.serviceSpecific.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.serviceSpecific.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.serviceSpecific.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.serviceSpecific.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.serviceSpecific.useGlobalEndpoint ?? false)
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware<PutObjectOutput>(endpointResolver: config.serviceSpecific.endpointResolver, endpointParams: endpointParams))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromConfig(serviceID: serviceName, version: "1.0", config: config)))
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<PutObjectInput, PutObjectOutput>())
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.QueryItemMiddleware<PutObjectInput, PutObjectOutput>())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<PutObjectInput, PutObjectOutput>(contentType: "application/octet-stream"))
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.BlobStreamBodyMiddleware<PutObjectInput, PutObjectOutput>(keyPath: \.body))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: ClientRuntime.RetryMiddleware<ClientRuntime.DefaultRetryStrategy, AWSClientRuntime.AWSRetryErrorInfoProvider, PutObjectOutput>(options: config.retryStrategyOptions))
        let sigv4Config = AWSClientRuntime.SigV4Config(useDoubleURIEncode: false, shouldNormalizeURIPath: false, expiration: expiration, signedBodyHeader: .contentSha256, unsignedBody: false, signingAlgorithm: .sigv4)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware<PutObjectOutput>(config: sigv4Config))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware<PutObjectOutput>(responseClosure(decoder: decoder), responseErrorClosure(PutObjectOutputError.self, decoder: decoder)))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.LoggerMiddleware<PutObjectOutput>(clientLogMode: config.clientLogMode))
        let presignedRequestBuilder = try await operation.presignedRequest(context: context, input: input, output: PutObjectOutput(), next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build() else {
            return nil
        }
        return builtRequest
    }
}

public struct PutObjectPresignedURLMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectPresignedURLMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<PutObjectOutput>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        let metadata = input.operationInput.metadata ?? [:]
        for (metadataKey, metadataValue) in metadata {
            let queryItem = URLQueryItem(
                name: "x-amz-meta-\(metadataKey.urlPercentEncoding())",
                value: metadataValue.urlPercentEncoding()
            )
            input.builder.withQueryItem(queryItem)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectOutput>
    public typealias Context = ClientRuntime.HttpContext
}

extension PutObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "PutObject"))
            return items
        }
    }
}

extension PutObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct PutObjectInput: Swift.Equatable {
    /// The canned ACL to apply to the object. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL) in the Amazon S3 User Guide. When adding a new object, you can use headers to grant ACL-based permissions to individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These permissions are then added to the ACL on the object. By default, all objects are private. Only the owner has full access control. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) and [Managing ACLs Using the REST API](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html) in the Amazon S3 User Guide. If the bucket that you're uploading objects to uses the bucket owner enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect permissions. Buckets that use this setting only accept PUT requests that don't specify an ACL or PUT requests that specify bucket owner full control ACLs, such as the bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed in the XML format. PUT requests that contain other ACLs (for example, custom grants to certain Amazon Web Services accounts) fail and return a 400 error with the error code AccessControlListNotSupported. For more information, see [ Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// Object data.
    public var body: ClientRuntime.ByteStream?
    /// The bucket name to which the PUT action was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Specifying this header with a PUT action doesn’t affect bucket-level settings for S3 Bucket Key. This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Can be used to specify caching behavior along the request/reply chain. For more information, see [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9).
    public var cacheControl: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object. For more information, see [https://www.rfc-editor.org/rfc/rfc6266#section-4](https://www.rfc-editor.org/rfc/rfc6266#section-4).
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding).
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length](https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length).
    public var contentLength: Swift.Int?
    /// The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see [REST Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html). The Content-MD5 header is required for any request to upload an object with a retention period configured using Amazon S3 Object Lock. For more information about Amazon S3 Object Lock, see [Amazon S3 Object Lock Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// A standard MIME type describing the format of the contents. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type](https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type).
    public var contentType: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable. For more information, see [https://www.rfc-editor.org/rfc/rfc7234#section-5.3](https://www.rfc-editor.org/rfc/rfc7234#section-5.3).
    public var expires: ClientRuntime.Date?
    /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to read the object data and its metadata.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the object ACL.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to write the ACL for the applicable object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Object key for which the PUT action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// Specifies whether a legal hold will be applied to this object. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that you want to apply to this object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm that was used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). General purpose buckets - You have four mutually exclusive options to protect data using server-side encryption in Amazon S3, depending on how you choose to manage the encryption keys. Specifically, the encryption key options are Amazon S3 managed keys (SSE-S3), Amazon Web Services KMS keys (SSE-KMS or DSSE-KMS), and customer-provided keys (SSE-C). Amazon S3 encrypts data with server-side encryption by using Amazon S3 managed keys (SSE-S3) by default. You can optionally tell Amazon S3 to encrypt data at rest by using server-side encryption with other key options. For more information, see [Using Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the Amazon S3 User Guide. Directory buckets - For directory buckets, only the server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) value is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject or CopyObject operations on this object. This value must be explicitly added during CopyObject operations. This functionality is not supported for directory buckets.
    public var ssekmsEncryptionContext: Swift.String?
    /// If x-amz-server-side-encryption has a valid value of aws:kms or aws:kms:dsse, this header specifies the ID (Key ID, Key ARN, or Key Alias) of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. If you specify x-amz-server-side-encryption:aws:kms or x-amz-server-side-encryption:aws:kms:dsse, but do not provide x-amz-server-side-encryption-aws-kms-key-id, Amazon S3 uses the Amazon Web Services managed key (aws/s3) to protect the data. If the KMS key does not exist in the same account that's issuing the command, you must use the full ARN and not just the ID. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide.
    ///
    /// * For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects.
    ///
    /// * Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, "Key1=Value1") This functionality is not supported for directory buckets.
    public var tagging: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see [Object Key and Metadata](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html) in the Amazon S3 User Guide. In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket: x-amz-website-redirect-location: /anotherPage.html In the following example, the request header sets the object redirect to another website: x-amz-website-redirect-location: http://www.example.com/ For more information about website hosting in Amazon S3, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) and [How to Configure Website Page Redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentMD5: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.body = body
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct PutObjectInputBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension PutObjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.data("".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension PutObjectLegalHoldInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    static func writingClosure(_ value: PutObjectLegalHoldInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("LegalHold")].write(value.legalHold, writingClosure: S3ClientTypes.ObjectLockLegalHold.writingClosure(_:to:))
    }
}

extension PutObjectLegalHoldInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectLegalHoldInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "legal-hold", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension PutObjectLegalHoldInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct PutObjectLegalHoldInput: Swift.Equatable {
    /// The bucket name containing the object that you want to place a legal hold on. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object that you want to place a legal hold on.
    /// This member is required.
    public var key: Swift.String?
    /// Container element for the legal hold configuration you want to apply to the specified object.
    public var legalHold: S3ClientTypes.ObjectLockLegalHold?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID of the object that you want to place a legal hold on.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.legalHold = legalHold
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct PutObjectLegalHoldInputBody: Swift.Equatable {
    let legalHold: S3ClientTypes.ObjectLockLegalHold?
}

extension PutObjectLegalHoldInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let legalHoldDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHold.self, forKey: .legalHold)
        legalHold = legalHoldDecoded
    }
}

extension PutObjectLegalHoldOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectLegalHoldOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

enum PutObjectLegalHoldOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectLockConfigurationInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    static func writingClosure(_ value: PutObjectLockConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ObjectLockConfiguration")].write(value.objectLockConfiguration, writingClosure: S3ClientTypes.ObjectLockConfiguration.writingClosure(_:to:))
    }
}

extension PutObjectLockConfigurationInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let token = token {
            items.add(Header(name: "x-amz-bucket-object-lock-token", value: Swift.String(token)))
        }
        return items
    }
}

extension PutObjectLockConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "object-lock", value: nil))
            return items
        }
    }
}

extension PutObjectLockConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutObjectLockConfigurationInput: Swift.Equatable {
    /// The bucket whose Object Lock configuration you want to create or replace.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The Object Lock configuration that you want to apply to the specified bucket.
    public var objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// A token to allow Object Lock to be enabled for an existing bucket.
    public var token: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.objectLockConfiguration = objectLockConfiguration
        self.requestPayer = requestPayer
        self.token = token
    }
}

struct PutObjectLockConfigurationInputBody: Swift.Equatable {
    let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
}

extension PutObjectLockConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockConfiguration.self, forKey: .objectLockConfiguration)
        objectLockConfiguration = objectLockConfigurationDecoded
    }
}

extension PutObjectLockConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectLockConfigurationOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

enum PutObjectLockConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension PutObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            self.checksumCRC32 = checksumCRC32HeaderValue
        } else {
            self.checksumCRC32 = nil
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            self.checksumCRC32C = checksumCRC32CHeaderValue
        } else {
            self.checksumCRC32C = nil
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            self.checksumSHA1 = checksumSHA1HeaderValue
        } else {
            self.checksumSHA1 = nil
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            self.checksumSHA256 = checksumSHA256HeaderValue
        } else {
            self.checksumSHA256 = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        } else {
            self.ssekmsEncryptionContext = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct PutObjectOutput: Swift.Equatable {
    /// Indicates whether the uploaded object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag for the uploaded object. General purpose buckets - To ensure that data is not corrupted traversing the network, for objects where the ETag is the MD5 digest of the object, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value. Directory buckets - The ETag for the object in a directory bucket isn't the MD5 digest of the object.
    public var eTag: Swift.String?
    /// If the expiration is configured for the object (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)) in the Amazon S3 User Guide, the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide information about object expiration. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject or CopyObject operations on this object. This functionality is not supported for directory buckets.
    public var ssekmsEncryptionContext: Swift.String?
    /// If x-amz-server-side-encryption has a valid value of aws:kms or aws:kms:dsse, this header indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the object. If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response. When you enable versioning for a bucket, if Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects. For more information about versioning, see [Adding Objects to Versioning-Enabled Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html) in the Amazon S3 User Guide. For information about returning the versioning state of a bucket, see [GetBucketVersioning](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html). This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

enum PutObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectRetentionInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    static func writingClosure(_ value: PutObjectRetentionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Retention")].write(value.retention, writingClosure: S3ClientTypes.ObjectLockRetention.writingClosure(_:to:))
    }
}

extension PutObjectRetentionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let bypassGovernanceRetention = bypassGovernanceRetention {
            items.add(Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectRetentionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "retention", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension PutObjectRetentionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct PutObjectRetentionInput: Swift.Equatable {
    /// The bucket name that contains the object you want to apply this Object Retention configuration to. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates whether this action should bypass Governance-mode restrictions.
    public var bypassGovernanceRetention: Swift.Bool?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object that you want to apply this Object Retention configuration to.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The container element for the Object Retention configuration.
    public var retention: S3ClientTypes.ObjectLockRetention?
    /// The version ID for the object that you want to apply this Object Retention configuration to.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        retention: S3ClientTypes.ObjectLockRetention? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.retention = retention
        self.versionId = versionId
    }
}

struct PutObjectRetentionInputBody: Swift.Equatable {
    let retention: S3ClientTypes.ObjectLockRetention?
}

extension PutObjectRetentionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetention.self, forKey: .retention)
        retention = retentionDecoded
    }
}

extension PutObjectRetentionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectRetentionOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

enum PutObjectRetentionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutObjectTaggingInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    static func writingClosure(_ value: PutObjectTaggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Tagging")].write(value.tagging, writingClosure: S3ClientTypes.Tagging.writingClosure(_:to:))
    }
}

extension PutObjectTaggingInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectTaggingInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension PutObjectTaggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct PutObjectTaggingInput: Swift.Equatable {
    /// The bucket name containing the object. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Name of the object key.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Container for the TagSet and Tag elements
    /// This member is required.
    public var tagging: S3ClientTypes.Tagging?
    /// The versionId of the object that the tag-set will be added to.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        tagging: S3ClientTypes.Tagging? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.tagging = tagging
        self.versionId = versionId
    }
}

struct PutObjectTaggingInputBody: Swift.Equatable {
    let tagging: S3ClientTypes.Tagging?
}

extension PutObjectTaggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
    }
}

extension PutObjectTaggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct PutObjectTaggingOutput: Swift.Equatable {
    /// The versionId of the object the tag-set was added to.
    public var versionId: Swift.String?

    public init(
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

enum PutObjectTaggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension PutPublicAccessBlockInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    static func writingClosure(_ value: PutPublicAccessBlockInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("PublicAccessBlockConfiguration")].write(value.publicAccessBlockConfiguration, writingClosure: S3ClientTypes.PublicAccessBlockConfiguration.writingClosure(_:to:))
    }
}

extension PutPublicAccessBlockInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutPublicAccessBlockInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
            return items
        }
    }
}

extension PutPublicAccessBlockInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutPublicAccessBlockInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to set.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash of the PutPublicAccessBlock request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the Amazon S3 User Guide.
    /// This member is required.
    public var publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

struct PutPublicAccessBlockInputBody: Swift.Equatable {
    let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?
}

extension PutPublicAccessBlockInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PublicAccessBlockConfiguration.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
    }
}

extension PutPublicAccessBlockOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutPublicAccessBlockOutput: Swift.Equatable {

    public init() { }
}

enum PutPublicAccessBlockOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.QueueConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case queueArn = "Queue"
    }

    static func writingClosure(_ value: S3ClientTypes.QueueConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Event")].writeList(value.events, memberWritingClosure: S3ClientTypes.Event.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.NotificationConfigurationFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("Queue")].write(value.queueArn)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for enumContainer0 in eventsContainer {
                        eventsBuffer?.append(enumContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
    public struct QueueConfiguration: Swift.Equatable {
        /// A collection of bucket events for which to send notifications
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type.
        /// This member is required.
        public var queueArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            queueArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.queueArn = queueArn
        }
    }

}

extension S3ClientTypes {
    public enum QuoteFields: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case asneeded
        case sdkUnknown(Swift.String)

        public static var allCases: [QuoteFields] {
            return [
                .always,
                .asneeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .asneeded: return "ASNEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QuoteFields(rawValue: rawValue) ?? QuoteFields.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RecordsEvent: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payload = "Payload"
    }

    static func writingClosure(_ value: S3ClientTypes.RecordsEvent?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Payload")].write(value.payload)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.payload) {
            do {
                let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
                payload = payloadDecoded
            } catch {
                payload = "".data(using: .utf8)
            }
        } else {
            payload = nil
        }
    }
}

extension S3ClientTypes {
    /// The container for the records event.
    public struct RecordsEvent: Swift.Equatable {
        /// The byte array of partial, one or more result records.
        public var payload: ClientRuntime.Data?

        public init(
            payload: ClientRuntime.Data? = nil
        )
        {
            self.payload = payload
        }
    }

}

extension S3ClientTypes.Redirect: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostName = "HostName"
        case httpRedirectCode = "HttpRedirectCode"
        case `protocol` = "Protocol"
        case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
        case replaceKeyWith = "ReplaceKeyWith"
    }

    static func writingClosure(_ value: S3ClientTypes.Redirect?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("HostName")].write(value.hostName)
        try writer[.init("HttpRedirectCode")].write(value.httpRedirectCode)
        try writer[.init("Protocol")].write(value.`protocol`)
        try writer[.init("ReplaceKeyPrefixWith")].write(value.replaceKeyPrefixWith)
        try writer[.init("ReplaceKeyWith")].write(value.replaceKeyWith)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostName)
        hostName = hostNameDecoded
        let httpRedirectCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpRedirectCode)
        httpRedirectCode = httpRedirectCodeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let replaceKeyPrefixWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replaceKeyPrefixWith)
        replaceKeyPrefixWith = replaceKeyPrefixWithDecoded
        let replaceKeyWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replaceKeyWith)
        replaceKeyWith = replaceKeyWithDecoded
    }
}

extension S3ClientTypes {
    /// Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
    public struct Redirect: Swift.Equatable {
        /// The host name to use in the redirect request.
        public var hostName: Swift.String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public var httpRedirectCode: Swift.String?
        /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: S3ClientTypes.ModelProtocol?
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyPrefixWith: Swift.String?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyWith: Swift.String?

        public init(
            hostName: Swift.String? = nil,
            httpRedirectCode: Swift.String? = nil,
            `protocol`: S3ClientTypes.ModelProtocol? = nil,
            replaceKeyPrefixWith: Swift.String? = nil,
            replaceKeyWith: Swift.String? = nil
        )
        {
            self.hostName = hostName
            self.httpRedirectCode = httpRedirectCode
            self.`protocol` = `protocol`
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.replaceKeyWith = replaceKeyWith
        }
    }

}

extension S3ClientTypes.RedirectAllRequestsTo: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostName = "HostName"
        case `protocol` = "Protocol"
    }

    static func writingClosure(_ value: S3ClientTypes.RedirectAllRequestsTo?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("HostName")].write(value.hostName)
        try writer[.init("Protocol")].write(value.`protocol`)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostName)
        hostName = hostNameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
    public struct RedirectAllRequestsTo: Swift.Equatable {
        /// Name of the host where requests are redirected.
        /// This member is required.
        public var hostName: Swift.String?
        /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: S3ClientTypes.ModelProtocol?

        public init(
            hostName: Swift.String? = nil,
            `protocol`: S3ClientTypes.ModelProtocol? = nil
        )
        {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }
    }

}

extension S3ClientTypes.ReplicaModifications: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicaModifications?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicaModificationsStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when Filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas. If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed.
    public struct ReplicaModifications: Swift.Equatable {
        /// Specifies whether Amazon S3 replicates modifications on replicas.
        /// This member is required.
        public var status: S3ClientTypes.ReplicaModificationsStatus?

        public init(
            status: S3ClientTypes.ReplicaModificationsStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ReplicaModificationsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaModificationsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicaModificationsStatus(rawValue: rawValue) ?? ReplicaModificationsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
        case rules = "Rule"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Role")].write(value.role)
        try writer[.init("Rule")].writeList(value.rules, memberWritingClosure: S3ClientTypes.ReplicationRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.ReplicationRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.ReplicationRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.ReplicationRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes {
    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    public struct ReplicationConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var role: Swift.String?
        /// A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
        /// This member is required.
        public var rules: [S3ClientTypes.ReplicationRule]?

        public init(
            role: Swift.String? = nil,
            rules: [S3ClientTypes.ReplicationRule]? = nil
        )
        {
            self.role = role
            self.rules = rules
        }
    }

}

extension S3ClientTypes.ReplicationRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteMarkerReplication = "DeleteMarkerReplication"
        case destination = "Destination"
        case existingObjectReplication = "ExistingObjectReplication"
        case filter = "Filter"
        case id = "ID"
        case `prefix` = "Prefix"
        case priority = "Priority"
        case sourceSelectionCriteria = "SourceSelectionCriteria"
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DeleteMarkerReplication")].write(value.deleteMarkerReplication, writingClosure: S3ClientTypes.DeleteMarkerReplication.writingClosure(_:to:))
        try writer[.init("Destination")].write(value.destination, writingClosure: S3ClientTypes.Destination.writingClosure(_:to:))
        try writer[.init("ExistingObjectReplication")].write(value.existingObjectReplication, writingClosure: S3ClientTypes.ExistingObjectReplication.writingClosure(_:to:))
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.ReplicationRuleFilter.writingClosure(_:to:))
        try writer[.init("ID")].write(value.id)
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Priority")].write(value.priority)
        try writer[.init("SourceSelectionCriteria")].write(value.sourceSelectionCriteria, writingClosure: S3ClientTypes.SourceSelectionCriteria.writingClosure(_:to:))
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationRuleFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationRuleStatus.self, forKey: .status)
        status = statusDecoded
        let sourceSelectionCriteriaDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SourceSelectionCriteria.self, forKey: .sourceSelectionCriteria)
        sourceSelectionCriteria = sourceSelectionCriteriaDecoded
        let existingObjectReplicationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExistingObjectReplication.self, forKey: .existingObjectReplication)
        existingObjectReplication = existingObjectReplicationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let deleteMarkerReplicationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DeleteMarkerReplication.self, forKey: .deleteMarkerReplication)
        deleteMarkerReplication = deleteMarkerReplicationDecoded
    }
}

extension S3ClientTypes {
    /// Specifies which Amazon S3 objects to replicate and where to store the replicas.
    public struct ReplicationRule: Swift.Equatable {
        /// Specifies whether Amazon S3 replicates delete markers. If you specify a Filter in your replication configuration, you must also include a DeleteMarkerReplication element. If your Filter includes a Tag element, the DeleteMarkerReplicationStatus must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        public var deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication?
        /// A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        /// This member is required.
        public var destination: S3ClientTypes.Destination?
        /// Optional configuration to replicate existing source bucket objects. For more information, see [Replicating Existing Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication) in the Amazon S3 User Guide.
        public var existingObjectReplication: S3ClientTypes.ExistingObjectReplication?
        /// A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
        public var filter: S3ClientTypes.ReplicationRuleFilter?
        /// A unique identifier for the rule. The maximum value is 255 characters.
        public var id: Swift.String?
        /// An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        @available(*, deprecated)
        public var `prefix`: Swift.String?
        /// The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the Amazon S3 User Guide.
        public var priority: Swift.Int?
        /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS).
        public var sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria?
        /// Specifies whether the rule is enabled.
        /// This member is required.
        public var status: S3ClientTypes.ReplicationRuleStatus?

        public init(
            deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication? = nil,
            destination: S3ClientTypes.Destination? = nil,
            existingObjectReplication: S3ClientTypes.ExistingObjectReplication? = nil,
            filter: S3ClientTypes.ReplicationRuleFilter? = nil,
            id: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            priority: Swift.Int? = nil,
            sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria? = nil,
            status: S3ClientTypes.ReplicationRuleStatus? = nil
        )
        {
            self.deleteMarkerReplication = deleteMarkerReplication
            self.destination = destination
            self.existingObjectReplication = existingObjectReplication
            self.filter = filter
            self.id = id
            self.`prefix` = `prefix`
            self.priority = priority
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.status = status
        }
    }

}

extension S3ClientTypes.ReplicationRuleAndOperator: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `prefix` = "Prefix"
        case tags = "Tag"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationRuleAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("Tag")].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes {
    /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:
    ///
    /// * If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.
    ///
    /// * If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.
    public struct ReplicationRuleAndOperator: Swift.Equatable {
        /// An object key name prefix that identifies the subset of objects to which the rule applies.
        public var `prefix`: Swift.String?
        /// An array of tags containing key and value pairs.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }

}

extension S3ClientTypes.ReplicationRuleFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case `prefix` = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationRuleFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        switch value {
            case let .and(and):
                try writer[.init("And")].write(and, writingClosure: S3ClientTypes.ReplicationRuleAndOperator.writingClosure(_:to:))
            case let .`prefix`(`prefix`):
                try writer[.init("Prefix")].write(`prefix`)
            case let .tag(tag):
                try writer[.init("Tag")].write(tag, writingClosure: S3ClientTypes.Tag.writingClosure(_:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer[.init("sdkUnknown")].write(sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let key = containerValues.allKeys.first
        switch key {
            case .`prefix`:
                let prefixDecoded = try containerValues.decode(Swift.String.self, forKey: .prefix)
                self = .prefix(prefixDecoded)
            case .tag:
                let tagDecoded = try containerValues.decode(S3ClientTypes.Tag.self, forKey: .tag)
                self = .tag(tagDecoded)
            case .and:
                let andDecoded = try containerValues.decode(S3ClientTypes.ReplicationRuleAndOperator.self, forKey: .and)
                self = .and(andDecoded)
            default:
                self = .sdkUnknown("")
        }
    }
}

extension S3ClientTypes {
    /// A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
    public enum ReplicationRuleFilter: Swift.Equatable {
        /// An object key name prefix that identifies the subset of objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        case `prefix`(Swift.String)
        /// A container for specifying a tag key and value. The rule applies only to objects that have the tag in their tag set.
        case tag(S3ClientTypes.Tag)
        /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:
        ///
        /// * If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.
        ///
        /// * If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.
        case and(S3ClientTypes.ReplicationRuleAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes {
    public enum ReplicationRuleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationRuleStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationRuleStatus(rawValue: rawValue) ?? ReplicationRuleStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case completed
        case failed
        case pending
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationStatus] {
            return [
                .complete,
                .completed,
                .failed,
                .pending,
                .replica,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationStatus(rawValue: rawValue) ?? ReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationTime: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case time = "Time"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationTime?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
        try writer[.init("Time")].write(value.time, writingClosure: S3ClientTypes.ReplicationTimeValue.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeStatus.self, forKey: .status)
        status = statusDecoded
        let timeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeValue.self, forKey: .time)
        time = timeDecoded
    }
}

extension S3ClientTypes {
    /// A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
    public struct ReplicationTime: Swift.Equatable {
        /// Specifies whether the replication time is enabled.
        /// This member is required.
        public var status: S3ClientTypes.ReplicationTimeStatus?
        /// A container specifying the time by which replication should be complete for all objects and operations on objects.
        /// This member is required.
        public var time: S3ClientTypes.ReplicationTimeValue?

        public init(
            status: S3ClientTypes.ReplicationTimeStatus? = nil,
            time: S3ClientTypes.ReplicationTimeValue? = nil
        )
        {
            self.status = status
            self.time = time
        }
    }

}

extension S3ClientTypes {
    public enum ReplicationTimeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationTimeStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationTimeStatus(rawValue: rawValue) ?? ReplicationTimeStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationTimeValue: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minutes = "Minutes"
    }

    static func writingClosure(_ value: S3ClientTypes.ReplicationTimeValue?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Minutes")].write(value.minutes)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minutes)
        minutes = minutesDecoded
    }
}

extension S3ClientTypes {
    /// A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics EventThreshold.
    public struct ReplicationTimeValue: Swift.Equatable {
        /// Contains an integer specifying time in minutes. Valid value: 15
        public var minutes: Swift.Int?

        public init(
            minutes: Swift.Int? = nil
        )
        {
            self.minutes = minutes
        }
    }

}

extension S3ClientTypes {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public enum RequestCharged: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestCharged] {
            return [
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestCharged(rawValue: rawValue) ?? RequestCharged.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public enum RequestPayer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestPayer] {
            return [
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestPayer(rawValue: rawValue) ?? RequestPayer.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RequestPaymentConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payer = "Payer"
    }

    static func writingClosure(_ value: S3ClientTypes.RequestPaymentConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Payer")].write(value.payer)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Payer.self, forKey: .payer)
        payer = payerDecoded
    }
}

extension S3ClientTypes {
    /// Container for Payer.
    public struct RequestPaymentConfiguration: Swift.Equatable {
        /// Specifies who pays for the download and request fees.
        /// This member is required.
        public var payer: S3ClientTypes.Payer?

        public init(
            payer: S3ClientTypes.Payer? = nil
        )
        {
            self.payer = payer
        }
    }

}

extension S3ClientTypes.RequestProgress: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    static func writingClosure(_ value: S3ClientTypes.RequestProgress?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Enabled")].write(value.enabled)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension S3ClientTypes {
    /// Container for specifying if periodic QueryProgress messages should be sent.
    public struct RequestProgress: Swift.Equatable {
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension RestoreObjectInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreRequest = "RestoreRequest"
    }

    static func writingClosure(_ value: RestoreObjectInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("RestoreRequest")].write(value.restoreRequest, writingClosure: S3ClientTypes.RestoreRequest.writingClosure(_:to:))
    }
}

extension RestoreObjectInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension RestoreObjectInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "restore", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "RestoreObject"))
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension RestoreObjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct RestoreObjectInput: Swift.Equatable {
    /// The bucket name containing the object to restore. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Container for restore job parameters.
    public var restoreRequest: S3ClientTypes.RestoreRequest?
    /// VersionId used to reference a specific version of the object.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        restoreRequest: S3ClientTypes.RestoreRequest? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.restoreRequest = restoreRequest
        self.versionId = versionId
    }
}

struct RestoreObjectInputBody: Swift.Equatable {
    let restoreRequest: S3ClientTypes.RestoreRequest?
}

extension RestoreObjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreRequest = "RestoreRequest"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let restoreRequestDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreRequest.self, forKey: .restoreRequest)
        restoreRequest = restoreRequestDecoded
    }
}

extension RestoreObjectOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreOutputPathHeaderValue = httpResponse.headers.value(for: "x-amz-restore-output-path") {
            self.restoreOutputPath = restoreOutputPathHeaderValue
        } else {
            self.restoreOutputPath = nil
        }
    }
}

public struct RestoreObjectOutput: Swift.Equatable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Indicates the path in the provided S3 output location where Select results will be restored to.
    public var restoreOutputPath: Swift.String?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restoreOutputPath: Swift.String? = nil
    )
    {
        self.requestCharged = requestCharged
        self.restoreOutputPath = restoreOutputPath
    }
}

enum RestoreObjectOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            case "ObjectAlreadyInActiveTierError": return try await ObjectAlreadyInActiveTierError(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.RestoreRequest: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case days = "Days"
        case description = "Description"
        case glacierJobParameters = "GlacierJobParameters"
        case outputLocation = "OutputLocation"
        case selectParameters = "SelectParameters"
        case tier = "Tier"
        case type = "Type"
    }

    static func writingClosure(_ value: S3ClientTypes.RestoreRequest?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Days")].write(value.days)
        try writer[.init("Description")].write(value.description)
        try writer[.init("GlacierJobParameters")].write(value.glacierJobParameters, writingClosure: S3ClientTypes.GlacierJobParameters.writingClosure(_:to:))
        try writer[.init("OutputLocation")].write(value.outputLocation, writingClosure: S3ClientTypes.OutputLocation.writingClosure(_:to:))
        try writer[.init("SelectParameters")].write(value.selectParameters, writingClosure: S3ClientTypes.SelectParameters.writingClosure(_:to:))
        try writer[.init("Tier")].write(value.tier)
        try writer[.init("Type")].write(value.type)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let glacierJobParametersDecoded = try containerValues.decodeIfPresent(S3ClientTypes.GlacierJobParameters.self, forKey: .glacierJobParameters)
        glacierJobParameters = glacierJobParametersDecoded
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreRequestType.self, forKey: .type)
        type = typeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tier.self, forKey: .tier)
        tier = tierDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let selectParametersDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SelectParameters.self, forKey: .selectParameters)
        selectParameters = selectParametersDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
    }
}

extension S3ClientTypes {
    /// Container for restore job parameters.
    public struct RestoreRequest: Swift.Equatable {
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation. The Days element is required for regular restores, and must not be provided for select requests.
        public var days: Swift.Int?
        /// The optional description for the job.
        public var description: Swift.String?
        /// S3 Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public var glacierJobParameters: S3ClientTypes.GlacierJobParameters?
        /// Describes the location where the restore job's output is stored.
        public var outputLocation: S3ClientTypes.OutputLocation?
        /// Describes the parameters for Select job types.
        public var selectParameters: S3ClientTypes.SelectParameters?
        /// Retrieval tier at which the restore will be processed.
        public var tier: S3ClientTypes.Tier?
        /// Type of restore request.
        public var type: S3ClientTypes.RestoreRequestType?

        public init(
            days: Swift.Int? = nil,
            description: Swift.String? = nil,
            glacierJobParameters: S3ClientTypes.GlacierJobParameters? = nil,
            outputLocation: S3ClientTypes.OutputLocation? = nil,
            selectParameters: S3ClientTypes.SelectParameters? = nil,
            tier: S3ClientTypes.Tier? = nil,
            type: S3ClientTypes.RestoreRequestType? = nil
        )
        {
            self.days = days
            self.description = description
            self.glacierJobParameters = glacierJobParameters
            self.outputLocation = outputLocation
            self.selectParameters = selectParameters
            self.tier = tier
            self.type = type
        }
    }

}

extension S3ClientTypes {
    public enum RestoreRequestType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case select
        case sdkUnknown(Swift.String)

        public static var allCases: [RestoreRequestType] {
            return [
                .select,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .select: return "SELECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RestoreRequestType(rawValue: rawValue) ?? RestoreRequestType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RestoreStatus: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isRestoreInProgress = "IsRestoreInProgress"
        case restoreExpiryDate = "RestoreExpiryDate"
    }

    static func writingClosure(_ value: S3ClientTypes.RestoreStatus?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("IsRestoreInProgress")].write(value.isRestoreInProgress)
        try writer[.init("RestoreExpiryDate")].writeTimestamp(value.restoreExpiryDate, format: .dateTime)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isRestoreInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRestoreInProgress)
        isRestoreInProgress = isRestoreInProgressDecoded
        let restoreExpiryDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .restoreExpiryDate)
        restoreExpiryDate = restoreExpiryDateDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public struct RestoreStatus: Swift.Equatable {
        /// Specifies whether the object is currently being restored. If the object restoration is in progress, the header returns the value TRUE. For example: x-amz-optional-object-attributes: IsRestoreInProgress="true" If the object restoration has completed, the header returns the value FALSE. For example: x-amz-optional-object-attributes: IsRestoreInProgress="false", RestoreExpiryDate="2012-12-21T00:00:00.000Z" If the object hasn't been restored, there is no header response.
        public var isRestoreInProgress: Swift.Bool?
        /// Indicates when the restored copy will expire. This value is populated only if the object has already been restored. For example: x-amz-optional-object-attributes: IsRestoreInProgress="false", RestoreExpiryDate="2012-12-21T00:00:00.000Z"
        public var restoreExpiryDate: ClientRuntime.Date?

        public init(
            isRestoreInProgress: Swift.Bool? = nil,
            restoreExpiryDate: ClientRuntime.Date? = nil
        )
        {
            self.isRestoreInProgress = isRestoreInProgress
            self.restoreExpiryDate = restoreExpiryDate
        }
    }

}

extension S3ClientTypes.RoutingRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case condition = "Condition"
        case redirect = "Redirect"
    }

    static func writingClosure(_ value: S3ClientTypes.RoutingRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Condition")].write(value.condition, writingClosure: S3ClientTypes.Condition.writingClosure(_:to:))
        try writer[.init("Redirect")].write(value.redirect, writingClosure: S3ClientTypes.Redirect.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Condition.self, forKey: .condition)
        condition = conditionDecoded
        let redirectDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Redirect.self, forKey: .redirect)
        redirect = redirectDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the Amazon S3 User Guide.
    public struct RoutingRule: Swift.Equatable {
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public var condition: S3ClientTypes.Condition?
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        /// This member is required.
        public var redirect: S3ClientTypes.Redirect?

        public init(
            condition: S3ClientTypes.Condition? = nil,
            redirect: S3ClientTypes.Redirect? = nil
        )
        {
            self.condition = condition
            self.redirect = redirect
        }
    }

}

extension S3ClientTypes.S3KeyFilter: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterRules = "FilterRule"
    }

    static func writingClosure(_ value: S3ClientTypes.S3KeyFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("FilterRule")].writeList(value.filterRules, memberWritingClosure: S3ClientTypes.FilterRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filterRules) {
            let filterRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .filterRules)
            if filterRulesWrappedContainer != nil {
                let filterRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.FilterRule].self, forKey: .filterRules)
                var filterRulesBuffer:[S3ClientTypes.FilterRule]? = nil
                if let filterRulesContainer = filterRulesContainer {
                    filterRulesBuffer = [S3ClientTypes.FilterRule]()
                    for structureContainer0 in filterRulesContainer {
                        filterRulesBuffer?.append(structureContainer0)
                    }
                }
                filterRules = filterRulesBuffer
            } else {
                filterRules = []
            }
        } else {
            filterRules = nil
        }
    }
}

extension S3ClientTypes {
    /// A container for object key name prefix and suffix filtering rules.
    public struct S3KeyFilter: Swift.Equatable {
        /// A list of containers for the key-value pair that defines the criteria for the filter rule.
        public var filterRules: [S3ClientTypes.FilterRule]?

        public init(
            filterRules: [S3ClientTypes.FilterRule]? = nil
        )
        {
            self.filterRules = filterRules
        }
    }

}

extension S3ClientTypes.S3Location: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case bucketName = "BucketName"
        case cannedACL = "CannedACL"
        case encryption = "Encryption"
        case `prefix` = "Prefix"
        case storageClass = "StorageClass"
        case tagging = "Tagging"
        case userMetadata = "UserMetadata"
    }

    static func writingClosure(_ value: S3ClientTypes.S3Location?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessControlList")].writeList(value.accessControlList, memberWritingClosure: S3ClientTypes.Grant.writingClosure(_:to:), memberNodeInfo: .init("Grant"), isFlattened: false)
        try writer[.init("BucketName")].write(value.bucketName)
        try writer[.init("CannedACL")].write(value.cannedACL)
        try writer[.init("Encryption")].write(value.encryption, writingClosure: S3ClientTypes.Encryption.writingClosure(_:to:))
        try writer[.init("Prefix")].write(value.`prefix`)
        try writer[.init("StorageClass")].write(value.storageClass)
        try writer[.init("Tagging")].write(value.tagging, writingClosure: S3ClientTypes.Tagging.writingClosure(_:to:))
        try writer[.init("UserMetadata")].writeList(value.userMetadata, memberWritingClosure: S3ClientTypes.MetadataEntry.writingClosure(_:to:), memberNodeInfo: .init("MetadataEntry"), isFlattened: false)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let cannedACLDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectCannedACL.self, forKey: .cannedACL)
        cannedACL = cannedACLDecoded
        if containerValues.contains(.accessControlList) {
            struct KeyVal0{struct Grant{}}
            let accessControlListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .accessControlList)
            if let accessControlListWrappedContainer = accessControlListWrappedContainer {
                let accessControlListContainer = try accessControlListWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var accessControlListBuffer:[S3ClientTypes.Grant]? = nil
                if let accessControlListContainer = accessControlListContainer {
                    accessControlListBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in accessControlListContainer {
                        accessControlListBuffer?.append(structureContainer0)
                    }
                }
                accessControlList = accessControlListBuffer
            } else {
                accessControlList = []
            }
        } else {
            accessControlList = nil
        }
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
        if containerValues.contains(.userMetadata) {
            struct KeyVal0{struct MetadataEntry{}}
            let userMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MetadataEntry>.CodingKeys.self, forKey: .userMetadata)
            if let userMetadataWrappedContainer = userMetadataWrappedContainer {
                let userMetadataContainer = try userMetadataWrappedContainer.decodeIfPresent([S3ClientTypes.MetadataEntry].self, forKey: .member)
                var userMetadataBuffer:[S3ClientTypes.MetadataEntry]? = nil
                if let userMetadataContainer = userMetadataContainer {
                    userMetadataBuffer = [S3ClientTypes.MetadataEntry]()
                    for structureContainer0 in userMetadataContainer {
                        userMetadataBuffer?.append(structureContainer0)
                    }
                }
                userMetadata = userMetadataBuffer
            } else {
                userMetadata = []
            }
        } else {
            userMetadata = nil
        }
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes {
    /// Describes an Amazon S3 location that will receive the results of the restore request.
    public struct S3Location: Swift.Equatable {
        /// A list of grants that control access to the staged results.
        public var accessControlList: [S3ClientTypes.Grant]?
        /// The name of the bucket where the restore results will be placed.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The canned ACL to apply to the restore results.
        public var cannedACL: S3ClientTypes.ObjectCannedACL?
        /// Contains the type of server-side encryption used.
        public var encryption: S3ClientTypes.Encryption?
        /// The prefix that is prepended to the restore results for this request.
        /// This member is required.
        public var `prefix`: Swift.String?
        /// The class of storage used to store the restore results.
        public var storageClass: S3ClientTypes.StorageClass?
        /// The tag-set that is applied to the restore results.
        public var tagging: S3ClientTypes.Tagging?
        /// A list of metadata to store with the restore results in S3.
        public var userMetadata: [S3ClientTypes.MetadataEntry]?

        public init(
            accessControlList: [S3ClientTypes.Grant]? = nil,
            bucketName: Swift.String? = nil,
            cannedACL: S3ClientTypes.ObjectCannedACL? = nil,
            encryption: S3ClientTypes.Encryption? = nil,
            `prefix`: Swift.String? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            tagging: S3ClientTypes.Tagging? = nil,
            userMetadata: [S3ClientTypes.MetadataEntry]? = nil
        )
        {
            self.accessControlList = accessControlList
            self.bucketName = bucketName
            self.cannedACL = cannedACL
            self.encryption = encryption
            self.`prefix` = `prefix`
            self.storageClass = storageClass
            self.tagging = tagging
            self.userMetadata = userMetadata
        }
    }

}

extension S3ClientTypes.SSEKMS: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    static func writingClosure(_ value: S3ClientTypes.SSEKMS?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("KeyId")].write(value.keyId)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension S3ClientTypes.SSEKMS: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSEKMS(keyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {
    /// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
    public struct SSEKMS: Swift.Equatable {
        /// Specifies the ID of the Key Management Service (KMS) symmetric encryption customer managed key to use for encrypting inventory reports.
        /// This member is required.
        public var keyId: Swift.String?

        public init(
            keyId: Swift.String? = nil
        )
        {
            self.keyId = keyId
        }
    }

}

extension S3ClientTypes.SSES3: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.SSES3?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    /// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
    public struct SSES3: Swift.Equatable {

        public init() { }
    }

}

extension S3ClientTypes.ScanRange: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end = "End"
        case start = "Start"
    }

    static func writingClosure(_ value: S3ClientTypes.ScanRange?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("End")].write(value.end)
        try writer[.init("Start")].write(value.start)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .end)
        end = endDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
    public struct ScanRange: Swift.Equatable {
        /// Specifies the end of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is one less than the size of the object being queried. If only the End parameter is supplied, it is interpreted to mean scan the last N bytes of the file. For example, 50 means scan the last 50 bytes.
        public var end: Swift.Int?
        /// Specifies the start of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is 0. If only start is supplied, it means scan from that point to the end of the file. For example, 50 means scan from byte 50 until the end of the file.
        public var start: Swift.Int?

        public init(
            end: Swift.Int? = nil,
            start: Swift.Int? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }

}

extension S3ClientTypes.SelectObjectContentEventStream: ClientRuntime.MessageUnmarshallable {
    public init(message: ClientRuntime.EventStream.Message, decoder: ClientRuntime.ResponseDecoder) throws {
        fatalError("Not implemented")
    }
}

extension S3ClientTypes {
    /// The container for selecting objects from a content event stream.
    public enum SelectObjectContentEventStream: Swift.Equatable {
        /// The Records Event.
        case records(S3ClientTypes.RecordsEvent)
        /// The Stats Event.
        case stats(S3ClientTypes.StatsEvent)
        /// The Progress Event.
        case progress(S3ClientTypes.ProgressEvent)
        /// The Continuation Event.
        case cont(S3ClientTypes.ContinuationEvent)
        /// The End Event.
        case end(S3ClientTypes.EndEvent)
        case sdkUnknown(Swift.String)
    }

}

extension SelectObjectContentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectObjectContentInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expression: \(Swift.String(describing: expression)), expressionType: \(Swift.String(describing: expressionType)), inputSerialization: \(Swift.String(describing: inputSerialization)), key: \(Swift.String(describing: key)), outputSerialization: \(Swift.String(describing: outputSerialization)), requestProgress: \(Swift.String(describing: requestProgress)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), scanRange: \(Swift.String(describing: scanRange)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension SelectObjectContentInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
        case requestProgress = "RequestProgress"
        case scanRange = "ScanRange"
    }

    static func writingClosure(_ value: SelectObjectContentInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Expression")].write(value.expression)
        try writer[.init("ExpressionType")].write(value.expressionType)
        try writer[.init("InputSerialization")].write(value.inputSerialization, writingClosure: S3ClientTypes.InputSerialization.writingClosure(_:to:))
        try writer[.init("OutputSerialization")].write(value.outputSerialization, writingClosure: S3ClientTypes.OutputSerialization.writingClosure(_:to:))
        try writer[.init("RequestProgress")].write(value.requestProgress, writingClosure: S3ClientTypes.RequestProgress.writingClosure(_:to:))
        try writer[.init("ScanRange")].write(value.scanRange, writingClosure: S3ClientTypes.ScanRange.writingClosure(_:to:))
    }
}

extension SelectObjectContentInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension SelectObjectContentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "select", value: nil))
            items.append(ClientRuntime.URLQueryItem(name: "select-type", value: "2"))
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "SelectObjectContent"))
            return items
        }
    }
}

extension SelectObjectContentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

/// Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. For more information, see [S3Select API Documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html).
public struct SelectObjectContentInput: Swift.Equatable {
    /// The S3 bucket.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The expression that is used to query the object.
    /// This member is required.
    public var expression: Swift.String?
    /// The type of the provided expression (for example, SQL).
    /// This member is required.
    public var expressionType: S3ClientTypes.ExpressionType?
    /// Describes the format of the data in the object that is being queried.
    /// This member is required.
    public var inputSerialization: S3ClientTypes.InputSerialization?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Describes the format of the data that you want Amazon S3 to return in response.
    /// This member is required.
    public var outputSerialization: S3ClientTypes.OutputSerialization?
    /// Specifies if periodic request progress information should be enabled.
    public var requestProgress: S3ClientTypes.RequestProgress?
    /// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range. ScanRangemay be used in the following ways:
    ///
    /// * 50100 - process only the records starting between the bytes 50 and 100 (inclusive, counting from zero)
    ///
    /// * 50 - process only the records starting after the byte 50
    ///
    /// * 50 - process only the records within the last 50 bytes of the file.
    public var scanRange: S3ClientTypes.ScanRange?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerKeyMD5: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expression: Swift.String? = nil,
        expressionType: S3ClientTypes.ExpressionType? = nil,
        inputSerialization: S3ClientTypes.InputSerialization? = nil,
        key: Swift.String? = nil,
        outputSerialization: S3ClientTypes.OutputSerialization? = nil,
        requestProgress: S3ClientTypes.RequestProgress? = nil,
        scanRange: S3ClientTypes.ScanRange? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.expression = expression
        self.expressionType = expressionType
        self.inputSerialization = inputSerialization
        self.key = key
        self.outputSerialization = outputSerialization
        self.requestProgress = requestProgress
        self.scanRange = scanRange
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
    }
}

struct SelectObjectContentInputBody: Swift.Equatable {
    let expression: Swift.String?
    let expressionType: S3ClientTypes.ExpressionType?
    let requestProgress: S3ClientTypes.RequestProgress?
    let inputSerialization: S3ClientTypes.InputSerialization?
    let outputSerialization: S3ClientTypes.OutputSerialization?
    let scanRange: S3ClientTypes.ScanRange?
}

extension SelectObjectContentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
        case requestProgress = "RequestProgress"
        case scanRange = "ScanRange"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let expressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpressionType.self, forKey: .expressionType)
        expressionType = expressionTypeDecoded
        let requestProgressDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RequestProgress.self, forKey: .requestProgress)
        requestProgress = requestProgressDecoded
        let inputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InputSerialization.self, forKey: .inputSerialization)
        inputSerialization = inputSerializationDecoded
        let outputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputSerialization.self, forKey: .outputSerialization)
        outputSerialization = outputSerializationDecoded
        let scanRangeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ScanRange.self, forKey: .scanRange)
        scanRange = scanRangeDecoded
    }
}

extension SelectObjectContentOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if case let .stream(stream) = httpResponse.body, let responseDecoder = decoder {
            let messageDecoder = AWSClientRuntime.AWSEventStream.AWSMessageDecoder()
            let decoderStream = ClientRuntime.EventStream.DefaultMessageDecoderStream<S3ClientTypes.SelectObjectContentEventStream>(stream: stream, messageDecoder: messageDecoder, responseDecoder: responseDecoder)
            self.payload = decoderStream.toAsyncStream()
        } else {
            self.payload = nil
        }
    }
}

public struct SelectObjectContentOutput: Swift.Equatable {
    /// The array of results.
    public var payload: AsyncThrowingStream<S3ClientTypes.SelectObjectContentEventStream, Swift.Error>?

    public init(
        payload: AsyncThrowingStream<S3ClientTypes.SelectObjectContentEventStream, Swift.Error>? = nil
    )
    {
        self.payload = payload
    }
}

enum SelectObjectContentOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.SelectParameters: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
    }

    static func writingClosure(_ value: S3ClientTypes.SelectParameters?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Expression")].write(value.expression)
        try writer[.init("ExpressionType")].write(value.expressionType)
        try writer[.init("InputSerialization")].write(value.inputSerialization, writingClosure: S3ClientTypes.InputSerialization.writingClosure(_:to:))
        try writer[.init("OutputSerialization")].write(value.outputSerialization, writingClosure: S3ClientTypes.OutputSerialization.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InputSerialization.self, forKey: .inputSerialization)
        inputSerialization = inputSerializationDecoded
        let expressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpressionType.self, forKey: .expressionType)
        expressionType = expressionTypeDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let outputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputSerialization.self, forKey: .outputSerialization)
        outputSerialization = outputSerializationDecoded
    }
}

extension S3ClientTypes {
    /// Describes the parameters for Select job types.
    public struct SelectParameters: Swift.Equatable {
        /// The expression that is used to query the object.
        /// This member is required.
        public var expression: Swift.String?
        /// The type of the provided expression (for example, SQL).
        /// This member is required.
        public var expressionType: S3ClientTypes.ExpressionType?
        /// Describes the serialization format of the object.
        /// This member is required.
        public var inputSerialization: S3ClientTypes.InputSerialization?
        /// Describes how the results of the Select job are serialized.
        /// This member is required.
        public var outputSerialization: S3ClientTypes.OutputSerialization?

        public init(
            expression: Swift.String? = nil,
            expressionType: S3ClientTypes.ExpressionType? = nil,
            inputSerialization: S3ClientTypes.InputSerialization? = nil,
            outputSerialization: S3ClientTypes.OutputSerialization? = nil
        )
        {
            self.expression = expression
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
            self.outputSerialization = outputSerialization
        }
    }

}

extension S3ClientTypes {
    public enum ServerSideEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes256
        case awsKms
        case awsKmsDsse
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerSideEncryption] {
            return [
                .aes256,
                .awsKms,
                .awsKmsDsse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .awsKms: return "aws:kms"
            case .awsKmsDsse: return "aws:kms:dsse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServerSideEncryption(rawValue: rawValue) ?? ServerSideEncryption.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsMasterKeyID = "KMSMasterKeyID"
        case sseAlgorithm = "SSEAlgorithm"
    }

    static func writingClosure(_ value: S3ClientTypes.ServerSideEncryptionByDefault?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("KMSMasterKeyID")].write(value.kmsMasterKeyID)
        try writer[.init("SSEAlgorithm")].write(value.sseAlgorithm)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sseAlgorithmDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryption.self, forKey: .sseAlgorithm)
        sseAlgorithm = sseAlgorithmDecoded
        let kmsMasterKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyID)
        kmsMasterKeyID = kmsMasterKeyIDDecoded
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionByDefault(sseAlgorithm: \(Swift.String(describing: sseAlgorithm)), kmsMasterKeyID: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {
    /// Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. If you don't specify a customer managed key at configuration, Amazon S3 automatically creates an Amazon Web Services KMS key in your Amazon Web Services account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS. For more information, see [PUT Bucket encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the Amazon S3 API Reference.
    public struct ServerSideEncryptionByDefault: Swift.Equatable {
        /// Amazon Web Services Key Management Service (KMS) customer Amazon Web Services KMS key ID to use for the default encryption. This parameter is allowed if and only if SSEAlgorithm is set to aws:kms. You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key Alias: alias/alias-name
        ///
        ///
        /// If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. If you are using encryption with cross-account or Amazon Web Services service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy). Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsMasterKeyID: Swift.String?
        /// Server-side encryption algorithm to use for the default encryption.
        /// This member is required.
        public var sseAlgorithm: S3ClientTypes.ServerSideEncryption?

        public init(
            kmsMasterKeyID: Swift.String? = nil,
            sseAlgorithm: S3ClientTypes.ServerSideEncryption? = nil
        )
        {
            self.kmsMasterKeyID = kmsMasterKeyID
            self.sseAlgorithm = sseAlgorithm
        }
    }

}

extension S3ClientTypes.ServerSideEncryptionConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    static func writingClosure(_ value: S3ClientTypes.ServerSideEncryptionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Rule")].writeList(value.rules, memberWritingClosure: S3ClientTypes.ServerSideEncryptionRule.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.ServerSideEncryptionRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.ServerSideEncryptionRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.ServerSideEncryptionRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes {
    /// Specifies the default server-side-encryption configuration.
    public struct ServerSideEncryptionConfiguration: Swift.Equatable {
        /// Container for information about a particular server-side encryption configuration rule.
        /// This member is required.
        public var rules: [S3ClientTypes.ServerSideEncryptionRule]?

        public init(
            rules: [S3ClientTypes.ServerSideEncryptionRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes.ServerSideEncryptionRule: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        case bucketKeyEnabled = "BucketKeyEnabled"
    }

    static func writingClosure(_ value: S3ClientTypes.ServerSideEncryptionRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ApplyServerSideEncryptionByDefault")].write(value.applyServerSideEncryptionByDefault, writingClosure: S3ClientTypes.ServerSideEncryptionByDefault.writingClosure(_:to:))
        try writer[.init("BucketKeyEnabled")].write(value.bucketKeyEnabled)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applyServerSideEncryptionByDefaultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionByDefault.self, forKey: .applyServerSideEncryptionByDefault)
        applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefaultDecoded
        let bucketKeyEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bucketKeyEnabled)
        bucketKeyEnabled = bucketKeyEnabledDecoded
    }
}

extension S3ClientTypes {
    /// Specifies the default server-side encryption configuration.
    public struct ServerSideEncryptionRule: Swift.Equatable {
        /// Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
        public var applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault?
        /// Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the BucketKeyEnabled element to true causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled. For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the Amazon S3 User Guide.
        public var bucketKeyEnabled: Swift.Bool?

        public init(
            applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault? = nil,
            bucketKeyEnabled: Swift.Bool? = nil
        )
        {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
            self.bucketKeyEnabled = bucketKeyEnabled
        }
    }

}

extension S3ClientTypes.SessionCredentials: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case expiration = "Expiration"
        case secretAccessKey = "SecretAccessKey"
        case sessionToken = "SessionToken"
    }

    static func writingClosure(_ value: S3ClientTypes.SessionCredentials?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessKeyId")].write(value.accessKeyId)
        try writer[.init("Expiration")].writeTimestamp(value.expiration, format: .dateTime)
        try writer[.init("SecretAccessKey")].write(value.secretAccessKey)
        try writer[.init("SessionToken")].write(value.sessionToken)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let sessionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionToken)
        sessionToken = sessionTokenDecoded
        let expirationDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .expiration)
        expiration = expirationDecoded
    }
}

extension S3ClientTypes.SessionCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SessionCredentials(accessKeyId: \(Swift.String(describing: accessKeyId)), expiration: \(Swift.String(describing: expiration)), secretAccessKey: \"CONTENT_REDACTED\", sessionToken: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {
    /// The established temporary security credentials of the session. Directory buckets - These session credentials are only supported for the authentication and authorization of Zonal endpoint APIs on directory buckets.
    public struct SessionCredentials: Swift.Equatable {
        /// A unique identifier that's associated with a secret access key. The access key ID and the secret access key are used together to sign programmatic Amazon Web Services requests cryptographically.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// Temporary security credentials expire after a specified interval. After temporary credentials expire, any calls that you make with those credentials will fail. So you must generate a new set of temporary credentials. Temporary credentials cannot be extended or refreshed beyond the original specified interval.
        /// This member is required.
        public var expiration: ClientRuntime.Date?
        /// A key that's used with the access key ID to cryptographically sign programmatic Amazon Web Services requests. Signing a request identifies the sender and prevents the request from being altered.
        /// This member is required.
        public var secretAccessKey: Swift.String?
        /// A part of the temporary security credentials. The session token is used to validate the temporary security credentials.
        /// This member is required.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            expiration: ClientRuntime.Date? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.expiration = expiration
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension S3ClientTypes {
    public enum SessionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case readonly
        case readwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [SessionMode] {
            return [
                .readonly,
                .readwrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .readonly: return "ReadOnly"
            case .readwrite: return "ReadWrite"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SessionMode(rawValue: rawValue) ?? SessionMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.SimplePrefix: Swift.Decodable {

    static func writingClosure(_ value: S3ClientTypes.SimplePrefix?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { writer.detach(); return }
    }

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes {
    /// To use simple format for S3 keys for log objects, set SimplePrefix to an empty object. [DestinationPrefix][YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]
    public struct SimplePrefix: Swift.Equatable {

        public init() { }
    }

}

extension S3ClientTypes.SourceSelectionCriteria: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicaModifications = "ReplicaModifications"
        case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
    }

    static func writingClosure(_ value: S3ClientTypes.SourceSelectionCriteria?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ReplicaModifications")].write(value.replicaModifications, writingClosure: S3ClientTypes.ReplicaModifications.writingClosure(_:to:))
        try writer[.init("SseKmsEncryptedObjects")].write(value.sseKmsEncryptedObjects, writingClosure: S3ClientTypes.SseKmsEncryptedObjects.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sseKmsEncryptedObjectsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SseKmsEncryptedObjects.self, forKey: .sseKmsEncryptedObjects)
        sseKmsEncryptedObjects = sseKmsEncryptedObjectsDecoded
        let replicaModificationsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicaModifications.self, forKey: .replicaModifications)
        replicaModifications = replicaModificationsDecoded
    }
}

extension S3ClientTypes {
    /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS).
    public struct SourceSelectionCriteria: Swift.Equatable {
        /// A filter that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when Filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas. If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed
        public var replicaModifications: S3ClientTypes.ReplicaModifications?
        /// A container for filter information for the selection of Amazon S3 objects encrypted with Amazon Web Services KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required.
        public var sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects?

        public init(
            replicaModifications: S3ClientTypes.ReplicaModifications? = nil,
            sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects? = nil
        )
        {
            self.replicaModifications = replicaModifications
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }
    }

}

extension S3ClientTypes.SseKmsEncryptedObjects: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.SseKmsEncryptedObjects?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SseKmsEncryptedObjectsStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// A container for filter information for the selection of S3 objects encrypted with Amazon Web Services KMS.
    public struct SseKmsEncryptedObjects: Swift.Equatable {
        /// Specifies whether Amazon S3 replicates objects created with server-side encryption using an Amazon Web Services KMS key stored in Amazon Web Services Key Management Service.
        /// This member is required.
        public var status: S3ClientTypes.SseKmsEncryptedObjectsStatus?

        public init(
            status: S3ClientTypes.SseKmsEncryptedObjectsStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum SseKmsEncryptedObjectsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SseKmsEncryptedObjectsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SseKmsEncryptedObjectsStatus(rawValue: rawValue) ?? SseKmsEncryptedObjectsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Stats: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesProcessed = "BytesProcessed"
        case bytesReturned = "BytesReturned"
        case bytesScanned = "BytesScanned"
    }

    static func writingClosure(_ value: S3ClientTypes.Stats?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("BytesProcessed")].write(value.bytesProcessed)
        try writer[.init("BytesReturned")].write(value.bytesReturned)
        try writer[.init("BytesScanned")].write(value.bytesScanned)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesScannedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesScanned)
        bytesScanned = bytesScannedDecoded
        let bytesProcessedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesProcessed)
        bytesProcessed = bytesProcessedDecoded
        let bytesReturnedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesReturned)
        bytesReturned = bytesReturnedDecoded
    }
}

extension S3ClientTypes {
    /// Container for the stats details.
    public struct Stats: Swift.Equatable {
        /// The total number of uncompressed object bytes processed.
        public var bytesProcessed: Swift.Int?
        /// The total number of bytes of records payload data returned.
        public var bytesReturned: Swift.Int?
        /// The total number of object bytes scanned.
        public var bytesScanned: Swift.Int?

        public init(
            bytesProcessed: Swift.Int? = nil,
            bytesReturned: Swift.Int? = nil,
            bytesScanned: Swift.Int? = nil
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }

}

extension S3ClientTypes.StatsEvent: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
    }

    static func writingClosure(_ value: S3ClientTypes.StatsEvent?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Details")].write(value.details, writingClosure: S3ClientTypes.Stats.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Stats.self, forKey: .details)
        details = detailsDecoded
    }
}

extension S3ClientTypes {
    /// Container for the Stats Event.
    public struct StatsEvent: Swift.Equatable {
        /// The Stats event details.
        public var details: S3ClientTypes.Stats?

        public init(
            details: S3ClientTypes.Stats? = nil
        )
        {
            self.details = details
        }
    }

}

extension S3ClientTypes {
    public enum StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case expressOnezone
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case snow
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClass] {
            return [
                .deepArchive,
                .expressOnezone,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .snow,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .expressOnezone: return "EXPRESS_ONEZONE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .snow: return "SNOW"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageClass(rawValue: rawValue) ?? StorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.StorageClassAnalysis: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataExport = "DataExport"
    }

    static func writingClosure(_ value: S3ClientTypes.StorageClassAnalysis?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("DataExport")].write(value.dataExport, writingClosure: S3ClientTypes.StorageClassAnalysisDataExport.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataExportDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysisDataExport.self, forKey: .dataExport)
        dataExport = dataExportDecoded
    }
}

extension S3ClientTypes {
    /// Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
    public struct StorageClassAnalysis: Swift.Equatable {
        /// Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
        public var dataExport: S3ClientTypes.StorageClassAnalysisDataExport?

        public init(
            dataExport: S3ClientTypes.StorageClassAnalysisDataExport? = nil
        )
        {
            self.dataExport = dataExport
        }
    }

}

extension S3ClientTypes.StorageClassAnalysisDataExport: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case outputSchemaVersion = "OutputSchemaVersion"
    }

    static func writingClosure(_ value: S3ClientTypes.StorageClassAnalysisDataExport?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Destination")].write(value.destination, writingClosure: S3ClientTypes.AnalyticsExportDestination.writingClosure(_:to:))
        try writer[.init("OutputSchemaVersion")].write(value.outputSchemaVersion)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSchemaVersionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysisSchemaVersion.self, forKey: .outputSchemaVersion)
        outputSchemaVersion = outputSchemaVersionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsExportDestination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension S3ClientTypes {
    /// Container for data related to the storage class analysis for an Amazon S3 bucket for export.
    public struct StorageClassAnalysisDataExport: Swift.Equatable {
        /// The place to store the data for an analysis.
        /// This member is required.
        public var destination: S3ClientTypes.AnalyticsExportDestination?
        /// The version of the output schema to use when exporting data. Must be V_1.
        /// This member is required.
        public var outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion?

        public init(
            destination: S3ClientTypes.AnalyticsExportDestination? = nil,
            outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion? = nil
        )
        {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }
    }

}

extension S3ClientTypes {
    public enum StorageClassAnalysisSchemaVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v1
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClassAnalysisSchemaVersion] {
            return [
                .v1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageClassAnalysisSchemaVersion(rawValue: rawValue) ?? StorageClassAnalysisSchemaVersion.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Tag: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    static func writingClosure(_ value: S3ClientTypes.Tag?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Key")].write(value.key)
        try writer[.init("Value")].write(value.value)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes {
    /// A container of a key value name pair.
    public struct Tag: Swift.Equatable {
        /// Name of the object key.
        /// This member is required.
        public var key: Swift.String?
        /// Value of the tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension S3ClientTypes.Tagging: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    static func writingClosure(_ value: S3ClientTypes.Tagging?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("TagSet")].writeList(value.tagSet, memberWritingClosure: S3ClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: .init("Tag"), isFlattened: false)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

extension S3ClientTypes {
    /// Container for TagSet elements.
    public struct Tagging: Swift.Equatable {
        /// A collection for a set of tags
        /// This member is required.
        public var tagSet: [S3ClientTypes.Tag]?

        public init(
            tagSet: [S3ClientTypes.Tag]? = nil
        )
        {
            self.tagSet = tagSet
        }
    }

}

extension S3ClientTypes {
    public enum TaggingDirective: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggingDirective] {
            return [
                .copy,
                .replace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaggingDirective(rawValue: rawValue) ?? TaggingDirective.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.TargetGrant: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantee = "Grantee"
        case permission = "Permission"
    }

    static func writingClosure(_ value: S3ClientTypes.TargetGrant?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Grantee", namespace: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].write(value.grantee, writingClosure: S3ClientTypes.Grantee.writingClosure(_:to:))
        try writer[.init("Permission")].write(value.permission)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Grantee.self, forKey: .grantee)
        grantee = granteeDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLogsPermission.self, forKey: .permission)
        permission = permissionDecoded
    }
}

extension S3ClientTypes {
    /// Container for granting information. Buckets that use the bucket owner enforced setting for Object Ownership don't support target grants. For more information, see [Permissions server access log delivery](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general) in the Amazon S3 User Guide.
    public struct TargetGrant: Swift.Equatable {
        /// Container for the person being granted permissions.
        public var grantee: S3ClientTypes.Grantee?
        /// Logging permissions assigned to the grantee for the bucket.
        public var permission: S3ClientTypes.BucketLogsPermission?

        public init(
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.BucketLogsPermission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }

}

extension S3ClientTypes.TargetObjectKeyFormat: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionedPrefix = "PartitionedPrefix"
        case simplePrefix = "SimplePrefix"
    }

    static func writingClosure(_ value: S3ClientTypes.TargetObjectKeyFormat?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("PartitionedPrefix")].write(value.partitionedPrefix, writingClosure: S3ClientTypes.PartitionedPrefix.writingClosure(_:to:))
        try writer[.init("SimplePrefix")].write(value.simplePrefix, writingClosure: S3ClientTypes.SimplePrefix.writingClosure(_:to:))
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let simplePrefixDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SimplePrefix.self, forKey: .simplePrefix)
        simplePrefix = simplePrefixDecoded
        let partitionedPrefixDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PartitionedPrefix.self, forKey: .partitionedPrefix)
        partitionedPrefix = partitionedPrefixDecoded
    }
}

extension S3ClientTypes {
    /// Amazon S3 key format for log objects. Only one format, PartitionedPrefix or SimplePrefix, is allowed.
    public struct TargetObjectKeyFormat: Swift.Equatable {
        /// Partitioned S3 key for log objects.
        public var partitionedPrefix: S3ClientTypes.PartitionedPrefix?
        /// To use the simple format for S3 keys for log objects. To specify SimplePrefix format, set SimplePrefix to {}.
        public var simplePrefix: S3ClientTypes.SimplePrefix?

        public init(
            partitionedPrefix: S3ClientTypes.PartitionedPrefix? = nil,
            simplePrefix: S3ClientTypes.SimplePrefix? = nil
        )
        {
            self.partitionedPrefix = partitionedPrefix
            self.simplePrefix = simplePrefix
        }
    }

}

extension S3ClientTypes {
    public enum Tier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bulk
        case expedited
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Tier] {
            return [
                .bulk,
                .expedited,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bulk: return "Bulk"
            case .expedited: return "Expedited"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Tier(rawValue: rawValue) ?? Tier.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Tiering: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case days = "Days"
    }

    static func writingClosure(_ value: S3ClientTypes.Tiering?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("AccessTier")].write(value.accessTier)
        try writer[.init("Days")].write(value.days)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
    }
}

extension S3ClientTypes {
    /// The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
    public struct Tiering: Swift.Equatable {
        /// S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
        /// This member is required.
        public var accessTier: S3ClientTypes.IntelligentTieringAccessTier?
        /// The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
        /// This member is required.
        public var days: Swift.Int?

        public init(
            accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
            days: Swift.Int? = nil
        )
        {
            self.accessTier = accessTier
            self.days = days
        }
    }

}

extension S3ClientTypes.TopicConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case topicArn = "Topic"
    }

    static func writingClosure(_ value: S3ClientTypes.TopicConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Event")].writeList(value.events, memberWritingClosure: S3ClientTypes.Event.writingClosure(_:to:), memberNodeInfo: .init("member"), isFlattened: true)
        try writer[.init("Filter")].write(value.filter, writingClosure: S3ClientTypes.NotificationConfigurationFilter.writingClosure(_:to:))
        try writer[.init("Id")].write(value.id)
        try writer[.init("Topic")].write(value.topicArn)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for enumContainer0 in eventsContainer {
                        eventsBuffer?.append(enumContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes {
    /// A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
    public struct TopicConfiguration: Swift.Equatable {
        /// The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.topicArn = topicArn
        }
    }

}

extension S3ClientTypes.Transition: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case days = "Days"
        case storageClass = "StorageClass"
    }

    static func writingClosure(_ value: S3ClientTypes.Transition?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Date")].writeTimestamp(value.date, format: .dateTime)
        try writer[.init("Days")].write(value.days)
        try writer[.init("StorageClass")].write(value.storageClass)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .date)
        date = dateDecoded
        let daysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.TransitionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes {
    /// Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the Amazon S3 User Guide.
    public struct Transition: Swift.Equatable {
        /// Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
        public var date: ClientRuntime.Date?
        /// Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
        public var days: Swift.Int?
        /// The storage class to which you want the object to transition.
        public var storageClass: S3ClientTypes.TransitionStorageClass?

        public init(
            date: ClientRuntime.Date? = nil,
            days: Swift.Int? = nil,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.date = date
            self.days = days
            self.storageClass = storageClass
        }
    }

}

extension S3ClientTypes {
    public enum TransitionStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [TransitionStorageClass] {
            return [
                .deepArchive,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransitionStorageClass(rawValue: rawValue) ?? TransitionStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazoncustomerbyemail
        case canonicaluser
        case group
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .amazoncustomerbyemail,
                .canonicaluser,
                .group,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazoncustomerbyemail: return "AmazonCustomerByEmail"
            case .canonicaluser: return "CanonicalUser"
            case .group: return "Group"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelType(rawValue: rawValue) ?? ModelType.sdkUnknown(rawValue)
        }
    }
}

extension UploadPartCopyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyInput(bucket: \(Swift.String(describing: bucket)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceRange: \(Swift.String(describing: copySourceRange)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), copySourceSSECustomerKey: \"CONTENT_REDACTED\", sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension UploadPartCopyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let copySource = copySource {
            items.add(Header(name: "x-amz-copy-source", value: Swift.String(copySource)))
        }
        if let copySourceIfMatch = copySourceIfMatch {
            items.add(Header(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch)))
        }
        if let copySourceIfModifiedSince = copySourceIfModifiedSince {
            items.add(Header(name: "x-amz-copy-source-if-modified-since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: copySourceIfModifiedSince))))
        }
        if let copySourceIfNoneMatch = copySourceIfNoneMatch {
            items.add(Header(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch)))
        }
        if let copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince {
            items.add(Header(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: copySourceIfUnmodifiedSince))))
        }
        if let copySourceRange = copySourceRange {
            items.add(Header(name: "x-amz-copy-source-range", value: Swift.String(copySourceRange)))
        }
        if let copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm)))
        }
        if let copySourceSSECustomerKey = copySourceSSECustomerKey {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey)))
        }
        if let copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5 {
            items.add(Header(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expectedSourceBucketOwner = expectedSourceBucketOwner {
            items.add(Header(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension UploadPartCopyInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "UploadPartCopy"))
            guard let partNumber = partNumber else {
                let message = "Creating a URL Query Item failed. partNumber is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
            items.append(partNumberQueryItem)
            guard let uploadId = uploadId else {
                let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            items.append(uploadIdQueryItem)
            return items
        }
    }
}

extension UploadPartCopyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct UploadPartCopyInput: Swift.Equatable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies the source object for the copy operation. You specify the value in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):
    ///
    /// * For objects not accessed through an access point, specify the name of the source bucket and key of the source object, separated by a slash (/). For example, to copy the object reports/january.pdf from the bucket awsexamplebucket, use awsexamplebucket/reports/january.pdf. The value must be URL-encoded.
    ///
    /// * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:::accesspoint//object/. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
    ///
    /// * Amazon S3 supports copy operations using Access points only when the source and destination buckets are in the same Amazon Web Services Region.
    ///
    /// * Access points are not supported by directory buckets.
    ///
    ///
    /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:::outpost//object/. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL-encoded.
    ///
    ///
    /// If your bucket has versioning enabled, you could have multiple versions of the same object. By default, x-amz-copy-source identifies the current version of the source object to copy. To copy a specific version of the source object to copy, append ?versionId= to the x-amz-copy-source request header (for example, x-amz-copy-source: /awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If the current version is a delete marker and you don't specify a versionId in the x-amz-copy-source request header, Amazon S3 returns a 404 Not Found error, because the object does not exist. If you specify versionId in the x-amz-copy-source and the versionId is a delete marker, Amazon S3 returns an HTTP 400 Bad Request error, because you are not allowed to specify a delete marker as a version for the x-amz-copy-source. Directory buckets - S3 Versioning isn't enabled and supported for directory buckets.
    /// This member is required.
    public var copySource: Swift.String?
    /// Copies the object if its entity tag (ETag) matches the specified tag. If both of the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request as follows: x-amz-copy-source-if-match condition evaluates to true, and; x-amz-copy-source-if-unmodified-since condition evaluates to false; Amazon S3 returns 200 OK and copies the data.
    public var copySourceIfMatch: Swift.String?
    /// Copies the object if it has been modified since the specified time. If both of the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request as follows: x-amz-copy-source-if-none-match condition evaluates to false, and; x-amz-copy-source-if-modified-since condition evaluates to true; Amazon S3 returns 412 Precondition Failed response code.
    public var copySourceIfModifiedSince: ClientRuntime.Date?
    /// Copies the object if its entity tag (ETag) is different than the specified ETag. If both of the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request as follows: x-amz-copy-source-if-none-match condition evaluates to false, and; x-amz-copy-source-if-modified-since condition evaluates to true; Amazon S3 returns 412 Precondition Failed response code.
    public var copySourceIfNoneMatch: Swift.String?
    /// Copies the object if it hasn't been modified since the specified time. If both of the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request as follows: x-amz-copy-source-if-match condition evaluates to true, and; x-amz-copy-source-if-unmodified-since condition evaluates to false; Amazon S3 returns 200 OK and copies the data.
    public var copySourceIfUnmodifiedSince: ClientRuntime.Date?
    /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.
    public var copySourceRange: Swift.String?
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256). This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKeyMD5: Swift.String?
    /// The account ID of the expected destination bucket owner. If the account ID that you provide does not match the actual owner of the destination bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The account ID of the expected source bucket owner. If the account ID that you provide does not match the actual owner of the source bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedSourceBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of part being copied. This is a positive integer between 1 and 10,000.
    /// This member is required.
    public var partNumber: Swift.Int?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose part is being copied.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: ClientRuntime.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: ClientRuntime.Date? = nil,
        copySourceRange: Swift.String? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceRange = copySourceRange
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension UploadPartCopyOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyPartResult: \(Swift.String(describing: copyPartResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), requestCharged: \(Swift.String(describing: requestCharged)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension UploadPartCopyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            self.copySourceVersionId = copySourceVersionIdHeaderValue
        } else {
            self.copySourceVersionId = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: S3ClientTypes.CopyPartResult = try responseDecoder.decode(responseBody: data)
            self.copyPartResult = output
        } else {
            self.copyPartResult = nil
        }
    }
}

public struct UploadPartCopyOutput: Swift.Equatable {
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// Container for all response elements.
    public var copyPartResult: S3ClientTypes.CopyPartResult?
    /// The version of the source object that was copied, if you have enabled versioning on the source bucket. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceVersionId: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        copyPartResult: S3ClientTypes.CopyPartResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyPartResult = copyPartResult
        self.copySourceVersionId = copySourceVersionId
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
    }
}

struct UploadPartCopyOutputBody: Swift.Equatable {
    let copyPartResult: S3ClientTypes.CopyPartResult?
}

extension UploadPartCopyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyPartResult = "CopyPartResult"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyPartResultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CopyPartResult.self, forKey: .copyPartResult)
        copyPartResult = copyPartResultDecoded
    }
}

enum UploadPartCopyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension UploadPartInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartInput(body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension UploadPartInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    static func writingClosure(_ value: UploadPartInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Body")].write(value.body)
    }
}

extension UploadPartInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let checksumCRC32 = checksumCRC32 {
            items.add(Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = checksumCRC32C {
            items.add(Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = checksumSHA1 {
            items.add(Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = checksumSHA256 {
            items.add(Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentLength = contentLength {
            items.add(Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentMD5 = contentMD5 {
            items.add(Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension UploadPartInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> ClientRuntime.SdkHttpRequest? {
        let serviceName = "S3"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "uploadPart")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        var operation = ClientRuntime.OperationStack<UploadPartInput, UploadPartOutput>(id: "uploadPart")
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<UploadPartInput, UploadPartOutput>())
        operation.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<UploadPartInput, UploadPartOutput>())
        let endpointParams = EndpointParams(accelerate: config.serviceSpecific.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.serviceSpecific.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.serviceSpecific.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.serviceSpecific.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.serviceSpecific.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.serviceSpecific.useGlobalEndpoint ?? false)
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware<UploadPartOutput>(endpointResolver: config.serviceSpecific.endpointResolver, endpointParams: endpointParams))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromConfig(serviceID: serviceName, version: "1.0", config: config)))
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<UploadPartInput, UploadPartOutput>())
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.QueryItemMiddleware<UploadPartInput, UploadPartOutput>())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<UploadPartInput, UploadPartOutput>(contentType: "application/octet-stream"))
        operation.serializeStep.intercept(position: .after, middleware: ClientRuntime.BlobStreamBodyMiddleware<UploadPartInput, UploadPartOutput>(keyPath: \.body))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: ClientRuntime.RetryMiddleware<ClientRuntime.DefaultRetryStrategy, AWSClientRuntime.AWSRetryErrorInfoProvider, UploadPartOutput>(options: config.retryStrategyOptions))
        let sigv4Config = AWSClientRuntime.SigV4Config(useDoubleURIEncode: false, shouldNormalizeURIPath: false, expiration: expiration, signedBodyHeader: .contentSha256, unsignedBody: false, signingAlgorithm: .sigv4)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware<UploadPartOutput>(config: sigv4Config))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware<UploadPartOutput>(responseClosure(decoder: decoder), responseErrorClosure(UploadPartOutputError.self, decoder: decoder)))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.LoggerMiddleware<UploadPartOutput>(clientLogMode: config.clientLogMode))
        let presignedRequestBuilder = try await operation.presignedRequest(context: context, input: input, output: UploadPartOutput(), next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build() else {
            return nil
        }
        return builtRequest
    }
}

extension UploadPartInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "UploadPart"))
            guard let partNumber = partNumber else {
                let message = "Creating a URL Query Item failed. partNumber is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
            items.append(partNumberQueryItem)
            guard let uploadId = uploadId else {
                let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            items.append(uploadIdQueryItem)
            return items
        }
    }
}

extension UploadPartInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let key = key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

public struct UploadPartInput: Swift.Equatable {
    /// Object data.
    public var body: ClientRuntime.ByteStream?
    /// The name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az2--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter. This checksum algorithm must be the same for all parts and it match the checksum value supplied in the CreateMultipartUpload request.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
    public var contentLength: Swift.Int?
    /// The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated when using the command from the CLI. This parameter is required if object lock parameters are specified. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
    /// This member is required.
    public var partNumber: Swift.Int?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose part is being uploaded.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        body: ClientRuntime.ByteStream? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.body = body
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

struct UploadPartInputBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension UploadPartInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.data("".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension UploadPartOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), requestCharged: \(Swift.String(describing: requestCharged)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension UploadPartOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = nil
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            self.checksumCRC32 = checksumCRC32HeaderValue
        } else {
            self.checksumCRC32 = nil
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            self.checksumCRC32C = checksumCRC32CHeaderValue
        } else {
            self.checksumCRC32C = nil
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            self.checksumSHA1 = checksumSHA1HeaderValue
        } else {
            self.checksumSHA1 = nil
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            self.checksumSHA256 = checksumSHA256HeaderValue
        } else {
            self.checksumSHA256 = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        } else {
            self.sseCustomerAlgorithm = nil
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        } else {
            self.sseCustomerKeyMD5 = nil
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.ssekmsKeyId = ssekmsKeyIdHeaderValue
        } else {
            self.ssekmsKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
    }
}

public struct UploadPartOutput: Swift.Equatable {
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS). This functionality is not supported for directory buckets.
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag for the uploaded object.
    public var eTag: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms). For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) is supported.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the Key Management Service (KMS) symmetric encryption customer managed key that was used for the object. This functionality is not supported for directory buckets.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
    }
}

enum UploadPartOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}

extension S3ClientTypes.VersioningConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaDelete = "MfaDelete"
        case status = "Status"
    }

    static func writingClosure(_ value: S3ClientTypes.VersioningConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("MfaDelete")].write(value.mfaDelete)
        try writer[.init("Status")].write(value.status)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mfaDeleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MFADelete.self, forKey: .mfaDelete)
        mfaDelete = mfaDeleteDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketVersioningStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes {
    /// Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the Amazon S3 API Reference.
    public struct VersioningConfiguration: Swift.Equatable {
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public var mfaDelete: S3ClientTypes.MFADelete?
        /// The versioning state of the bucket.
        public var status: S3ClientTypes.BucketVersioningStatus?

        public init(
            mfaDelete: S3ClientTypes.MFADelete? = nil,
            status: S3ClientTypes.BucketVersioningStatus? = nil
        )
        {
            self.mfaDelete = mfaDelete
            self.status = status
        }
    }

}

extension S3ClientTypes.WebsiteConfiguration: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDocument = "ErrorDocument"
        case indexDocument = "IndexDocument"
        case redirectAllRequestsTo = "RedirectAllRequestsTo"
        case routingRules = "RoutingRules"
    }

    static func writingClosure(_ value: S3ClientTypes.WebsiteConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("ErrorDocument")].write(value.errorDocument, writingClosure: S3ClientTypes.ErrorDocument.writingClosure(_:to:))
        try writer[.init("IndexDocument")].write(value.indexDocument, writingClosure: S3ClientTypes.IndexDocument.writingClosure(_:to:))
        try writer[.init("RedirectAllRequestsTo")].write(value.redirectAllRequestsTo, writingClosure: S3ClientTypes.RedirectAllRequestsTo.writingClosure(_:to:))
        try writer[.init("RoutingRules")].writeList(value.routingRules, memberWritingClosure: S3ClientTypes.RoutingRule.writingClosure(_:to:), memberNodeInfo: .init("RoutingRule"), isFlattened: false)
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ErrorDocument.self, forKey: .errorDocument)
        errorDocument = errorDocumentDecoded
        let indexDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IndexDocument.self, forKey: .indexDocument)
        indexDocument = indexDocumentDecoded
        let redirectAllRequestsToDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RedirectAllRequestsTo.self, forKey: .redirectAllRequestsTo)
        redirectAllRequestsTo = redirectAllRequestsToDecoded
        if containerValues.contains(.routingRules) {
            struct KeyVal0{struct RoutingRule{}}
            let routingRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RoutingRule>.CodingKeys.self, forKey: .routingRules)
            if let routingRulesWrappedContainer = routingRulesWrappedContainer {
                let routingRulesContainer = try routingRulesWrappedContainer.decodeIfPresent([S3ClientTypes.RoutingRule].self, forKey: .member)
                var routingRulesBuffer:[S3ClientTypes.RoutingRule]? = nil
                if let routingRulesContainer = routingRulesContainer {
                    routingRulesBuffer = [S3ClientTypes.RoutingRule]()
                    for structureContainer0 in routingRulesContainer {
                        routingRulesBuffer?.append(structureContainer0)
                    }
                }
                routingRules = routingRulesBuffer
            } else {
                routingRules = []
            }
        } else {
            routingRules = nil
        }
    }
}

extension S3ClientTypes {
    /// Specifies website configuration parameters for an Amazon S3 bucket.
    public struct WebsiteConfiguration: Swift.Equatable {
        /// The name of the error document for the website.
        public var errorDocument: S3ClientTypes.ErrorDocument?
        /// The name of the index document for the website.
        public var indexDocument: S3ClientTypes.IndexDocument?
        /// The redirect behavior for every request to this bucket's website endpoint. If you specify this property, you can't specify any other property.
        public var redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
        /// Rules that define when a redirect is applied and the redirect behavior.
        public var routingRules: [S3ClientTypes.RoutingRule]?

        public init(
            errorDocument: S3ClientTypes.ErrorDocument? = nil,
            indexDocument: S3ClientTypes.IndexDocument? = nil,
            redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
            routingRules: [S3ClientTypes.RoutingRule]? = nil
        )
        {
            self.errorDocument = errorDocument
            self.indexDocument = indexDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.routingRules = routingRules
        }
    }

}

extension WriteGetObjectResponseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WriteGetObjectResponseInput(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), requestRoute: \(Swift.String(describing: requestRoute)), requestToken: \(Swift.String(describing: requestToken)), restore: \(Swift.String(describing: restore)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), statusCode: \(Swift.String(describing: statusCode)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension WriteGetObjectResponseInput {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    static func writingClosure(_ value: WriteGetObjectResponseInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer[.init("Body")].write(value.body)
    }
}

extension WriteGetObjectResponseInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acceptRanges = acceptRanges {
            items.add(Header(name: "x-amz-fwd-header-accept-ranges", value: Swift.String(acceptRanges)))
        }
        if let bucketKeyEnabled = bucketKeyEnabled {
            items.add(Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = cacheControl {
            items.add(Header(name: "x-amz-fwd-header-Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumCRC32 = checksumCRC32 {
            items.add(Header(name: "x-amz-fwd-header-x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = checksumCRC32C {
            items.add(Header(name: "x-amz-fwd-header-x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = checksumSHA1 {
            items.add(Header(name: "x-amz-fwd-header-x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = checksumSHA256 {
            items.add(Header(name: "x-amz-fwd-header-x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentDisposition = contentDisposition {
            items.add(Header(name: "x-amz-fwd-header-Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = contentEncoding {
            items.add(Header(name: "x-amz-fwd-header-Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = contentLanguage {
            items.add(Header(name: "x-amz-fwd-header-Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentLength = contentLength {
            items.add(Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentRange = contentRange {
            items.add(Header(name: "x-amz-fwd-header-Content-Range", value: Swift.String(contentRange)))
        }
        if let contentType = contentType {
            items.add(Header(name: "x-amz-fwd-header-Content-Type", value: Swift.String(contentType)))
        }
        if let deleteMarker = deleteMarker {
            items.add(Header(name: "x-amz-fwd-header-x-amz-delete-marker", value: Swift.String(deleteMarker)))
        }
        if let eTag = eTag {
            items.add(Header(name: "x-amz-fwd-header-ETag", value: Swift.String(eTag)))
        }
        if let errorCode = errorCode {
            items.add(Header(name: "x-amz-fwd-error-code", value: Swift.String(errorCode)))
        }
        if let errorMessage = errorMessage {
            items.add(Header(name: "x-amz-fwd-error-message", value: Swift.String(errorMessage)))
        }
        if let expiration = expiration {
            items.add(Header(name: "x-amz-fwd-header-x-amz-expiration", value: Swift.String(expiration)))
        }
        if let expires = expires {
            items.add(Header(name: "x-amz-fwd-header-Expires", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: expires))))
        }
        if let lastModified = lastModified {
            items.add(Header(name: "x-amz-fwd-header-Last-Modified", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: lastModified))))
        }
        if let missingMeta = missingMeta {
            items.add(Header(name: "x-amz-fwd-header-x-amz-missing-meta", value: Swift.String(missingMeta)))
        }
        if let objectLockLegalHoldStatus = objectLockLegalHoldStatus {
            items.add(Header(name: "x-amz-fwd-header-x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = objectLockMode {
            items.add(Header(name: "x-amz-fwd-header-x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = objectLockRetainUntilDate {
            items.add(Header(name: "x-amz-fwd-header-x-amz-object-lock-retain-until-date", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let partsCount = partsCount {
            items.add(Header(name: "x-amz-fwd-header-x-amz-mp-parts-count", value: Swift.String(partsCount)))
        }
        if let replicationStatus = replicationStatus {
            items.add(Header(name: "x-amz-fwd-header-x-amz-replication-status", value: Swift.String(replicationStatus.rawValue)))
        }
        if let requestCharged = requestCharged {
            items.add(Header(name: "x-amz-fwd-header-x-amz-request-charged", value: Swift.String(requestCharged.rawValue)))
        }
        if let requestRoute = requestRoute {
            items.add(Header(name: "x-amz-request-route", value: Swift.String(requestRoute)))
        }
        if let requestToken = requestToken {
            items.add(Header(name: "x-amz-request-token", value: Swift.String(requestToken)))
        }
        if let restore = restore {
            items.add(Header(name: "x-amz-fwd-header-x-amz-restore", value: Swift.String(restore)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsKeyId = ssekmsKeyId {
            items.add(Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = serverSideEncryption {
            items.add(Header(name: "x-amz-fwd-header-x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let statusCode = statusCode {
            items.add(Header(name: "x-amz-fwd-status", value: Swift.String(statusCode)))
        }
        if let storageClass = storageClass {
            items.add(Header(name: "x-amz-fwd-header-x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagCount = tagCount {
            items.add(Header(name: "x-amz-fwd-header-x-amz-tagging-count", value: Swift.String(tagCount)))
        }
        if let versionId = versionId {
            items.add(Header(name: "x-amz-fwd-header-x-amz-version-id", value: Swift.String(versionId)))
        }
        if let metadata = metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension WriteGetObjectResponseInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "x-id", value: "WriteGetObjectResponse"))
            return items
        }
    }
}

extension WriteGetObjectResponseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/WriteGetObjectResponse"
    }
}

public struct WriteGetObjectResponseInput: Swift.Equatable {
    /// Indicates that a range of bytes was specified.
    public var acceptRanges: Swift.String?
    /// The object data.
    public var body: ClientRuntime.ByteStream?
    /// Indicates whether the object stored in Amazon S3 uses an S3 bucket key for server-side encryption with Amazon Web Services KMS (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 32-bit CRC32 checksum of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 32-bit CRC32C checksum of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 160-bit SHA-1 digest of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 256-bit SHA-256 digest of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// The size of the content body in bytes.
    public var contentLength: Swift.Int?
    /// The portion of the object returned in the response.
    public var contentRange: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Specifies whether an object stored in Amazon S3 is (true) or is not (false) a delete marker.
    public var deleteMarker: Swift.Bool?
    /// An opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// A string that uniquely identifies an error condition. Returned in the  tag of the error XML response for a corresponding GetObject call. Cannot be used with a successful StatusCode header or when the transformed object is provided in the body. All error codes from S3 are sentence-cased. The regular expression (regex) value is "^[A-Z][a-zA-Z]+$".
    public var errorCode: Swift.String?
    /// Contains a generic description of the error condition. Returned in the tag of the error XML response for a corresponding GetObject call. Cannot be used with a successful StatusCode header or when the transformed object is provided in body.
    public var errorMessage: Swift.String?
    /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide the object expiration information. The value of the rule-id is URL-encoded.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: ClientRuntime.Date?
    /// The date and time that the object was last modified.
    public var lastModified: ClientRuntime.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String:Swift.String]?
    /// Set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
    public var missingMeta: Swift.Int?
    /// Indicates whether an object stored in Amazon S3 has an active legal hold.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// Indicates whether an object stored in Amazon S3 has Object Lock enabled. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock.html).
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when Object Lock is configured to expire.
    public var objectLockRetainUntilDate: ClientRuntime.Date?
    /// The count of parts this object has.
    public var partsCount: Swift.Int?
    /// Indicates if request involves bucket that is either a source or destination in a Replication rule. For more information about S3 Replication, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html).
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Route prefix to the HTTP URL generated.
    /// This member is required.
    public var requestRoute: Swift.String?
    /// A single use encrypted token that maps WriteGetObjectResponse to the end user GetObject request.
    /// This member is required.
    public var requestToken: Swift.String?
    /// Provides information about object restoration operation and expiration time of the restored object copy.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when storing requested object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Encryption algorithm used if server-side encryption with a customer-provided encryption key was specified for object stored in Amazon S3.
    public var sseCustomerAlgorithm: Swift.String?
    /// 128-bit MD5 digest of customer-provided encryption key used in Amazon S3 to encrypt data stored in S3. For more information, see [Protecting data using server-side encryption with customer-provided encryption keys (SSE-C)](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html).
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, specifies the ID (Key ID, Key ARN, or Key Alias) of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric encryption customer managed key that was used for stored in Amazon S3 object.
    public var ssekmsKeyId: Swift.String?
    /// The integer status code for an HTTP response of a corresponding GetObject request. The following is a list of status codes.
    ///
    /// * 200 - OK
    ///
    /// * 206 - Partial Content
    ///
    /// * 304 - Not Modified
    ///
    /// * 400 - Bad Request
    ///
    /// * 401 - Unauthorized
    ///
    /// * 403 - Forbidden
    ///
    /// * 404 - Not Found
    ///
    /// * 405 - Method Not Allowed
    ///
    /// * 409 - Conflict
    ///
    /// * 411 - Length Required
    ///
    /// * 412 - Precondition Failed
    ///
    /// * 416 - Range Not Satisfiable
    ///
    /// * 500 - Internal Server Error
    ///
    /// * 503 - Service Unavailable
    public var statusCode: Swift.Int?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html).
    public var storageClass: S3ClientTypes.StorageClass?
    /// The number of tags, if any, on the object.
    public var tagCount: Swift.Int?
    /// An ID used to reference a specific version of the object.
    public var versionId: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        errorCode: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        requestRoute: Swift.String? = nil,
        requestToken: Swift.String? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        statusCode: Swift.Int? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.requestRoute = requestRoute
        self.requestToken = requestToken
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.statusCode = statusCode
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
    }
}

struct WriteGetObjectResponseInputBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension WriteGetObjectResponseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.data("".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension WriteGetObjectResponseOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct WriteGetObjectResponseOutput: Swift.Equatable {

    public init() { }
}

enum WriteGetObjectResponseOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError.makeError(from: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, requestID2: httpResponse.requestId2, typeName: restXMLError.errorCode)
        }
    }
}
