// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension FSxClientTypes.ActiveDirectoryBackupAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryId = "ActiveDirectoryId"
        case domainName = "DomainName"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryId = self.activeDirectoryId {
            try encodeContainer.encode(activeDirectoryId, forKey: .activeDirectoryId)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let activeDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeDirectoryId)
        activeDirectoryId = activeDirectoryIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension FSxClientTypes {
    /// The Microsoft Active Directory attributes of the Amazon FSx for Windows File Server file system.
    public struct ActiveDirectoryBackupAttributes: Swift.Equatable {
        /// The ID of the Amazon Web Services Managed Microsoft Active Directory instance to which the file system is joined.
        public var activeDirectoryId: Swift.String?
        /// The fully qualified domain name of the self-managed Active Directory directory.
        public var domainName: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?

        public init (
            activeDirectoryId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            resourceARN: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.domainName = domainName
            self.resourceARN = resourceARN
        }
    }

}

extension ActiveDirectoryError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActiveDirectoryErrorBody = try responseDecoder.decode(responseBody: data)
            self.activeDirectoryId = output.activeDirectoryId
            self.message = output.message
            self.type = output.type
        } else {
            self.activeDirectoryId = nil
            self.message = nil
            self.type = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An Active Directory error.
public struct ActiveDirectoryError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The directory ID of the directory that an error pertains to.
    /// This member is required.
    public var activeDirectoryId: Swift.String?
    /// A detailed error message.
    public var message: Swift.String?
    /// The type of Active Directory error.
    public var type: FSxClientTypes.ActiveDirectoryErrorType?

    public init (
        activeDirectoryId: Swift.String? = nil,
        message: Swift.String? = nil,
        type: FSxClientTypes.ActiveDirectoryErrorType? = nil
    )
    {
        self.activeDirectoryId = activeDirectoryId
        self.message = message
        self.type = type
    }
}

struct ActiveDirectoryErrorBody: Swift.Equatable {
    let activeDirectoryId: Swift.String?
    let type: FSxClientTypes.ActiveDirectoryErrorType?
    let message: Swift.String?
}

extension ActiveDirectoryErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryId = "ActiveDirectoryId"
        case message = "Message"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeDirectoryId)
        activeDirectoryId = activeDirectoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ActiveDirectoryErrorType.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// The type of error relating to Microsoft Active Directory. NOT_FOUND means that no directory was found by specifying the given directory. INCOMPATIBLE_MODE means that the directory specified is not a Microsoft AD directory. WRONG_VPC means that the specified directory isn't accessible from the specified VPC. WRONG_STAGE means that the specified directory isn't currently in the ACTIVE state.
    public enum ActiveDirectoryErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domainNotFound
        case incompatibleDomainMode
        case invalidDomainStage
        case wrongVpc
        case sdkUnknown(Swift.String)

        public static var allCases: [ActiveDirectoryErrorType] {
            return [
                .domainNotFound,
                .incompatibleDomainMode,
                .invalidDomainStage,
                .wrongVpc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domainNotFound: return "DOMAIN_NOT_FOUND"
            case .incompatibleDomainMode: return "INCOMPATIBLE_DOMAIN_MODE"
            case .invalidDomainStage: return "INVALID_DOMAIN_STAGE"
            case .wrongVpc: return "WRONG_VPC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActiveDirectoryErrorType(rawValue: rawValue) ?? ActiveDirectoryErrorType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.AdministrativeAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActionType = "AdministrativeActionType"
        case failureDetails = "FailureDetails"
        case progressPercent = "ProgressPercent"
        case requestTime = "RequestTime"
        case status = "Status"
        case targetFileSystemValues = "TargetFileSystemValues"
        case targetSnapshotValues = "TargetSnapshotValues"
        case targetVolumeValues = "TargetVolumeValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActionType = self.administrativeActionType {
            try encodeContainer.encode(administrativeActionType.rawValue, forKey: .administrativeActionType)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let progressPercent = self.progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let requestTime = self.requestTime {
            try encodeContainer.encodeTimestamp(requestTime, format: .epochSeconds, forKey: .requestTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetFileSystemValues = self.targetFileSystemValues {
            try encodeContainer.encode(targetFileSystemValues, forKey: .targetFileSystemValues)
        }
        if let targetSnapshotValues = self.targetSnapshotValues {
            try encodeContainer.encode(targetSnapshotValues, forKey: .targetSnapshotValues)
        }
        if let targetVolumeValues = self.targetVolumeValues {
            try encodeContainer.encode(targetVolumeValues, forKey: .targetVolumeValues)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let administrativeActionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AdministrativeActionType.self, forKey: .administrativeActionType)
        administrativeActionType = administrativeActionTypeDecoded
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
        let requestTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .requestTime)
        requestTime = requestTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let targetFileSystemValuesDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .targetFileSystemValues)
        targetFileSystemValues = targetFileSystemValuesDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AdministrativeActionFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let targetVolumeValuesDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .targetVolumeValues)
        targetVolumeValues = targetVolumeValuesDecoded
        let targetSnapshotValuesDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Snapshot.self, forKey: .targetSnapshotValues)
        targetSnapshotValues = targetSnapshotValuesDecoded
    }
}

extension FSxClientTypes {
    /// Describes a specific Amazon FSx administrative action for the current Windows, Lustre, or OpenZFS file system.
    public struct AdministrativeAction: Swift.Equatable {
        /// Describes the type of administrative action, as follows:
        ///
        /// * FILE_SYSTEM_UPDATE - A file system update administrative action initiated from the Amazon FSx console, API (UpdateFileSystem), or CLI (update-file-system).
        ///
        /// * STORAGE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's storage capacity has been completed successfully, a STORAGE_OPTIMIZATION task starts.
        ///
        /// * For Windows and ONTAP, storage optimization is the process of migrating the file system data to newer larger disks.
        ///
        /// * For Lustre, storage optimization consists of rebalancing the data across the existing and newly added file servers.
        ///
        ///
        /// You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSx for Windows File Server User Guide, [Managing storage and throughput capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the Amazon FSx for Lustre User Guide, and [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
        ///
        /// * FILE_SYSTEM_ALIAS_ASSOCIATION - A file system update to associate a new Domain Name System (DNS) alias with the file system. For more information, see [ AssociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_AssociateFileSystemAliases.html).
        ///
        /// * FILE_SYSTEM_ALIAS_DISASSOCIATION - A file system update to disassociate a DNS alias from the file system. For more information, see [DisassociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_DisassociateFileSystemAliases.html).
        ///
        /// * VOLUME_UPDATE - A volume update to an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateVolume), or CLI (update-volume).
        ///
        /// * VOLUME_RESTORE - An Amazon FSx for OpenZFS volume is returned to the state saved by the specified snapshot, initiated from an API (RestoreVolumeFromSnapshot) or CLI (restore-volume-from-snapshot).
        ///
        /// * SNAPSHOT_UPDATE - A snapshot update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateSnapshot), or CLI (update-snapshot).
        ///
        /// * RELEASE_NFS_V3_LOCKS - Tracks the release of Network File System (NFS) V3 locks on an Amazon FSx for OpenZFS file system.
        public var administrativeActionType: FSxClientTypes.AdministrativeActionType?
        /// Provides information about a failed administrative action.
        public var failureDetails: FSxClientTypes.AdministrativeActionFailureDetails?
        /// The percentage-complete status of a STORAGE_OPTIMIZATION administrative action. Does not apply to any other administrative action type.
        public var progressPercent: Swift.Int?
        /// The time that the administrative action request was received.
        public var requestTime: ClientRuntime.Date?
        /// Describes the status of the administrative action, as follows:
        ///
        /// * FAILED - Amazon FSx failed to process the administrative action successfully.
        ///
        /// * IN_PROGRESS - Amazon FSx is processing the administrative action.
        ///
        /// * PENDING - Amazon FSx is waiting to process the administrative action.
        ///
        /// * COMPLETED - Amazon FSx has finished processing the administrative task.
        ///
        /// * UPDATED_OPTIMIZING - For a storage-capacity increase update, Amazon FSx has updated the file system with the new storage capacity, and is now performing the storage-optimization process.
        public var status: FSxClientTypes.Status?
        /// Describes the target value for the administration action, provided in the UpdateFileSystem operation. Returned for FILE_SYSTEM_UPDATE administrative actions.
        public var targetFileSystemValues: FSxClientTypes.FileSystem?
        /// A snapshot of an Amazon FSx for OpenZFS volume.
        public var targetSnapshotValues: FSxClientTypes.Snapshot?
        /// Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
        public var targetVolumeValues: FSxClientTypes.Volume?

        public init (
            administrativeActionType: FSxClientTypes.AdministrativeActionType? = nil,
            failureDetails: FSxClientTypes.AdministrativeActionFailureDetails? = nil,
            progressPercent: Swift.Int? = nil,
            requestTime: ClientRuntime.Date? = nil,
            status: FSxClientTypes.Status? = nil,
            targetFileSystemValues: FSxClientTypes.FileSystem? = nil,
            targetSnapshotValues: FSxClientTypes.Snapshot? = nil,
            targetVolumeValues: FSxClientTypes.Volume? = nil
        )
        {
            self.administrativeActionType = administrativeActionType
            self.failureDetails = failureDetails
            self.progressPercent = progressPercent
            self.requestTime = requestTime
            self.status = status
            self.targetFileSystemValues = targetFileSystemValues
            self.targetSnapshotValues = targetSnapshotValues
            self.targetVolumeValues = targetVolumeValues
        }
    }

}

extension FSxClientTypes.AdministrativeActionFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// Provides information about a failed administrative action.
    public struct AdministrativeActionFailureDetails: Swift.Equatable {
        /// Error message providing details about the failed administrative action.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {
    /// Describes the type of administrative action, as follows:
    ///
    /// * FILE_SYSTEM_UPDATE - A file system update administrative action initiated from the Amazon FSx console, API (UpdateFileSystem), or CLI (update-file-system).
    ///
    /// * STORAGE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's storage capacity has been completed successfully, a STORAGE_OPTIMIZATION task starts.
    ///
    /// * For Windows and ONTAP, storage optimization is the process of migrating the file system data to newer larger disks.
    ///
    /// * For Lustre, storage optimization consists of rebalancing the data across the existing and newly added file servers.
    ///
    ///
    /// You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSx for Windows File Server User Guide, [Managing storage and throughput capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the Amazon FSx for Lustre User Guide, and [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
    ///
    /// * FILE_SYSTEM_ALIAS_ASSOCIATION - A file system update to associate a new Domain Name System (DNS) alias with the file system. For more information, see [ AssociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_AssociateFileSystemAliases.html).
    ///
    /// * FILE_SYSTEM_ALIAS_DISASSOCIATION - A file system update to disassociate a DNS alias from the file system. For more information, see [DisassociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_DisassociateFileSystemAliases.html).
    ///
    /// * VOLUME_UPDATE - A volume update to an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateVolume), or CLI (update-volume).
    ///
    /// * VOLUME_RESTORE - An Amazon FSx for OpenZFS volume is returned to the state saved by the specified snapshot, initiated from an API (RestoreVolumeFromSnapshot) or CLI (restore-volume-from-snapshot).
    ///
    /// * SNAPSHOT_UPDATE - A snapshot update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateSnapshot), or CLI (update-snapshot).
    ///
    /// * RELEASE_NFS_V3_LOCKS - Tracks the release of Network File System (NFS) V3 locks on an Amazon FSx for OpenZFS file system.
    public enum AdministrativeActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileSystemAliasAssociation
        case fileSystemAliasDisassociation
        case fileSystemUpdate
        case releaseNfsV3Locks
        case snapshotUpdate
        case storageOptimization
        case volumeRestore
        case volumeUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [AdministrativeActionType] {
            return [
                .fileSystemAliasAssociation,
                .fileSystemAliasDisassociation,
                .fileSystemUpdate,
                .releaseNfsV3Locks,
                .snapshotUpdate,
                .storageOptimization,
                .volumeRestore,
                .volumeUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileSystemAliasAssociation: return "FILE_SYSTEM_ALIAS_ASSOCIATION"
            case .fileSystemAliasDisassociation: return "FILE_SYSTEM_ALIAS_DISASSOCIATION"
            case .fileSystemUpdate: return "FILE_SYSTEM_UPDATE"
            case .releaseNfsV3Locks: return "RELEASE_NFS_V3_LOCKS"
            case .snapshotUpdate: return "SNAPSHOT_UPDATE"
            case .storageOptimization: return "STORAGE_OPTIMIZATION"
            case .volumeRestore: return "VOLUME_RESTORE"
            case .volumeUpdate: return "VOLUME_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdministrativeActionType(rawValue: rawValue) ?? AdministrativeActionType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.Alias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycle = "Lifecycle"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AliasLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}

extension FSxClientTypes {
    /// A DNS alias that is associated with the file system. You can use a DNS alias to access a file system using user-defined DNS names, in addition to the default DNS name that Amazon FSx assigns to the file system. For more information, see [DNS aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html) in the FSx for Windows File Server User Guide.
    public struct Alias: Swift.Equatable {
        /// Describes the state of the DNS alias.
        ///
        /// * AVAILABLE - The DNS alias is associated with an Amazon FSx file system.
        ///
        /// * CREATING - Amazon FSx is creating the DNS alias and associating it with the file system.
        ///
        /// * CREATE_FAILED - Amazon FSx was unable to associate the DNS alias with the file system.
        ///
        /// * DELETING - Amazon FSx is disassociating the DNS alias from the file system and deleting it.
        ///
        /// * DELETE_FAILED - Amazon FSx was unable to disassociate the DNS alias from the file system.
        public var lifecycle: FSxClientTypes.AliasLifecycle?
        /// The name of the DNS alias. The alias name has to meet the following requirements:
        ///
        /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain, for example, accounting.example.com.
        ///
        /// * Can contain alphanumeric characters, the underscore (_), and the hyphen (-).
        ///
        /// * Cannot start or end with a hyphen.
        ///
        /// * Can start with a numeric.
        ///
        ///
        /// For DNS names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
        public var name: Swift.String?

        public init (
            lifecycle: FSxClientTypes.AliasLifecycle? = nil,
            name: Swift.String? = nil
        )
        {
            self.lifecycle = lifecycle
            self.name = name
        }
    }

}

extension FSxClientTypes {
    public enum AliasLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [AliasLifecycle] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AliasLifecycle(rawValue: rawValue) ?? AliasLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension AssociateFileSystemAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for alternatednsname0 in aliases {
                try aliasesContainer.encode(alternatednsname0)
            }
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
    }
}

extension AssociateFileSystemAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object specifying one or more DNS alias names to associate with an Amazon FSx for Windows File Server file system.
public struct AssociateFileSystemAliasesInput: Swift.Equatable {
    /// An array of one or more DNS alias names to associate with the file system. The alias name has to comply with the following formatting requirements:
    ///
    /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain , for example, accounting.corp.example.com.
    ///
    /// * Can contain alphanumeric characters and the hyphen (-).
    ///
    /// * Cannot start or end with a hyphen.
    ///
    /// * Can start with a numeric.
    ///
    ///
    /// For DNS alias names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
    /// This member is required.
    public var aliases: [Swift.String]?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the file system with which you want to associate one or more DNS aliases.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init (
        aliases: [Swift.String]? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

struct AssociateFileSystemAliasesInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileSystemId: Swift.String?
    let aliases: [Swift.String]?
}

extension AssociateFileSystemAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .aliases)
        var aliasesDecoded0:[Swift.String]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Swift.String]()
            for string0 in aliasesContainer {
                if let string0 = string0 {
                    aliasesDecoded0?.append(string0)
                }
            }
        }
        aliases = aliasesDecoded0
    }
}

extension AssociateFileSystemAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateFileSystemAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateFileSystemAliasesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateFileSystemAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateFileSystemAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
        } else {
            self.aliases = nil
        }
    }
}

/// The system generated response showing the DNS aliases that Amazon FSx is attempting to associate with the file system. Use the API operation to monitor the status of the aliases Amazon FSx is associating with the file system. It can take up to 2.5 minutes for the alias status to change from CREATING to AVAILABLE.
public struct AssociateFileSystemAliasesOutputResponse: Swift.Equatable {
    /// An array of the DNS aliases that Amazon FSx is associating with the file system.
    public var aliases: [FSxClientTypes.Alias]?

    public init (
        aliases: [FSxClientTypes.Alias]? = nil
    )
    {
        self.aliases = aliases
    }
}

struct AssociateFileSystemAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [FSxClientTypes.Alias]?
}

extension AssociateFileSystemAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([FSxClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[FSxClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [FSxClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
    }
}

extension FSxClientTypes.AutoExportPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for eventtype0 in events {
                try eventsContainer.encode(eventtype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([FSxClientTypes.EventType?].self, forKey: .events)
        var eventsDecoded0:[FSxClientTypes.EventType]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [FSxClientTypes.EventType]()
            for enum0 in eventsContainer {
                if let enum0 = enum0 {
                    eventsDecoded0?.append(enum0)
                }
            }
        }
        events = eventsDecoded0
    }
}

extension FSxClientTypes {
    /// Describes a data repository association's automatic export policy. The AutoExportPolicy defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file. This AutoExportPolicy is supported only for Amazon FSx for Lustre file systems with the Persistent_2 deployment type.
    public struct AutoExportPolicy: Swift.Equatable {
        /// The AutoExportPolicy can have the following event values:
        ///
        /// * NEW - New files and directories are automatically exported to the data repository as they are added to the file system.
        ///
        /// * CHANGED - Changes to files and directories on the file system are automatically exported to the data repository.
        ///
        /// * DELETED - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
        ///
        ///
        /// You can define any combination of event types for your AutoExportPolicy.
        public var events: [FSxClientTypes.EventType]?

        public init (
            events: [FSxClientTypes.EventType]? = nil
        )
        {
            self.events = events
        }
    }

}

extension FSxClientTypes.AutoImportPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for eventtype0 in events {
                try eventsContainer.encode(eventtype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([FSxClientTypes.EventType?].self, forKey: .events)
        var eventsDecoded0:[FSxClientTypes.EventType]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [FSxClientTypes.EventType]()
            for enum0 in eventsContainer {
                if let enum0 = enum0 {
                    eventsDecoded0?.append(enum0)
                }
            }
        }
        events = eventsDecoded0
    }
}

extension FSxClientTypes {
    /// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket. The AutoImportPolicy is supported only for Amazon FSx for Lustre file systems with the Persistent_2 deployment type.
    public struct AutoImportPolicy: Swift.Equatable {
        /// The AutoImportPolicy can have the following event values:
        ///
        /// * NEW - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * CHANGED - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
        ///
        /// * DELETED - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
        ///
        ///
        /// You can define any combination of event types for your AutoImportPolicy.
        public var events: [FSxClientTypes.EventType]?

        public init (
            events: [FSxClientTypes.EventType]? = nil
        )
        {
            self.events = events
        }
    }

}

extension FSxClientTypes {
    public enum AutoImportPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case new
        case newChanged
        case newChangedDeleted
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoImportPolicyType] {
            return [
                .new,
                .newChanged,
                .newChangedDeleted,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .new: return "NEW"
            case .newChanged: return "NEW_CHANGED"
            case .newChangedDeleted: return "NEW_CHANGED_DELETED"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoImportPolicyType(rawValue: rawValue) ?? AutoImportPolicyType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.Backup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case creationTime = "CreationTime"
        case directoryInformation = "DirectoryInformation"
        case failureDetails = "FailureDetails"
        case fileSystem = "FileSystem"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case ownerId = "OwnerId"
        case progressPercent = "ProgressPercent"
        case resourceARN = "ResourceARN"
        case resourceType = "ResourceType"
        case sourceBackupId = "SourceBackupId"
        case sourceBackupRegion = "SourceBackupRegion"
        case tags = "Tags"
        case type = "Type"
        case volume = "Volume"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let directoryInformation = self.directoryInformation {
            try encodeContainer.encode(directoryInformation, forKey: .directoryInformation)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystem = self.fileSystem {
            try encodeContainer.encode(fileSystem, forKey: .fileSystem)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let progressPercent = self.progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceBackupId = self.sourceBackupId {
            try encodeContainer.encode(sourceBackupId, forKey: .sourceBackupId)
        }
        if let sourceBackupRegion = self.sourceBackupRegion {
            try encodeContainer.encode(sourceBackupRegion, forKey: .sourceBackupRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let volume = self.volume {
            try encodeContainer.encode(volume, forKey: .volume)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupType.self, forKey: .type)
        type = typeDecoded
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
        let directoryInformationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ActiveDirectoryBackupAttributes.self, forKey: .directoryInformation)
        directoryInformation = directoryInformationDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let sourceBackupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupRegion)
        sourceBackupRegion = sourceBackupRegionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let volumeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .volume)
        volume = volumeDecoded
    }
}

extension FSxClientTypes {
    /// A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
    public struct Backup: Swift.Equatable {
        /// The ID of the backup.
        /// This member is required.
        public var backupId: Swift.String?
        /// The time when a particular backup was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.
        public var directoryInformation: FSxClientTypes.ActiveDirectoryBackupAttributes?
        /// Details explaining any failures that occurred when creating a backup.
        public var failureDetails: FSxClientTypes.BackupFailureDetails?
        /// The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.
        /// This member is required.
        public var fileSystem: FSxClientTypes.FileSystem?
        /// The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the backup.
        ///
        /// * AVAILABLE - The backup is fully available.
        ///
        /// * PENDING - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.
        ///
        /// * CREATING - Amazon FSx is creating the backup.
        ///
        /// * TRANSFERRING - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.
        ///
        /// * COPYING - Amazon FSx is copying the backup.
        ///
        /// * DELETED - Amazon FSx deleted the backup and it's no longer available.
        ///
        /// * FAILED - Amazon FSx couldn't finish the backup.
        /// This member is required.
        public var lifecycle: FSxClientTypes.BackupLifecycle?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The current percent of progress of an asynchronous task.
        public var progressPercent: Swift.Int?
        /// The Amazon Resource Name (ARN) for the backup resource.
        public var resourceARN: Swift.String?
        /// Specifies the resource type that's backed up.
        public var resourceType: FSxClientTypes.ResourceType?
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var sourceBackupId: Swift.String?
        /// The source Region of the backup. Specifies the Region from where this backup is copied.
        public var sourceBackupRegion: Swift.String?
        /// The tags associated with a particular file system.
        public var tags: [FSxClientTypes.Tag]?
        /// The type of the file-system backup.
        /// This member is required.
        public var type: FSxClientTypes.BackupType?
        /// Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
        public var volume: FSxClientTypes.Volume?

        public init (
            backupId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            directoryInformation: FSxClientTypes.ActiveDirectoryBackupAttributes? = nil,
            failureDetails: FSxClientTypes.BackupFailureDetails? = nil,
            fileSystem: FSxClientTypes.FileSystem? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.BackupLifecycle? = nil,
            ownerId: Swift.String? = nil,
            progressPercent: Swift.Int? = nil,
            resourceARN: Swift.String? = nil,
            resourceType: FSxClientTypes.ResourceType? = nil,
            sourceBackupId: Swift.String? = nil,
            sourceBackupRegion: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            type: FSxClientTypes.BackupType? = nil,
            volume: FSxClientTypes.Volume? = nil
        )
        {
            self.backupId = backupId
            self.creationTime = creationTime
            self.directoryInformation = directoryInformation
            self.failureDetails = failureDetails
            self.fileSystem = fileSystem
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.ownerId = ownerId
            self.progressPercent = progressPercent
            self.resourceARN = resourceARN
            self.resourceType = resourceType
            self.sourceBackupId = sourceBackupId
            self.sourceBackupRegion = sourceBackupRegion
            self.tags = tags
            self.type = type
            self.volume = volume
        }
    }

}

extension BackupBeingCopied {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupBeingCopiedBody = try responseDecoder.decode(responseBody: data)
            self.backupId = output.backupId
            self.message = output.message
        } else {
            self.backupId = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't delete a backup while it's being copied.
public struct BackupBeingCopied: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The ID of the source backup. Specifies the backup that you are copying.
    public var backupId: Swift.String?
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        backupId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.backupId = backupId
        self.message = message
    }
}

struct BackupBeingCopiedBody: Swift.Equatable {
    let message: Swift.String?
    let backupId: Swift.String?
}

extension BackupBeingCopiedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
    }
}

extension FSxClientTypes.BackupFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// If backup creation fails, this structure contains the details of that failure.
    public struct BackupFailureDetails: Swift.Equatable {
        /// A message describing the backup-creation failure.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension BackupInProgress {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupInProgressBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Another backup is already under way. Wait for completion before initiating additional backups of this file system.
public struct BackupInProgress: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BackupInProgressBody: Swift.Equatable {
    let message: Swift.String?
}

extension BackupInProgressBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// The lifecycle status of the backup.
    ///
    /// * AVAILABLE - The backup is fully available.
    ///
    /// * PENDING - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.
    ///
    /// * CREATING - Amazon FSx is creating the new user-initiated backup.
    ///
    /// * TRANSFERRING - For user-initiated backups on Lustre file systems only; Amazon FSx is backing up the file system.
    ///
    /// * COPYING - Amazon FSx is copying the backup.
    ///
    /// * DELETED - Amazon FSx deleted the backup and it's no longer available.
    ///
    /// * FAILED - Amazon FSx couldn't finish the backup.
    public enum BackupLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case copying
        case creating
        case deleted
        case failed
        case pending
        case transferring
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupLifecycle] {
            return [
                .available,
                .copying,
                .creating,
                .deleted,
                .failed,
                .pending,
                .transferring,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .transferring: return "TRANSFERRING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupLifecycle(rawValue: rawValue) ?? BackupLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension BackupNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No Amazon FSx backups were found based upon the supplied parameters.
public struct BackupNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BackupNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension BackupNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BackupRestoring {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupRestoringBody = try responseDecoder.decode(responseBody: data)
            self.fileSystemId = output.fileSystemId
            self.message = output.message
        } else {
            self.fileSystemId = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't delete a backup while it's being used to restore a file system.
public struct BackupRestoring: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The ID of a file system being restored from the backup.
    public var fileSystemId: Swift.String?
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        fileSystemId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.fileSystemId = fileSystemId
        self.message = message
    }
}

struct BackupRestoringBody: Swift.Equatable {
    let message: Swift.String?
    let fileSystemId: Swift.String?
}

extension BackupRestoringBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemId = "FileSystemId"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
    }
}

extension FSxClientTypes {
    /// The type of the backup.
    public enum BackupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case awsBackup
        case userInitiated
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupType] {
            return [
                .automatic,
                .awsBackup,
                .userInitiated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .awsBackup: return "AWS_BACKUP"
            case .userInitiated: return "USER_INITIATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupType(rawValue: rawValue) ?? BackupType.sdkUnknown(rawValue)
        }
    }
}

extension BadRequest {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A generic error indicating a failure with a client request.
public struct BadRequest: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancelDataRepositoryTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId = "TaskId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

extension CancelDataRepositoryTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Cancels a data repository task.
public struct CancelDataRepositoryTaskInput: Swift.Equatable {
    /// Specifies the data repository task to cancel.
    /// This member is required.
    public var taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelDataRepositoryTaskInputBody: Swift.Equatable {
    let taskId: Swift.String?
}

extension CancelDataRepositoryTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId = "TaskId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension CancelDataRepositoryTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelDataRepositoryTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryTaskEnded" : self = .dataRepositoryTaskEnded(try DataRepositoryTaskEnded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryTaskNotFound" : self = .dataRepositoryTaskNotFound(try DataRepositoryTaskNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelDataRepositoryTaskOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryTaskEnded(DataRepositoryTaskEnded)
    case dataRepositoryTaskNotFound(DataRepositoryTaskNotFound)
    case internalServerError(InternalServerError)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelDataRepositoryTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelDataRepositoryTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycle = output.lifecycle
            self.taskId = output.taskId
        } else {
            self.lifecycle = nil
            self.taskId = nil
        }
    }
}

public struct CancelDataRepositoryTaskOutputResponse: Swift.Equatable {
    /// The lifecycle status of the data repository task, as follows:
    ///
    /// * PENDING - Amazon FSx has not started the task.
    ///
    /// * EXECUTING - Amazon FSx is processing the task.
    ///
    /// * FAILED - Amazon FSx was not able to complete the task. For example, there may be files the task failed to process. The [DataRepositoryTaskFailureDetails] property provides more information about task failures.
    ///
    /// * SUCCEEDED - FSx completed the task successfully.
    ///
    /// * CANCELED - Amazon FSx canceled the task and it did not complete.
    ///
    /// * CANCELING - FSx is in process of canceling the task.
    public var lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
    /// The ID of the task being canceled.
    public var taskId: Swift.String?

    public init (
        lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.taskId = taskId
    }
}

struct CancelDataRepositoryTaskOutputResponseBody: Swift.Equatable {
    let lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
    let taskId: Swift.String?
}

extension CancelDataRepositoryTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycle = "Lifecycle"
        case taskId = "TaskId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension FSxClientTypes.CompletionReport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case format = "Format"
        case path = "Path"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let formatDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ReportFormat.self, forKey: .format)
        format = formatDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ReportScope.self, forKey: .scope)
        scope = scopeDecoded
    }
}

extension FSxClientTypes {
    /// Provides a report detailing the data repository task results of the files processed that match the criteria specified in the report Scope parameter. FSx delivers the report to the file system's linked data repository in Amazon S3, using the path specified in the report Path parameter. You can specify whether or not a report gets generated for a task using the Enabled parameter.
    public struct CompletionReport: Swift.Equatable {
        /// Set Enabled to True to generate a CompletionReport when the task completes. If set to true, then you need to provide a report Scope, Path, and Format. Set Enabled to False if you do not want a CompletionReport generated when the task completes.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Required if Enabled is set to true. Specifies the format of the CompletionReport. REPORT_CSV_20191124 is the only format currently supported. When Format is set to REPORT_CSV_20191124, the CompletionReport is provided in CSV format, and is delivered to {path}/task-{id}/failures.csv.
        public var format: FSxClientTypes.ReportFormat?
        /// Required if Enabled is set to true. Specifies the location of the report on the file system's linked S3 data repository. An absolute path that defines where the completion report will be stored in the destination location. The Path you provide must be located within the file system’s ExportPath. An example Path value is "s3://myBucket/myExportPath/optionalPrefix". The report provides the following information for each file in the report: FilePath, FileStatus, and ErrorCode. To learn more about a file system's ExportPath, see .
        public var path: Swift.String?
        /// Required if Enabled is set to true. Specifies the scope of the CompletionReport; FAILED_FILES_ONLY is the only scope currently supported. When Scope is set to FAILED_FILES_ONLY, the CompletionReport only contains information about files that the data repository task failed to process.
        public var scope: FSxClientTypes.ReportScope?

        public init (
            enabled: Swift.Bool? = nil,
            format: FSxClientTypes.ReportFormat? = nil,
            path: Swift.String? = nil,
            scope: FSxClientTypes.ReportScope? = nil
        )
        {
            self.enabled = enabled
            self.format = format
            self.path = path
            self.scope = scope
        }
    }

}

extension CopyBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case sourceBackupId = "SourceBackupId"
        case sourceRegion = "SourceRegion"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let copyTags = self.copyTags {
            try encodeContainer.encode(copyTags, forKey: .copyTags)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let sourceBackupId = self.sourceBackupId {
            try encodeContainer.encode(sourceBackupId, forKey: .sourceBackupId)
        }
        if let sourceRegion = self.sourceRegion {
            try encodeContainer.encode(sourceRegion, forKey: .sourceRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CopyBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CopyBackupInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// A Boolean flag indicating whether tags from the source backup should be copied to the backup copy. This value defaults to false. If you set CopyTags to true and the source backup has existing tags, you can use the Tags parameter to create new tags, provided that the sum of the source backup tags and the new tags doesn't exceed 50. Both sets of tags are merged. If there are tag conflicts (for example, two tags with the same key but different values), the tags created with the Tags parameter take precedence.
    public var copyTags: Swift.Bool?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The ID of the source backup. Specifies the ID of the backup that's being copied.
    /// This member is required.
    public var sourceBackupId: Swift.String?
    /// The source Amazon Web Services Region of the backup. Specifies the Amazon Web Services Region from which the backup is being copied. The source and destination Regions must be in the same Amazon Web Services partition. If you don't specify a Region, SourceRegion defaults to the Region where the request is sent from (in-Region copy).
    public var sourceRegion: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        copyTags: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceBackupId: Swift.String? = nil,
        sourceRegion: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyTags = copyTags
        self.kmsKeyId = kmsKeyId
        self.sourceBackupId = sourceBackupId
        self.sourceRegion = sourceRegion
        self.tags = tags
    }
}

struct CopyBackupInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let sourceBackupId: Swift.String?
    let sourceRegion: Swift.String?
    let kmsKeyId: Swift.String?
    let copyTags: Swift.Bool?
    let tags: [FSxClientTypes.Tag]?
}

extension CopyBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case sourceBackupId = "SourceBackupId"
        case sourceRegion = "SourceRegion"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let copyTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTags)
        copyTags = copyTagsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CopyBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CopyBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupNotFound" : self = .backupNotFound(try BackupNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleRegionForMultiAZ" : self = .incompatibleRegionForMultiAZ(try IncompatibleRegionForMultiAZ(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDestinationKmsKey" : self = .invalidDestinationKmsKey(try InvalidDestinationKmsKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRegion" : self = .invalidRegion(try InvalidRegion(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSourceKmsKey" : self = .invalidSourceKmsKey(try InvalidSourceKmsKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceBackupUnavailable" : self = .sourceBackupUnavailable(try SourceBackupUnavailable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CopyBackupOutputError: Swift.Error, Swift.Equatable {
    case backupNotFound(BackupNotFound)
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case incompatibleRegionForMultiAZ(IncompatibleRegionForMultiAZ)
    case internalServerError(InternalServerError)
    case invalidDestinationKmsKey(InvalidDestinationKmsKey)
    case invalidRegion(InvalidRegion)
    case invalidSourceKmsKey(InvalidSourceKmsKey)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case sourceBackupUnavailable(SourceBackupUnavailable)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopyBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CopyBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backup = output.backup
        } else {
            self.backup = nil
        }
    }
}

public struct CopyBackupOutputResponse: Swift.Equatable {
    /// A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
    public var backup: FSxClientTypes.Backup?

    public init (
        backup: FSxClientTypes.Backup? = nil
    )
    {
        self.backup = backup
    }
}

struct CopyBackupOutputResponseBody: Swift.Equatable {
    let backup: FSxClientTypes.Backup?
}

extension CopyBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backup = "Backup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Backup.self, forKey: .backup)
        backup = backupDecoded
    }
}

extension CreateBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case tags = "Tags"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }
}

extension CreateBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the CreateBackup operation.
public struct CreateBackupInput: Swift.Equatable {
    /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system to back up.
    public var fileSystemId: Swift.String?
    /// (Optional) The tags to apply to the backup at backup creation. The key value of the Name tag appears in the console as the backup name. If you have set CopyTagsToBackups to true, and you specify one or more tags using the CreateBackup operation, no existing file system tags are copied from the file system to the backup.
    public var tags: [FSxClientTypes.Tag]?
    /// (Optional) The ID of the FSx for ONTAP volume to back up.
    public var volumeId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.tags = tags
        self.volumeId = volumeId
    }
}

struct CreateBackupInputBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let clientRequestToken: Swift.String?
    let tags: [FSxClientTypes.Tag]?
    let volumeId: Swift.String?
}

extension CreateBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case tags = "Tags"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
    }
}

extension CreateBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupInProgress" : self = .backupInProgress(try BackupInProgress(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBackupOutputError: Swift.Error, Swift.Equatable {
    case backupInProgress(BackupInProgress)
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backup = output.backup
        } else {
            self.backup = nil
        }
    }
}

/// The response object for the CreateBackup operation.
public struct CreateBackupOutputResponse: Swift.Equatable {
    /// A description of the backup.
    public var backup: FSxClientTypes.Backup?

    public init (
        backup: FSxClientTypes.Backup? = nil
    )
    {
        self.backup = backup
    }
}

struct CreateBackupOutputResponseBody: Swift.Equatable {
    let backup: FSxClientTypes.Backup?
}

extension CreateBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backup = "Backup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Backup.self, forKey: .backup)
        backup = backupDecoded
    }
}

extension CreateDataRepositoryAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchImportMetaDataOnCreate = "BatchImportMetaDataOnCreate"
        case clientRequestToken = "ClientRequestToken"
        case dataRepositoryPath = "DataRepositoryPath"
        case fileSystemId = "FileSystemId"
        case fileSystemPath = "FileSystemPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case s3 = "S3"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchImportMetaDataOnCreate = self.batchImportMetaDataOnCreate {
            try encodeContainer.encode(batchImportMetaDataOnCreate, forKey: .batchImportMetaDataOnCreate)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataRepositoryPath = self.dataRepositoryPath {
            try encodeContainer.encode(dataRepositoryPath, forKey: .dataRepositoryPath)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemPath = self.fileSystemPath {
            try encodeContainer.encode(fileSystemPath, forKey: .fileSystemPath)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDataRepositoryAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataRepositoryAssociationInput: Swift.Equatable {
    /// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Default is false.
    public var batchImportMetaDataOnCreate: Swift.Bool?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to.
    /// This member is required.
    public var dataRepositoryPath: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory. If you specify only a forward slash (/) as the file system path, you can link only one data repository to the file system. You can only specify "/" as the file system path for the first data repository associated with a file system.
    public var fileSystemPath: Swift.String?
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
    public var importedFileChunkSize: Swift.Int?
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    public var s3: FSxClientTypes.S3DataRepositoryConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        batchImportMetaDataOnCreate: Swift.Bool? = nil,
        clientRequestToken: Swift.String? = nil,
        dataRepositoryPath: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        fileSystemPath: Swift.String? = nil,
        importedFileChunkSize: Swift.Int? = nil,
        s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate
        self.clientRequestToken = clientRequestToken
        self.dataRepositoryPath = dataRepositoryPath
        self.fileSystemId = fileSystemId
        self.fileSystemPath = fileSystemPath
        self.importedFileChunkSize = importedFileChunkSize
        self.s3 = s3
        self.tags = tags
    }
}

struct CreateDataRepositoryAssociationInputBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let fileSystemPath: Swift.String?
    let dataRepositoryPath: Swift.String?
    let batchImportMetaDataOnCreate: Swift.Bool?
    let importedFileChunkSize: Swift.Int?
    let s3: FSxClientTypes.S3DataRepositoryConfiguration?
    let clientRequestToken: Swift.String?
    let tags: [FSxClientTypes.Tag]?
}

extension CreateDataRepositoryAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchImportMetaDataOnCreate = "BatchImportMetaDataOnCreate"
        case clientRequestToken = "ClientRequestToken"
        case dataRepositoryPath = "DataRepositoryPath"
        case fileSystemId = "FileSystemId"
        case fileSystemPath = "FileSystemPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case s3 = "S3"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let fileSystemPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemPath)
        fileSystemPath = fileSystemPathDecoded
        let dataRepositoryPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRepositoryPath)
        dataRepositoryPath = dataRepositoryPathDecoded
        let batchImportMetaDataOnCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchImportMetaDataOnCreate)
        batchImportMetaDataOnCreate = batchImportMetaDataOnCreateDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let s3Decoded = try containerValues.decodeIfPresent(FSxClientTypes.S3DataRepositoryConfiguration.self, forKey: .s3)
        s3 = s3Decoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDataRepositoryAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataRepositoryAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDataRepositoryAssociationOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataRepositoryAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDataRepositoryAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.association = output.association
        } else {
            self.association = nil
        }
    }
}

public struct CreateDataRepositoryAssociationOutputResponse: Swift.Equatable {
    /// The response object returned after the data repository association is created.
    public var association: FSxClientTypes.DataRepositoryAssociation?

    public init (
        association: FSxClientTypes.DataRepositoryAssociation? = nil
    )
    {
        self.association = association
    }
}

struct CreateDataRepositoryAssociationOutputResponseBody: Swift.Equatable {
    let association: FSxClientTypes.DataRepositoryAssociation?
}

extension CreateDataRepositoryAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case association = "Association"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryAssociation.self, forKey: .association)
        association = associationDecoded
    }
}

extension CreateDataRepositoryTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityToRelease = "CapacityToRelease"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case paths = "Paths"
        case report = "Report"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityToRelease = self.capacityToRelease {
            try encodeContainer.encode(capacityToRelease, forKey: .capacityToRelease)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let paths = paths {
            var pathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .paths)
            for datarepositorytaskpath0 in paths {
                try pathsContainer.encode(datarepositorytaskpath0)
            }
        }
        if let report = self.report {
            try encodeContainer.encode(report, forKey: .report)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension CreateDataRepositoryTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataRepositoryTaskInput: Swift.Equatable {
    /// Specifies the amount of data to release, in GiB, by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
    public var capacityToRelease: Swift.Int?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// A list of paths for the data repository task to use when the task is processed. If a path that you provide isn't valid, the task fails.
    ///
    /// * For export tasks, the list contains paths on the Amazon FSx file system from which the files are exported to the Amazon S3 bucket. The default path is the file system root directory. The paths you provide need to be relative to the mount point of the file system. If the mount point is /mnt/fsx and /mnt/fsx/path1 is a directory or file on the file system you want to export, then the path to provide is path1.
    ///
    /// * For import tasks, the list contains paths in the Amazon S3 bucket from which POSIX metadata changes are imported to the Amazon FSx file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix (where myPrefix is optional).
    public var paths: [Swift.String]?
    /// Defines whether or not Amazon FSx provides a CompletionReport once the task has completed. A CompletionReport provides a detailed report on the files that Amazon FSx processed that meet the criteria specified by the Scope parameter. For more information, see [Working with Task Completion Reports](https://docs.aws.amazon.com/fsx/latest/LustreGuide/task-completion-report.html).
    /// This member is required.
    public var report: FSxClientTypes.CompletionReport?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// Specifies the type of data repository task to create.
    /// This member is required.
    public var type: FSxClientTypes.DataRepositoryTaskType?

    public init (
        capacityToRelease: Swift.Int? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        paths: [Swift.String]? = nil,
        report: FSxClientTypes.CompletionReport? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        type: FSxClientTypes.DataRepositoryTaskType? = nil
    )
    {
        self.capacityToRelease = capacityToRelease
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.paths = paths
        self.report = report
        self.tags = tags
        self.type = type
    }
}

struct CreateDataRepositoryTaskInputBody: Swift.Equatable {
    let type: FSxClientTypes.DataRepositoryTaskType?
    let paths: [Swift.String]?
    let fileSystemId: Swift.String?
    let report: FSxClientTypes.CompletionReport?
    let clientRequestToken: Swift.String?
    let tags: [FSxClientTypes.Tag]?
    let capacityToRelease: Swift.Int?
}

extension CreateDataRepositoryTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityToRelease = "CapacityToRelease"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case paths = "Paths"
        case report = "Report"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskType.self, forKey: .type)
        type = typeDecoded
        let pathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .paths)
        var pathsDecoded0:[Swift.String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [Swift.String]()
            for string0 in pathsContainer {
                if let string0 = string0 {
                    pathsDecoded0?.append(string0)
                }
            }
        }
        paths = pathsDecoded0
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let reportDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CompletionReport.self, forKey: .report)
        report = reportDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let capacityToReleaseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityToRelease)
        capacityToRelease = capacityToReleaseDecoded
    }
}

extension CreateDataRepositoryTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataRepositoryTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryTaskExecuting" : self = .dataRepositoryTaskExecuting(try DataRepositoryTaskExecuting(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDataRepositoryTaskOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryTaskExecuting(DataRepositoryTaskExecuting)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataRepositoryTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDataRepositoryTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataRepositoryTask = output.dataRepositoryTask
        } else {
            self.dataRepositoryTask = nil
        }
    }
}

public struct CreateDataRepositoryTaskOutputResponse: Swift.Equatable {
    /// The description of the data repository task that you just created.
    public var dataRepositoryTask: FSxClientTypes.DataRepositoryTask?

    public init (
        dataRepositoryTask: FSxClientTypes.DataRepositoryTask? = nil
    )
    {
        self.dataRepositoryTask = dataRepositoryTask
    }
}

struct CreateDataRepositoryTaskOutputResponseBody: Swift.Equatable {
    let dataRepositoryTask: FSxClientTypes.DataRepositoryTask?
}

extension CreateDataRepositoryTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRepositoryTask = "DataRepositoryTask"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataRepositoryTaskDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTask.self, forKey: .dataRepositoryTask)
        dataRepositoryTask = dataRepositoryTaskDecoded
    }
}

extension CreateFileCacheInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTagsToDataRepositoryAssociations = "CopyTagsToDataRepositoryAssociations"
        case dataRepositoryAssociations = "DataRepositoryAssociations"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let copyTagsToDataRepositoryAssociations = self.copyTagsToDataRepositoryAssociations {
            try encodeContainer.encode(copyTagsToDataRepositoryAssociations, forKey: .copyTagsToDataRepositoryAssociations)
        }
        if let dataRepositoryAssociations = dataRepositoryAssociations {
            var dataRepositoryAssociationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositoryAssociations)
            for filecachedatarepositoryassociation0 in dataRepositoryAssociations {
                try dataRepositoryAssociationsContainer.encode(filecachedatarepositoryassociation0)
            }
        }
        if let fileCacheType = self.fileCacheType {
            try encodeContainer.encode(fileCacheType.rawValue, forKey: .fileCacheType)
        }
        if let fileCacheTypeVersion = self.fileCacheTypeVersion {
            try encodeContainer.encode(fileCacheTypeVersion, forKey: .fileCacheTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupid0)
            }
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateFileCacheInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFileCacheInput: Swift.Equatable {
    /// An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK. By using the idempotent operation, you can retry a CreateFileCache operation without the risk of creating an extra cache. This approach can be useful when an initial call fails in a way that makes it unclear whether a cache was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a cache, the client receives success as long as the parameters are the same.
    public var clientRequestToken: Swift.String?
    /// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
    public var copyTagsToDataRepositoryAssociations: Swift.Bool?
    /// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements:
    ///
    /// * All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time.
    ///
    /// * An NFS DRA must link to an NFS file system that supports the NFSv3 protocol.
    ///
    ///
    /// DRA automatic import and automatic export is not supported.
    public var dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]?
    /// The type of cache that you're creating, which must be LUSTRE.
    /// This member is required.
    public var fileCacheType: FSxClientTypes.FileCacheType?
    /// Sets the Lustre version for the cache that you're creating, which must be 2.12.
    /// This member is required.
    public var fileCacheTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The configuration for the Amazon File Cache resource being created.
    public var lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration?
    /// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access. This list isn't returned in later requests to describe the cache.
    public var securityGroupIds: [Swift.String]?
    /// The storage capacity of the cache in gibibytes (GiB). Valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.
    /// This member is required.
    public var storageCapacity: Swift.Int?
    /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
        dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]? = nil,
        fileCacheType: FSxClientTypes.FileCacheType? = nil,
        fileCacheTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
        self.dataRepositoryAssociations = dataRepositoryAssociations
        self.fileCacheType = fileCacheType
        self.fileCacheTypeVersion = fileCacheTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

struct CreateFileCacheInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileCacheType: FSxClientTypes.FileCacheType?
    let fileCacheTypeVersion: Swift.String?
    let storageCapacity: Swift.Int?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let tags: [FSxClientTypes.Tag]?
    let copyTagsToDataRepositoryAssociations: Swift.Bool?
    let kmsKeyId: Swift.String?
    let lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration?
    let dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]?
}

extension CreateFileCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTagsToDataRepositoryAssociations = "CopyTagsToDataRepositoryAssociations"
        case dataRepositoryAssociations = "DataRepositoryAssociations"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheType.self, forKey: .fileCacheType)
        fileCacheType = fileCacheTypeDecoded
        let fileCacheTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheTypeVersion)
        fileCacheTypeVersion = fileCacheTypeVersionDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let copyTagsToDataRepositoryAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToDataRepositoryAssociations)
        copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociationsDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let dataRepositoryAssociationsContainer = try containerValues.decodeIfPresent([FSxClientTypes.FileCacheDataRepositoryAssociation?].self, forKey: .dataRepositoryAssociations)
        var dataRepositoryAssociationsDecoded0:[FSxClientTypes.FileCacheDataRepositoryAssociation]? = nil
        if let dataRepositoryAssociationsContainer = dataRepositoryAssociationsContainer {
            dataRepositoryAssociationsDecoded0 = [FSxClientTypes.FileCacheDataRepositoryAssociation]()
            for structure0 in dataRepositoryAssociationsContainer {
                if let structure0 = structure0 {
                    dataRepositoryAssociationsDecoded0?.append(structure0)
                }
            }
        }
        dataRepositoryAssociations = dataRepositoryAssociationsDecoded0
    }
}

extension FSxClientTypes.CreateFileCacheLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentType = "DeploymentType"
        case metadataConfiguration = "MetadataConfiguration"
        case perUnitStorageThroughput = "PerUnitStorageThroughput"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let metadataConfiguration = self.metadataConfiguration {
            try encodeContainer.encode(metadataConfiguration, forKey: .metadataConfiguration)
        }
        if let perUnitStorageThroughput = self.perUnitStorageThroughput {
            try encodeContainer.encode(perUnitStorageThroughput, forKey: .perUnitStorageThroughput)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perUnitStorageThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .perUnitStorageThroughput)
        perUnitStorageThroughput = perUnitStorageThroughputDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let metadataConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreMetadataConfiguration.self, forKey: .metadataConfiguration)
        metadataConfiguration = metadataConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The Amazon File Cache configuration for the cache that you are creating.
    public struct CreateFileCacheLustreConfiguration: Swift.Equatable {
        /// Specifies the cache deployment type, which must be CACHE_1.
        /// This member is required.
        public var deploymentType: FSxClientTypes.FileCacheLustreDeploymentType?
        /// The configuration for a Lustre MDT (Metadata Target) storage volume.
        /// This member is required.
        public var metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration?
        /// Provisions the amount of read and write throughput for each 1 tebibyte (TiB) of cache storage capacity, in MB/s/TiB. The only supported value is 1000.
        /// This member is required.
        public var perUnitStorageThroughput: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            deploymentType: FSxClientTypes.FileCacheLustreDeploymentType? = nil,
            metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.metadataConfiguration = metadataConfiguration
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension CreateFileCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFileCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNetworkSettings" : self = .invalidNetworkSettings(try InvalidNetworkSettings(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPerUnitStorageThroughput" : self = .invalidPerUnitStorageThroughput(try InvalidPerUnitStorageThroughput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingFileCacheConfiguration" : self = .missingFileCacheConfiguration(try MissingFileCacheConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFileCacheOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case invalidNetworkSettings(InvalidNetworkSettings)
    case invalidPerUnitStorageThroughput(InvalidPerUnitStorageThroughput)
    case missingFileCacheConfiguration(MissingFileCacheConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFileCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFileCacheOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileCache = output.fileCache
        } else {
            self.fileCache = nil
        }
    }
}

public struct CreateFileCacheOutputResponse: Swift.Equatable {
    /// A description of the cache that was created.
    public var fileCache: FSxClientTypes.FileCacheCreating?

    public init (
        fileCache: FSxClientTypes.FileCacheCreating? = nil
    )
    {
        self.fileCache = fileCache
    }
}

struct CreateFileCacheOutputResponseBody: Swift.Equatable {
    let fileCache: FSxClientTypes.FileCacheCreating?
}

extension CreateFileCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCache = "FileCache"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheCreating.self, forKey: .fileCache)
        fileCache = fileCacheDecoded
    }
}

extension CreateFileSystemFromBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemTypeVersion = self.fileSystemTypeVersion {
            try encodeContainer.encode(fileSystemTypeVersion, forKey: .fileSystemTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupid0)
            }
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }
}

extension CreateFileSystemFromBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the CreateFileSystemFromBackup operation.
public struct CreateFileSystemFromBackupInput: Swift.Equatable {
    /// The ID of the source backup. Specifies the backup that you are copying.
    /// This member is required.
    public var backupId: Swift.String?
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Sets the version for the Amazon FSx for Lustre file system that you're creating from a backup. Valid values are 2.10 and 2.12. You don't need to specify FileSystemTypeVersion because it will be applied using the backup's FileSystemTypeVersion setting. If you choose to specify FileSystemTypeVersion when creating from backup, the value must match the backup's FileSystemTypeVersion setting.
    public var fileSystemTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedChunkSize
    ///
    /// * ImportPath
    public var lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    /// The OpenZFS configuration for the file system that's being created.
    public var openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups apply to all network interfaces. This value isn't returned in later DescribeFileSystem requests.
    public var securityGroupIds: [Swift.String]?
    /// Sets the storage capacity of the OpenZFS file system that you're creating from a backup, in gibibytes (GiB). Valid values are from 64 GiB up to 524,288 GiB (512 TiB). However, the value that you specify must be equal to or greater than the backup's storage capacity value. If you don't use the StorageCapacity parameter, the default is the backup's StorageCapacity value. If used to create a file system other than OpenZFS, you must provide a value that matches the backup's StorageCapacity value. If you provide any other value, Amazon FSx responds with a 400 Bad Request.
    public var storageCapacity: Swift.Int?
    /// Sets the storage type for the Windows or OpenZFS file system that you're creating from a backup. Valid values are SSD and HDD.
    ///
    /// * Set to SSD to use solid state drive storage. SSD is supported on all Windows and OpenZFS deployment types.
    ///
    /// * Set to HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 FSx for Windows File Server file system deployment types.
    ///
    ///
    /// The default value is SSD. HDD and SSD storage types have different minimum storage capacity requirements. A restored file system's storage capacity is tied to the file system that was backed up. You can create a file system that uses HDD storage from a backup of a file system that used SSD storage if the original SSD file system had a storage capacity of at least 2000 GiB.
    public var storageType: FSxClientTypes.StorageType?
    /// Specifies the IDs of the subnets that the file system will be accessible from. For Windows MULTI_AZ_1 file system deployment types, provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the WindowsConfiguration > PreferredSubnetID property. Windows SINGLE_AZ_1 and SINGLE_AZ_2 file system deployment types, Lustre file systems, and OpenZFS file systems provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to be applied to the file system at file system creation. The key value of the Name tag appears in the console as the file system name.
    public var tags: [FSxClientTypes.Tag]?
    /// The configuration for this Microsoft Windows file system.
    public var windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?

    public init (
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
        self.fileSystemTypeVersion = fileSystemTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.windowsConfiguration = windowsConfiguration
    }
}

struct CreateFileSystemFromBackupInputBody: Swift.Equatable {
    let backupId: Swift.String?
    let clientRequestToken: Swift.String?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let tags: [FSxClientTypes.Tag]?
    let windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?
    let lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    let storageType: FSxClientTypes.StorageType?
    let kmsKeyId: Swift.String?
    let fileSystemTypeVersion: Swift.String?
    let openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    let storageCapacity: Swift.Int?
}

extension CreateFileSystemFromBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let fileSystemTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemTypeVersion)
        fileSystemTypeVersion = fileSystemTypeVersionDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
    }
}

extension CreateFileSystemFromBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFileSystemFromBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActiveDirectoryError" : self = .activeDirectoryError(try ActiveDirectoryError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFound" : self = .backupNotFound(try BackupNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNetworkSettings" : self = .invalidNetworkSettings(try InvalidNetworkSettings(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPerUnitStorageThroughput" : self = .invalidPerUnitStorageThroughput(try InvalidPerUnitStorageThroughput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingFileSystemConfiguration" : self = .missingFileSystemConfiguration(try MissingFileSystemConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFileSystemFromBackupOutputError: Swift.Error, Swift.Equatable {
    case activeDirectoryError(ActiveDirectoryError)
    case backupNotFound(BackupNotFound)
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case invalidNetworkSettings(InvalidNetworkSettings)
    case invalidPerUnitStorageThroughput(InvalidPerUnitStorageThroughput)
    case missingFileSystemConfiguration(MissingFileSystemConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFileSystemFromBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFileSystemFromBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystem = output.fileSystem
        } else {
            self.fileSystem = nil
        }
    }
}

/// The response object for the CreateFileSystemFromBackup operation.
public struct CreateFileSystemFromBackupOutputResponse: Swift.Equatable {
    /// A description of the file system.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init (
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

struct CreateFileSystemFromBackupOutputResponseBody: Swift.Equatable {
    let fileSystem: FSxClientTypes.FileSystem?
}

extension CreateFileSystemFromBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystem = "FileSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
    }
}

extension CreateFileSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemType = "FileSystemType"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemType = self.fileSystemType {
            try encodeContainer.encode(fileSystemType.rawValue, forKey: .fileSystemType)
        }
        if let fileSystemTypeVersion = self.fileSystemTypeVersion {
            try encodeContainer.encode(fileSystemTypeVersion, forKey: .fileSystemTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupid0)
            }
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }
}

extension CreateFileSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object used to create a new Amazon FSx file system.
public struct CreateFileSystemInput: Swift.Equatable {
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The type of Amazon FSx file system to create. Valid values are WINDOWS, LUSTRE, ONTAP, and OPENZFS.
    /// This member is required.
    public var fileSystemType: FSxClientTypes.FileSystemType?
    /// (Optional) For FSx for Lustre file systems, sets the Lustre version for the file system that you're creating. Valid values are 2.10 and 2.12:
    ///
    /// * 2.10 is supported by the Scratch and Persistent_1 Lustre deployment types.
    ///
    /// * 2.12 is supported by all Lustre deployment types. 2.12 is required when setting FSx for Lustre DeploymentType to PERSISTENT_2.
    ///
    ///
    /// Default value = 2.10, except when DeploymentType is set to PERSISTENT_2, then the default is 2.12. If you set FileSystemTypeVersion to 2.10 for a PERSISTENT_2 Lustre deployment type, the CreateFileSystem operation fails.
    public var fileSystemTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedChunkSize
    ///
    /// * ImportPath
    public var lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    /// The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.
    public var ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration?
    /// The OpenZFS configuration for the file system that's being created.
    public var openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    /// A list of IDs specifying the security groups to apply to all network interfaces created for file system access. This list isn't returned in later requests to describe the file system.
    public var securityGroupIds: [Swift.String]?
    /// Sets the storage capacity of the file system that you're creating, in gibibytes (GiB). FSx for Lustre file systems - The amount of storage capacity that you can configure depends on the value that you set for StorageType and the Lustre DeploymentType, as follows:
    ///
    /// * For SCRATCH_2, PERSISTENT_2 and PERSISTENT_1 deployment types using SSD storage type, the valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.
    ///
    /// * For PERSISTENT_1 HDD file systems, valid values are increments of 6000 GiB for 12 MB/s/TiB file systems and increments of 1800 GiB for 40 MB/s/TiB file systems.
    ///
    /// * For SCRATCH_1 deployment type, valid values are 1200 GiB, 2400 GiB, and increments of 3600 GiB.
    ///
    ///
    /// FSx for ONTAP file systems - The amount of storage capacity that you can configure is from 1024 GiB up to 196,608 GiB (192 TiB). FSx for OpenZFS file systems - The amount of storage capacity that you can configure is from 64 GiB up to 524,288 GiB (512 TiB). FSx for Windows File Server file systems - The amount of storage capacity that you can configure depends on the value that you set for StorageType as follows:
    ///
    /// * For SSD storage, valid values are 32 GiB-65,536 GiB (64 TiB).
    ///
    /// * For HDD storage, valid values are 2000 GiB-65,536 GiB (64 TiB).
    /// This member is required.
    public var storageCapacity: Swift.Int?
    /// Sets the storage type for the file system that you're creating. Valid values are SSD and HDD.
    ///
    /// * Set to SSD to use solid state drive storage. SSD is supported on all Windows, Lustre, ONTAP, and OpenZFS deployment types.
    ///
    /// * Set to HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 Windows file system deployment types, and on PERSISTENT_1 Lustre file system deployment types.
    ///
    ///
    /// Default value is SSD. For more information, see [ Storage type options](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/optimize-fsx-costs.html#storage-type-options) in the FSx for Windows File Server User Guide and [Multiple storage options](https://docs.aws.amazon.com/fsx/latest/LustreGuide/what-is.html#storage-options) in the FSx for Lustre User Guide.
    public var storageType: FSxClientTypes.StorageType?
    /// Specifies the IDs of the subnets that the file system will be accessible from. For Windows and ONTAP MULTI_AZ_1 deployment types,provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the WindowsConfiguration > PreferredSubnetID or OntapConfiguration > PreferredSubnetID properties. For more information about Multi-AZ file system configuration, see [ Availability and durability: Single-AZ and Multi-AZ file systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html) in the Amazon FSx for Windows User Guide and [ Availability and durability](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html) in the Amazon FSx for ONTAP User Guide. For Windows SINGLE_AZ_1 and SINGLE_AZ_2 and all Lustre deployment types, provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to apply to the file system that's being created. The key value of the Name tag appears in the console as the file system name.
    public var tags: [FSxClientTypes.Tag]?
    /// The Microsoft Windows configuration for the file system that's being created.
    public var windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemType: FSxClientTypes.FileSystemType? = nil,
        fileSystemTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration? = nil,
        ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemType = fileSystemType
        self.fileSystemTypeVersion = fileSystemTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.windowsConfiguration = windowsConfiguration
    }
}

struct CreateFileSystemInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileSystemType: FSxClientTypes.FileSystemType?
    let storageCapacity: Swift.Int?
    let storageType: FSxClientTypes.StorageType?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let tags: [FSxClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?
    let lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    let ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration?
    let fileSystemTypeVersion: Swift.String?
    let openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
}

extension CreateFileSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemType = "FileSystemType"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemType.self, forKey: .fileSystemType)
        fileSystemType = fileSystemTypeDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemOntapConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let fileSystemTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemTypeVersion)
        fileSystemTypeVersion = fileSystemTypeVersionDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes.CreateFileSystemLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoImportPolicy = "AutoImportPolicy"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case dataCompressionType = "DataCompressionType"
        case deploymentType = "DeploymentType"
        case driveCacheType = "DriveCacheType"
        case exportPath = "ExportPath"
        case importPath = "ImportPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case logConfiguration = "LogConfiguration"
        case perUnitStorageThroughput = "PerUnitStorageThroughput"
        case rootSquashConfiguration = "RootSquashConfiguration"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoImportPolicy = self.autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy.rawValue, forKey: .autoImportPolicy)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let driveCacheType = self.driveCacheType {
            try encodeContainer.encode(driveCacheType.rawValue, forKey: .driveCacheType)
        }
        if let exportPath = self.exportPath {
            try encodeContainer.encode(exportPath, forKey: .exportPath)
        }
        if let importPath = self.importPath {
            try encodeContainer.encode(importPath, forKey: .importPath)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let perUnitStorageThroughput = self.perUnitStorageThroughput {
            try encodeContainer.encode(perUnitStorageThroughput, forKey: .perUnitStorageThroughput)
        }
        if let rootSquashConfiguration = self.rootSquashConfiguration {
            try encodeContainer.encode(rootSquashConfiguration, forKey: .rootSquashConfiguration)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let importPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importPath)
        importPath = importPathDecoded
        let exportPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportPath)
        exportPath = exportPathDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoImportPolicyType.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let perUnitStorageThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .perUnitStorageThroughput)
        perUnitStorageThroughput = perUnitStorageThroughputDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let driveCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DriveCacheType.self, forKey: .driveCacheType)
        driveCacheType = driveCacheTypeDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreLogCreateConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let rootSquashConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreRootSquashConfiguration.self, forKey: .rootSquashConfiguration)
        rootSquashConfiguration = rootSquashConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedChunkSize
    ///
    /// * ImportPath
    public struct CreateFileSystemLustreConfiguration: Swift.Equatable {
        /// (Optional) Available with Scratch and Persistent_1 deployment types. When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update file and directory listings for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        ///
        ///
        /// For more information, see [ Automatically import updates from your S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/older-deployment-types.html#legacy-auto-import-from-s3). This parameter is not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// (Optional) Not available for use with file systems that are linked to a data repository. A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false. If CopyTagsToBackups is set to true, all file system tags are copied to all automatic and user-initiated backups when the user doesn't specify any backup-specific tags. If CopyTagsToBackups is set to true and you specify one or more backup tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value. (Default = false) For more information, see [ Working with backups](https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html) in the Amazon FSx for Lustre User Guide.
        public var copyTagsToBackups: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Sets the data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - (Default) Data compression is turned off when the file system is created.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html) in the Amazon FSx for Lustre User Guide.
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// (Optional) Choose SCRATCH_1 and SCRATCH_2 deployment types when you need temporary storage and shorter-term processing of data. The SCRATCH_2 deployment type provides in-transit encryption of data and higher burst throughput capacity than SCRATCH_1. Choose PERSISTENT_1 for longer-term storage and for throughput-focused workloads that aren’t latency-sensitive. PERSISTENT_1 supports encryption of data in transit, and is available in all Amazon Web Services Regions in which FSx for Lustre is available. Choose PERSISTENT_2 for longer-term storage and for latency-sensitive workloads that require the highest levels of IOPS/throughput. PERSISTENT_2 supports SSD storage, and offers higher PerUnitStorageThroughput (up to 1000 MB/s/TiB). PERSISTENT_2 is available in a limited number of Amazon Web Services Regions. For more information, and an up-to-date list of Amazon Web Services Regions in which PERSISTENT_2 is available, see [File system deployment options for FSx for Lustre](https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-fsx-lustre.html#lustre-deployment-types) in the Amazon FSx for Lustre User Guide. If you choose PERSISTENT_2, and you set FileSystemTypeVersion to 2.10, the CreateFileSystem operation fails. Encryption of data in transit is automatically turned on when you access SCRATCH_2, PERSISTENT_1 and PERSISTENT_2 file systems from Amazon EC2 instances that [support automatic encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/data-                 protection.html) in the Amazon Web Services Regions where they are available. For more information about encryption in transit for FSx for Lustre file systems, see [Encrypting data in transit](https://docs.aws.amazon.com/fsx/latest/LustreGuide/encryption-in-transit-fsxl.html) in the Amazon FSx for Lustre User Guide. (Default = SCRATCH_1)
        public var deploymentType: FSxClientTypes.LustreDeploymentType?
        /// The type of drive cache used by PERSISTENT_1 file systems that are provisioned with HDD storage devices. This parameter is required when storage type is HDD. Set this property to READ to improve the performance for frequently accessed files by caching up to 20% of the total storage capacity of the file system. This parameter is required when StorageType is set to HDD.
        public var driveCacheType: FSxClientTypes.DriveCacheType?
        /// (Optional) Available with Scratch and Persistent_1 deployment types. Specifies the path in the Amazon S3 bucket where the root of your Amazon FSx file system is exported. The path must use the same Amazon S3 bucket as specified in ImportPath. You can provide an optional prefix to which new and changed data is to be exported from your Amazon FSx for Lustre file system. If an ExportPath value is not provided, Amazon FSx sets a default export path, s3://import-bucket/FSxLustre[creation-timestamp]. The timestamp is in UTC format, for example s3://import-bucket/FSxLustre20181105T222312Z. The Amazon S3 export bucket must be the same as the import bucket specified by ImportPath. If you specify only a bucket name, such as s3://import-bucket, you get a 1:1 mapping of file system objects to S3 bucket objects. This mapping means that the input data in S3 is overwritten on export. If you provide a custom prefix in the export path, such as s3://import-bucket/[custom-optional-prefix], Amazon FSx exports the contents of your file system to that export prefix in the Amazon S3 bucket. This parameter is not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
        public var exportPath: Swift.String?
        /// (Optional) The path to the Amazon S3 bucket (including the optional prefix) that you're using as the data repository for your Amazon FSx for Lustre file system. The root of your FSx for Lustre file system will be mapped to the root of the Amazon S3 bucket you select. An example is s3://import-bucket/optional-prefix. If you specify a prefix after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system. This parameter is not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
        public var importPath: Swift.String?
        /// (Optional) For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB. This parameter is not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
        public var importedFileChunkSize: Swift.Int?
        /// The Lustre logging configuration used when creating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogCreateConfiguration?
        /// Required with PERSISTENT_1 and PERSISTENT_2 deployment types, provisions the amount of read and write throughput for each 1 tebibyte (TiB) of file system storage capacity, in MB/s/TiB. File system throughput capacity is calculated by multiplying ﬁle system storage capacity (TiB) by the PerUnitStorageThroughput (MB/s/TiB). For a 2.4-TiB ﬁle system, provisioning 50 MB/s/TiB of PerUnitStorageThroughput yields 120 MB/s of ﬁle system throughput. You pay for the amount of throughput that you provision. Valid values:
        ///
        /// * For PERSISTENT_1 SSD storage: 50, 100, 200 MB/s/TiB.
        ///
        /// * For PERSISTENT_1 HDD storage: 12, 40 MB/s/TiB.
        ///
        /// * For PERSISTENT_2 SSD storage: 125, 250, 500, 1000 MB/s/TiB.
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration used when creating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// (Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            deploymentType: FSxClientTypes.LustreDeploymentType? = nil,
            driveCacheType: FSxClientTypes.DriveCacheType? = nil,
            exportPath: Swift.String? = nil,
            importPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            logConfiguration: FSxClientTypes.LustreLogCreateConfiguration? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.deploymentType = deploymentType
            self.driveCacheType = driveCacheType
            self.exportPath = exportPath
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
            self.logConfiguration = logConfiguration
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.CreateFileSystemOntapConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case endpointIpAddressRange = "EndpointIpAddressRange"
        case fsxAdminPassword = "FsxAdminPassword"
        case preferredSubnetId = "PreferredSubnetId"
        case routeTableIds = "RouteTableIds"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let endpointIpAddressRange = self.endpointIpAddressRange {
            try encodeContainer.encode(endpointIpAddressRange, forKey: .endpointIpAddressRange)
        }
        if let fsxAdminPassword = self.fsxAdminPassword {
            try encodeContainer.encode(fsxAdminPassword, forKey: .fsxAdminPassword)
        }
        if let preferredSubnetId = self.preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let routeTableIds = routeTableIds {
            var routeTableIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeTableIds)
            for routetableid0 in routeTableIds {
                try routeTableIdsContainer.encode(routetableid0)
            }
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let endpointIpAddressRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointIpAddressRange)
        endpointIpAddressRange = endpointIpAddressRangeDecoded
        let fsxAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxAdminPassword)
        fsxAdminPassword = fsxAdminPasswordDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let routeTableIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .routeTableIds)
        var routeTableIdsDecoded0:[Swift.String]? = nil
        if let routeTableIdsContainer = routeTableIdsContainer {
            routeTableIdsDecoded0 = [Swift.String]()
            for string0 in routeTableIdsContainer {
                if let string0 = string0 {
                    routeTableIdsDecoded0?.append(string0)
                }
            }
        }
        routeTableIds = routeTableIdsDecoded0
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
    }
}

extension FSxClientTypes.CreateFileSystemOntapConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateFileSystemOntapConfiguration(automaticBackupRetentionDays: \(Swift.String(describing: automaticBackupRetentionDays)), dailyAutomaticBackupStartTime: \(Swift.String(describing: dailyAutomaticBackupStartTime)), deploymentType: \(Swift.String(describing: deploymentType)), diskIopsConfiguration: \(Swift.String(describing: diskIopsConfiguration)), endpointIpAddressRange: \(Swift.String(describing: endpointIpAddressRange)), preferredSubnetId: \(Swift.String(describing: preferredSubnetId)), routeTableIds: \(Swift.String(describing: routeTableIds)), throughputCapacity: \(Swift.String(describing: throughputCapacity)), weeklyMaintenanceStartTime: \(Swift.String(describing: weeklyMaintenanceStartTime)), fsxAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.
    public struct CreateFileSystemOntapConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the FSx for ONTAP file system deployment type to use in creating the file system.
        ///
        /// * MULTI_AZ_1 - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability.
        ///
        /// * SINGLE_AZ_1 - A file system configured for Single-AZ redundancy.
        ///
        ///
        /// For information about the use cases for Multi-AZ and Single-AZ deployments, refer to [Choosing a file system deployment type](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html).
        /// This member is required.
        public var deploymentType: FSxClientTypes.OntapDeploymentType?
        /// The SSD IOPS configuration for the FSx for ONTAP file system.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.
        public var endpointIpAddressRange: Swift.String?
        /// The ONTAP administrative password for the fsxadmin user with which you administer your file system using the NetApp ONTAP CLI and REST API.
        public var fsxAdminPassword: Swift.String?
        /// Required when DeploymentType is set to MULTI_AZ_1. This specifies the subnet in which you want the preferred file server to be located.
        public var preferredSubnetId: Swift.String?
        /// (Multi-AZ only) Specifies the virtual private cloud (VPC) route tables in which your file system's endpoints will be created. You should specify all VPC route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
        public var routeTableIds: [Swift.String]?
        /// Sets the throughput capacity for the file system that you're creating. Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.
        /// This member is required.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OntapDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            fsxAdminPassword: Swift.String? = nil,
            preferredSubnetId: Swift.String? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddressRange = endpointIpAddressRange
            self.fsxAdminPassword = fsxAdminPassword
            self.preferredSubnetId = preferredSubnetId
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.CreateFileSystemOpenZFSConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case copyTagsToVolumes = "CopyTagsToVolumes"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case rootVolumeConfiguration = "RootVolumeConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let copyTagsToVolumes = self.copyTagsToVolumes {
            try encodeContainer.encode(copyTagsToVolumes, forKey: .copyTagsToVolumes)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let rootVolumeConfiguration = self.rootVolumeConfiguration {
            try encodeContainer.encode(rootVolumeConfiguration, forKey: .rootVolumeConfiguration)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let copyTagsToVolumesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToVolumes)
        copyTagsToVolumes = copyTagsToVolumesDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let rootVolumeConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSCreateRootVolumeConfiguration.self, forKey: .rootVolumeConfiguration)
        rootVolumeConfiguration = rootVolumeConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The Amazon FSx for OpenZFS configuration properties for the file system that you are creating.
    public struct CreateFileSystemOpenZFSConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to false. If it's set to true, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type. Single AZ deployment types are configured for redundancy within a single Availability Zone in an Amazon Web Services Region . Valid values are the following:
        ///
        /// * SINGLE_AZ_1- (Default) Creates file systems with throughput capacities of 64 - 4,096 MB/s. Single_AZ_1 is available in all Amazon Web Services Regions where Amazon FSx for OpenZFS is available, except US West (Oregon).
        ///
        /// * SINGLE_AZ_2- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache. Single_AZ_2 is available only in the US East (N. Virginia), US East (Ohio), US West (Oregon), and Europe (Ireland) Amazon Web Services Regions.
        ///
        ///
        /// For more information, see: [Deployment type availability](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions) and [File system performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance) in the Amazon FSx for OpenZFS User Guide.
        /// This member is required.
        public var deploymentType: FSxClientTypes.OpenZFSDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume.
        public var rootVolumeConfiguration: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration?
        /// Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MB/s). Valid values depend on the DeploymentType you choose, as follows:
        ///
        /// * For SINGLE_AZ_1, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.
        ///
        /// * For SINGLE_AZ_2, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.
        ///
        ///
        /// You pay for additional throughput capacity that you provision.
        /// This member is required.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OpenZFSDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            rootVolumeConfiguration: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.rootVolumeConfiguration = rootVolumeConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension CreateFileSystemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFileSystemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActiveDirectoryError" : self = .activeDirectoryError(try ActiveDirectoryError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExportPath" : self = .invalidExportPath(try InvalidExportPath(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImportPath" : self = .invalidImportPath(try InvalidImportPath(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNetworkSettings" : self = .invalidNetworkSettings(try InvalidNetworkSettings(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPerUnitStorageThroughput" : self = .invalidPerUnitStorageThroughput(try InvalidPerUnitStorageThroughput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingFileSystemConfiguration" : self = .missingFileSystemConfiguration(try MissingFileSystemConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFileSystemOutputError: Swift.Error, Swift.Equatable {
    case activeDirectoryError(ActiveDirectoryError)
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case invalidExportPath(InvalidExportPath)
    case invalidImportPath(InvalidImportPath)
    case invalidNetworkSettings(InvalidNetworkSettings)
    case invalidPerUnitStorageThroughput(InvalidPerUnitStorageThroughput)
    case missingFileSystemConfiguration(MissingFileSystemConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFileSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFileSystemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystem = output.fileSystem
        } else {
            self.fileSystem = nil
        }
    }
}

/// The response object returned after the file system is created.
public struct CreateFileSystemOutputResponse: Swift.Equatable {
    /// The configuration of the file system that was created.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init (
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

struct CreateFileSystemOutputResponseBody: Swift.Equatable {
    let fileSystem: FSxClientTypes.FileSystem?
}

extension CreateFileSystemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystem = "FileSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
    }
}

extension FSxClientTypes.CreateFileSystemWindowsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryId = "ActiveDirectoryId"
        case aliases = "Aliases"
        case auditLogConfiguration = "AuditLogConfiguration"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case preferredSubnetId = "PreferredSubnetId"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryId = self.activeDirectoryId {
            try encodeContainer.encode(activeDirectoryId, forKey: .activeDirectoryId)
        }
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for alternatednsname0 in aliases {
                try aliasesContainer.encode(alternatednsname0)
            }
        }
        if let auditLogConfiguration = self.auditLogConfiguration {
            try encodeContainer.encode(auditLogConfiguration, forKey: .auditLogConfiguration)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let preferredSubnetId = self.preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeDirectoryId)
        activeDirectoryId = activeDirectoryIdDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryConfiguration.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .aliases)
        var aliasesDecoded0:[Swift.String]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Swift.String]()
            for string0 in aliasesContainer {
                if let string0 = string0 {
                    aliasesDecoded0?.append(string0)
                }
            }
        }
        aliases = aliasesDecoded0
        let auditLogConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAuditLogCreateConfiguration.self, forKey: .auditLogConfiguration)
        auditLogConfiguration = auditLogConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration object for the Microsoft Windows file system used in CreateFileSystem and CreateFileSystemFromBackup operations.
    public struct CreateFileSystemWindowsConfiguration: Swift.Equatable {
        /// The ID for an existing Amazon Web Services Managed Microsoft Active Directory (AD) instance that the file system should join when it's created.
        public var activeDirectoryId: Swift.String?
        /// An array of one or more DNS alias names that you want to associate with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html) and [Walkthrough 5: Using DNS aliases to access your file system](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/walkthrough05-file-system-custom-CNAME.html), including additional steps you must take to be able to access your file system using a DNS alias. An alias name has to meet the following requirements:
        ///
        /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain, for example, accounting.example.com.
        ///
        /// * Can contain alphanumeric characters, the underscore (_), and the hyphen (-).
        ///
        /// * Cannot start or end with a hyphen.
        ///
        /// * Can start with a numeric.
        ///
        ///
        /// For DNS alias names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
        public var aliases: [Swift.String]?
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration?
        /// The number of days to retain automatic backups. The default is to retain backups for 7 days. Setting this value to 0 disables the creation of automatic backups. The maximum retention period for backups is 90 days.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// The preferred time to take daily automatic backups, formatted HH:MM in the UTC time zone.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type, valid values are the following:
        ///
        /// * MULTI_AZ_1 - Deploys a high availability file system that is configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. You can only deploy a Multi-AZ file system in Amazon Web Services Regions that have a minimum of three Availability Zones. Also supports HDD storage type
        ///
        /// * SINGLE_AZ_1 - (Default) Choose to deploy a file system that is configured for single AZ redundancy.
        ///
        /// * SINGLE_AZ_2 - The latest generation Single AZ file system. Specifies a file system that is configured for single AZ redundancy and supports HDD storage type.
        ///
        ///
        /// For more information, see [ Availability and Durability: Single-AZ and Multi-AZ File Systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.WindowsDeploymentType?
        /// Required when DeploymentType is set to MULTI_AZ_1. This specifies the subnet in which you want the preferred file server to be located. For in-Amazon Web Services applications, we recommend that you launch your clients in the same Availability Zone (AZ) as your preferred file server to reduce cross-AZ data transfer costs and minimize latency.
        public var preferredSubnetId: Swift.String?
        /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration?
        /// Sets the throughput capacity of an Amazon FSx file system, measured in megabytes per second (MB/s), in 2 to the nth increments, between 2^3 (8) and 2^11 (2048).
        /// This member is required.
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            activeDirectoryId: Swift.String? = nil,
            aliases: [Swift.String]? = nil,
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.WindowsDeploymentType? = nil,
            preferredSubnetId: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.aliases = aliases
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.preferredSubnetId = preferredSubnetId
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.CreateOntapVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToBackups = "CopyTagsToBackups"
        case junctionPath = "JunctionPath"
        case ontapVolumeType = "OntapVolumeType"
        case securityStyle = "SecurityStyle"
        case sizeInMegabytes = "SizeInMegabytes"
        case snapshotPolicy = "SnapshotPolicy"
        case storageEfficiencyEnabled = "StorageEfficiencyEnabled"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case tieringPolicy = "TieringPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let junctionPath = self.junctionPath {
            try encodeContainer.encode(junctionPath, forKey: .junctionPath)
        }
        if let ontapVolumeType = self.ontapVolumeType {
            try encodeContainer.encode(ontapVolumeType.rawValue, forKey: .ontapVolumeType)
        }
        if let securityStyle = self.securityStyle {
            try encodeContainer.encode(securityStyle.rawValue, forKey: .securityStyle)
        }
        if let sizeInMegabytes = self.sizeInMegabytes {
            try encodeContainer.encode(sizeInMegabytes, forKey: .sizeInMegabytes)
        }
        if let snapshotPolicy = self.snapshotPolicy {
            try encodeContainer.encode(snapshotPolicy, forKey: .snapshotPolicy)
        }
        if let storageEfficiencyEnabled = self.storageEfficiencyEnabled {
            try encodeContainer.encode(storageEfficiencyEnabled, forKey: .storageEfficiencyEnabled)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
        if let tieringPolicy = self.tieringPolicy {
            try encodeContainer.encode(tieringPolicy, forKey: .tieringPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let junctionPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .junctionPath)
        junctionPath = junctionPathDecoded
        let securityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SecurityStyle.self, forKey: .securityStyle)
        securityStyle = securityStyleDecoded
        let sizeInMegabytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMegabytes)
        sizeInMegabytes = sizeInMegabytesDecoded
        let storageEfficiencyEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEfficiencyEnabled)
        storageEfficiencyEnabled = storageEfficiencyEnabledDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let tieringPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.TieringPolicy.self, forKey: .tieringPolicy)
        tieringPolicy = tieringPolicyDecoded
        let ontapVolumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.InputOntapVolumeType.self, forKey: .ontapVolumeType)
        ontapVolumeType = ontapVolumeTypeDecoded
        let snapshotPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotPolicy)
        snapshotPolicy = snapshotPolicyDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
    }
}

extension FSxClientTypes {
    /// Specifies the configuration of the ONTAP volume that you are creating.
    public struct CreateOntapVolumeConfiguration: Swift.Equatable {
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the location in the SVM's namespace where the volume is mounted. The JunctionPath must have a leading forward slash, such as /vol3.
        public var junctionPath: Swift.String?
        /// Specifies the type of volume you are creating. Valid values are the following:
        ///
        /// * RW specifies a read/write volume. RW is the default.
        ///
        /// * DP specifies a data-protection volume. A DP volume is read-only and can be used as the destination of a NetApp SnapMirror relationship.
        ///
        ///
        /// For more information, see [Volume types](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/volume-types) in the Amazon FSx for NetApp ONTAP User Guide.
        public var ontapVolumeType: FSxClientTypes.InputOntapVolumeType?
        /// Specifies the security style for the volume. If a volume's security style is not specified, it is automatically set to the root volume's security style. The security style determines the type of permissions that FSx for ONTAP uses to control data access. For more information, see [Volume security style](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-volumes.html#volume-security-style) in the Amazon FSx for NetApp ONTAP User Guide. Specify one of the following values:
        ///
        /// * UNIX if the file system is managed by a UNIX administrator, the majority of users are NFS clients, and an application accessing the data uses a UNIX user as the service account.
        ///
        /// * NTFS if the file system is managed by a Windows administrator, the majority of users are SMB clients, and an application accessing the data uses a Windows user as the service account.
        ///
        /// * MIXED if the file system is managed by both UNIX and Windows administrators and users consist of both NFS and SMB clients.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// Specifies the size of the volume, in megabytes (MB), that you are creating.
        /// This member is required.
        public var sizeInMegabytes: Swift.Int?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// Specifies the ONTAP SVM in which to create the volume.
        /// This member is required.
        public var storageVirtualMachineId: Swift.String?
        /// Describes the data tiering policy for an ONTAP volume. When enabled, Amazon FSx for ONTAP's intelligent tiering automatically transitions a volume's data between the file system's primary storage and capacity pool storage based on your access patterns. Valid tiering policies are the following:
        ///
        /// * SNAPSHOT_ONLY - (Default value) moves cold snapshots to the capacity pool storage tier.
        ///
        ///
        ///
        ///
        /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
        ///
        ///
        ///
        ///
        /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
        ///
        ///
        ///
        ///
        /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?

        public init (
            copyTagsToBackups: Swift.Bool? = nil,
            junctionPath: Swift.String? = nil,
            ontapVolumeType: FSxClientTypes.InputOntapVolumeType? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil
        )
        {
            self.copyTagsToBackups = copyTagsToBackups
            self.junctionPath = junctionPath
            self.ontapVolumeType = ontapVolumeType
            self.securityStyle = securityStyle
            self.sizeInMegabytes = sizeInMegabytes
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.storageVirtualMachineId = storageVirtualMachineId
            self.tieringPolicy = tieringPolicy
        }
    }

}

extension FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyStrategy = "CopyStrategy"
        case snapshotARN = "SnapshotARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyStrategy = self.copyStrategy {
            try encodeContainer.encode(copyStrategy.rawValue, forKey: .copyStrategy)
        }
        if let snapshotARN = self.snapshotARN {
            try encodeContainer.encode(snapshotARN, forKey: .snapshotARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotARN)
        snapshotARN = snapshotARNDecoded
        let copyStrategyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSCopyStrategy.self, forKey: .copyStrategy)
        copyStrategy = copyStrategyDecoded
    }
}

extension FSxClientTypes {
    /// The snapshot configuration to use when creating an OpenZFS volume from a snapshot.
    public struct CreateOpenZFSOriginSnapshotConfiguration: Swift.Equatable {
        /// The strategy used when copying data from the snapshot to the new volume.
        ///
        /// * CLONE - The new volume references the data in the origin snapshot. Cloning a snapshot is faster than copying data from the snapshot to a new volume and doesn't consume disk throughput. However, the origin snapshot can't be deleted if there is a volume using its copied data.
        ///
        /// * FULL_COPY - Copies all data from the snapshot to the new volume.
        /// This member is required.
        public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        /// This member is required.
        public var snapshotARN: Swift.String?

        public init (
            copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
            snapshotARN: Swift.String? = nil
        )
        {
            self.copyStrategy = copyStrategy
            self.snapshotARN = snapshotARN
        }
    }

}

extension FSxClientTypes.CreateOpenZFSVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToSnapshots = "CopyTagsToSnapshots"
        case dataCompressionType = "DataCompressionType"
        case nfsExports = "NfsExports"
        case originSnapshot = "OriginSnapshot"
        case parentVolumeId = "ParentVolumeId"
        case readOnly = "ReadOnly"
        case recordSizeKiB = "RecordSizeKiB"
        case storageCapacityQuotaGiB = "StorageCapacityQuotaGiB"
        case storageCapacityReservationGiB = "StorageCapacityReservationGiB"
        case userAndGroupQuotas = "UserAndGroupQuotas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToSnapshots = self.copyTagsToSnapshots {
            try encodeContainer.encode(copyTagsToSnapshots, forKey: .copyTagsToSnapshots)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let nfsExports = nfsExports {
            var nfsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nfsExports)
            for openzfsnfsexport0 in nfsExports {
                try nfsExportsContainer.encode(openzfsnfsexport0)
            }
        }
        if let originSnapshot = self.originSnapshot {
            try encodeContainer.encode(originSnapshot, forKey: .originSnapshot)
        }
        if let parentVolumeId = self.parentVolumeId {
            try encodeContainer.encode(parentVolumeId, forKey: .parentVolumeId)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let recordSizeKiB = self.recordSizeKiB {
            try encodeContainer.encode(recordSizeKiB, forKey: .recordSizeKiB)
        }
        if let storageCapacityQuotaGiB = self.storageCapacityQuotaGiB {
            try encodeContainer.encode(storageCapacityQuotaGiB, forKey: .storageCapacityQuotaGiB)
        }
        if let storageCapacityReservationGiB = self.storageCapacityReservationGiB {
            try encodeContainer.encode(storageCapacityReservationGiB, forKey: .storageCapacityReservationGiB)
        }
        if let userAndGroupQuotas = userAndGroupQuotas {
            var userAndGroupQuotasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAndGroupQuotas)
            for openzfsuserorgroupquota0 in userAndGroupQuotas {
                try userAndGroupQuotasContainer.encode(openzfsuserorgroupquota0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentVolumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentVolumeId)
        parentVolumeId = parentVolumeIdDecoded
        let storageCapacityReservationGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityReservationGiB)
        storageCapacityReservationGiB = storageCapacityReservationGiBDecoded
        let storageCapacityQuotaGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityQuotaGiB)
        storageCapacityQuotaGiB = storageCapacityQuotaGiBDecoded
        let recordSizeKiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recordSizeKiB)
        recordSizeKiB = recordSizeKiBDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let copyTagsToSnapshotsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshots)
        copyTagsToSnapshots = copyTagsToSnapshotsDecoded
        let originSnapshotDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration.self, forKey: .originSnapshot)
        originSnapshot = originSnapshotDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let nfsExportsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSNfsExport?].self, forKey: .nfsExports)
        var nfsExportsDecoded0:[FSxClientTypes.OpenZFSNfsExport]? = nil
        if let nfsExportsContainer = nfsExportsContainer {
            nfsExportsDecoded0 = [FSxClientTypes.OpenZFSNfsExport]()
            for structure0 in nfsExportsContainer {
                if let structure0 = structure0 {
                    nfsExportsDecoded0?.append(structure0)
                }
            }
        }
        nfsExports = nfsExportsDecoded0
        let userAndGroupQuotasContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSUserOrGroupQuota?].self, forKey: .userAndGroupQuotas)
        var userAndGroupQuotasDecoded0:[FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        if let userAndGroupQuotasContainer = userAndGroupQuotasContainer {
            userAndGroupQuotasDecoded0 = [FSxClientTypes.OpenZFSUserOrGroupQuota]()
            for structure0 in userAndGroupQuotasContainer {
                if let structure0 = structure0 {
                    userAndGroupQuotasDecoded0?.append(structure0)
                }
            }
        }
        userAndGroupQuotas = userAndGroupQuotasDecoded0
    }
}

extension FSxClientTypes {
    /// Specifies the configuration of the Amazon FSx for OpenZFS volume that you are creating.
    public struct CreateOpenZFSVolumeConfiguration: Swift.Equatable {
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. ZSTD compression provides a higher level of data compression and higher read throughput performance than LZ4 compression.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. LZ4 compression provides a lower level of compression and higher write throughput performance than ZSTD compression.
        ///
        ///
        /// For more information about volume compression types and the performance of your Amazon FSx for OpenZFS file system, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) File system and volume settings in the Amazon FSx for OpenZFS User Guide.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// The configuration object that specifies the snapshot to use as the origin of the data for the volume.
        public var originSnapshot: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration?
        /// The ID of the volume to use as the parent volume of the volume that you are creating.
        /// This member is required.
        public var parentVolumeId: Swift.String?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// Specifies the suggested block size for a volume in a ZFS dataset, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. We recommend using the default setting for the majority of use cases. Generally, workloads that write in fixed small or large record sizes may benefit from setting a custom record size, like database workloads (small record size) or media streaming workloads (large record size). For additional guidance on when to set a custom record size, see [ ZFS Record size](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#record-size-performance) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// Sets the maximum storage size in gibibytes (GiB) for the volume. You can specify a quota that is larger than the storage on the parent volume. A volume quota limits the amount of storage that the volume can consume to the configured amount, but does not guarantee the space will be available on the parent volume. To guarantee quota space, you must also set StorageCapacityReservationGiB. To not specify a storage capacity quota, set this to -1. For more information, see [Volume properties](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-volumes.html#volume-properties) in the Amazon FSx for OpenZFS User Guide.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// Specifies the amount of storage in gibibytes (GiB) to reserve from the parent volume. Setting StorageCapacityReservationGiB guarantees that the specified amount of storage space on the parent volume will always be available for the volume. You can't reserve more storage than the parent volume has. To not specify a storage capacity reservation, set this to 0 or -1. For more information, see [Volume properties](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-volumes.html#volume-properties) in the Amazon FSx for OpenZFS User Guide.
        public var storageCapacityReservationGiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init (
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            originSnapshot: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration? = nil,
            parentVolumeId: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.originSnapshot = originSnapshot
            self.parentVolumeId = parentVolumeId
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

extension CreateSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case tags = "Tags"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }
}

extension CreateSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSnapshotInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the snapshot.
    /// This member is required.
    public var name: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// The ID of the volume that you are taking a snapshot of.
    /// This member is required.
    public var volumeId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.tags = tags
        self.volumeId = volumeId
    }
}

struct CreateSnapshotInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let name: Swift.String?
    let volumeId: Swift.String?
    let tags: [FSxClientTypes.Tag]?
}

extension CreateSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case tags = "Tags"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSnapshotOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CreateSnapshotOutputResponse: Swift.Equatable {
    /// A description of the snapshot.
    public var snapshot: FSxClientTypes.Snapshot?

    public init (
        snapshot: FSxClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CreateSnapshotOutputResponseBody: Swift.Equatable {
    let snapshot: FSxClientTypes.Snapshot?
}

extension CreateSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

extension CreateStorageVirtualMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStorageVirtualMachineInput(activeDirectoryConfiguration: \(Swift.String(describing: activeDirectoryConfiguration)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), fileSystemId: \(Swift.String(describing: fileSystemId)), name: \(Swift.String(describing: name)), rootVolumeSecurityStyle: \(Swift.String(describing: rootVolumeSecurityStyle)), tags: \(Swift.String(describing: tags)), svmAdminPassword: \"CONTENT_REDACTED\")"}
}

extension CreateStorageVirtualMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case name = "Name"
        case rootVolumeSecurityStyle = "RootVolumeSecurityStyle"
        case svmAdminPassword = "SvmAdminPassword"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryConfiguration = self.activeDirectoryConfiguration {
            try encodeContainer.encode(activeDirectoryConfiguration, forKey: .activeDirectoryConfiguration)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rootVolumeSecurityStyle = self.rootVolumeSecurityStyle {
            try encodeContainer.encode(rootVolumeSecurityStyle.rawValue, forKey: .rootVolumeSecurityStyle)
        }
        if let svmAdminPassword = self.svmAdminPassword {
            try encodeContainer.encode(svmAdminPassword, forKey: .svmAdminPassword)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateStorageVirtualMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStorageVirtualMachineInput: Swift.Equatable {
    /// Describes the self-managed Microsoft Active Directory to which you want to join the SVM. Joining an Active Directory provides user authentication and access control for SMB clients, including Microsoft Windows and macOS client accessing the file system.
    public var activeDirectoryConfiguration: FSxClientTypes.CreateSvmActiveDirectoryConfiguration?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The name of the SVM.
    /// This member is required.
    public var name: Swift.String?
    /// The security style of the root volume of the SVM. Specify one of the following values:
    ///
    /// * UNIX if the file system is managed by a UNIX administrator, the majority of users are NFS clients, and an application accessing the data uses a UNIX user as the service account.
    ///
    /// * NTFS if the file system is managed by a Windows administrator, the majority of users are SMB clients, and an application accessing the data uses a Windows user as the service account.
    ///
    /// * MIXED if the file system is managed by both UNIX and Windows administrators and users consist of both NFS and SMB clients.
    public var rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle?
    /// The password to use when managing the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
    public var svmAdminPassword: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        activeDirectoryConfiguration: FSxClientTypes.CreateSvmActiveDirectoryConfiguration? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        name: Swift.String? = nil,
        rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle? = nil,
        svmAdminPassword: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.activeDirectoryConfiguration = activeDirectoryConfiguration
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.name = name
        self.rootVolumeSecurityStyle = rootVolumeSecurityStyle
        self.svmAdminPassword = svmAdminPassword
        self.tags = tags
    }
}

struct CreateStorageVirtualMachineInputBody: Swift.Equatable {
    let activeDirectoryConfiguration: FSxClientTypes.CreateSvmActiveDirectoryConfiguration?
    let clientRequestToken: Swift.String?
    let fileSystemId: Swift.String?
    let name: Swift.String?
    let svmAdminPassword: Swift.String?
    let tags: [FSxClientTypes.Tag]?
    let rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle?
}

extension CreateStorageVirtualMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case name = "Name"
        case rootVolumeSecurityStyle = "RootVolumeSecurityStyle"
        case svmAdminPassword = "SvmAdminPassword"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateSvmActiveDirectoryConfiguration.self, forKey: .activeDirectoryConfiguration)
        activeDirectoryConfiguration = activeDirectoryConfigurationDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let svmAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .svmAdminPassword)
        svmAdminPassword = svmAdminPasswordDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let rootVolumeSecurityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle.self, forKey: .rootVolumeSecurityStyle)
        rootVolumeSecurityStyle = rootVolumeSecurityStyleDecoded
    }
}

extension CreateStorageVirtualMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStorageVirtualMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActiveDirectoryError" : self = .activeDirectoryError(try ActiveDirectoryError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStorageVirtualMachineOutputError: Swift.Error, Swift.Equatable {
    case activeDirectoryError(ActiveDirectoryError)
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStorageVirtualMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStorageVirtualMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storageVirtualMachine = output.storageVirtualMachine
        } else {
            self.storageVirtualMachine = nil
        }
    }
}

public struct CreateStorageVirtualMachineOutputResponse: Swift.Equatable {
    /// Returned after a successful CreateStorageVirtualMachine operation; describes the SVM just created.
    public var storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?

    public init (
        storageVirtualMachine: FSxClientTypes.StorageVirtualMachine? = nil
    )
    {
        self.storageVirtualMachine = storageVirtualMachine
    }
}

struct CreateStorageVirtualMachineOutputResponseBody: Swift.Equatable {
    let storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?
}

extension CreateStorageVirtualMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageVirtualMachine = "StorageVirtualMachine"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageVirtualMachineDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachine.self, forKey: .storageVirtualMachine)
        storageVirtualMachine = storageVirtualMachineDecoded
    }
}

extension FSxClientTypes.CreateSvmActiveDirectoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case netBiosName = "NetBiosName"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let netBiosName = self.netBiosName {
            try encodeContainer.encode(netBiosName, forKey: .netBiosName)
        }
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let netBiosNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .netBiosName)
        netBiosName = netBiosNameDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryConfiguration.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx uses to join the ONTAP storage virtual machine (SVM) to your self-managed (including on-premises) Microsoft Active Directory (AD) directory.
    public struct CreateSvmActiveDirectoryConfiguration: Swift.Equatable {
        /// The NetBIOS name of the Active Directory computer object that will be created for your SVM.
        /// This member is required.
        public var netBiosName: Swift.String?
        /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration?

        public init (
            netBiosName: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration? = nil
        )
        {
            self.netBiosName = netBiosName
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

extension CreateVolumeFromBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateVolumeFromBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateVolumeFromBackupInput: Swift.Equatable {
    /// The ID of the source backup. Specifies the backup that you are copying.
    /// This member is required.
    public var backupId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the new volume you're creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the configuration of the ONTAP volume that you are creating.
    public var ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.tags = tags
    }
}

struct CreateVolumeFromBackupInputBody: Swift.Equatable {
    let backupId: Swift.String?
    let clientRequestToken: Swift.String?
    let name: Swift.String?
    let ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    let tags: [FSxClientTypes.Tag]?
}

extension CreateVolumeFromBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateVolumeFromBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVolumeFromBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupNotFound" : self = .backupNotFound(try BackupNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingVolumeConfiguration" : self = .missingVolumeConfiguration(try MissingVolumeConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StorageVirtualMachineNotFound" : self = .storageVirtualMachineNotFound(try StorageVirtualMachineNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVolumeFromBackupOutputError: Swift.Error, Swift.Equatable {
    case backupNotFound(BackupNotFound)
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case missingVolumeConfiguration(MissingVolumeConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case storageVirtualMachineNotFound(StorageVirtualMachineNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVolumeFromBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateVolumeFromBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.volume = output.volume
        } else {
            self.volume = nil
        }
    }
}

public struct CreateVolumeFromBackupOutputResponse: Swift.Equatable {
    /// Returned after a successful CreateVolumeFromBackup API operation, describing the volume just created.
    public var volume: FSxClientTypes.Volume?

    public init (
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

struct CreateVolumeFromBackupOutputResponseBody: Swift.Equatable {
    let volume: FSxClientTypes.Volume?
}

extension CreateVolumeFromBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volume = "Volume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .volume)
        volume = volumeDecoded
    }
}

extension CreateVolumeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case tags = "Tags"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }
}

extension CreateVolumeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateVolumeInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the name of the volume that you're creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the configuration to use when creating the ONTAP volume.
    public var ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    /// Specifies the configuration to use when creating the OpenZFS volume.
    public var openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// Specifies the type of volume to create; ONTAP and OPENZFS are the only valid volume types.
    /// This member is required.
    public var volumeType: FSxClientTypes.VolumeType?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeType: FSxClientTypes.VolumeType? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.tags = tags
        self.volumeType = volumeType
    }
}

struct CreateVolumeInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeType: FSxClientTypes.VolumeType?
    let name: Swift.String?
    let ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    let tags: [FSxClientTypes.Tag]?
    let openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration?
}

extension CreateVolumeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case tags = "Tags"
        case volumeType = "VolumeType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOpenZFSVolumeConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension CreateVolumeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVolumeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingVolumeConfiguration" : self = .missingVolumeConfiguration(try MissingVolumeConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StorageVirtualMachineNotFound" : self = .storageVirtualMachineNotFound(try StorageVirtualMachineNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVolumeOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case missingVolumeConfiguration(MissingVolumeConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case storageVirtualMachineNotFound(StorageVirtualMachineNotFound)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVolumeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateVolumeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.volume = output.volume
        } else {
            self.volume = nil
        }
    }
}

public struct CreateVolumeOutputResponse: Swift.Equatable {
    /// Returned after a successful CreateVolume API operation, describing the volume just created.
    public var volume: FSxClientTypes.Volume?

    public init (
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

struct CreateVolumeOutputResponseBody: Swift.Equatable {
    let volume: FSxClientTypes.Volume?
}

extension CreateVolumeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volume = "Volume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .volume)
        volume = volumeDecoded
    }
}

extension FSxClientTypes {
    public enum DataCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lz4
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [DataCompressionType] {
            return [
                .lz4,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lz4: return "LZ4"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataCompressionType(rawValue: rawValue) ?? DataCompressionType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.DataRepositoryAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case batchImportMetaDataOnCreate = "BatchImportMetaDataOnCreate"
        case creationTime = "CreationTime"
        case dataRepositoryPath = "DataRepositoryPath"
        case dataRepositorySubdirectories = "DataRepositorySubdirectories"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileCachePath = "FileCachePath"
        case fileSystemId = "FileSystemId"
        case fileSystemPath = "FileSystemPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case lifecycle = "Lifecycle"
        case nfs = "NFS"
        case resourceARN = "ResourceARN"
        case s3 = "S3"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let batchImportMetaDataOnCreate = self.batchImportMetaDataOnCreate {
            try encodeContainer.encode(batchImportMetaDataOnCreate, forKey: .batchImportMetaDataOnCreate)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dataRepositoryPath = self.dataRepositoryPath {
            try encodeContainer.encode(dataRepositoryPath, forKey: .dataRepositoryPath)
        }
        if let dataRepositorySubdirectories = dataRepositorySubdirectories {
            var dataRepositorySubdirectoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositorySubdirectories)
            for namespace0 in dataRepositorySubdirectories {
                try dataRepositorySubdirectoriesContainer.encode(namespace0)
            }
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileCachePath = self.fileCachePath {
            try encodeContainer.encode(fileCachePath, forKey: .fileCachePath)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemPath = self.fileSystemPath {
            try encodeContainer.encode(fileSystemPath, forKey: .fileSystemPath)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let nfs = self.nfs {
            try encodeContainer.encode(nfs, forKey: .nfs)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let fileSystemPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemPath)
        fileSystemPath = fileSystemPathDecoded
        let dataRepositoryPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRepositoryPath)
        dataRepositoryPath = dataRepositoryPathDecoded
        let batchImportMetaDataOnCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchImportMetaDataOnCreate)
        batchImportMetaDataOnCreate = batchImportMetaDataOnCreateDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let s3Decoded = try containerValues.decodeIfPresent(FSxClientTypes.S3DataRepositoryConfiguration.self, forKey: .s3)
        s3 = s3Decoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let fileCachePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCachePath)
        fileCachePath = fileCachePathDecoded
        let dataRepositorySubdirectoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataRepositorySubdirectories)
        var dataRepositorySubdirectoriesDecoded0:[Swift.String]? = nil
        if let dataRepositorySubdirectoriesContainer = dataRepositorySubdirectoriesContainer {
            dataRepositorySubdirectoriesDecoded0 = [Swift.String]()
            for string0 in dataRepositorySubdirectoriesContainer {
                if let string0 = string0 {
                    dataRepositorySubdirectoriesDecoded0?.append(string0)
                }
            }
        }
        dataRepositorySubdirectories = dataRepositorySubdirectoriesDecoded0
        let nfsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.NFSDataRepositoryConfiguration.self, forKey: .nfs)
        nfs = nfsDecoded
    }
}

extension FSxClientTypes {
    /// The configuration of a data repository association that links an Amazon FSx for Lustre file system to an Amazon S3 bucket or an Amazon File Cache resource to an Amazon S3 bucket or an NFS file system. The data repository association configuration object is returned in the response of the following operations:
    ///
    /// * CreateDataRepositoryAssociation
    ///
    /// * UpdateDataRepositoryAssociation
    ///
    /// * DescribeDataRepositoryAssociations
    ///
    ///
    /// Data repository associations are supported only for an Amazon FSx for Lustre file system with the Persistent_2 deployment type and for an Amazon File Cache resource.
    public struct DataRepositoryAssociation: Swift.Equatable {
        /// The system-generated, unique ID of the data repository association.
        public var associationId: Swift.String?
        /// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true. BatchImportMetaDataOnCreate is not supported for data repositories linked to an Amazon File Cache resource.
        public var batchImportMetaDataOnCreate: Swift.Bool?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The path to the data repository that will be linked to the cache or file system.
        ///
        /// * For Amazon File Cache, the path can be an NFS data repository that will be linked to the cache. The path can be in one of two formats:
        ///
        /// * If you are not using the DataRepositorySubdirectories parameter, the path is to an NFS Export directory (or one of its subdirectories) in the format nsf://nfs-domain-name/exportpath. You can therefore link a single NFS Export to a single data repository association.
        ///
        /// * If you are using the DataRepositorySubdirectories parameter, the path is the domain name of the NFS file system in the format nfs://filer-domain-name, which indicates the root of the subdirectories specified with the DataRepositorySubdirectories parameter.
        ///
        ///
        ///
        ///
        /// * For Amazon File Cache, the path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        ///
        /// * For Amazon FSx for Lustre, the path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        public var dataRepositoryPath: Swift.String?
        /// For Amazon File Cache, a list of NFS Exports that will be linked with an NFS data repository association. All the subdirectories must be on a single NFS file system. The Export paths are in the format /exportpath1. To use this parameter, you must configure DataRepositoryPath as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that DataRepositorySubdirectories is not supported for S3 data repositories.
        public var dataRepositorySubdirectories: [Swift.String]?
        /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryFailureDetails?
        /// The globally unique ID of the Amazon File Cache resource.
        public var fileCacheId: Swift.String?
        /// A path on the Amazon File Cache that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the path is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path /ns1/, then you cannot link another data repository with cache path /ns1/ns2. This path specifies the directory in your cache where files will be exported from. This cache directory can be linked to only one data repository (S3 or NFS) and no other data repository can be linked to the directory. The cache path can only be set to root (/) on an NFS DRA when DataRepositorySubdirectories is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache. The cache path cannot be set to root (/) for an S3 DRA.
        public var fileCachePath: Swift.String?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory. If you specify only a forward slash (/) as the file system path, you can link only one data repository to the file system. You can only specify "/" as the file system path for the first data repository associated with a file system.
        public var fileSystemPath: Swift.String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system or cache. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public var importedFileChunkSize: Swift.Int?
        /// Describes the state of a data repository association. The lifecycle can have the following values:
        ///
        /// * CREATING - The data repository association between the file system or cache and the data repository is being created. The data repository is unavailable.
        ///
        /// * AVAILABLE - The data repository association is available for use.
        ///
        /// * MISCONFIGURED - The data repository association is misconfigured. Until the configuration is corrected, automatic import and automatic export will not work (only for Amazon FSx for Lustre).
        ///
        /// * UPDATING - The data repository association is undergoing a customer initiated update that might affect its availability.
        ///
        /// * DELETING - The data repository association is undergoing a customer initiated deletion.
        ///
        /// * FAILED - The data repository association is in a terminal state that cannot be recovered.
        public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?
        /// The configuration for an NFS data repository linked to an Amazon File Cache resource with a data repository association.
        public var nfs: FSxClientTypes.NFSDataRepositoryConfiguration?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The configuration for an Amazon S3 data repository linked to an Amazon FSx for Lustre file system with a data repository association.
        public var s3: FSxClientTypes.S3DataRepositoryConfiguration?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?

        public init (
            associationId: Swift.String? = nil,
            batchImportMetaDataOnCreate: Swift.Bool? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dataRepositoryPath: Swift.String? = nil,
            dataRepositorySubdirectories: [Swift.String]? = nil,
            failureDetails: FSxClientTypes.DataRepositoryFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCachePath: Swift.String? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil,
            nfs: FSxClientTypes.NFSDataRepositoryConfiguration? = nil,
            resourceARN: Swift.String? = nil,
            s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil,
            tags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.associationId = associationId
            self.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate
            self.creationTime = creationTime
            self.dataRepositoryPath = dataRepositoryPath
            self.dataRepositorySubdirectories = dataRepositorySubdirectories
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCachePath = fileCachePath
            self.fileSystemId = fileSystemId
            self.fileSystemPath = fileSystemPath
            self.importedFileChunkSize = importedFileChunkSize
            self.lifecycle = lifecycle
            self.nfs = nfs
            self.resourceARN = resourceARN
            self.s3 = s3
            self.tags = tags
        }
    }

}

extension DataRepositoryAssociationNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DataRepositoryAssociationNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No data repository associations were found based upon the supplied parameters.
public struct DataRepositoryAssociationNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DataRepositoryAssociationNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension DataRepositoryAssociationNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.DataRepositoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoImportPolicy = "AutoImportPolicy"
        case exportPath = "ExportPath"
        case failureDetails = "FailureDetails"
        case importPath = "ImportPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case lifecycle = "Lifecycle"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoImportPolicy = self.autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy.rawValue, forKey: .autoImportPolicy)
        }
        if let exportPath = self.exportPath {
            try encodeContainer.encode(exportPath, forKey: .exportPath)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let importPath = self.importPath {
            try encodeContainer.encode(importPath, forKey: .importPath)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let importPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importPath)
        importPath = importPathDecoded
        let exportPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportPath)
        exportPath = exportPathDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoImportPolicyType.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
    }
}

extension FSxClientTypes {
    /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported for file systems with the Persistent_2 deployment type. Instead, use .
    public struct DataRepositoryConfiguration: Swift.Equatable {
        /// Describes the file system's linked S3 data repository's AutoImportPolicy. The AutoImportPolicy configures how Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update file and directory listings for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The export path to the Amazon S3 bucket (and prefix) that you are using to store new and changed Lustre file system files in S3.
        public var exportPath: Swift.String?
        /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryFailureDetails?
        /// The import path to the Amazon S3 bucket (and optional prefix) that you're using as the data repository for your FSx for Lustre file system, for example s3://import-bucket/optional-prefix. If a prefix is specified after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system.
        public var importPath: Swift.String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public var importedFileChunkSize: Swift.Int?
        /// Describes the state of the file system's S3 durable data repository, if it is configured with an S3 repository. The lifecycle can have the following values:
        ///
        /// * CREATING - The data repository configuration between the FSx file system and the linked S3 data repository is being created. The data repository is unavailable.
        ///
        /// * AVAILABLE - The data repository is available for use.
        ///
        /// * MISCONFIGURED - Amazon FSx cannot automatically import updates from the S3 bucket until the data repository configuration is corrected. For more information, see [Troubleshooting a Misconfigured linked S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/troubleshooting.html#troubleshooting-misconfigured-data-repository).
        ///
        /// * UPDATING - The data repository is undergoing a customer initiated update and availability may be impacted.
        ///
        /// * FAILED - The data repository is in a terminal state that cannot be recovered.
        public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?

        public init (
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            exportPath: Swift.String? = nil,
            failureDetails: FSxClientTypes.DataRepositoryFailureDetails? = nil,
            importPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.exportPath = exportPath
            self.failureDetails = failureDetails
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
            self.lifecycle = lifecycle
        }
    }

}

extension FSxClientTypes.DataRepositoryFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
    public struct DataRepositoryFailureDetails: Swift.Equatable {
        /// A detailed error message.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {
    public enum DataRepositoryLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case misconfigured
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataRepositoryLifecycle(rawValue: rawValue) ?? DataRepositoryLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.DataRepositoryTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityToRelease = "CapacityToRelease"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case paths = "Paths"
        case report = "Report"
        case resourceARN = "ResourceARN"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case taskId = "TaskId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityToRelease = self.capacityToRelease {
            try encodeContainer.encode(capacityToRelease, forKey: .capacityToRelease)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let paths = paths {
            var pathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .paths)
            for datarepositorytaskpath0 in paths {
                try pathsContainer.encode(datarepositorytaskpath0)
            }
        }
        if let report = self.report {
            try encodeContainer.encode(report, forKey: .report)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskType.self, forKey: .type)
        type = typeDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let pathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .paths)
        var pathsDecoded0:[Swift.String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [Swift.String]()
            for string0 in pathsContainer {
                if let string0 = string0 {
                    pathsDecoded0?.append(string0)
                }
            }
        }
        paths = pathsDecoded0
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskStatus.self, forKey: .status)
        status = statusDecoded
        let reportDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CompletionReport.self, forKey: .report)
        report = reportDecoded
        let capacityToReleaseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityToRelease)
        capacityToRelease = capacityToReleaseDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
    }
}

extension FSxClientTypes {
    /// A description of the data repository task. You use data repository tasks to perform bulk transfer operations between an Amazon FSx for Lustre file system and a linked data repository. An Amazon File Cache resource uses a task to automatically release files from the cache.
    public struct DataRepositoryTask: Swift.Equatable {
        /// Specifies the amount of data to release, in GiB, by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
        public var capacityToRelease: Swift.Int?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the system completed processing the task, populated after the task is complete.
        public var endTime: ClientRuntime.Date?
        /// Failure message describing why the task failed, it is populated only when Lifecycle is set to FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The globally unique ID of the file system.
        public var fileSystemId: Swift.String?
        /// The lifecycle status of the data repository task, as follows:
        ///
        /// * PENDING - The task has not started.
        ///
        /// * EXECUTING - The task is in process.
        ///
        /// * FAILED - The task was not able to be completed. For example, there may be files the task failed to process. The [DataRepositoryTaskFailureDetails] property provides more information about task failures.
        ///
        /// * SUCCEEDED - The task has completed successfully.
        ///
        /// * CANCELED - The task was canceled and it did not complete.
        ///
        /// * CANCELING - The task is in process of being canceled.
        ///
        ///
        /// You cannot delete an FSx for Lustre file system if there are data repository tasks for the file system in the PENDING or EXECUTING states. Please retry when the data repository task is finished (with a status of CANCELED, SUCCEEDED, or FAILED). You can use the DescribeDataRepositoryTask action to monitor the task status. Contact the FSx team if you need to delete your file system immediately.
        /// This member is required.
        public var lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
        /// An array of paths that specify the data for the data repository task to process. For example, in an EXPORT_TO_REPOSITORY task, the paths specify which data to export to the linked data repository. (Default) If Paths is not specified, Amazon FSx uses the file system root directory.
        public var paths: [Swift.String]?
        /// Provides a report detailing the data repository task results of the files processed that match the criteria specified in the report Scope parameter. FSx delivers the report to the file system's linked data repository in Amazon S3, using the path specified in the report Path parameter. You can specify whether or not a report gets generated for a task using the Enabled parameter.
        public var report: FSxClientTypes.CompletionReport?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The time the system began processing the task.
        public var startTime: ClientRuntime.Date?
        /// Provides the status of the number of files that the task has processed successfully and failed to process.
        public var status: FSxClientTypes.DataRepositoryTaskStatus?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The system-generated, unique 17-digit ID of the data repository task.
        /// This member is required.
        public var taskId: Swift.String?
        /// The type of data repository task.
        ///
        /// * EXPORT_TO_REPOSITORY tasks export from your Amazon FSx for Lustre file system to a linked data repository.
        ///
        /// * IMPORT_METADATA_FROM_REPOSITORY tasks import metadata changes from a linked S3 bucket to your Amazon FSx for Lustre file system.
        ///
        /// * AUTO_RELEASE_DATA tasks automatically release files from an Amazon File Cache resource.
        /// This member is required.
        public var type: FSxClientTypes.DataRepositoryTaskType?

        public init (
            capacityToRelease: Swift.Int? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle? = nil,
            paths: [Swift.String]? = nil,
            report: FSxClientTypes.CompletionReport? = nil,
            resourceARN: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: FSxClientTypes.DataRepositoryTaskStatus? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            taskId: Swift.String? = nil,
            type: FSxClientTypes.DataRepositoryTaskType? = nil
        )
        {
            self.capacityToRelease = capacityToRelease
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.paths = paths
            self.report = report
            self.resourceARN = resourceARN
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.taskId = taskId
            self.type = type
        }
    }

}

extension DataRepositoryTaskEnded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DataRepositoryTaskEndedBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The data repository task could not be canceled because the task has already ended.
public struct DataRepositoryTaskEnded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DataRepositoryTaskEndedBody: Swift.Equatable {
    let message: Swift.String?
}

extension DataRepositoryTaskEndedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DataRepositoryTaskExecuting {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DataRepositoryTaskExecutingBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An existing data repository task is currently executing on the file system. Wait until the existing task has completed, then create the new task.
public struct DataRepositoryTaskExecuting: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DataRepositoryTaskExecutingBody: Swift.Equatable {
    let message: Swift.String?
}

extension DataRepositoryTaskExecutingBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.DataRepositoryTaskFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// Provides information about why a data repository task failed. Only populated when the task Lifecycle is set to FAILED.
    public struct DataRepositoryTaskFailureDetails: Swift.Equatable {
        /// A detailed error message.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes.DataRepositoryTaskFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for datarepositorytaskfiltervalue0 in values {
                try valuesContainer.encode(datarepositorytaskfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension FSxClientTypes {
    /// (Optional) An array of filter objects you can use to filter the response of data repository tasks you will see in the the response. You can filter the tasks returned in the response by one or more file system IDs, task lifecycles, and by task type. A filter object consists of a filter Name, and one or more Values for the filter.
    public struct DataRepositoryTaskFilter: Swift.Equatable {
        /// Name of the task property to use in filtering the tasks returned in the response.
        ///
        /// * Use file-system-id to retrieve data repository tasks for specific file systems.
        ///
        /// * Use task-lifecycle to retrieve data repository tasks with one or more specific lifecycle states, as follows: CANCELED, EXECUTING, FAILED, PENDING, and SUCCEEDED.
        public var name: FSxClientTypes.DataRepositoryTaskFilterName?
        /// Use Values to include the specific file system IDs and task lifecycle states for the filters you are using.
        public var values: [Swift.String]?

        public init (
            name: FSxClientTypes.DataRepositoryTaskFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension FSxClientTypes {
    public enum DataRepositoryTaskFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dataRepoAssociationId
        case fileCacheId
        case fileSystemId
        case taskLifecycle
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskFilterName] {
            return [
                .dataRepoAssociationId,
                .fileCacheId,
                .fileSystemId,
                .taskLifecycle,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dataRepoAssociationId: return "data-repository-association-id"
            case .fileCacheId: return "file-cache-id"
            case .fileSystemId: return "file-system-id"
            case .taskLifecycle: return "task-lifecycle"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataRepositoryTaskFilterName(rawValue: rawValue) ?? DataRepositoryTaskFilterName.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum DataRepositoryTaskLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case canceling
        case executing
        case failed
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskLifecycle] {
            return [
                .canceled,
                .canceling,
                .executing,
                .failed,
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .canceling: return "CANCELING"
            case .executing: return "EXECUTING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataRepositoryTaskLifecycle(rawValue: rawValue) ?? DataRepositoryTaskLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension DataRepositoryTaskNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DataRepositoryTaskNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The data repository task or tasks you specified could not be found.
public struct DataRepositoryTaskNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DataRepositoryTaskNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension DataRepositoryTaskNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.DataRepositoryTaskStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedCount = "FailedCount"
        case lastUpdatedTime = "LastUpdatedTime"
        case releasedCapacity = "ReleasedCapacity"
        case succeededCount = "SucceededCount"
        case totalCount = "TotalCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failedCount = self.failedCount {
            try encodeContainer.encode(failedCount, forKey: .failedCount)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encodeTimestamp(lastUpdatedTime, format: .epochSeconds, forKey: .lastUpdatedTime)
        }
        if let releasedCapacity = self.releasedCapacity {
            try encodeContainer.encode(releasedCapacity, forKey: .releasedCapacity)
        }
        if let succeededCount = self.succeededCount {
            try encodeContainer.encode(succeededCount, forKey: .succeededCount)
        }
        if let totalCount = self.totalCount {
            try encodeContainer.encode(totalCount, forKey: .totalCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCount)
        totalCount = totalCountDecoded
        let succeededCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .succeededCount)
        succeededCount = succeededCountDecoded
        let failedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedCount)
        failedCount = failedCountDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let releasedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .releasedCapacity)
        releasedCapacity = releasedCapacityDecoded
    }
}

extension FSxClientTypes {
    /// Provides the task status showing a running total of the total number of files to be processed, the number successfully processed, and the number of files the task failed to process.
    public struct DataRepositoryTaskStatus: Swift.Equatable {
        /// A running total of the number of files that the task failed to process.
        public var failedCount: Swift.Int?
        /// The time at which the task status was last updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
        public var releasedCapacity: Swift.Int?
        /// A running total of the number of files that the task has successfully processed.
        public var succeededCount: Swift.Int?
        /// The total number of files that the task will process. While a task is executing, the sum of SucceededCount plus FailedCount may not equal TotalCount. When the task is complete, TotalCount equals the sum of SucceededCount plus FailedCount.
        public var totalCount: Swift.Int?

        public init (
            failedCount: Swift.Int? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            releasedCapacity: Swift.Int? = nil,
            succeededCount: Swift.Int? = nil,
            totalCount: Swift.Int? = nil
        )
        {
            self.failedCount = failedCount
            self.lastUpdatedTime = lastUpdatedTime
            self.releasedCapacity = releasedCapacity
            self.succeededCount = succeededCount
            self.totalCount = totalCount
        }
    }

}

extension FSxClientTypes {
    public enum DataRepositoryTaskType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoTriggeredEviction
        case eviction
        case export
        case `import`
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskType] {
            return [
                .autoTriggeredEviction,
                .eviction,
                .export,
                .import,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoTriggeredEviction: return "AUTO_RELEASE_DATA"
            case .eviction: return "RELEASE_DATA_FROM_FILESYSTEM"
            case .export: return "EXPORT_TO_REPOSITORY"
            case .import: return "IMPORT_METADATA_FROM_REPOSITORY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataRepositoryTaskType(rawValue: rawValue) ?? DataRepositoryTaskType.sdkUnknown(rawValue)
        }
    }
}

extension DeleteBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
    }
}

extension DeleteBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the DeleteBackup operation.
public struct DeleteBackupInput: Swift.Equatable {
    /// The ID of the backup that you want to delete.
    /// This member is required.
    public var backupId: Swift.String?
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This parameter is automatically filled on your behalf when using the CLI or SDK.
    public var clientRequestToken: Swift.String?

    public init (
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
    }
}

struct DeleteBackupInputBody: Swift.Equatable {
    let backupId: Swift.String?
    let clientRequestToken: Swift.String?
}

extension DeleteBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DeleteBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupBeingCopied" : self = .backupBeingCopied(try BackupBeingCopied(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupInProgress" : self = .backupInProgress(try BackupInProgress(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFound" : self = .backupNotFound(try BackupNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupRestoring" : self = .backupRestoring(try BackupRestoring(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBackupOutputError: Swift.Error, Swift.Equatable {
    case backupBeingCopied(BackupBeingCopied)
    case backupInProgress(BackupInProgress)
    case backupNotFound(BackupNotFound)
    case backupRestoring(BackupRestoring)
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backupId = output.backupId
            self.lifecycle = output.lifecycle
        } else {
            self.backupId = nil
            self.lifecycle = nil
        }
    }
}

/// The response object for the DeleteBackup operation.
public struct DeleteBackupOutputResponse: Swift.Equatable {
    /// The ID of the backup that was deleted.
    public var backupId: Swift.String?
    /// The lifecycle status of the backup. If the DeleteBackup operation is successful, the status is DELETED.
    public var lifecycle: FSxClientTypes.BackupLifecycle?

    public init (
        backupId: Swift.String? = nil,
        lifecycle: FSxClientTypes.BackupLifecycle? = nil
    )
    {
        self.backupId = backupId
        self.lifecycle = lifecycle
    }
}

struct DeleteBackupOutputResponseBody: Swift.Equatable {
    let backupId: Swift.String?
    let lifecycle: FSxClientTypes.BackupLifecycle?
}

extension DeleteBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case lifecycle = "Lifecycle"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}

extension DeleteDataRepositoryAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case clientRequestToken = "ClientRequestToken"
        case deleteDataInFileSystem = "DeleteDataInFileSystem"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let deleteDataInFileSystem = self.deleteDataInFileSystem {
            try encodeContainer.encode(deleteDataInFileSystem, forKey: .deleteDataInFileSystem)
        }
    }
}

extension DeleteDataRepositoryAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataRepositoryAssociationInput: Swift.Equatable {
    /// The ID of the data repository association that you want to delete.
    /// This member is required.
    public var associationId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Set to true to delete the data in the file system that corresponds to the data repository association.
    public var deleteDataInFileSystem: Swift.Bool?

    public init (
        associationId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        deleteDataInFileSystem: Swift.Bool? = nil
    )
    {
        self.associationId = associationId
        self.clientRequestToken = clientRequestToken
        self.deleteDataInFileSystem = deleteDataInFileSystem
    }
}

struct DeleteDataRepositoryAssociationInputBody: Swift.Equatable {
    let associationId: Swift.String?
    let clientRequestToken: Swift.String?
    let deleteDataInFileSystem: Swift.Bool?
}

extension DeleteDataRepositoryAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case clientRequestToken = "ClientRequestToken"
        case deleteDataInFileSystem = "DeleteDataInFileSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let deleteDataInFileSystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteDataInFileSystem)
        deleteDataInFileSystem = deleteDataInFileSystemDecoded
    }
}

extension DeleteDataRepositoryAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataRepositoryAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryAssociationNotFound" : self = .dataRepositoryAssociationNotFound(try DataRepositoryAssociationNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDataRepositoryAssociationOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryAssociationNotFound(DataRepositoryAssociationNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataRepositoryAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDataRepositoryAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.associationId = output.associationId
            self.deleteDataInFileSystem = output.deleteDataInFileSystem
            self.lifecycle = output.lifecycle
        } else {
            self.associationId = nil
            self.deleteDataInFileSystem = nil
            self.lifecycle = nil
        }
    }
}

public struct DeleteDataRepositoryAssociationOutputResponse: Swift.Equatable {
    /// The ID of the data repository association being deleted.
    public var associationId: Swift.String?
    /// Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is false.
    public var deleteDataInFileSystem: Swift.Bool?
    /// Describes the lifecycle state of the data repository association being deleted.
    public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?

    public init (
        associationId: Swift.String? = nil,
        deleteDataInFileSystem: Swift.Bool? = nil,
        lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil
    )
    {
        self.associationId = associationId
        self.deleteDataInFileSystem = deleteDataInFileSystem
        self.lifecycle = lifecycle
    }
}

struct DeleteDataRepositoryAssociationOutputResponseBody: Swift.Equatable {
    let associationId: Swift.String?
    let lifecycle: FSxClientTypes.DataRepositoryLifecycle?
    let deleteDataInFileSystem: Swift.Bool?
}

extension DeleteDataRepositoryAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case deleteDataInFileSystem = "DeleteDataInFileSystem"
        case lifecycle = "Lifecycle"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let deleteDataInFileSystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteDataInFileSystem)
        deleteDataInFileSystem = deleteDataInFileSystemDecoded
    }
}

extension DeleteFileCacheInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileCacheId = "FileCacheId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
    }
}

extension DeleteFileCacheInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFileCacheInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the cache that's being deleted.
    /// This member is required.
    public var fileCacheId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileCacheId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileCacheId = fileCacheId
    }
}

struct DeleteFileCacheInputBody: Swift.Equatable {
    let fileCacheId: Swift.String?
    let clientRequestToken: Swift.String?
}

extension DeleteFileCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileCacheId = "FileCacheId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DeleteFileCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFileCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileCacheNotFound" : self = .fileCacheNotFound(try FileCacheNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFileCacheOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileCacheNotFound(FileCacheNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFileCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFileCacheOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileCacheId = output.fileCacheId
            self.lifecycle = output.lifecycle
        } else {
            self.fileCacheId = nil
            self.lifecycle = nil
        }
    }
}

public struct DeleteFileCacheOutputResponse: Swift.Equatable {
    /// The ID of the cache that's being deleted.
    public var fileCacheId: Swift.String?
    /// The cache lifecycle for the deletion request. If the DeleteFileCache operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.FileCacheLifecycle?

    public init (
        fileCacheId: Swift.String? = nil,
        lifecycle: FSxClientTypes.FileCacheLifecycle? = nil
    )
    {
        self.fileCacheId = fileCacheId
        self.lifecycle = lifecycle
    }
}

struct DeleteFileCacheOutputResponseBody: Swift.Equatable {
    let fileCacheId: Swift.String?
    let lifecycle: FSxClientTypes.FileCacheLifecycle?
}

extension DeleteFileCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCacheId = "FileCacheId"
        case lifecycle = "Lifecycle"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}

extension DeleteFileSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case lustreConfiguration = "LustreConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }
}

extension DeleteFileSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for DeleteFileSystem operation.
public struct DeleteFileSystemInput: Swift.Equatable {
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This token is automatically filled on your behalf when using the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system that you want to delete.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The configuration object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public var lustreConfiguration: FSxClientTypes.DeleteFileSystemLustreConfiguration?
    /// The configuration object for the OpenZFS file system used in the DeleteFileSystem operation.
    public var openZFSConfiguration: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration?
    /// The configuration object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public var windowsConfiguration: FSxClientTypes.DeleteFileSystemWindowsConfiguration?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.DeleteFileSystemLustreConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration? = nil,
        windowsConfiguration: FSxClientTypes.DeleteFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.lustreConfiguration = lustreConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.windowsConfiguration = windowsConfiguration
    }
}

struct DeleteFileSystemInputBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let clientRequestToken: Swift.String?
    let windowsConfiguration: FSxClientTypes.DeleteFileSystemWindowsConfiguration?
    let lustreConfiguration: FSxClientTypes.DeleteFileSystemLustreConfiguration?
    let openZFSConfiguration: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration?
}

extension DeleteFileSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case lustreConfiguration = "LustreConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes.DeleteFileSystemLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupTags = "FinalBackupTags"
        case skipFinalBackup = "SkipFinalBackup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
        if let skipFinalBackup = self.skipFinalBackup {
            try encodeContainer.encode(skipFinalBackup, forKey: .skipFinalBackup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skipFinalBackupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalBackup)
        skipFinalBackup = skipFinalBackupDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemLustreConfiguration: Swift.Equatable {
        /// Use if SkipFinalBackup is set to false, and you want to apply an array of tags to the final backup. If you have set the file system property CopyTagsToBackups to true, and you specify one or more FinalBackupTags when deleting a file system, Amazon FSx will not copy any existing file system tags to the backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// Set SkipFinalBackup to false if you want to take a final backup of the file system you are deleting. By default, Amazon FSx will not take a final backup on your behalf when the DeleteFileSystem operation is invoked. (Default = true) The fsx:CreateBackup permission is required if you set SkipFinalBackup to false in order to delete the file system and take a final backup.
        public var skipFinalBackup: Swift.Bool?

        public init (
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes.DeleteFileSystemLustreResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupId = "FinalBackupId"
        case finalBackupTags = "FinalBackupTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupId = self.finalBackupId {
            try encodeContainer.encode(finalBackupId, forKey: .finalBackupId)
        }
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalBackupId)
        finalBackupId = finalBackupIdDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemLustreResponse: Swift.Equatable {
        /// The ID of the final backup for this file system.
        public var finalBackupId: Swift.String?
        /// The set of tags applied to the final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init (
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension FSxClientTypes.DeleteFileSystemOpenZFSConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupTags = "FinalBackupTags"
        case options = "Options"
        case skipFinalBackup = "SkipFinalBackup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for deletefilesystemopenzfsoption0 in options {
                try optionsContainer.encode(deletefilesystemopenzfsoption0.rawValue)
            }
        }
        if let skipFinalBackup = self.skipFinalBackup {
            try encodeContainer.encode(skipFinalBackup, forKey: .skipFinalBackup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skipFinalBackupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalBackup)
        skipFinalBackup = skipFinalBackupDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
        let optionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.DeleteFileSystemOpenZFSOption?].self, forKey: .options)
        var optionsDecoded0:[FSxClientTypes.DeleteFileSystemOpenZFSOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [FSxClientTypes.DeleteFileSystemOpenZFSOption]()
            for enum0 in optionsContainer {
                if let enum0 = enum0 {
                    optionsDecoded0?.append(enum0)
                }
            }
        }
        options = optionsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration object for the Amazon FSx for OpenZFS file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemOpenZFSConfiguration: Swift.Equatable {
        /// A list of tags to apply to the file system's final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// To delete a file system if there are child volumes present below the root volume, use the string DELETE_CHILD_VOLUMES_AND_SNAPSHOTS. If your file system has child volumes and you don't use this option, the delete request will fail.
        public var options: [FSxClientTypes.DeleteFileSystemOpenZFSOption]?
        /// By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the DeleteFileSystem operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to true.
        public var skipFinalBackup: Swift.Bool?

        public init (
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            options: [FSxClientTypes.DeleteFileSystemOpenZFSOption]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.options = options
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes {
    public enum DeleteFileSystemOpenZFSOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteChildVolumesAndSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteFileSystemOpenZFSOption] {
            return [
                .deleteChildVolumesAndSnapshots,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteChildVolumesAndSnapshots: return "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeleteFileSystemOpenZFSOption(rawValue: rawValue) ?? DeleteFileSystemOpenZFSOption.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.DeleteFileSystemOpenZFSResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupId = "FinalBackupId"
        case finalBackupTags = "FinalBackupTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupId = self.finalBackupId {
            try encodeContainer.encode(finalBackupId, forKey: .finalBackupId)
        }
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalBackupId)
        finalBackupId = finalBackupIdDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for OpenZFS file system that's being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemOpenZFSResponse: Swift.Equatable {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var finalBackupId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init (
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension DeleteFileSystemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFileSystemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFileSystemOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFileSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFileSystemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystemId = output.fileSystemId
            self.lifecycle = output.lifecycle
            self.lustreResponse = output.lustreResponse
            self.openZFSResponse = output.openZFSResponse
            self.windowsResponse = output.windowsResponse
        } else {
            self.fileSystemId = nil
            self.lifecycle = nil
            self.lustreResponse = nil
            self.openZFSResponse = nil
            self.windowsResponse = nil
        }
    }
}

/// The response object for the DeleteFileSystem operation.
public struct DeleteFileSystemOutputResponse: Swift.Equatable {
    /// The ID of the file system that's being deleted.
    public var fileSystemId: Swift.String?
    /// The file system lifecycle for the deletion request. If the DeleteFileSystem operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.FileSystemLifecycle?
    /// The response object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public var lustreResponse: FSxClientTypes.DeleteFileSystemLustreResponse?
    /// The response object for the OpenZFS file system that's being deleted in the DeleteFileSystem operation.
    public var openZFSResponse: FSxClientTypes.DeleteFileSystemOpenZFSResponse?
    /// The response object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public var windowsResponse: FSxClientTypes.DeleteFileSystemWindowsResponse?

    public init (
        fileSystemId: Swift.String? = nil,
        lifecycle: FSxClientTypes.FileSystemLifecycle? = nil,
        lustreResponse: FSxClientTypes.DeleteFileSystemLustreResponse? = nil,
        openZFSResponse: FSxClientTypes.DeleteFileSystemOpenZFSResponse? = nil,
        windowsResponse: FSxClientTypes.DeleteFileSystemWindowsResponse? = nil
    )
    {
        self.fileSystemId = fileSystemId
        self.lifecycle = lifecycle
        self.lustreResponse = lustreResponse
        self.openZFSResponse = openZFSResponse
        self.windowsResponse = windowsResponse
    }
}

struct DeleteFileSystemOutputResponseBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let lifecycle: FSxClientTypes.FileSystemLifecycle?
    let windowsResponse: FSxClientTypes.DeleteFileSystemWindowsResponse?
    let lustreResponse: FSxClientTypes.DeleteFileSystemLustreResponse?
    let openZFSResponse: FSxClientTypes.DeleteFileSystemOpenZFSResponse?
}

extension DeleteFileSystemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case lustreResponse = "LustreResponse"
        case openZFSResponse = "OpenZFSResponse"
        case windowsResponse = "WindowsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let windowsResponseDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemWindowsResponse.self, forKey: .windowsResponse)
        windowsResponse = windowsResponseDecoded
        let lustreResponseDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemLustreResponse.self, forKey: .lustreResponse)
        lustreResponse = lustreResponseDecoded
        let openZFSResponseDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteFileSystemOpenZFSResponse.self, forKey: .openZFSResponse)
        openZFSResponse = openZFSResponseDecoded
    }
}

extension FSxClientTypes.DeleteFileSystemWindowsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupTags = "FinalBackupTags"
        case skipFinalBackup = "SkipFinalBackup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
        if let skipFinalBackup = self.skipFinalBackup {
            try encodeContainer.encode(skipFinalBackup, forKey: .skipFinalBackup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skipFinalBackupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalBackup)
        skipFinalBackup = skipFinalBackupDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemWindowsConfiguration: Swift.Equatable {
        /// A set of tags for your final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// By default, Amazon FSx for Windows takes a final backup on your behalf when the DeleteFileSystem operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.
        public var skipFinalBackup: Swift.Bool?

        public init (
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes.DeleteFileSystemWindowsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupId = "FinalBackupId"
        case finalBackupTags = "FinalBackupTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupId = self.finalBackupId {
            try encodeContainer.encode(finalBackupId, forKey: .finalBackupId)
        }
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalBackupId)
        finalBackupId = finalBackupIdDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The response object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemWindowsResponse: Swift.Equatable {
        /// The ID of the final backup for this file system.
        public var finalBackupId: Swift.String?
        /// The set of tags applied to the final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init (
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension FSxClientTypes {
    public enum DeleteOpenZFSVolumeOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteChildVolumesAndSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteOpenZFSVolumeOption] {
            return [
                .deleteChildVolumesAndSnapshots,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteChildVolumesAndSnapshots: return "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeleteOpenZFSVolumeOption(rawValue: rawValue) ?? DeleteOpenZFSVolumeOption.sdkUnknown(rawValue)
        }
    }
}

extension DeleteSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case snapshotId = "SnapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
    }
}

extension DeleteSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSnapshotInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the snapshot that you want to delete.
    /// This member is required.
    public var snapshotId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.snapshotId = snapshotId
    }
}

struct DeleteSnapshotInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let snapshotId: Swift.String?
}

extension DeleteSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

extension DeleteSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFound" : self = .snapshotNotFound(try SnapshotNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSnapshotOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case snapshotNotFound(SnapshotNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycle = output.lifecycle
            self.snapshotId = output.snapshotId
        } else {
            self.lifecycle = nil
            self.snapshotId = nil
        }
    }
}

public struct DeleteSnapshotOutputResponse: Swift.Equatable {
    /// The lifecycle status of the snapshot. If the DeleteSnapshot operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.SnapshotLifecycle?
    /// The ID of the deleted snapshot.
    public var snapshotId: Swift.String?

    public init (
        lifecycle: FSxClientTypes.SnapshotLifecycle? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.snapshotId = snapshotId
    }
}

struct DeleteSnapshotOutputResponseBody: Swift.Equatable {
    let snapshotId: Swift.String?
    let lifecycle: FSxClientTypes.SnapshotLifecycle?
}

extension DeleteSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycle = "Lifecycle"
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SnapshotLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}

extension DeleteStorageVirtualMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case storageVirtualMachineId = "StorageVirtualMachineId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
    }
}

extension DeleteStorageVirtualMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStorageVirtualMachineInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the SVM that you want to delete.
    /// This member is required.
    public var storageVirtualMachineId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        storageVirtualMachineId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.storageVirtualMachineId = storageVirtualMachineId
    }
}

struct DeleteStorageVirtualMachineInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let storageVirtualMachineId: Swift.String?
}

extension DeleteStorageVirtualMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case storageVirtualMachineId = "StorageVirtualMachineId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
    }
}

extension DeleteStorageVirtualMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStorageVirtualMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StorageVirtualMachineNotFound" : self = .storageVirtualMachineNotFound(try StorageVirtualMachineNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStorageVirtualMachineOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case storageVirtualMachineNotFound(StorageVirtualMachineNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStorageVirtualMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteStorageVirtualMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycle = output.lifecycle
            self.storageVirtualMachineId = output.storageVirtualMachineId
        } else {
            self.lifecycle = nil
            self.storageVirtualMachineId = nil
        }
    }
}

public struct DeleteStorageVirtualMachineOutputResponse: Swift.Equatable {
    /// Describes the lifecycle state of the SVM being deleted.
    public var lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle?
    /// The ID of the SVM Amazon FSx is deleting.
    public var storageVirtualMachineId: Swift.String?

    public init (
        lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle? = nil,
        storageVirtualMachineId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.storageVirtualMachineId = storageVirtualMachineId
    }
}

struct DeleteStorageVirtualMachineOutputResponseBody: Swift.Equatable {
    let storageVirtualMachineId: Swift.String?
    let lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle?
}

extension DeleteStorageVirtualMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycle = "Lifecycle"
        case storageVirtualMachineId = "StorageVirtualMachineId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}

extension DeleteVolumeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }
}

extension DeleteVolumeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteVolumeInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// For Amazon FSx for ONTAP volumes, specify whether to take a final backup of the volume and apply tags to the backup. To apply tags to the backup, you must have the fsx:TagResource permission.
    public var ontapConfiguration: FSxClientTypes.DeleteVolumeOntapConfiguration?
    /// For Amazon FSx for OpenZFS volumes, specify whether to delete all child volumes and snapshots.
    public var openZFSConfiguration: FSxClientTypes.DeleteVolumeOpenZFSConfiguration?
    /// The ID of the volume that you are deleting.
    /// This member is required.
    public var volumeId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.DeleteVolumeOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.DeleteVolumeOpenZFSConfiguration? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.volumeId = volumeId
    }
}

struct DeleteVolumeInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeId: Swift.String?
    let ontapConfiguration: FSxClientTypes.DeleteVolumeOntapConfiguration?
    let openZFSConfiguration: FSxClientTypes.DeleteVolumeOpenZFSConfiguration?
}

extension DeleteVolumeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteVolumeOntapConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteVolumeOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes.DeleteVolumeOntapConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupTags = "FinalBackupTags"
        case skipFinalBackup = "SkipFinalBackup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
        if let skipFinalBackup = self.skipFinalBackup {
            try encodeContainer.encode(skipFinalBackup, forKey: .skipFinalBackup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skipFinalBackupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalBackup)
        skipFinalBackup = skipFinalBackupDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// Use to specify skipping a final backup, or to add tags to a final backup.
    public struct DeleteVolumeOntapConfiguration: Swift.Equatable {
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// Set to true if you want to skip taking a final backup of the volume you are deleting.
        public var skipFinalBackup: Swift.Bool?

        public init (
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes.DeleteVolumeOntapResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalBackupId = "FinalBackupId"
        case finalBackupTags = "FinalBackupTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalBackupId = self.finalBackupId {
            try encodeContainer.encode(finalBackupId, forKey: .finalBackupId)
        }
        if let finalBackupTags = finalBackupTags {
            var finalBackupTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalBackupTags)
            for tag0 in finalBackupTags {
                try finalBackupTagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalBackupId)
        finalBackupId = finalBackupIdDecoded
        let finalBackupTagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .finalBackupTags)
        var finalBackupTagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let finalBackupTagsContainer = finalBackupTagsContainer {
            finalBackupTagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in finalBackupTagsContainer {
                if let structure0 = structure0 {
                    finalBackupTagsDecoded0?.append(structure0)
                }
            }
        }
        finalBackupTags = finalBackupTagsDecoded0
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for NetApp ONTAP volume being deleted in the DeleteVolume operation.
    public struct DeleteVolumeOntapResponse: Swift.Equatable {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var finalBackupId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init (
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension FSxClientTypes.DeleteVolumeOpenZFSConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for deleteopenzfsvolumeoption0 in options {
                try optionsContainer.encode(deleteopenzfsvolumeoption0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.DeleteOpenZFSVolumeOption?].self, forKey: .options)
        var optionsDecoded0:[FSxClientTypes.DeleteOpenZFSVolumeOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [FSxClientTypes.DeleteOpenZFSVolumeOption]()
            for enum0 in optionsContainer {
                if let enum0 = enum0 {
                    optionsDecoded0?.append(enum0)
                }
            }
        }
        options = optionsDecoded0
    }
}

extension FSxClientTypes {
    /// A value that specifies whether to delete all child volumes and snapshots.
    public struct DeleteVolumeOpenZFSConfiguration: Swift.Equatable {
        /// To delete the volume's child volumes, snapshots, and clones, use the string DELETE_CHILD_VOLUMES_AND_SNAPSHOTS.
        public var options: [FSxClientTypes.DeleteOpenZFSVolumeOption]?

        public init (
            options: [FSxClientTypes.DeleteOpenZFSVolumeOption]? = nil
        )
        {
            self.options = options
        }
    }

}

extension DeleteVolumeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVolumeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVolumeOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVolumeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteVolumeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycle = output.lifecycle
            self.ontapResponse = output.ontapResponse
            self.volumeId = output.volumeId
        } else {
            self.lifecycle = nil
            self.ontapResponse = nil
            self.volumeId = nil
        }
    }
}

public struct DeleteVolumeOutputResponse: Swift.Equatable {
    /// The lifecycle state of the volume being deleted. If the DeleteVolume operation is successful, this value is DELETING.
    public var lifecycle: FSxClientTypes.VolumeLifecycle?
    /// Returned after a DeleteVolume request, showing the status of the delete request.
    public var ontapResponse: FSxClientTypes.DeleteVolumeOntapResponse?
    /// The ID of the volume that's being deleted.
    public var volumeId: Swift.String?

    public init (
        lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
        ontapResponse: FSxClientTypes.DeleteVolumeOntapResponse? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.ontapResponse = ontapResponse
        self.volumeId = volumeId
    }
}

struct DeleteVolumeOutputResponseBody: Swift.Equatable {
    let volumeId: Swift.String?
    let lifecycle: FSxClientTypes.VolumeLifecycle?
    let ontapResponse: FSxClientTypes.DeleteVolumeOntapResponse?
}

extension DeleteVolumeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycle = "Lifecycle"
        case ontapResponse = "OntapResponse"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let ontapResponseDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DeleteVolumeOntapResponse.self, forKey: .ontapResponse)
        ontapResponse = ontapResponseDecoded
    }
}

extension DescribeBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupIds = "BackupIds"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupIds = backupIds {
            var backupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backupIds)
            for backupid0 in backupIds {
                try backupIdsContainer.encode(backupid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeBackupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the DescribeBackups operation.
public struct DescribeBackupsInput: Swift.Equatable {
    /// The IDs of the backups that you want to retrieve. This parameter value overrides any filters. If any IDs aren't found, a BackupNotFound error occurs.
    public var backupIds: [Swift.String]?
    /// The filters structure. The supported names are file-system-id, backup-type, file-system-type, and volume-id.
    public var filters: [FSxClientTypes.Filter]?
    /// Maximum number of backups to return in the response. This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// An opaque pagination token returned from a previous DescribeBackups operation. If a token is present, the operation continues the list from where the returning call left off.
    public var nextToken: Swift.String?

    public init (
        backupIds: [Swift.String]? = nil,
        filters: [FSxClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.backupIds = backupIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeBackupsInputBody: Swift.Equatable {
    let backupIds: [Swift.String]?
    let filters: [FSxClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeBackupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupIds = "BackupIds"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .backupIds)
        var backupIdsDecoded0:[Swift.String]? = nil
        if let backupIdsContainer = backupIdsContainer {
            backupIdsDecoded0 = [Swift.String]()
            for string0 in backupIdsContainer {
                if let string0 = string0 {
                    backupIdsDecoded0?.append(string0)
                }
            }
        }
        backupIds = backupIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeBackupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBackupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupNotFound" : self = .backupNotFound(try BackupNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeBackupsOutputError: Swift.Error, Swift.Equatable {
    case backupNotFound(BackupNotFound)
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBackupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeBackupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backups = output.backups
            self.nextToken = output.nextToken
        } else {
            self.backups = nil
            self.nextToken = nil
        }
    }
}

/// Response object for the DescribeBackups operation.
public struct DescribeBackupsOutputResponse: Swift.Equatable {
    /// An array of backups.
    public var backups: [FSxClientTypes.Backup]?
    /// A NextToken value is present if there are more backups than returned in the response. You can use the NextToken value in the subsequent request to fetch the backups.
    public var nextToken: Swift.String?

    public init (
        backups: [FSxClientTypes.Backup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.backups = backups
        self.nextToken = nextToken
    }
}

struct DescribeBackupsOutputResponseBody: Swift.Equatable {
    let backups: [FSxClientTypes.Backup]?
    let nextToken: Swift.String?
}

extension DescribeBackupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backups = "Backups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Backup?].self, forKey: .backups)
        var backupsDecoded0:[FSxClientTypes.Backup]? = nil
        if let backupsContainer = backupsContainer {
            backupsDecoded0 = [FSxClientTypes.Backup]()
            for structure0 in backupsContainer {
                if let structure0 = structure0 {
                    backupsDecoded0?.append(structure0)
                }
            }
        }
        backups = backupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDataRepositoryAssociationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationIds = "AssociationIds"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationIds = associationIds {
            var associationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associationIds)
            for datarepositoryassociationid0 in associationIds {
                try associationIdsContainer.encode(datarepositoryassociationid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDataRepositoryAssociationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataRepositoryAssociationsInput: Swift.Equatable {
    /// IDs of the data repository associations whose descriptions you want to retrieve (String).
    public var associationIds: [Swift.String]?
    /// A list of Filter elements.
    public var filters: [FSxClientTypes.Filter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init (
        associationIds: [Swift.String]? = nil,
        filters: [FSxClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associationIds = associationIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeDataRepositoryAssociationsInputBody: Swift.Equatable {
    let associationIds: [Swift.String]?
    let filters: [FSxClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeDataRepositoryAssociationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationIds = "AssociationIds"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .associationIds)
        var associationIdsDecoded0:[Swift.String]? = nil
        if let associationIdsContainer = associationIdsContainer {
            associationIdsDecoded0 = [Swift.String]()
            for string0 in associationIdsContainer {
                if let string0 = string0 {
                    associationIdsDecoded0?.append(string0)
                }
            }
        }
        associationIds = associationIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDataRepositoryAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataRepositoryAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryAssociationNotFound" : self = .dataRepositoryAssociationNotFound(try DataRepositoryAssociationNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDataRepositoryType" : self = .invalidDataRepositoryType(try InvalidDataRepositoryType(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDataRepositoryAssociationsOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryAssociationNotFound(DataRepositoryAssociationNotFound)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case invalidDataRepositoryType(InvalidDataRepositoryType)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataRepositoryAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDataRepositoryAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.associations = output.associations
            self.nextToken = output.nextToken
        } else {
            self.associations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDataRepositoryAssociationsOutputResponse: Swift.Equatable {
    /// An array of one or more data repository association descriptions.
    public var associations: [FSxClientTypes.DataRepositoryAssociation]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init (
        associations: [FSxClientTypes.DataRepositoryAssociation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associations = associations
        self.nextToken = nextToken
    }
}

struct DescribeDataRepositoryAssociationsOutputResponseBody: Swift.Equatable {
    let associations: [FSxClientTypes.DataRepositoryAssociation]?
    let nextToken: Swift.String?
}

extension DescribeDataRepositoryAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associations = "Associations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationsContainer = try containerValues.decodeIfPresent([FSxClientTypes.DataRepositoryAssociation?].self, forKey: .associations)
        var associationsDecoded0:[FSxClientTypes.DataRepositoryAssociation]? = nil
        if let associationsContainer = associationsContainer {
            associationsDecoded0 = [FSxClientTypes.DataRepositoryAssociation]()
            for structure0 in associationsContainer {
                if let structure0 = structure0 {
                    associationsDecoded0?.append(structure0)
                }
            }
        }
        associations = associationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDataRepositoryTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskIds = "TaskIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for datarepositorytaskfilter0 in filters {
                try filtersContainer.encode(datarepositorytaskfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let taskIds = taskIds {
            var taskIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskIds)
            for taskid0 in taskIds {
                try taskIdsContainer.encode(taskid0)
            }
        }
    }
}

extension DescribeDataRepositoryTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataRepositoryTasksInput: Swift.Equatable {
    /// (Optional) You can use filters to narrow the DescribeDataRepositoryTasks response to include just tasks for specific file systems, or tasks in a specific lifecycle state.
    public var filters: [FSxClientTypes.DataRepositoryTaskFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// (Optional) IDs of the tasks whose descriptions you want to retrieve (String).
    public var taskIds: [Swift.String]?

    public init (
        filters: [FSxClientTypes.DataRepositoryTaskFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        taskIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.taskIds = taskIds
    }
}

struct DescribeDataRepositoryTasksInputBody: Swift.Equatable {
    let taskIds: [Swift.String]?
    let filters: [FSxClientTypes.DataRepositoryTaskFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeDataRepositoryTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskIds = "TaskIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .taskIds)
        var taskIdsDecoded0:[Swift.String]? = nil
        if let taskIdsContainer = taskIdsContainer {
            taskIdsDecoded0 = [Swift.String]()
            for string0 in taskIdsContainer {
                if let string0 = string0 {
                    taskIdsDecoded0?.append(string0)
                }
            }
        }
        taskIds = taskIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.DataRepositoryTaskFilter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.DataRepositoryTaskFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.DataRepositoryTaskFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDataRepositoryTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataRepositoryTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryTaskNotFound" : self = .dataRepositoryTaskNotFound(try DataRepositoryTaskNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDataRepositoryTasksOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryTaskNotFound(DataRepositoryTaskNotFound)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataRepositoryTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDataRepositoryTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataRepositoryTasks = output.dataRepositoryTasks
            self.nextToken = output.nextToken
        } else {
            self.dataRepositoryTasks = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDataRepositoryTasksOutputResponse: Swift.Equatable {
    /// The collection of data repository task descriptions returned.
    public var dataRepositoryTasks: [FSxClientTypes.DataRepositoryTask]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init (
        dataRepositoryTasks: [FSxClientTypes.DataRepositoryTask]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataRepositoryTasks = dataRepositoryTasks
        self.nextToken = nextToken
    }
}

struct DescribeDataRepositoryTasksOutputResponseBody: Swift.Equatable {
    let dataRepositoryTasks: [FSxClientTypes.DataRepositoryTask]?
    let nextToken: Swift.String?
}

extension DescribeDataRepositoryTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRepositoryTasks = "DataRepositoryTasks"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataRepositoryTasksContainer = try containerValues.decodeIfPresent([FSxClientTypes.DataRepositoryTask?].self, forKey: .dataRepositoryTasks)
        var dataRepositoryTasksDecoded0:[FSxClientTypes.DataRepositoryTask]? = nil
        if let dataRepositoryTasksContainer = dataRepositoryTasksContainer {
            dataRepositoryTasksDecoded0 = [FSxClientTypes.DataRepositoryTask]()
            for structure0 in dataRepositoryTasksContainer {
                if let structure0 = structure0 {
                    dataRepositoryTasksDecoded0?.append(structure0)
                }
            }
        }
        dataRepositoryTasks = dataRepositoryTasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileCachesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCacheIds = "FileCacheIds"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileCacheIds = fileCacheIds {
            var fileCacheIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileCacheIds)
            for filecacheid0 in fileCacheIds {
                try fileCacheIdsContainer.encode(filecacheid0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFileCachesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFileCachesInput: Swift.Equatable {
    /// IDs of the caches whose descriptions you want to retrieve (String).
    public var fileCacheIds: [Swift.String]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init (
        fileCacheIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileCacheIds = fileCacheIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeFileCachesInputBody: Swift.Equatable {
    let fileCacheIds: [Swift.String]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFileCachesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCacheIds = "FileCacheIds"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fileCacheIds)
        var fileCacheIdsDecoded0:[Swift.String]? = nil
        if let fileCacheIdsContainer = fileCacheIdsContainer {
            fileCacheIdsDecoded0 = [Swift.String]()
            for string0 in fileCacheIdsContainer {
                if let string0 = string0 {
                    fileCacheIdsDecoded0?.append(string0)
                }
            }
        }
        fileCacheIds = fileCacheIdsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileCachesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFileCachesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileCacheNotFound" : self = .fileCacheNotFound(try FileCacheNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFileCachesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileCacheNotFound(FileCacheNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFileCachesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFileCachesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileCaches = output.fileCaches
            self.nextToken = output.nextToken
        } else {
            self.fileCaches = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFileCachesOutputResponse: Swift.Equatable {
    /// The response object for the DescribeFileCaches operation.
    public var fileCaches: [FSxClientTypes.FileCache]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init (
        fileCaches: [FSxClientTypes.FileCache]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileCaches = fileCaches
        self.nextToken = nextToken
    }
}

struct DescribeFileCachesOutputResponseBody: Swift.Equatable {
    let fileCaches: [FSxClientTypes.FileCache]?
    let nextToken: Swift.String?
}

extension DescribeFileCachesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCaches = "FileCaches"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCachesContainer = try containerValues.decodeIfPresent([FSxClientTypes.FileCache?].self, forKey: .fileCaches)
        var fileCachesDecoded0:[FSxClientTypes.FileCache]? = nil
        if let fileCachesContainer = fileCachesContainer {
            fileCachesDecoded0 = [FSxClientTypes.FileCache]()
            for structure0 in fileCachesContainer {
                if let structure0 = structure0 {
                    fileCachesDecoded0?.append(structure0)
                }
            }
        }
        fileCaches = fileCachesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileSystemAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFileSystemAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for DescribeFileSystemAliases operation.
public struct DescribeFileSystemAliasesInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system to return the associated DNS aliases for (String).
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// Maximum number of DNS aliases to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous DescribeFileSystemAliases operation (String). If a token is included in the request, the action continues the list from where the previous returning call left off.
    public var nextToken: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeFileSystemAliasesInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileSystemId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFileSystemAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileSystemAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFileSystemAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFileSystemAliasesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFileSystemAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFileSystemAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
            self.nextToken = output.nextToken
        } else {
            self.aliases = nil
            self.nextToken = nil
        }
    }
}

/// The response object for DescribeFileSystemAliases operation.
public struct DescribeFileSystemAliasesOutputResponse: Swift.Equatable {
    /// An array of one or more DNS aliases currently associated with the specified file system.
    public var aliases: [FSxClientTypes.Alias]?
    /// Present if there are more DNS aliases than returned in the response (String). You can use the NextToken value in a later request to fetch additional descriptions.
    public var nextToken: Swift.String?

    public init (
        aliases: [FSxClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

struct DescribeFileSystemAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [FSxClientTypes.Alias]?
    let nextToken: Swift.String?
}

extension DescribeFileSystemAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([FSxClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[FSxClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [FSxClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileSystemsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemIds = "FileSystemIds"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileSystemIds = fileSystemIds {
            var fileSystemIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemIds)
            for filesystemid0 in fileSystemIds {
                try fileSystemIdsContainer.encode(filesystemid0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFileSystemsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for DescribeFileSystems operation.
public struct DescribeFileSystemsInput: Swift.Equatable {
    /// IDs of the file systems whose descriptions you want to retrieve (String).
    public var fileSystemIds: [Swift.String]?
    /// Maximum number of file systems to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous DescribeFileSystems operation (String). If a token present, the operation continues the list from where the returning call left off.
    public var nextToken: Swift.String?

    public init (
        fileSystemIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileSystemIds = fileSystemIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeFileSystemsInputBody: Swift.Equatable {
    let fileSystemIds: [Swift.String]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFileSystemsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemIds = "FileSystemIds"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fileSystemIds)
        var fileSystemIdsDecoded0:[Swift.String]? = nil
        if let fileSystemIdsContainer = fileSystemIdsContainer {
            fileSystemIdsDecoded0 = [Swift.String]()
            for string0 in fileSystemIdsContainer {
                if let string0 = string0 {
                    fileSystemIdsDecoded0?.append(string0)
                }
            }
        }
        fileSystemIds = fileSystemIdsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFileSystemsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFileSystemsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFileSystemsOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFileSystemsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFileSystemsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystems = output.fileSystems
            self.nextToken = output.nextToken
        } else {
            self.fileSystems = nil
            self.nextToken = nil
        }
    }
}

/// The response object for DescribeFileSystems operation.
public struct DescribeFileSystemsOutputResponse: Swift.Equatable {
    /// An array of file system descriptions.
    public var fileSystems: [FSxClientTypes.FileSystem]?
    /// Present if there are more file systems than returned in the response (String). You can use the NextToken value in the later request to fetch the descriptions.
    public var nextToken: Swift.String?

    public init (
        fileSystems: [FSxClientTypes.FileSystem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileSystems = fileSystems
        self.nextToken = nextToken
    }
}

struct DescribeFileSystemsOutputResponseBody: Swift.Equatable {
    let fileSystems: [FSxClientTypes.FileSystem]?
    let nextToken: Swift.String?
}

extension DescribeFileSystemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystems = "FileSystems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemsContainer = try containerValues.decodeIfPresent([FSxClientTypes.FileSystem?].self, forKey: .fileSystems)
        var fileSystemsDecoded0:[FSxClientTypes.FileSystem]? = nil
        if let fileSystemsContainer = fileSystemsContainer {
            fileSystemsDecoded0 = [FSxClientTypes.FileSystem]()
            for structure0 in fileSystemsContainer {
                if let structure0 = structure0 {
                    fileSystemsDecoded0?.append(structure0)
                }
            }
        }
        fileSystems = fileSystemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case snapshotIds = "SnapshotIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for snapshotfilter0 in filters {
                try filtersContainer.encode(snapshotfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let snapshotIds = snapshotIds {
            var snapshotIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .snapshotIds)
            for snapshotid0 in snapshotIds {
                try snapshotIdsContainer.encode(snapshotid0)
            }
        }
    }
}

extension DescribeSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSnapshotsInput: Swift.Equatable {
    /// The filters structure. The supported names are file-system-id or volume-id.
    public var filters: [FSxClientTypes.SnapshotFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// The IDs of the snapshots that you want to retrieve. This parameter value overrides any filters. If any IDs aren't found, a SnapshotNotFound error occurs.
    public var snapshotIds: [Swift.String]?

    public init (
        filters: [FSxClientTypes.SnapshotFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        snapshotIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.snapshotIds = snapshotIds
    }
}

struct DescribeSnapshotsInputBody: Swift.Equatable {
    let snapshotIds: [Swift.String]?
    let filters: [FSxClientTypes.SnapshotFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case snapshotIds = "SnapshotIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .snapshotIds)
        var snapshotIdsDecoded0:[Swift.String]? = nil
        if let snapshotIdsContainer = snapshotIdsContainer {
            snapshotIdsDecoded0 = [Swift.String]()
            for string0 in snapshotIdsContainer {
                if let string0 = string0 {
                    snapshotIdsDecoded0?.append(string0)
                }
            }
        }
        snapshotIds = snapshotIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.SnapshotFilter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.SnapshotFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.SnapshotFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFound" : self = .snapshotNotFound(try SnapshotNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case snapshotNotFound(SnapshotNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.snapshots = output.snapshots
        } else {
            self.nextToken = nil
            self.snapshots = nil
        }
    }
}

public struct DescribeSnapshotsOutputResponse: Swift.Equatable {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// An array of snapshots.
    public var snapshots: [FSxClientTypes.Snapshot]?

    public init (
        nextToken: Swift.String? = nil,
        snapshots: [FSxClientTypes.Snapshot]? = nil
    )
    {
        self.nextToken = nextToken
        self.snapshots = snapshots
    }
}

struct DescribeSnapshotsOutputResponseBody: Swift.Equatable {
    let snapshots: [FSxClientTypes.Snapshot]?
    let nextToken: Swift.String?
}

extension DescribeSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case snapshots = "Snapshots"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Snapshot?].self, forKey: .snapshots)
        var snapshotsDecoded0:[FSxClientTypes.Snapshot]? = nil
        if let snapshotsContainer = snapshotsContainer {
            snapshotsDecoded0 = [FSxClientTypes.Snapshot]()
            for structure0 in snapshotsContainer {
                if let structure0 = structure0 {
                    snapshotsDecoded0?.append(structure0)
                }
            }
        }
        snapshots = snapshotsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStorageVirtualMachinesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case storageVirtualMachineIds = "StorageVirtualMachineIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for storagevirtualmachinefilter0 in filters {
                try filtersContainer.encode(storagevirtualmachinefilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let storageVirtualMachineIds = storageVirtualMachineIds {
            var storageVirtualMachineIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageVirtualMachineIds)
            for storagevirtualmachineid0 in storageVirtualMachineIds {
                try storageVirtualMachineIdsContainer.encode(storagevirtualmachineid0)
            }
        }
    }
}

extension DescribeStorageVirtualMachinesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStorageVirtualMachinesInput: Swift.Equatable {
    /// Enter a filter name:value pair to view a select set of SVMs.
    public var filters: [FSxClientTypes.StorageVirtualMachineFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Enter the ID of one or more SVMs that you want to view.
    public var storageVirtualMachineIds: [Swift.String]?

    public init (
        filters: [FSxClientTypes.StorageVirtualMachineFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        storageVirtualMachineIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.storageVirtualMachineIds = storageVirtualMachineIds
    }
}

struct DescribeStorageVirtualMachinesInputBody: Swift.Equatable {
    let storageVirtualMachineIds: [Swift.String]?
    let filters: [FSxClientTypes.StorageVirtualMachineFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeStorageVirtualMachinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case storageVirtualMachineIds = "StorageVirtualMachineIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageVirtualMachineIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .storageVirtualMachineIds)
        var storageVirtualMachineIdsDecoded0:[Swift.String]? = nil
        if let storageVirtualMachineIdsContainer = storageVirtualMachineIdsContainer {
            storageVirtualMachineIdsDecoded0 = [Swift.String]()
            for string0 in storageVirtualMachineIdsContainer {
                if let string0 = string0 {
                    storageVirtualMachineIdsDecoded0?.append(string0)
                }
            }
        }
        storageVirtualMachineIds = storageVirtualMachineIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.StorageVirtualMachineFilter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.StorageVirtualMachineFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.StorageVirtualMachineFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStorageVirtualMachinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStorageVirtualMachinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StorageVirtualMachineNotFound" : self = .storageVirtualMachineNotFound(try StorageVirtualMachineNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStorageVirtualMachinesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case storageVirtualMachineNotFound(StorageVirtualMachineNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStorageVirtualMachinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStorageVirtualMachinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.storageVirtualMachines = output.storageVirtualMachines
        } else {
            self.nextToken = nil
            self.storageVirtualMachines = nil
        }
    }
}

public struct DescribeStorageVirtualMachinesOutputResponse: Swift.Equatable {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Returned after a successful DescribeStorageVirtualMachines operation, describing each SVM.
    public var storageVirtualMachines: [FSxClientTypes.StorageVirtualMachine]?

    public init (
        nextToken: Swift.String? = nil,
        storageVirtualMachines: [FSxClientTypes.StorageVirtualMachine]? = nil
    )
    {
        self.nextToken = nextToken
        self.storageVirtualMachines = storageVirtualMachines
    }
}

struct DescribeStorageVirtualMachinesOutputResponseBody: Swift.Equatable {
    let storageVirtualMachines: [FSxClientTypes.StorageVirtualMachine]?
    let nextToken: Swift.String?
}

extension DescribeStorageVirtualMachinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case storageVirtualMachines = "StorageVirtualMachines"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageVirtualMachinesContainer = try containerValues.decodeIfPresent([FSxClientTypes.StorageVirtualMachine?].self, forKey: .storageVirtualMachines)
        var storageVirtualMachinesDecoded0:[FSxClientTypes.StorageVirtualMachine]? = nil
        if let storageVirtualMachinesContainer = storageVirtualMachinesContainer {
            storageVirtualMachinesDecoded0 = [FSxClientTypes.StorageVirtualMachine]()
            for structure0 in storageVirtualMachinesContainer {
                if let structure0 = structure0 {
                    storageVirtualMachinesDecoded0?.append(structure0)
                }
            }
        }
        storageVirtualMachines = storageVirtualMachinesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeVolumesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case volumeIds = "VolumeIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for volumefilter0 in filters {
                try filtersContainer.encode(volumefilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let volumeIds = volumeIds {
            var volumeIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeIds)
            for volumeid0 in volumeIds {
                try volumeIdsContainer.encode(volumeid0)
            }
        }
    }
}

extension DescribeVolumesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeVolumesInput: Swift.Equatable {
    /// Enter a filter Name and Values pair to view a select set of volumes.
    public var filters: [FSxClientTypes.VolumeFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// The IDs of the volumes whose descriptions you want to retrieve.
    public var volumeIds: [Swift.String]?

    public init (
        filters: [FSxClientTypes.VolumeFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        volumeIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeIds = volumeIds
    }
}

struct DescribeVolumesInputBody: Swift.Equatable {
    let volumeIds: [Swift.String]?
    let filters: [FSxClientTypes.VolumeFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeVolumesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case volumeIds = "VolumeIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .volumeIds)
        var volumeIdsDecoded0:[Swift.String]? = nil
        if let volumeIdsContainer = volumeIdsContainer {
            volumeIdsDecoded0 = [Swift.String]()
            for string0 in volumeIdsContainer {
                if let string0 = string0 {
                    volumeIdsDecoded0?.append(string0)
                }
            }
        }
        volumeIds = volumeIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([FSxClientTypes.VolumeFilter?].self, forKey: .filters)
        var filtersDecoded0:[FSxClientTypes.VolumeFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [FSxClientTypes.VolumeFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeVolumesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVolumesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeVolumesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVolumesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeVolumesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.volumes = output.volumes
        } else {
            self.nextToken = nil
            self.volumes = nil
        }
    }
}

public struct DescribeVolumesOutputResponse: Swift.Equatable {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Returned after a successful DescribeVolumes operation, describing each volume.
    public var volumes: [FSxClientTypes.Volume]?

    public init (
        nextToken: Swift.String? = nil,
        volumes: [FSxClientTypes.Volume]? = nil
    )
    {
        self.nextToken = nextToken
        self.volumes = volumes
    }
}

struct DescribeVolumesOutputResponseBody: Swift.Equatable {
    let volumes: [FSxClientTypes.Volume]?
    let nextToken: Swift.String?
}

extension DescribeVolumesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case volumes = "Volumes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumesContainer = try containerValues.decodeIfPresent([FSxClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[FSxClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [FSxClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DisassociateFileSystemAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for alternatednsname0 in aliases {
                try aliasesContainer.encode(alternatednsname0)
            }
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
    }
}

extension DisassociateFileSystemAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object of DNS aliases to disassociate from an Amazon FSx for Windows File Server file system.
public struct DisassociateFileSystemAliasesInput: Swift.Equatable {
    /// An array of one or more DNS alias names to disassociate, or remove, from the file system.
    /// This member is required.
    public var aliases: [Swift.String]?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the file system from which to disassociate the DNS aliases.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init (
        aliases: [Swift.String]? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

struct DisassociateFileSystemAliasesInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileSystemId: Swift.String?
    let aliases: [Swift.String]?
}

extension DisassociateFileSystemAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .aliases)
        var aliasesDecoded0:[Swift.String]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Swift.String]()
            for string0 in aliasesContainer {
                if let string0 = string0 {
                    aliasesDecoded0?.append(string0)
                }
            }
        }
        aliases = aliasesDecoded0
    }
}

extension DisassociateFileSystemAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateFileSystemAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateFileSystemAliasesOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateFileSystemAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisassociateFileSystemAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
        } else {
            self.aliases = nil
        }
    }
}

/// The system generated response showing the DNS aliases that Amazon FSx is attempting to disassociate from the file system. Use the API operation to monitor the status of the aliases Amazon FSx is removing from the file system.
public struct DisassociateFileSystemAliasesOutputResponse: Swift.Equatable {
    /// An array of one or more DNS aliases that Amazon FSx is attempting to disassociate from the file system.
    public var aliases: [FSxClientTypes.Alias]?

    public init (
        aliases: [FSxClientTypes.Alias]? = nil
    )
    {
        self.aliases = aliases
    }
}

struct DisassociateFileSystemAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [FSxClientTypes.Alias]?
}

extension DisassociateFileSystemAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([FSxClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[FSxClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [FSxClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
    }
}

extension FSxClientTypes.DiskIopsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iops = "Iops"
        case mode = "Mode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfigurationMode.self, forKey: .mode)
        mode = modeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
    }
}

extension FSxClientTypes {
    /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).
    public struct DiskIopsConfiguration: Swift.Equatable {
        /// The total number of SSD IOPS provisioned for the file system.
        public var iops: Swift.Int?
        /// Specifies whether the number of IOPS for the file system is using the system default (AUTOMATIC) or was provisioned by the customer (USER_PROVISIONED).
        public var mode: FSxClientTypes.DiskIopsConfigurationMode?

        public init (
            iops: Swift.Int? = nil,
            mode: FSxClientTypes.DiskIopsConfigurationMode? = nil
        )
        {
            self.iops = iops
            self.mode = mode
        }
    }

}

extension FSxClientTypes {
    public enum DiskIopsConfigurationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case userProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskIopsConfigurationMode] {
            return [
                .automatic,
                .userProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .userProvisioned: return "USER_PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiskIopsConfigurationMode(rawValue: rawValue) ?? DiskIopsConfigurationMode.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum DriveCacheType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case read
        case sdkUnknown(Swift.String)

        public static var allCases: [DriveCacheType] {
            return [
                .none,
                .read,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .read: return "READ"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DriveCacheType(rawValue: rawValue) ?? DriveCacheType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case changed
        case deleted
        case new
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .changed,
                .deleted,
                .new,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .changed: return "CHANGED"
            case .deleted: return "DELETED"
            case .new: return "NEW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.FileCache: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DNSName"
        case dataRepositoryAssociationIds = "DataRepositoryAssociationIds"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case lustreConfiguration = "LustreConfiguration"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case ownerId = "OwnerId"
        case resourceARN = "ResourceARN"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let dataRepositoryAssociationIds = dataRepositoryAssociationIds {
            var dataRepositoryAssociationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositoryAssociationIds)
            for datarepositoryassociationid0 in dataRepositoryAssociationIds {
                try dataRepositoryAssociationIdsContainer.encode(datarepositoryassociationid0)
            }
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileCacheType = self.fileCacheType {
            try encodeContainer.encode(fileCacheType.rawValue, forKey: .fileCacheType)
        }
        if let fileCacheTypeVersion = self.fileCacheTypeVersion {
            try encodeContainer.encode(fileCacheTypeVersion, forKey: .fileCacheTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for networkinterfaceid0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(networkinterfaceid0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let fileCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheType.self, forKey: .fileCacheType)
        fileCacheType = fileCacheTypeDecoded
        let fileCacheTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheTypeVersion)
        fileCacheTypeVersion = fileCacheTypeVersionDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let dataRepositoryAssociationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataRepositoryAssociationIds)
        var dataRepositoryAssociationIdsDecoded0:[Swift.String]? = nil
        if let dataRepositoryAssociationIdsContainer = dataRepositoryAssociationIdsContainer {
            dataRepositoryAssociationIdsDecoded0 = [Swift.String]()
            for string0 in dataRepositoryAssociationIdsContainer {
                if let string0 = string0 {
                    dataRepositoryAssociationIdsDecoded0?.append(string0)
                }
            }
        }
        dataRepositoryAssociationIds = dataRepositoryAssociationIdsDecoded0
    }
}

extension FSxClientTypes {
    /// A description of a specific Amazon File Cache resource, which is a response object from the DescribeFileCaches operation.
    public struct FileCache: Swift.Equatable {
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// A list of IDs of data repository associations that are associated with this cache.
        public var dataRepositoryAssociationIds: [Swift.String]?
        /// The Domain Name System (DNS) name for the cache.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileCacheFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The type of cache, which must be LUSTRE.
        public var fileCacheType: FSxClientTypes.FileCacheType?
        /// The Lustre version of the cache, which must be 2.12.
        public var fileCacheTypeVersion: Swift.String?
        /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the cache. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The cache is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - The new cache is being created.
        ///
        /// * DELETING - An existing cache is being deleted.
        ///
        /// * UPDATING - The cache is undergoing a customer-initiated update.
        ///
        /// * FAILED - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.
        public var lifecycle: FSxClientTypes.FileCacheLifecycle?
        /// The configuration for the Amazon File Cache resource.
        public var lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration?
        /// A list of network interface IDs.
        public var networkInterfaceIds: [Swift.String]?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The storage capacity of the cache in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
        public var subnetIds: [Swift.String]?
        /// The ID of your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var vpcId: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            dataRepositoryAssociationIds: [Swift.String]? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileCacheFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCacheType: FSxClientTypes.FileCacheType? = nil,
            fileCacheTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileCacheLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.dataRepositoryAssociationIds = dataRepositoryAssociationIds
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCacheType = fileCacheType
            self.fileCacheTypeVersion = fileCacheTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension FSxClientTypes.FileCacheCreating: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToDataRepositoryAssociations = "CopyTagsToDataRepositoryAssociations"
        case creationTime = "CreationTime"
        case dnsName = "DNSName"
        case dataRepositoryAssociationIds = "DataRepositoryAssociationIds"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case lustreConfiguration = "LustreConfiguration"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case ownerId = "OwnerId"
        case resourceARN = "ResourceARN"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToDataRepositoryAssociations = self.copyTagsToDataRepositoryAssociations {
            try encodeContainer.encode(copyTagsToDataRepositoryAssociations, forKey: .copyTagsToDataRepositoryAssociations)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let dataRepositoryAssociationIds = dataRepositoryAssociationIds {
            var dataRepositoryAssociationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositoryAssociationIds)
            for datarepositoryassociationid0 in dataRepositoryAssociationIds {
                try dataRepositoryAssociationIdsContainer.encode(datarepositoryassociationid0)
            }
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileCacheType = self.fileCacheType {
            try encodeContainer.encode(fileCacheType.rawValue, forKey: .fileCacheType)
        }
        if let fileCacheTypeVersion = self.fileCacheTypeVersion {
            try encodeContainer.encode(fileCacheTypeVersion, forKey: .fileCacheTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for networkinterfaceid0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(networkinterfaceid0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let fileCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheType.self, forKey: .fileCacheType)
        fileCacheType = fileCacheTypeDecoded
        let fileCacheTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheTypeVersion)
        fileCacheTypeVersion = fileCacheTypeVersionDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let copyTagsToDataRepositoryAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToDataRepositoryAssociations)
        copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociationsDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let dataRepositoryAssociationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataRepositoryAssociationIds)
        var dataRepositoryAssociationIdsDecoded0:[Swift.String]? = nil
        if let dataRepositoryAssociationIdsContainer = dataRepositoryAssociationIdsContainer {
            dataRepositoryAssociationIdsDecoded0 = [Swift.String]()
            for string0 in dataRepositoryAssociationIdsContainer {
                if let string0 = string0 {
                    dataRepositoryAssociationIdsDecoded0?.append(string0)
                }
            }
        }
        dataRepositoryAssociationIds = dataRepositoryAssociationIdsDecoded0
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon File Cache resource being created in the CreateFileCache operation.
    public struct FileCacheCreating: Swift.Equatable {
        /// A boolean flag indicating whether tags for the cache should be copied to data repository associations.
        public var copyTagsToDataRepositoryAssociations: Swift.Bool?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// A list of IDs of data repository associations that are associated with this cache.
        public var dataRepositoryAssociationIds: [Swift.String]?
        /// The Domain Name System (DNS) name for the cache.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileCacheFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The type of cache, which must be LUSTRE.
        public var fileCacheType: FSxClientTypes.FileCacheType?
        /// The Lustre version of the cache, which must be 2.12.
        public var fileCacheTypeVersion: Swift.String?
        /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the cache. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The cache is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - The new cache is being created.
        ///
        /// * DELETING - An existing cache is being deleted.
        ///
        /// * UPDATING - The cache is undergoing a customer-initiated update.
        ///
        /// * FAILED - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.
        public var lifecycle: FSxClientTypes.FileCacheLifecycle?
        /// The configuration for the Amazon File Cache resource.
        public var lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration?
        /// A list of network interface IDs.
        public var networkInterfaceIds: [Swift.String]?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The storage capacity of the cache in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
        public var subnetIds: [Swift.String]?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var vpcId: Swift.String?

        public init (
            copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dataRepositoryAssociationIds: [Swift.String]? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileCacheFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCacheType: FSxClientTypes.FileCacheType? = nil,
            fileCacheTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileCacheLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
            self.creationTime = creationTime
            self.dataRepositoryAssociationIds = dataRepositoryAssociationIds
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCacheType = fileCacheType
            self.fileCacheTypeVersion = fileCacheTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension FSxClientTypes.FileCacheDataRepositoryAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRepositoryPath = "DataRepositoryPath"
        case dataRepositorySubdirectories = "DataRepositorySubdirectories"
        case fileCachePath = "FileCachePath"
        case nfs = "NFS"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRepositoryPath = self.dataRepositoryPath {
            try encodeContainer.encode(dataRepositoryPath, forKey: .dataRepositoryPath)
        }
        if let dataRepositorySubdirectories = dataRepositorySubdirectories {
            var dataRepositorySubdirectoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositorySubdirectories)
            for namespace0 in dataRepositorySubdirectories {
                try dataRepositorySubdirectoriesContainer.encode(namespace0)
            }
        }
        if let fileCachePath = self.fileCachePath {
            try encodeContainer.encode(fileCachePath, forKey: .fileCachePath)
        }
        if let nfs = self.nfs {
            try encodeContainer.encode(nfs, forKey: .nfs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCachePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCachePath)
        fileCachePath = fileCachePathDecoded
        let dataRepositoryPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRepositoryPath)
        dataRepositoryPath = dataRepositoryPathDecoded
        let dataRepositorySubdirectoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataRepositorySubdirectories)
        var dataRepositorySubdirectoriesDecoded0:[Swift.String]? = nil
        if let dataRepositorySubdirectoriesContainer = dataRepositorySubdirectoriesContainer {
            dataRepositorySubdirectoriesDecoded0 = [Swift.String]()
            for string0 in dataRepositorySubdirectoriesContainer {
                if let string0 = string0 {
                    dataRepositorySubdirectoriesDecoded0?.append(string0)
                }
            }
        }
        dataRepositorySubdirectories = dataRepositorySubdirectoriesDecoded0
        let nfsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheNFSConfiguration.self, forKey: .nfs)
        nfs = nfsDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA does not support automatic import or automatic export.
    public struct FileCacheDataRepositoryAssociation: Swift.Equatable {
        /// The path to the S3 or NFS data repository that links to the cache. You must provide one of the following paths:
        ///
        /// * The path can be an NFS data repository that links to the cache. The path can be in one of two formats:
        ///
        /// * If you are not using the DataRepositorySubdirectories parameter, the path is to an NFS Export directory (or one of its subdirectories) in the format nsf://nfs-domain-name/exportpath. You can therefore link a single NFS Export to a single data repository association.
        ///
        /// * If you are using the DataRepositorySubdirectories parameter, the path is the domain name of the NFS file system in the format nfs://filer-domain-name, which indicates the root of the subdirectories specified with the DataRepositorySubdirectories parameter.
        ///
        ///
        ///
        ///
        /// * The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        /// This member is required.
        public var dataRepositoryPath: Swift.String?
        /// A list of NFS Exports that will be linked with this data repository association. The Export paths are in the format /exportpath1. To use this parameter, you must configure DataRepositoryPath as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that DataRepositorySubdirectories is not supported for S3 data repositories.
        public var dataRepositorySubdirectories: [Swift.String]?
        /// A path on the cache that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path /ns1/, then you cannot link another data repository with cache path /ns1/ns2. This path specifies where in your cache files will be exported from. This cache directory can be linked to only one data repository, and no data repository other can be linked to the directory. The cache path can only be set to root (/) on an NFS DRA when DataRepositorySubdirectories is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache. The cache path cannot be set to root (/) for an S3 DRA.
        /// This member is required.
        public var fileCachePath: Swift.String?
        /// The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository.
        public var nfs: FSxClientTypes.FileCacheNFSConfiguration?

        public init (
            dataRepositoryPath: Swift.String? = nil,
            dataRepositorySubdirectories: [Swift.String]? = nil,
            fileCachePath: Swift.String? = nil,
            nfs: FSxClientTypes.FileCacheNFSConfiguration? = nil
        )
        {
            self.dataRepositoryPath = dataRepositoryPath
            self.dataRepositorySubdirectories = dataRepositorySubdirectories
            self.fileCachePath = fileCachePath
            self.nfs = nfs
        }
    }

}

extension FSxClientTypes.FileCacheFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// A structure providing details of any failures that occurred.
    public struct FileCacheFailureDetails: Swift.Equatable {
        /// A message describing any failures that occurred.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {
    public enum FileCacheLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileCacheLifecycle(rawValue: rawValue) ?? FileCacheLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.FileCacheLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentType = "DeploymentType"
        case logConfiguration = "LogConfiguration"
        case metadataConfiguration = "MetadataConfiguration"
        case mountName = "MountName"
        case perUnitStorageThroughput = "PerUnitStorageThroughput"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let metadataConfiguration = self.metadataConfiguration {
            try encodeContainer.encode(metadataConfiguration, forKey: .metadataConfiguration)
        }
        if let mountName = self.mountName {
            try encodeContainer.encode(mountName, forKey: .mountName)
        }
        if let perUnitStorageThroughput = self.perUnitStorageThroughput {
            try encodeContainer.encode(perUnitStorageThroughput, forKey: .perUnitStorageThroughput)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perUnitStorageThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .perUnitStorageThroughput)
        perUnitStorageThroughput = perUnitStorageThroughputDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let mountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountName)
        mountName = mountNameDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let metadataConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreMetadataConfiguration.self, forKey: .metadataConfiguration)
        metadataConfiguration = metadataConfigurationDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreLogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for the Amazon File Cache resource.
    public struct FileCacheLustreConfiguration: Swift.Equatable {
        /// The deployment type of the Amazon File Cache resource, which must be CACHE_1.
        public var deploymentType: FSxClientTypes.FileCacheLustreDeploymentType?
        /// The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogConfiguration?
        /// The configuration for a Lustre MDT (Metadata Target) storage volume.
        public var metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration?
        /// You use the MountName value when mounting the cache. If you pass a cache ID to the DescribeFileCaches operation, it returns the the MountName value as part of the cache's description.
        public var mountName: Swift.String?
        /// Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is 1000.
        public var perUnitStorageThroughput: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            deploymentType: FSxClientTypes.FileCacheLustreDeploymentType? = nil,
            logConfiguration: FSxClientTypes.LustreLogConfiguration? = nil,
            metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration? = nil,
            mountName: Swift.String? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.logConfiguration = logConfiguration
            self.metadataConfiguration = metadataConfiguration
            self.mountName = mountName
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    public enum FileCacheLustreDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cache1
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheLustreDeploymentType] {
            return [
                .cache1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cache1: return "CACHE_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileCacheLustreDeploymentType(rawValue: rawValue) ?? FileCacheLustreDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.FileCacheLustreMetadataConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageCapacity = "StorageCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for a Lustre MDT (Metadata Target) storage volume. The metadata on Amazon File Cache is managed by a Lustre Metadata Server (MDS) while the actual metadata is persisted on an MDT.
    public struct FileCacheLustreMetadataConfiguration: Swift.Equatable {
        /// The storage capacity of the Lustre MDT (Metadata Target) storage volume in gibibytes (GiB). The only supported value is 2400 GiB.
        /// This member is required.
        public var storageCapacity: Swift.Int?

        public init (
            storageCapacity: Swift.Int? = nil
        )
        {
            self.storageCapacity = storageCapacity
        }
    }

}

extension FSxClientTypes.FileCacheNFSConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIps = "DnsIps"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIps = dnsIps {
            var dnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIps)
            for ipaddress0 in dnsIps {
                try dnsIpsContainer.encode(ipaddress0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(FSxClientTypes.NfsVersion.self, forKey: .version)
        version = versionDecoded
        let dnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIps)
        var dnsIpsDecoded0:[Swift.String]? = nil
        if let dnsIpsContainer = dnsIpsContainer {
            dnsIpsDecoded0 = [Swift.String]()
            for string0 in dnsIpsContainer {
                if let string0 = string0 {
                    dnsIpsDecoded0?.append(string0)
                }
            }
        }
        dnsIps = dnsIpsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration for an NFS data repository association (DRA) created during the creation of the Amazon File Cache resource.
    public struct FileCacheNFSConfiguration: Swift.Equatable {
        /// A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.
        public var dnsIps: [Swift.String]?
        /// The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is NFS3, which indicates that the data repository must support the NFSv3 protocol.
        /// This member is required.
        public var version: FSxClientTypes.NfsVersion?

        public init (
            dnsIps: [Swift.String]? = nil,
            version: FSxClientTypes.NfsVersion? = nil
        )
        {
            self.dnsIps = dnsIps
            self.version = version
        }
    }

}

extension FileCacheNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: FileCacheNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No caches were found based upon supplied parameters.
public struct FileCacheNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct FileCacheNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension FileCacheNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum FileCacheType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lustre
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheType] {
            return [
                .lustre,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lustre: return "LUSTRE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileCacheType(rawValue: rawValue) ?? FileCacheType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.FileSystem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case creationTime = "CreationTime"
        case dnsName = "DNSName"
        case failureDetails = "FailureDetails"
        case fileSystemId = "FileSystemId"
        case fileSystemType = "FileSystemType"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case lustreConfiguration = "LustreConfiguration"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case ownerId = "OwnerId"
        case resourceARN = "ResourceARN"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActions = administrativeActions {
            var administrativeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .administrativeActions)
            for administrativeaction0 in administrativeActions {
                try administrativeActionsContainer.encode(administrativeaction0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemType = self.fileSystemType {
            try encodeContainer.encode(fileSystemType.rawValue, forKey: .fileSystemType)
        }
        if let fileSystemTypeVersion = self.fileSystemTypeVersion {
            try encodeContainer.encode(fileSystemTypeVersion, forKey: .fileSystemTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for networkinterfaceid0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(networkinterfaceid0)
            }
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetid0 in subnetIds {
                try subnetIdsContainer.encode(subnetid0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let fileSystemTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemType.self, forKey: .fileSystemType)
        fileSystemType = fileSystemTypeDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsFileSystemConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreFileSystemConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapFileSystemConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let fileSystemTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemTypeVersion)
        fileSystemTypeVersion = fileSystemTypeVersionDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSFileSystemConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// A description of a specific Amazon FSx file system.
    public struct FileSystem: Swift.Equatable {
        /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system that you have initiated using the UpdateFileSystem operation.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The Domain Name System (DNS) name for the file system.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileSystemFailureDetails?
        /// The system-generated, unique 17-digit ID of the file system.
        public var fileSystemId: Swift.String?
        /// The type of Amazon FSx file system, which can be LUSTRE, WINDOWS, ONTAP, or OPENZFS.
        public var fileSystemType: FSxClientTypes.FileSystemType?
        /// The Lustre version of the Amazon FSx for Lustre file system, either 2.10 or 2.12.
        public var fileSystemTypeVersion: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt Amazon FSx file system data. Used as follows with Amazon FSx file system types:
        ///
        /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
        ///
        /// * Amazon FSx for NetApp ONTAP
        ///
        /// * Amazon FSx for OpenZFS
        ///
        /// * Amazon FSx for Windows File Server
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the file system. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The file system is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - Amazon FSx is creating the new file system.
        ///
        /// * DELETING - Amazon FSx is deleting an existing file system.
        ///
        /// * FAILED - An existing file system has experienced an unrecoverable failure. When creating a new file system, Amazon FSx was unable to create the file system.
        ///
        /// * MISCONFIGURED - The file system is in a failed but recoverable state.
        ///
        /// * MISCONFIGURED_UNAVAILABLE - (Amazon FSx for Windows File Server only) The file system is currently unavailable due to a change in your Active Directory configuration.
        ///
        /// * UPDATING - The file system is undergoing a customer-initiated update.
        public var lifecycle: FSxClientTypes.FileSystemLifecycle?
        /// The configuration for the Amazon FSx for Lustre file system.
        public var lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration?
        /// The IDs of the elastic network interfaces from which a specific file system is accessible. The elastic network interface is automatically created in the same virtual private cloud (VPC) that the Amazon FSx file system was created in. For more information, see [Elastic Network Interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) in the Amazon EC2 User Guide. For an Amazon FSx for Windows File Server file system, you can have one network interface ID. For an Amazon FSx for Lustre file system, you can have more than one.
        public var networkInterfaceIds: [Swift.String]?
        /// The configuration for this Amazon FSx for NetApp ONTAP file system.
        public var ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration?
        /// The configuration for this Amazon FSx for OpenZFS file system.
        public var openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration?
        /// The Amazon Web Services account that created the file system. If the file system was created by an Identity and Access Management (IAM) user, the Amazon Web Services account to which the IAM user belongs is the owner.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) of the file system resource.
        public var resourceARN: Swift.String?
        /// The storage capacity of the file system in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// The type of storage the file system is using. If set to SSD, the file system uses solid state drive storage. If set to HDD, the file system uses hard disk drive storage.
        public var storageType: FSxClientTypes.StorageType?
        /// Specifies the IDs of the subnets that the file system is accessible from. For the Amazon FSx Windows and ONTAP MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the PreferredSubnetID property. All other file systems have only one subnet ID. For FSx for Lustre file systems, and Single-AZ Windows file systems, this is the ID of the subnet that contains the file system's endpoint. For MULTI_AZ_1 Windows and ONTAP file systems, the file system endpoint is available in the PreferredSubnetID.
        public var subnetIds: [Swift.String]?
        /// The tags to associate with the file system. For more information, see [Tagging your Amazon EC2 resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html) in the Amazon EC2 User Guide.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of the primary virtual private cloud (VPC) for the file system.
        public var vpcId: Swift.String?
        /// The configuration for this Amazon FSx for Windows File Server file system.
        public var windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration?

        public init (
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileSystemFailureDetails? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: FSxClientTypes.FileSystemType? = nil,
            fileSystemTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileSystemLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration? = nil,
            openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            storageType: FSxClientTypes.StorageType? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil,
            windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
            self.fileSystemTypeVersion = fileSystemTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ontapConfiguration = ontapConfiguration
            self.openZFSConfiguration = openZFSConfiguration
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.storageType = storageType
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
            self.windowsConfiguration = windowsConfiguration
        }
    }

}

extension FSxClientTypes.FileSystemEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsName = "DNSName"
        case ipAddresses = "IpAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let ipAddresses = ipAddresses {
            var ipAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipAddresses)
            for ipaddress0 in ipAddresses {
                try ipAddressesContainer.encode(ipaddress0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let ipAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipAddresses)
        var ipAddressesDecoded0:[Swift.String]? = nil
        if let ipAddressesContainer = ipAddressesContainer {
            ipAddressesDecoded0 = [Swift.String]()
            for string0 in ipAddressesContainer {
                if let string0 = string0 {
                    ipAddressesDecoded0?.append(string0)
                }
            }
        }
        ipAddresses = ipAddressesDecoded0
    }
}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP file system has two endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. They are the Management and Intercluster endpoints.
    public struct FileSystemEndpoint: Swift.Equatable {
        /// The Domain Name Service (DNS) name for the file system. You can mount your file system using its DNS name.
        public var dnsName: Swift.String?
        /// IP addresses of the file system endpoint.
        public var ipAddresses: [Swift.String]?

        public init (
            dnsName: Swift.String? = nil,
            ipAddresses: [Swift.String]? = nil
        )
        {
            self.dnsName = dnsName
            self.ipAddresses = ipAddresses
        }
    }

}

extension FSxClientTypes.FileSystemEndpoints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intercluster = "Intercluster"
        case management = "Management"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intercluster = self.intercluster {
            try encodeContainer.encode(intercluster, forKey: .intercluster)
        }
        if let management = self.management {
            try encodeContainer.encode(management, forKey: .management)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interclusterDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemEndpoint.self, forKey: .intercluster)
        intercluster = interclusterDecoded
        let managementDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemEndpoint.self, forKey: .management)
        management = managementDecoded
    }
}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP file system has the following endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.
    public struct FileSystemEndpoints: Swift.Equatable {
        /// An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.
        public var intercluster: FSxClientTypes.FileSystemEndpoint?
        /// An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.
        public var management: FSxClientTypes.FileSystemEndpoint?

        public init (
            intercluster: FSxClientTypes.FileSystemEndpoint? = nil,
            management: FSxClientTypes.FileSystemEndpoint? = nil
        )
        {
            self.intercluster = intercluster
            self.management = management
        }
    }

}

extension FSxClientTypes.FileSystemFailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// A structure providing details of any failures that occurred.
    public struct FileSystemFailureDetails: Swift.Equatable {
        /// A message describing any failures that occurred.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {
    /// The lifecycle status of the file system.
    public enum FileSystemLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case misconfigured
        case misconfiguredUnavailable
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .misconfiguredUnavailable,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .misconfiguredUnavailable: return "MISCONFIGURED_UNAVAILABLE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemLifecycle(rawValue: rawValue) ?? FileSystemLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    /// An enumeration specifying the currently ongoing maintenance operation.
    public enum FileSystemMaintenanceOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case backingUp
        case patching
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemMaintenanceOperation] {
            return [
                .backingUp,
                .patching,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .backingUp: return "BACKING_UP"
            case .patching: return "PATCHING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemMaintenanceOperation(rawValue: rawValue) ?? FileSystemMaintenanceOperation.sdkUnknown(rawValue)
        }
    }
}

extension FileSystemNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: FileSystemNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No Amazon FSx file systems were found based upon supplied parameters.
public struct FileSystemNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct FileSystemNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension FileSystemNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// The type of file system.
    public enum FileSystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lustre
        case ontap
        case openzfs
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .lustre,
                .ontap,
                .openzfs,
                .windows,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lustre: return "LUSTRE"
            case .ontap: return "ONTAP"
            case .openzfs: return "OPENZFS"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemType(rawValue: rawValue) ?? FileSystemType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls. You can use multiple filters to return results that meet all applied filter requirements.
    public struct Filter: Swift.Equatable {
        /// The name for this filter.
        public var name: FSxClientTypes.FilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init (
            name: FSxClientTypes.FilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension FSxClientTypes {
    /// The name for a filter.
    public enum FilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case backupType
        case dataRepositoryType
        case fileCacheId
        case fileCacheType
        case fileSystemId
        case fileSystemType
        case volumeId
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterName] {
            return [
                .backupType,
                .dataRepositoryType,
                .fileCacheId,
                .fileCacheType,
                .fileSystemId,
                .fileSystemType,
                .volumeId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .backupType: return "backup-type"
            case .dataRepositoryType: return "data-repository-type"
            case .fileCacheId: return "file-cache-id"
            case .fileCacheType: return "file-cache-type"
            case .fileSystemId: return "file-system-id"
            case .fileSystemType: return "file-system-type"
            case .volumeId: return "volume-id"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterName(rawValue: rawValue) ?? FilterName.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum FlexCacheEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cache
        case `none`
        case origin
        case sdkUnknown(Swift.String)

        public static var allCases: [FlexCacheEndpointType] {
            return [
                .cache,
                .none,
                .origin,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cache: return "CACHE"
            case .none: return "NONE"
            case .origin: return "ORIGIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FlexCacheEndpointType(rawValue: rawValue) ?? FlexCacheEndpointType.sdkUnknown(rawValue)
        }
    }
}

extension IncompatibleParameterError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IncompatibleParameterErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.parameter = output.parameter
        } else {
            self.message = nil
            self.parameter = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The error returned when a second request is received with the same client request token but different parameters settings. A client request token should always uniquely identify a single request.
public struct IncompatibleParameterError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?
    /// A parameter that is incompatible with the earlier request.
    /// This member is required.
    public var parameter: Swift.String?

    public init (
        message: Swift.String? = nil,
        parameter: Swift.String? = nil
    )
    {
        self.message = message
        self.parameter = parameter
    }
}

struct IncompatibleParameterErrorBody: Swift.Equatable {
    let parameter: Swift.String?
    let message: Swift.String?
}

extension IncompatibleParameterErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case parameter = "Parameter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameter)
        parameter = parameterDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IncompatibleRegionForMultiAZ {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IncompatibleRegionForMultiAZBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon FSx doesn't support Multi-AZ Windows File Server copy backup in the destination Region, so the copied backup can't be restored.
public struct IncompatibleRegionForMultiAZ: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IncompatibleRegionForMultiAZBody: Swift.Equatable {
    let message: Swift.String?
}

extension IncompatibleRegionForMultiAZBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum InputOntapVolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dp
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [InputOntapVolumeType] {
            return [
                .dp,
                .rw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dp: return "DP"
            case .rw: return "RW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputOntapVolumeType(rawValue: rawValue) ?? InputOntapVolumeType.sdkUnknown(rawValue)
        }
    }
}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A generic error indicating a server-side failure.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDataRepositoryType {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDataRepositoryTypeBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have filtered the response to a data repository type that is not supported.
public struct InvalidDataRepositoryType: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDataRepositoryTypeBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDataRepositoryTypeBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDestinationKmsKey {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDestinationKmsKeyBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Key Management Service (KMS) key of the destination backup is not valid.
public struct InvalidDestinationKmsKey: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDestinationKmsKeyBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDestinationKmsKeyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExportPath {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidExportPathBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The path provided for data repository export isn't valid.
public struct InvalidExportPath: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExportPathBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidExportPathBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidImportPath {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidImportPathBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The path provided for data repository import isn't valid.
public struct InvalidImportPath: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidImportPathBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidImportPathBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNetworkSettings {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNetworkSettingsBody = try responseDecoder.decode(responseBody: data)
            self.invalidRouteTableId = output.invalidRouteTableId
            self.invalidSecurityGroupId = output.invalidSecurityGroupId
            self.invalidSubnetId = output.invalidSubnetId
            self.message = output.message
        } else {
            self.invalidRouteTableId = nil
            self.invalidSecurityGroupId = nil
            self.invalidSubnetId = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more network settings specified in the request are invalid.
public struct InvalidNetworkSettings: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The route table ID is either invalid or not part of the VPC specified.
    public var invalidRouteTableId: Swift.String?
    /// The security group ID is either invalid or not part of the VPC specified.
    public var invalidSecurityGroupId: Swift.String?
    /// The subnet ID that is either invalid or not part of the VPC specified.
    public var invalidSubnetId: Swift.String?
    /// Error message explaining what's wrong with network settings.
    public var message: Swift.String?

    public init (
        invalidRouteTableId: Swift.String? = nil,
        invalidSecurityGroupId: Swift.String? = nil,
        invalidSubnetId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.invalidRouteTableId = invalidRouteTableId
        self.invalidSecurityGroupId = invalidSecurityGroupId
        self.invalidSubnetId = invalidSubnetId
        self.message = message
    }
}

struct InvalidNetworkSettingsBody: Swift.Equatable {
    let message: Swift.String?
    let invalidSubnetId: Swift.String?
    let invalidSecurityGroupId: Swift.String?
    let invalidRouteTableId: Swift.String?
}

extension InvalidNetworkSettingsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invalidRouteTableId = "InvalidRouteTableId"
        case invalidSecurityGroupId = "InvalidSecurityGroupId"
        case invalidSubnetId = "InvalidSubnetId"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let invalidSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invalidSubnetId)
        invalidSubnetId = invalidSubnetIdDecoded
        let invalidSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invalidSecurityGroupId)
        invalidSecurityGroupId = invalidSecurityGroupIdDecoded
        let invalidRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invalidRouteTableId)
        invalidRouteTableId = invalidRouteTableIdDecoded
    }
}

extension InvalidPerUnitStorageThroughput {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPerUnitStorageThroughputBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid value for PerUnitStorageThroughput was provided. Please create your file system again, using a valid value.
public struct InvalidPerUnitStorageThroughput: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPerUnitStorageThroughputBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPerUnitStorageThroughputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRegion {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRegionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Region provided for SourceRegion is not valid or is in a different Amazon Web Services partition.
public struct InvalidRegion: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRegionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRegionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSourceKmsKey {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSourceKmsKeyBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Key Management Service (KMS) key of the source backup is not valid.
public struct InvalidSourceKmsKey: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSourceKmsKeyBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSourceKmsKeyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.LifecycleTransitionReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    /// Describes why a resource lifecycle state changed.
    public struct LifecycleTransitionReason: Swift.Equatable {
        /// A detailed error message.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for ListTagsForResource operation.
public struct ListTagsForResourceInput: Swift.Equatable {
    /// Maximum number of tags to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous ListTagsForResource operation (String). If a token present, the action continues the list from where the returning call left off.
    public var nextToken: Swift.String?
    /// The ARN of the Amazon FSx resource that will have its tags listed.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotServiceResourceError" : self = .notServiceResourceError(try NotServiceResourceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceDoesNotSupportTagging" : self = .resourceDoesNotSupportTagging(try ResourceDoesNotSupportTagging(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case notServiceResourceError(NotServiceResourceError)
    case resourceDoesNotSupportTagging(ResourceDoesNotSupportTagging)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

/// The response object for ListTagsForResource operation.
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// This is present if there are more tags than returned in the response (String). You can use the NextToken value in the later request to fetch the tags.
    public var nextToken: Swift.String?
    /// A list of tags on the resource.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [FSxClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension FSxClientTypes {
    public enum LustreAccessAuditLogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case errorOnly
        case warnError
        case warnOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [LustreAccessAuditLogLevel] {
            return [
                .disabled,
                .errorOnly,
                .warnError,
                .warnOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .errorOnly: return "ERROR_ONLY"
            case .warnError: return "WARN_ERROR"
            case .warnOnly: return "WARN_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LustreAccessAuditLogLevel(rawValue: rawValue) ?? LustreAccessAuditLogLevel.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum LustreDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case persistent1
        case persistent2
        case scratch1
        case scratch2
        case sdkUnknown(Swift.String)

        public static var allCases: [LustreDeploymentType] {
            return [
                .persistent1,
                .persistent2,
                .scratch1,
                .scratch2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .persistent1: return "PERSISTENT_1"
            case .persistent2: return "PERSISTENT_2"
            case .scratch1: return "SCRATCH_1"
            case .scratch2: return "SCRATCH_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LustreDeploymentType(rawValue: rawValue) ?? LustreDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.LustreFileSystemConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case dataCompressionType = "DataCompressionType"
        case dataRepositoryConfiguration = "DataRepositoryConfiguration"
        case deploymentType = "DeploymentType"
        case driveCacheType = "DriveCacheType"
        case logConfiguration = "LogConfiguration"
        case mountName = "MountName"
        case perUnitStorageThroughput = "PerUnitStorageThroughput"
        case rootSquashConfiguration = "RootSquashConfiguration"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let dataRepositoryConfiguration = self.dataRepositoryConfiguration {
            try encodeContainer.encode(dataRepositoryConfiguration, forKey: .dataRepositoryConfiguration)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let driveCacheType = self.driveCacheType {
            try encodeContainer.encode(driveCacheType.rawValue, forKey: .driveCacheType)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let mountName = self.mountName {
            try encodeContainer.encode(mountName, forKey: .mountName)
        }
        if let perUnitStorageThroughput = self.perUnitStorageThroughput {
            try encodeContainer.encode(perUnitStorageThroughput, forKey: .perUnitStorageThroughput)
        }
        if let rootSquashConfiguration = self.rootSquashConfiguration {
            try encodeContainer.encode(rootSquashConfiguration, forKey: .rootSquashConfiguration)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dataRepositoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryConfiguration.self, forKey: .dataRepositoryConfiguration)
        dataRepositoryConfiguration = dataRepositoryConfigurationDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let perUnitStorageThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .perUnitStorageThroughput)
        perUnitStorageThroughput = perUnitStorageThroughputDecoded
        let mountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountName)
        mountName = mountNameDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let driveCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DriveCacheType.self, forKey: .driveCacheType)
        driveCacheType = driveCacheTypeDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreLogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let rootSquashConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreRootSquashConfiguration.self, forKey: .rootSquashConfiguration)
        rootSquashConfiguration = rootSquashConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for the Amazon FSx for Lustre file system.
    public struct LustreFileSystemConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags on the file system are copied to backups. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value. (Default = false)
        public var copyTagsToBackups: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - Data compression is turned off for the file system.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html).
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported for file systems with the Persistent_2 deployment type. Instead, use .
        public var dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration?
        /// The deployment type of the FSx for Lustre file system. Scratch deployment type is designed for temporary storage and shorter-term processing of data. SCRATCH_1 and SCRATCH_2 deployment types are best suited for when you need temporary storage and shorter-term processing of data. The SCRATCH_2 deployment type provides in-transit encryption of data and higher burst throughput capacity than SCRATCH_1. The PERSISTENT_1 and PERSISTENT_2 deployment type is used for longer-term storage and workloads and encryption of data in transit. PERSISTENT_2 is built on Lustre v2.12 and offers higher PerUnitStorageThroughput (up to 1000 MB/s/TiB) along with a lower minimum storage capacity requirement (600 GiB). To learn more about FSx for Lustre deployment types, see [ FSx for Lustre deployment options](https://docs.aws.amazon.com/fsx/latest/LustreGuide/lustre-deployment-types.html). The default is SCRATCH_1.
        public var deploymentType: FSxClientTypes.LustreDeploymentType?
        /// The type of drive cache used by PERSISTENT_1 file systems that are provisioned with HDD storage devices. This parameter is required when StorageType is HDD. When set to READ the file system has an SSD storage cache that is sized to 20% of the file system's storage capacity. This improves the performance for frequently accessed files by caching up to 20% of the total storage capacity. This parameter is required when StorageType is set to HDD.
        public var driveCacheType: FSxClientTypes.DriveCacheType?
        /// The Lustre logging configuration. Lustre logging writes the enabled log events for your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogConfiguration?
        /// You use the MountName value when mounting the file system. For the SCRATCH_1 deployment type, this value is always "fsx". For SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 deployment types, this value is a string that is unique within an Amazon Web Services Region.
        public var mountName: Swift.String?
        /// Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. File system throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). This option is only valid for PERSISTENT_1 and PERSISTENT_2 deployment types. Valid values:
        ///
        /// * For PERSISTENT_1 SSD storage: 50, 100, 200.
        ///
        /// * For PERSISTENT_1 HDD storage: 12, 40.
        ///
        /// * For PERSISTENT_2 SSD storage: 125, 250, 500, 1000.
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration for an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. Here, d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration? = nil,
            deploymentType: FSxClientTypes.LustreDeploymentType? = nil,
            driveCacheType: FSxClientTypes.DriveCacheType? = nil,
            logConfiguration: FSxClientTypes.LustreLogConfiguration? = nil,
            mountName: Swift.String? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.dataRepositoryConfiguration = dataRepositoryConfiguration
            self.deploymentType = deploymentType
            self.driveCacheType = driveCacheType
            self.logConfiguration = logConfiguration
            self.mountName = mountName
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.LustreLogConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case level = "Level"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreAccessAuditLogLevel.self, forKey: .level)
        level = levelDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for Lustre logging used to write the enabled logging events for your Amazon FSx for Lustre file system or Amazon File Cache resource to Amazon CloudWatch Logs.
    public struct LustreLogConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        public var destination: Swift.String?
        /// The data repository events that are logged by Amazon FSx.
        ///
        /// * WARN_ONLY - only warning events are logged.
        ///
        /// * ERROR_ONLY - only error events are logged.
        ///
        /// * WARN_ERROR - both warning events and error events are logged.
        ///
        /// * DISABLED - logging of data repository events is turned off.
        ///
        ///
        /// Note that Amazon File Cache uses a default setting of WARN_ERROR, which can't be changed.
        /// This member is required.
        public var level: FSxClientTypes.LustreAccessAuditLogLevel?

        public init (
            destination: Swift.String? = nil,
            level: FSxClientTypes.LustreAccessAuditLogLevel? = nil
        )
        {
            self.destination = destination
            self.level = level
        }
    }

}

extension FSxClientTypes.LustreLogCreateConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case level = "Level"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreAccessAuditLogLevel.self, forKey: .level)
        level = levelDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension FSxClientTypes {
    /// The Lustre logging configuration used when creating or updating an Amazon FSx for Lustre file system. An Amazon File Cache is created with Lustre logging enabled by default, with a setting of WARN_ERROR for the logging events. which can't be changed. Lustre logging writes the enabled logging events for your file system or cache to Amazon CloudWatch Logs.
    public struct LustreLogCreateConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:
        ///
        /// * The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        ///
        /// * The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix.
        ///
        /// * If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs /aws/fsx/lustre log group (for Amazon FSx for Lustre) or /aws/fsx/filecache (for Amazon File Cache).
        ///
        /// * If Destination is provided and the resource does not exist, the request will fail with a BadRequest error.
        ///
        /// * If Level is set to DISABLED, you cannot specify a destination in Destination.
        public var destination: Swift.String?
        /// Sets which data repository events are logged by Amazon FSx.
        ///
        /// * WARN_ONLY - only warning events are logged.
        ///
        /// * ERROR_ONLY - only error events are logged.
        ///
        /// * WARN_ERROR - both warning events and error events are logged.
        ///
        /// * DISABLED - logging of data repository events is turned off.
        /// This member is required.
        public var level: FSxClientTypes.LustreAccessAuditLogLevel?

        public init (
            destination: Swift.String? = nil,
            level: FSxClientTypes.LustreAccessAuditLogLevel? = nil
        )
        {
            self.destination = destination
            self.level = level
        }
    }

}

extension FSxClientTypes.LustreRootSquashConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case noSquashNids = "NoSquashNids"
        case rootSquash = "RootSquash"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let noSquashNids = noSquashNids {
            var noSquashNidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noSquashNids)
            for lustrenosquashnid0 in noSquashNids {
                try noSquashNidsContainer.encode(lustrenosquashnid0)
            }
        }
        if let rootSquash = self.rootSquash {
            try encodeContainer.encode(rootSquash, forKey: .rootSquash)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootSquashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootSquash)
        rootSquash = rootSquashDecoded
        let noSquashNidsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .noSquashNids)
        var noSquashNidsDecoded0:[Swift.String]? = nil
        if let noSquashNidsContainer = noSquashNidsContainer {
            noSquashNidsDecoded0 = [Swift.String]()
            for string0 in noSquashNidsContainer {
                if let string0 = string0 {
                    noSquashNidsDecoded0?.append(string0)
                }
            }
        }
        noSquashNids = noSquashNidsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration for Lustre root squash used to restrict root-level access from clients that try to access your FSx for Lustre file system as root. Use the RootSquash parameter to enable root squash. To learn more about Lustre root squash, see [Lustre root squash](https://docs.aws.amazon.com/fsx/latest/LustreGuide/root-squash.html). You can also use the NoSquashNids parameter to provide an array of clients who are not affected by the root squash setting. These clients will access the file system as root, with unrestricted privileges.
    public struct LustreRootSquashConfiguration: Swift.Equatable {
        /// When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:
        ///
        /// * A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, 10.0.1.6@tcp).
        ///
        /// * An address range is described using a dash to separate the range (for example, 10.0.[2-10].[1-255]@tcp).
        public var noSquashNids: [Swift.String]?
        /// You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format UID:GID (for example, 365534:65534). The UID and GID values can range from 0 to 4294967294:
        ///
        /// * A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.
        ///
        /// * A value of 0 (zero) for UID and GID indicates root, and therefore disables root squash.
        ///
        ///
        /// When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.
        public var rootSquash: Swift.String?

        public init (
            noSquashNids: [Swift.String]? = nil,
            rootSquash: Swift.String? = nil
        )
        {
            self.noSquashNids = noSquashNids
            self.rootSquash = rootSquash
        }
    }

}

extension MissingFileCacheConfiguration {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MissingFileCacheConfigurationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A cache configuration is required for this operation.
public struct MissingFileCacheConfiguration: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingFileCacheConfigurationBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingFileCacheConfigurationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MissingFileSystemConfiguration {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MissingFileSystemConfigurationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A file system configuration is required for this operation.
public struct MissingFileSystemConfiguration: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingFileSystemConfigurationBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingFileSystemConfigurationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MissingVolumeConfiguration {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MissingVolumeConfigurationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A volume configuration is required for this operation.
public struct MissingVolumeConfiguration: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingVolumeConfigurationBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingVolumeConfigurationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.NFSDataRepositoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoExportPolicy = "AutoExportPolicy"
        case dnsIps = "DnsIps"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoExportPolicy = self.autoExportPolicy {
            try encodeContainer.encode(autoExportPolicy, forKey: .autoExportPolicy)
        }
        if let dnsIps = dnsIps {
            var dnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIps)
            for ipaddress0 in dnsIps {
                try dnsIpsContainer.encode(ipaddress0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(FSxClientTypes.NfsVersion.self, forKey: .version)
        version = versionDecoded
        let dnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIps)
        var dnsIpsDecoded0:[Swift.String]? = nil
        if let dnsIpsContainer = dnsIpsContainer {
            dnsIpsDecoded0 = [Swift.String]()
            for string0 in dnsIpsContainer {
                if let string0 = string0 {
                    dnsIpsDecoded0?.append(string0)
                }
            }
        }
        dnsIps = dnsIpsDecoded0
        let autoExportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoExportPolicy.self, forKey: .autoExportPolicy)
        autoExportPolicy = autoExportPolicyDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository.
    public struct NFSDataRepositoryConfiguration: Swift.Equatable {
        /// This parameter is not supported for Amazon File Cache.
        public var autoExportPolicy: FSxClientTypes.AutoExportPolicy?
        /// A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.
        public var dnsIps: [Swift.String]?
        /// The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is NFS3, which indicates that the data repository must support the NFSv3 protocol.
        /// This member is required.
        public var version: FSxClientTypes.NfsVersion?

        public init (
            autoExportPolicy: FSxClientTypes.AutoExportPolicy? = nil,
            dnsIps: [Swift.String]? = nil,
            version: FSxClientTypes.NfsVersion? = nil
        )
        {
            self.autoExportPolicy = autoExportPolicy
            self.dnsIps = dnsIps
            self.version = version
        }
    }

}

extension FSxClientTypes {
    public enum NfsVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case nfs3
        case sdkUnknown(Swift.String)

        public static var allCases: [NfsVersion] {
            return [
                .nfs3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .nfs3: return "NFS3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NfsVersion(rawValue: rawValue) ?? NfsVersion.sdkUnknown(rawValue)
        }
    }
}

extension NotServiceResourceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotServiceResourceErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceARN = output.resourceARN
        } else {
            self.message = nil
            self.resourceARN = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified for the tagging operation is not a resource type owned by Amazon FSx. Use the API of the relevant service to perform the operation.
public struct NotServiceResourceError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?
    /// The Amazon Resource Name (ARN) of the non-Amazon FSx resource.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceARN = resourceARN
    }
}

struct NotServiceResourceErrorBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let message: Swift.String?
}

extension NotServiceResourceErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum OntapDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiAz1
        case singleAz1
        case sdkUnknown(Swift.String)

        public static var allCases: [OntapDeploymentType] {
            return [
                .multiAz1,
                .singleAz1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiAz1: return "MULTI_AZ_1"
            case .singleAz1: return "SINGLE_AZ_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OntapDeploymentType(rawValue: rawValue) ?? OntapDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.OntapFileSystemConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case endpointIpAddressRange = "EndpointIpAddressRange"
        case endpoints = "Endpoints"
        case preferredSubnetId = "PreferredSubnetId"
        case routeTableIds = "RouteTableIds"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let endpointIpAddressRange = self.endpointIpAddressRange {
            try encodeContainer.encode(endpointIpAddressRange, forKey: .endpointIpAddressRange)
        }
        if let endpoints = self.endpoints {
            try encodeContainer.encode(endpoints, forKey: .endpoints)
        }
        if let preferredSubnetId = self.preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let routeTableIds = routeTableIds {
            var routeTableIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeTableIds)
            for routetableid0 in routeTableIds {
                try routeTableIdsContainer.encode(routetableid0)
            }
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let endpointIpAddressRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointIpAddressRange)
        endpointIpAddressRange = endpointIpAddressRangeDecoded
        let endpointsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemEndpoints.self, forKey: .endpoints)
        endpoints = endpointsDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let routeTableIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .routeTableIds)
        var routeTableIdsDecoded0:[Swift.String]? = nil
        if let routeTableIdsContainer = routeTableIdsContainer {
            routeTableIdsDecoded0 = [Swift.String]()
            for string0 in routeTableIdsContainer {
                if let string0 = string0 {
                    routeTableIdsDecoded0?.append(string0)
                }
            }
        }
        routeTableIds = routeTableIdsDecoded0
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
    }
}

extension FSxClientTypes {
    /// Configuration for the FSx for NetApp ONTAP file system.
    public struct OntapFileSystemConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the FSx for ONTAP file system deployment type in use in the file system.
        ///
        /// * MULTI_AZ_1 - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability.
        ///
        /// * SINGLE_AZ_1 - A file system configured for Single-AZ redundancy.
        ///
        ///
        /// For information about the use cases for Multi-AZ and Single-AZ deployments, refer to [Choosing Multi-AZ or Single-AZ file system deployment](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.OntapDeploymentType?
        /// The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) The IP address range in which the endpoints to access your file system are created. The Endpoint IP address range you select for your file system must exist outside the VPC's CIDR range and must be at least /30 or larger. If you do not specify this optional parameter, Amazon FSx will automatically select a CIDR block for you.
        public var endpointIpAddressRange: Swift.String?
        /// The Management and Intercluster endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.
        public var endpoints: FSxClientTypes.FileSystemEndpoints?
        /// The ID for a subnet. A subnet is a range of IP addresses in your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var preferredSubnetId: Swift.String?
        /// (Multi-AZ only) The VPC route tables in which your file system's endpoints are created.
        public var routeTableIds: [Swift.String]?
        /// The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OntapDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            endpoints: FSxClientTypes.FileSystemEndpoints? = nil,
            preferredSubnetId: Swift.String? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddressRange = endpointIpAddressRange
            self.endpoints = endpoints
            self.preferredSubnetId = preferredSubnetId
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.OntapVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToBackups = "CopyTagsToBackups"
        case flexCacheEndpointType = "FlexCacheEndpointType"
        case junctionPath = "JunctionPath"
        case ontapVolumeType = "OntapVolumeType"
        case securityStyle = "SecurityStyle"
        case sizeInMegabytes = "SizeInMegabytes"
        case snapshotPolicy = "SnapshotPolicy"
        case storageEfficiencyEnabled = "StorageEfficiencyEnabled"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case storageVirtualMachineRoot = "StorageVirtualMachineRoot"
        case tieringPolicy = "TieringPolicy"
        case uuid = "UUID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let flexCacheEndpointType = self.flexCacheEndpointType {
            try encodeContainer.encode(flexCacheEndpointType.rawValue, forKey: .flexCacheEndpointType)
        }
        if let junctionPath = self.junctionPath {
            try encodeContainer.encode(junctionPath, forKey: .junctionPath)
        }
        if let ontapVolumeType = self.ontapVolumeType {
            try encodeContainer.encode(ontapVolumeType.rawValue, forKey: .ontapVolumeType)
        }
        if let securityStyle = self.securityStyle {
            try encodeContainer.encode(securityStyle.rawValue, forKey: .securityStyle)
        }
        if let sizeInMegabytes = self.sizeInMegabytes {
            try encodeContainer.encode(sizeInMegabytes, forKey: .sizeInMegabytes)
        }
        if let snapshotPolicy = self.snapshotPolicy {
            try encodeContainer.encode(snapshotPolicy, forKey: .snapshotPolicy)
        }
        if let storageEfficiencyEnabled = self.storageEfficiencyEnabled {
            try encodeContainer.encode(storageEfficiencyEnabled, forKey: .storageEfficiencyEnabled)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
        if let storageVirtualMachineRoot = self.storageVirtualMachineRoot {
            try encodeContainer.encode(storageVirtualMachineRoot, forKey: .storageVirtualMachineRoot)
        }
        if let tieringPolicy = self.tieringPolicy {
            try encodeContainer.encode(tieringPolicy, forKey: .tieringPolicy)
        }
        if let uuid = self.uuid {
            try encodeContainer.encode(uuid, forKey: .uuid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flexCacheEndpointTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FlexCacheEndpointType.self, forKey: .flexCacheEndpointType)
        flexCacheEndpointType = flexCacheEndpointTypeDecoded
        let junctionPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .junctionPath)
        junctionPath = junctionPathDecoded
        let securityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SecurityStyle.self, forKey: .securityStyle)
        securityStyle = securityStyleDecoded
        let sizeInMegabytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMegabytes)
        sizeInMegabytes = sizeInMegabytesDecoded
        let storageEfficiencyEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEfficiencyEnabled)
        storageEfficiencyEnabled = storageEfficiencyEnabledDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let storageVirtualMachineRootDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageVirtualMachineRoot)
        storageVirtualMachineRoot = storageVirtualMachineRootDecoded
        let tieringPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.TieringPolicy.self, forKey: .tieringPolicy)
        tieringPolicy = tieringPolicyDecoded
        let uuidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uuid)
        uuid = uuidDecoded
        let ontapVolumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapVolumeType.self, forKey: .ontapVolumeType)
        ontapVolumeType = ontapVolumeTypeDecoded
        let snapshotPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotPolicy)
        snapshotPolicy = snapshotPolicyDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
    }
}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for NetApp ONTAP volume.
    public struct OntapVolumeConfiguration: Swift.Equatable {
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the FlexCache endpoint type of the volume. Valid values are the following:
        ///
        /// * NONE specifies that the volume doesn't have a FlexCache configuration. NONE is the default.
        ///
        /// * ORIGIN specifies that the volume is the origin volume for a FlexCache volume.
        ///
        /// * CACHE specifies that the volume is a FlexCache volume.
        public var flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType?
        /// Specifies the directory that network-attached storage (NAS) clients use to mount the volume, along with the storage virtual machine (SVM) Domain Name System (DNS) name or IP address. You can create a JunctionPath directly below a parent volume junction or on a directory within a volume. A JunctionPath for a volume named vol3 might be /vol1/vol2/vol3, or /vol1/dir2/vol3, or even /dir1/dir2/vol3.
        public var junctionPath: Swift.String?
        /// Specifies the type of volume. Valid values are the following:
        ///
        /// * RW specifies a read/write volume. RW is the default.
        ///
        /// * DP specifies a data-protection volume. You can protect data by replicating it to data-protection mirror copies. If a disaster occurs, you can use these data-protection mirror copies to recover data.
        ///
        /// * LS specifies a load-sharing mirror volume. A load-sharing mirror reduces the network traffic to a FlexVol volume by providing additional read-only access to clients.
        public var ontapVolumeType: FSxClientTypes.OntapVolumeType?
        /// The security style for the volume, which can be UNIX, NTFS, or MIXED.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// The configured size of the volume, in megabytes (MBs).
        public var sizeInMegabytes: Swift.Int?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// The volume's storage efficiency setting.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// The ID of the volume's storage virtual machine.
        public var storageVirtualMachineId: Swift.String?
        /// A Boolean flag indicating whether this volume is the root volume for its storage virtual machine (SVM). Only one volume on an SVM can be the root volume. This value defaults to false. If this value is true, then this is the SVM root volume. This flag is useful when you're deleting an SVM, because you must first delete all non-root volumes. This flag, when set to false, helps you identify which volumes to delete before you can delete the SVM.
        public var storageVirtualMachineRoot: Swift.Bool?
        /// The volume's TieringPolicy setting.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?
        /// The volume's universally unique identifier (UUID).
        public var uuid: Swift.String?

        public init (
            copyTagsToBackups: Swift.Bool? = nil,
            flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType? = nil,
            junctionPath: Swift.String? = nil,
            ontapVolumeType: FSxClientTypes.OntapVolumeType? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            storageVirtualMachineRoot: Swift.Bool? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.copyTagsToBackups = copyTagsToBackups
            self.flexCacheEndpointType = flexCacheEndpointType
            self.junctionPath = junctionPath
            self.ontapVolumeType = ontapVolumeType
            self.securityStyle = securityStyle
            self.sizeInMegabytes = sizeInMegabytes
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.storageVirtualMachineId = storageVirtualMachineId
            self.storageVirtualMachineRoot = storageVirtualMachineRoot
            self.tieringPolicy = tieringPolicy
            self.uuid = uuid
        }
    }

}

extension FSxClientTypes {
    public enum OntapVolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dp
        case ls
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [OntapVolumeType] {
            return [
                .dp,
                .ls,
                .rw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dp: return "DP"
            case .ls: return "LS"
            case .rw: return "RW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OntapVolumeType(rawValue: rawValue) ?? OntapVolumeType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.OpenZFSClientConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clients = "Clients"
        case options = "Options"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clients = self.clients {
            try encodeContainer.encode(clients, forKey: .clients)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for openzfsnfsexportoption0 in options {
                try optionsContainer.encode(openzfsnfsexportoption0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clients)
        clients = clientsDecoded
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .options)
        var optionsDecoded0:[Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String]()
            for string0 in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?.append(string0)
                }
            }
        }
        options = optionsDecoded0
    }
}

extension FSxClientTypes {
    /// Specifies who can mount an OpenZFS file system and the options available while mounting the file system.
    public struct OpenZFSClientConfiguration: Swift.Equatable {
        /// A value that specifies who can mount the file system. You can provide a wildcard character (*), an IP address (0.0.0.0), or a CIDR address (192.0.2.0/24). By default, Amazon FSx uses the wildcard character when specifying the client.
        /// This member is required.
        public var clients: Swift.String?
        /// The options to use when mounting the file system. For a list of options that you can use with Network File System (NFS), see the [exports(5) - Linux man page](https://linux.die.net/man/5/exports). When choosing your options, consider the following:
        ///
        /// * crossmnt is used by default. If you don't specify crossmnt when changing the client configuration, you won't be able to see or access snapshots in your file system's snapshot directory.
        ///
        /// * sync is used by default. If you instead specify async, the system acknowledges writes before writing to disk. If the system crashes before the writes are finished, you lose the unwritten data.
        /// This member is required.
        public var options: [Swift.String]?

        public init (
            clients: Swift.String? = nil,
            options: [Swift.String]? = nil
        )
        {
            self.clients = clients
            self.options = options
        }
    }

}

extension FSxClientTypes {
    public enum OpenZFSCopyStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clone
        case fullCopy
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSCopyStrategy] {
            return [
                .clone,
                .fullCopy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clone: return "CLONE"
            case .fullCopy: return "FULL_COPY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenZFSCopyStrategy(rawValue: rawValue) ?? OpenZFSCopyStrategy.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.OpenZFSCreateRootVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToSnapshots = "CopyTagsToSnapshots"
        case dataCompressionType = "DataCompressionType"
        case nfsExports = "NfsExports"
        case readOnly = "ReadOnly"
        case recordSizeKiB = "RecordSizeKiB"
        case userAndGroupQuotas = "UserAndGroupQuotas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToSnapshots = self.copyTagsToSnapshots {
            try encodeContainer.encode(copyTagsToSnapshots, forKey: .copyTagsToSnapshots)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let nfsExports = nfsExports {
            var nfsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nfsExports)
            for openzfsnfsexport0 in nfsExports {
                try nfsExportsContainer.encode(openzfsnfsexport0)
            }
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let recordSizeKiB = self.recordSizeKiB {
            try encodeContainer.encode(recordSizeKiB, forKey: .recordSizeKiB)
        }
        if let userAndGroupQuotas = userAndGroupQuotas {
            var userAndGroupQuotasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAndGroupQuotas)
            for openzfsuserorgroupquota0 in userAndGroupQuotas {
                try userAndGroupQuotasContainer.encode(openzfsuserorgroupquota0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordSizeKiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recordSizeKiB)
        recordSizeKiB = recordSizeKiBDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let nfsExportsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSNfsExport?].self, forKey: .nfsExports)
        var nfsExportsDecoded0:[FSxClientTypes.OpenZFSNfsExport]? = nil
        if let nfsExportsContainer = nfsExportsContainer {
            nfsExportsDecoded0 = [FSxClientTypes.OpenZFSNfsExport]()
            for structure0 in nfsExportsContainer {
                if let structure0 = structure0 {
                    nfsExportsDecoded0?.append(structure0)
                }
            }
        }
        nfsExports = nfsExportsDecoded0
        let userAndGroupQuotasContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSUserOrGroupQuota?].self, forKey: .userAndGroupQuotas)
        var userAndGroupQuotasDecoded0:[FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        if let userAndGroupQuotasContainer = userAndGroupQuotasContainer {
            userAndGroupQuotasDecoded0 = [FSxClientTypes.OpenZFSUserOrGroupQuota]()
            for structure0 in userAndGroupQuotasContainer {
                if let structure0 = structure0 {
                    userAndGroupQuotasDecoded0?.append(structure0)
                }
            }
        }
        userAndGroupQuotas = userAndGroupQuotasDecoded0
        let copyTagsToSnapshotsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshots)
        copyTagsToSnapshots = copyTagsToSnapshotsDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
    }
}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for OpenZFS root volume.
    public struct OpenZFSCreateRootVolumeConfiguration: Swift.Equatable {
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots of the volume. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// A Boolean value indicating whether the volume is read-only. Setting this value to true can be useful after you have completed changes to a volume and no longer want changes to occur.
        public var readOnly: Swift.Bool?
        /// Specifies the record size of an OpenZFS root volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on setting a custom record size, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init (
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

extension FSxClientTypes {
    public enum OpenZFSDataCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lz4
        case `none`
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSDataCompressionType] {
            return [
                .lz4,
                .none,
                .zstd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lz4: return "LZ4"
            case .none: return "NONE"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenZFSDataCompressionType(rawValue: rawValue) ?? OpenZFSDataCompressionType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum OpenZFSDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singleAz1
        case singleAz2
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSDeploymentType] {
            return [
                .singleAz1,
                .singleAz2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singleAz1: return "SINGLE_AZ_1"
            case .singleAz2: return "SINGLE_AZ_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenZFSDeploymentType(rawValue: rawValue) ?? OpenZFSDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.OpenZFSFileSystemConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case copyTagsToVolumes = "CopyTagsToVolumes"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case rootVolumeId = "RootVolumeId"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let copyTagsToVolumes = self.copyTagsToVolumes {
            try encodeContainer.encode(copyTagsToVolumes, forKey: .copyTagsToVolumes)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let rootVolumeId = self.rootVolumeId {
            try encodeContainer.encode(rootVolumeId, forKey: .rootVolumeId)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let copyTagsToVolumesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToVolumes)
        copyTagsToVolumes = copyTagsToVolumesDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let rootVolumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootVolumeId)
        rootVolumeId = rootVolumeIdDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for the Amazon FSx for OpenZFS file system.
    public struct OpenZFSFileSystemConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags on the file system should be copied to backups. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file-system deployment type. Amazon FSx for OpenZFS supports  SINGLE_AZ_1 and SINGLE_AZ_2.
        public var deploymentType: FSxClientTypes.OpenZFSDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The ID of the root volume of the OpenZFS file system.
        public var rootVolumeId: Swift.String?
        /// The throughput of an Amazon FSx file system, measured in megabytes per second (MBps).
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OpenZFSDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            rootVolumeId: Swift.String? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.rootVolumeId = rootVolumeId
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.OpenZFSNfsExport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientConfigurations = "ClientConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientConfigurations = clientConfigurations {
            var clientConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clientConfigurations)
            for openzfsclientconfiguration0 in clientConfigurations {
                try clientConfigurationsContainer.encode(openzfsclientconfiguration0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientConfigurationsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSClientConfiguration?].self, forKey: .clientConfigurations)
        var clientConfigurationsDecoded0:[FSxClientTypes.OpenZFSClientConfiguration]? = nil
        if let clientConfigurationsContainer = clientConfigurationsContainer {
            clientConfigurationsDecoded0 = [FSxClientTypes.OpenZFSClientConfiguration]()
            for structure0 in clientConfigurationsContainer {
                if let structure0 = structure0 {
                    clientConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        clientConfigurations = clientConfigurationsDecoded0
    }
}

extension FSxClientTypes {
    /// The Network File System (NFS) configurations for mounting an Amazon FSx for OpenZFS file system.
    public struct OpenZFSNfsExport: Swift.Equatable {
        /// A list of configuration objects that contain the client and options for mounting the OpenZFS file system.
        /// This member is required.
        public var clientConfigurations: [FSxClientTypes.OpenZFSClientConfiguration]?

        public init (
            clientConfigurations: [FSxClientTypes.OpenZFSClientConfiguration]? = nil
        )
        {
            self.clientConfigurations = clientConfigurations
        }
    }

}

extension FSxClientTypes.OpenZFSOriginSnapshotConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyStrategy = "CopyStrategy"
        case snapshotARN = "SnapshotARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyStrategy = self.copyStrategy {
            try encodeContainer.encode(copyStrategy.rawValue, forKey: .copyStrategy)
        }
        if let snapshotARN = self.snapshotARN {
            try encodeContainer.encode(snapshotARN, forKey: .snapshotARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotARN)
        snapshotARN = snapshotARNDecoded
        let copyStrategyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSCopyStrategy.self, forKey: .copyStrategy)
        copyStrategy = copyStrategyDecoded
    }
}

extension FSxClientTypes {
    /// The snapshot configuration to use when creating an OpenZFS volume from a snapshot.
    public struct OpenZFSOriginSnapshotConfiguration: Swift.Equatable {
        /// The strategy used when copying data from the snapshot to the new volume.
        ///
        /// * CLONE - The new volume references the data in the origin snapshot. Cloning a snapshot is faster than copying the data from a snapshot to a new volume and doesn't consume disk throughput. However, the origin snapshot can't be deleted if there is a volume using its copied data.
        ///
        /// * FULL_COPY - Copies all data from the snapshot to the new volume.
        public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var snapshotARN: Swift.String?

        public init (
            copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
            snapshotARN: Swift.String? = nil
        )
        {
            self.copyStrategy = copyStrategy
            self.snapshotARN = snapshotARN
        }
    }

}

extension FSxClientTypes {
    public enum OpenZFSQuotaType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSQuotaType] {
            return [
                .group,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenZFSQuotaType(rawValue: rawValue) ?? OpenZFSQuotaType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.OpenZFSUserOrGroupQuota: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case storageCapacityQuotaGiB = "StorageCapacityQuotaGiB"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let storageCapacityQuotaGiB = self.storageCapacityQuotaGiB {
            try encodeContainer.encode(storageCapacityQuotaGiB, forKey: .storageCapacityQuotaGiB)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSQuotaType.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .id)
        id = idDecoded
        let storageCapacityQuotaGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityQuotaGiB)
        storageCapacityQuotaGiB = storageCapacityQuotaGiBDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for how much storage a user or group can use on the volume.
    public struct OpenZFSUserOrGroupQuota: Swift.Equatable {
        /// The ID of the user or group.
        /// This member is required.
        public var id: Swift.Int?
        /// The amount of storage that the user or group can use in gibibytes (GiB).
        /// This member is required.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// A value that specifies whether the quota applies to a user or group.
        /// This member is required.
        public var type: FSxClientTypes.OpenZFSQuotaType?

        public init (
            id: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            type: FSxClientTypes.OpenZFSQuotaType? = nil
        )
        {
            self.id = id
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.type = type
        }
    }

}

extension FSxClientTypes.OpenZFSVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToSnapshots = "CopyTagsToSnapshots"
        case dataCompressionType = "DataCompressionType"
        case deleteClonedVolumes = "DeleteClonedVolumes"
        case deleteIntermediateSnaphots = "DeleteIntermediateSnaphots"
        case nfsExports = "NfsExports"
        case originSnapshot = "OriginSnapshot"
        case parentVolumeId = "ParentVolumeId"
        case readOnly = "ReadOnly"
        case recordSizeKiB = "RecordSizeKiB"
        case restoreToSnapshot = "RestoreToSnapshot"
        case storageCapacityQuotaGiB = "StorageCapacityQuotaGiB"
        case storageCapacityReservationGiB = "StorageCapacityReservationGiB"
        case userAndGroupQuotas = "UserAndGroupQuotas"
        case volumePath = "VolumePath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToSnapshots = self.copyTagsToSnapshots {
            try encodeContainer.encode(copyTagsToSnapshots, forKey: .copyTagsToSnapshots)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let deleteClonedVolumes = self.deleteClonedVolumes {
            try encodeContainer.encode(deleteClonedVolumes, forKey: .deleteClonedVolumes)
        }
        if let deleteIntermediateSnaphots = self.deleteIntermediateSnaphots {
            try encodeContainer.encode(deleteIntermediateSnaphots, forKey: .deleteIntermediateSnaphots)
        }
        if let nfsExports = nfsExports {
            var nfsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nfsExports)
            for openzfsnfsexport0 in nfsExports {
                try nfsExportsContainer.encode(openzfsnfsexport0)
            }
        }
        if let originSnapshot = self.originSnapshot {
            try encodeContainer.encode(originSnapshot, forKey: .originSnapshot)
        }
        if let parentVolumeId = self.parentVolumeId {
            try encodeContainer.encode(parentVolumeId, forKey: .parentVolumeId)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let recordSizeKiB = self.recordSizeKiB {
            try encodeContainer.encode(recordSizeKiB, forKey: .recordSizeKiB)
        }
        if let restoreToSnapshot = self.restoreToSnapshot {
            try encodeContainer.encode(restoreToSnapshot, forKey: .restoreToSnapshot)
        }
        if let storageCapacityQuotaGiB = self.storageCapacityQuotaGiB {
            try encodeContainer.encode(storageCapacityQuotaGiB, forKey: .storageCapacityQuotaGiB)
        }
        if let storageCapacityReservationGiB = self.storageCapacityReservationGiB {
            try encodeContainer.encode(storageCapacityReservationGiB, forKey: .storageCapacityReservationGiB)
        }
        if let userAndGroupQuotas = userAndGroupQuotas {
            var userAndGroupQuotasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAndGroupQuotas)
            for openzfsuserorgroupquota0 in userAndGroupQuotas {
                try userAndGroupQuotasContainer.encode(openzfsuserorgroupquota0)
            }
        }
        if let volumePath = self.volumePath {
            try encodeContainer.encode(volumePath, forKey: .volumePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentVolumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentVolumeId)
        parentVolumeId = parentVolumeIdDecoded
        let volumePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumePath)
        volumePath = volumePathDecoded
        let storageCapacityReservationGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityReservationGiB)
        storageCapacityReservationGiB = storageCapacityReservationGiBDecoded
        let storageCapacityQuotaGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityQuotaGiB)
        storageCapacityQuotaGiB = storageCapacityQuotaGiBDecoded
        let recordSizeKiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recordSizeKiB)
        recordSizeKiB = recordSizeKiBDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let copyTagsToSnapshotsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshots)
        copyTagsToSnapshots = copyTagsToSnapshotsDecoded
        let originSnapshotDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSOriginSnapshotConfiguration.self, forKey: .originSnapshot)
        originSnapshot = originSnapshotDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let nfsExportsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSNfsExport?].self, forKey: .nfsExports)
        var nfsExportsDecoded0:[FSxClientTypes.OpenZFSNfsExport]? = nil
        if let nfsExportsContainer = nfsExportsContainer {
            nfsExportsDecoded0 = [FSxClientTypes.OpenZFSNfsExport]()
            for structure0 in nfsExportsContainer {
                if let structure0 = structure0 {
                    nfsExportsDecoded0?.append(structure0)
                }
            }
        }
        nfsExports = nfsExportsDecoded0
        let userAndGroupQuotasContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSUserOrGroupQuota?].self, forKey: .userAndGroupQuotas)
        var userAndGroupQuotasDecoded0:[FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        if let userAndGroupQuotasContainer = userAndGroupQuotasContainer {
            userAndGroupQuotasDecoded0 = [FSxClientTypes.OpenZFSUserOrGroupQuota]()
            for structure0 in userAndGroupQuotasContainer {
                if let structure0 = structure0 {
                    userAndGroupQuotasDecoded0?.append(structure0)
                }
            }
        }
        userAndGroupQuotas = userAndGroupQuotasDecoded0
        let restoreToSnapshotDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreToSnapshot)
        restoreToSnapshot = restoreToSnapshotDecoded
        let deleteIntermediateSnaphotsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteIntermediateSnaphots)
        deleteIntermediateSnaphots = deleteIntermediateSnaphotsDecoded
        let deleteClonedVolumesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteClonedVolumes)
        deleteClonedVolumes = deleteClonedVolumesDecoded
    }
}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for OpenZFS volume.
    public struct OpenZFSVolumeConfiguration: Swift.Equatable {
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// A Boolean value indicating whether dependent clone volumes created from intermediate snapshots should be deleted when a volume is restored from snapshot.
        public var deleteClonedVolumes: Swift.Bool?
        /// A Boolean value indicating whether snapshots between the current state and the specified snapshot should be deleted when a volume is restored from snapshot.
        public var deleteIntermediateSnaphots: Swift.Bool?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// The configuration object that specifies the snapshot to use as the origin of the data for the volume.
        public var originSnapshot: FSxClientTypes.OpenZFSOriginSnapshotConfiguration?
        /// The ID of the parent volume.
        public var parentVolumeId: Swift.String?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. For guidance on when to set a custom record size, see the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// Specifies the ID of the snapshot to which the volume was restored.
        public var restoreToSnapshot: Swift.String?
        /// The maximum amount of storage in gibibtyes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved.
        public var storageCapacityReservationGiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?
        /// The path to the volume from the root volume. For example, fsx/parentVolume/volume1.
        public var volumePath: Swift.String?

        public init (
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            deleteClonedVolumes: Swift.Bool? = nil,
            deleteIntermediateSnaphots: Swift.Bool? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            originSnapshot: FSxClientTypes.OpenZFSOriginSnapshotConfiguration? = nil,
            parentVolumeId: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            restoreToSnapshot: Swift.String? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil,
            volumePath: Swift.String? = nil
        )
        {
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.deleteClonedVolumes = deleteClonedVolumes
            self.deleteIntermediateSnaphots = deleteIntermediateSnaphots
            self.nfsExports = nfsExports
            self.originSnapshot = originSnapshot
            self.parentVolumeId = parentVolumeId
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.restoreToSnapshot = restoreToSnapshot
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
            self.volumePath = volumePath
        }
    }

}

extension ReleaseFileSystemNfsV3LocksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
    }
}

extension ReleaseFileSystemNfsV3LocksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ReleaseFileSystemNfsV3LocksInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

struct ReleaseFileSystemNfsV3LocksInputBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let clientRequestToken: Swift.String?
}

extension ReleaseFileSystemNfsV3LocksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension ReleaseFileSystemNfsV3LocksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReleaseFileSystemNfsV3LocksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ReleaseFileSystemNfsV3LocksOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReleaseFileSystemNfsV3LocksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReleaseFileSystemNfsV3LocksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystem = output.fileSystem
        } else {
            self.fileSystem = nil
        }
    }
}

public struct ReleaseFileSystemNfsV3LocksOutputResponse: Swift.Equatable {
    /// A description of a specific Amazon FSx file system.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init (
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

struct ReleaseFileSystemNfsV3LocksOutputResponseBody: Swift.Equatable {
    let fileSystem: FSxClientTypes.FileSystem?
}

extension ReleaseFileSystemNfsV3LocksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystem = "FileSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
    }
}

extension FSxClientTypes {
    public enum ReportFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case reportCsv20191124
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportFormat] {
            return [
                .reportCsv20191124,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .reportCsv20191124: return "REPORT_CSV_20191124"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportFormat(rawValue: rawValue) ?? ReportFormat.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum ReportScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failedFilesOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportScope] {
            return [
                .failedFilesOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failedFilesOnly: return "FAILED_FILES_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportScope(rawValue: rawValue) ?? ReportScope.sdkUnknown(rawValue)
        }
    }
}

extension ResourceDoesNotSupportTagging {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceDoesNotSupportTaggingBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceARN = output.resourceARN
        } else {
            self.message = nil
            self.resourceARN = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified does not support tagging.
public struct ResourceDoesNotSupportTagging: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource that doesn't support tagging.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceARN = resourceARN
    }
}

struct ResourceDoesNotSupportTaggingBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let message: Swift.String?
}

extension ResourceDoesNotSupportTaggingBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceARN = output.resourceARN
        } else {
            self.message = nil
            self.resourceARN = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified by the Amazon Resource Name (ARN) can't be found.
public struct ResourceNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?
    /// The resource ARN of the resource that can't be found.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceARN = resourceARN
    }
}

struct ResourceNotFoundBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let message: Swift.String?
}

extension ResourceNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileSystem
        case volume
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .fileSystem,
                .volume,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileSystem: return "FILE_SYSTEM"
            case .volume: return "VOLUME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum RestoreOpenZFSVolumeOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteClonedVolumes
        case deleteIntermediateSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [RestoreOpenZFSVolumeOption] {
            return [
                .deleteClonedVolumes,
                .deleteIntermediateSnapshots,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteClonedVolumes: return "DELETE_CLONED_VOLUMES"
            case .deleteIntermediateSnapshots: return "DELETE_INTERMEDIATE_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RestoreOpenZFSVolumeOption(rawValue: rawValue) ?? RestoreOpenZFSVolumeOption.sdkUnknown(rawValue)
        }
    }
}

extension RestoreVolumeFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case options = "Options"
        case snapshotId = "SnapshotId"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for restoreopenzfsvolumeoption0 in options {
                try optionsContainer.encode(restoreopenzfsvolumeoption0.rawValue)
            }
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }
}

extension RestoreVolumeFromSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RestoreVolumeFromSnapshotInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The settings used when restoring the specified volume from snapshot.
    ///
    /// * DELETE_INTERMEDIATE_SNAPSHOTS - Deletes snapshots between the current state and the specified snapshot. If there are intermediate snapshots and this option isn't used, RestoreVolumeFromSnapshot fails.
    ///
    /// * DELETE_CLONED_VOLUMES - Deletes any dependent clone volumes created from intermediate snapshots. If there are any dependent clone volumes and this option isn't used, RestoreVolumeFromSnapshot fails.
    public var options: [FSxClientTypes.RestoreOpenZFSVolumeOption]?
    /// The ID of the source snapshot. Specifies the snapshot that you are restoring from.
    /// This member is required.
    public var snapshotId: Swift.String?
    /// The ID of the volume that you are restoring.
    /// This member is required.
    public var volumeId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        options: [FSxClientTypes.RestoreOpenZFSVolumeOption]? = nil,
        snapshotId: Swift.String? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.options = options
        self.snapshotId = snapshotId
        self.volumeId = volumeId
    }
}

struct RestoreVolumeFromSnapshotInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeId: Swift.String?
    let snapshotId: Swift.String?
    let options: [FSxClientTypes.RestoreOpenZFSVolumeOption]?
}

extension RestoreVolumeFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case options = "Options"
        case snapshotId = "SnapshotId"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let optionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.RestoreOpenZFSVolumeOption?].self, forKey: .options)
        var optionsDecoded0:[FSxClientTypes.RestoreOpenZFSVolumeOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [FSxClientTypes.RestoreOpenZFSVolumeOption]()
            for enum0 in optionsContainer {
                if let enum0 = enum0 {
                    optionsDecoded0?.append(enum0)
                }
            }
        }
        options = optionsDecoded0
    }
}

extension RestoreVolumeFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreVolumeFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RestoreVolumeFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreVolumeFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RestoreVolumeFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.administrativeActions = output.administrativeActions
            self.lifecycle = output.lifecycle
            self.volumeId = output.volumeId
        } else {
            self.administrativeActions = nil
            self.lifecycle = nil
            self.volumeId = nil
        }
    }
}

public struct RestoreVolumeFromSnapshotOutputResponse: Swift.Equatable {
    /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.
    public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
    /// The lifecycle state of the volume being restored.
    public var lifecycle: FSxClientTypes.VolumeLifecycle?
    /// The ID of the volume that you restored.
    public var volumeId: Swift.String?

    public init (
        administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
        lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.administrativeActions = administrativeActions
        self.lifecycle = lifecycle
        self.volumeId = volumeId
    }
}

struct RestoreVolumeFromSnapshotOutputResponseBody: Swift.Equatable {
    let volumeId: Swift.String?
    let lifecycle: FSxClientTypes.VolumeLifecycle?
    let administrativeActions: [FSxClientTypes.AdministrativeAction]?
}

extension RestoreVolumeFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case lifecycle = "Lifecycle"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
    }
}

extension FSxClientTypes.S3DataRepositoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoExportPolicy = "AutoExportPolicy"
        case autoImportPolicy = "AutoImportPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoExportPolicy = self.autoExportPolicy {
            try encodeContainer.encode(autoExportPolicy, forKey: .autoExportPolicy)
        }
        if let autoImportPolicy = self.autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy, forKey: .autoImportPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoImportPolicy.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let autoExportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoExportPolicy.self, forKey: .autoExportPolicy)
        autoExportPolicy = autoExportPolicyDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx for Lustre file system with a data repository association. The configuration consists of an AutoImportPolicy that defines which file events on the data repository are automatically imported to the file system and an AutoExportPolicy that defines which file events on the file system are automatically exported to the data repository. File events are when files or directories are added, changed, or deleted on the file system or the data repository. Data repository associations on Amazon File Cache don't use S3DataRepositoryConfiguration because they don't support automatic import or automatic export.
    public struct S3DataRepositoryConfiguration: Swift.Equatable {
        /// Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.
        public var autoExportPolicy: FSxClientTypes.AutoExportPolicy?
        /// Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicy?

        public init (
            autoExportPolicy: FSxClientTypes.AutoExportPolicy? = nil,
            autoImportPolicy: FSxClientTypes.AutoImportPolicy? = nil
        )
        {
            self.autoExportPolicy = autoExportPolicy
            self.autoImportPolicy = autoImportPolicy
        }
    }

}

extension FSxClientTypes {
    public enum SecurityStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mixed
        case ntfs
        case unix
        case sdkUnknown(Swift.String)

        public static var allCases: [SecurityStyle] {
            return [
                .mixed,
                .ntfs,
                .unix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .ntfs: return "NTFS"
            case .unix: return "UNIX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SecurityStyle(rawValue: rawValue) ?? SecurityStyle.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIps = "DnsIps"
        case domainName = "DomainName"
        case fileSystemAdministratorsGroup = "FileSystemAdministratorsGroup"
        case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIps = dnsIps {
            var dnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIps)
            for ipaddress0 in dnsIps {
                try dnsIpsContainer.encode(ipaddress0)
            }
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let fileSystemAdministratorsGroup = self.fileSystemAdministratorsGroup {
            try encodeContainer.encode(fileSystemAdministratorsGroup, forKey: .fileSystemAdministratorsGroup)
        }
        if let organizationalUnitDistinguishedName = self.organizationalUnitDistinguishedName {
            try encodeContainer.encode(organizationalUnitDistinguishedName, forKey: .organizationalUnitDistinguishedName)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let organizationalUnitDistinguishedNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitDistinguishedName)
        organizationalUnitDistinguishedName = organizationalUnitDistinguishedNameDecoded
        let fileSystemAdministratorsGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemAdministratorsGroup)
        fileSystemAdministratorsGroup = fileSystemAdministratorsGroupDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let dnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIps)
        var dnsIpsDecoded0:[Swift.String]? = nil
        if let dnsIpsContainer = dnsIpsContainer {
            dnsIpsDecoded0 = [Swift.String]()
            for string0 in dnsIpsContainer {
                if let string0 = string0 {
                    dnsIpsDecoded0?.append(string0)
                }
            }
        }
        dnsIps = dnsIpsDecoded0
    }
}

extension FSxClientTypes {
    /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
    public struct SelfManagedActiveDirectoryAttributes: Swift.Equatable {
        /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
        public var dnsIps: [Swift.String]?
        /// The fully qualified domain name of the self-managed AD directory.
        public var domainName: Swift.String?
        /// The name of the domain group whose members have administrative privileges for the FSx file system.
        public var fileSystemAdministratorsGroup: Swift.String?
        /// The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var organizationalUnitDistinguishedName: Swift.String?
        /// The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.
        public var userName: Swift.String?

        public init (
            dnsIps: [Swift.String]? = nil,
            domainName: Swift.String? = nil,
            fileSystemAdministratorsGroup: Swift.String? = nil,
            organizationalUnitDistinguishedName: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.domainName = domainName
            self.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.userName = userName
        }
    }

}

extension FSxClientTypes.SelfManagedActiveDirectoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIps = "DnsIps"
        case domainName = "DomainName"
        case fileSystemAdministratorsGroup = "FileSystemAdministratorsGroup"
        case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
        case password = "Password"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIps = dnsIps {
            var dnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIps)
            for ipaddress0 in dnsIps {
                try dnsIpsContainer.encode(ipaddress0)
            }
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let fileSystemAdministratorsGroup = self.fileSystemAdministratorsGroup {
            try encodeContainer.encode(fileSystemAdministratorsGroup, forKey: .fileSystemAdministratorsGroup)
        }
        if let organizationalUnitDistinguishedName = self.organizationalUnitDistinguishedName {
            try encodeContainer.encode(organizationalUnitDistinguishedName, forKey: .organizationalUnitDistinguishedName)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let organizationalUnitDistinguishedNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitDistinguishedName)
        organizationalUnitDistinguishedName = organizationalUnitDistinguishedNameDecoded
        let fileSystemAdministratorsGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemAdministratorsGroup)
        fileSystemAdministratorsGroup = fileSystemAdministratorsGroupDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let dnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIps)
        var dnsIpsDecoded0:[Swift.String]? = nil
        if let dnsIpsContainer = dnsIpsContainer {
            dnsIpsDecoded0 = [Swift.String]()
            for string0 in dnsIpsContainer {
                if let string0 = string0 {
                    dnsIpsDecoded0?.append(string0)
                }
            }
        }
        dnsIps = dnsIpsDecoded0
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelfManagedActiveDirectoryConfiguration(dnsIps: \(Swift.String(describing: dnsIps)), domainName: \(Swift.String(describing: domainName)), fileSystemAdministratorsGroup: \(Swift.String(describing: fileSystemAdministratorsGroup)), organizationalUnitDistinguishedName: \(Swift.String(describing: organizationalUnitDistinguishedName)), userName: \(Swift.String(describing: userName)), password: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
    public struct SelfManagedActiveDirectoryConfiguration: Swift.Equatable {
        /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
        /// This member is required.
        public var dnsIps: [Swift.String]?
        /// The fully qualified domain name of the self-managed AD directory, such as corp.example.com.
        /// This member is required.
        public var domainName: Swift.String?
        /// (Optional) The name of the domain group whose members are granted administrative privileges for the file system. Administrative privileges include taking ownership of files and folders, setting audit controls (audit ACLs) on files and folders, and administering the file system remotely by using the FSx Remote PowerShell. The group that you specify must already exist in your domain. If you don't provide one, your AD domain's Domain Admins group is used.
        public var fileSystemAdministratorsGroup: Swift.String?
        /// (Optional) The fully qualified distinguished name of the organizational unit within your self-managed AD directory. Amazon FSx only accepts OU as the direct parent of the file system. An example is OU=FSx,DC=yourdomain,DC=corp,DC=com. To learn more, see [RFC 2253](https://tools.ietf.org/html/rfc2253). If none is provided, the FSx file system is created in the default location of your self-managed AD directory. Only Organizational Unit (OU) objects can be the direct parent of the file system that you're creating.
        public var organizationalUnitDistinguishedName: Swift.String?
        /// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
        /// This member is required.
        public var password: Swift.String?
        /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain. This account must have the permission to join computers to the domain in the organizational unit provided in OrganizationalUnitDistinguishedName, or in the default location of your AD domain.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            dnsIps: [Swift.String]? = nil,
            domainName: Swift.String? = nil,
            fileSystemAdministratorsGroup: Swift.String? = nil,
            organizationalUnitDistinguishedName: Swift.String? = nil,
            password: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.domainName = domainName
            self.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.password = password
            self.userName = userName
        }
    }

}

extension FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIps = "DnsIps"
        case password = "Password"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIps = dnsIps {
            var dnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIps)
            for ipaddress0 in dnsIps {
                try dnsIpsContainer.encode(ipaddress0)
            }
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let dnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIps)
        var dnsIpsDecoded0:[Swift.String]? = nil
        if let dnsIpsContainer = dnsIpsContainer {
            dnsIpsDecoded0 = [Swift.String]()
            for string0 in dnsIpsContainer {
                if let string0 = string0 {
                    dnsIpsDecoded0?.append(string0)
                }
            }
        }
        dnsIps = dnsIpsDecoded0
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelfManagedActiveDirectoryConfigurationUpdates(dnsIps: \(Swift.String(describing: dnsIps)), userName: \(Swift.String(describing: userName)), password: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx uses to join the Windows File Server instance to a self-managed Microsoft Active Directory (AD) directory.
    public struct SelfManagedActiveDirectoryConfigurationUpdates: Swift.Equatable {
        /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
        public var dnsIps: [Swift.String]?
        /// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
        public var password: Swift.String?
        /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain. This account must have the permission to join computers to the domain in the organizational unit provided in OrganizationalUnitDistinguishedName.
        public var userName: Swift.String?

        public init (
            dnsIps: [Swift.String]? = nil,
            password: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.password = password
            self.userName = userName
        }
    }

}

extension FSxClientTypes {
    /// The types of limits on your service utilization. Limits include file system count, total throughput capacity, total storage, and total user-initiated backups. These limits apply for a specific account in a specific Amazon Web Services Region. You can increase some of them by contacting Amazon Web Services Support.
    public enum ServiceLimit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileCacheCount
        case fileSystemCount
        case storageVirtualMachinesPerFileSystem
        case totalInProgressCopyBackups
        case totalSsdIops
        case totalStorage
        case totalThroughputCapacity
        case totalUserInitiatedBackups
        case totalUserTags
        case volumesPerFileSystem
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceLimit] {
            return [
                .fileCacheCount,
                .fileSystemCount,
                .storageVirtualMachinesPerFileSystem,
                .totalInProgressCopyBackups,
                .totalSsdIops,
                .totalStorage,
                .totalThroughputCapacity,
                .totalUserInitiatedBackups,
                .totalUserTags,
                .volumesPerFileSystem,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileCacheCount: return "FILE_CACHE_COUNT"
            case .fileSystemCount: return "FILE_SYSTEM_COUNT"
            case .storageVirtualMachinesPerFileSystem: return "STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM"
            case .totalInProgressCopyBackups: return "TOTAL_IN_PROGRESS_COPY_BACKUPS"
            case .totalSsdIops: return "TOTAL_SSD_IOPS"
            case .totalStorage: return "TOTAL_STORAGE"
            case .totalThroughputCapacity: return "TOTAL_THROUGHPUT_CAPACITY"
            case .totalUserInitiatedBackups: return "TOTAL_USER_INITIATED_BACKUPS"
            case .totalUserTags: return "TOTAL_USER_TAGS"
            case .volumesPerFileSystem: return "VOLUMES_PER_FILE_SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceLimit(rawValue: rawValue) ?? ServiceLimit.sdkUnknown(rawValue)
        }
    }
}

extension ServiceLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.limit = output.limit
            self.message = output.message
        } else {
            self.limit = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error indicating that a particular service limit was exceeded. You can increase some service limits by contacting Amazon Web Services Support.
public struct ServiceLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Enumeration of the service limit that was exceeded.
    /// This member is required.
    public var limit: FSxClientTypes.ServiceLimit?
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        limit: FSxClientTypes.ServiceLimit? = nil,
        message: Swift.String? = nil
    )
    {
        self.limit = limit
        self.message = message
    }
}

struct ServiceLimitExceededBody: Swift.Equatable {
    let limit: FSxClientTypes.ServiceLimit?
    let message: Swift.String?
}

extension ServiceLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ServiceLimit.self, forKey: .limit)
        limit = limitDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes.Snapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case creationTime = "CreationTime"
        case lifecycle = "Lifecycle"
        case lifecycleTransitionReason = "LifecycleTransitionReason"
        case name = "Name"
        case resourceARN = "ResourceARN"
        case snapshotId = "SnapshotId"
        case tags = "Tags"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActions = administrativeActions {
            var administrativeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .administrativeActions)
            for administrativeaction0 in administrativeActions {
                try administrativeActionsContainer.encode(administrativeaction0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lifecycleTransitionReason = self.lifecycleTransitionReason {
            try encodeContainer.encode(lifecycleTransitionReason, forKey: .lifecycleTransitionReason)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SnapshotLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let lifecycleTransitionReasonDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LifecycleTransitionReason.self, forKey: .lifecycleTransitionReason)
        lifecycleTransitionReason = lifecycleTransitionReasonDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
    }
}

extension FSxClientTypes {
    /// A snapshot of an Amazon FSx for OpenZFS volume.
    public struct Snapshot: Swift.Equatable {
        /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The lifecycle status of the snapshot.
        ///
        /// * PENDING - Amazon FSx hasn't started creating the snapshot.
        ///
        /// * CREATING - Amazon FSx is creating the snapshot.
        ///
        /// * DELETING - Amazon FSx is deleting the snapshot.
        ///
        /// * AVAILABLE - The snapshot is fully available.
        public var lifecycle: FSxClientTypes.SnapshotLifecycle?
        /// Describes why a resource lifecycle state changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the snapshot.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The ID of the snapshot.
        public var snapshotId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of the volume that the snapshot is of.
        public var volumeId: Swift.String?

        public init (
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lifecycle: FSxClientTypes.SnapshotLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            snapshotId: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            volumeId: Swift.String? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.resourceARN = resourceARN
            self.snapshotId = snapshotId
            self.tags = tags
            self.volumeId = volumeId
        }
    }

}

extension FSxClientTypes.SnapshotFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for snapshotfiltervalue0 in values {
                try valuesContainer.encode(snapshotfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SnapshotFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of DescribeSnapshots calls. You can use multiple filters to return results that meet all applied filter requirements.
    public struct SnapshotFilter: Swift.Equatable {
        /// The name of the filter to use. You can filter by the file-system-id or by volume-id.
        public var name: FSxClientTypes.SnapshotFilterName?
        /// The file-system-id or volume-id that you are filtering for.
        public var values: [Swift.String]?

        public init (
            name: FSxClientTypes.SnapshotFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension FSxClientTypes {
    public enum SnapshotFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileSystemId
        case volumeId
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotFilterName] {
            return [
                .fileSystemId,
                .volumeId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case .volumeId: return "volume-id"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotFilterName(rawValue: rawValue) ?? SnapshotFilterName.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum SnapshotLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotLifecycle(rawValue: rawValue) ?? SnapshotLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension SnapshotNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SnapshotNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No Amazon FSx snapshots were found based on the supplied parameters.
public struct SnapshotNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SourceBackupUnavailable {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SourceBackupUnavailableBody = try responseDecoder.decode(responseBody: data)
            self.backupId = output.backupId
            self.message = output.message
        } else {
            self.backupId = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the lifecycle status of the source backup isn't AVAILABLE.
public struct SourceBackupUnavailable: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The ID of the source backup. Specifies the backup that you are copying.
    public var backupId: Swift.String?
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        backupId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.backupId = backupId
        self.message = message
    }
}

struct SourceBackupUnavailableBody: Swift.Equatable {
    let message: Swift.String?
    let backupId: Swift.String?
}

extension SourceBackupUnavailableBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
    }
}

extension FSxClientTypes {
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case pending
        case updatedOptimizing
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .completed,
                .failed,
                .inProgress,
                .pending,
                .updatedOptimizing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .updatedOptimizing: return "UPDATED_OPTIMIZING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    /// The storage type for your Amazon FSx file system.
    public enum StorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hdd
        case ssd
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageType] {
            return [
                .hdd,
                .ssd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hdd: return "HDD"
            case .ssd: return "SSD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageType(rawValue: rawValue) ?? StorageType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.StorageVirtualMachine: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case creationTime = "CreationTime"
        case endpoints = "Endpoints"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case lifecycleTransitionReason = "LifecycleTransitionReason"
        case name = "Name"
        case resourceARN = "ResourceARN"
        case rootVolumeSecurityStyle = "RootVolumeSecurityStyle"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case subtype = "Subtype"
        case tags = "Tags"
        case uuid = "UUID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryConfiguration = self.activeDirectoryConfiguration {
            try encodeContainer.encode(activeDirectoryConfiguration, forKey: .activeDirectoryConfiguration)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let endpoints = self.endpoints {
            try encodeContainer.encode(endpoints, forKey: .endpoints)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lifecycleTransitionReason = self.lifecycleTransitionReason {
            try encodeContainer.encode(lifecycleTransitionReason, forKey: .lifecycleTransitionReason)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let rootVolumeSecurityStyle = self.rootVolumeSecurityStyle {
            try encodeContainer.encode(rootVolumeSecurityStyle.rawValue, forKey: .rootVolumeSecurityStyle)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
        if let subtype = self.subtype {
            try encodeContainer.encode(subtype.rawValue, forKey: .subtype)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let uuid = self.uuid {
            try encodeContainer.encode(uuid, forKey: .uuid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmActiveDirectoryConfiguration.self, forKey: .activeDirectoryConfiguration)
        activeDirectoryConfiguration = activeDirectoryConfigurationDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoints.self, forKey: .endpoints)
        endpoints = endpointsDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let subtypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineSubtype.self, forKey: .subtype)
        subtype = subtypeDecoded
        let uuidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uuid)
        uuid = uuidDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lifecycleTransitionReasonDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LifecycleTransitionReason.self, forKey: .lifecycleTransitionReason)
        lifecycleTransitionReason = lifecycleTransitionReasonDecoded
        let rootVolumeSecurityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle.self, forKey: .rootVolumeSecurityStyle)
        rootVolumeSecurityStyle = rootVolumeSecurityStyleDecoded
    }
}

extension FSxClientTypes {
    /// Describes the Amazon FSx for NetApp ONTAP storage virtual machine (SVM) configuration.
    public struct StorageVirtualMachine: Swift.Equatable {
        /// Describes the Microsoft Active Directory configuration to which the SVM is joined, if applicable.
        public var activeDirectoryConfiguration: FSxClientTypes.SvmActiveDirectoryConfiguration?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager. They are the Iscsi, Management, Nfs, and Smb endpoints.
        public var endpoints: FSxClientTypes.SvmEndpoints?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// Describes the SVM's lifecycle status.
        ///
        /// * CREATED - The SVM is fully available for use.
        ///
        /// * CREATING - Amazon FSx is creating the new SVM.
        ///
        /// * DELETING - Amazon FSx is deleting an existing SVM.
        ///
        /// * FAILED - Amazon FSx was unable to create the SVM.
        ///
        /// * MISCONFIGURED - The SVM is in a failed but recoverable state.
        ///
        /// * PENDING - Amazon FSx has not started creating the SVM.
        public var lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle?
        /// Describes why the SVM lifecycle state changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the SVM, if provisioned.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The security style of the root volume of the SVM.
        public var rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle?
        /// The SVM's system generated unique ID.
        public var storageVirtualMachineId: Swift.String?
        /// Describes the SVM's subtype.
        public var subtype: FSxClientTypes.StorageVirtualMachineSubtype?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The SVM's UUID (universally unique identifier).
        public var uuid: Swift.String?

        public init (
            activeDirectoryConfiguration: FSxClientTypes.SvmActiveDirectoryConfiguration? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endpoints: FSxClientTypes.SvmEndpoints? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            subtype: FSxClientTypes.StorageVirtualMachineSubtype? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.activeDirectoryConfiguration = activeDirectoryConfiguration
            self.creationTime = creationTime
            self.endpoints = endpoints
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.resourceARN = resourceARN
            self.rootVolumeSecurityStyle = rootVolumeSecurityStyle
            self.storageVirtualMachineId = storageVirtualMachineId
            self.subtype = subtype
            self.tags = tags
            self.uuid = uuid
        }
    }

}

extension FSxClientTypes.StorageVirtualMachineFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for storagevirtualmachinefiltervalue0 in values {
                try valuesContainer.encode(storagevirtualmachinefiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls for Amazon FSx for NetApp ONTAP storage virtual machines (SVMs). You can use multiple filters to return results that meet all applied filter requirements.
    public struct StorageVirtualMachineFilter: Swift.Equatable {
        /// The name for this filter.
        public var name: FSxClientTypes.StorageVirtualMachineFilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init (
            name: FSxClientTypes.StorageVirtualMachineFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension FSxClientTypes {
    public enum StorageVirtualMachineFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileSystemId
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineFilterName] {
            return [
                .fileSystemId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageVirtualMachineFilterName(rawValue: rawValue) ?? StorageVirtualMachineFilterName.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum StorageVirtualMachineLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case creating
        case deleting
        case failed
        case misconfigured
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineLifecycle] {
            return [
                .created,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageVirtualMachineLifecycle(rawValue: rawValue) ?? StorageVirtualMachineLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension StorageVirtualMachineNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StorageVirtualMachineNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No FSx for ONTAP SVMs were found based upon the supplied parameters.
public struct StorageVirtualMachineNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StorageVirtualMachineNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension StorageVirtualMachineNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum StorageVirtualMachineRootVolumeSecurityStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mixed
        case ntfs
        case unix
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineRootVolumeSecurityStyle] {
            return [
                .mixed,
                .ntfs,
                .unix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .ntfs: return "NTFS"
            case .unix: return "UNIX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageVirtualMachineRootVolumeSecurityStyle(rawValue: rawValue) ?? StorageVirtualMachineRootVolumeSecurityStyle.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum StorageVirtualMachineSubtype: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `default`
        case dpDestination
        case syncDestination
        case syncSource
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineSubtype] {
            return [
                .default,
                .dpDestination,
                .syncDestination,
                .syncSource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .dpDestination: return "DP_DESTINATION"
            case .syncDestination: return "SYNC_DESTINATION"
            case .syncSource: return "SYNC_SOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageVirtualMachineSubtype(rawValue: rawValue) ?? StorageVirtualMachineSubtype.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.SvmActiveDirectoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case netBiosName = "NetBiosName"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let netBiosName = self.netBiosName {
            try encodeContainer.encode(netBiosName, forKey: .netBiosName)
        }
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let netBiosNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .netBiosName)
        netBiosName = netBiosNameDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryAttributes.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// Describes the configuration of the Microsoft Active Directory (AD) directory to which the Amazon FSx for ONTAP storage virtual machine (SVM) is joined. Pleae note, account credentials are not returned in the response payload.
    public struct SvmActiveDirectoryConfiguration: Swift.Equatable {
        /// The NetBIOS name of the Active Directory computer object that is joined to your SVM.
        public var netBiosName: Swift.String?
        /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes?

        public init (
            netBiosName: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes? = nil
        )
        {
            self.netBiosName = netBiosName
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

extension FSxClientTypes.SvmEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsName = "DNSName"
        case ipAddresses = "IpAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let ipAddresses = ipAddresses {
            var ipAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipAddresses)
            for ipaddress0 in ipAddresses {
                try ipAddressesContainer.encode(ipaddress0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let ipAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipAddresses)
        var ipAddressesDecoded0:[Swift.String]? = nil
        if let ipAddressesContainer = ipAddressesContainer {
            ipAddressesDecoded0 = [Swift.String]()
            for string0 in ipAddressesContainer {
                if let string0 = string0 {
                    ipAddressesDecoded0?.append(string0)
                }
            }
        }
        ipAddresses = ipAddressesDecoded0
    }
}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP storage virtual machine (SVM) has four endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager. They are the Iscsi, Management, Nfs, and Smb endpoints.
    public struct SvmEndpoint: Swift.Equatable {
        /// The Domain Name Service (DNS) name for the file system. You can mount your file system using its DNS name.
        public var dnsName: Swift.String?
        /// The SVM endpoint's IP addresses.
        public var ipAddresses: [Swift.String]?

        public init (
            dnsName: Swift.String? = nil,
            ipAddresses: [Swift.String]? = nil
        )
        {
            self.dnsName = dnsName
            self.ipAddresses = ipAddresses
        }
    }

}

extension FSxClientTypes.SvmEndpoints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iscsi = "Iscsi"
        case management = "Management"
        case nfs = "Nfs"
        case smb = "Smb"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iscsi = self.iscsi {
            try encodeContainer.encode(iscsi, forKey: .iscsi)
        }
        if let management = self.management {
            try encodeContainer.encode(management, forKey: .management)
        }
        if let nfs = self.nfs {
            try encodeContainer.encode(nfs, forKey: .nfs)
        }
        if let smb = self.smb {
            try encodeContainer.encode(smb, forKey: .smb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iscsiDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoint.self, forKey: .iscsi)
        iscsi = iscsiDecoded
        let managementDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoint.self, forKey: .management)
        management = managementDecoded
        let nfsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoint.self, forKey: .nfs)
        nfs = nfsDecoded
        let smbDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoint.self, forKey: .smb)
        smb = smbDecoded
    }
}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP storage virtual machine (SVM) has the following endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager.
    public struct SvmEndpoints: Swift.Equatable {
        /// An endpoint for connecting using the Internet Small Computer Systems Interface (iSCSI) protocol.
        public var iscsi: FSxClientTypes.SvmEndpoint?
        /// An endpoint for managing SVMs using the NetApp ONTAP CLI, NetApp ONTAP API, or NetApp CloudManager.
        public var management: FSxClientTypes.SvmEndpoint?
        /// An endpoint for connecting using the Network File System (NFS) protocol.
        public var nfs: FSxClientTypes.SvmEndpoint?
        /// An endpoint for connecting using the Server Message Block (SMB) protocol.
        public var smb: FSxClientTypes.SvmEndpoint?

        public init (
            iscsi: FSxClientTypes.SvmEndpoint? = nil,
            management: FSxClientTypes.SvmEndpoint? = nil,
            nfs: FSxClientTypes.SvmEndpoint? = nil,
            smb: FSxClientTypes.SvmEndpoint? = nil
        )
        {
            self.iscsi = iscsi
            self.management = management
            self.nfs = nfs
            self.smb = smb
        }
    }

}

extension FSxClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension FSxClientTypes {
    /// Specifies a key-value pair for a resource tag.
    public struct Tag: Swift.Equatable {
        /// A value that specifies the TagKey, the name of the tag. Tag keys must be unique for the resource to which they are attached.
        /// This member is required.
        public var key: Swift.String?
        /// A value that specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of finances : April and also of payroll : April.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the TagResource operation.
public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon FSx resource that you want to tag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tags for the resource. If a tag with a given key already exists, the value is replaced by the one specified in this parameter.
    /// This member is required.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [FSxClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotServiceResourceError" : self = .notServiceResourceError(try NotServiceResourceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceDoesNotSupportTagging" : self = .resourceDoesNotSupportTagging(try ResourceDoesNotSupportTagging(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case notServiceResourceError(NotServiceResourceError)
    case resourceDoesNotSupportTagging(ResourceDoesNotSupportTagging)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response object for the TagResource operation.
public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension FSxClientTypes.TieringPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coolingPeriod = "CoolingPeriod"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coolingPeriod = self.coolingPeriod {
            try encodeContainer.encode(coolingPeriod, forKey: .coolingPeriod)
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coolingPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .coolingPeriod)
        coolingPeriod = coolingPeriodDecoded
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.TieringPolicyName.self, forKey: .name)
        name = nameDecoded
    }
}

extension FSxClientTypes {
    /// Describes the data tiering policy for an ONTAP volume. When enabled, Amazon FSx for ONTAP's intelligent tiering automatically transitions a volume's data between the file system's primary storage and capacity pool storage based on your access patterns. Valid tiering policies are the following:
    ///
    /// * SNAPSHOT_ONLY - (Default value) moves cold snapshots to the capacity pool storage tier.
    ///
    ///
    ///
    ///
    /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
    ///
    ///
    ///
    ///
    /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
    ///
    ///
    ///
    ///
    /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
    public struct TieringPolicy: Swift.Equatable {
        /// Specifies the number of days that user data in a volume must remain inactive before it is considered "cold" and moved to the capacity pool. Used with the AUTO and SNAPSHOT_ONLY tiering policies. Enter a whole number between 2 and 183. Default values are 31 days for AUTO and 2 days for SNAPSHOT_ONLY.
        public var coolingPeriod: Swift.Int?
        /// Specifies the tiering policy used to transition data. Default value is SNAPSHOT_ONLY.
        ///
        /// * SNAPSHOT_ONLY - moves cold snapshots to the capacity pool storage tier.
        ///
        /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
        ///
        /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
        ///
        /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
        public var name: FSxClientTypes.TieringPolicyName?

        public init (
            coolingPeriod: Swift.Int? = nil,
            name: FSxClientTypes.TieringPolicyName? = nil
        )
        {
            self.coolingPeriod = coolingPeriod
            self.name = name
        }
    }

}

extension FSxClientTypes {
    public enum TieringPolicyName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case auto
        case `none`
        case snapshotOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [TieringPolicyName] {
            return [
                .all,
                .auto,
                .none,
                .snapshotOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .auto: return "AUTO"
            case .none: return "NONE"
            case .snapshotOnly: return "SNAPSHOT_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TieringPolicyName(rawValue: rawValue) ?? TieringPolicyName.sdkUnknown(rawValue)
        }
    }
}

extension UnsupportedOperation {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedOperationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation is not supported for this resource or API.
public struct UnsupportedOperation: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedOperationBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOperationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for UntagResource action.
public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the Amazon FSx resource to untag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of keys of tags on the resource to untag. In case the tag key doesn't exist, the call will still succeed to be idempotent.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotServiceResourceError" : self = .notServiceResourceError(try NotServiceResourceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceDoesNotSupportTagging" : self = .resourceDoesNotSupportTagging(try ResourceDoesNotSupportTagging(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case notServiceResourceError(NotServiceResourceError)
    case resourceDoesNotSupportTagging(ResourceDoesNotSupportTagging)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response object for UntagResource action.
public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDataRepositoryAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case clientRequestToken = "ClientRequestToken"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case s3 = "S3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
    }
}

extension UpdateDataRepositoryAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDataRepositoryAssociationInput: Swift.Equatable {
    /// The ID of the data repository association that you are updating.
    /// This member is required.
    public var associationId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
    public var importedFileChunkSize: Swift.Int?
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    public var s3: FSxClientTypes.S3DataRepositoryConfiguration?

    public init (
        associationId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        importedFileChunkSize: Swift.Int? = nil,
        s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil
    )
    {
        self.associationId = associationId
        self.clientRequestToken = clientRequestToken
        self.importedFileChunkSize = importedFileChunkSize
        self.s3 = s3
    }
}

struct UpdateDataRepositoryAssociationInputBody: Swift.Equatable {
    let associationId: Swift.String?
    let clientRequestToken: Swift.String?
    let importedFileChunkSize: Swift.Int?
    let s3: FSxClientTypes.S3DataRepositoryConfiguration?
}

extension UpdateDataRepositoryAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case clientRequestToken = "ClientRequestToken"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case s3 = "S3"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let s3Decoded = try containerValues.decodeIfPresent(FSxClientTypes.S3DataRepositoryConfiguration.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension UpdateDataRepositoryAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDataRepositoryAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DataRepositoryAssociationNotFound" : self = .dataRepositoryAssociationNotFound(try DataRepositoryAssociationNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDataRepositoryAssociationOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case dataRepositoryAssociationNotFound(DataRepositoryAssociationNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDataRepositoryAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDataRepositoryAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.association = output.association
        } else {
            self.association = nil
        }
    }
}

public struct UpdateDataRepositoryAssociationOutputResponse: Swift.Equatable {
    /// The response object returned after the data repository association is updated.
    public var association: FSxClientTypes.DataRepositoryAssociation?

    public init (
        association: FSxClientTypes.DataRepositoryAssociation? = nil
    )
    {
        self.association = association
    }
}

struct UpdateDataRepositoryAssociationOutputResponseBody: Swift.Equatable {
    let association: FSxClientTypes.DataRepositoryAssociation?
}

extension UpdateDataRepositoryAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case association = "Association"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryAssociation.self, forKey: .association)
        association = associationDecoded
    }
}

extension UpdateFileCacheInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileCacheId = "FileCacheId"
        case lustreConfiguration = "LustreConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
    }
}

extension UpdateFileCacheInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFileCacheInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the cache that you are updating.
    /// This member is required.
    public var fileCacheId: Swift.String?
    /// The configuration updates for an Amazon File Cache resource.
    public var lustreConfiguration: FSxClientTypes.UpdateFileCacheLustreConfiguration?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileCacheId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.UpdateFileCacheLustreConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileCacheId = fileCacheId
        self.lustreConfiguration = lustreConfiguration
    }
}

struct UpdateFileCacheInputBody: Swift.Equatable {
    let fileCacheId: Swift.String?
    let clientRequestToken: Swift.String?
    let lustreConfiguration: FSxClientTypes.UpdateFileCacheLustreConfiguration?
}

extension UpdateFileCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileCacheId = "FileCacheId"
        case lustreConfiguration = "LustreConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateFileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
    }
}

extension FSxClientTypes.UpdateFileCacheLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
    }
}

extension FSxClientTypes {
    /// The configuration update for an Amazon File Cache resource.
    public struct UpdateFileCacheLustreConfiguration: Swift.Equatable {
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension UpdateFileCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFileCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileCacheNotFound" : self = .fileCacheNotFound(try FileCacheNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingFileCacheConfiguration" : self = .missingFileCacheConfiguration(try MissingFileCacheConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFileCacheOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileCacheNotFound(FileCacheNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case missingFileCacheConfiguration(MissingFileCacheConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFileCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFileCacheOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileCache = output.fileCache
        } else {
            self.fileCache = nil
        }
    }
}

public struct UpdateFileCacheOutputResponse: Swift.Equatable {
    /// A description of the cache that was updated.
    public var fileCache: FSxClientTypes.FileCache?

    public init (
        fileCache: FSxClientTypes.FileCache? = nil
    )
    {
        self.fileCache = fileCache
    }
}

struct UpdateFileCacheOutputResponseBody: Swift.Equatable {
    let fileCache: FSxClientTypes.FileCache?
}

extension UpdateFileCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileCache = "FileCache"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCacheDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCache.self, forKey: .fileCache)
        fileCache = fileCacheDecoded
    }
}

extension UpdateFileSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case lustreConfiguration = "LustreConfiguration"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case storageCapacity = "StorageCapacity"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }
}

extension UpdateFileSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request object for the UpdateFileSystem operation.
public struct UpdateFileSystemInput: Swift.Equatable {
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent updates. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system that you are updating.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The configuration object for Amazon FSx for Lustre file systems used in the UpdateFileSystem operation.
    public var lustreConfiguration: FSxClientTypes.UpdateFileSystemLustreConfiguration?
    /// The configuration updates for an Amazon FSx for NetApp ONTAP file system.
    public var ontapConfiguration: FSxClientTypes.UpdateFileSystemOntapConfiguration?
    /// The configuration updates for an Amazon FSx for OpenZFS file system.
    public var openZFSConfiguration: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration?
    /// Use this parameter to increase the storage capacity of an Amazon FSx for Windows File Server, Amazon FSx for Lustre, or Amazon FSx for NetApp ONTAP file system. Specifies the storage capacity target value, in GiB, to increase the storage capacity for the file system that you're updating. You can't make a storage capacity increase request if there is an existing storage capacity increase request in progress. For Windows file systems, the storage capacity target value must be at least 10 percent greater than the current storage capacity value. To increase storage capacity, the file system must have at least 16 MBps of throughput capacity. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSx for Windows File Server User Guide. For Lustre file systems, the storage capacity target value can be the following:
    ///
    /// * For SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 SSD deployment types, valid values are in multiples of 2400 GiB. The value must be greater than the current storage capacity.
    ///
    /// * For PERSISTENT HDD file systems, valid values are multiples of 6000 GiB for 12-MBps throughput per TiB file systems and multiples of 1800 GiB for 40-MBps throughput per TiB file systems. The values must be greater than the current storage capacity.
    ///
    /// * For SCRATCH_1 file systems, you can't increase the storage capacity.
    ///
    ///
    /// For more information, see [Managing storage and throughput capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the Amazon FSx for Lustre User Guide. For ONTAP file systems, the storage capacity target value must be at least 10 percent greater than the current storage capacity value. For more information, see [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
    public var storageCapacity: Swift.Int?
    /// The configuration updates for an Amazon FSx for Windows File Server file system.
    public var windowsConfiguration: FSxClientTypes.UpdateFileSystemWindowsConfiguration?

    public init (
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.UpdateFileSystemLustreConfiguration? = nil,
        ontapConfiguration: FSxClientTypes.UpdateFileSystemOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration? = nil,
        storageCapacity: Swift.Int? = nil,
        windowsConfiguration: FSxClientTypes.UpdateFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.lustreConfiguration = lustreConfiguration
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.storageCapacity = storageCapacity
        self.windowsConfiguration = windowsConfiguration
    }
}

struct UpdateFileSystemInputBody: Swift.Equatable {
    let fileSystemId: Swift.String?
    let clientRequestToken: Swift.String?
    let storageCapacity: Swift.Int?
    let windowsConfiguration: FSxClientTypes.UpdateFileSystemWindowsConfiguration?
    let lustreConfiguration: FSxClientTypes.UpdateFileSystemLustreConfiguration?
    let ontapConfiguration: FSxClientTypes.UpdateFileSystemOntapConfiguration?
    let openZFSConfiguration: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration?
}

extension UpdateFileSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case lustreConfiguration = "LustreConfiguration"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case storageCapacity = "StorageCapacity"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateFileSystemOntapConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateFileSystemOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes.UpdateFileSystemLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoImportPolicy = "AutoImportPolicy"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case dataCompressionType = "DataCompressionType"
        case logConfiguration = "LogConfiguration"
        case rootSquashConfiguration = "RootSquashConfiguration"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoImportPolicy = self.autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy.rawValue, forKey: .autoImportPolicy)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let rootSquashConfiguration = self.rootSquashConfiguration {
            try encodeContainer.encode(rootSquashConfiguration, forKey: .rootSquashConfiguration)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoImportPolicyType.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreLogCreateConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let rootSquashConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreRootSquashConfiguration.self, forKey: .rootSquashConfiguration)
        rootSquashConfiguration = rootSquashConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration object for Amazon FSx for Lustre file systems used in the UpdateFileSystem operation.
    public struct UpdateFileSystemLustreConfiguration: Swift.Equatable {
        /// (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        ///
        ///
        /// The AutoImportPolicy parameter is not supported for Lustre file systems with the Persistent_2 deployment type. Instead, use to update a data repository association on your Persistent_2 file system.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Sets the data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - Data compression is turned off for the file system.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// If you don't use DataCompressionType, the file system retains its current data compression configuration. For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html).
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogCreateConfiguration?
        /// The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// (Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            logConfiguration: FSxClientTypes.LustreLogCreateConfiguration? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.logConfiguration = logConfiguration
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.UpdateFileSystemOntapConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addRouteTableIds = "AddRouteTableIds"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case fsxAdminPassword = "FsxAdminPassword"
        case removeRouteTableIds = "RemoveRouteTableIds"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addRouteTableIds = addRouteTableIds {
            var addRouteTableIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addRouteTableIds)
            for routetableid0 in addRouteTableIds {
                try addRouteTableIdsContainer.encode(routetableid0)
            }
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let fsxAdminPassword = self.fsxAdminPassword {
            try encodeContainer.encode(fsxAdminPassword, forKey: .fsxAdminPassword)
        }
        if let removeRouteTableIds = removeRouteTableIds {
            var removeRouteTableIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeRouteTableIds)
            for routetableid0 in removeRouteTableIds {
                try removeRouteTableIdsContainer.encode(routetableid0)
            }
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let fsxAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxAdminPassword)
        fsxAdminPassword = fsxAdminPasswordDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let addRouteTableIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addRouteTableIds)
        var addRouteTableIdsDecoded0:[Swift.String]? = nil
        if let addRouteTableIdsContainer = addRouteTableIdsContainer {
            addRouteTableIdsDecoded0 = [Swift.String]()
            for string0 in addRouteTableIdsContainer {
                if let string0 = string0 {
                    addRouteTableIdsDecoded0?.append(string0)
                }
            }
        }
        addRouteTableIds = addRouteTableIdsDecoded0
        let removeRouteTableIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .removeRouteTableIds)
        var removeRouteTableIdsDecoded0:[Swift.String]? = nil
        if let removeRouteTableIdsContainer = removeRouteTableIdsContainer {
            removeRouteTableIdsDecoded0 = [Swift.String]()
            for string0 in removeRouteTableIdsContainer {
                if let string0 = string0 {
                    removeRouteTableIdsDecoded0?.append(string0)
                }
            }
        }
        removeRouteTableIds = removeRouteTableIdsDecoded0
    }
}

extension FSxClientTypes.UpdateFileSystemOntapConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateFileSystemOntapConfiguration(addRouteTableIds: \(Swift.String(describing: addRouteTableIds)), automaticBackupRetentionDays: \(Swift.String(describing: automaticBackupRetentionDays)), dailyAutomaticBackupStartTime: \(Swift.String(describing: dailyAutomaticBackupStartTime)), diskIopsConfiguration: \(Swift.String(describing: diskIopsConfiguration)), removeRouteTableIds: \(Swift.String(describing: removeRouteTableIds)), throughputCapacity: \(Swift.String(describing: throughputCapacity)), weeklyMaintenanceStartTime: \(Swift.String(describing: weeklyMaintenanceStartTime)), fsxAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration updates for an Amazon FSx for NetApp ONTAP file system.
    public struct UpdateFileSystemOntapConfiguration: Swift.Equatable {
        /// (Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.
        public var addRouteTableIds: [Swift.String]?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (AUTOMATIC or USER_PROVISIONED), and in the case of USER_PROVISIONED IOPS, the total number of SSD IOPS provisioned.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The ONTAP administrative password for the fsxadmin user.
        public var fsxAdminPassword: Swift.String?
        /// (Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.
        public var removeRouteTableIds: [Swift.String]?
        /// Specifies the throughput of an FSx for NetApp ONTAP file system, measured in megabytes per second (MBps). Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            addRouteTableIds: [Swift.String]? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            fsxAdminPassword: Swift.String? = nil,
            removeRouteTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.addRouteTableIds = addRouteTableIds
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.diskIopsConfiguration = diskIopsConfiguration
            self.fsxAdminPassword = fsxAdminPassword
            self.removeRouteTableIds = removeRouteTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.UpdateFileSystemOpenZFSConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case copyTagsToVolumes = "CopyTagsToVolumes"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let copyTagsToVolumes = self.copyTagsToVolumes {
            try encodeContainer.encode(copyTagsToVolumes, forKey: .copyTagsToVolumes)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let copyTagsToVolumesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToVolumes)
        copyTagsToVolumes = copyTagsToVolumesDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration updates for an Amazon FSx for OpenZFS file system.
    public struct UpdateFileSystemOpenZFSConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second  (MB/s). Valid values depend on the DeploymentType you choose, as follows:
        ///
        /// * For SINGLE_AZ_1, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.
        ///
        /// * For SINGLE_AZ_2, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.diskIopsConfiguration = diskIopsConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension UpdateFileSystemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFileSystemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileSystemNotFound" : self = .fileSystemNotFound(try FileSystemNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNetworkSettings" : self = .invalidNetworkSettings(try InvalidNetworkSettings(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingFileSystemConfiguration" : self = .missingFileSystemConfiguration(try MissingFileSystemConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceeded" : self = .serviceLimitExceeded(try ServiceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFileSystemOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case fileSystemNotFound(FileSystemNotFound)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case invalidNetworkSettings(InvalidNetworkSettings)
    case missingFileSystemConfiguration(MissingFileSystemConfiguration)
    case serviceLimitExceeded(ServiceLimitExceeded)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFileSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFileSystemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileSystem = output.fileSystem
        } else {
            self.fileSystem = nil
        }
    }
}

/// The response object for the UpdateFileSystem operation.
public struct UpdateFileSystemOutputResponse: Swift.Equatable {
    /// A description of the file system that was updated.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init (
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

struct UpdateFileSystemOutputResponseBody: Swift.Equatable {
    let fileSystem: FSxClientTypes.FileSystem?
}

extension UpdateFileSystemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystem = "FileSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
    }
}

extension FSxClientTypes.UpdateFileSystemWindowsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditLogConfiguration = "AuditLogConfiguration"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditLogConfiguration = self.auditLogConfiguration {
            try encodeContainer.encode(auditLogConfiguration, forKey: .auditLogConfiguration)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
        let auditLogConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAuditLogCreateConfiguration.self, forKey: .auditLogConfiguration)
        auditLogConfiguration = auditLogConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// Updates the configuration for an existing Amazon FSx for Windows File Server file system. Amazon FSx only overwrites existing properties with non-null values provided in the request.
    public struct UpdateFileSystemWindowsConfiguration: Swift.Equatable {
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system..
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration?
        /// The number of days to retain automatic daily backups. Setting this to zero (0) disables automatic daily backups. You can retain automatic daily backups for a maximum of 90 days. For more information, see [Working with Automatic Daily Backups](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html#automatic-backups).
        public var automaticBackupRetentionDays: Swift.Int?
        /// The preferred time to start the daily automatic backup, in the UTC time zone, for example, 02:00
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The configuration Amazon FSx uses to join the Windows File Server instance to the self-managed Microsoft AD directory. You cannot make a self-managed Microsoft AD update request if there is an existing self-managed Microsoft AD update request in progress.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates?
        /// Sets the target value for a file system's throughput capacity, in MB/s, that you are updating the file system to. Valid values are 8, 16, 32, 64, 128, 256, 512, 1024, 2048. You cannot make a throughput capacity update request if there is an existing throughput capacity update request in progress. For more information, see [Managing Throughput Capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-throughput-capacity.html).
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. Where d is the weekday number, from 1 through 7, with 1 = Monday and 7 = Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.UpdateOntapVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToBackups = "CopyTagsToBackups"
        case junctionPath = "JunctionPath"
        case securityStyle = "SecurityStyle"
        case sizeInMegabytes = "SizeInMegabytes"
        case snapshotPolicy = "SnapshotPolicy"
        case storageEfficiencyEnabled = "StorageEfficiencyEnabled"
        case tieringPolicy = "TieringPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let junctionPath = self.junctionPath {
            try encodeContainer.encode(junctionPath, forKey: .junctionPath)
        }
        if let securityStyle = self.securityStyle {
            try encodeContainer.encode(securityStyle.rawValue, forKey: .securityStyle)
        }
        if let sizeInMegabytes = self.sizeInMegabytes {
            try encodeContainer.encode(sizeInMegabytes, forKey: .sizeInMegabytes)
        }
        if let snapshotPolicy = self.snapshotPolicy {
            try encodeContainer.encode(snapshotPolicy, forKey: .snapshotPolicy)
        }
        if let storageEfficiencyEnabled = self.storageEfficiencyEnabled {
            try encodeContainer.encode(storageEfficiencyEnabled, forKey: .storageEfficiencyEnabled)
        }
        if let tieringPolicy = self.tieringPolicy {
            try encodeContainer.encode(tieringPolicy, forKey: .tieringPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let junctionPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .junctionPath)
        junctionPath = junctionPathDecoded
        let securityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SecurityStyle.self, forKey: .securityStyle)
        securityStyle = securityStyleDecoded
        let sizeInMegabytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMegabytes)
        sizeInMegabytes = sizeInMegabytesDecoded
        let storageEfficiencyEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEfficiencyEnabled)
        storageEfficiencyEnabled = storageEfficiencyEnabledDecoded
        let tieringPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.TieringPolicy.self, forKey: .tieringPolicy)
        tieringPolicy = tieringPolicyDecoded
        let snapshotPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotPolicy)
        snapshotPolicy = snapshotPolicyDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
    }
}

extension FSxClientTypes {
    /// Used to specify changes to the ONTAP configuration for the volume you are updating.
    public struct UpdateOntapVolumeConfiguration: Swift.Equatable {
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the location in the SVM's namespace where the volume is mounted. The JunctionPath must have a leading forward slash, such as /vol3.
        public var junctionPath: Swift.String?
        /// The security style for the volume, which can be UNIX. NTFS, or MIXED.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// Specifies the size of the volume in megabytes.
        public var sizeInMegabytes: Swift.Int?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// Default is false. Set to true to enable the deduplication, compression, and compaction storage efficiency features on the volume.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// Update the volume's data tiering policy.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?

        public init (
            copyTagsToBackups: Swift.Bool? = nil,
            junctionPath: Swift.String? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil
        )
        {
            self.copyTagsToBackups = copyTagsToBackups
            self.junctionPath = junctionPath
            self.securityStyle = securityStyle
            self.sizeInMegabytes = sizeInMegabytes
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.tieringPolicy = tieringPolicy
        }
    }

}

extension FSxClientTypes.UpdateOpenZFSVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCompressionType = "DataCompressionType"
        case nfsExports = "NfsExports"
        case readOnly = "ReadOnly"
        case recordSizeKiB = "RecordSizeKiB"
        case storageCapacityQuotaGiB = "StorageCapacityQuotaGiB"
        case storageCapacityReservationGiB = "StorageCapacityReservationGiB"
        case userAndGroupQuotas = "UserAndGroupQuotas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let nfsExports = nfsExports {
            var nfsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nfsExports)
            for openzfsnfsexport0 in nfsExports {
                try nfsExportsContainer.encode(openzfsnfsexport0)
            }
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let recordSizeKiB = self.recordSizeKiB {
            try encodeContainer.encode(recordSizeKiB, forKey: .recordSizeKiB)
        }
        if let storageCapacityQuotaGiB = self.storageCapacityQuotaGiB {
            try encodeContainer.encode(storageCapacityQuotaGiB, forKey: .storageCapacityQuotaGiB)
        }
        if let storageCapacityReservationGiB = self.storageCapacityReservationGiB {
            try encodeContainer.encode(storageCapacityReservationGiB, forKey: .storageCapacityReservationGiB)
        }
        if let userAndGroupQuotas = userAndGroupQuotas {
            var userAndGroupQuotasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAndGroupQuotas)
            for openzfsuserorgroupquota0 in userAndGroupQuotas {
                try userAndGroupQuotasContainer.encode(openzfsuserorgroupquota0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageCapacityReservationGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityReservationGiB)
        storageCapacityReservationGiB = storageCapacityReservationGiBDecoded
        let storageCapacityQuotaGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityQuotaGiB)
        storageCapacityQuotaGiB = storageCapacityQuotaGiBDecoded
        let recordSizeKiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recordSizeKiB)
        recordSizeKiB = recordSizeKiBDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let nfsExportsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSNfsExport?].self, forKey: .nfsExports)
        var nfsExportsDecoded0:[FSxClientTypes.OpenZFSNfsExport]? = nil
        if let nfsExportsContainer = nfsExportsContainer {
            nfsExportsDecoded0 = [FSxClientTypes.OpenZFSNfsExport]()
            for structure0 in nfsExportsContainer {
                if let structure0 = structure0 {
                    nfsExportsDecoded0?.append(structure0)
                }
            }
        }
        nfsExports = nfsExportsDecoded0
        let userAndGroupQuotasContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSUserOrGroupQuota?].self, forKey: .userAndGroupQuotas)
        var userAndGroupQuotasDecoded0:[FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        if let userAndGroupQuotasContainer = userAndGroupQuotasContainer {
            userAndGroupQuotasDecoded0 = [FSxClientTypes.OpenZFSUserOrGroupQuota]()
            for structure0 in userAndGroupQuotasContainer {
                if let structure0 = structure0 {
                    userAndGroupQuotasDecoded0?.append(structure0)
                }
            }
        }
        userAndGroupQuotas = userAndGroupQuotasDecoded0
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
    }
}

extension FSxClientTypes {
    /// Used to specify changes to the OpenZFS configuration for the volume that you are updating.
    public struct UpdateOpenZFSVolumeConfiguration: Swift.Equatable {
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of -1 to unset a volume's storage capacity quota.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of -1 to unset a volume's storage capacity reservation.
        public var storageCapacityReservationGiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init (
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

extension UpdateSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case snapshotId = "SnapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
    }
}

extension UpdateSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSnapshotInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the snapshot to update.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the snapshot that you want to update, in the format fsvolsnap-0123456789abcdef0.
    /// This member is required.
    public var snapshotId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.snapshotId = snapshotId
    }
}

struct UpdateSnapshotInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let name: Swift.String?
    let snapshotId: Swift.String?
}

extension UpdateSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

extension UpdateSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFound" : self = .snapshotNotFound(try SnapshotNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSnapshotOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case internalServerError(InternalServerError)
    case snapshotNotFound(SnapshotNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct UpdateSnapshotOutputResponse: Swift.Equatable {
    /// Returned after a successful UpdateSnapshot operation, describing the snapshot that you updated.
    public var snapshot: FSxClientTypes.Snapshot?

    public init (
        snapshot: FSxClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct UpdateSnapshotOutputResponseBody: Swift.Equatable {
    let snapshot: FSxClientTypes.Snapshot?
}

extension UpdateSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

extension UpdateStorageVirtualMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStorageVirtualMachineInput(activeDirectoryConfiguration: \(Swift.String(describing: activeDirectoryConfiguration)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), storageVirtualMachineId: \(Swift.String(describing: storageVirtualMachineId)), svmAdminPassword: \"CONTENT_REDACTED\")"}
}

extension UpdateStorageVirtualMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case clientRequestToken = "ClientRequestToken"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case svmAdminPassword = "SvmAdminPassword"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryConfiguration = self.activeDirectoryConfiguration {
            try encodeContainer.encode(activeDirectoryConfiguration, forKey: .activeDirectoryConfiguration)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
        if let svmAdminPassword = self.svmAdminPassword {
            try encodeContainer.encode(svmAdminPassword, forKey: .svmAdminPassword)
        }
    }
}

extension UpdateStorageVirtualMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStorageVirtualMachineInput: Swift.Equatable {
    /// Updates the Microsoft Active Directory (AD) configuration for an SVM that is joined to an AD.
    public var activeDirectoryConfiguration: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration?
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the SVM that you want to update, in the format svm-0123456789abcdef0.
    /// This member is required.
    public var storageVirtualMachineId: Swift.String?
    /// Enter a new SvmAdminPassword if you are updating it.
    public var svmAdminPassword: Swift.String?

    public init (
        activeDirectoryConfiguration: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration? = nil,
        clientRequestToken: Swift.String? = nil,
        storageVirtualMachineId: Swift.String? = nil,
        svmAdminPassword: Swift.String? = nil
    )
    {
        self.activeDirectoryConfiguration = activeDirectoryConfiguration
        self.clientRequestToken = clientRequestToken
        self.storageVirtualMachineId = storageVirtualMachineId
        self.svmAdminPassword = svmAdminPassword
    }
}

struct UpdateStorageVirtualMachineInputBody: Swift.Equatable {
    let activeDirectoryConfiguration: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration?
    let clientRequestToken: Swift.String?
    let storageVirtualMachineId: Swift.String?
    let svmAdminPassword: Swift.String?
}

extension UpdateStorageVirtualMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case clientRequestToken = "ClientRequestToken"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case svmAdminPassword = "SvmAdminPassword"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateSvmActiveDirectoryConfiguration.self, forKey: .activeDirectoryConfiguration)
        activeDirectoryConfiguration = activeDirectoryConfigurationDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let svmAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .svmAdminPassword)
        svmAdminPassword = svmAdminPasswordDecoded
    }
}

extension UpdateStorageVirtualMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStorageVirtualMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StorageVirtualMachineNotFound" : self = .storageVirtualMachineNotFound(try StorageVirtualMachineNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperation(try UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStorageVirtualMachineOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case storageVirtualMachineNotFound(StorageVirtualMachineNotFound)
    case unsupportedOperation(UnsupportedOperation)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStorageVirtualMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateStorageVirtualMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storageVirtualMachine = output.storageVirtualMachine
        } else {
            self.storageVirtualMachine = nil
        }
    }
}

public struct UpdateStorageVirtualMachineOutputResponse: Swift.Equatable {
    /// Describes the Amazon FSx for NetApp ONTAP storage virtual machine (SVM) configuration.
    public var storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?

    public init (
        storageVirtualMachine: FSxClientTypes.StorageVirtualMachine? = nil
    )
    {
        self.storageVirtualMachine = storageVirtualMachine
    }
}

struct UpdateStorageVirtualMachineOutputResponseBody: Swift.Equatable {
    let storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?
}

extension UpdateStorageVirtualMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageVirtualMachine = "StorageVirtualMachine"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageVirtualMachineDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachine.self, forKey: .storageVirtualMachine)
        storageVirtualMachine = storageVirtualMachineDecoded
    }
}

extension FSxClientTypes.UpdateSvmActiveDirectoryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// Updates the Microsoft Active Directory (AD) configuration of an SVM joined to an AD. Please note, account credentials are not returned in the response payload.
    public struct UpdateSvmActiveDirectoryConfiguration: Swift.Equatable {
        /// The configuration that Amazon FSx uses to join the Windows File Server instance to a self-managed Microsoft Active Directory (AD) directory.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates?

        public init (
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates? = nil
        )
        {
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

extension UpdateVolumeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }
}

extension UpdateVolumeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateVolumeInput: Swift.Equatable {
    /// (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the OpenZFS volume. OpenZFS root volumes are automatically named FSX. Child volume names must be unique among their parent volume's children. The name of the volume is part of the mount string for the OpenZFS volume.
    public var name: Swift.String?
    /// The configuration of the ONTAP volume that you are updating.
    public var ontapConfiguration: FSxClientTypes.UpdateOntapVolumeConfiguration?
    /// The configuration of the OpenZFS volume that you are updating.
    public var openZFSConfiguration: FSxClientTypes.UpdateOpenZFSVolumeConfiguration?
    /// The ID of the volume that you want to update, in the format fsvol-0123456789abcdef0.
    /// This member is required.
    public var volumeId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.UpdateOntapVolumeConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.UpdateOpenZFSVolumeConfiguration? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.volumeId = volumeId
    }
}

struct UpdateVolumeInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeId: Swift.String?
    let ontapConfiguration: FSxClientTypes.UpdateOntapVolumeConfiguration?
    let name: Swift.String?
    let openZFSConfiguration: FSxClientTypes.UpdateOpenZFSVolumeConfiguration?
}

extension UpdateVolumeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateOntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.UpdateOpenZFSVolumeConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension UpdateVolumeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVolumeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequest" : self = .badRequest(try BadRequest(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatibleParameterError" : self = .incompatibleParameterError(try IncompatibleParameterError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingVolumeConfiguration" : self = .missingVolumeConfiguration(try MissingVolumeConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VolumeNotFound" : self = .volumeNotFound(try VolumeNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateVolumeOutputError: Swift.Error, Swift.Equatable {
    case badRequest(BadRequest)
    case incompatibleParameterError(IncompatibleParameterError)
    case internalServerError(InternalServerError)
    case missingVolumeConfiguration(MissingVolumeConfiguration)
    case volumeNotFound(VolumeNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVolumeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateVolumeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.volume = output.volume
        } else {
            self.volume = nil
        }
    }
}

public struct UpdateVolumeOutputResponse: Swift.Equatable {
    /// A description of the volume just updated. Returned after a successful UpdateVolume API operation.
    public var volume: FSxClientTypes.Volume?

    public init (
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

struct UpdateVolumeOutputResponseBody: Swift.Equatable {
    let volume: FSxClientTypes.Volume?
}

extension UpdateVolumeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volume = "Volume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .volume)
        volume = volumeDecoded
    }
}

extension FSxClientTypes.Volume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case creationTime = "CreationTime"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case lifecycleTransitionReason = "LifecycleTransitionReason"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case resourceARN = "ResourceARN"
        case tags = "Tags"
        case volumeId = "VolumeId"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActions = administrativeActions {
            var administrativeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .administrativeActions)
            for administrativeaction0 in administrativeActions {
                try administrativeActionsContainer.encode(administrativeaction0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lifecycleTransitionReason = self.lifecycleTransitionReason {
            try encodeContainer.encode(lifecycleTransitionReason, forKey: .lifecycleTransitionReason)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let lifecycleTransitionReasonDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LifecycleTransitionReason.self, forKey: .lifecycleTransitionReason)
        lifecycleTransitionReason = lifecycleTransitionReasonDecoded
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSVolumeConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
    public struct Volume: Swift.Equatable {
        /// A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the UpdateVolume action.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// The lifecycle status of the volume.
        ///
        /// * AVAILABLE - The volume is fully available for use.
        ///
        /// * CREATED - The volume has been created.
        ///
        /// * CREATING - Amazon FSx is creating the new volume.
        ///
        /// * DELETING - Amazon FSx is deleting an existing volume.
        ///
        /// * FAILED - Amazon FSx was unable to create the volume.
        ///
        /// * MISCONFIGURED - The volume is in a failed but recoverable state.
        ///
        /// * PENDING - Amazon FSx hasn't started creating the volume.
        public var lifecycle: FSxClientTypes.VolumeLifecycle?
        /// The reason why the volume lifecycle status changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the volume.
        public var name: Swift.String?
        /// The configuration of an Amazon FSx for NetApp ONTAP volume.
        public var ontapConfiguration: FSxClientTypes.OntapVolumeConfiguration?
        /// The configuration of an Amazon FSx for OpenZFS volume.
        public var openZFSConfiguration: FSxClientTypes.OpenZFSVolumeConfiguration?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The system-generated, unique ID of the volume.
        public var volumeId: Swift.String?
        /// The type of the volume.
        public var volumeType: FSxClientTypes.VolumeType?

        public init (
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            ontapConfiguration: FSxClientTypes.OntapVolumeConfiguration? = nil,
            openZFSConfiguration: FSxClientTypes.OpenZFSVolumeConfiguration? = nil,
            resourceARN: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            volumeId: Swift.String? = nil,
            volumeType: FSxClientTypes.VolumeType? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.ontapConfiguration = ontapConfiguration
            self.openZFSConfiguration = openZFSConfiguration
            self.resourceARN = resourceARN
            self.tags = tags
            self.volumeId = volumeId
            self.volumeType = volumeType
        }
    }

}

extension FSxClientTypes.VolumeFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for volumefiltervalue0 in values {
                try valuesContainer.encode(volumefiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls for Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volumes. You can use multiple filters to return results that meet all applied filter requirements.
    public struct VolumeFilter: Swift.Equatable {
        /// The name for this filter.
        public var name: FSxClientTypes.VolumeFilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init (
            name: FSxClientTypes.VolumeFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension FSxClientTypes {
    public enum VolumeFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fileSystemId
        case storageVirtualMachineId
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeFilterName] {
            return [
                .fileSystemId,
                .storageVirtualMachineId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case .storageVirtualMachineId: return "storage-virtual-machine-id"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeFilterName(rawValue: rawValue) ?? VolumeFilterName.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum VolumeLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case created
        case creating
        case deleting
        case failed
        case misconfigured
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeLifecycle] {
            return [
                .available,
                .created,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeLifecycle(rawValue: rawValue) ?? VolumeLifecycle.sdkUnknown(rawValue)
        }
    }
}

extension VolumeNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VolumeNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No Amazon FSx volumes were found based upon the supplied parameters.
public struct VolumeNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A detailed error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VolumeNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension VolumeNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FSxClientTypes {
    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ontap
        case openzfs
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .ontap,
                .openzfs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ontap: return "ONTAP"
            case .openzfs: return "OPENZFS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeType(rawValue: rawValue) ?? VolumeType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes {
    public enum WindowsAccessAuditLogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case failureOnly
        case successAndFailure
        case successOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [WindowsAccessAuditLogLevel] {
            return [
                .disabled,
                .failureOnly,
                .successAndFailure,
                .successOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .failureOnly: return "FAILURE_ONLY"
            case .successAndFailure: return "SUCCESS_AND_FAILURE"
            case .successOnly: return "SUCCESS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WindowsAccessAuditLogLevel(rawValue: rawValue) ?? WindowsAccessAuditLogLevel.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.WindowsAuditLogConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditLogDestination = "AuditLogDestination"
        case fileAccessAuditLogLevel = "FileAccessAuditLogLevel"
        case fileShareAccessAuditLogLevel = "FileShareAccessAuditLogLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditLogDestination = self.auditLogDestination {
            try encodeContainer.encode(auditLogDestination, forKey: .auditLogDestination)
        }
        if let fileAccessAuditLogLevel = self.fileAccessAuditLogLevel {
            try encodeContainer.encode(fileAccessAuditLogLevel.rawValue, forKey: .fileAccessAuditLogLevel)
        }
        if let fileShareAccessAuditLogLevel = self.fileShareAccessAuditLogLevel {
            try encodeContainer.encode(fileShareAccessAuditLogLevel.rawValue, forKey: .fileShareAccessAuditLogLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileAccessAuditLogLevelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAccessAuditLogLevel.self, forKey: .fileAccessAuditLogLevel)
        fileAccessAuditLogLevel = fileAccessAuditLogLevelDecoded
        let fileShareAccessAuditLogLevelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAccessAuditLogLevel.self, forKey: .fileShareAccessAuditLogLevel)
        fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevelDecoded
        let auditLogDestinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .auditLogDestination)
        auditLogDestination = auditLogDestinationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. For more information, see [ File access auditing](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/file-access-auditing.html).
    public struct WindowsAuditLogConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the destination of the audit logs. The destination can be any Amazon CloudWatch Logs log group ARN or Amazon Kinesis Data Firehose delivery stream ARN. The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix. The name of the Amazon Kinesis Data Firehouse delivery stream must begin with the aws-fsx prefix. The destination ARN (either CloudWatch Logs log group or Kinesis Data Firehose delivery stream) must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        public var auditLogDestination: Swift.String?
        /// Sets which attempt type is logged by Amazon FSx for file and folder accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access files or folders are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access files or folders are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access files or folders are logged.
        ///
        /// * DISABLED - access auditing of files and folders is turned off.
        /// This member is required.
        public var fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?
        /// Sets which attempt type is logged by Amazon FSx for file share accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access file shares are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access file shares are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access file shares are logged.
        ///
        /// * DISABLED - access auditing of file shares is turned off.
        /// This member is required.
        public var fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?

        public init (
            auditLogDestination: Swift.String? = nil,
            fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil,
            fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil
        )
        {
            self.auditLogDestination = auditLogDestination
            self.fileAccessAuditLogLevel = fileAccessAuditLogLevel
            self.fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevel
        }
    }

}

extension FSxClientTypes.WindowsAuditLogCreateConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditLogDestination = "AuditLogDestination"
        case fileAccessAuditLogLevel = "FileAccessAuditLogLevel"
        case fileShareAccessAuditLogLevel = "FileShareAccessAuditLogLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditLogDestination = self.auditLogDestination {
            try encodeContainer.encode(auditLogDestination, forKey: .auditLogDestination)
        }
        if let fileAccessAuditLogLevel = self.fileAccessAuditLogLevel {
            try encodeContainer.encode(fileAccessAuditLogLevel.rawValue, forKey: .fileAccessAuditLogLevel)
        }
        if let fileShareAccessAuditLogLevel = self.fileShareAccessAuditLogLevel {
            try encodeContainer.encode(fileShareAccessAuditLogLevel.rawValue, forKey: .fileShareAccessAuditLogLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileAccessAuditLogLevelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAccessAuditLogLevel.self, forKey: .fileAccessAuditLogLevel)
        fileAccessAuditLogLevel = fileAccessAuditLogLevelDecoded
        let fileShareAccessAuditLogLevelDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAccessAuditLogLevel.self, forKey: .fileShareAccessAuditLogLevel)
        fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevelDecoded
        let auditLogDestinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .auditLogDestination)
        auditLogDestination = auditLogDestinationDecoded
    }
}

extension FSxClientTypes {
    /// The Windows file access auditing configuration used when creating or updating an Amazon FSx for Windows File Server file system.
    public struct WindowsAuditLogCreateConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that specifies the destination of the audit logs. The destination can be any Amazon CloudWatch Logs log group ARN or Amazon Kinesis Data Firehose delivery stream ARN, with the following requirements:
        ///
        /// * The destination ARN that you provide (either CloudWatch Logs log group or Kinesis Data Firehose delivery stream) must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        ///
        /// * The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix. The name of the Amazon Kinesis Data Firehouse delivery stream must begin with the aws-fsx prefix.
        ///
        /// * If you do not provide a destination in AuditLogDestination, Amazon FSx will create and use a log stream in the CloudWatch Logs /aws/fsx/windows log group.
        ///
        /// * If AuditLogDestination is provided and the resource does not exist, the request will fail with a BadRequest error.
        ///
        /// * If FileAccessAuditLogLevel and FileShareAccessAuditLogLevel are both set to DISABLED, you cannot specify a destination in AuditLogDestination.
        public var auditLogDestination: Swift.String?
        /// Sets which attempt type is logged by Amazon FSx for file and folder accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access files or folders are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access files or folders are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access files or folders are logged.
        ///
        /// * DISABLED - access auditing of files and folders is turned off.
        /// This member is required.
        public var fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?
        /// Sets which attempt type is logged by Amazon FSx for file share accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access file shares are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access file shares are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access file shares are logged.
        ///
        /// * DISABLED - access auditing of file shares is turned off.
        /// This member is required.
        public var fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?

        public init (
            auditLogDestination: Swift.String? = nil,
            fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil,
            fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil
        )
        {
            self.auditLogDestination = auditLogDestination
            self.fileAccessAuditLogLevel = fileAccessAuditLogLevel
            self.fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevel
        }
    }

}

extension FSxClientTypes {
    public enum WindowsDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiAz1
        case singleAz1
        case singleAz2
        case sdkUnknown(Swift.String)

        public static var allCases: [WindowsDeploymentType] {
            return [
                .multiAz1,
                .singleAz1,
                .singleAz2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiAz1: return "MULTI_AZ_1"
            case .singleAz1: return "SINGLE_AZ_1"
            case .singleAz2: return "SINGLE_AZ_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WindowsDeploymentType(rawValue: rawValue) ?? WindowsDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension FSxClientTypes.WindowsFileSystemConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryId = "ActiveDirectoryId"
        case aliases = "Aliases"
        case auditLogConfiguration = "AuditLogConfiguration"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case maintenanceOperationsInProgress = "MaintenanceOperationsInProgress"
        case preferredFileServerIp = "PreferredFileServerIp"
        case preferredSubnetId = "PreferredSubnetId"
        case remoteAdministrationEndpoint = "RemoteAdministrationEndpoint"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryId = self.activeDirectoryId {
            try encodeContainer.encode(activeDirectoryId, forKey: .activeDirectoryId)
        }
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for alias0 in aliases {
                try aliasesContainer.encode(alias0)
            }
        }
        if let auditLogConfiguration = self.auditLogConfiguration {
            try encodeContainer.encode(auditLogConfiguration, forKey: .auditLogConfiguration)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = self.copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let maintenanceOperationsInProgress = maintenanceOperationsInProgress {
            var maintenanceOperationsInProgressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceOperationsInProgress)
            for filesystemmaintenanceoperation0 in maintenanceOperationsInProgress {
                try maintenanceOperationsInProgressContainer.encode(filesystemmaintenanceoperation0.rawValue)
            }
        }
        if let preferredFileServerIp = self.preferredFileServerIp {
            try encodeContainer.encode(preferredFileServerIp, forKey: .preferredFileServerIp)
        }
        if let preferredSubnetId = self.preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let remoteAdministrationEndpoint = self.remoteAdministrationEndpoint {
            try encodeContainer.encode(remoteAdministrationEndpoint, forKey: .remoteAdministrationEndpoint)
        }
        if let selfManagedActiveDirectoryConfiguration = self.selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeDirectoryId)
        activeDirectoryId = activeDirectoryIdDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SelfManagedActiveDirectoryAttributes.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let remoteAdministrationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteAdministrationEndpoint)
        remoteAdministrationEndpoint = remoteAdministrationEndpointDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let preferredFileServerIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredFileServerIp)
        preferredFileServerIp = preferredFileServerIpDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let maintenanceOperationsInProgressContainer = try containerValues.decodeIfPresent([FSxClientTypes.FileSystemMaintenanceOperation?].self, forKey: .maintenanceOperationsInProgress)
        var maintenanceOperationsInProgressDecoded0:[FSxClientTypes.FileSystemMaintenanceOperation]? = nil
        if let maintenanceOperationsInProgressContainer = maintenanceOperationsInProgressContainer {
            maintenanceOperationsInProgressDecoded0 = [FSxClientTypes.FileSystemMaintenanceOperation]()
            for enum0 in maintenanceOperationsInProgressContainer {
                if let enum0 = enum0 {
                    maintenanceOperationsInProgressDecoded0?.append(enum0)
                }
            }
        }
        maintenanceOperationsInProgress = maintenanceOperationsInProgressDecoded0
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([FSxClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[FSxClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [FSxClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let auditLogConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsAuditLogConfiguration.self, forKey: .auditLogConfiguration)
        auditLogConfiguration = auditLogConfigurationDecoded
    }
}

extension FSxClientTypes {
    /// The configuration for this Microsoft Windows file system.
    public struct WindowsFileSystemConfiguration: Swift.Equatable {
        /// The ID for an existing Amazon Web Services Managed Microsoft Active Directory instance that the file system is joined to.
        public var activeDirectoryId: Swift.String?
        /// An array of one or more DNS aliases that are currently associated with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see [DNS aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html).
        public var aliases: [FSxClientTypes.Alias]?
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogConfiguration?
        /// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags on the file system should be copied to backups. This value defaults to false. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// The preferred time to take daily automatic backups, in the UTC time zone.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type, valid values are the following:
        ///
        /// * MULTI_AZ_1 - Specifies a high availability file system that is configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability, and supports SSD and HDD storage.
        ///
        /// * SINGLE_AZ_1 - (Default) Specifies a file system that is configured for single AZ redundancy, only supports SSD storage.
        ///
        /// * SINGLE_AZ_2 - Latest generation Single AZ file system. Specifies a file system that is configured for single AZ redundancy and supports SSD and HDD storage.
        ///
        ///
        /// For more information, see [Single-AZ and Multi-AZ File Systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.WindowsDeploymentType?
        /// The list of maintenance operations in progress for this file system.
        public var maintenanceOperationsInProgress: [FSxClientTypes.FileSystemMaintenanceOperation]?
        /// For MULTI_AZ_1 deployment types, the IP address of the primary, or preferred, file server. Use this IP address when mounting the file system on Linux SMB clients or Windows SMB clients that are not joined to a Microsoft Active Directory. Applicable for all Windows file system deployment types. This IP address is temporarily unavailable when the file system is undergoing maintenance. For Linux and Windows SMB clients that are joined to an Active Directory, use the file system's DNSName instead. For more information on mapping and mounting file shares, see [Accessing File Shares](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/accessing-file-shares.html).
        public var preferredFileServerIp: Swift.String?
        /// For MULTI_AZ_1 deployment types, it specifies the ID of the subnet where the preferred file server is located. Must be one of the two subnet IDs specified in SubnetIds property. Amazon FSx serves traffic from this subnet except in the event of a failover to the secondary file server. For SINGLE_AZ_1 and SINGLE_AZ_2 deployment types, this value is the same as that for SubnetIDs. For more information, see [Availability and durability: Single-AZ and Multi-AZ file systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html#single-multi-az-resources).
        public var preferredSubnetId: Swift.String?
        /// For MULTI_AZ_1 deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For SINGLE_AZ_1 and SINGLE_AZ_2 deployment types, this is the DNS name of the file system. This endpoint is temporarily unavailable when the file system is undergoing maintenance.
        public var remoteAdministrationEndpoint: Swift.String?
        /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes?
        /// The throughput of the Amazon FSx file system, measured in megabytes per second.
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            activeDirectoryId: Swift.String? = nil,
            aliases: [FSxClientTypes.Alias]? = nil,
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.WindowsDeploymentType? = nil,
            maintenanceOperationsInProgress: [FSxClientTypes.FileSystemMaintenanceOperation]? = nil,
            preferredFileServerIp: Swift.String? = nil,
            preferredSubnetId: Swift.String? = nil,
            remoteAdministrationEndpoint: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.aliases = aliases
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.maintenanceOperationsInProgress = maintenanceOperationsInProgress
            self.preferredFileServerIp = preferredFileServerIp
            self.preferredSubnetId = preferredSubnetId
            self.remoteAdministrationEndpoint = remoteAdministrationEndpoint
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}
