//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

extension FSxClientTypes {
    /// The Microsoft Active Directory attributes of the Amazon FSx for Windows File Server file system.
    public struct ActiveDirectoryBackupAttributes {
        /// The ID of the Amazon Web Services Managed Microsoft Active Directory instance to which the file system is joined.
        public var activeDirectoryId: Swift.String?
        /// The fully qualified domain name of the self-managed Active Directory directory.
        public var domainName: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?

        public init(
            activeDirectoryId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            resourceARN: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.domainName = domainName
            self.resourceARN = resourceARN
        }
    }

}

extension FSxClientTypes {

    /// The type of error relating to Microsoft Active Directory. NOT_FOUND means that no directory was found by specifying the given directory. INCOMPATIBLE_MODE means that the directory specified is not a Microsoft AD directory. WRONG_VPC means that the specified directory isn't accessible from the specified VPC. WRONG_STAGE means that the specified directory isn't currently in the ACTIVE state.
    public enum ActiveDirectoryErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case domainNotFound
        case incompatibleDomainMode
        case invalidDomainStage
        case wrongVpc
        case sdkUnknown(Swift.String)

        public static var allCases: [ActiveDirectoryErrorType] {
            return [
                .domainNotFound,
                .incompatibleDomainMode,
                .invalidDomainStage,
                .wrongVpc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .domainNotFound: return "DOMAIN_NOT_FOUND"
            case .incompatibleDomainMode: return "INCOMPATIBLE_DOMAIN_MODE"
            case .invalidDomainStage: return "INVALID_DOMAIN_STAGE"
            case .wrongVpc: return "WRONG_VPC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An Active Directory error.
public struct ActiveDirectoryError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The directory ID of the directory that an error pertains to.
        /// This member is required.
        public internal(set) var activeDirectoryId: Swift.String? = nil
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
        /// The type of Active Directory error.
        public internal(set) var type: FSxClientTypes.ActiveDirectoryErrorType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ActiveDirectoryError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        activeDirectoryId: Swift.String? = nil,
        message: Swift.String? = nil,
        type: FSxClientTypes.ActiveDirectoryErrorType? = nil
    )
    {
        self.properties.activeDirectoryId = activeDirectoryId
        self.properties.message = message
        self.properties.type = type
    }
}

extension FSxClientTypes {

    /// Describes the type of administrative action, as follows:
    ///
    /// * FILE_SYSTEM_UPDATE - A file system update administrative action initiated from the Amazon FSx console, API (UpdateFileSystem), or CLI (update-file-system).
    ///
    /// * THROUGHPUT_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a THROUGHPUT_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When THROUGHPUT_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing throughput capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-throughput-capacity.html) in the Amazon FSx for Windows File Server User Guide.
    ///
    /// * STORAGE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's storage capacity has completed successfully, a STORAGE_OPTIMIZATION task starts.
    ///
    /// * For Windows and ONTAP, storage optimization is the process of migrating the file system data to newer larger disks.
    ///
    /// * For Lustre, storage optimization consists of rebalancing the data across the existing and newly added file servers.
    ///
    ///
    /// You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSx for Windows File Server User Guide, [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the Amazon FSx for Lustre User Guide, and [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
    ///
    /// * FILE_SYSTEM_ALIAS_ASSOCIATION - A file system update to associate a new Domain Name System (DNS) alias with the file system. For more information, see [ AssociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_AssociateFileSystemAliases.html).
    ///
    /// * FILE_SYSTEM_ALIAS_DISASSOCIATION - A file system update to disassociate a DNS alias from the file system. For more information, see [DisassociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_DisassociateFileSystemAliases.html).
    ///
    /// * IOPS_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a IOPS_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When IOPS_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing provisioned SSD IOPS](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-provisioned-ssd-iops.html) in the Amazon FSx for Windows File Server User Guide.
    ///
    /// * STORAGE_TYPE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a STORAGE_TYPE_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_TYPE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED.
    ///
    /// * VOLUME_UPDATE - A volume update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateVolume), or CLI (update-volume).
    ///
    /// * VOLUME_RESTORE - An Amazon FSx for OpenZFS volume is returned to the state saved by the specified snapshot, initiated from an API (RestoreVolumeFromSnapshot) or CLI (restore-volume-from-snapshot).
    ///
    /// * SNAPSHOT_UPDATE - A snapshot update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateSnapshot), or CLI (update-snapshot).
    ///
    /// * RELEASE_NFS_V3_LOCKS - Tracks the release of Network File System (NFS) V3 locks on an Amazon FSx for OpenZFS file system.
    ///
    /// * DOWNLOAD_DATA_FROM_BACKUP - An FSx for ONTAP backup is being restored to a new volume on a second-generation file system. Once the all the file metadata is loaded onto the volume, you can mount the volume with read-only access. during this process.
    ///
    /// * VOLUME_INITIALIZE_WITH_SNAPSHOT - A volume is being created from a snapshot on a different FSx for OpenZFS file system. You can initiate this from the Amazon FSx console, API (CreateVolume), or CLI (create-volume) when using the using the FULL_COPY strategy.
    ///
    /// * VOLUME_UPDATE_WITH_SNAPSHOT - A volume is being updated from a snapshot on a different FSx for OpenZFS file system. You can initiate this from the Amazon FSx console, API (CopySnapshotAndUpdateVolume), or CLI (copy-snapshot-and-update-volume).
    public enum AdministrativeActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case downloadDataFromBackup
        case fileSystemAliasAssociation
        case fileSystemAliasDisassociation
        case fileSystemUpdate
        case iopsOptimization
        case misconfiguredStateRecovery
        case releaseNfsV3Locks
        case snapshotUpdate
        case storageOptimization
        case storageTypeOptimization
        case throughputOptimization
        case volumeInitializeWithSnapshot
        case volumeRestore
        case volumeUpdate
        case volumeUpdateWithSnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [AdministrativeActionType] {
            return [
                .downloadDataFromBackup,
                .fileSystemAliasAssociation,
                .fileSystemAliasDisassociation,
                .fileSystemUpdate,
                .iopsOptimization,
                .misconfiguredStateRecovery,
                .releaseNfsV3Locks,
                .snapshotUpdate,
                .storageOptimization,
                .storageTypeOptimization,
                .throughputOptimization,
                .volumeInitializeWithSnapshot,
                .volumeRestore,
                .volumeUpdate,
                .volumeUpdateWithSnapshot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .downloadDataFromBackup: return "DOWNLOAD_DATA_FROM_BACKUP"
            case .fileSystemAliasAssociation: return "FILE_SYSTEM_ALIAS_ASSOCIATION"
            case .fileSystemAliasDisassociation: return "FILE_SYSTEM_ALIAS_DISASSOCIATION"
            case .fileSystemUpdate: return "FILE_SYSTEM_UPDATE"
            case .iopsOptimization: return "IOPS_OPTIMIZATION"
            case .misconfiguredStateRecovery: return "MISCONFIGURED_STATE_RECOVERY"
            case .releaseNfsV3Locks: return "RELEASE_NFS_V3_LOCKS"
            case .snapshotUpdate: return "SNAPSHOT_UPDATE"
            case .storageOptimization: return "STORAGE_OPTIMIZATION"
            case .storageTypeOptimization: return "STORAGE_TYPE_OPTIMIZATION"
            case .throughputOptimization: return "THROUGHPUT_OPTIMIZATION"
            case .volumeInitializeWithSnapshot: return "VOLUME_INITIALIZE_WITH_SNAPSHOT"
            case .volumeRestore: return "VOLUME_RESTORE"
            case .volumeUpdate: return "VOLUME_UPDATE"
            case .volumeUpdateWithSnapshot: return "VOLUME_UPDATE_WITH_SNAPSHOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Provides information about a failed administrative action.
    public struct AdministrativeActionFailureDetails {
        /// Error message providing details about the failed administrative action.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case optimizing
        case pending
        case updatedOptimizing
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .completed,
                .failed,
                .inProgress,
                .optimizing,
                .pending,
                .updatedOptimizing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .optimizing: return "OPTIMIZING"
            case .pending: return "PENDING"
            case .updatedOptimizing: return "UPDATED_OPTIMIZING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A structure providing details of any failures that occurred.
    public struct FileSystemFailureDetails {
        /// A message describing any failures that occurred.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    /// The type of file system.
    public enum FileSystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lustre
        case ontap
        case openzfs
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .lustre,
                .ontap,
                .openzfs,
                .windows
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lustre: return "LUSTRE"
            case .ontap: return "ONTAP"
            case .openzfs: return "OPENZFS"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    /// The lifecycle status of the file system.
    public enum FileSystemLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case misconfigured
        case misconfiguredUnavailable
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .misconfiguredUnavailable,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .misconfiguredUnavailable: return "MISCONFIGURED_UNAVAILABLE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum DataCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lz4
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [DataCompressionType] {
            return [
                .lz4,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lz4: return "LZ4"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum AutoImportPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case new
        case newChanged
        case newChangedDeleted
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoImportPolicyType] {
            return [
                .new,
                .newChanged,
                .newChangedDeleted,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .new: return "NEW"
            case .newChanged: return "NEW_CHANGED"
            case .newChangedDeleted: return "NEW_CHANGED_DELETED"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
    public struct DataRepositoryFailureDetails {
        /// A detailed error message.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    public enum DataRepositoryLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case misconfigured
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported on file systems with a data repository association. For file systems with a data repository association, see .
    public struct DataRepositoryConfiguration {
        /// Describes the file system's linked S3 data repository's AutoImportPolicy. The AutoImportPolicy configures how Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update file and directory listings for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The export path to the Amazon S3 bucket (and prefix) that you are using to store new and changed Lustre file system files in S3.
        public var exportPath: Swift.String?
        /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryFailureDetails?
        /// The import path to the Amazon S3 bucket (and optional prefix) that you're using as the data repository for your FSx for Lustre file system, for example s3://import-bucket/optional-prefix. If a prefix is specified after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system.
        public var importPath: Swift.String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public var importedFileChunkSize: Swift.Int?
        /// Describes the state of the file system's S3 durable data repository, if it is configured with an S3 repository. The lifecycle can have the following values:
        ///
        /// * CREATING - The data repository configuration between the FSx file system and the linked S3 data repository is being created. The data repository is unavailable.
        ///
        /// * AVAILABLE - The data repository is available for use.
        ///
        /// * MISCONFIGURED - Amazon FSx cannot automatically import updates from the S3 bucket until the data repository configuration is corrected. For more information, see [Troubleshooting a Misconfigured linked S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/troubleshooting.html#troubleshooting-misconfigured-data-repository).
        ///
        /// * UPDATING - The data repository is undergoing a customer initiated update and availability may be impacted.
        ///
        /// * FAILED - The data repository is in a terminal state that cannot be recovered.
        public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?

        public init(
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            exportPath: Swift.String? = nil,
            failureDetails: FSxClientTypes.DataRepositoryFailureDetails? = nil,
            importPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.exportPath = exportPath
            self.failureDetails = failureDetails
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
            self.lifecycle = lifecycle
        }
    }

}

extension FSxClientTypes {

    public enum LustreDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case persistent1
        case persistent2
        case scratch1
        case scratch2
        case sdkUnknown(Swift.String)

        public static var allCases: [LustreDeploymentType] {
            return [
                .persistent1,
                .persistent2,
                .scratch1,
                .scratch2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .persistent1: return "PERSISTENT_1"
            case .persistent2: return "PERSISTENT_2"
            case .scratch1: return "SCRATCH_1"
            case .scratch2: return "SCRATCH_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum DriveCacheType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case read
        case sdkUnknown(Swift.String)

        public static var allCases: [DriveCacheType] {
            return [
                .none,
                .read
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .read: return "READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum LustreAccessAuditLogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case errorOnly
        case warnError
        case warnOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [LustreAccessAuditLogLevel] {
            return [
                .disabled,
                .errorOnly,
                .warnError,
                .warnOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .errorOnly: return "ERROR_ONLY"
            case .warnError: return "WARN_ERROR"
            case .warnOnly: return "WARN_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration for Lustre logging used to write the enabled logging events for your Amazon FSx for Lustre file system or Amazon File Cache resource to Amazon CloudWatch Logs.
    public struct LustreLogConfiguration {
        /// The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        public var destination: Swift.String?
        /// The data repository events that are logged by Amazon FSx.
        ///
        /// * WARN_ONLY - only warning events are logged.
        ///
        /// * ERROR_ONLY - only error events are logged.
        ///
        /// * WARN_ERROR - both warning events and error events are logged.
        ///
        /// * DISABLED - logging of data repository events is turned off.
        ///
        ///
        /// Note that Amazon File Cache uses a default setting of WARN_ERROR, which can't be changed.
        /// This member is required.
        public var level: FSxClientTypes.LustreAccessAuditLogLevel?

        public init(
            destination: Swift.String? = nil,
            level: FSxClientTypes.LustreAccessAuditLogLevel? = nil
        )
        {
            self.destination = destination
            self.level = level
        }
    }

}

extension FSxClientTypes {

    public enum MetadataConfigurationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case userProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [MetadataConfigurationMode] {
            return [
                .automatic,
                .userProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .userProvisioned: return "USER_PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The Lustre metadata performance configuration of an Amazon FSx for Lustre file system using a PERSISTENT_2 deployment type. The configuration enables the file system to support increasing metadata performance.
    public struct FileSystemLustreMetadataConfiguration {
        /// The number of Metadata IOPS provisioned for the file system. Valid values are 1500, 3000, 6000, 12000, and multiples of 12000 up to a maximum of 192000.
        public var iops: Swift.Int?
        /// The metadata configuration mode for provisioning Metadata IOPS for the file system.
        ///
        /// * In AUTOMATIC mode, FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.
        ///
        /// * In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.
        /// This member is required.
        public var mode: FSxClientTypes.MetadataConfigurationMode?

        public init(
            iops: Swift.Int? = nil,
            mode: FSxClientTypes.MetadataConfigurationMode? = nil
        )
        {
            self.iops = iops
            self.mode = mode
        }
    }

}

extension FSxClientTypes {
    /// The configuration for Lustre root squash used to restrict root-level access from clients that try to access your FSx for Lustre file system as root. Use the RootSquash parameter to enable root squash. To learn more about Lustre root squash, see [Lustre root squash](https://docs.aws.amazon.com/fsx/latest/LustreGuide/root-squash.html). You can also use the NoSquashNids parameter to provide an array of clients who are not affected by the root squash setting. These clients will access the file system as root, with unrestricted privileges.
    public struct LustreRootSquashConfiguration {
        /// When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:
        ///
        /// * A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, 10.0.1.6@tcp).
        ///
        /// * An address range is described using a dash to separate the range (for example, 10.0.[2-10].[1-255]@tcp).
        public var noSquashNids: [Swift.String]?
        /// You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format UID:GID (for example, 365534:65534). The UID and GID values can range from 0 to 4294967294:
        ///
        /// * A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.
        ///
        /// * A value of 0 (zero) for UID and GID indicates root, and therefore disables root squash.
        ///
        ///
        /// When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.
        public var rootSquash: Swift.String?

        public init(
            noSquashNids: [Swift.String]? = nil,
            rootSquash: Swift.String? = nil
        )
        {
            self.noSquashNids = noSquashNids
            self.rootSquash = rootSquash
        }
    }

}

extension FSxClientTypes {
    /// The configuration for the Amazon FSx for Lustre file system.
    public struct LustreFileSystemConfiguration {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags on the file system are copied to backups. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value. (Default = false)
        public var copyTagsToBackups: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - Data compression is turned off for the file system.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html).
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported on file systems with a data repository association. For file systems with a data repository association, see .
        public var dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration?
        /// The deployment type of the FSx for Lustre file system. Scratch deployment type is designed for temporary storage and shorter-term processing of data. SCRATCH_1 and SCRATCH_2 deployment types are best suited for when you need temporary storage and shorter-term processing of data. The SCRATCH_2 deployment type provides in-transit encryption of data and higher burst throughput capacity than SCRATCH_1. The PERSISTENT_1 and PERSISTENT_2 deployment type is used for longer-term storage and workloads and encryption of data in transit. PERSISTENT_2 offers higher PerUnitStorageThroughput (up to 1000 MB/s/TiB) along with a lower minimum storage capacity requirement (600 GiB). To learn more about FSx for Lustre deployment types, see [ FSx for Lustre deployment options](https://docs.aws.amazon.com/fsx/latest/LustreGuide/lustre-deployment-types.html). The default is SCRATCH_1.
        public var deploymentType: FSxClientTypes.LustreDeploymentType?
        /// The type of drive cache used by PERSISTENT_1 file systems that are provisioned with HDD storage devices. This parameter is required when StorageType is HDD. When set to READ the file system has an SSD storage cache that is sized to 20% of the file system's storage capacity. This improves the performance for frequently accessed files by caching up to 20% of the total storage capacity. This parameter is required when StorageType is set to HDD.
        public var driveCacheType: FSxClientTypes.DriveCacheType?
        /// The Lustre logging configuration. Lustre logging writes the enabled log events for your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogConfiguration?
        /// The Lustre metadata performance configuration for an Amazon FSx for Lustre file system using a PERSISTENT_2 deployment type.
        public var metadataConfiguration: FSxClientTypes.FileSystemLustreMetadataConfiguration?
        /// You use the MountName value when mounting the file system. For the SCRATCH_1 deployment type, this value is always "fsx". For SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 deployment types, this value is a string that is unique within an Amazon Web Services Region.
        public var mountName: Swift.String?
        /// Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. File system throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). This option is only valid for PERSISTENT_1 and PERSISTENT_2 deployment types. Valid values:
        ///
        /// * For PERSISTENT_1 SSD storage: 50, 100, 200.
        ///
        /// * For PERSISTENT_1 HDD storage: 12, 40.
        ///
        /// * For PERSISTENT_2 SSD storage: 125, 250, 500, 1000.
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration for an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. Here, d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration? = nil,
            deploymentType: FSxClientTypes.LustreDeploymentType? = nil,
            driveCacheType: FSxClientTypes.DriveCacheType? = nil,
            logConfiguration: FSxClientTypes.LustreLogConfiguration? = nil,
            metadataConfiguration: FSxClientTypes.FileSystemLustreMetadataConfiguration? = nil,
            mountName: Swift.String? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.dataRepositoryConfiguration = dataRepositoryConfiguration
            self.deploymentType = deploymentType
            self.driveCacheType = driveCacheType
            self.logConfiguration = logConfiguration
            self.metadataConfiguration = metadataConfiguration
            self.mountName = mountName
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {

    public enum OntapDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiAz1
        case multiAz2
        case singleAz1
        case singleAz2
        case sdkUnknown(Swift.String)

        public static var allCases: [OntapDeploymentType] {
            return [
                .multiAz1,
                .multiAz2,
                .singleAz1,
                .singleAz2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiAz1: return "MULTI_AZ_1"
            case .multiAz2: return "MULTI_AZ_2"
            case .singleAz1: return "SINGLE_AZ_1"
            case .singleAz2: return "SINGLE_AZ_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum DiskIopsConfigurationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case userProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskIopsConfigurationMode] {
            return [
                .automatic,
                .userProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .userProvisioned: return "USER_PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP, Amazon FSx for Windows File Server, or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).
    public struct DiskIopsConfiguration {
        /// The total number of SSD IOPS provisioned for the file system. The minimum and maximum values for this property depend on the value of HAPairs and StorageCapacity. The minimum value is calculated as StorageCapacity * 3 * HAPairs (3 IOPS per GB of StorageCapacity). The maximum value is calculated as 200,000 * HAPairs. Amazon FSx responds with an HTTP status code 400 (Bad Request) if the value of Iops is outside of the minimum or maximum values.
        public var iops: Swift.Int?
        /// Specifies whether the file system is using the AUTOMATIC setting of SSD IOPS of 3 IOPS per GB of storage capacity, or if it using a USER_PROVISIONED value.
        public var mode: FSxClientTypes.DiskIopsConfigurationMode?

        public init(
            iops: Swift.Int? = nil,
            mode: FSxClientTypes.DiskIopsConfigurationMode? = nil
        )
        {
            self.iops = iops
            self.mode = mode
        }
    }

}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP file system has two endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. They are the Management and Intercluster endpoints.
    public struct FileSystemEndpoint {
        /// The file system's DNS name. You can mount your file system using its DNS name.
        public var dnsName: Swift.String?
        /// IP addresses of the file system endpoint.
        public var ipAddresses: [Swift.String]?

        public init(
            dnsName: Swift.String? = nil,
            ipAddresses: [Swift.String]? = nil
        )
        {
            self.dnsName = dnsName
            self.ipAddresses = ipAddresses
        }
    }

}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP file system has the following endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.
    public struct FileSystemEndpoints {
        /// An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.
        public var intercluster: FSxClientTypes.FileSystemEndpoint?
        /// An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.
        public var management: FSxClientTypes.FileSystemEndpoint?

        public init(
            intercluster: FSxClientTypes.FileSystemEndpoint? = nil,
            management: FSxClientTypes.FileSystemEndpoint? = nil
        )
        {
            self.intercluster = intercluster
            self.management = management
        }
    }

}

extension FSxClientTypes {
    /// Configuration for the FSx for NetApp ONTAP file system.
    public struct OntapFileSystemConfiguration {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the FSx for ONTAP file system deployment type in use in the file system.
        ///
        /// * MULTI_AZ_1 - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.
        ///
        /// * MULTI_AZ_2 - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.
        ///
        /// * SINGLE_AZ_1 - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.
        ///
        /// * SINGLE_AZ_2 - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.
        ///
        ///
        /// For information about the use cases for Multi-AZ and Single-AZ deployments, refer to [Choosing Multi-AZ or Single-AZ file system deployment](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.OntapDeploymentType?
        /// The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.
        public var endpointIpAddressRange: Swift.String?
        /// The Management and Intercluster endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.
        public var endpoints: FSxClientTypes.FileSystemEndpoints?
        /// You can use the fsxadmin user account to access the NetApp ONTAP CLI and REST API. The password value is always redacted in the response.
        public var fsxAdminPassword: Swift.String?
        /// Specifies how many high-availability (HA) file server pairs the file system will have. The default value is 1. The value of this property affects the values of StorageCapacity, Iops, and ThroughputCapacity. For more information, see [High-availability (HA) pairs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/HA-pairs.html) in the FSx for ONTAP user guide. Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of HAPairs is less than 1 or greater than 12.
        ///
        /// * The value of HAPairs is greater than 1 and the value of DeploymentType is SINGLE_AZ_1, MULTI_AZ_1, or MULTI_AZ_2.
        public var haPairs: Swift.Int?
        /// The ID for a subnet. A subnet is a range of IP addresses in your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var preferredSubnetId: Swift.String?
        /// (Multi-AZ only) The VPC route tables in which your file system's endpoints are created.
        public var routeTableIds: [Swift.String]?
        /// The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).
        public var throughputCapacity: Swift.Int?
        /// Use to choose the throughput capacity per HA pair. When the value of HAPairs is equal to 1, the value of ThroughputCapacityPerHAPair is the total throughput for the file system. This field and ThroughputCapacity cannot be defined in the same API call, but one is required. This field and ThroughputCapacity are the same for file systems with one HA pair.
        ///
        /// * For SINGLE_AZ_1 and MULTI_AZ_1 file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.
        ///
        /// * For SINGLE_AZ_2, valid values are 1536, 3072, or 6144 MBps.
        ///
        /// * For MULTI_AZ_2, valid values are 384, 768, 1536, 3072, or 6144 MBps.
        ///
        ///
        /// Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of ThroughputCapacity and ThroughputCapacityPerHAPair are not the same value.
        ///
        /// * The value of deployment type is SINGLE_AZ_2 and ThroughputCapacity / ThroughputCapacityPerHAPair is not a valid HA pair (a value between 1 and 12).
        ///
        /// * The value of ThroughputCapacityPerHAPair is not a valid value.
        public var throughputCapacityPerHAPair: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OntapDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            endpoints: FSxClientTypes.FileSystemEndpoints? = nil,
            fsxAdminPassword: Swift.String? = nil,
            haPairs: Swift.Int? = nil,
            preferredSubnetId: Swift.String? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            throughputCapacityPerHAPair: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddressRange = endpointIpAddressRange
            self.endpoints = endpoints
            self.fsxAdminPassword = fsxAdminPassword
            self.haPairs = haPairs
            self.preferredSubnetId = preferredSubnetId
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.throughputCapacityPerHAPair = throughputCapacityPerHAPair
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.OntapFileSystemConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OntapFileSystemConfiguration(automaticBackupRetentionDays: \(Swift.String(describing: automaticBackupRetentionDays)), dailyAutomaticBackupStartTime: \(Swift.String(describing: dailyAutomaticBackupStartTime)), deploymentType: \(Swift.String(describing: deploymentType)), diskIopsConfiguration: \(Swift.String(describing: diskIopsConfiguration)), endpointIpAddressRange: \(Swift.String(describing: endpointIpAddressRange)), endpoints: \(Swift.String(describing: endpoints)), haPairs: \(Swift.String(describing: haPairs)), preferredSubnetId: \(Swift.String(describing: preferredSubnetId)), routeTableIds: \(Swift.String(describing: routeTableIds)), throughputCapacity: \(Swift.String(describing: throughputCapacity)), throughputCapacityPerHAPair: \(Swift.String(describing: throughputCapacityPerHAPair)), weeklyMaintenanceStartTime: \(Swift.String(describing: weeklyMaintenanceStartTime)), fsxAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {

    public enum OpenZFSDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiAz1
        case singleAz1
        case singleAz2
        case singleAzHa1
        case singleAzHa2
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSDeploymentType] {
            return [
                .multiAz1,
                .singleAz1,
                .singleAz2,
                .singleAzHa1,
                .singleAzHa2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiAz1: return "MULTI_AZ_1"
            case .singleAz1: return "SINGLE_AZ_1"
            case .singleAz2: return "SINGLE_AZ_2"
            case .singleAzHa1: return "SINGLE_AZ_HA_1"
            case .singleAzHa2: return "SINGLE_AZ_HA_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration for the Amazon FSx for OpenZFS file system.
    public struct OpenZFSFileSystemConfiguration {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags on the file system should be copied to backups. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file-system deployment type. Amazon FSx for OpenZFS supports  MULTI_AZ_1, SINGLE_AZ_HA_2, SINGLE_AZ_HA_1, SINGLE_AZ_2, and SINGLE_AZ_1.
        public var deploymentType: FSxClientTypes.OpenZFSDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP, Amazon FSx for Windows File Server, or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The IP address of the endpoint that is used to access data or to manage the file system.
        public var endpointIpAddress: Swift.String?
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API and Amazon FSx console, Amazon FSx selects an available /28 IP address range for you from one of the VPC's CIDR ranges. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.
        public var endpointIpAddressRange: Swift.String?
        /// Required when DeploymentType is set to MULTI_AZ_1. This specifies the subnet in which you want the preferred file server to be located.
        public var preferredSubnetId: Swift.String?
        /// The ID of the root volume of the OpenZFS file system.
        public var rootVolumeId: Swift.String?
        /// (Multi-AZ only) The VPC route tables in which your file system's endpoints are created.
        public var routeTableIds: [Swift.String]?
        /// The throughput of an Amazon FSx file system, measured in megabytes per second (MBps).
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OpenZFSDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddress: Swift.String? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            preferredSubnetId: Swift.String? = nil,
            rootVolumeId: Swift.String? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddress = endpointIpAddress
            self.endpointIpAddressRange = endpointIpAddressRange
            self.preferredSubnetId = preferredSubnetId
            self.rootVolumeId = rootVolumeId
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {

    /// Specifies the file system's storage type.
    public enum StorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hdd
        case ssd
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageType] {
            return [
                .hdd,
                .ssd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hdd: return "HDD"
            case .ssd: return "SSD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Specifies a key-value pair for a resource tag.
    public struct Tag {
        /// A value that specifies the TagKey, the name of the tag. Tag keys must be unique for the resource to which they are attached.
        /// This member is required.
        public var key: Swift.String?
        /// A value that specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of finances : April and also of payroll : April.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension FSxClientTypes {

    public enum AliasLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [AliasLifecycle] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A DNS alias that is associated with the file system. You can use a DNS alias to access a file system using user-defined DNS names, in addition to the default DNS name that Amazon FSx assigns to the file system. For more information, see [DNS aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html) in the FSx for Windows File Server User Guide.
    public struct Alias {
        /// Describes the state of the DNS alias.
        ///
        /// * AVAILABLE - The DNS alias is associated with an Amazon FSx file system.
        ///
        /// * CREATING - Amazon FSx is creating the DNS alias and associating it with the file system.
        ///
        /// * CREATE_FAILED - Amazon FSx was unable to associate the DNS alias with the file system.
        ///
        /// * DELETING - Amazon FSx is disassociating the DNS alias from the file system and deleting it.
        ///
        /// * DELETE_FAILED - Amazon FSx was unable to disassociate the DNS alias from the file system.
        public var lifecycle: FSxClientTypes.AliasLifecycle?
        /// The name of the DNS alias. The alias name has to meet the following requirements:
        ///
        /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain, for example, accounting.example.com.
        ///
        /// * Can contain alphanumeric characters, the underscore (_), and the hyphen (-).
        ///
        /// * Cannot start or end with a hyphen.
        ///
        /// * Can start with a numeric.
        ///
        ///
        /// For DNS names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
        public var name: Swift.String?

        public init(
            lifecycle: FSxClientTypes.AliasLifecycle? = nil,
            name: Swift.String? = nil
        )
        {
            self.lifecycle = lifecycle
            self.name = name
        }
    }

}

extension FSxClientTypes {

    public enum WindowsAccessAuditLogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case failureOnly
        case successAndFailure
        case successOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [WindowsAccessAuditLogLevel] {
            return [
                .disabled,
                .failureOnly,
                .successAndFailure,
                .successOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .failureOnly: return "FAILURE_ONLY"
            case .successAndFailure: return "SUCCESS_AND_FAILURE"
            case .successOnly: return "SUCCESS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. For more information, see [ File access auditing](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/file-access-auditing.html).
    public struct WindowsAuditLogConfiguration {
        /// The Amazon Resource Name (ARN) for the destination of the audit logs. The destination can be any Amazon CloudWatch Logs log group ARN or Amazon Kinesis Data Firehose delivery stream ARN. The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix. The name of the Amazon Kinesis Data Firehose delivery stream must begin with the aws-fsx prefix. The destination ARN (either CloudWatch Logs log group or Kinesis Data Firehose delivery stream) must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        public var auditLogDestination: Swift.String?
        /// Sets which attempt type is logged by Amazon FSx for file and folder accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access files or folders are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access files or folders are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access files or folders are logged.
        ///
        /// * DISABLED - access auditing of files and folders is turned off.
        /// This member is required.
        public var fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?
        /// Sets which attempt type is logged by Amazon FSx for file share accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access file shares are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access file shares are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access file shares are logged.
        ///
        /// * DISABLED - access auditing of file shares is turned off.
        /// This member is required.
        public var fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?

        public init(
            auditLogDestination: Swift.String? = nil,
            fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil,
            fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil
        )
        {
            self.auditLogDestination = auditLogDestination
            self.fileAccessAuditLogLevel = fileAccessAuditLogLevel
            self.fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevel
        }
    }

}

extension FSxClientTypes {

    public enum WindowsDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiAz1
        case singleAz1
        case singleAz2
        case sdkUnknown(Swift.String)

        public static var allCases: [WindowsDeploymentType] {
            return [
                .multiAz1,
                .singleAz1,
                .singleAz2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiAz1: return "MULTI_AZ_1"
            case .singleAz1: return "SINGLE_AZ_1"
            case .singleAz2: return "SINGLE_AZ_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    /// An enumeration specifying the currently ongoing maintenance operation.
    public enum FileSystemMaintenanceOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case backingUp
        case patching
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemMaintenanceOperation] {
            return [
                .backingUp,
                .patching
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .backingUp: return "BACKING_UP"
            case .patching: return "PATCHING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
    public struct SelfManagedActiveDirectoryAttributes {
        /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
        public var dnsIps: [Swift.String]?
        /// The fully qualified domain name of the self-managed AD directory.
        public var domainName: Swift.String?
        /// The name of the domain group whose members have administrative privileges for the FSx file system.
        public var fileSystemAdministratorsGroup: Swift.String?
        /// The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var organizationalUnitDistinguishedName: Swift.String?
        /// The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.
        public var userName: Swift.String?

        public init(
            dnsIps: [Swift.String]? = nil,
            domainName: Swift.String? = nil,
            fileSystemAdministratorsGroup: Swift.String? = nil,
            organizationalUnitDistinguishedName: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.domainName = domainName
            self.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.userName = userName
        }
    }

}

extension FSxClientTypes {
    /// The configuration for this Microsoft Windows file system.
    public struct WindowsFileSystemConfiguration {
        /// The ID for an existing Amazon Web Services Managed Microsoft Active Directory instance that the file system is joined to.
        public var activeDirectoryId: Swift.String?
        /// An array of one or more DNS aliases that are currently associated with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see [DNS aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html).
        public var aliases: [FSxClientTypes.Alias]?
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogConfiguration?
        /// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags on the file system should be copied to backups. This value defaults to false. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// The preferred time to take daily automatic backups, in the UTC time zone.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type, valid values are the following:
        ///
        /// * MULTI_AZ_1 - Specifies a high availability file system that is configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability, and supports SSD and HDD storage.
        ///
        /// * SINGLE_AZ_1 - (Default) Specifies a file system that is configured for single AZ redundancy, only supports SSD storage.
        ///
        /// * SINGLE_AZ_2 - Latest generation Single AZ file system. Specifies a file system that is configured for single AZ redundancy and supports SSD and HDD storage.
        ///
        ///
        /// For more information, see [Single-AZ and Multi-AZ File Systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.WindowsDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for Windows file system. By default, Amazon FSx automatically provisions 3 IOPS per GiB of storage capacity. You can provision additional IOPS per GiB of storage, up to the maximum limit associated with your chosen throughput capacity.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The list of maintenance operations in progress for this file system.
        public var maintenanceOperationsInProgress: [FSxClientTypes.FileSystemMaintenanceOperation]?
        /// For MULTI_AZ_1 deployment types, the IP address of the primary, or preferred, file server. Use this IP address when mounting the file system on Linux SMB clients or Windows SMB clients that are not joined to a Microsoft Active Directory. Applicable for all Windows file system deployment types. This IP address is temporarily unavailable when the file system is undergoing maintenance. For Linux and Windows SMB clients that are joined to an Active Directory, use the file system's DNSName instead. For more information on mapping and mounting file shares, see [Accessing File Shares](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/accessing-file-shares.html).
        public var preferredFileServerIp: Swift.String?
        /// For MULTI_AZ_1 deployment types, it specifies the ID of the subnet where the preferred file server is located. Must be one of the two subnet IDs specified in SubnetIds property. Amazon FSx serves traffic from this subnet except in the event of a failover to the secondary file server. For SINGLE_AZ_1 and SINGLE_AZ_2 deployment types, this value is the same as that for SubnetIDs. For more information, see [Availability and durability: Single-AZ and Multi-AZ file systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html#single-multi-az-resources).
        public var preferredSubnetId: Swift.String?
        /// For MULTI_AZ_1 deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For SINGLE_AZ_1 and SINGLE_AZ_2 deployment types, this is the DNS name of the file system. This endpoint is temporarily unavailable when the file system is undergoing maintenance.
        public var remoteAdministrationEndpoint: Swift.String?
        /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes?
        /// The throughput of the Amazon FSx file system, measured in megabytes per second.
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            activeDirectoryId: Swift.String? = nil,
            aliases: [FSxClientTypes.Alias]? = nil,
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.WindowsDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            maintenanceOperationsInProgress: [FSxClientTypes.FileSystemMaintenanceOperation]? = nil,
            preferredFileServerIp: Swift.String? = nil,
            preferredSubnetId: Swift.String? = nil,
            remoteAdministrationEndpoint: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.aliases = aliases
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.maintenanceOperationsInProgress = maintenanceOperationsInProgress
            self.preferredFileServerIp = preferredFileServerIp
            self.preferredSubnetId = preferredSubnetId
            self.remoteAdministrationEndpoint = remoteAdministrationEndpoint
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {

    public enum SnapshotLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Describes why a resource lifecycle state changed.
    public struct LifecycleTransitionReason {
        /// A detailed error message.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    public enum VolumeLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case created
        case creating
        case deleting
        case failed
        case misconfigured
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeLifecycle] {
            return [
                .available,
                .created,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Used to specify configuration options for a volume’s storage aggregate or aggregates.
    public struct AggregateConfiguration {
        /// The list of aggregates that this volume resides on. Aggregates are storage pools which make up your primary storage tier. Each high-availability (HA) pair has one aggregate. The names of the aggregates map to the names of the aggregates in the ONTAP CLI and REST API. For FlexVols, there will always be a single entry. Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The strings in the value of Aggregates are not are not formatted as aggrX, where X is a number between 1 and 12.
        ///
        /// * The value of Aggregates contains aggregates that are not present.
        ///
        /// * One or more of the aggregates supplied are too close to the volume limit to support adding more volumes.
        public var aggregates: [Swift.String]?
        /// The total number of constituents this FlexGroup volume has. Not applicable for FlexVols.
        public var totalConstituents: Swift.Int?

        public init(
            aggregates: [Swift.String]? = nil,
            totalConstituents: Swift.Int? = nil
        )
        {
            self.aggregates = aggregates
            self.totalConstituents = totalConstituents
        }
    }

}

extension FSxClientTypes {

    public enum FlexCacheEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cache
        case `none`
        case origin
        case sdkUnknown(Swift.String)

        public static var allCases: [FlexCacheEndpointType] {
            return [
                .cache,
                .none,
                .origin
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cache: return "CACHE"
            case .none: return "NONE"
            case .origin: return "ORIGIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum OntapVolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dp
        case ls
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [OntapVolumeType] {
            return [
                .dp,
                .ls,
                .rw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dp: return "DP"
            case .ls: return "LS"
            case .rw: return "RW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum SecurityStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mixed
        case ntfs
        case unix
        case sdkUnknown(Swift.String)

        public static var allCases: [SecurityStyle] {
            return [
                .mixed,
                .ntfs,
                .unix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .ntfs: return "NTFS"
            case .unix: return "UNIX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum AutocommitPeriodType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case minutes
        case months
        case `none`
        case years
        case sdkUnknown(Swift.String)

        public static var allCases: [AutocommitPeriodType] {
            return [
                .days,
                .hours,
                .minutes,
                .months,
                .none,
                .years
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case .hours: return "HOURS"
            case .minutes: return "MINUTES"
            case .months: return "MONTHS"
            case .none: return "NONE"
            case .years: return "YEARS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Sets the autocommit period of files in an FSx for ONTAP SnapLock volume, which determines how long the files must remain unmodified before they're automatically transitioned to the write once, read many (WORM) state. For more information, see [Autocommit](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/worm-state.html#worm-state-autocommit).
    public struct AutocommitPeriod {
        /// Defines the type of time for the autocommit period of a file in an FSx for ONTAP SnapLock volume. Setting this value to NONE disables autocommit. The default value is NONE.
        /// This member is required.
        public var type: FSxClientTypes.AutocommitPeriodType?
        /// Defines the amount of time for the autocommit period of a file in an FSx for ONTAP SnapLock volume. The following ranges are valid:
        ///
        /// * Minutes: 5 - 65,535
        ///
        /// * Hours: 1 - 65,535
        ///
        /// * Days: 1 - 3,650
        ///
        /// * Months: 1 - 120
        ///
        /// * Years: 1 - 10
        public var value: Swift.Int?

        public init(
            type: FSxClientTypes.AutocommitPeriodType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension FSxClientTypes {

    public enum PrivilegedDelete: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case permanentlyDisabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PrivilegedDelete] {
            return [
                .disabled,
                .enabled,
                .permanentlyDisabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .permanentlyDisabled: return "PERMANENTLY_DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum RetentionPeriodType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case infinite
        case minutes
        case months
        case seconds
        case unspecified
        case years
        case sdkUnknown(Swift.String)

        public static var allCases: [RetentionPeriodType] {
            return [
                .days,
                .hours,
                .infinite,
                .minutes,
                .months,
                .seconds,
                .unspecified,
                .years
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case .hours: return "HOURS"
            case .infinite: return "INFINITE"
            case .minutes: return "MINUTES"
            case .months: return "MONTHS"
            case .seconds: return "SECONDS"
            case .unspecified: return "UNSPECIFIED"
            case .years: return "YEARS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Specifies the retention period of an FSx for ONTAP SnapLock volume. After it is set, it can't be changed. Files can't be deleted or modified during the retention period. For more information, see [Working with the retention period in SnapLock](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-retention.html).
    public struct RetentionPeriod {
        /// Defines the type of time for the retention period of an FSx for ONTAP SnapLock volume. Set it to one of the valid types. If you set it to INFINITE, the files are retained forever. If you set it to UNSPECIFIED, the files are retained until you set an explicit retention period.
        /// This member is required.
        public var type: FSxClientTypes.RetentionPeriodType?
        /// Defines the amount of time for the retention period of an FSx for ONTAP SnapLock volume. You can't set a value for INFINITE or UNSPECIFIED. For all other options, the following ranges are valid:
        ///
        /// * Seconds: 0 - 65,535
        ///
        /// * Minutes: 0 - 65,535
        ///
        /// * Hours: 0 - 24
        ///
        /// * Days: 0 - 365
        ///
        /// * Months: 0 - 12
        ///
        /// * Years: 0 - 100
        public var value: Swift.Int?

        public init(
            type: FSxClientTypes.RetentionPeriodType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension FSxClientTypes {
    /// The configuration to set the retention period of an FSx for ONTAP SnapLock volume. The retention period includes default, maximum, and minimum settings. For more information, see [Working with the retention period in SnapLock](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-retention.html).
    public struct SnaplockRetentionPeriod {
        /// The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period.
        /// This member is required.
        public var defaultRetention: FSxClientTypes.RetentionPeriod?
        /// The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume.
        /// This member is required.
        public var maximumRetention: FSxClientTypes.RetentionPeriod?
        /// The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume.
        /// This member is required.
        public var minimumRetention: FSxClientTypes.RetentionPeriod?

        public init(
            defaultRetention: FSxClientTypes.RetentionPeriod? = nil,
            maximumRetention: FSxClientTypes.RetentionPeriod? = nil,
            minimumRetention: FSxClientTypes.RetentionPeriod? = nil
        )
        {
            self.defaultRetention = defaultRetention
            self.maximumRetention = maximumRetention
            self.minimumRetention = minimumRetention
        }
    }

}

extension FSxClientTypes {

    public enum SnaplockType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compliance
        case enterprise
        case sdkUnknown(Swift.String)

        public static var allCases: [SnaplockType] {
            return [
                .compliance,
                .enterprise
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .enterprise: return "ENTERPRISE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Specifies the SnapLock configuration for an FSx for ONTAP SnapLock volume.
    public struct SnaplockConfiguration {
        /// Enables or disables the audit log volume for an FSx for ONTAP SnapLock volume. The default value is false. If you set AuditLogVolume to true, the SnapLock volume is created as an audit log volume. The minimum retention period for an audit log volume is six months. For more information, see [ SnapLock audit log volumes](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/how-snaplock-works.html#snaplock-audit-log-volume).
        public var auditLogVolume: Swift.Bool?
        /// The configuration object for setting the autocommit period of files in an FSx for ONTAP SnapLock volume.
        public var autocommitPeriod: FSxClientTypes.AutocommitPeriod?
        /// Enables, disables, or permanently disables privileged delete on an FSx for ONTAP SnapLock Enterprise volume. Enabling privileged delete allows SnapLock administrators to delete write once, read many (WORM) files even if they have active retention periods. PERMANENTLY_DISABLED is a terminal state. If privileged delete is permanently disabled on a SnapLock volume, you can't re-enable it. The default value is DISABLED. For more information, see [Privileged delete](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-enterprise.html#privileged-delete).
        public var privilegedDelete: FSxClientTypes.PrivilegedDelete?
        /// Specifies the retention period of an FSx for ONTAP SnapLock volume.
        public var retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod?
        /// Specifies the retention mode of an FSx for ONTAP SnapLock volume. After it is set, it can't be changed. You can choose one of the following retention modes:
        ///
        /// * COMPLIANCE: Files transitioned to write once, read many (WORM) on a Compliance volume can't be deleted until their retention periods expire. This retention mode is used to address government or industry-specific mandates or to protect against ransomware attacks. For more information, see [SnapLock Compliance](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-compliance.html).
        ///
        /// * ENTERPRISE: Files transitioned to WORM on an Enterprise volume can be deleted by authorized users before their retention periods expire using privileged delete. This retention mode is used to advance an organization's data integrity and internal compliance or to test retention settings before using SnapLock Compliance. For more information, see [SnapLock Enterprise](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-enterprise.html).
        public var snaplockType: FSxClientTypes.SnaplockType?
        /// Enables or disables volume-append mode on an FSx for ONTAP SnapLock volume. Volume-append mode allows you to create WORM-appendable files and write data to them incrementally. The default value is false. For more information, see [Volume-append mode](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/worm-state.html#worm-state-append).
        public var volumeAppendModeEnabled: Swift.Bool?

        public init(
            auditLogVolume: Swift.Bool? = nil,
            autocommitPeriod: FSxClientTypes.AutocommitPeriod? = nil,
            privilegedDelete: FSxClientTypes.PrivilegedDelete? = nil,
            retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod? = nil,
            snaplockType: FSxClientTypes.SnaplockType? = nil,
            volumeAppendModeEnabled: Swift.Bool? = nil
        )
        {
            self.auditLogVolume = auditLogVolume
            self.autocommitPeriod = autocommitPeriod
            self.privilegedDelete = privilegedDelete
            self.retentionPeriod = retentionPeriod
            self.snaplockType = snaplockType
            self.volumeAppendModeEnabled = volumeAppendModeEnabled
        }
    }

}

extension FSxClientTypes {

    public enum TieringPolicyName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case auto
        case `none`
        case snapshotOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [TieringPolicyName] {
            return [
                .all,
                .auto,
                .none,
                .snapshotOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .auto: return "AUTO"
            case .none: return "NONE"
            case .snapshotOnly: return "SNAPSHOT_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Describes the data tiering policy for an ONTAP volume. When enabled, Amazon FSx for ONTAP's intelligent tiering automatically transitions a volume's data between the file system's primary storage and capacity pool storage based on your access patterns. Valid tiering policies are the following:
    ///
    /// * SNAPSHOT_ONLY - (Default value) moves cold snapshots to the capacity pool storage tier.
    ///
    ///
    ///
    ///
    /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
    ///
    ///
    ///
    ///
    /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
    ///
    ///
    ///
    ///
    /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
    public struct TieringPolicy {
        /// Specifies the number of days that user data in a volume must remain inactive before it is considered "cold" and moved to the capacity pool. Used with the AUTO and SNAPSHOT_ONLY tiering policies. Enter a whole number between 2 and 183. Default values are 31 days for AUTO and 2 days for SNAPSHOT_ONLY.
        public var coolingPeriod: Swift.Int?
        /// Specifies the tiering policy used to transition data. Default value is SNAPSHOT_ONLY.
        ///
        /// * SNAPSHOT_ONLY - moves cold snapshots to the capacity pool storage tier.
        ///
        /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
        ///
        /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
        ///
        /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
        public var name: FSxClientTypes.TieringPolicyName?

        public init(
            coolingPeriod: Swift.Int? = nil,
            name: FSxClientTypes.TieringPolicyName? = nil
        )
        {
            self.coolingPeriod = coolingPeriod
            self.name = name
        }
    }

}

extension FSxClientTypes {

    public enum VolumeStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case flexgroup
        case flexvol
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeStyle] {
            return [
                .flexgroup,
                .flexvol
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .flexgroup: return "FLEXGROUP"
            case .flexvol: return "FLEXVOL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for NetApp ONTAP volume.
    public struct OntapVolumeConfiguration {
        /// This structure specifies configuration options for a volume’s storage aggregate or aggregates.
        public var aggregateConfiguration: FSxClientTypes.AggregateConfiguration?
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the FlexCache endpoint type of the volume. Valid values are the following:
        ///
        /// * NONE specifies that the volume doesn't have a FlexCache configuration. NONE is the default.
        ///
        /// * ORIGIN specifies that the volume is the origin volume for a FlexCache volume.
        ///
        /// * CACHE specifies that the volume is a FlexCache volume.
        public var flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType?
        /// Specifies the directory that network-attached storage (NAS) clients use to mount the volume, along with the storage virtual machine (SVM) Domain Name System (DNS) name or IP address. You can create a JunctionPath directly below a parent volume junction or on a directory within a volume. A JunctionPath for a volume named vol3 might be /vol1/vol2/vol3, or /vol1/dir2/vol3, or even /dir1/dir2/vol3.
        public var junctionPath: Swift.String?
        /// Specifies the type of volume. Valid values are the following:
        ///
        /// * RW specifies a read/write volume. RW is the default.
        ///
        /// * DP specifies a data-protection volume. You can protect data by replicating it to data-protection mirror copies. If a disaster occurs, you can use these data-protection mirror copies to recover data.
        ///
        /// * LS specifies a load-sharing mirror volume. A load-sharing mirror reduces the network traffic to a FlexVol volume by providing additional read-only access to clients.
        public var ontapVolumeType: FSxClientTypes.OntapVolumeType?
        /// The security style for the volume, which can be UNIX, NTFS, or MIXED.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// The configured size of the volume, in bytes.
        public var sizeInBytes: Swift.Int?
        /// The configured size of the volume, in megabytes (MBs).
        public var sizeInMegabytes: Swift.Int?
        /// The SnapLock configuration object for an FSx for ONTAP SnapLock volume.
        public var snaplockConfiguration: FSxClientTypes.SnaplockConfiguration?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// The volume's storage efficiency setting.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// The ID of the volume's storage virtual machine.
        public var storageVirtualMachineId: Swift.String?
        /// A Boolean flag indicating whether this volume is the root volume for its storage virtual machine (SVM). Only one volume on an SVM can be the root volume. This value defaults to false. If this value is true, then this is the SVM root volume. This flag is useful when you're deleting an SVM, because you must first delete all non-root volumes. This flag, when set to false, helps you identify which volumes to delete before you can delete the SVM.
        public var storageVirtualMachineRoot: Swift.Bool?
        /// The volume's TieringPolicy setting.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?
        /// The volume's universally unique identifier (UUID).
        public var uuid: Swift.String?
        /// Use to specify the style of an ONTAP volume. For more information about FlexVols and FlexGroups, see [Volume types](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/volume-types.html) in Amazon FSx for NetApp ONTAP User Guide.
        public var volumeStyle: FSxClientTypes.VolumeStyle?

        public init(
            aggregateConfiguration: FSxClientTypes.AggregateConfiguration? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType? = nil,
            junctionPath: Swift.String? = nil,
            ontapVolumeType: FSxClientTypes.OntapVolumeType? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInBytes: Swift.Int? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snaplockConfiguration: FSxClientTypes.SnaplockConfiguration? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            storageVirtualMachineRoot: Swift.Bool? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil,
            uuid: Swift.String? = nil,
            volumeStyle: FSxClientTypes.VolumeStyle? = nil
        )
        {
            self.aggregateConfiguration = aggregateConfiguration
            self.copyTagsToBackups = copyTagsToBackups
            self.flexCacheEndpointType = flexCacheEndpointType
            self.junctionPath = junctionPath
            self.ontapVolumeType = ontapVolumeType
            self.securityStyle = securityStyle
            self.sizeInBytes = sizeInBytes
            self.sizeInMegabytes = sizeInMegabytes
            self.snaplockConfiguration = snaplockConfiguration
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.storageVirtualMachineId = storageVirtualMachineId
            self.storageVirtualMachineRoot = storageVirtualMachineRoot
            self.tieringPolicy = tieringPolicy
            self.uuid = uuid
            self.volumeStyle = volumeStyle
        }
    }

}

extension FSxClientTypes {

    public enum OpenZFSCopyStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clone
        case fullCopy
        case incrementalCopy
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSCopyStrategy] {
            return [
                .clone,
                .fullCopy,
                .incrementalCopy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clone: return "CLONE"
            case .fullCopy: return "FULL_COPY"
            case .incrementalCopy: return "INCREMENTAL_COPY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum OpenZFSDataCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lz4
        case `none`
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSDataCompressionType] {
            return [
                .lz4,
                .none,
                .zstd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lz4: return "LZ4"
            case .none: return "NONE"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Specifies who can mount an OpenZFS file system and the options available while mounting the file system.
    public struct OpenZFSClientConfiguration {
        /// A value that specifies who can mount the file system. You can provide a wildcard character (*), an IP address (0.0.0.0), or a CIDR address (192.0.2.0/24). By default, Amazon FSx uses the wildcard character when specifying the client.
        /// This member is required.
        public var clients: Swift.String?
        /// The options to use when mounting the file system. For a list of options that you can use with Network File System (NFS), see the [exports(5) - Linux man page](https://linux.die.net/man/5/exports). When choosing your options, consider the following:
        ///
        /// * crossmnt is used by default. If you don't specify crossmnt when changing the client configuration, you won't be able to see or access snapshots in your file system's snapshot directory.
        ///
        /// * sync is used by default. If you instead specify async, the system acknowledges writes before writing to disk. If the system crashes before the writes are finished, you lose the unwritten data.
        /// This member is required.
        public var options: [Swift.String]?

        public init(
            clients: Swift.String? = nil,
            options: [Swift.String]? = nil
        )
        {
            self.clients = clients
            self.options = options
        }
    }

}

extension FSxClientTypes {
    /// The Network File System (NFS) configurations for mounting an Amazon FSx for OpenZFS file system.
    public struct OpenZFSNfsExport {
        /// A list of configuration objects that contain the client and options for mounting the OpenZFS file system.
        /// This member is required.
        public var clientConfigurations: [FSxClientTypes.OpenZFSClientConfiguration]?

        public init(
            clientConfigurations: [FSxClientTypes.OpenZFSClientConfiguration]? = nil
        )
        {
            self.clientConfigurations = clientConfigurations
        }
    }

}

extension FSxClientTypes {
    /// The snapshot configuration used when creating an Amazon FSx for OpenZFS volume from a snapshot.
    public struct OpenZFSOriginSnapshotConfiguration {
        /// The strategy used when copying data from the snapshot to the new volume.
        ///
        /// * CLONE - The new volume references the data in the origin snapshot. Cloning a snapshot is faster than copying the data from a snapshot to a new volume and doesn't consume disk throughput. However, the origin snapshot can't be deleted if there is a volume using its copied data.
        ///
        /// * FULL_COPY - Copies all data from the snapshot to the new volume.
        ///
        ///
        /// The INCREMENTAL_COPY option is only for updating an existing volume by using a snapshot from another FSx for OpenZFS file system. For more information, see [CopySnapshotAndUpdateVolume](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CopySnapshotAndUpdateVolume.html).
        public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var snapshotARN: Swift.String?

        public init(
            copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
            snapshotARN: Swift.String? = nil
        )
        {
            self.copyStrategy = copyStrategy
            self.snapshotARN = snapshotARN
        }
    }

}

extension FSxClientTypes {

    public enum OpenZFSQuotaType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenZFSQuotaType] {
            return [
                .group,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Used to configure quotas that define how much storage a user or group can use on an FSx for OpenZFS volume. For more information, see [Volume properties](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-volumes.html#volume-properties) in the FSx for OpenZFS User Guide.
    public struct OpenZFSUserOrGroupQuota {
        /// The ID of the user or group that the quota applies to.
        /// This member is required.
        public var id: Swift.Int?
        /// The user or group's storage quota, in gibibytes (GiB).
        /// This member is required.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// Specifies whether the quota applies to a user or group.
        /// This member is required.
        public var type: FSxClientTypes.OpenZFSQuotaType?

        public init(
            id: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            type: FSxClientTypes.OpenZFSQuotaType? = nil
        )
        {
            self.id = id
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.type = type
        }
    }

}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for OpenZFS volume.
    public struct OpenZFSVolumeConfiguration {
        /// Specifies the strategy used when copying data from the snapshot to the new volume.
        ///
        /// * CLONE - The new volume references the data in the origin snapshot. Cloning a snapshot is faster than copying data from the snapshot to a new volume and doesn't consume disk throughput. However, the origin snapshot can't be deleted if there is a volume using its copied data.
        ///
        /// * FULL_COPY - Copies all data from the snapshot to the new volume. Specify this option to create the volume from a snapshot on another FSx for OpenZFS file system.
        ///
        ///
        /// The INCREMENTAL_COPY option is only for updating an existing volume by using a snapshot from another FSx for OpenZFS file system. For more information, see [CopySnapshotAndUpdateVolume](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CopySnapshotAndUpdateVolume.html).
        public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// A Boolean value indicating whether dependent clone volumes created from intermediate snapshots should be deleted when a volume is restored from snapshot.
        public var deleteClonedVolumes: Swift.Bool?
        /// A Boolean value indicating whether snapshot data that differs between the current state and the specified snapshot should be overwritten when a volume is restored from a snapshot.
        public var deleteIntermediateData: Swift.Bool?
        /// A Boolean value indicating whether snapshots between the current state and the specified snapshot should be deleted when a volume is restored from snapshot.
        public var deleteIntermediateSnaphots: Swift.Bool?
        /// The ID of the snapshot that's being copied or was most recently copied to the destination volume.
        public var destinationSnapshot: Swift.String?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// The configuration object that specifies the snapshot to use as the origin of the data for the volume.
        public var originSnapshot: FSxClientTypes.OpenZFSOriginSnapshotConfiguration?
        /// The ID of the parent volume.
        public var parentVolumeId: Swift.String?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. For guidance on when to set a custom record size, see the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// Specifies the ID of the snapshot to which the volume was restored.
        public var restoreToSnapshot: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var sourceSnapshotARN: Swift.String?
        /// The maximum amount of storage in gibibtyes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved.
        public var storageCapacityReservationGiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?
        /// The path to the volume from the root volume. For example, fsx/parentVolume/volume1.
        public var volumePath: Swift.String?

        public init(
            copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            deleteClonedVolumes: Swift.Bool? = nil,
            deleteIntermediateData: Swift.Bool? = nil,
            deleteIntermediateSnaphots: Swift.Bool? = nil,
            destinationSnapshot: Swift.String? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            originSnapshot: FSxClientTypes.OpenZFSOriginSnapshotConfiguration? = nil,
            parentVolumeId: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            restoreToSnapshot: Swift.String? = nil,
            sourceSnapshotARN: Swift.String? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil,
            volumePath: Swift.String? = nil
        )
        {
            self.copyStrategy = copyStrategy
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.deleteClonedVolumes = deleteClonedVolumes
            self.deleteIntermediateData = deleteIntermediateData
            self.deleteIntermediateSnaphots = deleteIntermediateSnaphots
            self.destinationSnapshot = destinationSnapshot
            self.nfsExports = nfsExports
            self.originSnapshot = originSnapshot
            self.parentVolumeId = parentVolumeId
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.restoreToSnapshot = restoreToSnapshot
            self.sourceSnapshotARN = sourceSnapshotARN
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
            self.volumePath = volumePath
        }
    }

}

extension FSxClientTypes {

    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ontap
        case openzfs
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .ontap,
                .openzfs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ontap: return "ONTAP"
            case .openzfs: return "OPENZFS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A generic error indicating a failure with a client request.
public struct BadRequest: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequest" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// No Amazon FSx file systems were found based upon supplied parameters.
public struct FileSystemNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FileSystemNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A generic error indicating a server-side failure.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request object specifying one or more DNS alias names to associate with an Amazon FSx for Windows File Server file system.
public struct AssociateFileSystemAliasesInput {
    /// An array of one or more DNS alias names to associate with the file system. The alias name has to comply with the following formatting requirements:
    ///
    /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain , for example, accounting.corp.example.com.
    ///
    /// * Can contain alphanumeric characters and the hyphen (-).
    ///
    /// * Cannot start or end with a hyphen.
    ///
    /// * Can start with a numeric.
    ///
    ///
    /// For DNS alias names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
    /// This member is required.
    public var aliases: [Swift.String]?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the file system with which you want to associate one or more DNS aliases.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init(
        aliases: [Swift.String]? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

/// The system generated response showing the DNS aliases that Amazon FSx is attempting to associate with the file system. Use the API operation to monitor the status of the aliases Amazon FSx is associating with the file system. It can take up to 2.5 minutes for the alias status to change from CREATING to AVAILABLE.
public struct AssociateFileSystemAliasesOutput {
    /// An array of the DNS aliases that Amazon FSx is associating with the file system.
    public var aliases: [FSxClientTypes.Alias]?

    public init(
        aliases: [FSxClientTypes.Alias]? = nil
    )
    {
        self.aliases = aliases
    }
}

extension FSxClientTypes {

    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case changed
        case deleted
        case new
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .changed,
                .deleted,
                .new
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .changed: return "CHANGED"
            case .deleted: return "DELETED"
            case .new: return "NEW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Describes a data repository association's automatic export policy. The AutoExportPolicy defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file. The AutoExportPolicy is only supported on Amazon FSx for Lustre file systems with a data repository association.
    public struct AutoExportPolicy {
        /// The AutoExportPolicy can have the following event values:
        ///
        /// * NEW - New files and directories are automatically exported to the data repository as they are added to the file system.
        ///
        /// * CHANGED - Changes to files and directories on the file system are automatically exported to the data repository.
        ///
        /// * DELETED - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
        ///
        ///
        /// You can define any combination of event types for your AutoExportPolicy.
        public var events: [FSxClientTypes.EventType]?

        public init(
            events: [FSxClientTypes.EventType]? = nil
        )
        {
            self.events = events
        }
    }

}

extension FSxClientTypes {
    /// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket. The AutoImportPolicy is only supported on Amazon FSx for Lustre file systems with a data repository association.
    public struct AutoImportPolicy {
        /// The AutoImportPolicy can have the following event values:
        ///
        /// * NEW - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * CHANGED - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
        ///
        /// * DELETED - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
        ///
        ///
        /// You can define any combination of event types for your AutoImportPolicy.
        public var events: [FSxClientTypes.EventType]?

        public init(
            events: [FSxClientTypes.EventType]? = nil
        )
        {
            self.events = events
        }
    }

}

/// The data repository task could not be canceled because the task has already ended.
public struct DataRepositoryTaskEnded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataRepositoryTaskEnded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The data repository task or tasks you specified could not be found.
public struct DataRepositoryTaskNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataRepositoryTaskNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested operation is not supported for this resource or API.
public struct UnsupportedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Cancels a data repository task.
public struct CancelDataRepositoryTaskInput {
    /// Specifies the data repository task to cancel.
    /// This member is required.
    public var taskId: Swift.String?

    public init(
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

extension FSxClientTypes {

    public enum DataRepositoryTaskLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canceled
        case canceling
        case executing
        case failed
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskLifecycle] {
            return [
                .canceled,
                .canceling,
                .executing,
                .failed,
                .pending,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .canceling: return "CANCELING"
            case .executing: return "EXECUTING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CancelDataRepositoryTaskOutput {
    /// The lifecycle status of the data repository task, as follows:
    ///
    /// * PENDING - Amazon FSx has not started the task.
    ///
    /// * EXECUTING - Amazon FSx is processing the task.
    ///
    /// * FAILED - Amazon FSx was not able to complete the task. For example, there may be files the task failed to process. The [DataRepositoryTaskFailureDetails] property provides more information about task failures.
    ///
    /// * SUCCEEDED - FSx completed the task successfully.
    ///
    /// * CANCELED - Amazon FSx canceled the task and it did not complete.
    ///
    /// * CANCELING - FSx is in process of canceling the task.
    public var lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
    /// The ID of the task being canceled.
    public var taskId: Swift.String?

    public init(
        lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.taskId = taskId
    }
}

/// No Amazon FSx backups were found based upon the supplied parameters.
public struct BackupNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The error returned when a second request is received with the same client request token but different parameters settings. A client request token should always uniquely identify a single request.
public struct IncompatibleParameterError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
        /// A parameter that is incompatible with the earlier request.
        /// This member is required.
        public internal(set) var parameter: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleParameterError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        parameter: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.parameter = parameter
    }
}

/// Amazon FSx doesn't support Multi-AZ Windows File Server copy backup in the destination Region, so the copied backup can't be restored.
public struct IncompatibleRegionForMultiAZ: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleRegionForMultiAZ" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Key Management Service (KMS) key of the destination backup is not valid.
public struct InvalidDestinationKmsKey: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDestinationKmsKey" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Region provided for SourceRegion is not valid or is in a different Amazon Web Services partition.
public struct InvalidRegion: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRegion" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Key Management Service (KMS) key of the source backup is not valid.
public struct InvalidSourceKmsKey: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSourceKmsKey" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FSxClientTypes {

    /// The types of limits on your service utilization. Limits include file system count, total throughput capacity, total storage, and total user-initiated backups. These limits apply for a specific account in a specific Amazon Web Services Region. You can increase some of them by contacting Amazon Web Services Support.
    public enum ServiceLimit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fileCacheCount
        case fileSystemCount
        case storageVirtualMachinesPerFileSystem
        case totalInProgressCopyBackups
        case totalSsdIops
        case totalStorage
        case totalThroughputCapacity
        case totalUserInitiatedBackups
        case totalUserTags
        case volumesPerFileSystem
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceLimit] {
            return [
                .fileCacheCount,
                .fileSystemCount,
                .storageVirtualMachinesPerFileSystem,
                .totalInProgressCopyBackups,
                .totalSsdIops,
                .totalStorage,
                .totalThroughputCapacity,
                .totalUserInitiatedBackups,
                .totalUserTags,
                .volumesPerFileSystem
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fileCacheCount: return "FILE_CACHE_COUNT"
            case .fileSystemCount: return "FILE_SYSTEM_COUNT"
            case .storageVirtualMachinesPerFileSystem: return "STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM"
            case .totalInProgressCopyBackups: return "TOTAL_IN_PROGRESS_COPY_BACKUPS"
            case .totalSsdIops: return "TOTAL_SSD_IOPS"
            case .totalStorage: return "TOTAL_STORAGE"
            case .totalThroughputCapacity: return "TOTAL_THROUGHPUT_CAPACITY"
            case .totalUserInitiatedBackups: return "TOTAL_USER_INITIATED_BACKUPS"
            case .totalUserTags: return "TOTAL_USER_TAGS"
            case .volumesPerFileSystem: return "VOLUMES_PER_FILE_SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An error indicating that a particular service limit was exceeded. You can increase some service limits by contacting Amazon Web Services Support.
public struct ServiceLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Enumeration of the service limit that was exceeded.
        /// This member is required.
        public internal(set) var limit: FSxClientTypes.ServiceLimit? = nil
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        limit: FSxClientTypes.ServiceLimit? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.limit = limit
        self.properties.message = message
    }
}

/// The request was rejected because the lifecycle status of the source backup isn't AVAILABLE.
public struct SourceBackupUnavailable: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public internal(set) var backupId: Swift.String? = nil
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceBackupUnavailable" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        backupId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.backupId = backupId
        self.properties.message = message
    }
}

public struct CopyBackupInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// A Boolean flag indicating whether tags from the source backup should be copied to the backup copy. This value defaults to false. If you set CopyTags to true and the source backup has existing tags, you can use the Tags parameter to create new tags, provided that the sum of the source backup tags and the new tags doesn't exceed 50. Both sets of tags are merged. If there are tag conflicts (for example, two tags with the same key but different values), the tags created with the Tags parameter take precedence.
    public var copyTags: Swift.Bool?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The ID of the source backup. Specifies the ID of the backup that's being copied.
    /// This member is required.
    public var sourceBackupId: Swift.String?
    /// The source Amazon Web Services Region of the backup. Specifies the Amazon Web Services Region from which the backup is being copied. The source and destination Regions must be in the same Amazon Web Services partition. If you don't specify a Region, SourceRegion defaults to the Region where the request is sent from (in-Region copy).
    public var sourceRegion: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        copyTags: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceBackupId: Swift.String? = nil,
        sourceRegion: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyTags = copyTags
        self.kmsKeyId = kmsKeyId
        self.sourceBackupId = sourceBackupId
        self.sourceRegion = sourceRegion
        self.tags = tags
    }
}

extension FSxClientTypes {
    /// If backup creation fails, this structure contains the details of that failure.
    public struct BackupFailureDetails {
        /// A message describing the backup-creation failure.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    /// The lifecycle status of the backup.
    ///
    /// * AVAILABLE - The backup is fully available.
    ///
    /// * PENDING - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.
    ///
    /// * CREATING - Amazon FSx is creating the new user-initiated backup.
    ///
    /// * TRANSFERRING - For user-initiated backups on Lustre file systems only; Amazon FSx is backing up the file system.
    ///
    /// * COPYING - Amazon FSx is copying the backup.
    ///
    /// * DELETED - Amazon FSx deleted the backup and it's no longer available.
    ///
    /// * FAILED - Amazon FSx couldn't finish the backup.
    public enum BackupLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case copying
        case creating
        case deleted
        case failed
        case pending
        case transferring
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupLifecycle] {
            return [
                .available,
                .copying,
                .creating,
                .deleted,
                .failed,
                .pending,
                .transferring
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .transferring: return "TRANSFERRING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fileSystem
        case volume
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .fileSystem,
                .volume
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fileSystem: return "FILE_SYSTEM"
            case .volume: return "VOLUME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    /// The type of the backup.
    public enum BackupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case awsBackup
        case userInitiated
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupType] {
            return [
                .automatic,
                .awsBackup,
                .userInitiated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .awsBackup: return "AWS_BACKUP"
            case .userInitiated: return "USER_INITIATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum UpdateOpenZFSVolumeOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteClonedVolumes
        case deleteIntermediateData
        case deleteIntermediateSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateOpenZFSVolumeOption] {
            return [
                .deleteClonedVolumes,
                .deleteIntermediateData,
                .deleteIntermediateSnapshots
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteClonedVolumes: return "DELETE_CLONED_VOLUMES"
            case .deleteIntermediateData: return "DELETE_INTERMEDIATE_DATA"
            case .deleteIntermediateSnapshots: return "DELETE_INTERMEDIATE_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CopySnapshotAndUpdateVolumeInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the strategy to use when copying data from a snapshot to the volume.
    ///
    /// * FULL_COPY - Copies all data from the snapshot to the volume.
    ///
    /// * INCREMENTAL_COPY - Copies only the snapshot data that's changed since the previous replication.
    ///
    ///
    /// CLONE isn't a valid copy strategy option for the CopySnapshotAndUpdateVolume operation.
    public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
    /// Confirms that you want to delete data on the destination volume that wasn’t there during the previous snapshot replication. Your replication will fail if you don’t include an option for a specific type of data and that data is on your destination. For example, if you don’t include DELETE_INTERMEDIATE_SNAPSHOTS and there are intermediate snapshots on the destination, you can’t copy the snapshot.
    ///
    /// * DELETE_INTERMEDIATE_SNAPSHOTS - Deletes snapshots on the destination volume that aren’t on the source volume.
    ///
    /// * DELETE_CLONED_VOLUMES - Deletes snapshot clones on the destination volume that aren't on the source volume.
    ///
    /// * DELETE_INTERMEDIATE_DATA - Overwrites snapshots on the destination volume that don’t match the source snapshot that you’re copying.
    public var options: [FSxClientTypes.UpdateOpenZFSVolumeOption]?
    /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var sourceSnapshotARN: Swift.String?
    /// Specifies the ID of the volume that you are copying the snapshot to.
    /// This member is required.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
        options: [FSxClientTypes.UpdateOpenZFSVolumeOption]? = nil,
        sourceSnapshotARN: Swift.String? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyStrategy = copyStrategy
        self.options = options
        self.sourceSnapshotARN = sourceSnapshotARN
        self.volumeId = volumeId
    }
}

/// Another backup is already under way. Wait for completion before initiating additional backups of this file system.
public struct BackupInProgress: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupInProgress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// No Amazon FSx volumes were found based upon the supplied parameters.
public struct VolumeNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "VolumeNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request object for the CreateBackup operation.
public struct CreateBackupInput {
    /// (Optional) A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system to back up.
    public var fileSystemId: Swift.String?
    /// (Optional) The tags to apply to the backup at backup creation. The key value of the Name tag appears in the console as the backup name. If you have set CopyTagsToBackups to true, and you specify one or more tags using the CreateBackup operation, no existing file system tags are copied from the file system to the backup.
    public var tags: [FSxClientTypes.Tag]?
    /// (Optional) The ID of the FSx for ONTAP volume to back up.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.tags = tags
        self.volumeId = volumeId
    }
}

extension FSxClientTypes {
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx for Lustre file system with a data repository association. The configuration consists of an AutoImportPolicy that defines which file events on the data repository are automatically imported to the file system and an AutoExportPolicy that defines which file events on the file system are automatically exported to the data repository. File events are when files or directories are added, changed, or deleted on the file system or the data repository. Data repository associations on Amazon File Cache don't use S3DataRepositoryConfiguration because they don't support automatic import or automatic export.
    public struct S3DataRepositoryConfiguration {
        /// Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.
        public var autoExportPolicy: FSxClientTypes.AutoExportPolicy?
        /// Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicy?

        public init(
            autoExportPolicy: FSxClientTypes.AutoExportPolicy? = nil,
            autoImportPolicy: FSxClientTypes.AutoImportPolicy? = nil
        )
        {
            self.autoExportPolicy = autoExportPolicy
            self.autoImportPolicy = autoImportPolicy
        }
    }

}

public struct CreateDataRepositoryAssociationInput {
    /// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Default is false.
    public var batchImportMetaDataOnCreate: Swift.Bool?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to.
    /// This member is required.
    public var dataRepositoryPath: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory. If you specify only a forward slash (/) as the file system path, you can link only one data repository to the file system. You can only specify "/" as the file system path for the first data repository associated with a file system.
    public var fileSystemPath: Swift.String?
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
    public var importedFileChunkSize: Swift.Int?
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    public var s3: FSxClientTypes.S3DataRepositoryConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        batchImportMetaDataOnCreate: Swift.Bool? = nil,
        clientRequestToken: Swift.String? = nil,
        dataRepositoryPath: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        fileSystemPath: Swift.String? = nil,
        importedFileChunkSize: Swift.Int? = nil,
        s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate
        self.clientRequestToken = clientRequestToken
        self.dataRepositoryPath = dataRepositoryPath
        self.fileSystemId = fileSystemId
        self.fileSystemPath = fileSystemPath
        self.importedFileChunkSize = importedFileChunkSize
        self.s3 = s3
        self.tags = tags
    }
}

extension FSxClientTypes {

    public enum NfsVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case nfs3
        case sdkUnknown(Swift.String)

        public static var allCases: [NfsVersion] {
            return [
                .nfs3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .nfs3: return "NFS3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository.
    public struct NFSDataRepositoryConfiguration {
        /// This parameter is not supported for Amazon File Cache.
        public var autoExportPolicy: FSxClientTypes.AutoExportPolicy?
        /// A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.
        public var dnsIps: [Swift.String]?
        /// The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is NFS3, which indicates that the data repository must support the NFSv3 protocol.
        /// This member is required.
        public var version: FSxClientTypes.NfsVersion?

        public init(
            autoExportPolicy: FSxClientTypes.AutoExportPolicy? = nil,
            dnsIps: [Swift.String]? = nil,
            version: FSxClientTypes.NfsVersion? = nil
        )
        {
            self.autoExportPolicy = autoExportPolicy
            self.dnsIps = dnsIps
            self.version = version
        }
    }

}

extension FSxClientTypes {
    /// The configuration of a data repository association that links an Amazon FSx for Lustre file system to an Amazon S3 bucket or an Amazon File Cache resource to an Amazon S3 bucket or an NFS file system. The data repository association configuration object is returned in the response of the following operations:
    ///
    /// * CreateDataRepositoryAssociation
    ///
    /// * UpdateDataRepositoryAssociation
    ///
    /// * DescribeDataRepositoryAssociations
    ///
    ///
    /// Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and 2.15 file systems, excluding scratch_1 deployment type.
    public struct DataRepositoryAssociation {
        /// The system-generated, unique ID of the data repository association.
        public var associationId: Swift.String?
        /// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true. BatchImportMetaDataOnCreate is not supported for data repositories linked to an Amazon File Cache resource.
        public var batchImportMetaDataOnCreate: Swift.Bool?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// The path to the data repository that will be linked to the cache or file system.
        ///
        /// * For Amazon File Cache, the path can be an NFS data repository that will be linked to the cache. The path can be in one of two formats:
        ///
        /// * If you are not using the DataRepositorySubdirectories parameter, the path is to an NFS Export directory (or one of its subdirectories) in the format nsf://nfs-domain-name/exportpath. You can therefore link a single NFS Export to a single data repository association.
        ///
        /// * If you are using the DataRepositorySubdirectories parameter, the path is the domain name of the NFS file system in the format nfs://filer-domain-name, which indicates the root of the subdirectories specified with the DataRepositorySubdirectories parameter.
        ///
        ///
        ///
        ///
        /// * For Amazon File Cache, the path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        ///
        /// * For Amazon FSx for Lustre, the path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        public var dataRepositoryPath: Swift.String?
        /// For Amazon File Cache, a list of NFS Exports that will be linked with an NFS data repository association. All the subdirectories must be on a single NFS file system. The Export paths are in the format /exportpath1. To use this parameter, you must configure DataRepositoryPath as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that DataRepositorySubdirectories is not supported for S3 data repositories.
        public var dataRepositorySubdirectories: [Swift.String]?
        /// Provides detailed information about the data repository if its Lifecycle is set to MISCONFIGURED or FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryFailureDetails?
        /// The globally unique ID of the Amazon File Cache resource.
        public var fileCacheId: Swift.String?
        /// A path on the Amazon File Cache that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the path is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path /ns1/, then you cannot link another data repository with cache path /ns1/ns2. This path specifies the directory in your cache where files will be exported from. This cache directory can be linked to only one data repository (S3 or NFS) and no other data repository can be linked to the directory. The cache path can only be set to root (/) on an NFS DRA when DataRepositorySubdirectories is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache. The cache path cannot be set to root (/) for an S3 DRA.
        public var fileCachePath: Swift.String?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory. If you specify only a forward slash (/) as the file system path, you can link only one data repository to the file system. You can only specify "/" as the file system path for the first data repository associated with a file system.
        public var fileSystemPath: Swift.String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system or cache. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public var importedFileChunkSize: Swift.Int?
        /// Describes the state of a data repository association. The lifecycle can have the following values:
        ///
        /// * CREATING - The data repository association between the file system or cache and the data repository is being created. The data repository is unavailable.
        ///
        /// * AVAILABLE - The data repository association is available for use.
        ///
        /// * MISCONFIGURED - The data repository association is misconfigured. Until the configuration is corrected, automatic import and automatic export will not work (only for Amazon FSx for Lustre).
        ///
        /// * UPDATING - The data repository association is undergoing a customer initiated update that might affect its availability.
        ///
        /// * DELETING - The data repository association is undergoing a customer initiated deletion.
        ///
        /// * FAILED - The data repository association is in a terminal state that cannot be recovered.
        public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?
        /// The configuration for an NFS data repository linked to an Amazon File Cache resource with a data repository association.
        public var nfs: FSxClientTypes.NFSDataRepositoryConfiguration?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The configuration for an Amazon S3 data repository linked to an Amazon FSx for Lustre file system with a data repository association.
        public var s3: FSxClientTypes.S3DataRepositoryConfiguration?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?

        public init(
            associationId: Swift.String? = nil,
            batchImportMetaDataOnCreate: Swift.Bool? = nil,
            creationTime: Foundation.Date? = nil,
            dataRepositoryPath: Swift.String? = nil,
            dataRepositorySubdirectories: [Swift.String]? = nil,
            failureDetails: FSxClientTypes.DataRepositoryFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCachePath: Swift.String? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil,
            nfs: FSxClientTypes.NFSDataRepositoryConfiguration? = nil,
            resourceARN: Swift.String? = nil,
            s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil,
            tags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.associationId = associationId
            self.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate
            self.creationTime = creationTime
            self.dataRepositoryPath = dataRepositoryPath
            self.dataRepositorySubdirectories = dataRepositorySubdirectories
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCachePath = fileCachePath
            self.fileSystemId = fileSystemId
            self.fileSystemPath = fileSystemPath
            self.importedFileChunkSize = importedFileChunkSize
            self.lifecycle = lifecycle
            self.nfs = nfs
            self.resourceARN = resourceARN
            self.s3 = s3
            self.tags = tags
        }
    }

}

public struct CreateDataRepositoryAssociationOutput {
    /// The response object returned after the data repository association is created.
    public var association: FSxClientTypes.DataRepositoryAssociation?

    public init(
        association: FSxClientTypes.DataRepositoryAssociation? = nil
    )
    {
        self.association = association
    }
}

/// An existing data repository task is currently executing on the file system. Wait until the existing task has completed, then create the new task.
public struct DataRepositoryTaskExecuting: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataRepositoryTaskExecuting" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FSxClientTypes {

    public enum Unit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .days
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Defines the minimum amount of time since last access for a file to be eligible for release. Only files that have been exported to S3 and that were last accessed or modified before this point-in-time are eligible to be released from the Amazon FSx for Lustre file system.
    public struct DurationSinceLastAccess {
        /// The unit of time used by the Value parameter to determine if a file can be released, based on when it was last accessed. DAYS is the only supported value. This is a required parameter.
        public var unit: FSxClientTypes.Unit?
        /// An integer that represents the minimum amount of time (in days) since a file was last accessed in the file system. Only exported files with a MAX(atime, ctime, mtime) timestamp that is more than this amount of time in the past (relative to the task create time) will be released. The default of Value is 0. This is a required parameter. If an exported file meets the last accessed time criteria, its file or directory path must also be specified in the Paths parameter of the operation in order for the file to be released.
        public var value: Swift.Int?

        public init(
            unit: FSxClientTypes.Unit? = nil,
            value: Swift.Int? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension FSxClientTypes {
    /// The configuration that specifies a minimum amount of time since last access for an exported file to be eligible for release from an Amazon FSx for Lustre file system. Only files that were last accessed before this point-in-time can be released. For example, if you specify a last accessed time criteria of 9 days, only files that were last accessed 9.00001 or more days ago can be released. Only file data that has been exported to S3 can be released. Files that have not yet been exported to S3, such as new or changed files that have not been exported, are not eligible for release. When files are released, their metadata stays on the file system, so they can still be accessed later. Users and applications can access a released file by reading the file again, which restores data from Amazon S3 to the FSx for Lustre file system. If a file meets the last accessed time criteria, its file or directory path must also be specified with the Paths parameter of the operation in order for the file to be released.
    public struct ReleaseConfiguration {
        /// Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.
        public var durationSinceLastAccess: FSxClientTypes.DurationSinceLastAccess?

        public init(
            durationSinceLastAccess: FSxClientTypes.DurationSinceLastAccess? = nil
        )
        {
            self.durationSinceLastAccess = durationSinceLastAccess
        }
    }

}

extension FSxClientTypes {

    public enum ReportFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case reportCsv20191124
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportFormat] {
            return [
                .reportCsv20191124
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .reportCsv20191124: return "REPORT_CSV_20191124"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum ReportScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failedFilesOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportScope] {
            return [
                .failedFilesOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failedFilesOnly: return "FAILED_FILES_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Provides a report detailing the data repository task results of the files processed that match the criteria specified in the report Scope parameter. FSx delivers the report to the file system's linked data repository in Amazon S3, using the path specified in the report Path parameter. You can specify whether or not a report gets generated for a task using the Enabled parameter.
    public struct CompletionReport {
        /// Set Enabled to True to generate a CompletionReport when the task completes. If set to true, then you need to provide a report Scope, Path, and Format. Set Enabled to False if you do not want a CompletionReport generated when the task completes.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Required if Enabled is set to true. Specifies the format of the CompletionReport. REPORT_CSV_20191124 is the only format currently supported. When Format is set to REPORT_CSV_20191124, the CompletionReport is provided in CSV format, and is delivered to {path}/task-{id}/failures.csv.
        public var format: FSxClientTypes.ReportFormat?
        /// Required if Enabled is set to true. Specifies the location of the report on the file system's linked S3 data repository. An absolute path that defines where the completion report will be stored in the destination location. The Path you provide must be located within the file system’s ExportPath. An example Path value is "s3://myBucket/myExportPath/optionalPrefix". The report provides the following information for each file in the report: FilePath, FileStatus, and ErrorCode.
        public var path: Swift.String?
        /// Required if Enabled is set to true. Specifies the scope of the CompletionReport; FAILED_FILES_ONLY is the only scope currently supported. When Scope is set to FAILED_FILES_ONLY, the CompletionReport only contains information about files that the data repository task failed to process.
        public var scope: FSxClientTypes.ReportScope?

        public init(
            enabled: Swift.Bool? = nil,
            format: FSxClientTypes.ReportFormat? = nil,
            path: Swift.String? = nil,
            scope: FSxClientTypes.ReportScope? = nil
        )
        {
            self.enabled = enabled
            self.format = format
            self.path = path
            self.scope = scope
        }
    }

}

extension FSxClientTypes {

    public enum DataRepositoryTaskType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoTriggeredEviction
        case eviction
        case export
        case `import`
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskType] {
            return [
                .autoTriggeredEviction,
                .eviction,
                .export,
                .import
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoTriggeredEviction: return "AUTO_RELEASE_DATA"
            case .eviction: return "RELEASE_DATA_FROM_FILESYSTEM"
            case .export: return "EXPORT_TO_REPOSITORY"
            case .import: return "IMPORT_METADATA_FROM_REPOSITORY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDataRepositoryTaskInput {
    /// Specifies the amount of data to release, in GiB, by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
    public var capacityToRelease: Swift.Int?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// A list of paths for the data repository task to use when the task is processed. If a path that you provide isn't valid, the task fails. If you don't provide paths, the default behavior is to export all files to S3 (for export tasks), import all files from S3 (for import tasks), or release all exported files that meet the last accessed time criteria (for release tasks).
    ///
    /// * For export tasks, the list contains paths on the FSx for Lustre file system from which the files are exported to the Amazon S3 bucket. The default path is the file system root directory. The paths you provide need to be relative to the mount point of the file system. If the mount point is /mnt/fsx and /mnt/fsx/path1 is a directory or file on the file system you want to export, then the path to provide is path1.
    ///
    /// * For import tasks, the list contains paths in the Amazon S3 bucket from which POSIX metadata changes are imported to the FSx for Lustre file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix (where myPrefix is optional).
    ///
    /// * For release tasks, the list contains directory or file paths on the FSx for Lustre file system from which to release exported files. If a directory is specified, files within the directory are released. If a file path is specified, only that file is released. To release all exported files in the file system, specify a forward slash (/) as the path. A file must also meet the last accessed time criteria specified in for the file to be released.
    public var paths: [Swift.String]?
    /// The configuration that specifies the last accessed time criteria for files that will be released from an Amazon FSx for Lustre file system.
    public var releaseConfiguration: FSxClientTypes.ReleaseConfiguration?
    /// Defines whether or not Amazon FSx provides a CompletionReport once the task has completed. A CompletionReport provides a detailed report on the files that Amazon FSx processed that meet the criteria specified by the Scope parameter. For more information, see [Working with Task Completion Reports](https://docs.aws.amazon.com/fsx/latest/LustreGuide/task-completion-report.html).
    /// This member is required.
    public var report: FSxClientTypes.CompletionReport?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// Specifies the type of data repository task to create.
    ///
    /// * EXPORT_TO_REPOSITORY tasks export from your Amazon FSx for Lustre file system to a linked data repository.
    ///
    /// * IMPORT_METADATA_FROM_REPOSITORY tasks import metadata changes from a linked S3 bucket to your Amazon FSx for Lustre file system.
    ///
    /// * RELEASE_DATA_FROM_FILESYSTEM tasks release files in your Amazon FSx for Lustre file system that have been exported to a linked S3 bucket and that meet your specified release criteria.
    ///
    /// * AUTO_RELEASE_DATA tasks automatically release files from an Amazon File Cache resource.
    /// This member is required.
    public var type: FSxClientTypes.DataRepositoryTaskType?

    public init(
        capacityToRelease: Swift.Int? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        paths: [Swift.String]? = nil,
        releaseConfiguration: FSxClientTypes.ReleaseConfiguration? = nil,
        report: FSxClientTypes.CompletionReport? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        type: FSxClientTypes.DataRepositoryTaskType? = nil
    )
    {
        self.capacityToRelease = capacityToRelease
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.paths = paths
        self.releaseConfiguration = releaseConfiguration
        self.report = report
        self.tags = tags
        self.type = type
    }
}

extension FSxClientTypes {
    /// Provides information about why a data repository task failed. Only populated when the task Lifecycle is set to FAILED.
    public struct DataRepositoryTaskFailureDetails {
        /// A detailed error message.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {
    /// Provides the task status showing a running total of the total number of files to be processed, the number successfully processed, and the number of files the task failed to process.
    public struct DataRepositoryTaskStatus {
        /// A running total of the number of files that the task failed to process.
        public var failedCount: Swift.Int?
        /// The time at which the task status was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
        public var releasedCapacity: Swift.Int?
        /// A running total of the number of files that the task has successfully processed.
        public var succeededCount: Swift.Int?
        /// The total number of files that the task will process. While a task is executing, the sum of SucceededCount plus FailedCount may not equal TotalCount. When the task is complete, TotalCount equals the sum of SucceededCount plus FailedCount.
        public var totalCount: Swift.Int?

        public init(
            failedCount: Swift.Int? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            releasedCapacity: Swift.Int? = nil,
            succeededCount: Swift.Int? = nil,
            totalCount: Swift.Int? = nil
        )
        {
            self.failedCount = failedCount
            self.lastUpdatedTime = lastUpdatedTime
            self.releasedCapacity = releasedCapacity
            self.succeededCount = succeededCount
            self.totalCount = totalCount
        }
    }

}

extension FSxClientTypes {
    /// A description of the data repository task.
    ///
    /// * You use import and export data repository tasks to perform bulk transfer operations between an Amazon FSx for Lustre file system and a linked data repository.
    ///
    /// * You use release data repository tasks to release files that have been exported to a linked S3 bucket from your Amazon FSx for Lustre file system.
    ///
    /// * An Amazon File Cache resource uses a task to automatically release files from the cache.
    ///
    ///
    /// To learn more about data repository tasks, see [Data Repository Tasks](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-repository-tasks.html).
    public struct DataRepositoryTask {
        /// Specifies the amount of data to release, in GiB, by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
        public var capacityToRelease: Swift.Int?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The time the system completed processing the task, populated after the task is complete.
        public var endTime: Foundation.Date?
        /// Failure message describing why the task failed, it is populated only when Lifecycle is set to FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The globally unique ID of the file system.
        public var fileSystemId: Swift.String?
        /// The lifecycle status of the data repository task, as follows:
        ///
        /// * PENDING - The task has not started.
        ///
        /// * EXECUTING - The task is in process.
        ///
        /// * FAILED - The task was not able to be completed. For example, there may be files the task failed to process. The [DataRepositoryTaskFailureDetails] property provides more information about task failures.
        ///
        /// * SUCCEEDED - The task has completed successfully.
        ///
        /// * CANCELED - The task was canceled and it did not complete.
        ///
        /// * CANCELING - The task is in process of being canceled.
        ///
        ///
        /// You cannot delete an FSx for Lustre file system if there are data repository tasks for the file system in the PENDING or EXECUTING states. Please retry when the data repository task is finished (with a status of CANCELED, SUCCEEDED, or FAILED). You can use the DescribeDataRepositoryTask action to monitor the task status. Contact the FSx team if you need to delete your file system immediately.
        /// This member is required.
        public var lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
        /// An array of paths that specify the data for the data repository task to process. For example, in an EXPORT_TO_REPOSITORY task, the paths specify which data to export to the linked data repository. (Default) If Paths is not specified, Amazon FSx uses the file system root directory.
        public var paths: [Swift.String]?
        /// The configuration that specifies the last accessed time criteria for files that will be released from an Amazon FSx for Lustre file system.
        public var releaseConfiguration: FSxClientTypes.ReleaseConfiguration?
        /// Provides a report detailing the data repository task results of the files processed that match the criteria specified in the report Scope parameter. FSx delivers the report to the file system's linked data repository in Amazon S3, using the path specified in the report Path parameter. You can specify whether or not a report gets generated for a task using the Enabled parameter.
        public var report: FSxClientTypes.CompletionReport?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The time the system began processing the task.
        public var startTime: Foundation.Date?
        /// Provides the status of the number of files that the task has processed successfully and failed to process.
        public var status: FSxClientTypes.DataRepositoryTaskStatus?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The system-generated, unique 17-digit ID of the data repository task.
        /// This member is required.
        public var taskId: Swift.String?
        /// The type of data repository task.
        ///
        /// * EXPORT_TO_REPOSITORY tasks export from your Amazon FSx for Lustre file system to a linked data repository.
        ///
        /// * IMPORT_METADATA_FROM_REPOSITORY tasks import metadata changes from a linked S3 bucket to your Amazon FSx for Lustre file system.
        ///
        /// * RELEASE_DATA_FROM_FILESYSTEM tasks release files in your Amazon FSx for Lustre file system that have been exported to a linked S3 bucket and that meet your specified release criteria.
        ///
        /// * AUTO_RELEASE_DATA tasks automatically release files from an Amazon File Cache resource.
        /// This member is required.
        public var type: FSxClientTypes.DataRepositoryTaskType?

        public init(
            capacityToRelease: Swift.Int? = nil,
            creationTime: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle? = nil,
            paths: [Swift.String]? = nil,
            releaseConfiguration: FSxClientTypes.ReleaseConfiguration? = nil,
            report: FSxClientTypes.CompletionReport? = nil,
            resourceARN: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            status: FSxClientTypes.DataRepositoryTaskStatus? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            taskId: Swift.String? = nil,
            type: FSxClientTypes.DataRepositoryTaskType? = nil
        )
        {
            self.capacityToRelease = capacityToRelease
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.paths = paths
            self.releaseConfiguration = releaseConfiguration
            self.report = report
            self.resourceARN = resourceARN
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.taskId = taskId
            self.type = type
        }
    }

}

public struct CreateDataRepositoryTaskOutput {
    /// The description of the data repository task that you just created.
    public var dataRepositoryTask: FSxClientTypes.DataRepositoryTask?

    public init(
        dataRepositoryTask: FSxClientTypes.DataRepositoryTask? = nil
    )
    {
        self.dataRepositoryTask = dataRepositoryTask
    }
}

/// One or more network settings specified in the request are invalid.
public struct InvalidNetworkSettings: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The route table ID is either invalid or not part of the VPC specified.
        public internal(set) var invalidRouteTableId: Swift.String? = nil
        /// The security group ID is either invalid or not part of the VPC specified.
        public internal(set) var invalidSecurityGroupId: Swift.String? = nil
        /// The subnet ID that is either invalid or not part of the VPC specified.
        public internal(set) var invalidSubnetId: Swift.String? = nil
        /// Error message explaining what's wrong with network settings.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNetworkSettings" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        invalidRouteTableId: Swift.String? = nil,
        invalidSecurityGroupId: Swift.String? = nil,
        invalidSubnetId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.invalidRouteTableId = invalidRouteTableId
        self.properties.invalidSecurityGroupId = invalidSecurityGroupId
        self.properties.invalidSubnetId = invalidSubnetId
        self.properties.message = message
    }
}

/// An invalid value for PerUnitStorageThroughput was provided. Please create your file system again, using a valid value.
public struct InvalidPerUnitStorageThroughput: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPerUnitStorageThroughput" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A cache configuration is required for this operation.
public struct MissingFileCacheConfiguration: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingFileCacheConfiguration" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FSxClientTypes {
    /// The configuration for an NFS data repository association (DRA) created during the creation of the Amazon File Cache resource.
    public struct FileCacheNFSConfiguration {
        /// A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.
        public var dnsIps: [Swift.String]?
        /// The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is NFS3, which indicates that the data repository must support the NFSv3 protocol.
        /// This member is required.
        public var version: FSxClientTypes.NfsVersion?

        public init(
            dnsIps: [Swift.String]? = nil,
            version: FSxClientTypes.NfsVersion? = nil
        )
        {
            self.dnsIps = dnsIps
            self.version = version
        }
    }

}

extension FSxClientTypes {
    /// The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA does not support automatic import or automatic export.
    public struct FileCacheDataRepositoryAssociation {
        /// The path to the S3 or NFS data repository that links to the cache. You must provide one of the following paths:
        ///
        /// * The path can be an NFS data repository that links to the cache. The path can be in one of two formats:
        ///
        /// * If you are not using the DataRepositorySubdirectories parameter, the path is to an NFS Export directory (or one of its subdirectories) in the format nfs://nfs-domain-name/exportpath. You can therefore link a single NFS Export to a single data repository association.
        ///
        /// * If you are using the DataRepositorySubdirectories parameter, the path is the domain name of the NFS file system in the format nfs://filer-domain-name, which indicates the root of the subdirectories specified with the DataRepositorySubdirectories parameter.
        ///
        ///
        ///
        ///
        /// * The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/.
        /// This member is required.
        public var dataRepositoryPath: Swift.String?
        /// A list of NFS Exports that will be linked with this data repository association. The Export paths are in the format /exportpath1. To use this parameter, you must configure DataRepositoryPath as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that DataRepositorySubdirectories is not supported for S3 data repositories.
        public var dataRepositorySubdirectories: [Swift.String]?
        /// A path on the cache that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path /ns1/, then you cannot link another data repository with cache path /ns1/ns2. This path specifies where in your cache files will be exported from. This cache directory can be linked to only one data repository, and no data repository other can be linked to the directory. The cache path can only be set to root (/) on an NFS DRA when DataRepositorySubdirectories is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache. The cache path cannot be set to root (/) for an S3 DRA.
        /// This member is required.
        public var fileCachePath: Swift.String?
        /// The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository.
        public var nfs: FSxClientTypes.FileCacheNFSConfiguration?

        public init(
            dataRepositoryPath: Swift.String? = nil,
            dataRepositorySubdirectories: [Swift.String]? = nil,
            fileCachePath: Swift.String? = nil,
            nfs: FSxClientTypes.FileCacheNFSConfiguration? = nil
        )
        {
            self.dataRepositoryPath = dataRepositoryPath
            self.dataRepositorySubdirectories = dataRepositorySubdirectories
            self.fileCachePath = fileCachePath
            self.nfs = nfs
        }
    }

}

extension FSxClientTypes {

    public enum FileCacheType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lustre
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheType] {
            return [
                .lustre
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lustre: return "LUSTRE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum FileCacheLustreDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cache1
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheLustreDeploymentType] {
            return [
                .cache1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cache1: return "CACHE_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration for a Lustre MDT (Metadata Target) storage volume. The metadata on Amazon File Cache is managed by a Lustre Metadata Server (MDS) while the actual metadata is persisted on an MDT.
    public struct FileCacheLustreMetadataConfiguration {
        /// The storage capacity of the Lustre MDT (Metadata Target) storage volume in gibibytes (GiB). The only supported value is 2400 GiB.
        /// This member is required.
        public var storageCapacity: Swift.Int?

        public init(
            storageCapacity: Swift.Int? = nil
        )
        {
            self.storageCapacity = storageCapacity
        }
    }

}

extension FSxClientTypes {
    /// The Amazon File Cache configuration for the cache that you are creating.
    public struct CreateFileCacheLustreConfiguration {
        /// Specifies the cache deployment type, which must be CACHE_1.
        /// This member is required.
        public var deploymentType: FSxClientTypes.FileCacheLustreDeploymentType?
        /// The configuration for a Lustre MDT (Metadata Target) storage volume.
        /// This member is required.
        public var metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration?
        /// Provisions the amount of read and write throughput for each 1 tebibyte (TiB) of cache storage capacity, in MB/s/TiB. The only supported value is 1000.
        /// This member is required.
        public var perUnitStorageThroughput: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            deploymentType: FSxClientTypes.FileCacheLustreDeploymentType? = nil,
            metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.metadataConfiguration = metadataConfiguration
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

public struct CreateFileCacheInput {
    /// An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK. By using the idempotent operation, you can retry a CreateFileCache operation without the risk of creating an extra cache. This approach can be useful when an initial call fails in a way that makes it unclear whether a cache was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a cache, the client receives success as long as the parameters are the same.
    public var clientRequestToken: Swift.String?
    /// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
    public var copyTagsToDataRepositoryAssociations: Swift.Bool?
    /// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements:
    ///
    /// * All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time.
    ///
    /// * An NFS DRA must link to an NFS file system that supports the NFSv3 protocol.
    ///
    ///
    /// DRA automatic import and automatic export is not supported.
    public var dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]?
    /// The type of cache that you're creating, which must be LUSTRE.
    /// This member is required.
    public var fileCacheType: FSxClientTypes.FileCacheType?
    /// Sets the Lustre version for the cache that you're creating, which must be 2.12.
    /// This member is required.
    public var fileCacheTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The configuration for the Amazon File Cache resource being created.
    public var lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration?
    /// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access. This list isn't returned in later requests to describe the cache.
    public var securityGroupIds: [Swift.String]?
    /// The storage capacity of the cache in gibibytes (GiB). Valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.
    /// This member is required.
    public var storageCapacity: Swift.Int?
    /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
        dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]? = nil,
        fileCacheType: FSxClientTypes.FileCacheType? = nil,
        fileCacheTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
        self.dataRepositoryAssociations = dataRepositoryAssociations
        self.fileCacheType = fileCacheType
        self.fileCacheTypeVersion = fileCacheTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension FSxClientTypes {
    /// A structure providing details of any failures that occurred.
    public struct FileCacheFailureDetails {
        /// A message describing any failures that occurred.
        public var message: Swift.String?

        public init(
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension FSxClientTypes {

    public enum FileCacheLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FileCacheLifecycle] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration for the Amazon File Cache resource.
    public struct FileCacheLustreConfiguration {
        /// The deployment type of the Amazon File Cache resource, which must be CACHE_1.
        public var deploymentType: FSxClientTypes.FileCacheLustreDeploymentType?
        /// The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogConfiguration?
        /// The configuration for a Lustre MDT (Metadata Target) storage volume.
        public var metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration?
        /// You use the MountName value when mounting the cache. If you pass a cache ID to the DescribeFileCaches operation, it returns the the MountName value as part of the cache's description.
        public var mountName: Swift.String?
        /// Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is 1000.
        public var perUnitStorageThroughput: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            deploymentType: FSxClientTypes.FileCacheLustreDeploymentType? = nil,
            logConfiguration: FSxClientTypes.LustreLogConfiguration? = nil,
            metadataConfiguration: FSxClientTypes.FileCacheLustreMetadataConfiguration? = nil,
            mountName: Swift.String? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.logConfiguration = logConfiguration
            self.metadataConfiguration = metadataConfiguration
            self.mountName = mountName
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    /// The response object for the Amazon File Cache resource being created in the CreateFileCache operation.
    public struct FileCacheCreating {
        /// A boolean flag indicating whether tags for the cache should be copied to data repository associations.
        public var copyTagsToDataRepositoryAssociations: Swift.Bool?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// A list of IDs of data repository associations that are associated with this cache.
        public var dataRepositoryAssociationIds: [Swift.String]?
        /// The Domain Name System (DNS) name for the cache.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred in creating a cache.
        public var failureDetails: FSxClientTypes.FileCacheFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The type of cache, which must be LUSTRE.
        public var fileCacheType: FSxClientTypes.FileCacheType?
        /// The Lustre version of the cache, which must be 2.12.
        public var fileCacheTypeVersion: Swift.String?
        /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the cache. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The cache is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - The new cache is being created.
        ///
        /// * DELETING - An existing cache is being deleted.
        ///
        /// * UPDATING - The cache is undergoing a customer-initiated update.
        ///
        /// * FAILED - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.
        public var lifecycle: FSxClientTypes.FileCacheLifecycle?
        /// The configuration for the Amazon File Cache resource.
        public var lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration?
        /// A list of network interface IDs.
        public var networkInterfaceIds: [Swift.String]?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The storage capacity of the cache in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
        public var subnetIds: [Swift.String]?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var vpcId: Swift.String?

        public init(
            copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
            creationTime: Foundation.Date? = nil,
            dataRepositoryAssociationIds: [Swift.String]? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileCacheFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCacheType: FSxClientTypes.FileCacheType? = nil,
            fileCacheTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileCacheLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
            self.creationTime = creationTime
            self.dataRepositoryAssociationIds = dataRepositoryAssociationIds
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCacheType = fileCacheType
            self.fileCacheTypeVersion = fileCacheTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

public struct CreateFileCacheOutput {
    /// A description of the cache that was created.
    public var fileCache: FSxClientTypes.FileCacheCreating?

    public init(
        fileCache: FSxClientTypes.FileCacheCreating? = nil
    )
    {
        self.fileCache = fileCache
    }
}

/// The path provided for data repository export isn't valid.
public struct InvalidExportPath: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExportPath" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The path provided for data repository import isn't valid.
public struct InvalidImportPath: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidImportPath" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A file system configuration is required for this operation.
public struct MissingFileSystemConfiguration: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingFileSystemConfiguration" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FSxClientTypes {
    /// The Lustre logging configuration used when creating or updating an Amazon FSx for Lustre file system. An Amazon File Cache is created with Lustre logging enabled by default, with a setting of WARN_ERROR for the logging events. which can't be changed. Lustre logging writes the enabled logging events for your file system or cache to Amazon CloudWatch Logs.
    public struct LustreLogCreateConfiguration {
        /// The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:
        ///
        /// * The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        ///
        /// * The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix.
        ///
        /// * If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs /aws/fsx/lustre log group (for Amazon FSx for Lustre) or /aws/fsx/filecache (for Amazon File Cache).
        ///
        /// * If Destination is provided and the resource does not exist, the request will fail with a BadRequest error.
        ///
        /// * If Level is set to DISABLED, you cannot specify a destination in Destination.
        public var destination: Swift.String?
        /// Sets which data repository events are logged by Amazon FSx.
        ///
        /// * WARN_ONLY - only warning events are logged.
        ///
        /// * ERROR_ONLY - only error events are logged.
        ///
        /// * WARN_ERROR - both warning events and error events are logged.
        ///
        /// * DISABLED - logging of data repository events is turned off.
        /// This member is required.
        public var level: FSxClientTypes.LustreAccessAuditLogLevel?

        public init(
            destination: Swift.String? = nil,
            level: FSxClientTypes.LustreAccessAuditLogLevel? = nil
        )
        {
            self.destination = destination
            self.level = level
        }
    }

}

extension FSxClientTypes {
    /// The Lustre metadata performance configuration for the creation of an Amazon FSx for Lustre file system using a PERSISTENT_2 deployment type. The configuration uses a Metadata IOPS value to set the maximum rate of metadata disk IOPS supported by the file system. After creation, the file system supports increasing metadata performance. For more information on Metadata IOPS, see [Lustre metadata performance configuration](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-metadata-performance.html#metadata-configuration) in the Amazon FSx for Lustre User Guide.
    public struct CreateFileSystemLustreMetadataConfiguration {
        /// (USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system. Valid values are 1500, 3000, 6000, 12000, and multiples of 12000 up to a maximum of 192000. Iops doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.
        public var iops: Swift.Int?
        /// The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a PERSISTENT_2 deployment type.
        ///
        /// * In AUTOMATIC mode, FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.
        ///
        /// * In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.
        /// This member is required.
        public var mode: FSxClientTypes.MetadataConfigurationMode?

        public init(
            iops: Swift.Int? = nil,
            mode: FSxClientTypes.MetadataConfigurationMode? = nil
        )
        {
            self.iops = iops
            self.mode = mode
        }
    }

}

extension FSxClientTypes {
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with a data repository association created with .
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedFileChunkSize
    ///
    /// * ImportPath
    public struct CreateFileSystemLustreConfiguration {
        /// (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this parameter to choose how Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update file and directory listings for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        ///
        ///
        /// For more information, see [ Automatically import updates from your S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/older-deployment-types.html#legacy-auto-import-from-s3). This parameter is not supported for file systems with a data repository association.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// (Optional) Not available for use with file systems that are linked to a data repository. A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false. If CopyTagsToBackups is set to true, all file system tags are copied to all automatic and user-initiated backups when the user doesn't specify any backup-specific tags. If CopyTagsToBackups is set to true and you specify one or more backup tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value. (Default = false) For more information, see [ Working with backups](https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html) in the Amazon FSx for Lustre User Guide.
        public var copyTagsToBackups: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Sets the data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - (Default) Data compression is turned off when the file system is created.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html) in the Amazon FSx for Lustre User Guide.
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// (Optional) Choose SCRATCH_1 and SCRATCH_2 deployment types when you need temporary storage and shorter-term processing of data. The SCRATCH_2 deployment type provides in-transit encryption of data and higher burst throughput capacity than SCRATCH_1. Choose PERSISTENT_1 for longer-term storage and for throughput-focused workloads that aren’t latency-sensitive. PERSISTENT_1 supports encryption of data in transit, and is available in all Amazon Web Services Regions in which FSx for Lustre is available. Choose PERSISTENT_2 for longer-term storage and for latency-sensitive workloads that require the highest levels of IOPS/throughput. PERSISTENT_2 supports SSD storage, and offers higher PerUnitStorageThroughput (up to 1000 MB/s/TiB). You can optionally specify a metadata configuration mode for PERSISTENT_2 which supports increasing metadata performance. PERSISTENT_2 is available in a limited number of Amazon Web Services Regions. For more information, and an up-to-date list of Amazon Web Services Regions in which PERSISTENT_2 is available, see [File system deployment options for FSx for Lustre](https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-fsx-lustre.html#lustre-deployment-types) in the Amazon FSx for Lustre User Guide. If you choose PERSISTENT_2, and you set FileSystemTypeVersion to 2.10, the CreateFileSystem operation fails. Encryption of data in transit is automatically turned on when you access SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 file systems from Amazon EC2 instances that support automatic encryption in the Amazon Web Services Regions where they are available. For more information about encryption in transit for FSx for Lustre file systems, see [Encrypting data in transit](https://docs.aws.amazon.com/fsx/latest/LustreGuide/encryption-in-transit-fsxl.html) in the Amazon FSx for Lustre User Guide. (Default = SCRATCH_1)
        public var deploymentType: FSxClientTypes.LustreDeploymentType?
        /// The type of drive cache used by PERSISTENT_1 file systems that are provisioned with HDD storage devices. This parameter is required when storage type is HDD. Set this property to READ to improve the performance for frequently accessed files by caching up to 20% of the total storage capacity of the file system. This parameter is required when StorageType is set to HDD.
        public var driveCacheType: FSxClientTypes.DriveCacheType?
        /// (Optional) Specifies the path in the Amazon S3 bucket where the root of your Amazon FSx file system is exported. The path must use the same Amazon S3 bucket as specified in ImportPath. You can provide an optional prefix to which new and changed data is to be exported from your Amazon FSx for Lustre file system. If an ExportPath value is not provided, Amazon FSx sets a default export path, s3://import-bucket/FSxLustre[creation-timestamp]. The timestamp is in UTC format, for example s3://import-bucket/FSxLustre20181105T222312Z. The Amazon S3 export bucket must be the same as the import bucket specified by ImportPath. If you specify only a bucket name, such as s3://import-bucket, you get a 1:1 mapping of file system objects to S3 bucket objects. This mapping means that the input data in S3 is overwritten on export. If you provide a custom prefix in the export path, such as s3://import-bucket/[custom-optional-prefix], Amazon FSx exports the contents of your file system to that export prefix in the Amazon S3 bucket. This parameter is not supported for file systems with a data repository association.
        public var exportPath: Swift.String?
        /// (Optional) The path to the Amazon S3 bucket (including the optional prefix) that you're using as the data repository for your Amazon FSx for Lustre file system. The root of your FSx for Lustre file system will be mapped to the root of the Amazon S3 bucket you select. An example is s3://import-bucket/optional-prefix. If you specify a prefix after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system. This parameter is not supported for file systems with a data repository association.
        public var importPath: Swift.String?
        /// (Optional) For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB. This parameter is not supported for file systems with a data repository association.
        public var importedFileChunkSize: Swift.Int?
        /// The Lustre logging configuration used when creating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogCreateConfiguration?
        /// The Lustre metadata performance configuration for the creation of an FSx for Lustre file system using a PERSISTENT_2 deployment type.
        public var metadataConfiguration: FSxClientTypes.CreateFileSystemLustreMetadataConfiguration?
        /// Required with PERSISTENT_1 and PERSISTENT_2 deployment types, provisions the amount of read and write throughput for each 1 tebibyte (TiB) of file system storage capacity, in MB/s/TiB. File system throughput capacity is calculated by multiplying ﬁle system storage capacity (TiB) by the PerUnitStorageThroughput (MB/s/TiB). For a 2.4-TiB ﬁle system, provisioning 50 MB/s/TiB of PerUnitStorageThroughput yields 120 MB/s of ﬁle system throughput. You pay for the amount of throughput that you provision. Valid values:
        ///
        /// * For PERSISTENT_1 SSD storage: 50, 100, 200 MB/s/TiB.
        ///
        /// * For PERSISTENT_1 HDD storage: 12, 40 MB/s/TiB.
        ///
        /// * For PERSISTENT_2 SSD storage: 125, 250, 500, 1000 MB/s/TiB.
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration used when creating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// (Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            deploymentType: FSxClientTypes.LustreDeploymentType? = nil,
            driveCacheType: FSxClientTypes.DriveCacheType? = nil,
            exportPath: Swift.String? = nil,
            importPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            logConfiguration: FSxClientTypes.LustreLogCreateConfiguration? = nil,
            metadataConfiguration: FSxClientTypes.CreateFileSystemLustreMetadataConfiguration? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.deploymentType = deploymentType
            self.driveCacheType = driveCacheType
            self.exportPath = exportPath
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
            self.logConfiguration = logConfiguration
            self.metadataConfiguration = metadataConfiguration
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    /// The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.
    public struct CreateFileSystemOntapConfiguration {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the FSx for ONTAP file system deployment type to use in creating the file system.
        ///
        /// * MULTI_AZ_1 - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.
        ///
        /// * MULTI_AZ_2 - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.
        ///
        /// * SINGLE_AZ_1 - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.
        ///
        /// * SINGLE_AZ_2 - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.
        ///
        ///
        /// For information about the use cases for Multi-AZ and Single-AZ deployments, refer to [Choosing a file system deployment type](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html).
        /// This member is required.
        public var deploymentType: FSxClientTypes.OntapDeploymentType?
        /// The SSD IOPS configuration for the FSx for ONTAP file system.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.
        public var endpointIpAddressRange: Swift.String?
        /// The ONTAP administrative password for the fsxadmin user with which you administer your file system using the NetApp ONTAP CLI and REST API.
        public var fsxAdminPassword: Swift.String?
        /// Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of StorageCapacity, Iops, and ThroughputCapacity. For more information, see [High-availability (HA) pairs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs) in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see [Using block storage protocols](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage). Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of HAPairs is less than 1 or greater than 12.
        ///
        /// * The value of HAPairs is greater than 1 and the value of DeploymentType is SINGLE_AZ_1, MULTI_AZ_1, or MULTI_AZ_2.
        public var haPairs: Swift.Int?
        /// Required when DeploymentType is set to MULTI_AZ_1 or MULTI_AZ_2. This specifies the subnet in which you want the preferred file server to be located.
        public var preferredSubnetId: Swift.String?
        /// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table. Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with Key: AmazonFSx; Value: ManagedByAmazonFSx. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the Key: AmazonFSx; Value: ManagedByAmazonFSx tag manually.
        public var routeTableIds: [Swift.String]?
        /// Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see [Managing throughput capacity](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html) in the FSx for ONTAP User Guide. Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of ThroughputCapacity and ThroughputCapacityPerHAPair are not the same value.
        ///
        /// * The value of ThroughputCapacity when divided by the value of HAPairs is outside of the valid range for ThroughputCapacity.
        public var throughputCapacity: Swift.Int?
        /// Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system. You can define either the ThroughputCapacityPerHAPair or the ThroughputCapacity when creating a file system, but not both. This field and ThroughputCapacity are the same for file systems powered by one HA pair.
        ///
        /// * For SINGLE_AZ_1 and MULTI_AZ_1 file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.
        ///
        /// * For SINGLE_AZ_2, valid values are 1536, 3072, or 6144 MBps.
        ///
        /// * For MULTI_AZ_2, valid values are 384, 768, 1536, 3072, or 6144 MBps.
        ///
        ///
        /// Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of ThroughputCapacity and ThroughputCapacityPerHAPair are not the same value for file systems with one HA pair.
        ///
        /// * The value of deployment type is SINGLE_AZ_2 and ThroughputCapacity / ThroughputCapacityPerHAPair is not a valid HA pair (a value between 1 and 12).
        ///
        /// * The value of ThroughputCapacityPerHAPair is not a valid value.
        public var throughputCapacityPerHAPair: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OntapDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            fsxAdminPassword: Swift.String? = nil,
            haPairs: Swift.Int? = nil,
            preferredSubnetId: Swift.String? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            throughputCapacityPerHAPair: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddressRange = endpointIpAddressRange
            self.fsxAdminPassword = fsxAdminPassword
            self.haPairs = haPairs
            self.preferredSubnetId = preferredSubnetId
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.throughputCapacityPerHAPair = throughputCapacityPerHAPair
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.CreateFileSystemOntapConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateFileSystemOntapConfiguration(automaticBackupRetentionDays: \(Swift.String(describing: automaticBackupRetentionDays)), dailyAutomaticBackupStartTime: \(Swift.String(describing: dailyAutomaticBackupStartTime)), deploymentType: \(Swift.String(describing: deploymentType)), diskIopsConfiguration: \(Swift.String(describing: diskIopsConfiguration)), endpointIpAddressRange: \(Swift.String(describing: endpointIpAddressRange)), haPairs: \(Swift.String(describing: haPairs)), preferredSubnetId: \(Swift.String(describing: preferredSubnetId)), routeTableIds: \(Swift.String(describing: routeTableIds)), throughputCapacity: \(Swift.String(describing: throughputCapacity)), throughputCapacityPerHAPair: \(Swift.String(describing: throughputCapacityPerHAPair)), weeklyMaintenanceStartTime: \(Swift.String(describing: weeklyMaintenanceStartTime)), fsxAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration of an Amazon FSx for OpenZFS root volume.
    public struct OpenZFSCreateRootVolumeConfiguration {
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots of the volume. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// A Boolean value indicating whether the volume is read-only. Setting this value to true can be useful after you have completed changes to a volume and no longer want changes to occur.
        public var readOnly: Swift.Bool?
        /// Specifies the record size of an OpenZFS root volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on setting a custom record size, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init(
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

extension FSxClientTypes {
    /// The Amazon FSx for OpenZFS configuration properties for the file system that you are creating.
    public struct CreateFileSystemOpenZFSConfiguration {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to false. If it's set to true, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type. Valid values are the following:
        ///
        /// * MULTI_AZ_1- Creates file systems with high availability and durability by replicating your data and supporting failover across multiple Availability Zones in the same Amazon Web Services Region.
        ///
        /// * SINGLE_AZ_HA_2- Creates file systems with high availability and throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache by deploying a primary and standby file system within the same Availability Zone.
        ///
        /// * SINGLE_AZ_HA_1- Creates file systems with high availability and throughput capacities of 64 - 4,096 MB/s by deploying a primary and standby file system within the same Availability Zone.
        ///
        /// * SINGLE_AZ_2- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache that automatically recover within a single Availability Zone.
        ///
        /// * SINGLE_AZ_1- Creates file systems with throughput capacities of 64 - 4,096 MBs that automatically recover within a single Availability Zone.
        ///
        ///
        /// For a list of which Amazon Web Services Regions each deployment type is available in, see [Deployment type availability](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions). For more information on the differences in performance between deployment types, see [File system performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance) in the Amazon FSx for OpenZFS User Guide.
        /// This member is required.
        public var deploymentType: FSxClientTypes.OpenZFSDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP, Amazon FSx for Windows File Server, or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API and Amazon FSx console, Amazon FSx selects an available /28 IP address range for you from one of the VPC's CIDR ranges. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.
        public var endpointIpAddressRange: Swift.String?
        /// Required when DeploymentType is set to MULTI_AZ_1. This specifies the subnet in which you want the preferred file server to be located.
        public var preferredSubnetId: Swift.String?
        /// The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume.
        public var rootVolumeConfiguration: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration?
        /// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
        public var routeTableIds: [Swift.String]?
        /// Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MBps). Valid values depend on the DeploymentType you choose, as follows:
        ///
        /// * For MULTI_AZ_1 and SINGLE_AZ_2, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MBps.
        ///
        /// * For SINGLE_AZ_1, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MBps.
        ///
        ///
        /// You pay for additional throughput capacity that you provision.
        /// This member is required.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.OpenZFSDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            endpointIpAddressRange: Swift.String? = nil,
            preferredSubnetId: Swift.String? = nil,
            rootVolumeConfiguration: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration? = nil,
            routeTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.endpointIpAddressRange = endpointIpAddressRange
            self.preferredSubnetId = preferredSubnetId
            self.rootVolumeConfiguration = rootVolumeConfiguration
            self.routeTableIds = routeTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    /// The Windows file access auditing configuration used when creating or updating an Amazon FSx for Windows File Server file system.
    public struct WindowsAuditLogCreateConfiguration {
        /// The Amazon Resource Name (ARN) that specifies the destination of the audit logs. The destination can be any Amazon CloudWatch Logs log group ARN or Amazon Kinesis Data Firehose delivery stream ARN, with the following requirements:
        ///
        /// * The destination ARN that you provide (either CloudWatch Logs log group or Kinesis Data Firehose delivery stream) must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.
        ///
        /// * The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix. The name of the Amazon Kinesis Data Firehose delivery stream must begin with the aws-fsx prefix.
        ///
        /// * If you do not provide a destination in AuditLogDestination, Amazon FSx will create and use a log stream in the CloudWatch Logs /aws/fsx/windows log group.
        ///
        /// * If AuditLogDestination is provided and the resource does not exist, the request will fail with a BadRequest error.
        ///
        /// * If FileAccessAuditLogLevel and FileShareAccessAuditLogLevel are both set to DISABLED, you cannot specify a destination in AuditLogDestination.
        public var auditLogDestination: Swift.String?
        /// Sets which attempt type is logged by Amazon FSx for file and folder accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access files or folders are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access files or folders are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access files or folders are logged.
        ///
        /// * DISABLED - access auditing of files and folders is turned off.
        /// This member is required.
        public var fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?
        /// Sets which attempt type is logged by Amazon FSx for file share accesses.
        ///
        /// * SUCCESS_ONLY - only successful attempts to access file shares are logged.
        ///
        /// * FAILURE_ONLY - only failed attempts to access file shares are logged.
        ///
        /// * SUCCESS_AND_FAILURE - both successful attempts and failed attempts to access file shares are logged.
        ///
        /// * DISABLED - access auditing of file shares is turned off.
        /// This member is required.
        public var fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel?

        public init(
            auditLogDestination: Swift.String? = nil,
            fileAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil,
            fileShareAccessAuditLogLevel: FSxClientTypes.WindowsAccessAuditLogLevel? = nil
        )
        {
            self.auditLogDestination = auditLogDestination
            self.fileAccessAuditLogLevel = fileAccessAuditLogLevel
            self.fileShareAccessAuditLogLevel = fileShareAccessAuditLogLevel
        }
    }

}

extension FSxClientTypes {
    /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an FSx for ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx for Windows with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing FSx for ONTAP SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
    public struct SelfManagedActiveDirectoryConfiguration {
        /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
        /// This member is required.
        public var dnsIps: [Swift.String]?
        /// The fully qualified domain name of the self-managed AD directory, such as corp.example.com.
        /// This member is required.
        public var domainName: Swift.String?
        /// (Optional) The name of the domain group whose members are granted administrative privileges for the file system. Administrative privileges include taking ownership of files and folders, setting audit controls (audit ACLs) on files and folders, and administering the file system remotely by using the FSx Remote PowerShell. The group that you specify must already exist in your domain. If you don't provide one, your AD domain's Domain Admins group is used.
        public var fileSystemAdministratorsGroup: Swift.String?
        /// (Optional) The fully qualified distinguished name of the organizational unit within your self-managed AD directory. Amazon FSx only accepts OU as the direct parent of the file system. An example is OU=FSx,DC=yourdomain,DC=corp,DC=com. To learn more, see [RFC 2253](https://tools.ietf.org/html/rfc2253). If none is provided, the FSx file system is created in the default location of your self-managed AD directory. Only Organizational Unit (OU) objects can be the direct parent of the file system that you're creating.
        public var organizationalUnitDistinguishedName: Swift.String?
        /// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
        /// This member is required.
        public var password: Swift.String?
        /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain. This account must have the permission to join computers to the domain in the organizational unit provided in OrganizationalUnitDistinguishedName, or in the default location of your AD domain.
        /// This member is required.
        public var userName: Swift.String?

        public init(
            dnsIps: [Swift.String]? = nil,
            domainName: Swift.String? = nil,
            fileSystemAdministratorsGroup: Swift.String? = nil,
            organizationalUnitDistinguishedName: Swift.String? = nil,
            password: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.domainName = domainName
            self.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.password = password
            self.userName = userName
        }
    }

}

extension FSxClientTypes.SelfManagedActiveDirectoryConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelfManagedActiveDirectoryConfiguration(dnsIps: \(Swift.String(describing: dnsIps)), domainName: \(Swift.String(describing: domainName)), fileSystemAdministratorsGroup: \(Swift.String(describing: fileSystemAdministratorsGroup)), organizationalUnitDistinguishedName: \(Swift.String(describing: organizationalUnitDistinguishedName)), userName: \(Swift.String(describing: userName)), password: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration object for the Microsoft Windows file system used in CreateFileSystem and CreateFileSystemFromBackup operations.
    public struct CreateFileSystemWindowsConfiguration {
        /// The ID for an existing Amazon Web Services Managed Microsoft Active Directory (AD) instance that the file system should join when it's created.
        public var activeDirectoryId: Swift.String?
        /// An array of one or more DNS alias names that you want to associate with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html) and [Walkthrough 5: Using DNS aliases to access your file system](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/walkthrough05-file-system-custom-CNAME.html), including additional steps you must take to be able to access your file system using a DNS alias. An alias name has to meet the following requirements:
        ///
        /// * Formatted as a fully-qualified domain name (FQDN), hostname.domain, for example, accounting.example.com.
        ///
        /// * Can contain alphanumeric characters, the underscore (_), and the hyphen (-).
        ///
        /// * Cannot start or end with a hyphen.
        ///
        /// * Can start with a numeric.
        ///
        ///
        /// For DNS alias names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them: as uppercase letters, lowercase letters, or the corresponding letters in escape codes.
        public var aliases: [Swift.String]?
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// The preferred time to take daily automatic backups, formatted HH:MM in the UTC time zone.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Specifies the file system deployment type, valid values are the following:
        ///
        /// * MULTI_AZ_1 - Deploys a high availability file system that is configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. You can only deploy a Multi-AZ file system in Amazon Web Services Regions that have a minimum of three Availability Zones. Also supports HDD storage type
        ///
        /// * SINGLE_AZ_1 - (Default) Choose to deploy a file system that is configured for single AZ redundancy.
        ///
        /// * SINGLE_AZ_2 - The latest generation Single AZ file system. Specifies a file system that is configured for single AZ redundancy and supports HDD storage type.
        ///
        ///
        /// For more information, see [ Availability and Durability: Single-AZ and Multi-AZ File Systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html).
        public var deploymentType: FSxClientTypes.WindowsDeploymentType?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for Windows file system. By default, Amazon FSx automatically provisions 3 IOPS per GiB of storage capacity. You can provision additional IOPS per GiB of storage, up to the maximum limit associated with your chosen throughput capacity.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// Required when DeploymentType is set to MULTI_AZ_1. This specifies the subnet in which you want the preferred file server to be located. For in-Amazon Web Services applications, we recommend that you launch your clients in the same Availability Zone (AZ) as your preferred file server to reduce cross-AZ data transfer costs and minimize latency.
        public var preferredSubnetId: Swift.String?
        /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an FSx for ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx for Windows with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing FSx for ONTAP SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration?
        /// Sets the throughput capacity of an Amazon FSx file system, measured in megabytes per second (MB/s), in 2 to the nth increments, between 2^3 (8) and 2^11 (2048).
        /// This member is required.
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            activeDirectoryId: Swift.String? = nil,
            aliases: [Swift.String]? = nil,
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            deploymentType: FSxClientTypes.WindowsDeploymentType? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            preferredSubnetId: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.activeDirectoryId = activeDirectoryId
            self.aliases = aliases
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.deploymentType = deploymentType
            self.diskIopsConfiguration = diskIopsConfiguration
            self.preferredSubnetId = preferredSubnetId
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

/// The request object used to create a new Amazon FSx file system.
public struct CreateFileSystemInput {
    /// A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The type of Amazon FSx file system to create. Valid values are WINDOWS, LUSTRE, ONTAP, and OPENZFS.
    /// This member is required.
    public var fileSystemType: FSxClientTypes.FileSystemType?
    /// For FSx for Lustre file systems, sets the Lustre version for the file system that you're creating. Valid values are 2.10, 2.12, and 2.15:
    ///
    /// * 2.10 is supported by the Scratch and Persistent_1 Lustre deployment types.
    ///
    /// * 2.12 is supported by all Lustre deployment types, except for PERSISTENT_2 with a metadata configuration mode.
    ///
    /// * 2.15 is supported by all Lustre deployment types and is recommended for all new file systems.
    ///
    ///
    /// Default value is 2.10, except for the following deployments:
    ///
    /// * Default value is 2.12 when DeploymentType is set to PERSISTENT_2 without a metadata configuration mode.
    ///
    /// * Default value is 2.15 when DeploymentType is set to PERSISTENT_2 with a metadata configuration mode.
    public var fileSystemTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with a data repository association created with .
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedFileChunkSize
    ///
    /// * ImportPath
    public var lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    /// The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.
    public var ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration?
    /// The OpenZFS configuration for the file system that's being created.
    public var openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    /// A list of IDs specifying the security groups to apply to all network interfaces created for file system access. This list isn't returned in later requests to describe the file system. You must specify a security group if you are creating a Multi-AZ FSx for ONTAP file system in a VPC subnet that has been shared with you.
    public var securityGroupIds: [Swift.String]?
    /// Sets the storage capacity of the file system that you're creating, in gibibytes (GiB). FSx for Lustre file systems - The amount of storage capacity that you can configure depends on the value that you set for StorageType and the Lustre DeploymentType, as follows:
    ///
    /// * For SCRATCH_2, PERSISTENT_2, and PERSISTENT_1 deployment types using SSD storage type, the valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.
    ///
    /// * For PERSISTENT_1 HDD file systems, valid values are increments of 6000 GiB for 12 MB/s/TiB file systems and increments of 1800 GiB for 40 MB/s/TiB file systems.
    ///
    /// * For SCRATCH_1 deployment type, valid values are 1200 GiB, 2400 GiB, and increments of 3600 GiB.
    ///
    ///
    /// FSx for ONTAP file systems - The amount of storage capacity that you can configure depends on the value of the HAPairs property. The minimum value is calculated as 1,024 * HAPairs and the maximum is calculated as 524,288 * HAPairs. FSx for OpenZFS file systems - The amount of storage capacity that you can configure is from 64 GiB up to 524,288 GiB (512 TiB). FSx for Windows File Server file systems - The amount of storage capacity that you can configure depends on the value that you set for StorageType as follows:
    ///
    /// * For SSD storage, valid values are 32 GiB-65,536 GiB (64 TiB).
    ///
    /// * For HDD storage, valid values are 2000 GiB-65,536 GiB (64 TiB).
    /// This member is required.
    public var storageCapacity: Swift.Int?
    /// Sets the storage type for the file system that you're creating. Valid values are SSD and HDD.
    ///
    /// * Set to SSD to use solid state drive storage. SSD is supported on all Windows, Lustre, ONTAP, and OpenZFS deployment types.
    ///
    /// * Set to HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 Windows file system deployment types, and on PERSISTENT_1 Lustre file system deployment types.
    ///
    ///
    /// Default value is SSD. For more information, see [ Storage type options](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/optimize-fsx-costs.html#storage-type-options) in the FSx for Windows File Server User Guide and [Multiple storage options](https://docs.aws.amazon.com/fsx/latest/LustreGuide/what-is.html#storage-options) in the FSx for Lustre User Guide.
    public var storageType: FSxClientTypes.StorageType?
    /// Specifies the IDs of the subnets that the file system will be accessible from. For Windows and ONTAP MULTI_AZ_1 deployment types,provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the WindowsConfiguration > PreferredSubnetID or OntapConfiguration > PreferredSubnetID properties. For more information about Multi-AZ file system configuration, see [ Availability and durability: Single-AZ and Multi-AZ file systems](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html) in the Amazon FSx for Windows User Guide and [ Availability and durability](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html) in the Amazon FSx for ONTAP User Guide. For Windows SINGLE_AZ_1 and SINGLE_AZ_2 and all Lustre deployment types, provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to apply to the file system that's being created. The key value of the Name tag appears in the console as the file system name.
    public var tags: [FSxClientTypes.Tag]?
    /// The Microsoft Windows configuration for the file system that's being created.
    public var windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemType: FSxClientTypes.FileSystemType? = nil,
        fileSystemTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration? = nil,
        ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemType = fileSystemType
        self.fileSystemTypeVersion = fileSystemTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.windowsConfiguration = windowsConfiguration
    }
}

/// The request object for the CreateFileSystemFromBackup operation.
public struct CreateFileSystemFromBackupInput {
    /// The ID of the source backup. Specifies the backup that you are copying.
    /// This member is required.
    public var backupId: Swift.String?
    /// A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Sets the version for the Amazon FSx for Lustre file system that you're creating from a backup. Valid values are 2.10, 2.12, and 2.15. You don't need to specify FileSystemTypeVersion because it will be applied using the backup's FileSystemTypeVersion setting. If you choose to specify FileSystemTypeVersion when creating from backup, the value must match the backup's FileSystemTypeVersion setting.
    public var fileSystemTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with a data repository association created with .
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedFileChunkSize
    ///
    /// * ImportPath
    public var lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    /// The OpenZFS configuration for the file system that's being created.
    public var openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups apply to all network interfaces. This value isn't returned in later DescribeFileSystem requests.
    public var securityGroupIds: [Swift.String]?
    /// Sets the storage capacity of the OpenZFS file system that you're creating from a backup, in gibibytes (GiB). Valid values are from 64 GiB up to 524,288 GiB (512 TiB). However, the value that you specify must be equal to or greater than the backup's storage capacity value. If you don't use the StorageCapacity parameter, the default is the backup's StorageCapacity value. If used to create a file system other than OpenZFS, you must provide a value that matches the backup's StorageCapacity value. If you provide any other value, Amazon FSx responds with with an HTTP status code 400 Bad Request.
    public var storageCapacity: Swift.Int?
    /// Sets the storage type for the Windows or OpenZFS file system that you're creating from a backup. Valid values are SSD and HDD.
    ///
    /// * Set to SSD to use solid state drive storage. SSD is supported on all Windows and OpenZFS deployment types.
    ///
    /// * Set to HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 FSx for Windows File Server file system deployment types.
    ///
    ///
    /// The default value is SSD. HDD and SSD storage types have different minimum storage capacity requirements. A restored file system's storage capacity is tied to the file system that was backed up. You can create a file system that uses HDD storage from a backup of a file system that used SSD storage if the original SSD file system had a storage capacity of at least 2000 GiB.
    public var storageType: FSxClientTypes.StorageType?
    /// Specifies the IDs of the subnets that the file system will be accessible from. For Windows MULTI_AZ_1 file system deployment types, provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the WindowsConfiguration > PreferredSubnetID property. Windows SINGLE_AZ_1 and SINGLE_AZ_2 file system deployment types, Lustre file systems, and OpenZFS file systems provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to be applied to the file system at file system creation. The key value of the Name tag appears in the console as the file system name.
    public var tags: [FSxClientTypes.Tag]?
    /// The configuration for this Microsoft Windows file system.
    public var windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?

    public init(
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
        self.fileSystemTypeVersion = fileSystemTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.windowsConfiguration = windowsConfiguration
    }
}

public struct CreateSnapshotInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the snapshot.
    /// This member is required.
    public var name: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// The ID of the volume that you are taking a snapshot of.
    /// This member is required.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.tags = tags
        self.volumeId = volumeId
    }
}

extension FSxClientTypes {
    /// The configuration that Amazon FSx uses to join the ONTAP storage virtual machine (SVM) to your self-managed (including on-premises) Microsoft Active Directory directory.
    public struct CreateSvmActiveDirectoryConfiguration {
        /// The NetBIOS name of the Active Directory computer object that will be created for your SVM.
        /// This member is required.
        public var netBiosName: Swift.String?
        /// The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an FSx for ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see [ Using Amazon FSx for Windows with your self-managed Microsoft Active Directory](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html) or [Managing FSx for ONTAP SVMs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html).
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration?

        public init(
            netBiosName: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfiguration? = nil
        )
        {
            self.netBiosName = netBiosName
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

extension FSxClientTypes {

    public enum StorageVirtualMachineRootVolumeSecurityStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mixed
        case ntfs
        case unix
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineRootVolumeSecurityStyle] {
            return [
                .mixed,
                .ntfs,
                .unix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .ntfs: return "NTFS"
            case .unix: return "UNIX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateStorageVirtualMachineInput {
    /// Describes the self-managed Microsoft Active Directory to which you want to join the SVM. Joining an Active Directory provides user authentication and access control for SMB clients, including Microsoft Windows and macOS clients accessing the file system.
    public var activeDirectoryConfiguration: FSxClientTypes.CreateSvmActiveDirectoryConfiguration?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The name of the SVM.
    /// This member is required.
    public var name: Swift.String?
    /// The security style of the root volume of the SVM. Specify one of the following values:
    ///
    /// * UNIX if the file system is managed by a UNIX administrator, the majority of users are NFS clients, and an application accessing the data uses a UNIX user as the service account.
    ///
    /// * NTFS if the file system is managed by a Microsoft Windows administrator, the majority of users are SMB clients, and an application accessing the data uses a Microsoft Windows user as the service account.
    ///
    /// * MIXED This is an advanced setting. For more information, see [Volume security style](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/volume-security-style.html) in the Amazon FSx for NetApp ONTAP User Guide.
    public var rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle?
    /// The password to use when managing the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
    public var svmAdminPassword: Swift.String?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        activeDirectoryConfiguration: FSxClientTypes.CreateSvmActiveDirectoryConfiguration? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        name: Swift.String? = nil,
        rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle? = nil,
        svmAdminPassword: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.activeDirectoryConfiguration = activeDirectoryConfiguration
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.name = name
        self.rootVolumeSecurityStyle = rootVolumeSecurityStyle
        self.svmAdminPassword = svmAdminPassword
        self.tags = tags
    }
}

extension CreateStorageVirtualMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStorageVirtualMachineInput(activeDirectoryConfiguration: \(Swift.String(describing: activeDirectoryConfiguration)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), fileSystemId: \(Swift.String(describing: fileSystemId)), name: \(Swift.String(describing: name)), rootVolumeSecurityStyle: \(Swift.String(describing: rootVolumeSecurityStyle)), tags: \(Swift.String(describing: tags)), svmAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// Describes the Microsoft Active Directory (AD) directory configuration to which the FSx for ONTAP storage virtual machine (SVM) is joined. Note that account credentials are not returned in the response payload.
    public struct SvmActiveDirectoryConfiguration {
        /// The NetBIOS name of the AD computer object to which the SVM is joined.
        public var netBiosName: Swift.String?
        /// The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes?

        public init(
            netBiosName: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryAttributes? = nil
        )
        {
            self.netBiosName = netBiosName
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP storage virtual machine (SVM) has four endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager. They are the Iscsi, Management, Nfs, and Smb endpoints.
    public struct SvmEndpoint {
        /// The file system's DNS name. You can mount your file system using its DNS name.
        public var dnsName: Swift.String?
        /// The SVM endpoint's IP addresses.
        public var ipAddresses: [Swift.String]?

        public init(
            dnsName: Swift.String? = nil,
            ipAddresses: [Swift.String]? = nil
        )
        {
            self.dnsName = dnsName
            self.ipAddresses = ipAddresses
        }
    }

}

extension FSxClientTypes {
    /// An Amazon FSx for NetApp ONTAP storage virtual machine (SVM) has the following endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager.
    public struct SvmEndpoints {
        /// An endpoint for connecting using the Internet Small Computer Systems Interface (iSCSI) protocol.
        public var iscsi: FSxClientTypes.SvmEndpoint?
        /// An endpoint for managing SVMs using the NetApp ONTAP CLI, NetApp ONTAP API, or NetApp CloudManager.
        public var management: FSxClientTypes.SvmEndpoint?
        /// An endpoint for connecting using the Network File System (NFS) protocol.
        public var nfs: FSxClientTypes.SvmEndpoint?
        /// An endpoint for connecting using the Server Message Block (SMB) protocol.
        public var smb: FSxClientTypes.SvmEndpoint?

        public init(
            iscsi: FSxClientTypes.SvmEndpoint? = nil,
            management: FSxClientTypes.SvmEndpoint? = nil,
            nfs: FSxClientTypes.SvmEndpoint? = nil,
            smb: FSxClientTypes.SvmEndpoint? = nil
        )
        {
            self.iscsi = iscsi
            self.management = management
            self.nfs = nfs
            self.smb = smb
        }
    }

}

extension FSxClientTypes {

    public enum StorageVirtualMachineLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case creating
        case deleting
        case failed
        case misconfigured
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineLifecycle] {
            return [
                .created,
                .creating,
                .deleting,
                .failed,
                .misconfigured,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .misconfigured: return "MISCONFIGURED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {

    public enum StorageVirtualMachineSubtype: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case dpDestination
        case syncDestination
        case syncSource
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineSubtype] {
            return [
                .default,
                .dpDestination,
                .syncDestination,
                .syncSource
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .dpDestination: return "DP_DESTINATION"
            case .syncDestination: return "SYNC_DESTINATION"
            case .syncSource: return "SYNC_SOURCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Describes the Amazon FSx for NetApp ONTAP storage virtual machine (SVM) configuration.
    public struct StorageVirtualMachine {
        /// Describes the Microsoft Active Directory configuration to which the SVM is joined, if applicable.
        public var activeDirectoryConfiguration: FSxClientTypes.SvmActiveDirectoryConfiguration?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// The endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager. They are the Iscsi, Management, Nfs, and Smb endpoints.
        public var endpoints: FSxClientTypes.SvmEndpoints?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// Describes the SVM's lifecycle status.
        ///
        /// * CREATED - The SVM is fully available for use.
        ///
        /// * CREATING - Amazon FSx is creating the new SVM.
        ///
        /// * DELETING - Amazon FSx is deleting an existing SVM.
        ///
        /// * FAILED - Amazon FSx was unable to create the SVM.
        ///
        /// * MISCONFIGURED - The SVM is in a failed but recoverable state.
        ///
        /// * PENDING - Amazon FSx has not started creating the SVM.
        public var lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle?
        /// Describes why the SVM lifecycle state changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the SVM, if provisioned.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The security style of the root volume of the SVM.
        public var rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle?
        /// The SVM's system generated unique ID.
        public var storageVirtualMachineId: Swift.String?
        /// Describes the SVM's subtype.
        public var subtype: FSxClientTypes.StorageVirtualMachineSubtype?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The SVM's UUID (universally unique identifier).
        public var uuid: Swift.String?

        public init(
            activeDirectoryConfiguration: FSxClientTypes.SvmActiveDirectoryConfiguration? = nil,
            creationTime: Foundation.Date? = nil,
            endpoints: FSxClientTypes.SvmEndpoints? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            rootVolumeSecurityStyle: FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            subtype: FSxClientTypes.StorageVirtualMachineSubtype? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.activeDirectoryConfiguration = activeDirectoryConfiguration
            self.creationTime = creationTime
            self.endpoints = endpoints
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.resourceARN = resourceARN
            self.rootVolumeSecurityStyle = rootVolumeSecurityStyle
            self.storageVirtualMachineId = storageVirtualMachineId
            self.subtype = subtype
            self.tags = tags
            self.uuid = uuid
        }
    }

}

public struct CreateStorageVirtualMachineOutput {
    /// Returned after a successful CreateStorageVirtualMachine operation; describes the SVM just created.
    public var storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?

    public init(
        storageVirtualMachine: FSxClientTypes.StorageVirtualMachine? = nil
    )
    {
        self.storageVirtualMachine = storageVirtualMachine
    }
}

/// A volume configuration is required for this operation.
public struct MissingVolumeConfiguration: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingVolumeConfiguration" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// No FSx for ONTAP SVMs were found based upon the supplied parameters.
public struct StorageVirtualMachineNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageVirtualMachineNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FSxClientTypes {
    /// Used to specify the configuration options for an FSx for ONTAP volume's storage aggregate or aggregates.
    public struct CreateAggregateConfiguration {
        /// Used to specify the names of aggregates on which the volume will be created.
        public var aggregates: [Swift.String]?
        /// Used to explicitly set the number of constituents within the FlexGroup per storage aggregate. This field is optional when creating a FlexGroup volume. If unspecified, the default value will be 8. This field cannot be provided when creating a FlexVol volume.
        public var constituentsPerAggregate: Swift.Int?

        public init(
            aggregates: [Swift.String]? = nil,
            constituentsPerAggregate: Swift.Int? = nil
        )
        {
            self.aggregates = aggregates
            self.constituentsPerAggregate = constituentsPerAggregate
        }
    }

}

extension FSxClientTypes {

    public enum InputOntapVolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dp
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [InputOntapVolumeType] {
            return [
                .dp,
                .rw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dp: return "DP"
            case .rw: return "RW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// Defines the SnapLock configuration when creating an FSx for ONTAP SnapLock volume.
    public struct CreateSnaplockConfiguration {
        /// Enables or disables the audit log volume for an FSx for ONTAP SnapLock volume. The default value is false. If you set AuditLogVolume to true, the SnapLock volume is created as an audit log volume. The minimum retention period for an audit log volume is six months. For more information, see [ SnapLock audit log volumes](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/how-snaplock-works.html#snaplock-audit-log-volume).
        public var auditLogVolume: Swift.Bool?
        /// The configuration object for setting the autocommit period of files in an FSx for ONTAP SnapLock volume.
        public var autocommitPeriod: FSxClientTypes.AutocommitPeriod?
        /// Enables, disables, or permanently disables privileged delete on an FSx for ONTAP SnapLock Enterprise volume. Enabling privileged delete allows SnapLock administrators to delete WORM files even if they have active retention periods. PERMANENTLY_DISABLED is a terminal state. If privileged delete is permanently disabled on a SnapLock volume, you can't re-enable it. The default value is DISABLED. For more information, see [Privileged delete](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-enterprise.html#privileged-delete).
        public var privilegedDelete: FSxClientTypes.PrivilegedDelete?
        /// Specifies the retention period of an FSx for ONTAP SnapLock volume.
        public var retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod?
        /// Specifies the retention mode of an FSx for ONTAP SnapLock volume. After it is set, it can't be changed. You can choose one of the following retention modes:
        ///
        /// * COMPLIANCE: Files transitioned to write once, read many (WORM) on a Compliance volume can't be deleted until their retention periods expire. This retention mode is used to address government or industry-specific mandates or to protect against ransomware attacks. For more information, see [SnapLock Compliance](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-compliance.html).
        ///
        /// * ENTERPRISE: Files transitioned to WORM on an Enterprise volume can be deleted by authorized users before their retention periods expire using privileged delete. This retention mode is used to advance an organization's data integrity and internal compliance or to test retention settings before using SnapLock Compliance. For more information, see [SnapLock Enterprise](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-enterprise.html).
        /// This member is required.
        public var snaplockType: FSxClientTypes.SnaplockType?
        /// Enables or disables volume-append mode on an FSx for ONTAP SnapLock volume. Volume-append mode allows you to create WORM-appendable files and write data to them incrementally. The default value is false. For more information, see [Volume-append mode](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/worm-state.html#worm-state-append).
        public var volumeAppendModeEnabled: Swift.Bool?

        public init(
            auditLogVolume: Swift.Bool? = nil,
            autocommitPeriod: FSxClientTypes.AutocommitPeriod? = nil,
            privilegedDelete: FSxClientTypes.PrivilegedDelete? = nil,
            retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod? = nil,
            snaplockType: FSxClientTypes.SnaplockType? = nil,
            volumeAppendModeEnabled: Swift.Bool? = nil
        )
        {
            self.auditLogVolume = auditLogVolume
            self.autocommitPeriod = autocommitPeriod
            self.privilegedDelete = privilegedDelete
            self.retentionPeriod = retentionPeriod
            self.snaplockType = snaplockType
            self.volumeAppendModeEnabled = volumeAppendModeEnabled
        }
    }

}

extension FSxClientTypes {
    /// Specifies the configuration of the ONTAP volume that you are creating.
    public struct CreateOntapVolumeConfiguration {
        /// Use to specify configuration options for a volume’s storage aggregate or aggregates.
        public var aggregateConfiguration: FSxClientTypes.CreateAggregateConfiguration?
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the location in the SVM's namespace where the volume is mounted. This parameter is required. The JunctionPath must have a leading forward slash, such as /vol3.
        public var junctionPath: Swift.String?
        /// Specifies the type of volume you are creating. Valid values are the following:
        ///
        /// * RW specifies a read/write volume. RW is the default.
        ///
        /// * DP specifies a data-protection volume. A DP volume is read-only and can be used as the destination of a NetApp SnapMirror relationship.
        ///
        ///
        /// For more information, see [Volume types](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-volumes.html#volume-types) in the Amazon FSx for NetApp ONTAP User Guide.
        public var ontapVolumeType: FSxClientTypes.InputOntapVolumeType?
        /// Specifies the security style for the volume. If a volume's security style is not specified, it is automatically set to the root volume's security style. The security style determines the type of permissions that FSx for ONTAP uses to control data access. Specify one of the following values:
        ///
        /// * UNIX if the file system is managed by a UNIX administrator, the majority of users are NFS clients, and an application accessing the data uses a UNIX user as the service account.
        ///
        /// * NTFS if the file system is managed by a Windows administrator, the majority of users are SMB clients, and an application accessing the data uses a Windows user as the service account.
        ///
        /// * MIXED This is an advanced setting. For more information, see the topic [What the security styles and their effects are](https://docs.netapp.com/us-en/ontap/nfs-admin/security-styles-their-effects-concept.html) in the NetApp Documentation Center.
        ///
        ///
        /// For more information, see [Volume security style](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-volumes.html#volume-security-style) in the FSx for ONTAP User Guide.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// Specifies the configured size of the volume, in bytes.
        public var sizeInBytes: Swift.Int?
        /// Use SizeInBytes instead. Specifies the size of the volume, in megabytes (MB), that you are creating.
        @available(*, deprecated, message: "This property is deprecated, use SizeInBytes instead")
        public var sizeInMegabytes: Swift.Int?
        /// Specifies the SnapLock configuration for an FSx for ONTAP volume.
        public var snaplockConfiguration: FSxClientTypes.CreateSnaplockConfiguration?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume, or set to false to disable them. StorageEfficiencyEnabled is required when creating a RW volume (OntapVolumeType set to RW).
        public var storageEfficiencyEnabled: Swift.Bool?
        /// Specifies the ONTAP SVM in which to create the volume.
        /// This member is required.
        public var storageVirtualMachineId: Swift.String?
        /// Describes the data tiering policy for an ONTAP volume. When enabled, Amazon FSx for ONTAP's intelligent tiering automatically transitions a volume's data between the file system's primary storage and capacity pool storage based on your access patterns. Valid tiering policies are the following:
        ///
        /// * SNAPSHOT_ONLY - (Default value) moves cold snapshots to the capacity pool storage tier.
        ///
        ///
        ///
        ///
        /// * AUTO - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.
        ///
        ///
        ///
        ///
        /// * ALL - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.
        ///
        ///
        ///
        ///
        /// * NONE - keeps a volume's data in the primary storage tier, preventing it from being moved to the capacity pool tier.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?
        /// Use to specify the style of an ONTAP volume. FSx for ONTAP offers two styles of volumes that you can use for different purposes, FlexVol and FlexGroup volumes. For more information, see [Volume styles](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-volumes.html#volume-styles) in the Amazon FSx for NetApp ONTAP User Guide.
        public var volumeStyle: FSxClientTypes.VolumeStyle?

        public init(
            aggregateConfiguration: FSxClientTypes.CreateAggregateConfiguration? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            junctionPath: Swift.String? = nil,
            ontapVolumeType: FSxClientTypes.InputOntapVolumeType? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInBytes: Swift.Int? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snaplockConfiguration: FSxClientTypes.CreateSnaplockConfiguration? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil,
            volumeStyle: FSxClientTypes.VolumeStyle? = nil
        )
        {
            self.aggregateConfiguration = aggregateConfiguration
            self.copyTagsToBackups = copyTagsToBackups
            self.junctionPath = junctionPath
            self.ontapVolumeType = ontapVolumeType
            self.securityStyle = securityStyle
            self.sizeInBytes = sizeInBytes
            self.sizeInMegabytes = sizeInMegabytes
            self.snaplockConfiguration = snaplockConfiguration
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.storageVirtualMachineId = storageVirtualMachineId
            self.tieringPolicy = tieringPolicy
            self.volumeStyle = volumeStyle
        }
    }

}

extension FSxClientTypes {
    /// The snapshot configuration to use when creating an Amazon FSx for OpenZFS volume from a snapshot.
    public struct CreateOpenZFSOriginSnapshotConfiguration {
        /// Specifies the strategy used when copying data from the snapshot to the new volume.
        ///
        /// * CLONE - The new volume references the data in the origin snapshot. Cloning a snapshot is faster than copying data from the snapshot to a new volume and doesn't consume disk throughput. However, the origin snapshot can't be deleted if there is a volume using its copied data.
        ///
        /// * FULL_COPY - Copies all data from the snapshot to the new volume. Specify this option to create the volume from a snapshot on another FSx for OpenZFS file system.
        ///
        ///
        /// The INCREMENTAL_COPY option is only for updating an existing volume by using a snapshot from another FSx for OpenZFS file system. For more information, see [CopySnapshotAndUpdateVolume](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CopySnapshotAndUpdateVolume.html).
        /// This member is required.
        public var copyStrategy: FSxClientTypes.OpenZFSCopyStrategy?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        /// This member is required.
        public var snapshotARN: Swift.String?

        public init(
            copyStrategy: FSxClientTypes.OpenZFSCopyStrategy? = nil,
            snapshotARN: Swift.String? = nil
        )
        {
            self.copyStrategy = copyStrategy
            self.snapshotARN = snapshotARN
        }
    }

}

extension FSxClientTypes {
    /// Specifies the configuration of the Amazon FSx for OpenZFS volume that you are creating.
    public struct CreateOpenZFSVolumeConfiguration {
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToSnapshots: Swift.Bool?
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. ZSTD compression provides a higher level of data compression and higher read throughput performance than LZ4 compression.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. LZ4 compression provides a lower level of compression and higher write throughput performance than ZSTD compression.
        ///
        ///
        /// For more information about volume compression types and the performance of your Amazon FSx for OpenZFS file system, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) File system and volume settings in the Amazon FSx for OpenZFS User Guide.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// The configuration object that specifies the snapshot to use as the origin of the data for the volume.
        public var originSnapshot: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration?
        /// The ID of the volume to use as the parent volume of the volume that you are creating.
        /// This member is required.
        public var parentVolumeId: Swift.String?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// Specifies the suggested block size for a volume in a ZFS dataset, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. We recommend using the default setting for the majority of use cases. Generally, workloads that write in fixed small or large record sizes may benefit from setting a custom record size, like database workloads (small record size) or media streaming workloads (large record size). For additional guidance on when to set a custom record size, see [ ZFS Record size](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#record-size-performance) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// Sets the maximum storage size in gibibytes (GiB) for the volume. You can specify a quota that is larger than the storage on the parent volume. A volume quota limits the amount of storage that the volume can consume to the configured amount, but does not guarantee the space will be available on the parent volume. To guarantee quota space, you must also set StorageCapacityReservationGiB. To not specify a storage capacity quota, set this to -1. For more information, see [Volume properties](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-volumes.html#volume-properties) in the Amazon FSx for OpenZFS User Guide.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// Specifies the amount of storage in gibibytes (GiB) to reserve from the parent volume. Setting StorageCapacityReservationGiB guarantees that the specified amount of storage space on the parent volume will always be available for the volume. You can't reserve more storage than the parent volume has. To not specify a storage capacity reservation, set this to 0 or -1. For more information, see [Volume properties](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-volumes.html#volume-properties) in the Amazon FSx for OpenZFS User Guide.
        public var storageCapacityReservationGiB: Swift.Int?
        /// Configures how much storage users and groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init(
            copyTagsToSnapshots: Swift.Bool? = nil,
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            originSnapshot: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration? = nil,
            parentVolumeId: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.copyTagsToSnapshots = copyTagsToSnapshots
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.originSnapshot = originSnapshot
            self.parentVolumeId = parentVolumeId
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

public struct CreateVolumeInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the name of the volume that you're creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the configuration to use when creating the ONTAP volume.
    public var ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    /// Specifies the configuration to use when creating the OpenZFS volume.
    public var openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?
    /// Specifies the type of volume to create; ONTAP and OPENZFS are the only valid volume types.
    /// This member is required.
    public var volumeType: FSxClientTypes.VolumeType?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        volumeType: FSxClientTypes.VolumeType? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.tags = tags
        self.volumeType = volumeType
    }
}

public struct CreateVolumeFromBackupInput {
    /// The ID of the source backup. Specifies the backup that you are copying.
    /// This member is required.
    public var backupId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the new volume you're creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the configuration of the ONTAP volume that you are creating.
    public var ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.tags = tags
    }
}

/// You can't delete a backup while it's being copied.
public struct BackupBeingCopied: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public internal(set) var backupId: Swift.String? = nil
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupBeingCopied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        backupId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.backupId = backupId
        self.properties.message = message
    }
}

/// You can't delete a backup while it's being used to restore a file system.
public struct BackupRestoring: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The ID of a file system being restored from the backup.
        public internal(set) var fileSystemId: Swift.String? = nil
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupRestoring" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fileSystemId: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.fileSystemId = fileSystemId
        self.properties.message = message
    }
}

/// The request object for the DeleteBackup operation.
public struct DeleteBackupInput {
    /// The ID of the backup that you want to delete.
    /// This member is required.
    public var backupId: Swift.String?
    /// A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This parameter is automatically filled on your behalf when using the CLI or SDK.
    public var clientRequestToken: Swift.String?

    public init(
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
    }
}

/// The response object for the DeleteBackup operation.
public struct DeleteBackupOutput {
    /// The ID of the backup that was deleted.
    public var backupId: Swift.String?
    /// The lifecycle status of the backup. If the DeleteBackup operation is successful, the status is DELETED.
    public var lifecycle: FSxClientTypes.BackupLifecycle?

    public init(
        backupId: Swift.String? = nil,
        lifecycle: FSxClientTypes.BackupLifecycle? = nil
    )
    {
        self.backupId = backupId
        self.lifecycle = lifecycle
    }
}

/// No data repository associations were found based upon the supplied parameters.
public struct DataRepositoryAssociationNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataRepositoryAssociationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDataRepositoryAssociationInput {
    /// The ID of the data repository association that you want to delete.
    /// This member is required.
    public var associationId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Set to true to delete the data in the file system that corresponds to the data repository association.
    public var deleteDataInFileSystem: Swift.Bool?

    public init(
        associationId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        deleteDataInFileSystem: Swift.Bool? = nil
    )
    {
        self.associationId = associationId
        self.clientRequestToken = clientRequestToken
        self.deleteDataInFileSystem = deleteDataInFileSystem
    }
}

public struct DeleteDataRepositoryAssociationOutput {
    /// The ID of the data repository association being deleted.
    public var associationId: Swift.String?
    /// Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is false.
    public var deleteDataInFileSystem: Swift.Bool?
    /// Describes the lifecycle state of the data repository association being deleted.
    public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?

    public init(
        associationId: Swift.String? = nil,
        deleteDataInFileSystem: Swift.Bool? = nil,
        lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil
    )
    {
        self.associationId = associationId
        self.deleteDataInFileSystem = deleteDataInFileSystem
        self.lifecycle = lifecycle
    }
}

/// No caches were found based upon supplied parameters.
public struct FileCacheNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FileCacheNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteFileCacheInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the cache that's being deleted.
    /// This member is required.
    public var fileCacheId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileCacheId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileCacheId = fileCacheId
    }
}

public struct DeleteFileCacheOutput {
    /// The ID of the cache that's being deleted.
    public var fileCacheId: Swift.String?
    /// The cache lifecycle for the deletion request. If the DeleteFileCache operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.FileCacheLifecycle?

    public init(
        fileCacheId: Swift.String? = nil,
        lifecycle: FSxClientTypes.FileCacheLifecycle? = nil
    )
    {
        self.fileCacheId = fileCacheId
        self.lifecycle = lifecycle
    }
}

extension FSxClientTypes {
    /// The configuration object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemLustreConfiguration {
        /// Use if SkipFinalBackup is set to false, and you want to apply an array of tags to the final backup. If you have set the file system property CopyTagsToBackups to true, and you specify one or more FinalBackupTags when deleting a file system, Amazon FSx will not copy any existing file system tags to the backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// Set SkipFinalBackup to false if you want to take a final backup of the file system you are deleting. By default, Amazon FSx will not take a final backup on your behalf when the DeleteFileSystem operation is invoked. (Default = true) The fsx:CreateBackup permission is required if you set SkipFinalBackup to false in order to delete the file system and take a final backup.
        public var skipFinalBackup: Swift.Bool?

        public init(
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes {

    public enum DeleteFileSystemOpenZFSOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteChildVolumesAndSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteFileSystemOpenZFSOption] {
            return [
                .deleteChildVolumesAndSnapshots
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteChildVolumesAndSnapshots: return "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// The configuration object for the Amazon FSx for OpenZFS file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemOpenZFSConfiguration {
        /// A list of tags to apply to the file system's final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// To delete a file system if there are child volumes present below the root volume, use the string DELETE_CHILD_VOLUMES_AND_SNAPSHOTS. If your file system has child volumes and you don't use this option, the delete request will fail.
        public var options: [FSxClientTypes.DeleteFileSystemOpenZFSOption]?
        /// By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the DeleteFileSystem operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to true.
        public var skipFinalBackup: Swift.Bool?

        public init(
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            options: [FSxClientTypes.DeleteFileSystemOpenZFSOption]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.options = options
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes {
    /// The configuration object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemWindowsConfiguration {
        /// A set of tags for your final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// By default, Amazon FSx for Windows takes a final backup on your behalf when the DeleteFileSystem operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.
        public var skipFinalBackup: Swift.Bool?

        public init(
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

/// The request object for DeleteFileSystem operation.
public struct DeleteFileSystemInput {
    /// A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This token is automatically filled on your behalf when using the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system that you want to delete.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The configuration object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public var lustreConfiguration: FSxClientTypes.DeleteFileSystemLustreConfiguration?
    /// The configuration object for the OpenZFS file system used in the DeleteFileSystem operation.
    public var openZFSConfiguration: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration?
    /// The configuration object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public var windowsConfiguration: FSxClientTypes.DeleteFileSystemWindowsConfiguration?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.DeleteFileSystemLustreConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration? = nil,
        windowsConfiguration: FSxClientTypes.DeleteFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.lustreConfiguration = lustreConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.windowsConfiguration = windowsConfiguration
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemLustreResponse {
        /// The ID of the final backup for this file system.
        public var finalBackupId: Swift.String?
        /// The set of tags applied to the final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init(
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for OpenZFS file system that's being deleted in the DeleteFileSystem operation.
    public struct DeleteFileSystemOpenZFSResponse {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var finalBackupId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init(
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

extension FSxClientTypes {
    /// The response object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public struct DeleteFileSystemWindowsResponse {
        /// The ID of the final backup for this file system.
        public var finalBackupId: Swift.String?
        /// The set of tags applied to the final backup.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init(
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

/// The response object for the DeleteFileSystem operation.
public struct DeleteFileSystemOutput {
    /// The ID of the file system that's being deleted.
    public var fileSystemId: Swift.String?
    /// The file system lifecycle for the deletion request. If the DeleteFileSystem operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.FileSystemLifecycle?
    /// The response object for the Amazon FSx for Lustre file system being deleted in the DeleteFileSystem operation.
    public var lustreResponse: FSxClientTypes.DeleteFileSystemLustreResponse?
    /// The response object for the OpenZFS file system that's being deleted in the DeleteFileSystem operation.
    public var openZFSResponse: FSxClientTypes.DeleteFileSystemOpenZFSResponse?
    /// The response object for the Microsoft Windows file system used in the DeleteFileSystem operation.
    public var windowsResponse: FSxClientTypes.DeleteFileSystemWindowsResponse?

    public init(
        fileSystemId: Swift.String? = nil,
        lifecycle: FSxClientTypes.FileSystemLifecycle? = nil,
        lustreResponse: FSxClientTypes.DeleteFileSystemLustreResponse? = nil,
        openZFSResponse: FSxClientTypes.DeleteFileSystemOpenZFSResponse? = nil,
        windowsResponse: FSxClientTypes.DeleteFileSystemWindowsResponse? = nil
    )
    {
        self.fileSystemId = fileSystemId
        self.lifecycle = lifecycle
        self.lustreResponse = lustreResponse
        self.openZFSResponse = openZFSResponse
        self.windowsResponse = windowsResponse
    }
}

/// No Amazon FSx snapshots were found based on the supplied parameters.
public struct SnapshotNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSnapshotInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the snapshot that you want to delete.
    /// This member is required.
    public var snapshotId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.snapshotId = snapshotId
    }
}

public struct DeleteSnapshotOutput {
    /// The lifecycle status of the snapshot. If the DeleteSnapshot operation is successful, this status is DELETING.
    public var lifecycle: FSxClientTypes.SnapshotLifecycle?
    /// The ID of the deleted snapshot.
    public var snapshotId: Swift.String?

    public init(
        lifecycle: FSxClientTypes.SnapshotLifecycle? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.snapshotId = snapshotId
    }
}

public struct DeleteStorageVirtualMachineInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the SVM that you want to delete.
    /// This member is required.
    public var storageVirtualMachineId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        storageVirtualMachineId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.storageVirtualMachineId = storageVirtualMachineId
    }
}

public struct DeleteStorageVirtualMachineOutput {
    /// Describes the lifecycle state of the SVM being deleted.
    public var lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle?
    /// The ID of the SVM Amazon FSx is deleting.
    public var storageVirtualMachineId: Swift.String?

    public init(
        lifecycle: FSxClientTypes.StorageVirtualMachineLifecycle? = nil,
        storageVirtualMachineId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.storageVirtualMachineId = storageVirtualMachineId
    }
}

extension FSxClientTypes {
    /// Use to specify skipping a final backup, adding tags to a final backup, or bypassing the retention period of an FSx for ONTAP SnapLock Enterprise volume when deleting an FSx for ONTAP volume.
    public struct DeleteVolumeOntapConfiguration {
        /// Setting this to true allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission fsx:BypassSnaplockEnterpriseRetention is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is false. For more information, see [ Deleting a SnapLock volume](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html).
        public var bypassSnaplockEnterpriseRetention: Swift.Bool?
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?
        /// Set to true if you want to skip taking a final backup of the volume you are deleting.
        public var skipFinalBackup: Swift.Bool?

        public init(
            bypassSnaplockEnterpriseRetention: Swift.Bool? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil,
            skipFinalBackup: Swift.Bool? = nil
        )
        {
            self.bypassSnaplockEnterpriseRetention = bypassSnaplockEnterpriseRetention
            self.finalBackupTags = finalBackupTags
            self.skipFinalBackup = skipFinalBackup
        }
    }

}

extension FSxClientTypes {

    public enum DeleteOpenZFSVolumeOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteChildVolumesAndSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteOpenZFSVolumeOption] {
            return [
                .deleteChildVolumesAndSnapshots
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteChildVolumesAndSnapshots: return "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A value that specifies whether to delete all child volumes and snapshots.
    public struct DeleteVolumeOpenZFSConfiguration {
        /// To delete the volume's child volumes, snapshots, and clones, use the string DELETE_CHILD_VOLUMES_AND_SNAPSHOTS.
        public var options: [FSxClientTypes.DeleteOpenZFSVolumeOption]?

        public init(
            options: [FSxClientTypes.DeleteOpenZFSVolumeOption]? = nil
        )
        {
            self.options = options
        }
    }

}

public struct DeleteVolumeInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// For Amazon FSx for ONTAP volumes, specify whether to take a final backup of the volume and apply tags to the backup. To apply tags to the backup, you must have the fsx:TagResource permission.
    public var ontapConfiguration: FSxClientTypes.DeleteVolumeOntapConfiguration?
    /// For Amazon FSx for OpenZFS volumes, specify whether to delete all child volumes and snapshots.
    public var openZFSConfiguration: FSxClientTypes.DeleteVolumeOpenZFSConfiguration?
    /// The ID of the volume that you are deleting.
    /// This member is required.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.DeleteVolumeOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.DeleteVolumeOpenZFSConfiguration? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.volumeId = volumeId
    }
}

extension FSxClientTypes {
    /// The response object for the Amazon FSx for NetApp ONTAP volume being deleted in the DeleteVolume operation.
    public struct DeleteVolumeOntapResponse {
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var finalBackupId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var finalBackupTags: [FSxClientTypes.Tag]?

        public init(
            finalBackupId: Swift.String? = nil,
            finalBackupTags: [FSxClientTypes.Tag]? = nil
        )
        {
            self.finalBackupId = finalBackupId
            self.finalBackupTags = finalBackupTags
        }
    }

}

public struct DeleteVolumeOutput {
    /// The lifecycle state of the volume being deleted. If the DeleteVolume operation is successful, this value is DELETING.
    public var lifecycle: FSxClientTypes.VolumeLifecycle?
    /// Returned after a DeleteVolume request, showing the status of the delete request.
    public var ontapResponse: FSxClientTypes.DeleteVolumeOntapResponse?
    /// The ID of the volume that's being deleted.
    public var volumeId: Swift.String?

    public init(
        lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
        ontapResponse: FSxClientTypes.DeleteVolumeOntapResponse? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.lifecycle = lifecycle
        self.ontapResponse = ontapResponse
        self.volumeId = volumeId
    }
}

extension FSxClientTypes {

    /// The name for a filter.
    public enum FilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case backupType
        case dataRepositoryType
        case fileCacheId
        case fileCacheType
        case fileSystemId
        case fileSystemType
        case volumeId
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterName] {
            return [
                .backupType,
                .dataRepositoryType,
                .fileCacheId,
                .fileCacheType,
                .fileSystemId,
                .fileSystemType,
                .volumeId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .backupType: return "backup-type"
            case .dataRepositoryType: return "data-repository-type"
            case .fileCacheId: return "file-cache-id"
            case .fileCacheType: return "file-cache-type"
            case .fileSystemId: return "file-system-id"
            case .fileSystemType: return "file-system-type"
            case .volumeId: return "volume-id"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls. You can use multiple filters to return results that meet all applied filter requirements.
    public struct Filter {
        /// The name for this filter.
        public var name: FSxClientTypes.FilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init(
            name: FSxClientTypes.FilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

/// The request object for the DescribeBackups operation.
public struct DescribeBackupsInput {
    /// The IDs of the backups that you want to retrieve. This parameter value overrides any filters. If any IDs aren't found, a BackupNotFound error occurs.
    public var backupIds: [Swift.String]?
    /// The filters structure. The supported names are file-system-id, backup-type, file-system-type, and volume-id.
    public var filters: [FSxClientTypes.Filter]?
    /// Maximum number of backups to return in the response. This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// An opaque pagination token returned from a previous DescribeBackups operation. If a token is present, the operation continues the list from where the returning call left off.
    public var nextToken: Swift.String?

    public init(
        backupIds: [Swift.String]? = nil,
        filters: [FSxClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.backupIds = backupIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// You have filtered the response to a data repository type that is not supported.
public struct InvalidDataRepositoryType: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDataRepositoryType" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeDataRepositoryAssociationsInput {
    /// IDs of the data repository associations whose descriptions you want to retrieve (String).
    public var associationIds: [Swift.String]?
    /// A list of Filter elements.
    public var filters: [FSxClientTypes.Filter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init(
        associationIds: [Swift.String]? = nil,
        filters: [FSxClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associationIds = associationIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeDataRepositoryAssociationsOutput {
    /// An array of one or more data repository association descriptions.
    public var associations: [FSxClientTypes.DataRepositoryAssociation]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init(
        associations: [FSxClientTypes.DataRepositoryAssociation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associations = associations
        self.nextToken = nextToken
    }
}

extension FSxClientTypes {

    public enum DataRepositoryTaskFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dataRepoAssociationId
        case fileCacheId
        case fileSystemId
        case taskLifecycle
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRepositoryTaskFilterName] {
            return [
                .dataRepoAssociationId,
                .fileCacheId,
                .fileSystemId,
                .taskLifecycle
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dataRepoAssociationId: return "data-repository-association-id"
            case .fileCacheId: return "file-cache-id"
            case .fileSystemId: return "file-system-id"
            case .taskLifecycle: return "task-lifecycle"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// (Optional) An array of filter objects you can use to filter the response of data repository tasks you will see in the the response. You can filter the tasks returned in the response by one or more file system IDs, task lifecycles, and by task type. A filter object consists of a filter Name, and one or more Values for the filter.
    public struct DataRepositoryTaskFilter {
        /// Name of the task property to use in filtering the tasks returned in the response.
        ///
        /// * Use file-system-id to retrieve data repository tasks for specific file systems.
        ///
        /// * Use task-lifecycle to retrieve data repository tasks with one or more specific lifecycle states, as follows: CANCELED, EXECUTING, FAILED, PENDING, and SUCCEEDED.
        public var name: FSxClientTypes.DataRepositoryTaskFilterName?
        /// Use Values to include the specific file system IDs and task lifecycle states for the filters you are using.
        public var values: [Swift.String]?

        public init(
            name: FSxClientTypes.DataRepositoryTaskFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

public struct DescribeDataRepositoryTasksInput {
    /// (Optional) You can use filters to narrow the DescribeDataRepositoryTasks response to include just tasks for specific file systems, or tasks in a specific lifecycle state.
    public var filters: [FSxClientTypes.DataRepositoryTaskFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// (Optional) IDs of the tasks whose descriptions you want to retrieve (String).
    public var taskIds: [Swift.String]?

    public init(
        filters: [FSxClientTypes.DataRepositoryTaskFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        taskIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.taskIds = taskIds
    }
}

public struct DescribeDataRepositoryTasksOutput {
    /// The collection of data repository task descriptions returned.
    public var dataRepositoryTasks: [FSxClientTypes.DataRepositoryTask]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init(
        dataRepositoryTasks: [FSxClientTypes.DataRepositoryTask]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataRepositoryTasks = dataRepositoryTasks
        self.nextToken = nextToken
    }
}

public struct DescribeFileCachesInput {
    /// IDs of the caches whose descriptions you want to retrieve (String).
    public var fileCacheIds: [Swift.String]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init(
        fileCacheIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileCacheIds = fileCacheIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension FSxClientTypes {
    /// A description of a specific Amazon File Cache resource, which is a response object from the DescribeFileCaches operation.
    public struct FileCache {
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// A list of IDs of data repository associations that are associated with this cache.
        public var dataRepositoryAssociationIds: [Swift.String]?
        /// The Domain Name System (DNS) name for the cache.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileCacheFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The type of cache, which must be LUSTRE.
        public var fileCacheType: FSxClientTypes.FileCacheType?
        /// The Lustre version of the cache, which must be 2.12.
        public var fileCacheTypeVersion: Swift.String?
        /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the cache. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The cache is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - The new cache is being created.
        ///
        /// * DELETING - An existing cache is being deleted.
        ///
        /// * UPDATING - The cache is undergoing a customer-initiated update.
        ///
        /// * FAILED - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.
        public var lifecycle: FSxClientTypes.FileCacheLifecycle?
        /// The configuration for the Amazon File Cache resource.
        public var lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration?
        /// A list of network interface IDs.
        public var networkInterfaceIds: [Swift.String]?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The storage capacity of the cache in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
        public var subnetIds: [Swift.String]?
        /// The ID of your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var vpcId: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            dataRepositoryAssociationIds: [Swift.String]? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileCacheFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCacheType: FSxClientTypes.FileCacheType? = nil,
            fileCacheTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileCacheLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.dataRepositoryAssociationIds = dataRepositoryAssociationIds
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCacheType = fileCacheType
            self.fileCacheTypeVersion = fileCacheTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

public struct DescribeFileCachesOutput {
    /// The response object for the DescribeFileCaches operation.
    public var fileCaches: [FSxClientTypes.FileCache]?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?

    public init(
        fileCaches: [FSxClientTypes.FileCache]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileCaches = fileCaches
        self.nextToken = nextToken
    }
}

/// The request object for DescribeFileSystemAliases operation.
public struct DescribeFileSystemAliasesInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system to return the associated DNS aliases for (String).
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// Maximum number of DNS aliases to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous DescribeFileSystemAliases operation (String). If a token is included in the request, the action continues the list from where the previous returning call left off.
    public var nextToken: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// The response object for DescribeFileSystemAliases operation.
public struct DescribeFileSystemAliasesOutput {
    /// An array of one or more DNS aliases currently associated with the specified file system.
    public var aliases: [FSxClientTypes.Alias]?
    /// Present if there are more DNS aliases than returned in the response (String). You can use the NextToken value in a later request to fetch additional descriptions.
    public var nextToken: Swift.String?

    public init(
        aliases: [FSxClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

/// The request object for DescribeFileSystems operation.
public struct DescribeFileSystemsInput {
    /// IDs of the file systems whose descriptions you want to retrieve (String).
    public var fileSystemIds: [Swift.String]?
    /// Maximum number of file systems to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous DescribeFileSystems operation (String). If a token present, the operation continues the list from where the returning call left off.
    public var nextToken: Swift.String?

    public init(
        fileSystemIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileSystemIds = fileSystemIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeSharedVpcConfigurationInput {

    public init() { }
}

public struct DescribeSharedVpcConfigurationOutput {
    /// Indicates whether participant accounts can create FSx for ONTAP Multi-AZ file systems in shared subnets.
    public var enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String?

    public init(
        enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String? = nil
    )
    {
        self.enableFsxRouteTableUpdatesFromParticipantAccounts = enableFsxRouteTableUpdatesFromParticipantAccounts
    }
}

extension FSxClientTypes {

    public enum SnapshotFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fileSystemId
        case volumeId
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotFilterName] {
            return [
                .fileSystemId,
                .volumeId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case .volumeId: return "volume-id"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of DescribeSnapshots calls. You can use multiple filters to return results that meet all applied filter requirements.
    public struct SnapshotFilter {
        /// The name of the filter to use. You can filter by the file-system-id or by volume-id.
        public var name: FSxClientTypes.SnapshotFilterName?
        /// The file-system-id or volume-id that you are filtering for.
        public var values: [Swift.String]?

        public init(
            name: FSxClientTypes.SnapshotFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

public struct DescribeSnapshotsInput {
    /// The filters structure. The supported names are file-system-id or volume-id.
    public var filters: [FSxClientTypes.SnapshotFilter]?
    /// Set to false (default) if you want to only see the snapshots owned by your Amazon Web Services account. Set to true if you want to see the snapshots in your account and the ones shared with you from another account.
    public var includeShared: Swift.Bool?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// The IDs of the snapshots that you want to retrieve. This parameter value overrides any filters. If any IDs aren't found, a SnapshotNotFound error occurs.
    public var snapshotIds: [Swift.String]?

    public init(
        filters: [FSxClientTypes.SnapshotFilter]? = nil,
        includeShared: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        snapshotIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.includeShared = includeShared
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.snapshotIds = snapshotIds
    }
}

extension FSxClientTypes {

    public enum StorageVirtualMachineFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fileSystemId
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageVirtualMachineFilterName] {
            return [
                .fileSystemId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls for Amazon FSx for NetApp ONTAP storage virtual machines (SVMs). You can use multiple filters to return results that meet all applied filter requirements.
    public struct StorageVirtualMachineFilter {
        /// The name for this filter.
        public var name: FSxClientTypes.StorageVirtualMachineFilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init(
            name: FSxClientTypes.StorageVirtualMachineFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

public struct DescribeStorageVirtualMachinesInput {
    /// Enter a filter name:value pair to view a select set of SVMs.
    public var filters: [FSxClientTypes.StorageVirtualMachineFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Enter the ID of one or more SVMs that you want to view.
    public var storageVirtualMachineIds: [Swift.String]?

    public init(
        filters: [FSxClientTypes.StorageVirtualMachineFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        storageVirtualMachineIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.storageVirtualMachineIds = storageVirtualMachineIds
    }
}

public struct DescribeStorageVirtualMachinesOutput {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Returned after a successful DescribeStorageVirtualMachines operation, describing each SVM.
    public var storageVirtualMachines: [FSxClientTypes.StorageVirtualMachine]?

    public init(
        nextToken: Swift.String? = nil,
        storageVirtualMachines: [FSxClientTypes.StorageVirtualMachine]? = nil
    )
    {
        self.nextToken = nextToken
        self.storageVirtualMachines = storageVirtualMachines
    }
}

extension FSxClientTypes {

    public enum VolumeFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fileSystemId
        case storageVirtualMachineId
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeFilterName] {
            return [
                .fileSystemId,
                .storageVirtualMachineId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fileSystemId: return "file-system-id"
            case .storageVirtualMachineId: return "storage-virtual-machine-id"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FSxClientTypes {
    /// A filter used to restrict the results of describe calls for Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volumes. You can use multiple filters to return results that meet all applied filter requirements.
    public struct VolumeFilter {
        /// The name for this filter.
        public var name: FSxClientTypes.VolumeFilterName?
        /// The values of the filter. These are all the values for any of the applied filters.
        public var values: [Swift.String]?

        public init(
            name: FSxClientTypes.VolumeFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

public struct DescribeVolumesInput {
    /// Enter a filter Name and Values pair to view a select set of volumes.
    public var filters: [FSxClientTypes.VolumeFilter]?
    /// The maximum number of resources to return in the response. This value must be an integer greater than zero.
    public var maxResults: Swift.Int?
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// The IDs of the volumes whose descriptions you want to retrieve.
    public var volumeIds: [Swift.String]?

    public init(
        filters: [FSxClientTypes.VolumeFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        volumeIds: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeIds = volumeIds
    }
}

/// The request object of DNS aliases to disassociate from an Amazon FSx for Windows File Server file system.
public struct DisassociateFileSystemAliasesInput {
    /// An array of one or more DNS alias names to disassociate, or remove, from the file system.
    /// This member is required.
    public var aliases: [Swift.String]?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies the file system from which to disassociate the DNS aliases.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init(
        aliases: [Swift.String]? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

/// The system generated response showing the DNS aliases that Amazon FSx is attempting to disassociate from the file system. Use the API operation to monitor the status of the aliases Amazon FSx is removing from the file system.
public struct DisassociateFileSystemAliasesOutput {
    /// An array of one or more DNS aliases that Amazon FSx is attempting to disassociate from the file system.
    public var aliases: [FSxClientTypes.Alias]?

    public init(
        aliases: [FSxClientTypes.Alias]? = nil
    )
    {
        self.aliases = aliases
    }
}

/// The resource specified for the tagging operation is not a resource type owned by Amazon FSx. Use the API of the relevant service to perform the operation.
public struct NotServiceResourceError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon Resource Name (ARN) of the non-Amazon FSx resource.
        /// This member is required.
        public internal(set) var resourceARN: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotServiceResourceError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceARN = resourceARN
    }
}

/// The resource specified does not support tagging.
public struct ResourceDoesNotSupportTagging: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon Resource Name (ARN) of the resource that doesn't support tagging.
        /// This member is required.
        public internal(set) var resourceARN: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceDoesNotSupportTagging" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceARN = resourceARN
    }
}

/// The resource specified by the Amazon Resource Name (ARN) can't be found.
public struct ResourceNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A detailed error message.
        public internal(set) var message: Swift.String? = nil
        /// The resource ARN of the resource that can't be found.
        /// This member is required.
        public internal(set) var resourceARN: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceARN = resourceARN
    }
}

/// The request object for ListTagsForResource operation.
public struct ListTagsForResourceInput {
    /// Maximum number of tags to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
    public var maxResults: Swift.Int?
    /// Opaque pagination token returned from a previous ListTagsForResource operation (String). If a token present, the action continues the list from where the returning call left off.
    public var nextToken: Swift.String?
    /// The ARN of the Amazon FSx resource that will have its tags listed.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceARN = resourceARN
    }
}

/// The response object for ListTagsForResource operation.
public struct ListTagsForResourceOutput {
    /// This is present if there are more tags than returned in the response (String). You can use the NextToken value in the later request to fetch the tags.
    public var nextToken: Swift.String?
    /// A list of tags on the resource.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct ReleaseFileSystemNfsV3LocksInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

extension FSxClientTypes {

    public enum RestoreOpenZFSVolumeOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteClonedVolumes
        case deleteIntermediateSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [RestoreOpenZFSVolumeOption] {
            return [
                .deleteClonedVolumes,
                .deleteIntermediateSnapshots
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteClonedVolumes: return "DELETE_CLONED_VOLUMES"
            case .deleteIntermediateSnapshots: return "DELETE_INTERMEDIATE_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct RestoreVolumeFromSnapshotInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The settings used when restoring the specified volume from snapshot.
    ///
    /// * DELETE_INTERMEDIATE_SNAPSHOTS - Deletes snapshots between the current state and the specified snapshot. If there are intermediate snapshots and this option isn't used, RestoreVolumeFromSnapshot fails.
    ///
    /// * DELETE_CLONED_VOLUMES - Deletes any dependent clone volumes created from intermediate snapshots. If there are any dependent clone volumes and this option isn't used, RestoreVolumeFromSnapshot fails.
    public var options: [FSxClientTypes.RestoreOpenZFSVolumeOption]?
    /// The ID of the source snapshot. Specifies the snapshot that you are restoring from.
    /// This member is required.
    public var snapshotId: Swift.String?
    /// The ID of the volume that you are restoring.
    /// This member is required.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        options: [FSxClientTypes.RestoreOpenZFSVolumeOption]? = nil,
        snapshotId: Swift.String? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.options = options
        self.snapshotId = snapshotId
        self.volumeId = volumeId
    }
}

public struct StartMisconfiguredStateRecoveryInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The globally unique ID of the file system, assigned by Amazon FSx.
    /// This member is required.
    public var fileSystemId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
    }
}

/// The request object for the TagResource operation.
public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the Amazon FSx resource that you want to tag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tags for the resource. If a tag with a given key already exists, the value is replaced by the one specified in this parameter.
    /// This member is required.
    public var tags: [FSxClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

/// The response object for the TagResource operation.
public struct TagResourceOutput {

    public init() { }
}

/// The request object for UntagResource action.
public struct UntagResourceInput {
    /// The ARN of the Amazon FSx resource to untag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of keys of tags on the resource to untag. In case the tag key doesn't exist, the call will still succeed to be idempotent.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

/// The response object for UntagResource action.
public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateDataRepositoryAssociationInput {
    /// The ID of the data repository association that you are updating.
    /// This member is required.
    public var associationId: Swift.String?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
    public var importedFileChunkSize: Swift.Int?
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    public var s3: FSxClientTypes.S3DataRepositoryConfiguration?

    public init(
        associationId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        importedFileChunkSize: Swift.Int? = nil,
        s3: FSxClientTypes.S3DataRepositoryConfiguration? = nil
    )
    {
        self.associationId = associationId
        self.clientRequestToken = clientRequestToken
        self.importedFileChunkSize = importedFileChunkSize
        self.s3 = s3
    }
}

public struct UpdateDataRepositoryAssociationOutput {
    /// The response object returned after the data repository association is updated.
    public var association: FSxClientTypes.DataRepositoryAssociation?

    public init(
        association: FSxClientTypes.DataRepositoryAssociation? = nil
    )
    {
        self.association = association
    }
}

extension FSxClientTypes {
    /// The configuration update for an Amazon File Cache resource.
    public struct UpdateFileCacheLustreConfiguration {
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

public struct UpdateFileCacheInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the cache that you are updating.
    /// This member is required.
    public var fileCacheId: Swift.String?
    /// The configuration updates for an Amazon File Cache resource.
    public var lustreConfiguration: FSxClientTypes.UpdateFileCacheLustreConfiguration?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileCacheId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.UpdateFileCacheLustreConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileCacheId = fileCacheId
        self.lustreConfiguration = lustreConfiguration
    }
}

public struct UpdateFileCacheOutput {
    /// A description of the cache that was updated.
    public var fileCache: FSxClientTypes.FileCache?

    public init(
        fileCache: FSxClientTypes.FileCache? = nil
    )
    {
        self.fileCache = fileCache
    }
}

extension FSxClientTypes {
    /// The Lustre metadata performance configuration update for an Amazon FSx for Lustre file system using a PERSISTENT_2 deployment type. You can request an increase in your file system's Metadata IOPS and/or switch your file system's metadata configuration mode. For more information, see [Managing metadata performance](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-metadata-performance.html) in the Amazon FSx for Lustre User Guide.
    public struct UpdateFileSystemLustreMetadataConfiguration {
        /// (USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for your file system. Valid values are 1500, 3000, 6000, 12000, and multiples of 12000 up to a maximum of 192000. The value you provide must be greater than or equal to the current number of Metadata IOPS provisioned for the file system.
        public var iops: Swift.Int?
        /// The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a PERSISTENT_2 deployment type.
        ///
        /// * To increase the Metadata IOPS or to switch from AUTOMATIC mode, specify USER_PROVISIONED as the value for this parameter. Then use the Iops parameter to provide a Metadata IOPS value that is greater than or equal to the current number of Metadata IOPS provisioned for the file system.
        ///
        /// * To switch from USER_PROVISIONED mode, specify AUTOMATIC as the value for this parameter, but do not input a value for Iops. If you request to switch from USER_PROVISIONED to AUTOMATIC mode and the current Metadata IOPS value is greater than the automated default, FSx for Lustre rejects the request because downscaling Metadata IOPS is not supported.
        public var mode: FSxClientTypes.MetadataConfigurationMode?

        public init(
            iops: Swift.Int? = nil,
            mode: FSxClientTypes.MetadataConfigurationMode? = nil
        )
        {
            self.iops = iops
            self.mode = mode
        }
    }

}

extension FSxClientTypes {
    /// The configuration object for Amazon FSx for Lustre file systems used in the UpdateFileSystem operation.
    public struct UpdateFileSystemLustreConfiguration {
        /// (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        ///
        ///
        /// This parameter is not supported for file systems with a data repository association.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// Sets the data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - Data compression is turned off for the file system.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// If you don't use DataCompressionType, the file system retains its current data compression configuration. For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html).
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogCreateConfiguration?
        /// The Lustre metadata performance configuration for an Amazon FSx for Lustre file system using a PERSISTENT_2 deployment type. When this configuration is enabled, the file system supports increasing metadata performance.
        public var metadataConfiguration: FSxClientTypes.UpdateFileSystemLustreMetadataConfiguration?
        /// The throughput of an Amazon FSx for Lustre Persistent SSD-based file system, measured in megabytes per second per tebibyte (MB/s/TiB). You can increase or decrease your file system's throughput. Valid values depend on the deployment type of the file system, as follows:
        ///
        /// * For PERSISTENT_1 SSD-based deployment types, valid values are 50, 100, and 200 MB/s/TiB.
        ///
        /// * For PERSISTENT_2 SSD-based deployment types, valid values are 125, 250, 500, and 1000 MB/s/TiB.
        ///
        ///
        /// For more information, see [ Managing throughput capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-throughput-capacity.html).
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// (Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            logConfiguration: FSxClientTypes.LustreLogCreateConfiguration? = nil,
            metadataConfiguration: FSxClientTypes.UpdateFileSystemLustreMetadataConfiguration? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.logConfiguration = logConfiguration
            self.metadataConfiguration = metadataConfiguration
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    /// The configuration updates for an Amazon FSx for NetApp ONTAP file system.
    public struct UpdateFileSystemOntapConfiguration {
        /// (Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.
        public var addRouteTableIds: [Swift.String]?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (AUTOMATIC or USER_PROVISIONED), and in the case of USER_PROVISIONED IOPS, the total number of SSD IOPS provisioned. For more information, see [Updating SSD storage capacity and IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// Update the password for the fsxadmin user by entering a new password. You use the fsxadmin user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see [Managing resources using NetApp Applicaton](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html).
        public var fsxAdminPassword: Swift.String?
        /// Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for StorageCapacity, Iops, and ThroughputCapacity. For more information, see [High-availability (HA) pairs](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs) in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see [Using block storage protocols](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage).
        public var haPairs: Swift.Int?
        /// (Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.
        public var removeRouteTableIds: [Swift.String]?
        /// Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see [Managing throughput capacity](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html) in the FSx for ONTAP User Guide. Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of ThroughputCapacity and ThroughputCapacityPerHAPair are not the same value.
        ///
        /// * The value of ThroughputCapacity when divided by the value of HAPairs is outside of the valid range for ThroughputCapacity.
        public var throughputCapacity: Swift.Int?
        /// Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system. This field and ThroughputCapacity cannot be defined in the same API call, but one is required. This field and ThroughputCapacity are the same for file systems with one HA pair.
        ///
        /// * For SINGLE_AZ_1 and MULTI_AZ_1 file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.
        ///
        /// * For SINGLE_AZ_2, valid values are 1536, 3072, or 6144 MBps.
        ///
        /// * For MULTI_AZ_2, valid values are 384, 768, 1536, 3072, or 6144 MBps.
        ///
        ///
        /// Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:
        ///
        /// * The value of ThroughputCapacity and ThroughputCapacityPerHAPair are not the same value for file systems with one HA pair.
        ///
        /// * The value of deployment type is SINGLE_AZ_2 and ThroughputCapacity / ThroughputCapacityPerHAPair is not a valid HA pair (a value between 1 and 12).
        ///
        /// * The value of ThroughputCapacityPerHAPair is not a valid value.
        public var throughputCapacityPerHAPair: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            addRouteTableIds: [Swift.String]? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            fsxAdminPassword: Swift.String? = nil,
            haPairs: Swift.Int? = nil,
            removeRouteTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            throughputCapacityPerHAPair: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.addRouteTableIds = addRouteTableIds
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.diskIopsConfiguration = diskIopsConfiguration
            self.fsxAdminPassword = fsxAdminPassword
            self.haPairs = haPairs
            self.removeRouteTableIds = removeRouteTableIds
            self.throughputCapacity = throughputCapacity
            self.throughputCapacityPerHAPair = throughputCapacityPerHAPair
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes.UpdateFileSystemOntapConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateFileSystemOntapConfiguration(addRouteTableIds: \(Swift.String(describing: addRouteTableIds)), automaticBackupRetentionDays: \(Swift.String(describing: automaticBackupRetentionDays)), dailyAutomaticBackupStartTime: \(Swift.String(describing: dailyAutomaticBackupStartTime)), diskIopsConfiguration: \(Swift.String(describing: diskIopsConfiguration)), haPairs: \(Swift.String(describing: haPairs)), removeRouteTableIds: \(Swift.String(describing: removeRouteTableIds)), throughputCapacity: \(Swift.String(describing: throughputCapacity)), throughputCapacityPerHAPair: \(Swift.String(describing: throughputCapacityPerHAPair)), weeklyMaintenanceStartTime: \(Swift.String(describing: weeklyMaintenanceStartTime)), fsxAdminPassword: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// The configuration updates for an Amazon FSx for OpenZFS file system.
    public struct UpdateFileSystemOpenZFSConfiguration {
        /// (Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for OpenZFS file system.
        public var addRouteTableIds: [Swift.String]?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to false. If it's set to true, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// A Boolean value indicating whether tags for the volume should be copied to snapshots. This value defaults to false. If it's set to true, all tags for the volume are copied to snapshots where the user doesn't specify tags. If this value is true and you specify one or more tags, only the specified tags are copied to snapshots. If you specify one or more tags when creating the snapshot, no tags are copied from the volume, regardless of this value.
        public var copyTagsToVolumes: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP, Amazon FSx for Windows File Server, or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// (Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for OpenZFS file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.
        public var removeRouteTableIds: [Swift.String]?
        /// The throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second  (MB/s). Valid values depend on the DeploymentType you choose, as follows:
        ///
        /// * For MULTI_AZ_1 and SINGLE_AZ_2, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.
        ///
        /// * For SINGLE_AZ_1, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.
        public var throughputCapacity: Swift.Int?
        /// A recurring weekly time, in the format D:HH:MM. D is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see [the ISO-8601 spec as described on Wikipedia](https://en.wikipedia.org/wiki/ISO_week_date). HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            addRouteTableIds: [Swift.String]? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            copyTagsToVolumes: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            removeRouteTableIds: [Swift.String]? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.addRouteTableIds = addRouteTableIds
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.copyTagsToVolumes = copyTagsToVolumes
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.diskIopsConfiguration = diskIopsConfiguration
            self.removeRouteTableIds = removeRouteTableIds
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

extension FSxClientTypes {
    /// Specifies changes you are making to the self-managed Microsoft Active Directory configuration to which an FSx for Windows File Server file system or an FSx for ONTAP SVM is joined.
    public struct SelfManagedActiveDirectoryConfigurationUpdates {
        /// A list of up to three DNS server or domain controller IP addresses in your self-managed Active Directory domain.
        public var dnsIps: [Swift.String]?
        /// Specifies an updated fully qualified domain name of your self-managed Active Directory configuration.
        public var domainName: Swift.String?
        /// For FSx for ONTAP file systems only - Specifies the updated name of the self-managed Active Directory domain group whose members are granted administrative privileges for the Amazon FSx resource.
        public var fileSystemAdministratorsGroup: Swift.String?
        /// Specifies an updated fully qualified distinguished name of the organization unit within your self-managed Active Directory.
        public var organizationalUnitDistinguishedName: Swift.String?
        /// Specifies the updated password for the service account on your self-managed Active Directory domain. Amazon FSx uses this account to join to your self-managed Active Directory domain.
        public var password: Swift.String?
        /// Specifies the updated user name for the service account on your self-managed Active Directory domain. Amazon FSx uses this account to join to your self-managed Active Directory domain. This account must have the permissions required to join computers to the domain in the organizational unit provided in OrganizationalUnitDistinguishedName.
        public var userName: Swift.String?

        public init(
            dnsIps: [Swift.String]? = nil,
            domainName: Swift.String? = nil,
            fileSystemAdministratorsGroup: Swift.String? = nil,
            organizationalUnitDistinguishedName: Swift.String? = nil,
            password: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.dnsIps = dnsIps
            self.domainName = domainName
            self.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.password = password
            self.userName = userName
        }
    }

}

extension FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelfManagedActiveDirectoryConfigurationUpdates(dnsIps: \(Swift.String(describing: dnsIps)), domainName: \(Swift.String(describing: domainName)), fileSystemAdministratorsGroup: \(Swift.String(describing: fileSystemAdministratorsGroup)), organizationalUnitDistinguishedName: \(Swift.String(describing: organizationalUnitDistinguishedName)), userName: \(Swift.String(describing: userName)), password: \"CONTENT_REDACTED\")"}
}

extension FSxClientTypes {
    /// Updates the configuration for an existing Amazon FSx for Windows File Server file system. Amazon FSx only overwrites existing properties with non-null values provided in the request.
    public struct UpdateFileSystemWindowsConfiguration {
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system..
        public var auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration?
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 30. For more information, see [Working with Automatic Daily Backups](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html#automatic-backups).
        public var automaticBackupRetentionDays: Swift.Int?
        /// The preferred time to start the daily automatic backup, in the UTC time zone, for example, 02:00
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for Windows file system. By default, Amazon FSx automatically provisions 3 IOPS per GiB of storage capacity. You can provision additional IOPS per GiB of storage, up to the maximum limit associated with your chosen throughput capacity.
        public var diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration?
        /// The configuration Amazon FSx uses to join the Windows File Server instance to the self-managed Microsoft AD directory. You cannot make a self-managed Microsoft AD update request if there is an existing self-managed Microsoft AD update request in progress.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates?
        /// Sets the target value for a file system's throughput capacity, in MB/s, that you are updating the file system to. Valid values are 8, 16, 32, 64, 128, 256, 512, 1024, 2048. You cannot make a throughput capacity update request if there is an existing throughput capacity update request in progress. For more information, see [Managing Throughput Capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-throughput-capacity.html).
        public var throughputCapacity: Swift.Int?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. Where d is the weekday number, from 1 through 7, with 1 = Monday and 7 = Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init(
            auditLogConfiguration: FSxClientTypes.WindowsAuditLogCreateConfiguration? = nil,
            automaticBackupRetentionDays: Swift.Int? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            diskIopsConfiguration: FSxClientTypes.DiskIopsConfiguration? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates? = nil,
            throughputCapacity: Swift.Int? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.auditLogConfiguration = auditLogConfiguration
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.diskIopsConfiguration = diskIopsConfiguration
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
            self.throughputCapacity = throughputCapacity
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}

/// The request object for the UpdateFileSystem operation.
public struct UpdateFileSystemInput {
    /// A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent updates. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the file system that you are updating.
    /// This member is required.
    public var fileSystemId: Swift.String?
    /// The configuration object for Amazon FSx for Lustre file systems used in the UpdateFileSystem operation.
    public var lustreConfiguration: FSxClientTypes.UpdateFileSystemLustreConfiguration?
    /// The configuration updates for an Amazon FSx for NetApp ONTAP file system.
    public var ontapConfiguration: FSxClientTypes.UpdateFileSystemOntapConfiguration?
    /// The configuration updates for an FSx for OpenZFS file system.
    public var openZFSConfiguration: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration?
    /// Use this parameter to increase the storage capacity of an FSx for Windows File Server, FSx for Lustre, FSx for OpenZFS, or FSx for ONTAP file system. Specifies the storage capacity target value, in GiB, to increase the storage capacity for the file system that you're updating. You can't make a storage capacity increase request if there is an existing storage capacity increase request in progress. For Lustre file systems, the storage capacity target value can be the following:
    ///
    /// * For SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 SSD deployment types, valid values are in multiples of 2400 GiB. The value must be greater than the current storage capacity.
    ///
    /// * For PERSISTENT HDD file systems, valid values are multiples of 6000 GiB for 12-MBps throughput per TiB file systems and multiples of 1800 GiB for 40-MBps throughput per TiB file systems. The values must be greater than the current storage capacity.
    ///
    /// * For SCRATCH_1 file systems, you can't increase the storage capacity.
    ///
    ///
    /// For more information, see [Managing storage and throughput capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the FSx for Lustre User Guide. For FSx for OpenZFS file systems, the storage capacity target value must be at least 10 percent greater than the current storage capacity value. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/managing-storage-capacity.html) in the FSx for OpenZFS User Guide. For Windows file systems, the storage capacity target value must be at least 10 percent greater than the current storage capacity value. To increase storage capacity, the file system must have at least 16 MBps of throughput capacity. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSxfor Windows File Server User Guide. For ONTAP file systems, the storage capacity target value must be at least 10 percent greater than the current storage capacity value. For more information, see [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
    public var storageCapacity: Swift.Int?
    /// Specifies the file system's storage type.
    public var storageType: FSxClientTypes.StorageType?
    /// The configuration updates for an Amazon FSx for Windows File Server file system.
    public var windowsConfiguration: FSxClientTypes.UpdateFileSystemWindowsConfiguration?

    public init(
        clientRequestToken: Swift.String? = nil,
        fileSystemId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.UpdateFileSystemLustreConfiguration? = nil,
        ontapConfiguration: FSxClientTypes.UpdateFileSystemOntapConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        windowsConfiguration: FSxClientTypes.UpdateFileSystemWindowsConfiguration? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.lustreConfiguration = lustreConfiguration
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.windowsConfiguration = windowsConfiguration
    }
}

public struct UpdateSharedVpcConfigurationInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Specifies whether participant accounts can create FSx for ONTAP Multi-AZ file systems in shared subnets. Set to true to enable or false to disable.
    public var enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.enableFsxRouteTableUpdatesFromParticipantAccounts = enableFsxRouteTableUpdatesFromParticipantAccounts
    }
}

public struct UpdateSharedVpcConfigurationOutput {
    /// Indicates whether participant accounts can create FSx for ONTAP Multi-AZ file systems in shared subnets.
    public var enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String?

    public init(
        enableFsxRouteTableUpdatesFromParticipantAccounts: Swift.String? = nil
    )
    {
        self.enableFsxRouteTableUpdatesFromParticipantAccounts = enableFsxRouteTableUpdatesFromParticipantAccounts
    }
}

public struct UpdateSnapshotInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the snapshot to update.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the snapshot that you want to update, in the format fsvolsnap-0123456789abcdef0.
    /// This member is required.
    public var snapshotId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.snapshotId = snapshotId
    }
}

extension FSxClientTypes {
    /// Specifies updates to an FSx for ONTAP storage virtual machine's (SVM) Microsoft Active Directory (AD) configuration. Note that account credentials are not returned in the response payload.
    public struct UpdateSvmActiveDirectoryConfiguration {
        /// Specifies an updated NetBIOS name of the AD computer object NetBiosName to which an SVM is joined.
        public var netBiosName: Swift.String?
        /// Specifies changes you are making to the self-managed Microsoft Active Directory configuration to which an FSx for Windows File Server file system or an FSx for ONTAP SVM is joined.
        public var selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates?

        public init(
            netBiosName: Swift.String? = nil,
            selfManagedActiveDirectoryConfiguration: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates? = nil
        )
        {
            self.netBiosName = netBiosName
            self.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration
        }
    }

}

public struct UpdateStorageVirtualMachineInput {
    /// Specifies updates to an SVM's Microsoft Active Directory (AD) configuration.
    public var activeDirectoryConfiguration: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration?
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The ID of the SVM that you want to update, in the format svm-0123456789abcdef0.
    /// This member is required.
    public var storageVirtualMachineId: Swift.String?
    /// Specifies a new SvmAdminPassword.
    public var svmAdminPassword: Swift.String?

    public init(
        activeDirectoryConfiguration: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration? = nil,
        clientRequestToken: Swift.String? = nil,
        storageVirtualMachineId: Swift.String? = nil,
        svmAdminPassword: Swift.String? = nil
    )
    {
        self.activeDirectoryConfiguration = activeDirectoryConfiguration
        self.clientRequestToken = clientRequestToken
        self.storageVirtualMachineId = storageVirtualMachineId
        self.svmAdminPassword = svmAdminPassword
    }
}

extension UpdateStorageVirtualMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStorageVirtualMachineInput(activeDirectoryConfiguration: \(Swift.String(describing: activeDirectoryConfiguration)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), storageVirtualMachineId: \(Swift.String(describing: storageVirtualMachineId)), svmAdminPassword: \"CONTENT_REDACTED\")"}
}

public struct UpdateStorageVirtualMachineOutput {
    /// Describes the Amazon FSx for NetApp ONTAP storage virtual machine (SVM) configuration.
    public var storageVirtualMachine: FSxClientTypes.StorageVirtualMachine?

    public init(
        storageVirtualMachine: FSxClientTypes.StorageVirtualMachine? = nil
    )
    {
        self.storageVirtualMachine = storageVirtualMachine
    }
}

extension FSxClientTypes {
    /// Updates the SnapLock configuration for an existing FSx for ONTAP volume.
    public struct UpdateSnaplockConfiguration {
        /// Enables or disables the audit log volume for an FSx for ONTAP SnapLock volume. The default value is false. If you set AuditLogVolume to true, the SnapLock volume is created as an audit log volume. The minimum retention period for an audit log volume is six months. For more information, see [ SnapLock audit log volumes](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/how-snaplock-works.html#snaplock-audit-log-volume).
        public var auditLogVolume: Swift.Bool?
        /// The configuration object for setting the autocommit period of files in an FSx for ONTAP SnapLock volume.
        public var autocommitPeriod: FSxClientTypes.AutocommitPeriod?
        /// Enables, disables, or permanently disables privileged delete on an FSx for ONTAP SnapLock Enterprise volume. Enabling privileged delete allows SnapLock administrators to delete write once, read many (WORM) files even if they have active retention periods. PERMANENTLY_DISABLED is a terminal state. If privileged delete is permanently disabled on a SnapLock volume, you can't re-enable it. The default value is DISABLED. For more information, see [Privileged delete](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-enterprise.html#privileged-delete).
        public var privilegedDelete: FSxClientTypes.PrivilegedDelete?
        /// Specifies the retention period of an FSx for ONTAP SnapLock volume.
        public var retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod?
        /// Enables or disables volume-append mode on an FSx for ONTAP SnapLock volume. Volume-append mode allows you to create WORM-appendable files and write data to them incrementally. The default value is false. For more information, see [Volume-append mode](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/worm-state.html#worm-state-append).
        public var volumeAppendModeEnabled: Swift.Bool?

        public init(
            auditLogVolume: Swift.Bool? = nil,
            autocommitPeriod: FSxClientTypes.AutocommitPeriod? = nil,
            privilegedDelete: FSxClientTypes.PrivilegedDelete? = nil,
            retentionPeriod: FSxClientTypes.SnaplockRetentionPeriod? = nil,
            volumeAppendModeEnabled: Swift.Bool? = nil
        )
        {
            self.auditLogVolume = auditLogVolume
            self.autocommitPeriod = autocommitPeriod
            self.privilegedDelete = privilegedDelete
            self.retentionPeriod = retentionPeriod
            self.volumeAppendModeEnabled = volumeAppendModeEnabled
        }
    }

}

extension FSxClientTypes {
    /// Used to specify changes to the ONTAP configuration for the volume you are updating.
    public struct UpdateOntapVolumeConfiguration {
        /// A boolean flag indicating whether tags for the volume should be copied to backups. This value defaults to false. If it's set to true, all tags for the volume are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the volume, regardless of this value.
        public var copyTagsToBackups: Swift.Bool?
        /// Specifies the location in the SVM's namespace where the volume is mounted. The JunctionPath must have a leading forward slash, such as /vol3.
        public var junctionPath: Swift.String?
        /// The security style for the volume, which can be UNIX, NTFS, or MIXED.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// The configured size of the volume, in bytes.
        public var sizeInBytes: Swift.Int?
        /// Specifies the size of the volume in megabytes.
        public var sizeInMegabytes: Swift.Int?
        /// The configuration object for updating the SnapLock configuration of an FSx for ONTAP SnapLock volume.
        public var snaplockConfiguration: FSxClientTypes.UpdateSnaplockConfiguration?
        /// Specifies the snapshot policy for the volume. There are three built-in snapshot policies:
        ///
        /// * default: This is the default policy. A maximum of six hourly snapshots taken five minutes past the hour. A maximum of two daily snapshots taken Monday through Saturday at 10 minutes after midnight. A maximum of two weekly snapshots taken every Sunday at 15 minutes after midnight.
        ///
        /// * default-1weekly: This policy is the same as the default policy except that it only retains one snapshot from the weekly schedule.
        ///
        /// * none: This policy does not take any snapshots. This policy can be assigned to volumes to prevent automatic snapshots from being taken.
        ///
        ///
        /// You can also provide the name of a custom policy that you created with the ONTAP CLI or REST API. For more information, see [Snapshot policies](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snapshots-ontap.html#snapshot-policies) in the Amazon FSx for NetApp ONTAP User Guide.
        public var snapshotPolicy: Swift.String?
        /// Default is false. Set to true to enable the deduplication, compression, and compaction storage efficiency features on the volume.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// Update the volume's data tiering policy.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?

        public init(
            copyTagsToBackups: Swift.Bool? = nil,
            junctionPath: Swift.String? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInBytes: Swift.Int? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            snaplockConfiguration: FSxClientTypes.UpdateSnaplockConfiguration? = nil,
            snapshotPolicy: Swift.String? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil
        )
        {
            self.copyTagsToBackups = copyTagsToBackups
            self.junctionPath = junctionPath
            self.securityStyle = securityStyle
            self.sizeInBytes = sizeInBytes
            self.sizeInMegabytes = sizeInMegabytes
            self.snaplockConfiguration = snaplockConfiguration
            self.snapshotPolicy = snapshotPolicy
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.tieringPolicy = tieringPolicy
        }
    }

}

extension FSxClientTypes {
    /// Used to specify changes to the OpenZFS configuration for the volume that you are updating.
    public struct UpdateOpenZFSVolumeConfiguration {
        /// Specifies the method used to compress the data on the volume. The compression type is NONE by default.
        ///
        /// * NONE - Doesn't compress the data on the volume. NONE is the default.
        ///
        /// * ZSTD - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.
        ///
        /// * LZ4 - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.
        public var dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType?
        /// The configuration object for mounting a Network File System (NFS) file system.
        public var nfsExports: [FSxClientTypes.OpenZFSNfsExport]?
        /// A Boolean value indicating whether the volume is read-only.
        public var readOnly: Swift.Bool?
        /// Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see [ Tips for maximizing performance](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs) in the Amazon FSx for OpenZFS User Guide.
        public var recordSizeKiB: Swift.Int?
        /// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of -1 to unset a volume's storage capacity quota.
        public var storageCapacityQuotaGiB: Swift.Int?
        /// The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of -1 to unset a volume's storage capacity reservation.
        public var storageCapacityReservationGiB: Swift.Int?
        /// An object specifying how much storage users or groups can use on the volume.
        public var userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]?

        public init(
            dataCompressionType: FSxClientTypes.OpenZFSDataCompressionType? = nil,
            nfsExports: [FSxClientTypes.OpenZFSNfsExport]? = nil,
            readOnly: Swift.Bool? = nil,
            recordSizeKiB: Swift.Int? = nil,
            storageCapacityQuotaGiB: Swift.Int? = nil,
            storageCapacityReservationGiB: Swift.Int? = nil,
            userAndGroupQuotas: [FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        )
        {
            self.dataCompressionType = dataCompressionType
            self.nfsExports = nfsExports
            self.readOnly = readOnly
            self.recordSizeKiB = recordSizeKiB
            self.storageCapacityQuotaGiB = storageCapacityQuotaGiB
            self.storageCapacityReservationGiB = storageCapacityReservationGiB
            self.userAndGroupQuotas = userAndGroupQuotas
        }
    }

}

public struct UpdateVolumeInput {
    /// (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// The name of the OpenZFS volume. OpenZFS root volumes are automatically named FSX. Child volume names must be unique among their parent volume's children. The name of the volume is part of the mount string for the OpenZFS volume.
    public var name: Swift.String?
    /// The configuration of the ONTAP volume that you are updating.
    public var ontapConfiguration: FSxClientTypes.UpdateOntapVolumeConfiguration?
    /// The configuration of the OpenZFS volume that you are updating.
    public var openZFSConfiguration: FSxClientTypes.UpdateOpenZFSVolumeConfiguration?
    /// The ID of the volume that you want to update, in the format fsvol-0123456789abcdef0.
    /// This member is required.
    public var volumeId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        ontapConfiguration: FSxClientTypes.UpdateOntapVolumeConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.UpdateOpenZFSVolumeConfiguration? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.ontapConfiguration = ontapConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.volumeId = volumeId
    }
}

extension FSxClientTypes {
    /// Describes a specific Amazon FSx administrative action for the current Windows, Lustre, OpenZFS, or ONTAP file system or volume.
    public struct AdministrativeAction {
        /// Describes the type of administrative action, as follows:
        ///
        /// * FILE_SYSTEM_UPDATE - A file system update administrative action initiated from the Amazon FSx console, API (UpdateFileSystem), or CLI (update-file-system).
        ///
        /// * THROUGHPUT_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a THROUGHPUT_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When THROUGHPUT_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing throughput capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-throughput-capacity.html) in the Amazon FSx for Windows File Server User Guide.
        ///
        /// * STORAGE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's storage capacity has completed successfully, a STORAGE_OPTIMIZATION task starts.
        ///
        /// * For Windows and ONTAP, storage optimization is the process of migrating the file system data to newer larger disks.
        ///
        /// * For Lustre, storage optimization consists of rebalancing the data across the existing and newly added file servers.
        ///
        ///
        /// You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html) in the Amazon FSx for Windows File Server User Guide, [Managing storage capacity](https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html) in the Amazon FSx for Lustre User Guide, and [Managing storage capacity and provisioned IOPS](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-storage-capacity.html) in the Amazon FSx for NetApp ONTAP User Guide.
        ///
        /// * FILE_SYSTEM_ALIAS_ASSOCIATION - A file system update to associate a new Domain Name System (DNS) alias with the file system. For more information, see [ AssociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_AssociateFileSystemAliases.html).
        ///
        /// * FILE_SYSTEM_ALIAS_DISASSOCIATION - A file system update to disassociate a DNS alias from the file system. For more information, see [DisassociateFileSystemAliases](https://docs.aws.amazon.com/fsx/latest/APIReference/API_DisassociateFileSystemAliases.html).
        ///
        /// * IOPS_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a IOPS_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When IOPS_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED. For more information, see [Managing provisioned SSD IOPS](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-provisioned-ssd-iops.html) in the Amazon FSx for Windows File Server User Guide.
        ///
        /// * STORAGE_TYPE_OPTIMIZATION - After the FILE_SYSTEM_UPDATE task to increase a file system's throughput capacity has been completed successfully, a STORAGE_TYPE_OPTIMIZATION task starts. You can track the storage-optimization progress using the ProgressPercent property. When STORAGE_TYPE_OPTIMIZATION has been completed successfully, the parent FILE_SYSTEM_UPDATE action status changes to COMPLETED.
        ///
        /// * VOLUME_UPDATE - A volume update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateVolume), or CLI (update-volume).
        ///
        /// * VOLUME_RESTORE - An Amazon FSx for OpenZFS volume is returned to the state saved by the specified snapshot, initiated from an API (RestoreVolumeFromSnapshot) or CLI (restore-volume-from-snapshot).
        ///
        /// * SNAPSHOT_UPDATE - A snapshot update to an Amazon FSx for OpenZFS volume initiated from the Amazon FSx console, API (UpdateSnapshot), or CLI (update-snapshot).
        ///
        /// * RELEASE_NFS_V3_LOCKS - Tracks the release of Network File System (NFS) V3 locks on an Amazon FSx for OpenZFS file system.
        ///
        /// * DOWNLOAD_DATA_FROM_BACKUP - An FSx for ONTAP backup is being restored to a new volume on a second-generation file system. Once the all the file metadata is loaded onto the volume, you can mount the volume with read-only access. during this process.
        ///
        /// * VOLUME_INITIALIZE_WITH_SNAPSHOT - A volume is being created from a snapshot on a different FSx for OpenZFS file system. You can initiate this from the Amazon FSx console, API (CreateVolume), or CLI (create-volume) when using the using the FULL_COPY strategy.
        ///
        /// * VOLUME_UPDATE_WITH_SNAPSHOT - A volume is being updated from a snapshot on a different FSx for OpenZFS file system. You can initiate this from the Amazon FSx console, API (CopySnapshotAndUpdateVolume), or CLI (copy-snapshot-and-update-volume).
        public var administrativeActionType: FSxClientTypes.AdministrativeActionType?
        /// Provides information about a failed administrative action.
        public var failureDetails: FSxClientTypes.AdministrativeActionFailureDetails?
        /// The percentage-complete status of a STORAGE_OPTIMIZATION or DOWNLOAD_DATA_FROM_BACKUP administrative action. Does not apply to any other administrative action type.
        public var progressPercent: Swift.Int?
        /// The remaining bytes to transfer for the FSx for OpenZFS snapshot that you're copying.
        public var remainingTransferBytes: Swift.Int?
        /// The time that the administrative action request was received.
        public var requestTime: Foundation.Date?
        /// The status of the administrative action, as follows:
        ///
        /// * FAILED - Amazon FSx failed to process the administrative action successfully.
        ///
        /// * IN_PROGRESS - Amazon FSx is processing the administrative action.
        ///
        /// * PENDING - Amazon FSx is waiting to process the administrative action.
        ///
        /// * COMPLETED - Amazon FSx has finished processing the administrative task. For a backup restore to a second-generation FSx for ONTAP file system, indicates that all data has been downloaded to the volume, and clients now have read-write access to volume.
        ///
        /// * UPDATED_OPTIMIZING - For a storage-capacity increase update, Amazon FSx has updated the file system with the new storage capacity, and is now performing the storage-optimization process.
        ///
        /// * PENDING - For a backup restore to a second-generation FSx for ONTAP file system, indicates that the file metadata is being downloaded onto the volume. The volume's Lifecycle state is CREATING.
        ///
        /// * IN_PROGRESS - For a backup restore to a second-generation FSx for ONTAP file system, indicates that all metadata has been downloaded to the new volume and client can access data with read-only access while Amazon FSx downloads the file data to the volume. Track the progress of this process with the ProgressPercent element.
        public var status: FSxClientTypes.Status?
        /// The target value for the administration action, provided in the UpdateFileSystem operation. Returned for FILE_SYSTEM_UPDATE administrative actions.
        public var targetFileSystemValues: FSxClientTypes.FileSystem?
        /// A snapshot of an Amazon FSx for OpenZFS volume.
        public var targetSnapshotValues: FSxClientTypes.Snapshot?
        /// Describes an Amazon FSx volume.
        public var targetVolumeValues: FSxClientTypes.Volume?
        /// The number of bytes that have transferred for the FSx for OpenZFS snapshot that you're copying.
        public var totalTransferBytes: Swift.Int?

        public init(
            administrativeActionType: FSxClientTypes.AdministrativeActionType? = nil,
            failureDetails: FSxClientTypes.AdministrativeActionFailureDetails? = nil,
            progressPercent: Swift.Int? = nil,
            remainingTransferBytes: Swift.Int? = nil,
            requestTime: Foundation.Date? = nil,
            status: FSxClientTypes.Status? = nil,
            targetFileSystemValues: FSxClientTypes.FileSystem? = nil,
            targetSnapshotValues: FSxClientTypes.Snapshot? = nil,
            targetVolumeValues: FSxClientTypes.Volume? = nil,
            totalTransferBytes: Swift.Int? = nil
        )
        {
            self.administrativeActionType = administrativeActionType
            self.failureDetails = failureDetails
            self.progressPercent = progressPercent
            self.remainingTransferBytes = remainingTransferBytes
            self.requestTime = requestTime
            self.status = status
            self.targetFileSystemValues = targetFileSystemValues
            self.targetSnapshotValues = targetSnapshotValues
            self.targetVolumeValues = targetVolumeValues
            self.totalTransferBytes = totalTransferBytes
        }
    }

}

extension FSxClientTypes {
    /// A description of a specific Amazon FSx file system.
    public struct FileSystem {
        /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system that you have initiated using the UpdateFileSystem operation.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// The Domain Name System (DNS) name for the file system.
        public var dnsName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileSystemFailureDetails?
        /// The system-generated, unique 17-digit ID of the file system.
        public var fileSystemId: Swift.String?
        /// The type of Amazon FSx file system, which can be LUSTRE, WINDOWS, ONTAP, or OPENZFS.
        public var fileSystemType: FSxClientTypes.FileSystemType?
        /// The Lustre version of the Amazon FSx for Lustre file system, which can be 2.10, 2.12, or 2.15.
        public var fileSystemTypeVersion: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt Amazon FSx file system data. Used as follows with Amazon FSx file system types:
        ///
        /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
        ///
        /// * Amazon FSx for NetApp ONTAP
        ///
        /// * Amazon FSx for OpenZFS
        ///
        /// * Amazon FSx for Windows File Server
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the file system. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The file system is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - Amazon FSx is creating the new file system.
        ///
        /// * DELETING - Amazon FSx is deleting an existing file system.
        ///
        /// * FAILED - An existing file system has experienced an unrecoverable failure. When creating a new file system, Amazon FSx was unable to create the file system.
        ///
        /// * MISCONFIGURED - The file system is in a failed but recoverable state.
        ///
        /// * MISCONFIGURED_UNAVAILABLE - (Amazon FSx for Windows File Server only) The file system is currently unavailable due to a change in your Active Directory configuration.
        ///
        /// * UPDATING - The file system is undergoing a customer-initiated update.
        public var lifecycle: FSxClientTypes.FileSystemLifecycle?
        /// The configuration for the Amazon FSx for Lustre file system.
        public var lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration?
        /// The IDs of the elastic network interfaces from which a specific file system is accessible. The elastic network interface is automatically created in the same virtual private cloud (VPC) that the Amazon FSx file system was created in. For more information, see [Elastic Network Interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) in the Amazon EC2 User Guide. For an Amazon FSx for Windows File Server file system, you can have one network interface ID. For an Amazon FSx for Lustre file system, you can have more than one.
        public var networkInterfaceIds: [Swift.String]?
        /// The configuration for this Amazon FSx for NetApp ONTAP file system.
        public var ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration?
        /// The configuration for this Amazon FSx for OpenZFS file system.
        public var openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration?
        /// The Amazon Web Services account that created the file system. If the file system was created by a user in IAM Identity Center, the Amazon Web Services account to which the IAM user belongs is the owner.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) of the file system resource.
        public var resourceARN: Swift.String?
        /// The storage capacity of the file system in gibibytes (GiB). Amazon FSx responds with an HTTP status code 400 (Bad Request) if the value of StorageCapacity is outside of the minimum or maximum values.
        public var storageCapacity: Swift.Int?
        /// The type of storage the file system is using. If set to SSD, the file system uses solid state drive storage. If set to HDD, the file system uses hard disk drive storage.
        public var storageType: FSxClientTypes.StorageType?
        /// Specifies the IDs of the subnets that the file system is accessible from. For the Amazon FSx Windows and ONTAP MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the PreferredSubnetID property. All other file systems have only one subnet ID. For FSx for Lustre file systems, and Single-AZ Windows file systems, this is the ID of the subnet that contains the file system's endpoint. For MULTI_AZ_1 Windows and ONTAP file systems, the file system endpoint is available in the PreferredSubnetID.
        public var subnetIds: [Swift.String]?
        /// The tags to associate with the file system. For more information, see [Tagging your Amazon FSx resources](https://docs.aws.amazon.com/fsx/latest/LustreGuide/tag-resources.html) in the Amazon FSx for Lustre User Guide.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of the primary virtual private cloud (VPC) for the file system.
        public var vpcId: Swift.String?
        /// The configuration for this Amazon FSx for Windows File Server file system.
        public var windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration?

        public init(
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: Foundation.Date? = nil,
            dnsName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileSystemFailureDetails? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: FSxClientTypes.FileSystemType? = nil,
            fileSystemTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileSystemLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration? = nil,
            openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            storageType: FSxClientTypes.StorageType? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil,
            windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.failureDetails = failureDetails
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
            self.fileSystemTypeVersion = fileSystemTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ontapConfiguration = ontapConfiguration
            self.openZFSConfiguration = openZFSConfiguration
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.storageType = storageType
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
            self.windowsConfiguration = windowsConfiguration
        }
    }

}

extension FSxClientTypes {
    /// A snapshot of an Amazon FSx for OpenZFS volume.
    public struct Snapshot {
        /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// The lifecycle status of the snapshot.
        ///
        /// * PENDING - Amazon FSx hasn't started creating the snapshot.
        ///
        /// * CREATING - Amazon FSx is creating the snapshot.
        ///
        /// * DELETING - Amazon FSx is deleting the snapshot.
        ///
        /// * AVAILABLE - The snapshot is fully available.
        public var lifecycle: FSxClientTypes.SnapshotLifecycle?
        /// Describes why a resource lifecycle state changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the snapshot.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The ID of the snapshot.
        public var snapshotId: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of the volume that the snapshot is of.
        public var volumeId: Swift.String?

        public init(
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: Foundation.Date? = nil,
            lifecycle: FSxClientTypes.SnapshotLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            snapshotId: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            volumeId: Swift.String? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.resourceARN = resourceARN
            self.snapshotId = snapshotId
            self.tags = tags
            self.volumeId = volumeId
        }
    }

}

extension FSxClientTypes {
    /// Describes an Amazon FSx volume.
    public struct Volume {
        /// A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the UpdateVolume action.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: Foundation.Date?
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        public var fileSystemId: Swift.String?
        /// The lifecycle status of the volume.
        ///
        /// * AVAILABLE - The volume is fully available for use.
        ///
        /// * CREATED - The volume has been created.
        ///
        /// * CREATING - Amazon FSx is creating the new volume.
        ///
        /// * DELETING - Amazon FSx is deleting an existing volume.
        ///
        /// * FAILED - Amazon FSx was unable to create the volume.
        ///
        /// * MISCONFIGURED - The volume is in a failed but recoverable state.
        ///
        /// * PENDING - Amazon FSx hasn't started creating the volume.
        public var lifecycle: FSxClientTypes.VolumeLifecycle?
        /// The reason why the volume lifecycle status changed.
        public var lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason?
        /// The name of the volume.
        public var name: Swift.String?
        /// The configuration of an Amazon FSx for NetApp ONTAP volume.
        public var ontapConfiguration: FSxClientTypes.OntapVolumeConfiguration?
        /// The configuration of an Amazon FSx for OpenZFS volume.
        public var openZFSConfiguration: FSxClientTypes.OpenZFSVolumeConfiguration?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The system-generated, unique ID of the volume.
        public var volumeId: Swift.String?
        /// The type of the volume.
        public var volumeType: FSxClientTypes.VolumeType?

        public init(
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: Foundation.Date? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
            lifecycleTransitionReason: FSxClientTypes.LifecycleTransitionReason? = nil,
            name: Swift.String? = nil,
            ontapConfiguration: FSxClientTypes.OntapVolumeConfiguration? = nil,
            openZFSConfiguration: FSxClientTypes.OpenZFSVolumeConfiguration? = nil,
            resourceARN: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            volumeId: Swift.String? = nil,
            volumeType: FSxClientTypes.VolumeType? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.lifecycleTransitionReason = lifecycleTransitionReason
            self.name = name
            self.ontapConfiguration = ontapConfiguration
            self.openZFSConfiguration = openZFSConfiguration
            self.resourceARN = resourceARN
            self.tags = tags
            self.volumeId = volumeId
            self.volumeType = volumeType
        }
    }

}

public struct CopySnapshotAndUpdateVolumeOutput {
    /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.
    public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
    /// The lifecycle state of the destination volume.
    public var lifecycle: FSxClientTypes.VolumeLifecycle?
    /// The ID of the volume that you copied the snapshot to.
    public var volumeId: Swift.String?

    public init(
        administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
        lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.administrativeActions = administrativeActions
        self.lifecycle = lifecycle
        self.volumeId = volumeId
    }
}

public struct RestoreVolumeFromSnapshotOutput {
    /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.
    public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
    /// The lifecycle state of the volume being restored.
    public var lifecycle: FSxClientTypes.VolumeLifecycle?
    /// The ID of the volume that you restored.
    public var volumeId: Swift.String?

    public init(
        administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
        lifecycle: FSxClientTypes.VolumeLifecycle? = nil,
        volumeId: Swift.String? = nil
    )
    {
        self.administrativeActions = administrativeActions
        self.lifecycle = lifecycle
        self.volumeId = volumeId
    }
}

/// The response object for the CreateFileSystemFromBackup operation.
public struct CreateFileSystemFromBackupOutput {
    /// A description of the file system.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init(
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

/// The response object returned after the file system is created.
public struct CreateFileSystemOutput {
    /// The configuration of the file system that was created.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init(
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

public struct CreateSnapshotOutput {
    /// A description of the snapshot.
    public var snapshot: FSxClientTypes.Snapshot?

    public init(
        snapshot: FSxClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

public struct CreateVolumeFromBackupOutput {
    /// Returned after a successful CreateVolumeFromBackup API operation, describing the volume just created.
    public var volume: FSxClientTypes.Volume?

    public init(
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

public struct CreateVolumeOutput {
    /// Returned after a successful CreateVolume API operation, describing the volume just created.
    public var volume: FSxClientTypes.Volume?

    public init(
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

public struct ReleaseFileSystemNfsV3LocksOutput {
    /// A description of a specific Amazon FSx file system.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init(
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

public struct StartMisconfiguredStateRecoveryOutput {
    /// A description of a specific Amazon FSx file system.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init(
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

/// The response object for the UpdateFileSystem operation.
public struct UpdateFileSystemOutput {
    /// A description of the file system that was updated.
    public var fileSystem: FSxClientTypes.FileSystem?

    public init(
        fileSystem: FSxClientTypes.FileSystem? = nil
    )
    {
        self.fileSystem = fileSystem
    }
}

public struct UpdateSnapshotOutput {
    /// Returned after a successful UpdateSnapshot operation, describing the snapshot that you updated.
    public var snapshot: FSxClientTypes.Snapshot?

    public init(
        snapshot: FSxClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

public struct UpdateVolumeOutput {
    /// A description of the volume just updated. Returned after a successful UpdateVolume API operation.
    public var volume: FSxClientTypes.Volume?

    public init(
        volume: FSxClientTypes.Volume? = nil
    )
    {
        self.volume = volume
    }
}

/// The response object for DescribeFileSystems operation.
public struct DescribeFileSystemsOutput {
    /// An array of file system descriptions.
    public var fileSystems: [FSxClientTypes.FileSystem]?
    /// Present if there are more file systems than returned in the response (String). You can use the NextToken value in the later request to fetch the descriptions.
    public var nextToken: Swift.String?

    public init(
        fileSystems: [FSxClientTypes.FileSystem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fileSystems = fileSystems
        self.nextToken = nextToken
    }
}

public struct DescribeSnapshotsOutput {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// An array of snapshots.
    public var snapshots: [FSxClientTypes.Snapshot]?

    public init(
        nextToken: Swift.String? = nil,
        snapshots: [FSxClientTypes.Snapshot]? = nil
    )
    {
        self.nextToken = nextToken
        self.snapshots = snapshots
    }
}

public struct DescribeVolumesOutput {
    /// (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous NextToken value left off.
    public var nextToken: Swift.String?
    /// Returned after a successful DescribeVolumes operation, describing each volume.
    public var volumes: [FSxClientTypes.Volume]?

    public init(
        nextToken: Swift.String? = nil,
        volumes: [FSxClientTypes.Volume]? = nil
    )
    {
        self.nextToken = nextToken
        self.volumes = volumes
    }
}

extension FSxClientTypes {
    /// A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
    public struct Backup {
        /// The ID of the backup.
        /// This member is required.
        public var backupId: Swift.String?
        /// The time when a particular backup was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.
        public var directoryInformation: FSxClientTypes.ActiveDirectoryBackupAttributes?
        /// Details explaining any failures that occurred when creating a backup.
        public var failureDetails: FSxClientTypes.BackupFailureDetails?
        /// The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.
        /// This member is required.
        public var fileSystem: FSxClientTypes.FileSystem?
        /// The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the backup.
        ///
        /// * AVAILABLE - The backup is fully available.
        ///
        /// * PENDING - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.
        ///
        /// * CREATING - Amazon FSx is creating the backup.
        ///
        /// * TRANSFERRING - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.
        ///
        /// * COPYING - Amazon FSx is copying the backup.
        ///
        /// * DELETED - Amazon FSx deleted the backup and it's no longer available.
        ///
        /// * FAILED - Amazon FSx couldn't finish the backup.
        /// This member is required.
        public var lifecycle: FSxClientTypes.BackupLifecycle?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// Displays the current percent of progress of an asynchronous task.
        public var progressPercent: Swift.Int?
        /// The Amazon Resource Name (ARN) for the backup resource.
        public var resourceARN: Swift.String?
        /// Specifies the resource type that's backed up.
        public var resourceType: FSxClientTypes.ResourceType?
        /// The ID of the source backup. Specifies the backup that you are copying.
        public var sourceBackupId: Swift.String?
        /// The source Region of the backup. Specifies the Region from where this backup is copied.
        public var sourceBackupRegion: Swift.String?
        /// The tags associated with a particular file system.
        public var tags: [FSxClientTypes.Tag]?
        /// The type of the file-system backup.
        /// This member is required.
        public var type: FSxClientTypes.BackupType?
        /// Describes an Amazon FSx volume.
        public var volume: FSxClientTypes.Volume?

        public init(
            backupId: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            directoryInformation: FSxClientTypes.ActiveDirectoryBackupAttributes? = nil,
            failureDetails: FSxClientTypes.BackupFailureDetails? = nil,
            fileSystem: FSxClientTypes.FileSystem? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.BackupLifecycle? = nil,
            ownerId: Swift.String? = nil,
            progressPercent: Swift.Int? = nil,
            resourceARN: Swift.String? = nil,
            resourceType: FSxClientTypes.ResourceType? = nil,
            sourceBackupId: Swift.String? = nil,
            sourceBackupRegion: Swift.String? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            type: FSxClientTypes.BackupType? = nil,
            volume: FSxClientTypes.Volume? = nil
        )
        {
            self.backupId = backupId
            self.creationTime = creationTime
            self.directoryInformation = directoryInformation
            self.failureDetails = failureDetails
            self.fileSystem = fileSystem
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.ownerId = ownerId
            self.progressPercent = progressPercent
            self.resourceARN = resourceARN
            self.resourceType = resourceType
            self.sourceBackupId = sourceBackupId
            self.sourceBackupRegion = sourceBackupRegion
            self.tags = tags
            self.type = type
            self.volume = volume
        }
    }

}

public struct CopyBackupOutput {
    /// A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
    public var backup: FSxClientTypes.Backup?

    public init(
        backup: FSxClientTypes.Backup? = nil
    )
    {
        self.backup = backup
    }
}

/// The response object for the CreateBackup operation.
public struct CreateBackupOutput {
    /// A description of the backup.
    public var backup: FSxClientTypes.Backup?

    public init(
        backup: FSxClientTypes.Backup? = nil
    )
    {
        self.backup = backup
    }
}

/// Response object for the DescribeBackups operation.
public struct DescribeBackupsOutput {
    /// An array of backups.
    public var backups: [FSxClientTypes.Backup]?
    /// A NextToken value is present if there are more backups than returned in the response. You can use the NextToken value in the subsequent request to fetch the backups.
    public var nextToken: Swift.String?

    public init(
        backups: [FSxClientTypes.Backup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.backups = backups
        self.nextToken = nextToken
    }
}

extension AssociateFileSystemAliasesInput {

    static func urlPathProvider(_ value: AssociateFileSystemAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension CancelDataRepositoryTaskInput {

    static func urlPathProvider(_ value: CancelDataRepositoryTaskInput) -> Swift.String? {
        return "/"
    }
}

extension CopyBackupInput {

    static func urlPathProvider(_ value: CopyBackupInput) -> Swift.String? {
        return "/"
    }
}

extension CopySnapshotAndUpdateVolumeInput {

    static func urlPathProvider(_ value: CopySnapshotAndUpdateVolumeInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBackupInput {

    static func urlPathProvider(_ value: CreateBackupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataRepositoryAssociationInput {

    static func urlPathProvider(_ value: CreateDataRepositoryAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataRepositoryTaskInput {

    static func urlPathProvider(_ value: CreateDataRepositoryTaskInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFileCacheInput {

    static func urlPathProvider(_ value: CreateFileCacheInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFileSystemInput {

    static func urlPathProvider(_ value: CreateFileSystemInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFileSystemFromBackupInput {

    static func urlPathProvider(_ value: CreateFileSystemFromBackupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSnapshotInput {

    static func urlPathProvider(_ value: CreateSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStorageVirtualMachineInput {

    static func urlPathProvider(_ value: CreateStorageVirtualMachineInput) -> Swift.String? {
        return "/"
    }
}

extension CreateVolumeInput {

    static func urlPathProvider(_ value: CreateVolumeInput) -> Swift.String? {
        return "/"
    }
}

extension CreateVolumeFromBackupInput {

    static func urlPathProvider(_ value: CreateVolumeFromBackupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBackupInput {

    static func urlPathProvider(_ value: DeleteBackupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDataRepositoryAssociationInput {

    static func urlPathProvider(_ value: DeleteDataRepositoryAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFileCacheInput {

    static func urlPathProvider(_ value: DeleteFileCacheInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFileSystemInput {

    static func urlPathProvider(_ value: DeleteFileSystemInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSnapshotInput {

    static func urlPathProvider(_ value: DeleteSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStorageVirtualMachineInput {

    static func urlPathProvider(_ value: DeleteStorageVirtualMachineInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteVolumeInput {

    static func urlPathProvider(_ value: DeleteVolumeInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeBackupsInput {

    static func urlPathProvider(_ value: DescribeBackupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataRepositoryAssociationsInput {

    static func urlPathProvider(_ value: DescribeDataRepositoryAssociationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataRepositoryTasksInput {

    static func urlPathProvider(_ value: DescribeDataRepositoryTasksInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFileCachesInput {

    static func urlPathProvider(_ value: DescribeFileCachesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFileSystemAliasesInput {

    static func urlPathProvider(_ value: DescribeFileSystemAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFileSystemsInput {

    static func urlPathProvider(_ value: DescribeFileSystemsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSharedVpcConfigurationInput {

    static func urlPathProvider(_ value: DescribeSharedVpcConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSnapshotsInput {

    static func urlPathProvider(_ value: DescribeSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStorageVirtualMachinesInput {

    static func urlPathProvider(_ value: DescribeStorageVirtualMachinesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeVolumesInput {

    static func urlPathProvider(_ value: DescribeVolumesInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateFileSystemAliasesInput {

    static func urlPathProvider(_ value: DisassociateFileSystemAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ReleaseFileSystemNfsV3LocksInput {

    static func urlPathProvider(_ value: ReleaseFileSystemNfsV3LocksInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreVolumeFromSnapshotInput {

    static func urlPathProvider(_ value: RestoreVolumeFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension StartMisconfiguredStateRecoveryInput {

    static func urlPathProvider(_ value: StartMisconfiguredStateRecoveryInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDataRepositoryAssociationInput {

    static func urlPathProvider(_ value: UpdateDataRepositoryAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFileCacheInput {

    static func urlPathProvider(_ value: UpdateFileCacheInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFileSystemInput {

    static func urlPathProvider(_ value: UpdateFileSystemInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSharedVpcConfigurationInput {

    static func urlPathProvider(_ value: UpdateSharedVpcConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSnapshotInput {

    static func urlPathProvider(_ value: UpdateSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateStorageVirtualMachineInput {

    static func urlPathProvider(_ value: UpdateStorageVirtualMachineInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateVolumeInput {

    static func urlPathProvider(_ value: UpdateVolumeInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateFileSystemAliasesInput {

    static func write(value: AssociateFileSystemAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aliases"].writeList(value.aliases, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
    }
}

extension CancelDataRepositoryTaskInput {

    static func write(value: CancelDataRepositoryTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TaskId"].write(value.taskId)
    }
}

extension CopyBackupInput {

    static func write(value: CopyBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CopyTags"].write(value.copyTags)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SourceBackupId"].write(value.sourceBackupId)
        try writer["SourceRegion"].write(value.sourceRegion)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CopySnapshotAndUpdateVolumeInput {

    static func write(value: CopySnapshotAndUpdateVolumeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CopyStrategy"].write(value.copyStrategy)
        try writer["Options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.UpdateOpenZFSVolumeOption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourceSnapshotARN"].write(value.sourceSnapshotARN)
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension CreateBackupInput {

    static func write(value: CreateBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension CreateDataRepositoryAssociationInput {

    static func write(value: CreateDataRepositoryAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchImportMetaDataOnCreate"].write(value.batchImportMetaDataOnCreate)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataRepositoryPath"].write(value.dataRepositoryPath)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["FileSystemPath"].write(value.fileSystemPath)
        try writer["ImportedFileChunkSize"].write(value.importedFileChunkSize)
        try writer["S3"].write(value.s3, with: FSxClientTypes.S3DataRepositoryConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDataRepositoryTaskInput {

    static func write(value: CreateDataRepositoryTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CapacityToRelease"].write(value.capacityToRelease)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["Paths"].writeList(value.paths, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReleaseConfiguration"].write(value.releaseConfiguration, with: FSxClientTypes.ReleaseConfiguration.write(value:to:))
        try writer["Report"].write(value.report, with: FSxClientTypes.CompletionReport.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }
}

extension CreateFileCacheInput {

    static func write(value: CreateFileCacheInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CopyTagsToDataRepositoryAssociations"].write(value.copyTagsToDataRepositoryAssociations)
        try writer["DataRepositoryAssociations"].writeList(value.dataRepositoryAssociations, memberWritingClosure: FSxClientTypes.FileCacheDataRepositoryAssociation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FileCacheType"].write(value.fileCacheType)
        try writer["FileCacheTypeVersion"].write(value.fileCacheTypeVersion)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.CreateFileCacheLustreConfiguration.write(value:to:))
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StorageCapacity"].write(value.storageCapacity)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateFileSystemInput {

    static func write(value: CreateFileSystemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemType"].write(value.fileSystemType)
        try writer["FileSystemTypeVersion"].write(value.fileSystemTypeVersion)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.CreateFileSystemLustreConfiguration.write(value:to:))
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.CreateFileSystemOntapConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.CreateFileSystemOpenZFSConfiguration.write(value:to:))
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StorageCapacity"].write(value.storageCapacity)
        try writer["StorageType"].write(value.storageType)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WindowsConfiguration"].write(value.windowsConfiguration, with: FSxClientTypes.CreateFileSystemWindowsConfiguration.write(value:to:))
    }
}

extension CreateFileSystemFromBackupInput {

    static func write(value: CreateFileSystemFromBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupId"].write(value.backupId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemTypeVersion"].write(value.fileSystemTypeVersion)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.CreateFileSystemLustreConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.CreateFileSystemOpenZFSConfiguration.write(value:to:))
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StorageCapacity"].write(value.storageCapacity)
        try writer["StorageType"].write(value.storageType)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WindowsConfiguration"].write(value.windowsConfiguration, with: FSxClientTypes.CreateFileSystemWindowsConfiguration.write(value:to:))
    }
}

extension CreateSnapshotInput {

    static func write(value: CreateSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension CreateStorageVirtualMachineInput {

    static func write(value: CreateStorageVirtualMachineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveDirectoryConfiguration"].write(value.activeDirectoryConfiguration, with: FSxClientTypes.CreateSvmActiveDirectoryConfiguration.write(value:to:))
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["Name"].write(value.name)
        try writer["RootVolumeSecurityStyle"].write(value.rootVolumeSecurityStyle)
        try writer["SvmAdminPassword"].write(value.svmAdminPassword)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateVolumeInput {

    static func write(value: CreateVolumeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.CreateOntapVolumeConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.CreateOpenZFSVolumeConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeType"].write(value.volumeType)
    }
}

extension CreateVolumeFromBackupInput {

    static func write(value: CreateVolumeFromBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupId"].write(value.backupId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.CreateOntapVolumeConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteBackupInput {

    static func write(value: DeleteBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupId"].write(value.backupId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
    }
}

extension DeleteDataRepositoryAssociationInput {

    static func write(value: DeleteDataRepositoryAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationId"].write(value.associationId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DeleteDataInFileSystem"].write(value.deleteDataInFileSystem)
    }
}

extension DeleteFileCacheInput {

    static func write(value: DeleteFileCacheInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileCacheId"].write(value.fileCacheId)
    }
}

extension DeleteFileSystemInput {

    static func write(value: DeleteFileSystemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.DeleteFileSystemLustreConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration.write(value:to:))
        try writer["WindowsConfiguration"].write(value.windowsConfiguration, with: FSxClientTypes.DeleteFileSystemWindowsConfiguration.write(value:to:))
    }
}

extension DeleteSnapshotInput {

    static func write(value: DeleteSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["SnapshotId"].write(value.snapshotId)
    }
}

extension DeleteStorageVirtualMachineInput {

    static func write(value: DeleteStorageVirtualMachineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["StorageVirtualMachineId"].write(value.storageVirtualMachineId)
    }
}

extension DeleteVolumeInput {

    static func write(value: DeleteVolumeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.DeleteVolumeOntapConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.DeleteVolumeOpenZFSConfiguration.write(value:to:))
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension DescribeBackupsInput {

    static func write(value: DescribeBackupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupIds"].writeList(value.backupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeDataRepositoryAssociationsInput {

    static func write(value: DescribeDataRepositoryAssociationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationIds"].writeList(value.associationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeDataRepositoryTasksInput {

    static func write(value: DescribeDataRepositoryTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.DataRepositoryTaskFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["TaskIds"].writeList(value.taskIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeFileCachesInput {

    static func write(value: DescribeFileCachesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileCacheIds"].writeList(value.fileCacheIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFileSystemAliasesInput {

    static func write(value: DescribeFileSystemAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFileSystemsInput {

    static func write(value: DescribeFileSystemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileSystemIds"].writeList(value.fileSystemIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeSharedVpcConfigurationInput {

    static func write(value: DescribeSharedVpcConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeSnapshotsInput {

    static func write(value: DescribeSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.SnapshotFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeShared"].write(value.includeShared)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SnapshotIds"].writeList(value.snapshotIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeStorageVirtualMachinesInput {

    static func write(value: DescribeStorageVirtualMachinesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.StorageVirtualMachineFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StorageVirtualMachineIds"].writeList(value.storageVirtualMachineIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeVolumesInput {

    static func write(value: DescribeVolumesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: FSxClientTypes.VolumeFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["VolumeIds"].writeList(value.volumeIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DisassociateFileSystemAliasesInput {

    static func write(value: DisassociateFileSystemAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aliases"].writeList(value.aliases, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension ReleaseFileSystemNfsV3LocksInput {

    static func write(value: ReleaseFileSystemNfsV3LocksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
    }
}

extension RestoreVolumeFromSnapshotInput {

    static func write(value: RestoreVolumeFromSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.RestoreOpenZFSVolumeOption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SnapshotId"].write(value.snapshotId)
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension StartMisconfiguredStateRecoveryInput {

    static func write(value: StartMisconfiguredStateRecoveryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDataRepositoryAssociationInput {

    static func write(value: UpdateDataRepositoryAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationId"].write(value.associationId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ImportedFileChunkSize"].write(value.importedFileChunkSize)
        try writer["S3"].write(value.s3, with: FSxClientTypes.S3DataRepositoryConfiguration.write(value:to:))
    }
}

extension UpdateFileCacheInput {

    static func write(value: UpdateFileCacheInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileCacheId"].write(value.fileCacheId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.UpdateFileCacheLustreConfiguration.write(value:to:))
    }
}

extension UpdateFileSystemInput {

    static func write(value: UpdateFileSystemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["LustreConfiguration"].write(value.lustreConfiguration, with: FSxClientTypes.UpdateFileSystemLustreConfiguration.write(value:to:))
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.UpdateFileSystemOntapConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration.write(value:to:))
        try writer["StorageCapacity"].write(value.storageCapacity)
        try writer["StorageType"].write(value.storageType)
        try writer["WindowsConfiguration"].write(value.windowsConfiguration, with: FSxClientTypes.UpdateFileSystemWindowsConfiguration.write(value:to:))
    }
}

extension UpdateSharedVpcConfigurationInput {

    static func write(value: UpdateSharedVpcConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["EnableFsxRouteTableUpdatesFromParticipantAccounts"].write(value.enableFsxRouteTableUpdatesFromParticipantAccounts)
    }
}

extension UpdateSnapshotInput {

    static func write(value: UpdateSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
        try writer["SnapshotId"].write(value.snapshotId)
    }
}

extension UpdateStorageVirtualMachineInput {

    static func write(value: UpdateStorageVirtualMachineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveDirectoryConfiguration"].write(value.activeDirectoryConfiguration, with: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration.write(value:to:))
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["StorageVirtualMachineId"].write(value.storageVirtualMachineId)
        try writer["SvmAdminPassword"].write(value.svmAdminPassword)
    }
}

extension UpdateVolumeInput {

    static func write(value: UpdateVolumeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
        try writer["OntapConfiguration"].write(value.ontapConfiguration, with: FSxClientTypes.UpdateOntapVolumeConfiguration.write(value:to:))
        try writer["OpenZFSConfiguration"].write(value.openZFSConfiguration, with: FSxClientTypes.UpdateOpenZFSVolumeConfiguration.write(value:to:))
        try writer["VolumeId"].write(value.volumeId)
    }
}

extension AssociateFileSystemAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateFileSystemAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateFileSystemAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: FSxClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CancelDataRepositoryTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelDataRepositoryTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelDataRepositoryTaskOutput()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.taskId = try reader["TaskId"].readIfPresent()
        return value
    }
}

extension CopyBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CopyBackupOutput()
        value.backup = try reader["Backup"].readIfPresent(with: FSxClientTypes.Backup.read(from:))
        return value
    }
}

extension CopySnapshotAndUpdateVolumeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopySnapshotAndUpdateVolumeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CopySnapshotAndUpdateVolumeOutput()
        value.administrativeActions = try reader["AdministrativeActions"].readListIfPresent(memberReadingClosure: FSxClientTypes.AdministrativeAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.volumeId = try reader["VolumeId"].readIfPresent()
        return value
    }
}

extension CreateBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackupOutput()
        value.backup = try reader["Backup"].readIfPresent(with: FSxClientTypes.Backup.read(from:))
        return value
    }
}

extension CreateDataRepositoryAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataRepositoryAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataRepositoryAssociationOutput()
        value.association = try reader["Association"].readIfPresent(with: FSxClientTypes.DataRepositoryAssociation.read(from:))
        return value
    }
}

extension CreateDataRepositoryTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataRepositoryTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataRepositoryTaskOutput()
        value.dataRepositoryTask = try reader["DataRepositoryTask"].readIfPresent(with: FSxClientTypes.DataRepositoryTask.read(from:))
        return value
    }
}

extension CreateFileCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFileCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFileCacheOutput()
        value.fileCache = try reader["FileCache"].readIfPresent(with: FSxClientTypes.FileCacheCreating.read(from:))
        return value
    }
}

extension CreateFileSystemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFileSystemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFileSystemOutput()
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        return value
    }
}

extension CreateFileSystemFromBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFileSystemFromBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFileSystemFromBackupOutput()
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        return value
    }
}

extension CreateSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: FSxClientTypes.Snapshot.read(from:))
        return value
    }
}

extension CreateStorageVirtualMachineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStorageVirtualMachineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateStorageVirtualMachineOutput()
        value.storageVirtualMachine = try reader["StorageVirtualMachine"].readIfPresent(with: FSxClientTypes.StorageVirtualMachine.read(from:))
        return value
    }
}

extension CreateVolumeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVolumeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVolumeOutput()
        value.volume = try reader["Volume"].readIfPresent(with: FSxClientTypes.Volume.read(from:))
        return value
    }
}

extension CreateVolumeFromBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVolumeFromBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVolumeFromBackupOutput()
        value.volume = try reader["Volume"].readIfPresent(with: FSxClientTypes.Volume.read(from:))
        return value
    }
}

extension DeleteBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackupOutput()
        value.backupId = try reader["BackupId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        return value
    }
}

extension DeleteDataRepositoryAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataRepositoryAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDataRepositoryAssociationOutput()
        value.associationId = try reader["AssociationId"].readIfPresent()
        value.deleteDataInFileSystem = try reader["DeleteDataInFileSystem"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        return value
    }
}

extension DeleteFileCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFileCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFileCacheOutput()
        value.fileCacheId = try reader["FileCacheId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        return value
    }
}

extension DeleteFileSystemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFileSystemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFileSystemOutput()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.lustreResponse = try reader["LustreResponse"].readIfPresent(with: FSxClientTypes.DeleteFileSystemLustreResponse.read(from:))
        value.openZFSResponse = try reader["OpenZFSResponse"].readIfPresent(with: FSxClientTypes.DeleteFileSystemOpenZFSResponse.read(from:))
        value.windowsResponse = try reader["WindowsResponse"].readIfPresent(with: FSxClientTypes.DeleteFileSystemWindowsResponse.read(from:))
        return value
    }
}

extension DeleteSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSnapshotOutput()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.snapshotId = try reader["SnapshotId"].readIfPresent()
        return value
    }
}

extension DeleteStorageVirtualMachineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStorageVirtualMachineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteStorageVirtualMachineOutput()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.storageVirtualMachineId = try reader["StorageVirtualMachineId"].readIfPresent()
        return value
    }
}

extension DeleteVolumeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVolumeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteVolumeOutput()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.ontapResponse = try reader["OntapResponse"].readIfPresent(with: FSxClientTypes.DeleteVolumeOntapResponse.read(from:))
        value.volumeId = try reader["VolumeId"].readIfPresent()
        return value
    }
}

extension DescribeBackupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBackupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBackupsOutput()
        value.backups = try reader["Backups"].readListIfPresent(memberReadingClosure: FSxClientTypes.Backup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeDataRepositoryAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataRepositoryAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataRepositoryAssociationsOutput()
        value.associations = try reader["Associations"].readListIfPresent(memberReadingClosure: FSxClientTypes.DataRepositoryAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeDataRepositoryTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataRepositoryTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataRepositoryTasksOutput()
        value.dataRepositoryTasks = try reader["DataRepositoryTasks"].readListIfPresent(memberReadingClosure: FSxClientTypes.DataRepositoryTask.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFileCachesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFileCachesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFileCachesOutput()
        value.fileCaches = try reader["FileCaches"].readListIfPresent(memberReadingClosure: FSxClientTypes.FileCache.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFileSystemAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFileSystemAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFileSystemAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: FSxClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFileSystemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFileSystemsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFileSystemsOutput()
        value.fileSystems = try reader["FileSystems"].readListIfPresent(memberReadingClosure: FSxClientTypes.FileSystem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeSharedVpcConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSharedVpcConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSharedVpcConfigurationOutput()
        value.enableFsxRouteTableUpdatesFromParticipantAccounts = try reader["EnableFsxRouteTableUpdatesFromParticipantAccounts"].readIfPresent()
        return value
    }
}

extension DescribeSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSnapshotsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.snapshots = try reader["Snapshots"].readListIfPresent(memberReadingClosure: FSxClientTypes.Snapshot.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeStorageVirtualMachinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStorageVirtualMachinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStorageVirtualMachinesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.storageVirtualMachines = try reader["StorageVirtualMachines"].readListIfPresent(memberReadingClosure: FSxClientTypes.StorageVirtualMachine.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeVolumesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeVolumesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeVolumesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.volumes = try reader["Volumes"].readListIfPresent(memberReadingClosure: FSxClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociateFileSystemAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFileSystemAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateFileSystemAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: FSxClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ReleaseFileSystemNfsV3LocksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReleaseFileSystemNfsV3LocksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReleaseFileSystemNfsV3LocksOutput()
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        return value
    }
}

extension RestoreVolumeFromSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreVolumeFromSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestoreVolumeFromSnapshotOutput()
        value.administrativeActions = try reader["AdministrativeActions"].readListIfPresent(memberReadingClosure: FSxClientTypes.AdministrativeAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.volumeId = try reader["VolumeId"].readIfPresent()
        return value
    }
}

extension StartMisconfiguredStateRecoveryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMisconfiguredStateRecoveryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMisconfiguredStateRecoveryOutput()
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateDataRepositoryAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDataRepositoryAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDataRepositoryAssociationOutput()
        value.association = try reader["Association"].readIfPresent(with: FSxClientTypes.DataRepositoryAssociation.read(from:))
        return value
    }
}

extension UpdateFileCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFileCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFileCacheOutput()
        value.fileCache = try reader["FileCache"].readIfPresent(with: FSxClientTypes.FileCache.read(from:))
        return value
    }
}

extension UpdateFileSystemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFileSystemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFileSystemOutput()
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        return value
    }
}

extension UpdateSharedVpcConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSharedVpcConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSharedVpcConfigurationOutput()
        value.enableFsxRouteTableUpdatesFromParticipantAccounts = try reader["EnableFsxRouteTableUpdatesFromParticipantAccounts"].readIfPresent()
        return value
    }
}

extension UpdateSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: FSxClientTypes.Snapshot.read(from:))
        return value
    }
}

extension UpdateStorageVirtualMachineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateStorageVirtualMachineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateStorageVirtualMachineOutput()
        value.storageVirtualMachine = try reader["StorageVirtualMachine"].readIfPresent(with: FSxClientTypes.StorageVirtualMachine.read(from:))
        return value
    }
}

extension UpdateVolumeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVolumeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVolumeOutput()
        value.volume = try reader["Volume"].readIfPresent(with: FSxClientTypes.Volume.read(from:))
        return value
    }
}

enum AssociateFileSystemAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelDataRepositoryTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryTaskEnded": return try DataRepositoryTaskEnded.makeError(baseError: baseError)
            case "DataRepositoryTaskNotFound": return try DataRepositoryTaskNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupNotFound": return try BackupNotFound.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "IncompatibleRegionForMultiAZ": return try IncompatibleRegionForMultiAZ.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidDestinationKmsKey": return try InvalidDestinationKmsKey.makeError(baseError: baseError)
            case "InvalidRegion": return try InvalidRegion.makeError(baseError: baseError)
            case "InvalidSourceKmsKey": return try InvalidSourceKmsKey.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "SourceBackupUnavailable": return try SourceBackupUnavailable.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopySnapshotAndUpdateVolumeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupInProgress": return try BackupInProgress.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataRepositoryAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataRepositoryTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryTaskExecuting": return try DataRepositoryTaskExecuting.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFileCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidNetworkSettings": return try InvalidNetworkSettings.makeError(baseError: baseError)
            case "InvalidPerUnitStorageThroughput": return try InvalidPerUnitStorageThroughput.makeError(baseError: baseError)
            case "MissingFileCacheConfiguration": return try MissingFileCacheConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFileSystemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActiveDirectoryError": return try ActiveDirectoryError.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidExportPath": return try InvalidExportPath.makeError(baseError: baseError)
            case "InvalidImportPath": return try InvalidImportPath.makeError(baseError: baseError)
            case "InvalidNetworkSettings": return try InvalidNetworkSettings.makeError(baseError: baseError)
            case "InvalidPerUnitStorageThroughput": return try InvalidPerUnitStorageThroughput.makeError(baseError: baseError)
            case "MissingFileSystemConfiguration": return try MissingFileSystemConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFileSystemFromBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActiveDirectoryError": return try ActiveDirectoryError.makeError(baseError: baseError)
            case "BackupNotFound": return try BackupNotFound.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidNetworkSettings": return try InvalidNetworkSettings.makeError(baseError: baseError)
            case "InvalidPerUnitStorageThroughput": return try InvalidPerUnitStorageThroughput.makeError(baseError: baseError)
            case "MissingFileSystemConfiguration": return try MissingFileSystemConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStorageVirtualMachineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActiveDirectoryError": return try ActiveDirectoryError.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVolumeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "MissingVolumeConfiguration": return try MissingVolumeConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "StorageVirtualMachineNotFound": return try StorageVirtualMachineNotFound.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVolumeFromBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupNotFound": return try BackupNotFound.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "MissingVolumeConfiguration": return try MissingVolumeConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "StorageVirtualMachineNotFound": return try StorageVirtualMachineNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupBeingCopied": return try BackupBeingCopied.makeError(baseError: baseError)
            case "BackupInProgress": return try BackupInProgress.makeError(baseError: baseError)
            case "BackupNotFound": return try BackupNotFound.makeError(baseError: baseError)
            case "BackupRestoring": return try BackupRestoring.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataRepositoryAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryAssociationNotFound": return try DataRepositoryAssociationNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFileCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileCacheNotFound": return try FileCacheNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFileSystemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "SnapshotNotFound": return try SnapshotNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStorageVirtualMachineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "StorageVirtualMachineNotFound": return try StorageVirtualMachineNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVolumeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBackupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupNotFound": return try BackupNotFound.makeError(baseError: baseError)
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataRepositoryAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryAssociationNotFound": return try DataRepositoryAssociationNotFound.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidDataRepositoryType": return try InvalidDataRepositoryType.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataRepositoryTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryTaskNotFound": return try DataRepositoryTaskNotFound.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFileCachesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileCacheNotFound": return try FileCacheNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFileSystemAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFileSystemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSharedVpcConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "SnapshotNotFound": return try SnapshotNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStorageVirtualMachinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "StorageVirtualMachineNotFound": return try StorageVirtualMachineNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeVolumesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFileSystemAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "NotServiceResourceError": return try NotServiceResourceError.makeError(baseError: baseError)
            case "ResourceDoesNotSupportTagging": return try ResourceDoesNotSupportTagging.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReleaseFileSystemNfsV3LocksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreVolumeFromSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMisconfiguredStateRecoveryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "NotServiceResourceError": return try NotServiceResourceError.makeError(baseError: baseError)
            case "ResourceDoesNotSupportTagging": return try ResourceDoesNotSupportTagging.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "NotServiceResourceError": return try NotServiceResourceError.makeError(baseError: baseError)
            case "ResourceDoesNotSupportTagging": return try ResourceDoesNotSupportTagging.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDataRepositoryAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "DataRepositoryAssociationNotFound": return try DataRepositoryAssociationNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFileCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileCacheNotFound": return try FileCacheNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "MissingFileCacheConfiguration": return try MissingFileCacheConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFileSystemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "FileSystemNotFound": return try FileSystemNotFound.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidNetworkSettings": return try InvalidNetworkSettings.makeError(baseError: baseError)
            case "MissingFileSystemConfiguration": return try MissingFileSystemConfiguration.makeError(baseError: baseError)
            case "ServiceLimitExceeded": return try ServiceLimitExceeded.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSharedVpcConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "SnapshotNotFound": return try SnapshotNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateStorageVirtualMachineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "StorageVirtualMachineNotFound": return try StorageVirtualMachineNotFound.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVolumeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequest": return try BadRequest.makeError(baseError: baseError)
            case "IncompatibleParameterError": return try IncompatibleParameterError.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "MissingVolumeConfiguration": return try MissingVolumeConfiguration.makeError(baseError: baseError)
            case "VolumeNotFound": return try VolumeNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequest {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BadRequest {
        let reader = baseError.errorBodyReader
        var value = BadRequest()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FileSystemNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> FileSystemNotFound {
        let reader = baseError.errorBodyReader
        var value = FileSystemNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DataRepositoryTaskNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DataRepositoryTaskNotFound {
        let reader = baseError.errorBodyReader
        var value = DataRepositoryTaskNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DataRepositoryTaskEnded {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DataRepositoryTaskEnded {
        let reader = baseError.errorBodyReader
        var value = DataRepositoryTaskEnded()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperation {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedOperation {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperation()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSourceKmsKey {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSourceKmsKey {
        let reader = baseError.errorBodyReader
        var value = InvalidSourceKmsKey()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncompatibleParameterError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IncompatibleParameterError {
        let reader = baseError.errorBodyReader
        var value = IncompatibleParameterError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.parameter = try reader["Parameter"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SourceBackupUnavailable {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> SourceBackupUnavailable {
        let reader = baseError.errorBodyReader
        var value = SourceBackupUnavailable()
        value.properties.backupId = try reader["BackupId"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRegion {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRegion {
        let reader = baseError.errorBodyReader
        var value = InvalidRegion()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncompatibleRegionForMultiAZ {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IncompatibleRegionForMultiAZ {
        let reader = baseError.errorBodyReader
        var value = IncompatibleRegionForMultiAZ()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupNotFound {
        let reader = baseError.errorBodyReader
        var value = BackupNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDestinationKmsKey {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDestinationKmsKey {
        let reader = baseError.errorBodyReader
        var value = InvalidDestinationKmsKey()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceLimitExceeded {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceLimitExceeded {
        let reader = baseError.errorBodyReader
        var value = ServiceLimitExceeded()
        value.properties.limit = try reader["Limit"].readIfPresent() ?? .sdkUnknown("")
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupInProgress {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupInProgress {
        let reader = baseError.errorBodyReader
        var value = BackupInProgress()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension VolumeNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> VolumeNotFound {
        let reader = baseError.errorBodyReader
        var value = VolumeNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DataRepositoryTaskExecuting {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DataRepositoryTaskExecuting {
        let reader = baseError.errorBodyReader
        var value = DataRepositoryTaskExecuting()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPerUnitStorageThroughput {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidPerUnitStorageThroughput {
        let reader = baseError.errorBodyReader
        var value = InvalidPerUnitStorageThroughput()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNetworkSettings {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNetworkSettings {
        let reader = baseError.errorBodyReader
        var value = InvalidNetworkSettings()
        value.properties.invalidRouteTableId = try reader["InvalidRouteTableId"].readIfPresent()
        value.properties.invalidSecurityGroupId = try reader["InvalidSecurityGroupId"].readIfPresent()
        value.properties.invalidSubnetId = try reader["InvalidSubnetId"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingFileCacheConfiguration {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MissingFileCacheConfiguration {
        let reader = baseError.errorBodyReader
        var value = MissingFileCacheConfiguration()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidExportPath {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidExportPath {
        let reader = baseError.errorBodyReader
        var value = InvalidExportPath()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingFileSystemConfiguration {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MissingFileSystemConfiguration {
        let reader = baseError.errorBodyReader
        var value = MissingFileSystemConfiguration()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidImportPath {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidImportPath {
        let reader = baseError.errorBodyReader
        var value = InvalidImportPath()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ActiveDirectoryError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ActiveDirectoryError {
        let reader = baseError.errorBodyReader
        var value = ActiveDirectoryError()
        value.properties.activeDirectoryId = try reader["ActiveDirectoryId"].readIfPresent() ?? ""
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.type = try reader["Type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension StorageVirtualMachineNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> StorageVirtualMachineNotFound {
        let reader = baseError.errorBodyReader
        var value = StorageVirtualMachineNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingVolumeConfiguration {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MissingVolumeConfiguration {
        let reader = baseError.errorBodyReader
        var value = MissingVolumeConfiguration()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupRestoring {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupRestoring {
        let reader = baseError.errorBodyReader
        var value = BackupRestoring()
        value.properties.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupBeingCopied {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupBeingCopied {
        let reader = baseError.errorBodyReader
        var value = BackupBeingCopied()
        value.properties.backupId = try reader["BackupId"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DataRepositoryAssociationNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DataRepositoryAssociationNotFound {
        let reader = baseError.errorBodyReader
        var value = DataRepositoryAssociationNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FileCacheNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> FileCacheNotFound {
        let reader = baseError.errorBodyReader
        var value = FileCacheNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> SnapshotNotFound {
        let reader = baseError.errorBodyReader
        var value = SnapshotNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDataRepositoryType {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDataRepositoryType {
        let reader = baseError.errorBodyReader
        var value = InvalidDataRepositoryType()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotServiceResourceError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotServiceResourceError {
        let reader = baseError.errorBodyReader
        var value = NotServiceResourceError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceARN = try reader["ResourceARN"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceDoesNotSupportTagging {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceDoesNotSupportTagging {
        let reader = baseError.errorBodyReader
        var value = ResourceDoesNotSupportTagging()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceARN = try reader["ResourceARN"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFound {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceARN = try reader["ResourceARN"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FSxClientTypes.Alias {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.Alias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.Alias()
        value.name = try reader["Name"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.Backup {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.Backup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.Backup()
        value.backupId = try reader["BackupId"].readIfPresent() ?? ""
        value.lifecycle = try reader["Lifecycle"].readIfPresent() ?? .sdkUnknown("")
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.BackupFailureDetails.read(from:))
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.progressPercent = try reader["ProgressPercent"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fileSystem = try reader["FileSystem"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        value.directoryInformation = try reader["DirectoryInformation"].readIfPresent(with: FSxClientTypes.ActiveDirectoryBackupAttributes.read(from:))
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.sourceBackupId = try reader["SourceBackupId"].readIfPresent()
        value.sourceBackupRegion = try reader["SourceBackupRegion"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.volume = try reader["Volume"].readIfPresent(with: FSxClientTypes.Volume.read(from:))
        return value
    }
}

extension FSxClientTypes.Volume {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.Volume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.Volume()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.ontapConfiguration = try reader["OntapConfiguration"].readIfPresent(with: FSxClientTypes.OntapVolumeConfiguration.read(from:))
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumeId = try reader["VolumeId"].readIfPresent()
        value.volumeType = try reader["VolumeType"].readIfPresent()
        value.lifecycleTransitionReason = try reader["LifecycleTransitionReason"].readIfPresent(with: FSxClientTypes.LifecycleTransitionReason.read(from:))
        value.administrativeActions = try reader["AdministrativeActions"].readListIfPresent(memberReadingClosure: FSxClientTypes.AdministrativeAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.openZFSConfiguration = try reader["OpenZFSConfiguration"].readIfPresent(with: FSxClientTypes.OpenZFSVolumeConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.OpenZFSVolumeConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSVolumeConfiguration()
        value.parentVolumeId = try reader["ParentVolumeId"].readIfPresent()
        value.volumePath = try reader["VolumePath"].readIfPresent()
        value.storageCapacityReservationGiB = try reader["StorageCapacityReservationGiB"].readIfPresent()
        value.storageCapacityQuotaGiB = try reader["StorageCapacityQuotaGiB"].readIfPresent()
        value.recordSizeKiB = try reader["RecordSizeKiB"].readIfPresent()
        value.dataCompressionType = try reader["DataCompressionType"].readIfPresent()
        value.copyTagsToSnapshots = try reader["CopyTagsToSnapshots"].readIfPresent()
        value.originSnapshot = try reader["OriginSnapshot"].readIfPresent(with: FSxClientTypes.OpenZFSOriginSnapshotConfiguration.read(from:))
        value.readOnly = try reader["ReadOnly"].readIfPresent()
        value.nfsExports = try reader["NfsExports"].readListIfPresent(memberReadingClosure: FSxClientTypes.OpenZFSNfsExport.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userAndGroupQuotas = try reader["UserAndGroupQuotas"].readListIfPresent(memberReadingClosure: FSxClientTypes.OpenZFSUserOrGroupQuota.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.restoreToSnapshot = try reader["RestoreToSnapshot"].readIfPresent()
        value.deleteIntermediateSnaphots = try reader["DeleteIntermediateSnaphots"].readIfPresent()
        value.deleteClonedVolumes = try reader["DeleteClonedVolumes"].readIfPresent()
        value.deleteIntermediateData = try reader["DeleteIntermediateData"].readIfPresent()
        value.sourceSnapshotARN = try reader["SourceSnapshotARN"].readIfPresent()
        value.destinationSnapshot = try reader["DestinationSnapshot"].readIfPresent()
        value.copyStrategy = try reader["CopyStrategy"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.OpenZFSUserOrGroupQuota {

    static func write(value: FSxClientTypes.OpenZFSUserOrGroupQuota?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["StorageCapacityQuotaGiB"].write(value.storageCapacityQuotaGiB)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSUserOrGroupQuota {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSUserOrGroupQuota()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.id = try reader["Id"].readIfPresent() ?? 0
        value.storageCapacityQuotaGiB = try reader["StorageCapacityQuotaGiB"].readIfPresent() ?? 0
        return value
    }
}

extension FSxClientTypes.OpenZFSNfsExport {

    static func write(value: FSxClientTypes.OpenZFSNfsExport?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientConfigurations"].writeList(value.clientConfigurations, memberWritingClosure: FSxClientTypes.OpenZFSClientConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSNfsExport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSNfsExport()
        value.clientConfigurations = try reader["ClientConfigurations"].readListIfPresent(memberReadingClosure: FSxClientTypes.OpenZFSClientConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension FSxClientTypes.OpenZFSClientConfiguration {

    static func write(value: FSxClientTypes.OpenZFSClientConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Clients"].write(value.clients)
        try writer["Options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSClientConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSClientConfiguration()
        value.clients = try reader["Clients"].readIfPresent() ?? ""
        value.options = try reader["Options"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension FSxClientTypes.OpenZFSOriginSnapshotConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSOriginSnapshotConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSOriginSnapshotConfiguration()
        value.snapshotARN = try reader["SnapshotARN"].readIfPresent()
        value.copyStrategy = try reader["CopyStrategy"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.AdministrativeAction {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AdministrativeAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AdministrativeAction()
        value.administrativeActionType = try reader["AdministrativeActionType"].readIfPresent()
        value.progressPercent = try reader["ProgressPercent"].readIfPresent()
        value.requestTime = try reader["RequestTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.targetFileSystemValues = try reader["TargetFileSystemValues"].readIfPresent(with: FSxClientTypes.FileSystem.read(from:))
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.AdministrativeActionFailureDetails.read(from:))
        value.targetVolumeValues = try reader["TargetVolumeValues"].readIfPresent(with: FSxClientTypes.Volume.read(from:))
        value.targetSnapshotValues = try reader["TargetSnapshotValues"].readIfPresent(with: FSxClientTypes.Snapshot.read(from:))
        value.totalTransferBytes = try reader["TotalTransferBytes"].readIfPresent()
        value.remainingTransferBytes = try reader["RemainingTransferBytes"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.Snapshot {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.Snapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.Snapshot()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.snapshotId = try reader["SnapshotId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.volumeId = try reader["VolumeId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.lifecycleTransitionReason = try reader["LifecycleTransitionReason"].readIfPresent(with: FSxClientTypes.LifecycleTransitionReason.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.administrativeActions = try reader["AdministrativeActions"].readListIfPresent(memberReadingClosure: FSxClientTypes.AdministrativeAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.Tag {

    static func write(value: FSxClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension FSxClientTypes.LifecycleTransitionReason {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.LifecycleTransitionReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.LifecycleTransitionReason()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.AdministrativeActionFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AdministrativeActionFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AdministrativeActionFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.FileSystem {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileSystem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileSystem()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.fileSystemType = try reader["FileSystemType"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.FileSystemFailureDetails.read(from:))
        value.storageCapacity = try reader["StorageCapacity"].readIfPresent()
        value.storageType = try reader["StorageType"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaceIds = try reader["NetworkInterfaceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.windowsConfiguration = try reader["WindowsConfiguration"].readIfPresent(with: FSxClientTypes.WindowsFileSystemConfiguration.read(from:))
        value.lustreConfiguration = try reader["LustreConfiguration"].readIfPresent(with: FSxClientTypes.LustreFileSystemConfiguration.read(from:))
        value.administrativeActions = try reader["AdministrativeActions"].readListIfPresent(memberReadingClosure: FSxClientTypes.AdministrativeAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ontapConfiguration = try reader["OntapConfiguration"].readIfPresent(with: FSxClientTypes.OntapFileSystemConfiguration.read(from:))
        value.fileSystemTypeVersion = try reader["FileSystemTypeVersion"].readIfPresent()
        value.openZFSConfiguration = try reader["OpenZFSConfiguration"].readIfPresent(with: FSxClientTypes.OpenZFSFileSystemConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.OpenZFSFileSystemConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OpenZFSFileSystemConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OpenZFSFileSystemConfiguration()
        value.automaticBackupRetentionDays = try reader["AutomaticBackupRetentionDays"].readIfPresent()
        value.copyTagsToBackups = try reader["CopyTagsToBackups"].readIfPresent()
        value.copyTagsToVolumes = try reader["CopyTagsToVolumes"].readIfPresent()
        value.dailyAutomaticBackupStartTime = try reader["DailyAutomaticBackupStartTime"].readIfPresent()
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.throughputCapacity = try reader["ThroughputCapacity"].readIfPresent()
        value.weeklyMaintenanceStartTime = try reader["WeeklyMaintenanceStartTime"].readIfPresent()
        value.diskIopsConfiguration = try reader["DiskIopsConfiguration"].readIfPresent(with: FSxClientTypes.DiskIopsConfiguration.read(from:))
        value.rootVolumeId = try reader["RootVolumeId"].readIfPresent()
        value.preferredSubnetId = try reader["PreferredSubnetId"].readIfPresent()
        value.endpointIpAddressRange = try reader["EndpointIpAddressRange"].readIfPresent()
        value.routeTableIds = try reader["RouteTableIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.endpointIpAddress = try reader["EndpointIpAddress"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.DiskIopsConfiguration {

    static func write(value: FSxClientTypes.DiskIopsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Iops"].write(value.iops)
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DiskIopsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DiskIopsConfiguration()
        value.mode = try reader["Mode"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.OntapFileSystemConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OntapFileSystemConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OntapFileSystemConfiguration()
        value.automaticBackupRetentionDays = try reader["AutomaticBackupRetentionDays"].readIfPresent()
        value.dailyAutomaticBackupStartTime = try reader["DailyAutomaticBackupStartTime"].readIfPresent()
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.endpointIpAddressRange = try reader["EndpointIpAddressRange"].readIfPresent()
        value.endpoints = try reader["Endpoints"].readIfPresent(with: FSxClientTypes.FileSystemEndpoints.read(from:))
        value.diskIopsConfiguration = try reader["DiskIopsConfiguration"].readIfPresent(with: FSxClientTypes.DiskIopsConfiguration.read(from:))
        value.preferredSubnetId = try reader["PreferredSubnetId"].readIfPresent()
        value.routeTableIds = try reader["RouteTableIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.throughputCapacity = try reader["ThroughputCapacity"].readIfPresent()
        value.weeklyMaintenanceStartTime = try reader["WeeklyMaintenanceStartTime"].readIfPresent()
        value.fsxAdminPassword = try reader["FsxAdminPassword"].readIfPresent()
        value.haPairs = try reader["HAPairs"].readIfPresent()
        value.throughputCapacityPerHAPair = try reader["ThroughputCapacityPerHAPair"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.FileSystemEndpoints {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileSystemEndpoints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileSystemEndpoints()
        value.intercluster = try reader["Intercluster"].readIfPresent(with: FSxClientTypes.FileSystemEndpoint.read(from:))
        value.management = try reader["Management"].readIfPresent(with: FSxClientTypes.FileSystemEndpoint.read(from:))
        return value
    }
}

extension FSxClientTypes.FileSystemEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileSystemEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileSystemEndpoint()
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.ipAddresses = try reader["IpAddresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.LustreFileSystemConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.LustreFileSystemConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.LustreFileSystemConfiguration()
        value.weeklyMaintenanceStartTime = try reader["WeeklyMaintenanceStartTime"].readIfPresent()
        value.dataRepositoryConfiguration = try reader["DataRepositoryConfiguration"].readIfPresent(with: FSxClientTypes.DataRepositoryConfiguration.read(from:))
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.perUnitStorageThroughput = try reader["PerUnitStorageThroughput"].readIfPresent()
        value.mountName = try reader["MountName"].readIfPresent()
        value.dailyAutomaticBackupStartTime = try reader["DailyAutomaticBackupStartTime"].readIfPresent()
        value.automaticBackupRetentionDays = try reader["AutomaticBackupRetentionDays"].readIfPresent()
        value.copyTagsToBackups = try reader["CopyTagsToBackups"].readIfPresent()
        value.driveCacheType = try reader["DriveCacheType"].readIfPresent()
        value.dataCompressionType = try reader["DataCompressionType"].readIfPresent()
        value.logConfiguration = try reader["LogConfiguration"].readIfPresent(with: FSxClientTypes.LustreLogConfiguration.read(from:))
        value.rootSquashConfiguration = try reader["RootSquashConfiguration"].readIfPresent(with: FSxClientTypes.LustreRootSquashConfiguration.read(from:))
        value.metadataConfiguration = try reader["MetadataConfiguration"].readIfPresent(with: FSxClientTypes.FileSystemLustreMetadataConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.FileSystemLustreMetadataConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileSystemLustreMetadataConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileSystemLustreMetadataConfiguration()
        value.iops = try reader["Iops"].readIfPresent()
        value.mode = try reader["Mode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension FSxClientTypes.LustreRootSquashConfiguration {

    static func write(value: FSxClientTypes.LustreRootSquashConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NoSquashNids"].writeList(value.noSquashNids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RootSquash"].write(value.rootSquash)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.LustreRootSquashConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.LustreRootSquashConfiguration()
        value.rootSquash = try reader["RootSquash"].readIfPresent()
        value.noSquashNids = try reader["NoSquashNids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.LustreLogConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.LustreLogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.LustreLogConfiguration()
        value.level = try reader["Level"].readIfPresent() ?? .sdkUnknown("")
        value.destination = try reader["Destination"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.DataRepositoryConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryConfiguration()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.importPath = try reader["ImportPath"].readIfPresent()
        value.exportPath = try reader["ExportPath"].readIfPresent()
        value.importedFileChunkSize = try reader["ImportedFileChunkSize"].readIfPresent()
        value.autoImportPolicy = try reader["AutoImportPolicy"].readIfPresent()
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.DataRepositoryFailureDetails.read(from:))
        return value
    }
}

extension FSxClientTypes.DataRepositoryFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.WindowsFileSystemConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.WindowsFileSystemConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.WindowsFileSystemConfiguration()
        value.activeDirectoryId = try reader["ActiveDirectoryId"].readIfPresent()
        value.selfManagedActiveDirectoryConfiguration = try reader["SelfManagedActiveDirectoryConfiguration"].readIfPresent(with: FSxClientTypes.SelfManagedActiveDirectoryAttributes.read(from:))
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.remoteAdministrationEndpoint = try reader["RemoteAdministrationEndpoint"].readIfPresent()
        value.preferredSubnetId = try reader["PreferredSubnetId"].readIfPresent()
        value.preferredFileServerIp = try reader["PreferredFileServerIp"].readIfPresent()
        value.throughputCapacity = try reader["ThroughputCapacity"].readIfPresent()
        value.maintenanceOperationsInProgress = try reader["MaintenanceOperationsInProgress"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<FSxClientTypes.FileSystemMaintenanceOperation>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.weeklyMaintenanceStartTime = try reader["WeeklyMaintenanceStartTime"].readIfPresent()
        value.dailyAutomaticBackupStartTime = try reader["DailyAutomaticBackupStartTime"].readIfPresent()
        value.automaticBackupRetentionDays = try reader["AutomaticBackupRetentionDays"].readIfPresent()
        value.copyTagsToBackups = try reader["CopyTagsToBackups"].readIfPresent()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: FSxClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.auditLogConfiguration = try reader["AuditLogConfiguration"].readIfPresent(with: FSxClientTypes.WindowsAuditLogConfiguration.read(from:))
        value.diskIopsConfiguration = try reader["DiskIopsConfiguration"].readIfPresent(with: FSxClientTypes.DiskIopsConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.WindowsAuditLogConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.WindowsAuditLogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.WindowsAuditLogConfiguration()
        value.fileAccessAuditLogLevel = try reader["FileAccessAuditLogLevel"].readIfPresent() ?? .sdkUnknown("")
        value.fileShareAccessAuditLogLevel = try reader["FileShareAccessAuditLogLevel"].readIfPresent() ?? .sdkUnknown("")
        value.auditLogDestination = try reader["AuditLogDestination"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SelfManagedActiveDirectoryAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SelfManagedActiveDirectoryAttributes()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.organizationalUnitDistinguishedName = try reader["OrganizationalUnitDistinguishedName"].readIfPresent()
        value.fileSystemAdministratorsGroup = try reader["FileSystemAdministratorsGroup"].readIfPresent()
        value.userName = try reader["UserName"].readIfPresent()
        value.dnsIps = try reader["DnsIps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.FileSystemFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileSystemFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileSystemFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.OntapVolumeConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.OntapVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.OntapVolumeConfiguration()
        value.flexCacheEndpointType = try reader["FlexCacheEndpointType"].readIfPresent()
        value.junctionPath = try reader["JunctionPath"].readIfPresent()
        value.securityStyle = try reader["SecurityStyle"].readIfPresent()
        value.sizeInMegabytes = try reader["SizeInMegabytes"].readIfPresent()
        value.storageEfficiencyEnabled = try reader["StorageEfficiencyEnabled"].readIfPresent()
        value.storageVirtualMachineId = try reader["StorageVirtualMachineId"].readIfPresent()
        value.storageVirtualMachineRoot = try reader["StorageVirtualMachineRoot"].readIfPresent()
        value.tieringPolicy = try reader["TieringPolicy"].readIfPresent(with: FSxClientTypes.TieringPolicy.read(from:))
        value.uuid = try reader["UUID"].readIfPresent()
        value.ontapVolumeType = try reader["OntapVolumeType"].readIfPresent()
        value.snapshotPolicy = try reader["SnapshotPolicy"].readIfPresent()
        value.copyTagsToBackups = try reader["CopyTagsToBackups"].readIfPresent()
        value.snaplockConfiguration = try reader["SnaplockConfiguration"].readIfPresent(with: FSxClientTypes.SnaplockConfiguration.read(from:))
        value.volumeStyle = try reader["VolumeStyle"].readIfPresent()
        value.aggregateConfiguration = try reader["AggregateConfiguration"].readIfPresent(with: FSxClientTypes.AggregateConfiguration.read(from:))
        value.sizeInBytes = try reader["SizeInBytes"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.AggregateConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AggregateConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AggregateConfiguration()
        value.aggregates = try reader["Aggregates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalConstituents = try reader["TotalConstituents"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.SnaplockConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SnaplockConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SnaplockConfiguration()
        value.auditLogVolume = try reader["AuditLogVolume"].readIfPresent()
        value.autocommitPeriod = try reader["AutocommitPeriod"].readIfPresent(with: FSxClientTypes.AutocommitPeriod.read(from:))
        value.privilegedDelete = try reader["PrivilegedDelete"].readIfPresent()
        value.retentionPeriod = try reader["RetentionPeriod"].readIfPresent(with: FSxClientTypes.SnaplockRetentionPeriod.read(from:))
        value.snaplockType = try reader["SnaplockType"].readIfPresent()
        value.volumeAppendModeEnabled = try reader["VolumeAppendModeEnabled"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.SnaplockRetentionPeriod {

    static func write(value: FSxClientTypes.SnaplockRetentionPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultRetention"].write(value.defaultRetention, with: FSxClientTypes.RetentionPeriod.write(value:to:))
        try writer["MaximumRetention"].write(value.maximumRetention, with: FSxClientTypes.RetentionPeriod.write(value:to:))
        try writer["MinimumRetention"].write(value.minimumRetention, with: FSxClientTypes.RetentionPeriod.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SnaplockRetentionPeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SnaplockRetentionPeriod()
        value.defaultRetention = try reader["DefaultRetention"].readIfPresent(with: FSxClientTypes.RetentionPeriod.read(from:))
        value.minimumRetention = try reader["MinimumRetention"].readIfPresent(with: FSxClientTypes.RetentionPeriod.read(from:))
        value.maximumRetention = try reader["MaximumRetention"].readIfPresent(with: FSxClientTypes.RetentionPeriod.read(from:))
        return value
    }
}

extension FSxClientTypes.RetentionPeriod {

    static func write(value: FSxClientTypes.RetentionPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.RetentionPeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.RetentionPeriod()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.AutocommitPeriod {

    static func write(value: FSxClientTypes.AutocommitPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AutocommitPeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AutocommitPeriod()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.TieringPolicy {

    static func write(value: FSxClientTypes.TieringPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CoolingPeriod"].write(value.coolingPeriod)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.TieringPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.TieringPolicy()
        value.coolingPeriod = try reader["CoolingPeriod"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.ActiveDirectoryBackupAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.ActiveDirectoryBackupAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.ActiveDirectoryBackupAttributes()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.activeDirectoryId = try reader["ActiveDirectoryId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.BackupFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.BackupFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.BackupFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.DataRepositoryAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryAssociation()
        value.associationId = try reader["AssociationId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.DataRepositoryFailureDetails.read(from:))
        value.fileSystemPath = try reader["FileSystemPath"].readIfPresent()
        value.dataRepositoryPath = try reader["DataRepositoryPath"].readIfPresent()
        value.batchImportMetaDataOnCreate = try reader["BatchImportMetaDataOnCreate"].readIfPresent()
        value.importedFileChunkSize = try reader["ImportedFileChunkSize"].readIfPresent()
        value.s3 = try reader["S3"].readIfPresent(with: FSxClientTypes.S3DataRepositoryConfiguration.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileCacheId = try reader["FileCacheId"].readIfPresent()
        value.fileCachePath = try reader["FileCachePath"].readIfPresent()
        value.dataRepositorySubdirectories = try reader["DataRepositorySubdirectories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nfs = try reader["NFS"].readIfPresent(with: FSxClientTypes.NFSDataRepositoryConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.NFSDataRepositoryConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.NFSDataRepositoryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.NFSDataRepositoryConfiguration()
        value.version = try reader["Version"].readIfPresent() ?? .sdkUnknown("")
        value.dnsIps = try reader["DnsIps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoExportPolicy = try reader["AutoExportPolicy"].readIfPresent(with: FSxClientTypes.AutoExportPolicy.read(from:))
        return value
    }
}

extension FSxClientTypes.AutoExportPolicy {

    static func write(value: FSxClientTypes.AutoExportPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Events"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AutoExportPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AutoExportPolicy()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<FSxClientTypes.EventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.S3DataRepositoryConfiguration {

    static func write(value: FSxClientTypes.S3DataRepositoryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoExportPolicy"].write(value.autoExportPolicy, with: FSxClientTypes.AutoExportPolicy.write(value:to:))
        try writer["AutoImportPolicy"].write(value.autoImportPolicy, with: FSxClientTypes.AutoImportPolicy.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.S3DataRepositoryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.S3DataRepositoryConfiguration()
        value.autoImportPolicy = try reader["AutoImportPolicy"].readIfPresent(with: FSxClientTypes.AutoImportPolicy.read(from:))
        value.autoExportPolicy = try reader["AutoExportPolicy"].readIfPresent(with: FSxClientTypes.AutoExportPolicy.read(from:))
        return value
    }
}

extension FSxClientTypes.AutoImportPolicy {

    static func write(value: FSxClientTypes.AutoImportPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Events"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.AutoImportPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.AutoImportPolicy()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<FSxClientTypes.EventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.DataRepositoryTask {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryTask()
        value.taskId = try reader["TaskId"].readIfPresent() ?? ""
        value.lifecycle = try reader["Lifecycle"].readIfPresent() ?? .sdkUnknown("")
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.paths = try reader["Paths"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.DataRepositoryTaskFailureDetails.read(from:))
        value.status = try reader["Status"].readIfPresent(with: FSxClientTypes.DataRepositoryTaskStatus.read(from:))
        value.report = try reader["Report"].readIfPresent(with: FSxClientTypes.CompletionReport.read(from:))
        value.capacityToRelease = try reader["CapacityToRelease"].readIfPresent()
        value.fileCacheId = try reader["FileCacheId"].readIfPresent()
        value.releaseConfiguration = try reader["ReleaseConfiguration"].readIfPresent(with: FSxClientTypes.ReleaseConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.ReleaseConfiguration {

    static func write(value: FSxClientTypes.ReleaseConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationSinceLastAccess"].write(value.durationSinceLastAccess, with: FSxClientTypes.DurationSinceLastAccess.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.ReleaseConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.ReleaseConfiguration()
        value.durationSinceLastAccess = try reader["DurationSinceLastAccess"].readIfPresent(with: FSxClientTypes.DurationSinceLastAccess.read(from:))
        return value
    }
}

extension FSxClientTypes.DurationSinceLastAccess {

    static func write(value: FSxClientTypes.DurationSinceLastAccess?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DurationSinceLastAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DurationSinceLastAccess()
        value.unit = try reader["Unit"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.CompletionReport {

    static func write(value: FSxClientTypes.CompletionReport?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["Format"].write(value.format)
        try writer["Path"].write(value.path)
        try writer["Scope"].write(value.scope)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.CompletionReport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.CompletionReport()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.path = try reader["Path"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        value.scope = try reader["Scope"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.DataRepositoryTaskStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryTaskStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryTaskStatus()
        value.totalCount = try reader["TotalCount"].readIfPresent()
        value.succeededCount = try reader["SucceededCount"].readIfPresent()
        value.failedCount = try reader["FailedCount"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.releasedCapacity = try reader["ReleasedCapacity"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.DataRepositoryTaskFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DataRepositoryTaskFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DataRepositoryTaskFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.FileCacheCreating {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileCacheCreating {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileCacheCreating()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileCacheId = try reader["FileCacheId"].readIfPresent()
        value.fileCacheType = try reader["FileCacheType"].readIfPresent()
        value.fileCacheTypeVersion = try reader["FileCacheTypeVersion"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.FileCacheFailureDetails.read(from:))
        value.storageCapacity = try reader["StorageCapacity"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaceIds = try reader["NetworkInterfaceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.copyTagsToDataRepositoryAssociations = try reader["CopyTagsToDataRepositoryAssociations"].readIfPresent()
        value.lustreConfiguration = try reader["LustreConfiguration"].readIfPresent(with: FSxClientTypes.FileCacheLustreConfiguration.read(from:))
        value.dataRepositoryAssociationIds = try reader["DataRepositoryAssociationIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.FileCacheLustreConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileCacheLustreConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileCacheLustreConfiguration()
        value.perUnitStorageThroughput = try reader["PerUnitStorageThroughput"].readIfPresent()
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.mountName = try reader["MountName"].readIfPresent()
        value.weeklyMaintenanceStartTime = try reader["WeeklyMaintenanceStartTime"].readIfPresent()
        value.metadataConfiguration = try reader["MetadataConfiguration"].readIfPresent(with: FSxClientTypes.FileCacheLustreMetadataConfiguration.read(from:))
        value.logConfiguration = try reader["LogConfiguration"].readIfPresent(with: FSxClientTypes.LustreLogConfiguration.read(from:))
        return value
    }
}

extension FSxClientTypes.FileCacheLustreMetadataConfiguration {

    static func write(value: FSxClientTypes.FileCacheLustreMetadataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StorageCapacity"].write(value.storageCapacity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileCacheLustreMetadataConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileCacheLustreMetadataConfiguration()
        value.storageCapacity = try reader["StorageCapacity"].readIfPresent() ?? 0
        return value
    }
}

extension FSxClientTypes.FileCacheFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileCacheFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileCacheFailureDetails()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.StorageVirtualMachine {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.StorageVirtualMachine {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.StorageVirtualMachine()
        value.activeDirectoryConfiguration = try reader["ActiveDirectoryConfiguration"].readIfPresent(with: FSxClientTypes.SvmActiveDirectoryConfiguration.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endpoints = try reader["Endpoints"].readIfPresent(with: FSxClientTypes.SvmEndpoints.read(from:))
        value.fileSystemId = try reader["FileSystemId"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.storageVirtualMachineId = try reader["StorageVirtualMachineId"].readIfPresent()
        value.subtype = try reader["Subtype"].readIfPresent()
        value.uuid = try reader["UUID"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycleTransitionReason = try reader["LifecycleTransitionReason"].readIfPresent(with: FSxClientTypes.LifecycleTransitionReason.read(from:))
        value.rootVolumeSecurityStyle = try reader["RootVolumeSecurityStyle"].readIfPresent()
        return value
    }
}

extension FSxClientTypes.SvmEndpoints {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SvmEndpoints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SvmEndpoints()
        value.iscsi = try reader["Iscsi"].readIfPresent(with: FSxClientTypes.SvmEndpoint.read(from:))
        value.management = try reader["Management"].readIfPresent(with: FSxClientTypes.SvmEndpoint.read(from:))
        value.nfs = try reader["Nfs"].readIfPresent(with: FSxClientTypes.SvmEndpoint.read(from:))
        value.smb = try reader["Smb"].readIfPresent(with: FSxClientTypes.SvmEndpoint.read(from:))
        return value
    }
}

extension FSxClientTypes.SvmEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SvmEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SvmEndpoint()
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.ipAddresses = try reader["IpAddresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.SvmActiveDirectoryConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.SvmActiveDirectoryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.SvmActiveDirectoryConfiguration()
        value.netBiosName = try reader["NetBiosName"].readIfPresent()
        value.selfManagedActiveDirectoryConfiguration = try reader["SelfManagedActiveDirectoryConfiguration"].readIfPresent(with: FSxClientTypes.SelfManagedActiveDirectoryAttributes.read(from:))
        return value
    }
}

extension FSxClientTypes.DeleteFileSystemWindowsResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DeleteFileSystemWindowsResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DeleteFileSystemWindowsResponse()
        value.finalBackupId = try reader["FinalBackupId"].readIfPresent()
        value.finalBackupTags = try reader["FinalBackupTags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.DeleteFileSystemLustreResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DeleteFileSystemLustreResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DeleteFileSystemLustreResponse()
        value.finalBackupId = try reader["FinalBackupId"].readIfPresent()
        value.finalBackupTags = try reader["FinalBackupTags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.DeleteFileSystemOpenZFSResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DeleteFileSystemOpenZFSResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DeleteFileSystemOpenZFSResponse()
        value.finalBackupId = try reader["FinalBackupId"].readIfPresent()
        value.finalBackupTags = try reader["FinalBackupTags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.DeleteVolumeOntapResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.DeleteVolumeOntapResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.DeleteVolumeOntapResponse()
        value.finalBackupId = try reader["FinalBackupId"].readIfPresent()
        value.finalBackupTags = try reader["FinalBackupTags"].readListIfPresent(memberReadingClosure: FSxClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.FileCache {

    static func read(from reader: SmithyJSON.Reader) throws -> FSxClientTypes.FileCache {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FSxClientTypes.FileCache()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileCacheId = try reader["FileCacheId"].readIfPresent()
        value.fileCacheType = try reader["FileCacheType"].readIfPresent()
        value.fileCacheTypeVersion = try reader["FileCacheTypeVersion"].readIfPresent()
        value.lifecycle = try reader["Lifecycle"].readIfPresent()
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: FSxClientTypes.FileCacheFailureDetails.read(from:))
        value.storageCapacity = try reader["StorageCapacity"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaceIds = try reader["NetworkInterfaceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.lustreConfiguration = try reader["LustreConfiguration"].readIfPresent(with: FSxClientTypes.FileCacheLustreConfiguration.read(from:))
        value.dataRepositoryAssociationIds = try reader["DataRepositoryAssociationIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FSxClientTypes.CreateFileCacheLustreConfiguration {

    static func write(value: FSxClientTypes.CreateFileCacheLustreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentType"].write(value.deploymentType)
        try writer["MetadataConfiguration"].write(value.metadataConfiguration, with: FSxClientTypes.FileCacheLustreMetadataConfiguration.write(value:to:))
        try writer["PerUnitStorageThroughput"].write(value.perUnitStorageThroughput)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.FileCacheDataRepositoryAssociation {

    static func write(value: FSxClientTypes.FileCacheDataRepositoryAssociation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataRepositoryPath"].write(value.dataRepositoryPath)
        try writer["DataRepositorySubdirectories"].writeList(value.dataRepositorySubdirectories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FileCachePath"].write(value.fileCachePath)
        try writer["NFS"].write(value.nfs, with: FSxClientTypes.FileCacheNFSConfiguration.write(value:to:))
    }
}

extension FSxClientTypes.FileCacheNFSConfiguration {

    static func write(value: FSxClientTypes.FileCacheNFSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DnsIps"].writeList(value.dnsIps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Version"].write(value.version)
    }
}

extension FSxClientTypes.CreateFileSystemWindowsConfiguration {

    static func write(value: FSxClientTypes.CreateFileSystemWindowsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveDirectoryId"].write(value.activeDirectoryId)
        try writer["Aliases"].writeList(value.aliases, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AuditLogConfiguration"].write(value.auditLogConfiguration, with: FSxClientTypes.WindowsAuditLogCreateConfiguration.write(value:to:))
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DeploymentType"].write(value.deploymentType)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["PreferredSubnetId"].write(value.preferredSubnetId)
        try writer["SelfManagedActiveDirectoryConfiguration"].write(value.selfManagedActiveDirectoryConfiguration, with: FSxClientTypes.SelfManagedActiveDirectoryConfiguration.write(value:to:))
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.WindowsAuditLogCreateConfiguration {

    static func write(value: FSxClientTypes.WindowsAuditLogCreateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditLogDestination"].write(value.auditLogDestination)
        try writer["FileAccessAuditLogLevel"].write(value.fileAccessAuditLogLevel)
        try writer["FileShareAccessAuditLogLevel"].write(value.fileShareAccessAuditLogLevel)
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryConfiguration {

    static func write(value: FSxClientTypes.SelfManagedActiveDirectoryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DnsIps"].writeList(value.dnsIps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DomainName"].write(value.domainName)
        try writer["FileSystemAdministratorsGroup"].write(value.fileSystemAdministratorsGroup)
        try writer["OrganizationalUnitDistinguishedName"].write(value.organizationalUnitDistinguishedName)
        try writer["Password"].write(value.password)
        try writer["UserName"].write(value.userName)
    }
}

extension FSxClientTypes.CreateFileSystemLustreConfiguration {

    static func write(value: FSxClientTypes.CreateFileSystemLustreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoImportPolicy"].write(value.autoImportPolicy)
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DataCompressionType"].write(value.dataCompressionType)
        try writer["DeploymentType"].write(value.deploymentType)
        try writer["DriveCacheType"].write(value.driveCacheType)
        try writer["ExportPath"].write(value.exportPath)
        try writer["ImportPath"].write(value.importPath)
        try writer["ImportedFileChunkSize"].write(value.importedFileChunkSize)
        try writer["LogConfiguration"].write(value.logConfiguration, with: FSxClientTypes.LustreLogCreateConfiguration.write(value:to:))
        try writer["MetadataConfiguration"].write(value.metadataConfiguration, with: FSxClientTypes.CreateFileSystemLustreMetadataConfiguration.write(value:to:))
        try writer["PerUnitStorageThroughput"].write(value.perUnitStorageThroughput)
        try writer["RootSquashConfiguration"].write(value.rootSquashConfiguration, with: FSxClientTypes.LustreRootSquashConfiguration.write(value:to:))
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.CreateFileSystemLustreMetadataConfiguration {

    static func write(value: FSxClientTypes.CreateFileSystemLustreMetadataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Iops"].write(value.iops)
        try writer["Mode"].write(value.mode)
    }
}

extension FSxClientTypes.LustreLogCreateConfiguration {

    static func write(value: FSxClientTypes.LustreLogCreateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination)
        try writer["Level"].write(value.level)
    }
}

extension FSxClientTypes.CreateFileSystemOntapConfiguration {

    static func write(value: FSxClientTypes.CreateFileSystemOntapConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DeploymentType"].write(value.deploymentType)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["EndpointIpAddressRange"].write(value.endpointIpAddressRange)
        try writer["FsxAdminPassword"].write(value.fsxAdminPassword)
        try writer["HAPairs"].write(value.haPairs)
        try writer["PreferredSubnetId"].write(value.preferredSubnetId)
        try writer["RouteTableIds"].writeList(value.routeTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["ThroughputCapacityPerHAPair"].write(value.throughputCapacityPerHAPair)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.CreateFileSystemOpenZFSConfiguration {

    static func write(value: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["CopyTagsToVolumes"].write(value.copyTagsToVolumes)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DeploymentType"].write(value.deploymentType)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["EndpointIpAddressRange"].write(value.endpointIpAddressRange)
        try writer["PreferredSubnetId"].write(value.preferredSubnetId)
        try writer["RootVolumeConfiguration"].write(value.rootVolumeConfiguration, with: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration.write(value:to:))
        try writer["RouteTableIds"].writeList(value.routeTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.OpenZFSCreateRootVolumeConfiguration {

    static func write(value: FSxClientTypes.OpenZFSCreateRootVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyTagsToSnapshots"].write(value.copyTagsToSnapshots)
        try writer["DataCompressionType"].write(value.dataCompressionType)
        try writer["NfsExports"].writeList(value.nfsExports, memberWritingClosure: FSxClientTypes.OpenZFSNfsExport.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReadOnly"].write(value.readOnly)
        try writer["RecordSizeKiB"].write(value.recordSizeKiB)
        try writer["UserAndGroupQuotas"].writeList(value.userAndGroupQuotas, memberWritingClosure: FSxClientTypes.OpenZFSUserOrGroupQuota.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.CreateSvmActiveDirectoryConfiguration {

    static func write(value: FSxClientTypes.CreateSvmActiveDirectoryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NetBiosName"].write(value.netBiosName)
        try writer["SelfManagedActiveDirectoryConfiguration"].write(value.selfManagedActiveDirectoryConfiguration, with: FSxClientTypes.SelfManagedActiveDirectoryConfiguration.write(value:to:))
    }
}

extension FSxClientTypes.CreateOntapVolumeConfiguration {

    static func write(value: FSxClientTypes.CreateOntapVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AggregateConfiguration"].write(value.aggregateConfiguration, with: FSxClientTypes.CreateAggregateConfiguration.write(value:to:))
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["JunctionPath"].write(value.junctionPath)
        try writer["OntapVolumeType"].write(value.ontapVolumeType)
        try writer["SecurityStyle"].write(value.securityStyle)
        try writer["SizeInBytes"].write(value.sizeInBytes)
        try writer["SizeInMegabytes"].write(value.sizeInMegabytes)
        try writer["SnaplockConfiguration"].write(value.snaplockConfiguration, with: FSxClientTypes.CreateSnaplockConfiguration.write(value:to:))
        try writer["SnapshotPolicy"].write(value.snapshotPolicy)
        try writer["StorageEfficiencyEnabled"].write(value.storageEfficiencyEnabled)
        try writer["StorageVirtualMachineId"].write(value.storageVirtualMachineId)
        try writer["TieringPolicy"].write(value.tieringPolicy, with: FSxClientTypes.TieringPolicy.write(value:to:))
        try writer["VolumeStyle"].write(value.volumeStyle)
    }
}

extension FSxClientTypes.CreateAggregateConfiguration {

    static func write(value: FSxClientTypes.CreateAggregateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aggregates"].writeList(value.aggregates, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConstituentsPerAggregate"].write(value.constituentsPerAggregate)
    }
}

extension FSxClientTypes.CreateSnaplockConfiguration {

    static func write(value: FSxClientTypes.CreateSnaplockConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditLogVolume"].write(value.auditLogVolume)
        try writer["AutocommitPeriod"].write(value.autocommitPeriod, with: FSxClientTypes.AutocommitPeriod.write(value:to:))
        try writer["PrivilegedDelete"].write(value.privilegedDelete)
        try writer["RetentionPeriod"].write(value.retentionPeriod, with: FSxClientTypes.SnaplockRetentionPeriod.write(value:to:))
        try writer["SnaplockType"].write(value.snaplockType)
        try writer["VolumeAppendModeEnabled"].write(value.volumeAppendModeEnabled)
    }
}

extension FSxClientTypes.CreateOpenZFSVolumeConfiguration {

    static func write(value: FSxClientTypes.CreateOpenZFSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyTagsToSnapshots"].write(value.copyTagsToSnapshots)
        try writer["DataCompressionType"].write(value.dataCompressionType)
        try writer["NfsExports"].writeList(value.nfsExports, memberWritingClosure: FSxClientTypes.OpenZFSNfsExport.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OriginSnapshot"].write(value.originSnapshot, with: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration.write(value:to:))
        try writer["ParentVolumeId"].write(value.parentVolumeId)
        try writer["ReadOnly"].write(value.readOnly)
        try writer["RecordSizeKiB"].write(value.recordSizeKiB)
        try writer["StorageCapacityQuotaGiB"].write(value.storageCapacityQuotaGiB)
        try writer["StorageCapacityReservationGiB"].write(value.storageCapacityReservationGiB)
        try writer["UserAndGroupQuotas"].writeList(value.userAndGroupQuotas, memberWritingClosure: FSxClientTypes.OpenZFSUserOrGroupQuota.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration {

    static func write(value: FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyStrategy"].write(value.copyStrategy)
        try writer["SnapshotARN"].write(value.snapshotARN)
    }
}

extension FSxClientTypes.DeleteFileSystemWindowsConfiguration {

    static func write(value: FSxClientTypes.DeleteFileSystemWindowsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FinalBackupTags"].writeList(value.finalBackupTags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SkipFinalBackup"].write(value.skipFinalBackup)
    }
}

extension FSxClientTypes.DeleteFileSystemLustreConfiguration {

    static func write(value: FSxClientTypes.DeleteFileSystemLustreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FinalBackupTags"].writeList(value.finalBackupTags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SkipFinalBackup"].write(value.skipFinalBackup)
    }
}

extension FSxClientTypes.DeleteFileSystemOpenZFSConfiguration {

    static func write(value: FSxClientTypes.DeleteFileSystemOpenZFSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FinalBackupTags"].writeList(value.finalBackupTags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.DeleteFileSystemOpenZFSOption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SkipFinalBackup"].write(value.skipFinalBackup)
    }
}

extension FSxClientTypes.DeleteVolumeOntapConfiguration {

    static func write(value: FSxClientTypes.DeleteVolumeOntapConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BypassSnaplockEnterpriseRetention"].write(value.bypassSnaplockEnterpriseRetention)
        try writer["FinalBackupTags"].writeList(value.finalBackupTags, memberWritingClosure: FSxClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SkipFinalBackup"].write(value.skipFinalBackup)
    }
}

extension FSxClientTypes.DeleteVolumeOpenZFSConfiguration {

    static func write(value: FSxClientTypes.DeleteVolumeOpenZFSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FSxClientTypes.DeleteOpenZFSVolumeOption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.Filter {

    static func write(value: FSxClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.DataRepositoryTaskFilter {

    static func write(value: FSxClientTypes.DataRepositoryTaskFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.SnapshotFilter {

    static func write(value: FSxClientTypes.SnapshotFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.StorageVirtualMachineFilter {

    static func write(value: FSxClientTypes.StorageVirtualMachineFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.VolumeFilter {

    static func write(value: FSxClientTypes.VolumeFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FSxClientTypes.UpdateFileCacheLustreConfiguration {

    static func write(value: FSxClientTypes.UpdateFileCacheLustreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.UpdateFileSystemWindowsConfiguration {

    static func write(value: FSxClientTypes.UpdateFileSystemWindowsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditLogConfiguration"].write(value.auditLogConfiguration, with: FSxClientTypes.WindowsAuditLogCreateConfiguration.write(value:to:))
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["SelfManagedActiveDirectoryConfiguration"].write(value.selfManagedActiveDirectoryConfiguration, with: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates.write(value:to:))
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates {

    static func write(value: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DnsIps"].writeList(value.dnsIps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DomainName"].write(value.domainName)
        try writer["FileSystemAdministratorsGroup"].write(value.fileSystemAdministratorsGroup)
        try writer["OrganizationalUnitDistinguishedName"].write(value.organizationalUnitDistinguishedName)
        try writer["Password"].write(value.password)
        try writer["UserName"].write(value.userName)
    }
}

extension FSxClientTypes.UpdateFileSystemLustreConfiguration {

    static func write(value: FSxClientTypes.UpdateFileSystemLustreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoImportPolicy"].write(value.autoImportPolicy)
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DataCompressionType"].write(value.dataCompressionType)
        try writer["LogConfiguration"].write(value.logConfiguration, with: FSxClientTypes.LustreLogCreateConfiguration.write(value:to:))
        try writer["MetadataConfiguration"].write(value.metadataConfiguration, with: FSxClientTypes.UpdateFileSystemLustreMetadataConfiguration.write(value:to:))
        try writer["PerUnitStorageThroughput"].write(value.perUnitStorageThroughput)
        try writer["RootSquashConfiguration"].write(value.rootSquashConfiguration, with: FSxClientTypes.LustreRootSquashConfiguration.write(value:to:))
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.UpdateFileSystemLustreMetadataConfiguration {

    static func write(value: FSxClientTypes.UpdateFileSystemLustreMetadataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Iops"].write(value.iops)
        try writer["Mode"].write(value.mode)
    }
}

extension FSxClientTypes.UpdateFileSystemOntapConfiguration {

    static func write(value: FSxClientTypes.UpdateFileSystemOntapConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddRouteTableIds"].writeList(value.addRouteTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["FsxAdminPassword"].write(value.fsxAdminPassword)
        try writer["HAPairs"].write(value.haPairs)
        try writer["RemoveRouteTableIds"].writeList(value.removeRouteTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["ThroughputCapacityPerHAPair"].write(value.throughputCapacityPerHAPair)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.UpdateFileSystemOpenZFSConfiguration {

    static func write(value: FSxClientTypes.UpdateFileSystemOpenZFSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddRouteTableIds"].writeList(value.addRouteTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutomaticBackupRetentionDays"].write(value.automaticBackupRetentionDays)
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["CopyTagsToVolumes"].write(value.copyTagsToVolumes)
        try writer["DailyAutomaticBackupStartTime"].write(value.dailyAutomaticBackupStartTime)
        try writer["DiskIopsConfiguration"].write(value.diskIopsConfiguration, with: FSxClientTypes.DiskIopsConfiguration.write(value:to:))
        try writer["RemoveRouteTableIds"].writeList(value.removeRouteTableIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThroughputCapacity"].write(value.throughputCapacity)
        try writer["WeeklyMaintenanceStartTime"].write(value.weeklyMaintenanceStartTime)
    }
}

extension FSxClientTypes.UpdateSvmActiveDirectoryConfiguration {

    static func write(value: FSxClientTypes.UpdateSvmActiveDirectoryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NetBiosName"].write(value.netBiosName)
        try writer["SelfManagedActiveDirectoryConfiguration"].write(value.selfManagedActiveDirectoryConfiguration, with: FSxClientTypes.SelfManagedActiveDirectoryConfigurationUpdates.write(value:to:))
    }
}

extension FSxClientTypes.UpdateOntapVolumeConfiguration {

    static func write(value: FSxClientTypes.UpdateOntapVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyTagsToBackups"].write(value.copyTagsToBackups)
        try writer["JunctionPath"].write(value.junctionPath)
        try writer["SecurityStyle"].write(value.securityStyle)
        try writer["SizeInBytes"].write(value.sizeInBytes)
        try writer["SizeInMegabytes"].write(value.sizeInMegabytes)
        try writer["SnaplockConfiguration"].write(value.snaplockConfiguration, with: FSxClientTypes.UpdateSnaplockConfiguration.write(value:to:))
        try writer["SnapshotPolicy"].write(value.snapshotPolicy)
        try writer["StorageEfficiencyEnabled"].write(value.storageEfficiencyEnabled)
        try writer["TieringPolicy"].write(value.tieringPolicy, with: FSxClientTypes.TieringPolicy.write(value:to:))
    }
}

extension FSxClientTypes.UpdateSnaplockConfiguration {

    static func write(value: FSxClientTypes.UpdateSnaplockConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditLogVolume"].write(value.auditLogVolume)
        try writer["AutocommitPeriod"].write(value.autocommitPeriod, with: FSxClientTypes.AutocommitPeriod.write(value:to:))
        try writer["PrivilegedDelete"].write(value.privilegedDelete)
        try writer["RetentionPeriod"].write(value.retentionPeriod, with: FSxClientTypes.SnaplockRetentionPeriod.write(value:to:))
        try writer["VolumeAppendModeEnabled"].write(value.volumeAppendModeEnabled)
    }
}

extension FSxClientTypes.UpdateOpenZFSVolumeConfiguration {

    static func write(value: FSxClientTypes.UpdateOpenZFSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataCompressionType"].write(value.dataCompressionType)
        try writer["NfsExports"].writeList(value.nfsExports, memberWritingClosure: FSxClientTypes.OpenZFSNfsExport.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReadOnly"].write(value.readOnly)
        try writer["RecordSizeKiB"].write(value.recordSizeKiB)
        try writer["StorageCapacityQuotaGiB"].write(value.storageCapacityQuotaGiB)
        try writer["StorageCapacityReservationGiB"].write(value.storageCapacityReservationGiB)
        try writer["UserAndGroupQuotas"].writeList(value.userAndGroupQuotas, memberWritingClosure: FSxClientTypes.OpenZFSUserOrGroupQuota.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum FSxClientTypes {}
