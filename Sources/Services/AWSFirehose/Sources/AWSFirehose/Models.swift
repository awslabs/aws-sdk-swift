//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Serverless offering for Amazon OpenSearch Service destination.
    public struct AmazonOpenSearchServerlessBufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the Amazon CloudWatch logging options for your delivery stream.
    public struct CloudWatchLoggingOptions {
        /// Enables or disables CloudWatch logging.
        public var enabled: Swift.Bool?
        /// The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
        public var logGroupName: Swift.String?
        /// The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
        public var logStreamName: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            logGroupName: Swift.String? = nil,
            logStreamName: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }
    }

}

extension FirehoseClientTypes {

    public enum ProcessorParameterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bufferIntervalInSeconds
        case bufferSizeInMb
        case compressionFormat
        case dataMessageExtraction
        case delimiter
        case jsonParsingEngine
        case lambdaArn
        case lambdaNumberOfRetries
        case metadataExtractionQuery
        case roleArn
        case subRecordType
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessorParameterName] {
            return [
                .bufferIntervalInSeconds,
                .bufferSizeInMb,
                .compressionFormat,
                .dataMessageExtraction,
                .delimiter,
                .jsonParsingEngine,
                .lambdaArn,
                .lambdaNumberOfRetries,
                .metadataExtractionQuery,
                .roleArn,
                .subRecordType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bufferIntervalInSeconds: return "BufferIntervalInSeconds"
            case .bufferSizeInMb: return "BufferSizeInMBs"
            case .compressionFormat: return "CompressionFormat"
            case .dataMessageExtraction: return "DataMessageExtraction"
            case .delimiter: return "Delimiter"
            case .jsonParsingEngine: return "JsonParsingEngine"
            case .lambdaArn: return "LambdaArn"
            case .lambdaNumberOfRetries: return "NumberOfRetries"
            case .metadataExtractionQuery: return "MetadataExtractionQuery"
            case .roleArn: return "RoleArn"
            case .subRecordType: return "SubRecordType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the processor parameter.
    public struct ProcessorParameter {
        /// The name of the parameter. Currently the following default values are supported: 3 for NumberOfRetries and 60 for the BufferIntervalInSeconds. The BufferSizeInMBs ranges between 0.2 MB and up to 3MB. The default buffering hint is 1MB for all destinations, except Splunk. For Splunk, the default buffering hint is 256 KB.
        /// This member is required.
        public var parameterName: FirehoseClientTypes.ProcessorParameterName?
        /// The parameter value.
        /// This member is required.
        public var parameterValue: Swift.String?

        public init(
            parameterName: FirehoseClientTypes.ProcessorParameterName? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension FirehoseClientTypes {

    public enum ProcessorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appenddelimitertorecord
        case cloudwatchlogprocessing
        case decompression
        case lambda
        case metadataextraction
        case recorddeaggregation
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessorType] {
            return [
                .appenddelimitertorecord,
                .cloudwatchlogprocessing,
                .decompression,
                .lambda,
                .metadataextraction,
                .recorddeaggregation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appenddelimitertorecord: return "AppendDelimiterToRecord"
            case .cloudwatchlogprocessing: return "CloudWatchLogProcessing"
            case .decompression: return "Decompression"
            case .lambda: return "Lambda"
            case .metadataextraction: return "MetadataExtraction"
            case .recorddeaggregation: return "RecordDeAggregation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes a data processor. If you want to add a new line delimiter between records in objects that are delivered to Amazon S3, choose AppendDelimiterToRecord as a processor type. You donâ€™t have to put a processor parameter when you select AppendDelimiterToRecord.
    public struct Processor {
        /// The processor parameters.
        public var parameters: [FirehoseClientTypes.ProcessorParameter]?
        /// The type of processor.
        /// This member is required.
        public var type: FirehoseClientTypes.ProcessorType?

        public init(
            parameters: [FirehoseClientTypes.ProcessorParameter]? = nil,
            type: FirehoseClientTypes.ProcessorType? = nil
        )
        {
            self.parameters = parameters
            self.type = type
        }
    }

}

extension FirehoseClientTypes {
    /// Describes a data processing configuration.
    public struct ProcessingConfiguration {
        /// Enables or disables data processing.
        public var enabled: Swift.Bool?
        /// The data processors.
        public var processors: [FirehoseClientTypes.Processor]?

        public init(
            enabled: Swift.Bool? = nil,
            processors: [FirehoseClientTypes.Processor]? = nil
        )
        {
            self.enabled = enabled
            self.processors = processors
        }
    }

}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessRetryOptions {
        /// After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time during which Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum AmazonOpenSearchServerlessS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonOpenSearchServerlessS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
    public struct BufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300. This parameter is optional but if you specify a value for it, you must also specify a value for SizeInMBs, and vice versa.
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MiBs, before delivering it to the destination. The default value is 5. This parameter is optional but if you specify a value for it, you must also specify a value for IntervalInSeconds, and vice versa. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MiB/sec, the value should be 10 MiB or higher.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {

    public enum CompressionFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case hadoopSnappy
        case snappy
        case uncompressed
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionFormat] {
            return [
                .gzip,
                .hadoopSnappy,
                .snappy,
                .uncompressed,
                .zip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .hadoopSnappy: return "HADOOP_SNAPPY"
            case .snappy: return "Snappy"
            case .uncompressed: return "UNCOMPRESSED"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes an encryption key for a destination in Amazon S3.
    public struct KMSEncryptionConfig {
        /// The Amazon Resource Name (ARN) of the encryption key. Must belong to the same Amazon Web Services Region as the destination Amazon S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var awskmsKeyARN: Swift.String?

        public init(
            awskmsKeyARN: Swift.String? = nil
        )
        {
            self.awskmsKeyARN = awskmsKeyARN
        }
    }

}

extension FirehoseClientTypes {

    public enum NoEncryptionConfig: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noencryption
        case sdkUnknown(Swift.String)

        public static var allCases: [NoEncryptionConfig] {
            return [
                .noencryption
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noencryption: return "NoEncryption"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the encryption for a destination in Amazon S3.
    public struct EncryptionConfiguration {
        /// The encryption key.
        public var kmsEncryptionConfig: FirehoseClientTypes.KMSEncryptionConfig?
        /// Specifically override existing encryption information to ensure that no encryption is used.
        public var noEncryptionConfig: FirehoseClientTypes.NoEncryptionConfig?

        public init(
            kmsEncryptionConfig: FirehoseClientTypes.KMSEncryptionConfig? = nil,
            noEncryptionConfig: FirehoseClientTypes.NoEncryptionConfig? = nil
        )
        {
            self.kmsEncryptionConfig = kmsEncryptionConfig
            self.noEncryptionConfig = noEncryptionConfig
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon S3.
    public struct S3DestinationConfiguration {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes {
    /// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless destination.
    public struct VpcConfiguration {
        /// The ARN of the IAM role that you want the delivery stream to use to create endpoints in the destination VPC. You can use your existing Firehose delivery role or you can specify a new role. In either case, make sure that the role trusts the Firehose service principal and that it grants the following permissions:
        ///
        /// * ec2:DescribeVpcs
        ///
        /// * ec2:DescribeVpcAttribute
        ///
        /// * ec2:DescribeSubnets
        ///
        /// * ec2:DescribeSecurityGroups
        ///
        /// * ec2:DescribeNetworkInterfaces
        ///
        /// * ec2:CreateNetworkInterface
        ///
        /// * ec2:CreateNetworkInterfacePermission
        ///
        /// * ec2:DeleteNetworkInterface
        ///
        ///
        /// When you specify subnets for delivering data to the destination in a private VPC, make sure you have enough number of free IP addresses in chosen subnets. If there is no available free IP address in a specified subnet, Firehose cannot create or add ENIs for the data delivery in the private VPC, and the delivery will be degraded or fail.
        /// This member is required.
        public var roleARN: Swift.String?
        /// The IDs of the security groups that you want Firehose to use when it creates ENIs in the VPC of the Amazon ES destination. You can use the same security group that the Amazon ES domain uses or different ones. If you specify different security groups here, ensure that they allow outbound HTTPS traffic to the Amazon ES domain's security group. Also ensure that the Amazon ES domain's security group allows HTTPS traffic from the security groups specified here. If you use the same security group for both your delivery stream and the Amazon ES domain, make sure the security group inbound rule allows HTTPS traffic. For more information about security group rules, see [Security group rules](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#SecurityGroupRules) in the Amazon VPC documentation.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets that you want Firehose to use to create ENIs in the VPC of the Amazon ES destination. Make sure that the routing tables and inbound and outbound rules allow traffic to flow from the subnets whose IDs are specified here to the subnets that have the destination Amazon ES endpoints. Firehose creates at least one ENI in each of the subnets that are specified here. Do not delete or modify these ENIs. The number of ENIs that Firehose creates in the subnets specified here scales up and down automatically based on throughput. To enable Firehose to scale up the number of ENIs to match throughput, ensure that you have sufficient quota. To help you calculate the quota you need, assume that Firehose can create up to three ENIs for this delivery stream for each of the subnets specified here. For more information about ENI quota, see [Network Interfaces ](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-enis) in the Amazon VPC Quotas topic.
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init(
            roleARN: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.roleARN = roleARN
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationConfiguration {
        /// The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
        public var s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon S3.
    public struct S3DestinationDescription {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        /// This member is required.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        /// This member is required.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        /// This member is required.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes {
    /// The details of the VPC of the Amazon ES destination.
    public struct VpcConfigurationDescription {
        /// The ARN of the IAM role that the delivery stream uses to create endpoints in the destination VPC. You can use your existing Firehose delivery role or you can specify a new role. In either case, make sure that the role trusts the Firehose service principal and that it grants the following permissions:
        ///
        /// * ec2:DescribeVpcs
        ///
        /// * ec2:DescribeVpcAttribute
        ///
        /// * ec2:DescribeSubnets
        ///
        /// * ec2:DescribeSecurityGroups
        ///
        /// * ec2:DescribeNetworkInterfaces
        ///
        /// * ec2:CreateNetworkInterface
        ///
        /// * ec2:CreateNetworkInterfacePermission
        ///
        /// * ec2:DeleteNetworkInterface
        ///
        ///
        /// If you revoke these permissions after you create the delivery stream, Firehose can't scale out by creating more ENIs when necessary. You might therefore see a degradation in performance.
        /// This member is required.
        public var roleARN: Swift.String?
        /// The IDs of the security groups that Firehose uses when it creates ENIs in the VPC of the Amazon ES destination. You can use the same security group that the Amazon ES domain uses or different ones. If you specify different security groups, ensure that they allow outbound HTTPS traffic to the Amazon ES domain's security group. Also ensure that the Amazon ES domain's security group allows HTTPS traffic from the security groups specified here. If you use the same security group for both your delivery stream and the Amazon ES domain, make sure the security group inbound rule allows HTTPS traffic. For more information about security group rules, see [Security group rules](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#SecurityGroupRules) in the Amazon VPC documentation.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets that Firehose uses to create ENIs in the VPC of the Amazon ES destination. Make sure that the routing tables and inbound and outbound rules allow traffic to flow from the subnets whose IDs are specified here to the subnets that have the destination Amazon ES endpoints. Firehose creates at least one ENI in each of the subnets that are specified here. Do not delete or modify these ENIs. The number of ENIs that Firehose creates in the subnets specified here scales up and down automatically based on throughput. To enable Firehose to scale up the number of ENIs to match throughput, ensure that you have sufficient quota. To help you calculate the quota you need, assume that Firehose can create up to three ENIs for this delivery stream for each of the subnets specified here. For more information about ENI quota, see [Network Interfaces ](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-enis) in the Amazon VPC Quotas topic.
        /// This member is required.
        public var subnetIds: [Swift.String]?
        /// The ID of the Amazon ES destination's VPC.
        /// This member is required.
        public var vpcId: Swift.String?

        public init(
            roleARN: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.roleARN = roleARN
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension FirehoseClientTypes {
    /// The destination description in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationDescription {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Serverless offering for Amazon OpenSearch Service retry options.
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials.
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon S3.
    public struct S3DestinationUpdate {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes {
    /// Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationUpdate {
        /// The buffering options. If no value is specified, AmazonopensearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.
        public var roleARN: Swift.String?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Amazon OpenSearch Service destination.
    public struct AmazonopensearchserviceBufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {

    public enum DefaultDocumentIdFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case firehoseDefault
        case noDocumentId
        case sdkUnknown(Swift.String)

        public static var allCases: [DefaultDocumentIdFormat] {
            return [
                .firehoseDefault,
                .noDocumentId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .firehoseDefault: return "FIREHOSE_DEFAULT"
            case .noDocumentId: return "NO_DOCUMENT_ID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
    public struct DocumentIdOptions {
        /// When the FIREHOSE_DEFAULT option is chosen, Firehose generates a unique document ID for each record based on a unique internal identifier. The generated document ID is stable across multiple delivery attempts, which helps prevent the same record from being indexed multiple times with different document IDs. When the NO_DOCUMENT_ID option is chosen, Firehose does not include any document IDs in the requests it sends to the Amazon OpenSearch Service. This causes the Amazon OpenSearch Service domain to generate document IDs. In case of multiple delivery attempts, this may cause the same record to be indexed more than once with different document IDs. This option enables write-heavy operations, such as the ingestion of logs and observability data, to consume less resources in the Amazon OpenSearch Service domain, resulting in improved performance.
        /// This member is required.
        public var defaultDocumentIdFormat: FirehoseClientTypes.DefaultDocumentIdFormat?

        public init(
            defaultDocumentIdFormat: FirehoseClientTypes.DefaultDocumentIdFormat? = nil
        )
        {
            self.defaultDocumentIdFormat = defaultDocumentIdFormat
        }
    }

}

extension FirehoseClientTypes {

    public enum AmazonopensearchserviceIndexRotationPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case norotation
        case oneday
        case onehour
        case onemonth
        case oneweek
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonopensearchserviceIndexRotationPeriod] {
            return [
                .norotation,
                .oneday,
                .onehour,
                .onemonth,
                .oneweek
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .norotation: return "NoRotation"
            case .oneday: return "OneDay"
            case .onehour: return "OneHour"
            case .onemonth: return "OneMonth"
            case .oneweek: return "OneWeek"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Firehose is unable to deliver documents to Amazon OpenSearch Service.
    public struct AmazonopensearchserviceRetryOptions {
        /// After an initial failure to deliver to Amazon OpenSearch Service, the total amount of time during which Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum AmazonopensearchserviceS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonopensearchserviceS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon OpenSearch Service
    public struct AmazonopensearchserviceDestinationConfiguration {
        /// The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon OpenSearch Service domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN.
        public var domainARN: Swift.String?
        /// The ElasticsearAmazon OpenSearch Service index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data.
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Amazon OpenSearch Service Configuration API and for indexing documents.
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
        public var s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon OpenSearch Service type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Firehose returns an error during run time.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            typeName: Swift.String? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.typeName = typeName
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// The destination description in Amazon OpenSearch Service.
    public struct AmazonopensearchserviceDestinationDescription {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Firehose uses either this ClusterEndpoint or the DomainARN field to send data to Amazon OpenSearch Service.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon OpenSearch Service domain.
        public var domainARN: Swift.String?
        /// The Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon OpenSearch Service retry options.
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials.
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon OpenSearch Service type name. This applies to Elasticsearch 6.x and lower versions. For Elasticsearch 7.x and OpenSearch Service 1.x, there's no value for TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            typeName: Swift.String? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.typeName = typeName
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon OpenSearch Service.
    public struct AmazonopensearchserviceDestinationUpdate {
        /// The buffering options. If no value is specified, AmazonopensearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon OpenSearch Service domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the IAM role specified in RoleARN.
        public var domainARN: Swift.String?
        /// The Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to IndexName to facilitate the expiration of old data.
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Amazon OpenSearch Service Configuration API and for indexing documents.
        public var roleARN: Swift.String?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The Amazon OpenSearch Service type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Firehose returns an error during runtime. If you upgrade Elasticsearch from 6.x to 7.x and donâ€™t update your delivery stream, Firehose still delivers data to Elasticsearch with the old index name and type name. If you want to update your delivery stream with a new index name, provide an empty string for TypeName.
        public var typeName: Swift.String?

        public init(
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.typeName = typeName
        }
    }

}

extension FirehoseClientTypes {

    public enum Connectivity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [Connectivity] {
            return [
                .private,
                .public
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// The authentication configuration of the Amazon MSK cluster.
    public struct AuthenticationConfiguration {
        /// The type of connectivity used to access the Amazon MSK cluster.
        /// This member is required.
        public var connectivity: FirehoseClientTypes.Connectivity?
        /// The ARN of the role used to access the Amazon MSK cluster.
        /// This member is required.
        public var roleARN: Swift.String?

        public init(
            connectivity: FirehoseClientTypes.Connectivity? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.connectivity = connectivity
            self.roleARN = roleARN
        }
    }

}

/// Another modification has already happened. Fetch VersionId again and use it to update the destination.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FirehoseClientTypes {

    public enum ContentEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentEncoding] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes a COPY command for Amazon Redshift.
    public struct CopyCommand {
        /// Optional parameters to use with the Amazon Redshift COPY command. For more information, see the "Optional Parameters" section of [Amazon Redshift COPY command](https://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html). Some possible examples that would apply to Firehose are as follows: delimiter '\t' lzop; - fields are delimited with "\t" (TAB character) and compressed using lzop. delimiter '|' - fields are delimited with "|" (this is the default delimiter). delimiter '|' escape - the delimiter should be escaped. fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6' - fields are fixed width in the source, with each width specified after every column in the table. JSON 's3://mybucket/jsonpaths.txt' - data is in JSON format, and the path specified is the format of the data. For more examples, see [Amazon Redshift COPY command examples](https://docs.aws.amazon.com/redshift/latest/dg/r_COPY_command_examples.html).
        public var copyOptions: Swift.String?
        /// A comma-separated list of column names.
        public var dataTableColumns: Swift.String?
        /// The name of the target table. The table must already exist in the database.
        /// This member is required.
        public var dataTableName: Swift.String?

        public init(
            copyOptions: Swift.String? = nil,
            dataTableColumns: Swift.String? = nil,
            dataTableName: Swift.String? = nil
        )
        {
            self.copyOptions = copyOptions
            self.dataTableColumns = dataTableColumns
            self.dataTableName = dataTableName
        }
    }

}

/// The specified input parameter has a value that is not valid.
public struct InvalidArgumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Firehose throws this exception when an attempt to put records or to start or stop delivery stream encryption fails. This happens when the KMS service throws one of the following exception types: AccessDeniedException, InvalidStateException, DisabledException, or NotFoundException.
public struct InvalidKMSResourceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidKMSResourceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// You have already reached the limit for a requested resource.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is already in use and not available for this operation.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FirehoseClientTypes {

    public enum KeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsOwnedCmk
        case customerManagedCmk
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyType] {
            return [
                .awsOwnedCmk,
                .customerManagedCmk
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsOwnedCmk: return "AWS_OWNED_CMK"
            case .customerManagedCmk: return "CUSTOMER_MANAGED_CMK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Specifies the type and Amazon Resource Name (ARN) of the CMK to use for Server-Side Encryption (SSE).
    public struct DeliveryStreamEncryptionConfigurationInput {
        /// If you set KeyType to CUSTOMER_MANAGED_CMK, you must specify the Amazon Resource Name (ARN) of the CMK. If you set KeyType to Amazon Web Services_OWNED_CMK, Firehose uses a service-account CMK.
        public var keyARN: Swift.String?
        /// Indicates the type of customer master key (CMK) to use for encryption. The default setting is Amazon Web Services_OWNED_CMK. For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys). When you invoke [CreateDeliveryStream] or [StartDeliveryStreamEncryption] with KeyType set to CUSTOMER_MANAGED_CMK, Firehose invokes the Amazon KMS operation [CreateGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateGrant.html) to create a grant that allows the Firehose service to use the customer managed CMK to perform encryption and decryption. Firehose manages that grant. When you invoke [StartDeliveryStreamEncryption] to change the CMK for a delivery stream that is encrypted with a customer managed CMK, Firehose schedules the grant it had on the old CMK for retirement. You can use a CMK of type CUSTOMER_MANAGED_CMK to encrypt up to 500 delivery streams. If a [CreateDeliveryStream] or [StartDeliveryStreamEncryption] operation exceeds this limit, Firehose throws a LimitExceededException. To encrypt your delivery stream, use symmetric CMKs. Firehose doesn't support asymmetric CMKs. For information about symmetric and asymmetric CMKs, see [About Symmetric and Asymmetric CMKs](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html) in the Amazon Web Services Key Management Service developer guide.
        /// This member is required.
        public var keyType: FirehoseClientTypes.KeyType?

        public init(
            keyARN: Swift.String? = nil,
            keyType: FirehoseClientTypes.KeyType? = nil
        )
        {
            self.keyARN = keyARN
            self.keyType = keyType
        }
    }

}

extension FirehoseClientTypes {

    public enum DeliveryStreamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directput
        case kinesisstreamassource
        case mskassource
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamType] {
            return [
                .directput,
                .kinesisstreamassource,
                .mskassource
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directput: return "DirectPut"
            case .kinesisstreamassource: return "KinesisStreamAsSource"
            case .mskassource: return "MSKAsSource"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Amazon ES destination.
    public struct ElasticsearchBufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {

    public enum ElasticsearchIndexRotationPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case norotation
        case oneday
        case onehour
        case onemonth
        case oneweek
        case sdkUnknown(Swift.String)

        public static var allCases: [ElasticsearchIndexRotationPeriod] {
            return [
                .norotation,
                .oneday,
                .onehour,
                .onemonth,
                .oneweek
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .norotation: return "NoRotation"
            case .oneday: return "OneDay"
            case .onehour: return "OneHour"
            case .onemonth: return "OneMonth"
            case .oneweek: return "OneWeek"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Firehose is unable to deliver documents to Amazon ES.
    public struct ElasticsearchRetryOptions {
        /// After an initial failure to deliver to Amazon ES, the total amount of time during which Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum ElasticsearchS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [ElasticsearchS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon ES.
    public struct ElasticsearchDestinationConfiguration {
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the role specified in RoleARN. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Specify either ClusterEndpoint or DomainARN.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation). The default value is OneDay.
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Grant Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) and [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix. For more information, see [Amazon S3 Backup for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-s3-backup). Default value is FailedDocumentsOnly. You can't change this backup mode after you create the delivery stream.
        public var s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode?
        /// The configuration for the backup Amazon S3 location.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Firehose returns an error during run time. For Elasticsearch 7.x, don't specify a TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            typeName: Swift.String? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.typeName = typeName
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// The native Hive / HCatalog JsonSerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
    public struct HiveJsonSerDe {
        /// Indicates how you want Firehose to parse the date and timestamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse timestamps in epoch milliseconds. If you don't specify a format, Firehose uses java.sql.Timestamp::valueOf by default.
        public var timestampFormats: [Swift.String]?

        public init(
            timestampFormats: [Swift.String]? = nil
        )
        {
            self.timestampFormats = timestampFormats
        }
    }

}

extension FirehoseClientTypes {
    /// The OpenX SerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
    public struct OpenXJsonSerDe {
        /// When set to true, which is the default, Firehose converts JSON keys to lowercase before deserializing them.
        public var caseInsensitive: Swift.Bool?
        /// Maps column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to {"ts": "timestamp"} to map this key to a column named ts.
        public var columnToJsonKeyMappings: [Swift.String: Swift.String]?
        /// When set to true, specifies that the names of the keys include dots and that you want Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. The default is false.
        public var convertDotsInJsonKeysToUnderscores: Swift.Bool?

        public init(
            caseInsensitive: Swift.Bool? = nil,
            columnToJsonKeyMappings: [Swift.String: Swift.String]? = nil,
            convertDotsInJsonKeysToUnderscores: Swift.Bool? = nil
        )
        {
            self.caseInsensitive = caseInsensitive
            self.columnToJsonKeyMappings = columnToJsonKeyMappings
            self.convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores
        }
    }

}

extension FirehoseClientTypes {
    /// The deserializer you want Firehose to use for converting the input data from JSON. Firehose then serializes the data to its final format using the [Serializer]. Firehose supports two types of deserializers: the [Apache Hive JSON SerDe](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON) and the [OpenX JSON SerDe](https://github.com/rcongiu/Hive-JSON-Serde).
    public struct Deserializer {
        /// The native Hive / HCatalog JsonSerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
        public var hiveJsonSerDe: FirehoseClientTypes.HiveJsonSerDe?
        /// The OpenX SerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
        public var openXJsonSerDe: FirehoseClientTypes.OpenXJsonSerDe?

        public init(
            hiveJsonSerDe: FirehoseClientTypes.HiveJsonSerDe? = nil,
            openXJsonSerDe: FirehoseClientTypes.OpenXJsonSerDe? = nil
        )
        {
            self.hiveJsonSerDe = hiveJsonSerDe
            self.openXJsonSerDe = openXJsonSerDe
        }
    }

}

extension FirehoseClientTypes {
    /// Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if Enabled is set to true.
    public struct InputFormatConfiguration {
        /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. If both are non-null, the server rejects the request.
        public var deserializer: FirehoseClientTypes.Deserializer?

        public init(
            deserializer: FirehoseClientTypes.Deserializer? = nil
        )
        {
            self.deserializer = deserializer
        }
    }

}

extension FirehoseClientTypes {

    public enum OrcCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case snappy
        case zlib
        case sdkUnknown(Swift.String)

        public static var allCases: [OrcCompression] {
            return [
                .none,
                .snappy,
                .zlib
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .snappy: return "SNAPPY"
            case .zlib: return "ZLIB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {

    public enum OrcFormatVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v011
        case v012
        case sdkUnknown(Swift.String)

        public static var allCases: [OrcFormatVersion] {
            return [
                .v011,
                .v012
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v011: return "V0_11"
            case .v012: return "V0_12"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/).
    public struct OrcSerDe {
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Firehose uses this value for padding calculations.
        public var blockSizeBytes: Swift.Int?
        /// The column names for which you want Firehose to create bloom filters. The default is null.
        public var bloomFilterColumns: [Swift.String]?
        /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
        public var bloomFilterFalsePositiveProbability: Swift.Double?
        /// The compression code to use over data blocks. The default is SNAPPY.
        public var compression: FirehoseClientTypes.OrcCompression?
        /// Represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
        public var dictionaryKeyThreshold: Swift.Double?
        /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
        public var enablePadding: Swift.Bool?
        /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
        public var formatVersion: FirehoseClientTypes.OrcFormatVersion?
        /// A number between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Firehose ignores this parameter when [OrcSerDe$EnablePadding] is false.
        public var paddingTolerance: Swift.Double?
        /// The number of rows between index entries. The default is 10,000 and the minimum is 1,000.
        public var rowIndexStride: Swift.Int?
        /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
        public var stripeSizeBytes: Swift.Int?

        public init(
            blockSizeBytes: Swift.Int? = nil,
            bloomFilterColumns: [Swift.String]? = nil,
            bloomFilterFalsePositiveProbability: Swift.Double? = nil,
            compression: FirehoseClientTypes.OrcCompression? = nil,
            dictionaryKeyThreshold: Swift.Double? = nil,
            enablePadding: Swift.Bool? = nil,
            formatVersion: FirehoseClientTypes.OrcFormatVersion? = nil,
            paddingTolerance: Swift.Double? = nil,
            rowIndexStride: Swift.Int? = nil,
            stripeSizeBytes: Swift.Int? = nil
        )
        {
            self.blockSizeBytes = blockSizeBytes
            self.bloomFilterColumns = bloomFilterColumns
            self.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability
            self.compression = compression
            self.dictionaryKeyThreshold = dictionaryKeyThreshold
            self.enablePadding = enablePadding
            self.formatVersion = formatVersion
            self.paddingTolerance = paddingTolerance
            self.rowIndexStride = rowIndexStride
            self.stripeSizeBytes = stripeSizeBytes
        }
    }

}

extension FirehoseClientTypes {

    public enum ParquetCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case snappy
        case uncompressed
        case sdkUnknown(Swift.String)

        public static var allCases: [ParquetCompression] {
            return [
                .gzip,
                .snappy,
                .uncompressed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .snappy: return "SNAPPY"
            case .uncompressed: return "UNCOMPRESSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {

    public enum ParquetWriterVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v1
        case v2
        case sdkUnknown(Swift.String)

        public static var allCases: [ParquetWriterVersion] {
            return [
                .v1,
                .v2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V1"
            case .v2: return "V2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/docs/).
    public struct ParquetSerDe {
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Firehose uses this value for padding calculations.
        public var blockSizeBytes: Swift.Int?
        /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
        public var compression: FirehoseClientTypes.ParquetCompression?
        /// Indicates whether to enable dictionary compression.
        public var enableDictionaryCompression: Swift.Bool?
        /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
        public var maxPaddingBytes: Swift.Int?
        /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
        public var pageSizeBytes: Swift.Int?
        /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
        public var writerVersion: FirehoseClientTypes.ParquetWriterVersion?

        public init(
            blockSizeBytes: Swift.Int? = nil,
            compression: FirehoseClientTypes.ParquetCompression? = nil,
            enableDictionaryCompression: Swift.Bool? = nil,
            maxPaddingBytes: Swift.Int? = nil,
            pageSizeBytes: Swift.Int? = nil,
            writerVersion: FirehoseClientTypes.ParquetWriterVersion? = nil
        )
        {
            self.blockSizeBytes = blockSizeBytes
            self.compression = compression
            self.enableDictionaryCompression = enableDictionaryCompression
            self.maxPaddingBytes = maxPaddingBytes
            self.pageSizeBytes = pageSizeBytes
            self.writerVersion = writerVersion
        }
    }

}

extension FirehoseClientTypes {
    /// The serializer that you want Firehose to use to convert data to the target format before writing it to Amazon S3. Firehose supports two types of serializers: the [ORC SerDe](https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html) and the [Parquet SerDe](https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
    public struct Serializer {
        /// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/).
        public var orcSerDe: FirehoseClientTypes.OrcSerDe?
        /// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/).
        public var parquetSerDe: FirehoseClientTypes.ParquetSerDe?

        public init(
            orcSerDe: FirehoseClientTypes.OrcSerDe? = nil,
            parquetSerDe: FirehoseClientTypes.ParquetSerDe? = nil
        )
        {
            self.orcSerDe = orcSerDe
            self.parquetSerDe = parquetSerDe
        }
    }

}

extension FirehoseClientTypes {
    /// Specifies the serializer that you want Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
    public struct OutputFormatConfiguration {
        /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.
        public var serializer: FirehoseClientTypes.Serializer?

        public init(
            serializer: FirehoseClientTypes.Serializer? = nil
        )
        {
            self.serializer = serializer
        }
    }

}

extension FirehoseClientTypes {
    /// Specifies the schema to which you want Firehose to configure your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
    public struct SchemaConfiguration {
        /// The ID of the Amazon Web Services Glue Data Catalog. If you don't supply this, the Amazon Web Services account ID is used by default.
        public var catalogId: Swift.String?
        /// Specifies the name of the Amazon Web Services Glue database that contains the schema for the output data. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the DatabaseName property is required and its value must be specified.
        public var databaseName: Swift.String?
        /// If you don't specify an Amazon Web Services Region, the default is the current Region.
        public var region: Swift.String?
        /// The role that Firehose can use to access Amazon Web Services Glue. This role must be in the same account you use for Firehose. Cross-account roles aren't allowed. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the RoleARN property is required and its value must be specified.
        public var roleARN: Swift.String?
        /// Specifies the Amazon Web Services Glue table that contains the column information that constitutes your data schema. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the TableName property is required and its value must be specified.
        public var tableName: Swift.String?
        /// Specifies the table version for the output data schema. If you don't specify this version ID, or if you set it to LATEST, Firehose uses the most recent version. This means that any updates to the table are automatically picked up.
        public var versionId: Swift.String?

        public init(
            catalogId: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            region: Swift.String? = nil,
            roleARN: Swift.String? = nil,
            tableName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.databaseName = databaseName
            self.region = region
            self.roleARN = roleARN
            self.tableName = tableName
            self.versionId = versionId
        }
    }

}

extension FirehoseClientTypes {
    /// Specifies that you want Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see [Firehose Record Format Conversion](https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
    public struct DataFormatConversionConfiguration {
        /// Defaults to true. Set it to false if you want to disable format conversion while preserving the configuration details.
        public var enabled: Swift.Bool?
        /// Specifies the deserializer that you want Firehose to use to convert the format of your data from JSON. This parameter is required if Enabled is set to true.
        public var inputFormatConfiguration: FirehoseClientTypes.InputFormatConfiguration?
        /// Specifies the serializer that you want Firehose to use to convert the format of your data to the Parquet or ORC format. This parameter is required if Enabled is set to true.
        public var outputFormatConfiguration: FirehoseClientTypes.OutputFormatConfiguration?
        /// Specifies the Amazon Web Services Glue Data Catalog table that contains the column information. This parameter is required if Enabled is set to true.
        public var schemaConfiguration: FirehoseClientTypes.SchemaConfiguration?

        public init(
            enabled: Swift.Bool? = nil,
            inputFormatConfiguration: FirehoseClientTypes.InputFormatConfiguration? = nil,
            outputFormatConfiguration: FirehoseClientTypes.OutputFormatConfiguration? = nil,
            schemaConfiguration: FirehoseClientTypes.SchemaConfiguration? = nil
        )
        {
            self.enabled = enabled
            self.inputFormatConfiguration = inputFormatConfiguration
            self.outputFormatConfiguration = outputFormatConfiguration
            self.schemaConfiguration = schemaConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.
    public struct RetryOptions {
        /// The period of time during which Firehose retries to deliver data to the specified Amazon S3 prefix.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
    public struct DynamicPartitioningConfiguration {
        /// Specifies that the dynamic partitioning is enabled for this Firehose delivery stream.
        public var enabled: Swift.Bool?
        /// The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.
        public var retryOptions: FirehoseClientTypes.RetryOptions?

        public init(
            enabled: Swift.Bool? = nil,
            retryOptions: FirehoseClientTypes.RetryOptions? = nil
        )
        {
            self.enabled = enabled
            self.retryOptions = retryOptions
        }
    }

}

extension FirehoseClientTypes {

    public enum S3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [S3BackupMode] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon S3.
    public struct ExtendedS3DestinationConfiguration {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The time zone you prefer. UTC is the default.
        public var customTimeZone: Swift.String?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// Specify a file extension. It will override the default file extension
        public var fileExtension: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            customTimeZone: Swift.String? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            fileExtension: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.customTimeZone = customTimeZone
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.fileExtension = fileExtension
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.s3BackupMode = s3BackupMode
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the buffering options that can be applied before data is delivered to the HTTP endpoint destination. Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
    public struct HttpEndpointBufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the configuration of the HTTP endpoint to which Kinesis Firehose delivers data.
    public struct HttpEndpointConfiguration {
        /// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
        public var accessKey: Swift.String?
        /// The name of the HTTP endpoint selected as the destination.
        public var name: Swift.String?
        /// The URL of the HTTP endpoint selected as the destination. If you choose an HTTP endpoint as your destination, review and follow the instructions in the [Appendix - HTTP Endpoint Delivery Request and Response Specifications](https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html).
        /// This member is required.
        public var url: Swift.String?

        public init(
            accessKey: Swift.String? = nil,
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.accessKey = accessKey
            self.name = name
            self.url = url
        }
    }

}

extension FirehoseClientTypes.HttpEndpointConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointConfiguration(name: \(Swift.String(describing: name)), accessKey: \"CONTENT_REDACTED\", url: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the metadata that's delivered to the specified HTTP endpoint destination.
    public struct HttpEndpointCommonAttribute {
        /// The name of the HTTP endpoint common attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The value of the HTTP endpoint common attribute.
        /// This member is required.
        public var attributeValue: Swift.String?

        public init(
            attributeName: Swift.String? = nil,
            attributeValue: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
        }
    }

}

extension FirehoseClientTypes.HttpEndpointCommonAttribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointCommonAttribute(attributeName: \"CONTENT_REDACTED\", attributeValue: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// The configuration of the HTTP endpoint request.
    public struct HttpEndpointRequestConfiguration {
        /// Describes the metadata sent to the HTTP endpoint destination.
        public var commonAttributes: [FirehoseClientTypes.HttpEndpointCommonAttribute]?
        /// Firehose uses the content encoding to compress the body of a request before sending the request to the destination. For more information, see [Content-Encoding](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) in MDN Web Docs, the official Mozilla documentation.
        public var contentEncoding: FirehoseClientTypes.ContentEncoding?

        public init(
            commonAttributes: [FirehoseClientTypes.HttpEndpointCommonAttribute]? = nil,
            contentEncoding: FirehoseClientTypes.ContentEncoding? = nil
        )
        {
            self.commonAttributes = commonAttributes
            self.contentEncoding = contentEncoding
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the retry behavior in case Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
    public struct HttpEndpointRetryOptions {
        /// The total amount of time that Firehose spends on retries. This duration starts after the initial attempt to send data to the custom destination via HTTPS endpoint fails. It doesn't include the periods during which Firehose waits for acknowledgment from the specified destination after each attempt.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum HttpEndpointS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alldata
        case faileddataonly
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpEndpointS3BackupMode] {
            return [
                .alldata,
                .faileddataonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alldata: return "AllData"
            case .faileddataonly: return "FailedDataOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// The structure that defines how Firehose accesses the secret.
    public struct SecretsManagerConfiguration {
        /// Specifies whether you want to use the the secrets manager feature. When set as True the secrets manager configuration overwrites the existing secrets in the destination configuration. When it's set to False Firehose falls back to the credentials in the destination configuration.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies the role that Firehose assumes when calling the Secrets Manager API operation. When you provide the role, it overrides any destination specific role defined in the destination configuration. If you do not provide the then we use the destination specific role. This parameter is required for Splunk.
        public var roleARN: Swift.String?
        /// The ARN of the secret that stores your credentials. It must be in the same region as the Firehose stream and the role. The secret ARN can reside in a different account than the delivery stream and role as Firehose supports cross-account secret access. This parameter is required when Enabled is set to True.
        public var secretARN: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            roleARN: Swift.String? = nil,
            secretARN: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.roleARN = roleARN
            self.secretARN = secretARN
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the configuration of the HTTP endpoint destination.
    public struct HttpEndpointDestinationConfiguration {
        /// The buffering options that can be used before data is delivered to the specified destination. Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if you specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The configuration of the HTTP endpoint selected as the destination.
        /// This member is required.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of the request sent to the HTTP endpoint that is specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The configuration that defines how you access secrets for HTTP Endpoint destination.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream.
    public struct KinesisStreamSourceConfiguration {
        /// The ARN of the source Kinesis data stream. For more information, see [Amazon Kinesis Data Streams ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
        /// This member is required.
        public var kinesisStreamARN: Swift.String?
        /// The ARN of the role that provides access to the source Kinesis data stream. For more information, see [Amazon Web Services Identity and Access Management (IAM) ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam).
        /// This member is required.
        public var roleARN: Swift.String?

        public init(
            kinesisStreamARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes {
    /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream.
    public struct MSKSourceConfiguration {
        /// The authentication configuration of the Amazon MSK cluster.
        /// This member is required.
        public var authenticationConfiguration: FirehoseClientTypes.AuthenticationConfiguration?
        /// The ARN of the Amazon MSK cluster.
        /// This member is required.
        public var mskClusterARN: Swift.String?
        /// The topic name within the Amazon MSK cluster.
        /// This member is required.
        public var topicName: Swift.String?

        public init(
            authenticationConfiguration: FirehoseClientTypes.AuthenticationConfiguration? = nil,
            mskClusterARN: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.authenticationConfiguration = authenticationConfiguration
            self.mskClusterARN = mskClusterARN
            self.topicName = topicName
        }
    }

}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Firehose is unable to deliver documents to Amazon Redshift.
    public struct RedshiftRetryOptions {
        /// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum RedshiftS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftS3BackupMode] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon Redshift.
    public struct RedshiftDestinationConfiguration {
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        /// This member is required.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        /// This member is required.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The user password.
        public var password: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for [CreateDeliveryStream]. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationConfiguration.S3Configuration because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The configuration that defines how you access secrets for Amazon Redshift.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// The name of the user.
        public var username: Swift.String?

        public init(
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            password: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationConfiguration(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupConfiguration: \(Swift.String(describing: s3BackupConfiguration)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3Configuration: \(Swift.String(describing: s3Configuration)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {

    public enum SnowflakeDataLoadingOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jsonMapping
        case variantContentAndMetadataMapping
        case variantContentMapping
        case sdkUnknown(Swift.String)

        public static var allCases: [SnowflakeDataLoadingOption] {
            return [
                .jsonMapping,
                .variantContentAndMetadataMapping,
                .variantContentMapping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jsonMapping: return "JSON_MAPPING"
            case .variantContentAndMetadataMapping: return "VARIANT_CONTENT_AND_METADATA_MAPPING"
            case .variantContentMapping: return "VARIANT_CONTENT_MAPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Specify how long Firehose retries sending data to the New Relic HTTP endpoint. After sending data, Firehose first waits for an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment doesnâ€™t arrive within the acknowledgment timeout period, Firehose starts the retry duration counter. It keeps retrying until the retry duration expires. After that, Firehose considers it a data delivery failure and backs up the data to your Amazon S3 bucket. Every time that Firehose sends data to the HTTP endpoint (either the initial attempt or a retry), it restarts the acknowledgement timeout counter and waits for an acknowledgement from the HTTP endpoint. Even if the retry duration expires, Firehose still waits for the acknowledgment until it receives it or the acknowledgement timeout period is reached. If the acknowledgment times out, Firehose determines whether there's time left in the retry counter. If there is time left, it retries again and repeats the logic until it receives an acknowledgment or determines that the retry time has expired. If you don't want Firehose to retry sending data, set this value to 0.
    public struct SnowflakeRetryOptions {
        /// the time period where Firehose will retry sending data to the chosen HTTP endpoint.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum SnowflakeS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alldata
        case faileddataonly
        case sdkUnknown(Swift.String)

        public static var allCases: [SnowflakeS3BackupMode] {
            return [
                .alldata,
                .faileddataonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alldata: return "AllData"
            case .faileddataonly: return "FailedDataOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Optionally configure a Snowflake role. Otherwise the default user role will be used.
    public struct SnowflakeRoleConfiguration {
        /// Enable Snowflake role
        public var enabled: Swift.Bool?
        /// The Snowflake role you wish to configure
        public var snowflakeRole: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            snowflakeRole: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.snowflakeRole = snowflakeRole
        }
    }

}

extension FirehoseClientTypes.SnowflakeRoleConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnowflakeRoleConfiguration(enabled: \(Swift.String(describing: enabled)), snowflakeRole: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Configure a Snowflake VPC
    public struct SnowflakeVpcConfiguration {
        /// The VPCE ID for Firehose to privately connect with Snowflake. The ID format is com.amazonaws.vpce.[region].vpce-svc-<[id]>. For more information, see [Amazon PrivateLink & Snowflake](https://docs.snowflake.com/en/user-guide/admin-security-privatelink)
        /// This member is required.
        public var privateLinkVpceId: Swift.String?

        public init(
            privateLinkVpceId: Swift.String? = nil
        )
        {
            self.privateLinkVpceId = privateLinkVpceId
        }
    }

}

extension FirehoseClientTypes.SnowflakeVpcConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnowflakeVpcConfiguration(privateLinkVpceId: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Configure Snowflake destination
    public struct SnowflakeDestinationConfiguration {
        /// URL for accessing your Snowflake account. This URL must include your [account identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier). Note that the protocol (https://) and port number are optional.
        /// This member is required.
        public var accountUrl: Swift.String?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The name of the record content column
        public var contentColumnName: Swift.String?
        /// Choose to load JSON keys mapped to table column names or choose to split the JSON payload where content is mapped to a record content column and source metadata is mapped to a record metadata column.
        public var dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption?
        /// All data in Snowflake is maintained in databases.
        /// This member is required.
        public var database: Swift.String?
        /// Passphrase to decrypt the private key when the key is encrypted. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation).
        public var keyPassphrase: Swift.String?
        /// The name of the record metadata column
        public var metaDataColumnName: Swift.String?
        /// The private key used to encrypt your Snowflake client. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation).
        public var privateKey: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The time period where Firehose will retry sending data to the chosen HTTP endpoint.
        public var retryOptions: FirehoseClientTypes.SnowflakeRetryOptions?
        /// The Amazon Resource Name (ARN) of the Snowflake role
        /// This member is required.
        public var roleARN: Swift.String?
        /// Choose an S3 backup mode
        public var s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// Each database consists of one or more schemas, which are logical groupings of database objects, such as tables and views
        /// This member is required.
        public var schema: Swift.String?
        /// The configuration that defines how you access secrets for Snowflake.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// Optionally configure a Snowflake role. Otherwise the default user role will be used.
        public var snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration?
        /// The VPCE ID for Firehose to privately connect with Snowflake. The ID format is com.amazonaws.vpce.[region].vpce-svc-<[id]>. For more information, see [Amazon PrivateLink & Snowflake](https://docs.snowflake.com/en/user-guide/admin-security-privatelink)
        public var snowflakeVpcConfiguration: FirehoseClientTypes.SnowflakeVpcConfiguration?
        /// All data in Snowflake is stored in database tables, logically structured as collections of columns and rows.
        /// This member is required.
        public var table: Swift.String?
        /// User login name for the Snowflake account.
        public var user: Swift.String?

        public init(
            accountUrl: Swift.String? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            contentColumnName: Swift.String? = nil,
            dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption? = nil,
            database: Swift.String? = nil,
            keyPassphrase: Swift.String? = nil,
            metaDataColumnName: Swift.String? = nil,
            privateKey: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SnowflakeRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            schema: Swift.String? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration? = nil,
            snowflakeVpcConfiguration: FirehoseClientTypes.SnowflakeVpcConfiguration? = nil,
            table: Swift.String? = nil,
            user: Swift.String? = nil
        )
        {
            self.accountUrl = accountUrl
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.contentColumnName = contentColumnName
            self.dataLoadingOption = dataLoadingOption
            self.database = database
            self.keyPassphrase = keyPassphrase
            self.metaDataColumnName = metaDataColumnName
            self.privateKey = privateKey
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.schema = schema
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.snowflakeRoleConfiguration = snowflakeRoleConfiguration
            self.snowflakeVpcConfiguration = snowflakeVpcConfiguration
            self.table = table
            self.user = user
        }
    }

}

extension FirehoseClientTypes.SnowflakeDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnowflakeDestinationConfiguration(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), dataLoadingOption: \(Swift.String(describing: dataLoadingOption)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3Configuration: \(Swift.String(describing: s3Configuration)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), snowflakeRoleConfiguration: \(Swift.String(describing: snowflakeRoleConfiguration)), snowflakeVpcConfiguration: \(Swift.String(describing: snowflakeVpcConfiguration)), accountUrl: \"CONTENT_REDACTED\", contentColumnName: \"CONTENT_REDACTED\", database: \"CONTENT_REDACTED\", keyPassphrase: \"CONTENT_REDACTED\", metaDataColumnName: \"CONTENT_REDACTED\", privateKey: \"CONTENT_REDACTED\", schema: \"CONTENT_REDACTED\", table: \"CONTENT_REDACTED\", user: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// The buffering options. If no value is specified, the default values for Splunk are used.
    public struct SplunkBufferingHints {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 60 (1 minute).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
        public var sizeInMBs: Swift.Int?

        public init(
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes {

    public enum HECEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case event
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [HECEndpointType] {
            return [
                .event,
                .raw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .event: return "Event"
            case .raw: return "Raw"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
    public struct SplunkRetryOptions {
        /// The total amount of time that Firehose spends on retries. This duration starts after the initial attempt to send data to Splunk fails. It doesn't include the periods during which Firehose waits for acknowledgment from Splunk after each attempt.
        public var durationInSeconds: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {

    public enum SplunkS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allevents
        case failedeventsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [SplunkS3BackupMode] {
            return [
                .allevents,
                .failedeventsonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allevents: return "AllEvents"
            case .failedeventsonly: return "FailedEventsOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Splunk.
    public struct SplunkDestinationConfiguration {
        /// The buffering options. If no value is specified, the default values for Splunk are used.
        public var bufferingHints: FirehoseClientTypes.SplunkBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.
        /// This member is required.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        /// This member is required.
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedEventsOnly, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllEvents, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is FailedEventsOnly. You can update this backup mode from FailedEventsOnly to AllEvents. You can't update it from AllEvents to FailedEventsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// The configuration for the backup Amazon S3 location.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The configuration that defines how you access secrets for Splunk.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.SplunkBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// Metadata that you can assign to a delivery stream, consisting of a key-value pair.
    public struct Tag {
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        /// This member is required.
        public var key: Swift.String?
        /// An optional string, which you can use to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateDeliveryStreamInput {
    /// The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.
    public var amazonOpenSearchServerlessDestinationConfiguration: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration?
    /// The destination in Amazon OpenSearch Service. You can specify only one destination.
    public var amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration?
    /// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
    public var deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    /// The name of the delivery stream. This name must be unique per Amazon Web Services account in the same Amazon Web Services Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The delivery stream type. This parameter can be one of the following values:
    ///
    /// * DirectPut: Provider applications access the delivery stream directly.
    ///
    /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
    public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    /// The destination in Amazon ES. You can specify only one destination.
    public var elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration?
    /// The destination in Amazon S3. You can specify only one destination.
    public var extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration?
    /// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.
    public var httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration?
    /// When a Kinesis data stream is used as the source for the delivery stream, a [KinesisStreamSourceConfiguration] containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.
    public var kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration?
    /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream.
    public var mskSourceConfiguration: FirehoseClientTypes.MSKSourceConfiguration?
    /// The destination in Amazon Redshift. You can specify only one destination.
    public var redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration?
    /// [Deprecated] The destination in Amazon S3. You can specify only one destination.
    @available(*, deprecated)
    public var s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
    /// Configure Snowflake destination
    public var snowflakeDestinationConfiguration: FirehoseClientTypes.SnowflakeDestinationConfiguration?
    /// The destination in Splunk. You can specify only one destination.
    public var splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration?
    /// A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to Amazon Web Services resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide. You can specify up to 50 tags when creating a delivery stream. If you specify tags in the CreateDeliveryStream action, Amazon Data Firehose performs an additional authorization on the firehose:TagDeliveryStream action to verify if users have permissions to create tags. If you do not provide this permission, requests to create new Firehose delivery streams with IAM resource tags will fail with an AccessDeniedException such as following. AccessDeniedException User: arn:aws:sts::x:assumed-role/x/x is not authorized to perform: firehose:TagDeliveryStream on resource: arn:aws:firehose:us-east-1:x:deliverystream/x with an explicit deny in an identity-based policy. For an example IAM policy, see [Tag example.](https://docs.aws.amazon.com/firehose/latest/APIReference/API_CreateDeliveryStream.html#API_CreateDeliveryStream_Examples)
    public var tags: [FirehoseClientTypes.Tag]?

    public init(
        amazonOpenSearchServerlessDestinationConfiguration: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration? = nil,
        amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration? = nil,
        deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput? = nil,
        deliveryStreamName: Swift.String? = nil,
        deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
        elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration? = nil,
        extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration? = nil,
        httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration? = nil,
        kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration? = nil,
        mskSourceConfiguration: FirehoseClientTypes.MSKSourceConfiguration? = nil,
        redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration? = nil,
        s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
        snowflakeDestinationConfiguration: FirehoseClientTypes.SnowflakeDestinationConfiguration? = nil,
        splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.amazonOpenSearchServerlessDestinationConfiguration = amazonOpenSearchServerlessDestinationConfiguration
        self.amazonopensearchserviceDestinationConfiguration = amazonopensearchserviceDestinationConfiguration
        self.deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput
        self.deliveryStreamName = deliveryStreamName
        self.deliveryStreamType = deliveryStreamType
        self.elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration
        self.extendedS3DestinationConfiguration = extendedS3DestinationConfiguration
        self.httpEndpointDestinationConfiguration = httpEndpointDestinationConfiguration
        self.kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration
        self.mskSourceConfiguration = mskSourceConfiguration
        self.redshiftDestinationConfiguration = redshiftDestinationConfiguration
        self.s3DestinationConfiguration = s3DestinationConfiguration
        self.snowflakeDestinationConfiguration = snowflakeDestinationConfiguration
        self.splunkDestinationConfiguration = splunkDestinationConfiguration
        self.tags = tags
    }
}

public struct CreateDeliveryStreamOutput {
    /// The ARN of the delivery stream.
    public var deliveryStreamARN: Swift.String?

    public init(
        deliveryStreamARN: Swift.String? = nil
    )
    {
        self.deliveryStreamARN = deliveryStreamARN
    }
}

/// The specified resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDeliveryStreamInput {
    /// Set this to true if you want to delete the delivery stream even if Firehose is unable to retire the grant for the CMK. Firehose might be unable to retire the grant due to a customer error, such as when the CMK or the grant are in an invalid state. If you force deletion, you can then use the [RevokeGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html) operation to revoke the grant you gave to Firehose. If a failure to retire the grant happens due to an Amazon Web Services KMS issue, Firehose keeps retrying the delete operation. The default value is false.
    public var allowForceDelete: Swift.Bool?
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init(
        allowForceDelete: Swift.Bool? = nil,
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.allowForceDelete = allowForceDelete
        self.deliveryStreamName = deliveryStreamName
    }
}

public struct DeleteDeliveryStreamOutput {

    public init() { }
}

extension FirehoseClientTypes {

    public enum DeliveryStreamFailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createEniFailed
        case createKmsGrantFailed
        case deleteEniFailed
        case disabledKmsKey
        case eniAccessDenied
        case invalidKmsKey
        case kmsAccessDenied
        case kmsKeyNotFound
        case kmsOptInRequired
        case retireKmsGrantFailed
        case securityGroupAccessDenied
        case securityGroupNotFound
        case subnetAccessDenied
        case subnetNotFound
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamFailureType] {
            return [
                .createEniFailed,
                .createKmsGrantFailed,
                .deleteEniFailed,
                .disabledKmsKey,
                .eniAccessDenied,
                .invalidKmsKey,
                .kmsAccessDenied,
                .kmsKeyNotFound,
                .kmsOptInRequired,
                .retireKmsGrantFailed,
                .securityGroupAccessDenied,
                .securityGroupNotFound,
                .subnetAccessDenied,
                .subnetNotFound,
                .unknownError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createEniFailed: return "CREATE_ENI_FAILED"
            case .createKmsGrantFailed: return "CREATE_KMS_GRANT_FAILED"
            case .deleteEniFailed: return "DELETE_ENI_FAILED"
            case .disabledKmsKey: return "DISABLED_KMS_KEY"
            case .eniAccessDenied: return "ENI_ACCESS_DENIED"
            case .invalidKmsKey: return "INVALID_KMS_KEY"
            case .kmsAccessDenied: return "KMS_ACCESS_DENIED"
            case .kmsKeyNotFound: return "KMS_KEY_NOT_FOUND"
            case .kmsOptInRequired: return "KMS_OPT_IN_REQUIRED"
            case .retireKmsGrantFailed: return "RETIRE_KMS_GRANT_FAILED"
            case .securityGroupAccessDenied: return "SECURITY_GROUP_ACCESS_DENIED"
            case .securityGroupNotFound: return "SECURITY_GROUP_NOT_FOUND"
            case .subnetAccessDenied: return "SUBNET_ACCESS_DENIED"
            case .subnetNotFound: return "SUBNET_NOT_FOUND"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
    public struct FailureDescription {
        /// A message providing details about the error that caused the failure.
        /// This member is required.
        public var details: Swift.String?
        /// The type of error that caused the failure.
        /// This member is required.
        public var type: FirehoseClientTypes.DeliveryStreamFailureType?

        public init(
            details: Swift.String? = nil,
            type: FirehoseClientTypes.DeliveryStreamFailureType? = nil
        )
        {
            self.details = details
            self.type = type
        }
    }

}

extension FirehoseClientTypes {

    public enum DeliveryStreamEncryptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case disablingFailed
        case enabled
        case enabling
        case enablingFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamEncryptionStatus] {
            return [
                .disabled,
                .disabling,
                .disablingFailed,
                .enabled,
                .enabling,
                .enablingFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .disablingFailed: return "DISABLING_FAILED"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .enablingFailed: return "ENABLING_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// Contains information about the server-side encryption (SSE) status for the delivery stream, the type customer master key (CMK) in use, if any, and the ARN of the CMK. You can get DeliveryStreamEncryptionConfiguration by invoking the [DescribeDeliveryStream] operation.
    public struct DeliveryStreamEncryptionConfiguration {
        /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
        public var failureDescription: FirehoseClientTypes.FailureDescription?
        /// If KeyType is CUSTOMER_MANAGED_CMK, this field contains the ARN of the customer managed CMK. If KeyType is Amazon Web Services_OWNED_CMK, DeliveryStreamEncryptionConfiguration doesn't contain a value for KeyARN.
        public var keyARN: Swift.String?
        /// Indicates the type of customer master key (CMK) that is used for encryption. The default setting is Amazon Web Services_OWNED_CMK. For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys).
        public var keyType: FirehoseClientTypes.KeyType?
        /// This is the server-side encryption (SSE) status for the delivery stream. For a full description of the different values of this status, see [StartDeliveryStreamEncryption] and [StopDeliveryStreamEncryption]. If this status is ENABLING_FAILED or DISABLING_FAILED, it is the status of the most recent attempt to enable or disable SSE, respectively.
        public var status: FirehoseClientTypes.DeliveryStreamEncryptionStatus?

        public init(
            failureDescription: FirehoseClientTypes.FailureDescription? = nil,
            keyARN: Swift.String? = nil,
            keyType: FirehoseClientTypes.KeyType? = nil,
            status: FirehoseClientTypes.DeliveryStreamEncryptionStatus? = nil
        )
        {
            self.failureDescription = failureDescription
            self.keyARN = keyARN
            self.keyType = keyType
            self.status = status
        }
    }

}

extension FirehoseClientTypes {

    public enum DeliveryStreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case creatingFailed
        case deleting
        case deletingFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamStatus] {
            return [
                .active,
                .creating,
                .creatingFailed,
                .deleting,
                .deletingFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .creatingFailed: return "CREATING_FAILED"
            case .deleting: return "DELETING"
            case .deletingFailed: return "DELETING_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FirehoseClientTypes {
    /// The destination description in Amazon ES.
    public struct ElasticsearchDestinationDescription {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The Amazon CloudWatch logging options.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Firehose uses either this ClusterEndpoint or the DomainARN field to send data to Amazon ES.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon ES domain. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Firehose uses either ClusterEndpoint or DomainARN to send data to Amazon ES.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon ES retry options.
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode?
        /// The Amazon S3 destination.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Elasticsearch type name. This applies to Elasticsearch 6.x and lower versions. For Elasticsearch 7.x and OpenSearch Service 1.x, there's no value for TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon OpenSearch or the Amazon OpenSearch Serverless destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init(
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            typeName: Swift.String? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.typeName = typeName
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon S3.
    public struct ExtendedS3DestinationDescription {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option.
        /// This member is required.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        /// This member is required.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The time zone you prefer. UTC is the default.
        public var customTimeZone: Swift.String?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        /// This member is required.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// Specify a file extension. It will override the default file extension
        public var fileExtension: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            customTimeZone: Swift.String? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            fileExtension: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.customTimeZone = customTimeZone
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.fileExtension = fileExtension
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupDescription = s3BackupDescription
            self.s3BackupMode = s3BackupMode
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the HTTP endpoint selected as the destination.
    public struct HttpEndpointDescription {
        /// The name of the HTTP endpoint selected as the destination.
        public var name: Swift.String?
        /// The URL of the HTTP endpoint selected as the destination.
        public var url: Swift.String?

        public init(
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.name = name
            self.url = url
        }
    }

}

extension FirehoseClientTypes.HttpEndpointDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointDescription(name: \(Swift.String(describing: name)), url: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the HTTP endpoint destination.
    public struct HttpEndpointDestinationDescription {
        /// Describes buffering options that can be applied to the data before it is delivered to the HTTPS endpoint destination. Firehose teats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The configuration of the specified HTTP endpoint destination.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointDescription?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of request sent to the HTTP endpoint specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Kinesis Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The configuration that defines how you access secrets for HTTP Endpoint destination.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointDescription? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon Redshift.
    public struct RedshiftDestinationDescription {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        /// This member is required.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        /// This member is required.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The Amazon S3 destination.
        /// This member is required.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The configuration that defines how you access secrets for Amazon Redshift.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// The name of the user.
        public var username: Swift.String?

        public init(
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupDescription = s3BackupDescription
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationDescription(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupDescription: \(Swift.String(describing: s3BackupDescription)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3DestinationDescription: \(Swift.String(describing: s3DestinationDescription)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Optional Snowflake destination description
    public struct SnowflakeDestinationDescription {
        /// URL for accessing your Snowflake account. This URL must include your [account identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier). Note that the protocol (https://) and port number are optional.
        public var accountUrl: Swift.String?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The name of the record content column
        public var contentColumnName: Swift.String?
        /// Choose to load JSON keys mapped to table column names or choose to split the JSON payload where content is mapped to a record content column and source metadata is mapped to a record metadata column.
        public var dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption?
        /// All data in Snowflake is maintained in databases.
        public var database: Swift.String?
        /// The name of the record metadata column
        public var metaDataColumnName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The time period where Firehose will retry sending data to the chosen HTTP endpoint.
        public var retryOptions: FirehoseClientTypes.SnowflakeRetryOptions?
        /// The Amazon Resource Name (ARN) of the Snowflake role
        public var roleARN: Swift.String?
        /// Choose an S3 backup mode
        public var s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// Each database consists of one or more schemas, which are logical groupings of database objects, such as tables and views
        public var schema: Swift.String?
        /// The configuration that defines how you access secrets for Snowflake.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// Optionally configure a Snowflake role. Otherwise the default user role will be used.
        public var snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration?
        /// The VPCE ID for Firehose to privately connect with Snowflake. The ID format is com.amazonaws.vpce.[region].vpce-svc-<[id]>. For more information, see [Amazon PrivateLink & Snowflake](https://docs.snowflake.com/en/user-guide/admin-security-privatelink)
        public var snowflakeVpcConfiguration: FirehoseClientTypes.SnowflakeVpcConfiguration?
        /// All data in Snowflake is stored in database tables, logically structured as collections of columns and rows.
        public var table: Swift.String?
        /// User login name for the Snowflake account.
        public var user: Swift.String?

        public init(
            accountUrl: Swift.String? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            contentColumnName: Swift.String? = nil,
            dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption? = nil,
            database: Swift.String? = nil,
            metaDataColumnName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SnowflakeRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            schema: Swift.String? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration? = nil,
            snowflakeVpcConfiguration: FirehoseClientTypes.SnowflakeVpcConfiguration? = nil,
            table: Swift.String? = nil,
            user: Swift.String? = nil
        )
        {
            self.accountUrl = accountUrl
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.contentColumnName = contentColumnName
            self.dataLoadingOption = dataLoadingOption
            self.database = database
            self.metaDataColumnName = metaDataColumnName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.schema = schema
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.snowflakeRoleConfiguration = snowflakeRoleConfiguration
            self.snowflakeVpcConfiguration = snowflakeVpcConfiguration
            self.table = table
            self.user = user
        }
    }

}

extension FirehoseClientTypes.SnowflakeDestinationDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnowflakeDestinationDescription(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), dataLoadingOption: \(Swift.String(describing: dataLoadingOption)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3DestinationDescription: \(Swift.String(describing: s3DestinationDescription)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), snowflakeRoleConfiguration: \(Swift.String(describing: snowflakeRoleConfiguration)), snowflakeVpcConfiguration: \(Swift.String(describing: snowflakeVpcConfiguration)), accountUrl: \"CONTENT_REDACTED\", contentColumnName: \"CONTENT_REDACTED\", database: \"CONTENT_REDACTED\", metaDataColumnName: \"CONTENT_REDACTED\", schema: \"CONTENT_REDACTED\", table: \"CONTENT_REDACTED\", user: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes a destination in Splunk.
    public struct SplunkDestinationDescription {
        /// The buffering options. If no value is specified, the default values for Splunk are used.
        public var bufferingHints: FirehoseClientTypes.SplunkBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// A GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// The Amazon S3 destination.>
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The configuration that defines how you access secrets for Splunk.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.SplunkBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// Describes the destination for a delivery stream.
    public struct DestinationDescription {
        /// The destination in the Serverless offering for Amazon OpenSearch Service.
        public var amazonOpenSearchServerlessDestinationDescription: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription?
        /// The destination in Amazon OpenSearch Service.
        public var amazonopensearchserviceDestinationDescription: FirehoseClientTypes.AmazonopensearchserviceDestinationDescription?
        /// The ID of the destination.
        /// This member is required.
        public var destinationId: Swift.String?
        /// The destination in Amazon ES.
        public var elasticsearchDestinationDescription: FirehoseClientTypes.ElasticsearchDestinationDescription?
        /// The destination in Amazon S3.
        public var extendedS3DestinationDescription: FirehoseClientTypes.ExtendedS3DestinationDescription?
        /// Describes the specified HTTP endpoint destination.
        public var httpEndpointDestinationDescription: FirehoseClientTypes.HttpEndpointDestinationDescription?
        /// The destination in Amazon Redshift.
        public var redshiftDestinationDescription: FirehoseClientTypes.RedshiftDestinationDescription?
        /// [Deprecated] The destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// Optional description for the destination
        public var snowflakeDestinationDescription: FirehoseClientTypes.SnowflakeDestinationDescription?
        /// The destination in Splunk.
        public var splunkDestinationDescription: FirehoseClientTypes.SplunkDestinationDescription?

        public init(
            amazonOpenSearchServerlessDestinationDescription: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription? = nil,
            amazonopensearchserviceDestinationDescription: FirehoseClientTypes.AmazonopensearchserviceDestinationDescription? = nil,
            destinationId: Swift.String? = nil,
            elasticsearchDestinationDescription: FirehoseClientTypes.ElasticsearchDestinationDescription? = nil,
            extendedS3DestinationDescription: FirehoseClientTypes.ExtendedS3DestinationDescription? = nil,
            httpEndpointDestinationDescription: FirehoseClientTypes.HttpEndpointDestinationDescription? = nil,
            redshiftDestinationDescription: FirehoseClientTypes.RedshiftDestinationDescription? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            snowflakeDestinationDescription: FirehoseClientTypes.SnowflakeDestinationDescription? = nil,
            splunkDestinationDescription: FirehoseClientTypes.SplunkDestinationDescription? = nil
        )
        {
            self.amazonOpenSearchServerlessDestinationDescription = amazonOpenSearchServerlessDestinationDescription
            self.amazonopensearchserviceDestinationDescription = amazonopensearchserviceDestinationDescription
            self.destinationId = destinationId
            self.elasticsearchDestinationDescription = elasticsearchDestinationDescription
            self.extendedS3DestinationDescription = extendedS3DestinationDescription
            self.httpEndpointDestinationDescription = httpEndpointDestinationDescription
            self.redshiftDestinationDescription = redshiftDestinationDescription
            self.s3DestinationDescription = s3DestinationDescription
            self.snowflakeDestinationDescription = snowflakeDestinationDescription
            self.splunkDestinationDescription = splunkDestinationDescription
        }
    }

}

extension FirehoseClientTypes {
    /// Details about a Kinesis data stream used as the source for a Firehose delivery stream.
    public struct KinesisStreamSourceDescription {
        /// Firehose starts retrieving records from the Kinesis data stream starting with this timestamp.
        public var deliveryStartTimestamp: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the source Kinesis data stream. For more information, see [Amazon Kinesis Data Streams ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
        public var kinesisStreamARN: Swift.String?
        /// The ARN of the role used by the source Kinesis data stream. For more information, see [Amazon Web Services Identity and Access Management (IAM) ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam).
        public var roleARN: Swift.String?

        public init(
            deliveryStartTimestamp: Foundation.Date? = nil,
            kinesisStreamARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.deliveryStartTimestamp = deliveryStartTimestamp
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes {
    /// Details about the Amazon MSK cluster used as the source for a Firehose delivery stream.
    public struct MSKSourceDescription {
        /// The authentication configuration of the Amazon MSK cluster.
        public var authenticationConfiguration: FirehoseClientTypes.AuthenticationConfiguration?
        /// Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.
        public var deliveryStartTimestamp: Foundation.Date?
        /// The ARN of the Amazon MSK cluster.
        public var mskClusterARN: Swift.String?
        /// The topic name within the Amazon MSK cluster.
        public var topicName: Swift.String?

        public init(
            authenticationConfiguration: FirehoseClientTypes.AuthenticationConfiguration? = nil,
            deliveryStartTimestamp: Foundation.Date? = nil,
            mskClusterARN: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.authenticationConfiguration = authenticationConfiguration
            self.deliveryStartTimestamp = deliveryStartTimestamp
            self.mskClusterARN = mskClusterARN
            self.topicName = topicName
        }
    }

}

extension FirehoseClientTypes {
    /// Details about a Kinesis data stream used as the source for a Firehose delivery stream.
    public struct SourceDescription {
        /// The [KinesisStreamSourceDescription] value for the source Kinesis data stream.
        public var kinesisStreamSourceDescription: FirehoseClientTypes.KinesisStreamSourceDescription?
        /// The configuration description for the Amazon MSK cluster to be used as the source for a delivery stream.
        public var mskSourceDescription: FirehoseClientTypes.MSKSourceDescription?

        public init(
            kinesisStreamSourceDescription: FirehoseClientTypes.KinesisStreamSourceDescription? = nil,
            mskSourceDescription: FirehoseClientTypes.MSKSourceDescription? = nil
        )
        {
            self.kinesisStreamSourceDescription = kinesisStreamSourceDescription
            self.mskSourceDescription = mskSourceDescription
        }
    }

}

extension FirehoseClientTypes {
    /// Contains information about a delivery stream.
    public struct DeliveryStreamDescription {
        /// The date and time that the delivery stream was created.
        public var createTimestamp: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the delivery stream. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var deliveryStreamARN: Swift.String?
        /// Indicates the server-side encryption (SSE) status for the delivery stream.
        public var deliveryStreamEncryptionConfiguration: FirehoseClientTypes.DeliveryStreamEncryptionConfiguration?
        /// The name of the delivery stream.
        /// This member is required.
        public var deliveryStreamName: Swift.String?
        /// The status of the delivery stream. If the status of a delivery stream is CREATING_FAILED, this status doesn't change, and you can't invoke CreateDeliveryStream again on it. However, you can invoke the [DeleteDeliveryStream] operation to delete it.
        /// This member is required.
        public var deliveryStreamStatus: FirehoseClientTypes.DeliveryStreamStatus?
        /// The delivery stream type. This can be one of the following values:
        ///
        /// * DirectPut: Provider applications access the delivery stream directly.
        ///
        /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
        /// This member is required.
        public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
        /// The destinations.
        /// This member is required.
        public var destinations: [FirehoseClientTypes.DestinationDescription]?
        /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
        public var failureDescription: FirehoseClientTypes.FailureDescription?
        /// Indicates whether there are more destinations available to list.
        /// This member is required.
        public var hasMoreDestinations: Swift.Bool?
        /// The date and time that the delivery stream was last updated.
        public var lastUpdateTimestamp: Foundation.Date?
        /// If the DeliveryStreamType parameter is KinesisStreamAsSource, a [SourceDescription] object describing the source Kinesis data stream.
        public var source: FirehoseClientTypes.SourceDescription?
        /// Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
        /// This member is required.
        public var versionId: Swift.String?

        public init(
            createTimestamp: Foundation.Date? = nil,
            deliveryStreamARN: Swift.String? = nil,
            deliveryStreamEncryptionConfiguration: FirehoseClientTypes.DeliveryStreamEncryptionConfiguration? = nil,
            deliveryStreamName: Swift.String? = nil,
            deliveryStreamStatus: FirehoseClientTypes.DeliveryStreamStatus? = nil,
            deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
            destinations: [FirehoseClientTypes.DestinationDescription]? = nil,
            failureDescription: FirehoseClientTypes.FailureDescription? = nil,
            hasMoreDestinations: Swift.Bool? = nil,
            lastUpdateTimestamp: Foundation.Date? = nil,
            source: FirehoseClientTypes.SourceDescription? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.createTimestamp = createTimestamp
            self.deliveryStreamARN = deliveryStreamARN
            self.deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfiguration
            self.deliveryStreamName = deliveryStreamName
            self.deliveryStreamStatus = deliveryStreamStatus
            self.deliveryStreamType = deliveryStreamType
            self.destinations = destinations
            self.failureDescription = failureDescription
            self.hasMoreDestinations = hasMoreDestinations
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.source = source
            self.versionId = versionId
        }
    }

}

public struct DescribeDeliveryStreamInput {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The ID of the destination to start returning the destination information. Firehose supports one destination per delivery stream.
    public var exclusiveStartDestinationId: Swift.String?
    /// The limit on the number of destinations to return. You can have one destination per delivery stream.
    public var limit: Swift.Int?

    public init(
        deliveryStreamName: Swift.String? = nil,
        exclusiveStartDestinationId: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.exclusiveStartDestinationId = exclusiveStartDestinationId
        self.limit = limit
    }
}

public struct DescribeDeliveryStreamOutput {
    /// Information about the delivery stream.
    /// This member is required.
    public var deliveryStreamDescription: FirehoseClientTypes.DeliveryStreamDescription?

    public init(
        deliveryStreamDescription: FirehoseClientTypes.DeliveryStreamDescription? = nil
    )
    {
        self.deliveryStreamDescription = deliveryStreamDescription
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon ES.
    public struct ElasticsearchDestinationUpdate {
        /// The buffering options. If no value is specified, ElasticsearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
        public var documentIdOptions: FirehoseClientTypes.DocumentIdOptions?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the IAM role specified in RoleARN. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Specify either ClusterEndpoint or DomainARN.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to IndexName to facilitate the expiration of old data. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation). Default value is OneDay.
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Grant Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) and [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// The Amazon S3 destination.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Firehose returns an error during runtime. If you upgrade Elasticsearch from 6.x to 7.x and donâ€™t update your delivery stream, Firehose still delivers data to Elasticsearch with the old index name and type name. If you want to update your delivery stream with a new index name, provide an empty string for TypeName.
        public var typeName: Swift.String?

        public init(
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            documentIdOptions: FirehoseClientTypes.DocumentIdOptions? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.documentIdOptions = documentIdOptions
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.typeName = typeName
        }
    }

}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon S3.
    public struct ExtendedS3DestinationUpdate {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var bucketARN: Swift.String?
        /// The buffering option.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The time zone you prefer. UTC is the default.
        public var customTimeZone: Swift.String?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// Specify a file extension. It will override the default file extension
        public var fileExtension: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// You can update a delivery stream to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?
        /// The Amazon S3 destination for backup.
        public var s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate?

        public init(
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            customTimeZone: Swift.String? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            fileExtension: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil,
            s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.customTimeZone = customTimeZone
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.fileExtension = fileExtension
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3BackupUpdate = s3BackupUpdate
        }
    }

}

public struct ListDeliveryStreamsInput {
    /// The delivery stream type. This can be one of the following values:
    ///
    /// * DirectPut: Provider applications access the delivery stream directly.
    ///
    /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
    ///
    ///
    /// This parameter is optional. If this parameter is omitted, delivery streams of all types are returned.
    public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    /// The list of delivery streams returned by this call to ListDeliveryStreams will start with the delivery stream whose name comes alphabetically immediately after the name you specify in ExclusiveStartDeliveryStreamName.
    public var exclusiveStartDeliveryStreamName: Swift.String?
    /// The maximum number of delivery streams to list. The default value is 10.
    public var limit: Swift.Int?

    public init(
        deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
        exclusiveStartDeliveryStreamName: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamType = deliveryStreamType
        self.exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamName
        self.limit = limit
    }
}

public struct ListDeliveryStreamsOutput {
    /// The names of the delivery streams.
    /// This member is required.
    public var deliveryStreamNames: [Swift.String]?
    /// Indicates whether there are more delivery streams available to list.
    /// This member is required.
    public var hasMoreDeliveryStreams: Swift.Bool?

    public init(
        deliveryStreamNames: [Swift.String]? = nil,
        hasMoreDeliveryStreams: Swift.Bool? = nil
    )
    {
        self.deliveryStreamNames = deliveryStreamNames
        self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
    }
}

public struct ListTagsForDeliveryStreamInput {
    /// The name of the delivery stream whose tags you want to list.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The key to use as the starting point for the list of tags. If you set this parameter, ListTagsForDeliveryStream gets all tags that occur after ExclusiveStartTagKey.
    public var exclusiveStartTagKey: Swift.String?
    /// The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, HasMoreTags is set to true in the response. To list additional tags, set ExclusiveStartTagKey to the last key in the response.
    public var limit: Swift.Int?

    public init(
        deliveryStreamName: Swift.String? = nil,
        exclusiveStartTagKey: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.exclusiveStartTagKey = exclusiveStartTagKey
        self.limit = limit
    }
}

public struct ListTagsForDeliveryStreamOutput {
    /// If this is true in the response, more tags are available. To list the remaining tags, set ExclusiveStartTagKey to the key of the last tag returned and call ListTagsForDeliveryStream again.
    /// This member is required.
    public var hasMoreTags: Swift.Bool?
    /// A list of tags associated with DeliveryStreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit.
    /// This member is required.
    public var tags: [FirehoseClientTypes.Tag]?

    public init(
        hasMoreTags: Swift.Bool? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.hasMoreTags = hasMoreTags
        self.tags = tags
    }
}

/// Only requests from CloudWatch Logs are supported when CloudWatch Logs decompression is enabled.
public struct InvalidSourceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSourceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service is unavailable. Back off and retry the operation. If you continue to see the exception, throughput limits for the delivery stream may have been exceeded. For more information about limits and how to request an increase, see [Amazon Firehose Limits](https://docs.aws.amazon.com/firehose/latest/dev/limits.html).
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FirehoseClientTypes {
    /// The unit of data in a delivery stream.
    public struct Record {
        /// The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KiB.
        /// This member is required.
        public var data: Foundation.Data?

        public init(
            data: Foundation.Data? = nil
        )
        {
            self.data = data
        }
    }

}

public struct PutRecordInput {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The record.
    /// This member is required.
    public var record: FirehoseClientTypes.Record?

    public init(
        deliveryStreamName: Swift.String? = nil,
        record: FirehoseClientTypes.Record? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.record = record
    }
}

public struct PutRecordOutput {
    /// Indicates whether server-side encryption (SSE) was enabled during this operation.
    public var encrypted: Swift.Bool?
    /// The ID of the record.
    /// This member is required.
    public var recordId: Swift.String?

    public init(
        encrypted: Swift.Bool? = nil,
        recordId: Swift.String? = nil
    )
    {
        self.encrypted = encrypted
        self.recordId = recordId
    }
}

public struct PutRecordBatchInput {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// One or more records.
    /// This member is required.
    public var records: [FirehoseClientTypes.Record]?

    public init(
        deliveryStreamName: Swift.String? = nil,
        records: [FirehoseClientTypes.Record]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.records = records
    }
}

extension FirehoseClientTypes {
    /// Contains the result for an individual record from a [PutRecordBatch] request. If the record is successfully added to your delivery stream, it receives a record ID. If the record fails to be added to your delivery stream, the result includes an error code and an error message.
    public struct PutRecordBatchResponseEntry {
        /// The error code for an individual record result.
        public var errorCode: Swift.String?
        /// The error message for an individual record result.
        public var errorMessage: Swift.String?
        /// The ID of the record.
        public var recordId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            recordId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.recordId = recordId
        }
    }

}

public struct PutRecordBatchOutput {
    /// Indicates whether server-side encryption (SSE) was enabled during this operation.
    public var encrypted: Swift.Bool?
    /// The number of records that might have failed processing. This number might be greater than 0 even if the [PutRecordBatch] call succeeds. Check FailedPutCount to determine whether there are records that you need to resend.
    /// This member is required.
    public var failedPutCount: Swift.Int?
    /// The results array. For each record, the index of the response element is the same as the index used in the request array.
    /// This member is required.
    public var requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]?

    public init(
        encrypted: Swift.Bool? = nil,
        failedPutCount: Swift.Int? = nil,
        requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]? = nil
    )
    {
        self.encrypted = encrypted
        self.failedPutCount = failedPutCount
        self.requestResponses = requestResponses
    }
}

public struct StartDeliveryStreamEncryptionInput {
    /// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
    public var deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    /// The name of the delivery stream for which you want to enable server-side encryption (SSE).
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init(
        deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput? = nil,
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput
        self.deliveryStreamName = deliveryStreamName
    }
}

public struct StartDeliveryStreamEncryptionOutput {

    public init() { }
}

public struct StopDeliveryStreamEncryptionInput {
    /// The name of the delivery stream for which you want to disable server-side encryption (SSE).
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init(
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
    }
}

public struct StopDeliveryStreamEncryptionOutput {

    public init() { }
}

public struct TagDeliveryStreamInput {
    /// The name of the delivery stream to which you want to add the tags.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// A set of key-value pairs to use to create the tags.
    /// This member is required.
    public var tags: [FirehoseClientTypes.Tag]?

    public init(
        deliveryStreamName: Swift.String? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.tags = tags
    }
}

public struct TagDeliveryStreamOutput {

    public init() { }
}

public struct UntagDeliveryStreamInput {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// A list of tag keys. Each corresponding tag is removed from the delivery stream.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        deliveryStreamName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.tagKeys = tagKeys
    }
}

public struct UntagDeliveryStreamOutput {

    public init() { }
}

extension FirehoseClientTypes {
    /// Updates the specified HTTP endpoint destination.
    public struct HttpEndpointDestinationUpdate {
        /// Describes buffering options that can be applied to the data before it is delivered to the HTTPS endpoint destination. Firehose teats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// Describes the configuration of the HTTP endpoint destination.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of the request sent to the HTTP endpoint specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Kinesis Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The configuration that defines how you access secrets for HTTP Endpoint destination.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Update = s3Update
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon Redshift.
    public struct RedshiftDestinationUpdate {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The user password.
        public var password: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// You can update a delivery stream to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The Amazon S3 destination for backup.
        public var s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The configuration that defines how you access secrets for Amazon Redshift.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// The name of the user.
        public var username: Swift.String?

        public init(
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            password: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3BackupUpdate = s3BackupUpdate
            self.s3Update = s3Update
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationUpdate(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3BackupUpdate: \(Swift.String(describing: s3BackupUpdate)), s3Update: \(Swift.String(describing: s3Update)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Update to configuration settings
    public struct SnowflakeDestinationUpdate {
        /// URL for accessing your Snowflake account. This URL must include your [account identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier). Note that the protocol (https://) and port number are optional.
        public var accountUrl: Swift.String?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The name of the content metadata column
        public var contentColumnName: Swift.String?
        /// JSON keys mapped to table column names or choose to split the JSON payload where content is mapped to a record content column and source metadata is mapped to a record metadata column.
        public var dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption?
        /// All data in Snowflake is maintained in databases.
        public var database: Swift.String?
        /// Passphrase to decrypt the private key when the key is encrypted. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation).
        public var keyPassphrase: Swift.String?
        /// The name of the record metadata column
        public var metaDataColumnName: Swift.String?
        /// The private key used to encrypt your Snowflake client. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation).
        public var privateKey: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// Specify how long Firehose retries sending data to the New Relic HTTP endpoint. After sending data, Firehose first waits for an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment doesnâ€™t arrive within the acknowledgment timeout period, Firehose starts the retry duration counter. It keeps retrying until the retry duration expires. After that, Firehose considers it a data delivery failure and backs up the data to your Amazon S3 bucket. Every time that Firehose sends data to the HTTP endpoint (either the initial attempt or a retry), it restarts the acknowledgement timeout counter and waits for an acknowledgement from the HTTP endpoint. Even if the retry duration expires, Firehose still waits for the acknowledgment until it receives it or the acknowledgement timeout period is reached. If the acknowledgment times out, Firehose determines whether there's time left in the retry counter. If there is time left, it retries again and repeats the logic until it receives an acknowledgment or determines that the retry time has expired. If you don't want Firehose to retry sending data, set this value to 0.
        public var retryOptions: FirehoseClientTypes.SnowflakeRetryOptions?
        /// The Amazon Resource Name (ARN) of the Snowflake role
        public var roleARN: Swift.String?
        /// Choose an S3 backup mode
        public var s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// Each database consists of one or more schemas, which are logical groupings of database objects, such as tables and views
        public var schema: Swift.String?
        /// Describes the Secrets Manager configuration in Snowflake.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?
        /// Optionally configure a Snowflake role. Otherwise the default user role will be used.
        public var snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration?
        /// All data in Snowflake is stored in database tables, logically structured as collections of columns and rows.
        public var table: Swift.String?
        /// User login name for the Snowflake account.
        public var user: Swift.String?

        public init(
            accountUrl: Swift.String? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            contentColumnName: Swift.String? = nil,
            dataLoadingOption: FirehoseClientTypes.SnowflakeDataLoadingOption? = nil,
            database: Swift.String? = nil,
            keyPassphrase: Swift.String? = nil,
            metaDataColumnName: Swift.String? = nil,
            privateKey: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SnowflakeRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.SnowflakeS3BackupMode? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            schema: Swift.String? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil,
            snowflakeRoleConfiguration: FirehoseClientTypes.SnowflakeRoleConfiguration? = nil,
            table: Swift.String? = nil,
            user: Swift.String? = nil
        )
        {
            self.accountUrl = accountUrl
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.contentColumnName = contentColumnName
            self.dataLoadingOption = dataLoadingOption
            self.database = database
            self.keyPassphrase = keyPassphrase
            self.metaDataColumnName = metaDataColumnName
            self.privateKey = privateKey
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Update = s3Update
            self.schema = schema
            self.secretsManagerConfiguration = secretsManagerConfiguration
            self.snowflakeRoleConfiguration = snowflakeRoleConfiguration
            self.table = table
            self.user = user
        }
    }

}

extension FirehoseClientTypes.SnowflakeDestinationUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnowflakeDestinationUpdate(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), dataLoadingOption: \(Swift.String(describing: dataLoadingOption)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3Update: \(Swift.String(describing: s3Update)), secretsManagerConfiguration: \(Swift.String(describing: secretsManagerConfiguration)), snowflakeRoleConfiguration: \(Swift.String(describing: snowflakeRoleConfiguration)), accountUrl: \"CONTENT_REDACTED\", contentColumnName: \"CONTENT_REDACTED\", database: \"CONTENT_REDACTED\", keyPassphrase: \"CONTENT_REDACTED\", metaDataColumnName: \"CONTENT_REDACTED\", privateKey: \"CONTENT_REDACTED\", schema: \"CONTENT_REDACTED\", table: \"CONTENT_REDACTED\", user: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Splunk.
    public struct SplunkDestinationUpdate {
        /// The buffering options. If no value is specified, the default values for Splunk are used.
        public var bufferingHints: FirehoseClientTypes.SplunkBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// A GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Specifies how you want Firehose to back up documents to Amazon S3. When set to FailedDocumentsOnly, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllEvents, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is FailedEventsOnly. You can update this backup mode from FailedEventsOnly to AllEvents. You can't update it from AllEvents to FailedEventsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// Your update to the configuration of the backup Amazon S3 location.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The configuration that defines how you access secrets for Splunk.
        public var secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration?

        public init(
            bufferingHints: FirehoseClientTypes.SplunkBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            secretsManagerConfiguration: FirehoseClientTypes.SecretsManagerConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3Update = s3Update
            self.secretsManagerConfiguration = secretsManagerConfiguration
        }
    }

}

public struct UpdateDestinationInput {
    /// Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.
    public var amazonOpenSearchServerlessDestinationUpdate: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate?
    /// Describes an update for a destination in Amazon OpenSearch Service.
    public var amazonopensearchserviceDestinationUpdate: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate?
    /// Obtain this value from the VersionId result of [DeliveryStreamDescription]. This value is required, and helps the service perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the VersionId value is updated. The service then performs a merge of the old configuration with the new configuration.
    /// This member is required.
    public var currentDeliveryStreamVersionId: Swift.String?
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The ID of the destination.
    /// This member is required.
    public var destinationId: Swift.String?
    /// Describes an update for a destination in Amazon ES.
    public var elasticsearchDestinationUpdate: FirehoseClientTypes.ElasticsearchDestinationUpdate?
    /// Describes an update for a destination in Amazon S3.
    public var extendedS3DestinationUpdate: FirehoseClientTypes.ExtendedS3DestinationUpdate?
    /// Describes an update to the specified HTTP endpoint destination.
    public var httpEndpointDestinationUpdate: FirehoseClientTypes.HttpEndpointDestinationUpdate?
    /// Describes an update for a destination in Amazon Redshift.
    public var redshiftDestinationUpdate: FirehoseClientTypes.RedshiftDestinationUpdate?
    /// [Deprecated] Describes an update for a destination in Amazon S3.
    @available(*, deprecated)
    public var s3DestinationUpdate: FirehoseClientTypes.S3DestinationUpdate?
    /// Update to the Snowflake destination configuration settings.
    public var snowflakeDestinationUpdate: FirehoseClientTypes.SnowflakeDestinationUpdate?
    /// Describes an update for a destination in Splunk.
    public var splunkDestinationUpdate: FirehoseClientTypes.SplunkDestinationUpdate?

    public init(
        amazonOpenSearchServerlessDestinationUpdate: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate? = nil,
        amazonopensearchserviceDestinationUpdate: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate? = nil,
        currentDeliveryStreamVersionId: Swift.String? = nil,
        deliveryStreamName: Swift.String? = nil,
        destinationId: Swift.String? = nil,
        elasticsearchDestinationUpdate: FirehoseClientTypes.ElasticsearchDestinationUpdate? = nil,
        extendedS3DestinationUpdate: FirehoseClientTypes.ExtendedS3DestinationUpdate? = nil,
        httpEndpointDestinationUpdate: FirehoseClientTypes.HttpEndpointDestinationUpdate? = nil,
        redshiftDestinationUpdate: FirehoseClientTypes.RedshiftDestinationUpdate? = nil,
        s3DestinationUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil,
        snowflakeDestinationUpdate: FirehoseClientTypes.SnowflakeDestinationUpdate? = nil,
        splunkDestinationUpdate: FirehoseClientTypes.SplunkDestinationUpdate? = nil
    )
    {
        self.amazonOpenSearchServerlessDestinationUpdate = amazonOpenSearchServerlessDestinationUpdate
        self.amazonopensearchserviceDestinationUpdate = amazonopensearchserviceDestinationUpdate
        self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
        self.deliveryStreamName = deliveryStreamName
        self.destinationId = destinationId
        self.elasticsearchDestinationUpdate = elasticsearchDestinationUpdate
        self.extendedS3DestinationUpdate = extendedS3DestinationUpdate
        self.httpEndpointDestinationUpdate = httpEndpointDestinationUpdate
        self.redshiftDestinationUpdate = redshiftDestinationUpdate
        self.s3DestinationUpdate = s3DestinationUpdate
        self.snowflakeDestinationUpdate = snowflakeDestinationUpdate
        self.splunkDestinationUpdate = splunkDestinationUpdate
    }
}

public struct UpdateDestinationOutput {

    public init() { }
}

extension CreateDeliveryStreamInput {

    static func urlPathProvider(_ value: CreateDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeliveryStreamInput {

    static func urlPathProvider(_ value: DeleteDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeliveryStreamInput {

    static func urlPathProvider(_ value: DescribeDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeliveryStreamsInput {

    static func urlPathProvider(_ value: ListDeliveryStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForDeliveryStreamInput {

    static func urlPathProvider(_ value: ListTagsForDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension PutRecordInput {

    static func urlPathProvider(_ value: PutRecordInput) -> Swift.String? {
        return "/"
    }
}

extension PutRecordBatchInput {

    static func urlPathProvider(_ value: PutRecordBatchInput) -> Swift.String? {
        return "/"
    }
}

extension StartDeliveryStreamEncryptionInput {

    static func urlPathProvider(_ value: StartDeliveryStreamEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension StopDeliveryStreamEncryptionInput {

    static func urlPathProvider(_ value: StopDeliveryStreamEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension TagDeliveryStreamInput {

    static func urlPathProvider(_ value: TagDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension UntagDeliveryStreamInput {

    static func urlPathProvider(_ value: UntagDeliveryStreamInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDestinationInput {

    static func urlPathProvider(_ value: UpdateDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeliveryStreamInput {

    static func write(value: CreateDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonOpenSearchServerlessDestinationConfiguration"].write(value.amazonOpenSearchServerlessDestinationConfiguration, with: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration.write(value:to:))
        try writer["AmazonopensearchserviceDestinationConfiguration"].write(value.amazonopensearchserviceDestinationConfiguration, with: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration.write(value:to:))
        try writer["DeliveryStreamEncryptionConfigurationInput"].write(value.deliveryStreamEncryptionConfigurationInput, with: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput.write(value:to:))
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["DeliveryStreamType"].write(value.deliveryStreamType)
        try writer["ElasticsearchDestinationConfiguration"].write(value.elasticsearchDestinationConfiguration, with: FirehoseClientTypes.ElasticsearchDestinationConfiguration.write(value:to:))
        try writer["ExtendedS3DestinationConfiguration"].write(value.extendedS3DestinationConfiguration, with: FirehoseClientTypes.ExtendedS3DestinationConfiguration.write(value:to:))
        try writer["HttpEndpointDestinationConfiguration"].write(value.httpEndpointDestinationConfiguration, with: FirehoseClientTypes.HttpEndpointDestinationConfiguration.write(value:to:))
        try writer["KinesisStreamSourceConfiguration"].write(value.kinesisStreamSourceConfiguration, with: FirehoseClientTypes.KinesisStreamSourceConfiguration.write(value:to:))
        try writer["MSKSourceConfiguration"].write(value.mskSourceConfiguration, with: FirehoseClientTypes.MSKSourceConfiguration.write(value:to:))
        try writer["RedshiftDestinationConfiguration"].write(value.redshiftDestinationConfiguration, with: FirehoseClientTypes.RedshiftDestinationConfiguration.write(value:to:))
        try writer["S3DestinationConfiguration"].write(value.s3DestinationConfiguration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["SnowflakeDestinationConfiguration"].write(value.snowflakeDestinationConfiguration, with: FirehoseClientTypes.SnowflakeDestinationConfiguration.write(value:to:))
        try writer["SplunkDestinationConfiguration"].write(value.splunkDestinationConfiguration, with: FirehoseClientTypes.SplunkDestinationConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FirehoseClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteDeliveryStreamInput {

    static func write(value: DeleteDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowForceDelete"].write(value.allowForceDelete)
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
    }
}

extension DescribeDeliveryStreamInput {

    static func write(value: DescribeDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["ExclusiveStartDestinationId"].write(value.exclusiveStartDestinationId)
        try writer["Limit"].write(value.limit)
    }
}

extension ListDeliveryStreamsInput {

    static func write(value: ListDeliveryStreamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamType"].write(value.deliveryStreamType)
        try writer["ExclusiveStartDeliveryStreamName"].write(value.exclusiveStartDeliveryStreamName)
        try writer["Limit"].write(value.limit)
    }
}

extension ListTagsForDeliveryStreamInput {

    static func write(value: ListTagsForDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["ExclusiveStartTagKey"].write(value.exclusiveStartTagKey)
        try writer["Limit"].write(value.limit)
    }
}

extension PutRecordInput {

    static func write(value: PutRecordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["Record"].write(value.record, with: FirehoseClientTypes.Record.write(value:to:))
    }
}

extension PutRecordBatchInput {

    static func write(value: PutRecordBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["Records"].writeList(value.records, memberWritingClosure: FirehoseClientTypes.Record.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartDeliveryStreamEncryptionInput {

    static func write(value: StartDeliveryStreamEncryptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamEncryptionConfigurationInput"].write(value.deliveryStreamEncryptionConfigurationInput, with: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput.write(value:to:))
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
    }
}

extension StopDeliveryStreamEncryptionInput {

    static func write(value: StopDeliveryStreamEncryptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
    }
}

extension TagDeliveryStreamInput {

    static func write(value: TagDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: FirehoseClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagDeliveryStreamInput {

    static func write(value: UntagDeliveryStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDestinationInput {

    static func write(value: UpdateDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonOpenSearchServerlessDestinationUpdate"].write(value.amazonOpenSearchServerlessDestinationUpdate, with: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate.write(value:to:))
        try writer["AmazonopensearchserviceDestinationUpdate"].write(value.amazonopensearchserviceDestinationUpdate, with: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate.write(value:to:))
        try writer["CurrentDeliveryStreamVersionId"].write(value.currentDeliveryStreamVersionId)
        try writer["DeliveryStreamName"].write(value.deliveryStreamName)
        try writer["DestinationId"].write(value.destinationId)
        try writer["ElasticsearchDestinationUpdate"].write(value.elasticsearchDestinationUpdate, with: FirehoseClientTypes.ElasticsearchDestinationUpdate.write(value:to:))
        try writer["ExtendedS3DestinationUpdate"].write(value.extendedS3DestinationUpdate, with: FirehoseClientTypes.ExtendedS3DestinationUpdate.write(value:to:))
        try writer["HttpEndpointDestinationUpdate"].write(value.httpEndpointDestinationUpdate, with: FirehoseClientTypes.HttpEndpointDestinationUpdate.write(value:to:))
        try writer["RedshiftDestinationUpdate"].write(value.redshiftDestinationUpdate, with: FirehoseClientTypes.RedshiftDestinationUpdate.write(value:to:))
        try writer["S3DestinationUpdate"].write(value.s3DestinationUpdate, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["SnowflakeDestinationUpdate"].write(value.snowflakeDestinationUpdate, with: FirehoseClientTypes.SnowflakeDestinationUpdate.write(value:to:))
        try writer["SplunkDestinationUpdate"].write(value.splunkDestinationUpdate, with: FirehoseClientTypes.SplunkDestinationUpdate.write(value:to:))
    }
}

extension CreateDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeliveryStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeliveryStreamOutput()
        value.deliveryStreamARN = try reader["DeliveryStreamARN"].readIfPresent()
        return value
    }
}

extension DeleteDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeliveryStreamOutput {
        return DeleteDeliveryStreamOutput()
    }
}

extension DescribeDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeliveryStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeliveryStreamOutput()
        value.deliveryStreamDescription = try reader["DeliveryStreamDescription"].readIfPresent(with: FirehoseClientTypes.DeliveryStreamDescription.read(from:))
        return value
    }
}

extension ListDeliveryStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeliveryStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeliveryStreamsOutput()
        value.deliveryStreamNames = try reader["DeliveryStreamNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.hasMoreDeliveryStreams = try reader["HasMoreDeliveryStreams"].readIfPresent() ?? false
        return value
    }
}

extension ListTagsForDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForDeliveryStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForDeliveryStreamOutput()
        value.hasMoreTags = try reader["HasMoreTags"].readIfPresent() ?? false
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutRecordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRecordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRecordOutput()
        value.encrypted = try reader["Encrypted"].readIfPresent()
        value.recordId = try reader["RecordId"].readIfPresent() ?? ""
        return value
    }
}

extension PutRecordBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRecordBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRecordBatchOutput()
        value.encrypted = try reader["Encrypted"].readIfPresent()
        value.failedPutCount = try reader["FailedPutCount"].readIfPresent() ?? 0
        value.requestResponses = try reader["RequestResponses"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.PutRecordBatchResponseEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension StartDeliveryStreamEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDeliveryStreamEncryptionOutput {
        return StartDeliveryStreamEncryptionOutput()
    }
}

extension StopDeliveryStreamEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDeliveryStreamEncryptionOutput {
        return StopDeliveryStreamEncryptionOutput()
    }
}

extension TagDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagDeliveryStreamOutput {
        return TagDeliveryStreamOutput()
    }
}

extension UntagDeliveryStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagDeliveryStreamOutput {
        return UntagDeliveryStreamOutput()
    }
}

extension UpdateDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDestinationOutput {
        return UpdateDestinationOutput()
    }
}

enum CreateDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidKMSResourceException": return try InvalidKMSResourceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeliveryStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRecordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidKMSResourceException": return try InvalidKMSResourceException.makeError(baseError: baseError)
            case "InvalidSourceException": return try InvalidSourceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRecordBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidKMSResourceException": return try InvalidKMSResourceException.makeError(baseError: baseError)
            case "InvalidSourceException": return try InvalidSourceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDeliveryStreamEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidKMSResourceException": return try InvalidKMSResourceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDeliveryStreamEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagDeliveryStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArgumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArgumentException {
        let reader = baseError.errorBodyReader
        var value = InvalidArgumentException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidKMSResourceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidKMSResourceException {
        let reader = baseError.errorBodyReader
        var value = InvalidKMSResourceException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSourceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSourceException {
        let reader = baseError.errorBodyReader
        var value = InvalidSourceException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FirehoseClientTypes.DeliveryStreamDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DeliveryStreamDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DeliveryStreamDescription()
        value.deliveryStreamName = try reader["DeliveryStreamName"].readIfPresent() ?? ""
        value.deliveryStreamARN = try reader["DeliveryStreamARN"].readIfPresent() ?? ""
        value.deliveryStreamStatus = try reader["DeliveryStreamStatus"].readIfPresent() ?? .sdkUnknown("")
        value.failureDescription = try reader["FailureDescription"].readIfPresent(with: FirehoseClientTypes.FailureDescription.read(from:))
        value.deliveryStreamEncryptionConfiguration = try reader["DeliveryStreamEncryptionConfiguration"].readIfPresent(with: FirehoseClientTypes.DeliveryStreamEncryptionConfiguration.read(from:))
        value.deliveryStreamType = try reader["DeliveryStreamType"].readIfPresent() ?? .sdkUnknown("")
        value.versionId = try reader["VersionId"].readIfPresent() ?? ""
        value.createTimestamp = try reader["CreateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTimestamp = try reader["LastUpdateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.source = try reader["Source"].readIfPresent(with: FirehoseClientTypes.SourceDescription.read(from:))
        value.destinations = try reader["Destinations"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.DestinationDescription.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.hasMoreDestinations = try reader["HasMoreDestinations"].readIfPresent() ?? false
        return value
    }
}

extension FirehoseClientTypes.DestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DestinationDescription()
        value.destinationId = try reader["DestinationId"].readIfPresent() ?? ""
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.extendedS3DestinationDescription = try reader["ExtendedS3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.ExtendedS3DestinationDescription.read(from:))
        value.redshiftDestinationDescription = try reader["RedshiftDestinationDescription"].readIfPresent(with: FirehoseClientTypes.RedshiftDestinationDescription.read(from:))
        value.elasticsearchDestinationDescription = try reader["ElasticsearchDestinationDescription"].readIfPresent(with: FirehoseClientTypes.ElasticsearchDestinationDescription.read(from:))
        value.amazonopensearchserviceDestinationDescription = try reader["AmazonopensearchserviceDestinationDescription"].readIfPresent(with: FirehoseClientTypes.AmazonopensearchserviceDestinationDescription.read(from:))
        value.splunkDestinationDescription = try reader["SplunkDestinationDescription"].readIfPresent(with: FirehoseClientTypes.SplunkDestinationDescription.read(from:))
        value.httpEndpointDestinationDescription = try reader["HttpEndpointDestinationDescription"].readIfPresent(with: FirehoseClientTypes.HttpEndpointDestinationDescription.read(from:))
        value.snowflakeDestinationDescription = try reader["SnowflakeDestinationDescription"].readIfPresent(with: FirehoseClientTypes.SnowflakeDestinationDescription.read(from:))
        value.amazonOpenSearchServerlessDestinationDescription = try reader["AmazonOpenSearchServerlessDestinationDescription"].readIfPresent(with: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription.read(from:))
        return value
    }
}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.collectionEndpoint = try reader["CollectionEndpoint"].readIfPresent()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.read(from:))
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.vpcConfigurationDescription = try reader["VpcConfigurationDescription"].readIfPresent(with: FirehoseClientTypes.VpcConfigurationDescription.read(from:))
        return value
    }
}

extension FirehoseClientTypes.VpcConfigurationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.VpcConfigurationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.VpcConfigurationDescription()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.roleARN = try reader["RoleARN"].readIfPresent() ?? ""
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.vpcId = try reader["VpcId"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.CloudWatchLoggingOptions {

    static func write(value: FirehoseClientTypes.CloudWatchLoggingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["LogGroupName"].write(value.logGroupName)
        try writer["LogStreamName"].write(value.logStreamName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.CloudWatchLoggingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.CloudWatchLoggingOptions()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.logGroupName = try reader["LogGroupName"].readIfPresent()
        value.logStreamName = try reader["LogStreamName"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.ProcessingConfiguration {

    static func write(value: FirehoseClientTypes.ProcessingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["Processors"].writeList(value.processors, memberWritingClosure: FirehoseClientTypes.Processor.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ProcessingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ProcessingConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.processors = try reader["Processors"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.Processor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FirehoseClientTypes.Processor {

    static func write(value: FirehoseClientTypes.Processor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: FirehoseClientTypes.ProcessorParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.Processor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.Processor()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.ProcessorParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FirehoseClientTypes.ProcessorParameter {

    static func write(value: FirehoseClientTypes.ProcessorParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ParameterName"].write(value.parameterName)
        try writer["ParameterValue"].write(value.parameterValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ProcessorParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ProcessorParameter()
        value.parameterName = try reader["ParameterName"].readIfPresent() ?? .sdkUnknown("")
        value.parameterValue = try reader["ParameterValue"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.S3DestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.S3DestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.S3DestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent() ?? ""
        value.bucketARN = try reader["BucketARN"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.errorOutputPrefix = try reader["ErrorOutputPrefix"].readIfPresent()
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.BufferingHints.read(from:))
        value.compressionFormat = try reader["CompressionFormat"].readIfPresent() ?? .sdkUnknown("")
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: FirehoseClientTypes.EncryptionConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        return value
    }
}

extension FirehoseClientTypes.EncryptionConfiguration {

    static func write(value: FirehoseClientTypes.EncryptionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KMSEncryptionConfig"].write(value.kmsEncryptionConfig, with: FirehoseClientTypes.KMSEncryptionConfig.write(value:to:))
        try writer["NoEncryptionConfig"].write(value.noEncryptionConfig)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.EncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.EncryptionConfiguration()
        value.noEncryptionConfig = try reader["NoEncryptionConfig"].readIfPresent()
        value.kmsEncryptionConfig = try reader["KMSEncryptionConfig"].readIfPresent(with: FirehoseClientTypes.KMSEncryptionConfig.read(from:))
        return value
    }
}

extension FirehoseClientTypes.KMSEncryptionConfig {

    static func write(value: FirehoseClientTypes.KMSEncryptionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AWSKMSKeyARN"].write(value.awskmsKeyARN)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.KMSEncryptionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.KMSEncryptionConfig()
        value.awskmsKeyARN = try reader["AWSKMSKeyARN"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.BufferingHints {

    static func write(value: FirehoseClientTypes.BufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.BufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.BufferingHints()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions {

    static func write(value: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints {

    static func write(value: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.SnowflakeDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SnowflakeDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SnowflakeDestinationDescription()
        value.accountUrl = try reader["AccountUrl"].readIfPresent()
        value.user = try reader["User"].readIfPresent()
        value.database = try reader["Database"].readIfPresent()
        value.schema = try reader["Schema"].readIfPresent()
        value.table = try reader["Table"].readIfPresent()
        value.snowflakeRoleConfiguration = try reader["SnowflakeRoleConfiguration"].readIfPresent(with: FirehoseClientTypes.SnowflakeRoleConfiguration.read(from:))
        value.dataLoadingOption = try reader["DataLoadingOption"].readIfPresent()
        value.metaDataColumnName = try reader["MetaDataColumnName"].readIfPresent()
        value.contentColumnName = try reader["ContentColumnName"].readIfPresent()
        value.snowflakeVpcConfiguration = try reader["SnowflakeVpcConfiguration"].readIfPresent(with: FirehoseClientTypes.SnowflakeVpcConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.SnowflakeRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.secretsManagerConfiguration = try reader["SecretsManagerConfiguration"].readIfPresent(with: FirehoseClientTypes.SecretsManagerConfiguration.read(from:))
        return value
    }
}

extension FirehoseClientTypes.SecretsManagerConfiguration {

    static func write(value: FirehoseClientTypes.SecretsManagerConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["RoleARN"].write(value.roleARN)
        try writer["SecretARN"].write(value.secretARN)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SecretsManagerConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SecretsManagerConfiguration()
        value.secretARN = try reader["SecretARN"].readIfPresent()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        return value
    }
}

extension FirehoseClientTypes.SnowflakeRetryOptions {

    static func write(value: FirehoseClientTypes.SnowflakeRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SnowflakeRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SnowflakeRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.SnowflakeVpcConfiguration {

    static func write(value: FirehoseClientTypes.SnowflakeVpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PrivateLinkVpceId"].write(value.privateLinkVpceId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SnowflakeVpcConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SnowflakeVpcConfiguration()
        value.privateLinkVpceId = try reader["PrivateLinkVpceId"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.SnowflakeRoleConfiguration {

    static func write(value: FirehoseClientTypes.SnowflakeRoleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["SnowflakeRole"].write(value.snowflakeRole)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SnowflakeRoleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SnowflakeRoleConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.snowflakeRole = try reader["SnowflakeRole"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointDestinationDescription()
        value.endpointConfiguration = try reader["EndpointConfiguration"].readIfPresent(with: FirehoseClientTypes.HttpEndpointDescription.read(from:))
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.HttpEndpointBufferingHints.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.requestConfiguration = try reader["RequestConfiguration"].readIfPresent(with: FirehoseClientTypes.HttpEndpointRequestConfiguration.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.HttpEndpointRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.secretsManagerConfiguration = try reader["SecretsManagerConfiguration"].readIfPresent(with: FirehoseClientTypes.SecretsManagerConfiguration.read(from:))
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointRetryOptions {

    static func write(value: FirehoseClientTypes.HttpEndpointRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointRequestConfiguration {

    static func write(value: FirehoseClientTypes.HttpEndpointRequestConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CommonAttributes"].writeList(value.commonAttributes, memberWritingClosure: FirehoseClientTypes.HttpEndpointCommonAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContentEncoding"].write(value.contentEncoding)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointRequestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointRequestConfiguration()
        value.contentEncoding = try reader["ContentEncoding"].readIfPresent()
        value.commonAttributes = try reader["CommonAttributes"].readListIfPresent(memberReadingClosure: FirehoseClientTypes.HttpEndpointCommonAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointCommonAttribute {

    static func write(value: FirehoseClientTypes.HttpEndpointCommonAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["AttributeValue"].write(value.attributeValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointCommonAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointCommonAttribute()
        value.attributeName = try reader["AttributeName"].readIfPresent() ?? ""
        value.attributeValue = try reader["AttributeValue"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointBufferingHints {

    static func write(value: FirehoseClientTypes.HttpEndpointBufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointBufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointBufferingHints()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.HttpEndpointDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HttpEndpointDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HttpEndpointDescription()
        value.url = try reader["Url"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.SplunkDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SplunkDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SplunkDestinationDescription()
        value.hecEndpoint = try reader["HECEndpoint"].readIfPresent()
        value.hecEndpointType = try reader["HECEndpointType"].readIfPresent()
        value.hecToken = try reader["HECToken"].readIfPresent()
        value.hecAcknowledgmentTimeoutInSeconds = try reader["HECAcknowledgmentTimeoutInSeconds"].readIfPresent()
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.SplunkRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.SplunkBufferingHints.read(from:))
        value.secretsManagerConfiguration = try reader["SecretsManagerConfiguration"].readIfPresent(with: FirehoseClientTypes.SecretsManagerConfiguration.read(from:))
        return value
    }
}

extension FirehoseClientTypes.SplunkBufferingHints {

    static func write(value: FirehoseClientTypes.SplunkBufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SplunkBufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SplunkBufferingHints()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.SplunkRetryOptions {

    static func write(value: FirehoseClientTypes.SplunkRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SplunkRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SplunkRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonopensearchserviceDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonopensearchserviceDestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.domainARN = try reader["DomainARN"].readIfPresent()
        value.clusterEndpoint = try reader["ClusterEndpoint"].readIfPresent()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.typeName = try reader["TypeName"].readIfPresent()
        value.indexRotationPeriod = try reader["IndexRotationPeriod"].readIfPresent()
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.AmazonopensearchserviceBufferingHints.read(from:))
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.AmazonopensearchserviceRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.vpcConfigurationDescription = try reader["VpcConfigurationDescription"].readIfPresent(with: FirehoseClientTypes.VpcConfigurationDescription.read(from:))
        value.documentIdOptions = try reader["DocumentIdOptions"].readIfPresent(with: FirehoseClientTypes.DocumentIdOptions.read(from:))
        return value
    }
}

extension FirehoseClientTypes.DocumentIdOptions {

    static func write(value: FirehoseClientTypes.DocumentIdOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultDocumentIdFormat"].write(value.defaultDocumentIdFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DocumentIdOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DocumentIdOptions()
        value.defaultDocumentIdFormat = try reader["DefaultDocumentIdFormat"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceRetryOptions {

    static func write(value: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonopensearchserviceRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonopensearchserviceRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceBufferingHints {

    static func write(value: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AmazonopensearchserviceBufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AmazonopensearchserviceBufferingHints()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.ElasticsearchDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ElasticsearchDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ElasticsearchDestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.domainARN = try reader["DomainARN"].readIfPresent()
        value.clusterEndpoint = try reader["ClusterEndpoint"].readIfPresent()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.typeName = try reader["TypeName"].readIfPresent()
        value.indexRotationPeriod = try reader["IndexRotationPeriod"].readIfPresent()
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.ElasticsearchBufferingHints.read(from:))
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.ElasticsearchRetryOptions.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.vpcConfigurationDescription = try reader["VpcConfigurationDescription"].readIfPresent(with: FirehoseClientTypes.VpcConfigurationDescription.read(from:))
        value.documentIdOptions = try reader["DocumentIdOptions"].readIfPresent(with: FirehoseClientTypes.DocumentIdOptions.read(from:))
        return value
    }
}

extension FirehoseClientTypes.ElasticsearchRetryOptions {

    static func write(value: FirehoseClientTypes.ElasticsearchRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ElasticsearchRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ElasticsearchRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.ElasticsearchBufferingHints {

    static func write(value: FirehoseClientTypes.ElasticsearchBufferingHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntervalInSeconds"].write(value.intervalInSeconds)
        try writer["SizeInMBs"].write(value.sizeInMBs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ElasticsearchBufferingHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ElasticsearchBufferingHints()
        value.intervalInSeconds = try reader["IntervalInSeconds"].readIfPresent()
        value.sizeInMBs = try reader["SizeInMBs"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.RedshiftDestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.RedshiftDestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.RedshiftDestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent() ?? ""
        value.clusterJDBCURL = try reader["ClusterJDBCURL"].readIfPresent() ?? ""
        value.copyCommand = try reader["CopyCommand"].readIfPresent(with: FirehoseClientTypes.CopyCommand.read(from:))
        value.username = try reader["Username"].readIfPresent()
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.RedshiftRetryOptions.read(from:))
        value.s3DestinationDescription = try reader["S3DestinationDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3BackupDescription = try reader["S3BackupDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.secretsManagerConfiguration = try reader["SecretsManagerConfiguration"].readIfPresent(with: FirehoseClientTypes.SecretsManagerConfiguration.read(from:))
        return value
    }
}

extension FirehoseClientTypes.RedshiftRetryOptions {

    static func write(value: FirehoseClientTypes.RedshiftRetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.RedshiftRetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.RedshiftRetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.CopyCommand {

    static func write(value: FirehoseClientTypes.CopyCommand?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyOptions"].write(value.copyOptions)
        try writer["DataTableColumns"].write(value.dataTableColumns)
        try writer["DataTableName"].write(value.dataTableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.CopyCommand {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.CopyCommand()
        value.dataTableName = try reader["DataTableName"].readIfPresent() ?? ""
        value.dataTableColumns = try reader["DataTableColumns"].readIfPresent()
        value.copyOptions = try reader["CopyOptions"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.ExtendedS3DestinationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ExtendedS3DestinationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ExtendedS3DestinationDescription()
        value.roleARN = try reader["RoleARN"].readIfPresent() ?? ""
        value.bucketARN = try reader["BucketARN"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.errorOutputPrefix = try reader["ErrorOutputPrefix"].readIfPresent()
        value.bufferingHints = try reader["BufferingHints"].readIfPresent(with: FirehoseClientTypes.BufferingHints.read(from:))
        value.compressionFormat = try reader["CompressionFormat"].readIfPresent() ?? .sdkUnknown("")
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: FirehoseClientTypes.EncryptionConfiguration.read(from:))
        value.cloudWatchLoggingOptions = try reader["CloudWatchLoggingOptions"].readIfPresent(with: FirehoseClientTypes.CloudWatchLoggingOptions.read(from:))
        value.processingConfiguration = try reader["ProcessingConfiguration"].readIfPresent(with: FirehoseClientTypes.ProcessingConfiguration.read(from:))
        value.s3BackupMode = try reader["S3BackupMode"].readIfPresent()
        value.s3BackupDescription = try reader["S3BackupDescription"].readIfPresent(with: FirehoseClientTypes.S3DestinationDescription.read(from:))
        value.dataFormatConversionConfiguration = try reader["DataFormatConversionConfiguration"].readIfPresent(with: FirehoseClientTypes.DataFormatConversionConfiguration.read(from:))
        value.dynamicPartitioningConfiguration = try reader["DynamicPartitioningConfiguration"].readIfPresent(with: FirehoseClientTypes.DynamicPartitioningConfiguration.read(from:))
        value.fileExtension = try reader["FileExtension"].readIfPresent()
        value.customTimeZone = try reader["CustomTimeZone"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.DynamicPartitioningConfiguration {

    static func write(value: FirehoseClientTypes.DynamicPartitioningConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.RetryOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DynamicPartitioningConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DynamicPartitioningConfiguration()
        value.retryOptions = try reader["RetryOptions"].readIfPresent(with: FirehoseClientTypes.RetryOptions.read(from:))
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.RetryOptions {

    static func write(value: FirehoseClientTypes.RetryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.RetryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.RetryOptions()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.DataFormatConversionConfiguration {

    static func write(value: FirehoseClientTypes.DataFormatConversionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["InputFormatConfiguration"].write(value.inputFormatConfiguration, with: FirehoseClientTypes.InputFormatConfiguration.write(value:to:))
        try writer["OutputFormatConfiguration"].write(value.outputFormatConfiguration, with: FirehoseClientTypes.OutputFormatConfiguration.write(value:to:))
        try writer["SchemaConfiguration"].write(value.schemaConfiguration, with: FirehoseClientTypes.SchemaConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DataFormatConversionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DataFormatConversionConfiguration()
        value.schemaConfiguration = try reader["SchemaConfiguration"].readIfPresent(with: FirehoseClientTypes.SchemaConfiguration.read(from:))
        value.inputFormatConfiguration = try reader["InputFormatConfiguration"].readIfPresent(with: FirehoseClientTypes.InputFormatConfiguration.read(from:))
        value.outputFormatConfiguration = try reader["OutputFormatConfiguration"].readIfPresent(with: FirehoseClientTypes.OutputFormatConfiguration.read(from:))
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.OutputFormatConfiguration {

    static func write(value: FirehoseClientTypes.OutputFormatConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Serializer"].write(value.serializer, with: FirehoseClientTypes.Serializer.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.OutputFormatConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.OutputFormatConfiguration()
        value.serializer = try reader["Serializer"].readIfPresent(with: FirehoseClientTypes.Serializer.read(from:))
        return value
    }
}

extension FirehoseClientTypes.Serializer {

    static func write(value: FirehoseClientTypes.Serializer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OrcSerDe"].write(value.orcSerDe, with: FirehoseClientTypes.OrcSerDe.write(value:to:))
        try writer["ParquetSerDe"].write(value.parquetSerDe, with: FirehoseClientTypes.ParquetSerDe.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.Serializer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.Serializer()
        value.parquetSerDe = try reader["ParquetSerDe"].readIfPresent(with: FirehoseClientTypes.ParquetSerDe.read(from:))
        value.orcSerDe = try reader["OrcSerDe"].readIfPresent(with: FirehoseClientTypes.OrcSerDe.read(from:))
        return value
    }
}

extension FirehoseClientTypes.OrcSerDe {

    static func write(value: FirehoseClientTypes.OrcSerDe?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockSizeBytes"].write(value.blockSizeBytes)
        try writer["BloomFilterColumns"].writeList(value.bloomFilterColumns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BloomFilterFalsePositiveProbability"].write(value.bloomFilterFalsePositiveProbability)
        try writer["Compression"].write(value.compression)
        try writer["DictionaryKeyThreshold"].write(value.dictionaryKeyThreshold)
        try writer["EnablePadding"].write(value.enablePadding)
        try writer["FormatVersion"].write(value.formatVersion)
        try writer["PaddingTolerance"].write(value.paddingTolerance)
        try writer["RowIndexStride"].write(value.rowIndexStride)
        try writer["StripeSizeBytes"].write(value.stripeSizeBytes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.OrcSerDe {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.OrcSerDe()
        value.stripeSizeBytes = try reader["StripeSizeBytes"].readIfPresent()
        value.blockSizeBytes = try reader["BlockSizeBytes"].readIfPresent()
        value.rowIndexStride = try reader["RowIndexStride"].readIfPresent()
        value.enablePadding = try reader["EnablePadding"].readIfPresent()
        value.paddingTolerance = try reader["PaddingTolerance"].readIfPresent()
        value.compression = try reader["Compression"].readIfPresent()
        value.bloomFilterColumns = try reader["BloomFilterColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.bloomFilterFalsePositiveProbability = try reader["BloomFilterFalsePositiveProbability"].readIfPresent()
        value.dictionaryKeyThreshold = try reader["DictionaryKeyThreshold"].readIfPresent()
        value.formatVersion = try reader["FormatVersion"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.ParquetSerDe {

    static func write(value: FirehoseClientTypes.ParquetSerDe?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockSizeBytes"].write(value.blockSizeBytes)
        try writer["Compression"].write(value.compression)
        try writer["EnableDictionaryCompression"].write(value.enableDictionaryCompression)
        try writer["MaxPaddingBytes"].write(value.maxPaddingBytes)
        try writer["PageSizeBytes"].write(value.pageSizeBytes)
        try writer["WriterVersion"].write(value.writerVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.ParquetSerDe {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.ParquetSerDe()
        value.blockSizeBytes = try reader["BlockSizeBytes"].readIfPresent()
        value.pageSizeBytes = try reader["PageSizeBytes"].readIfPresent()
        value.compression = try reader["Compression"].readIfPresent()
        value.enableDictionaryCompression = try reader["EnableDictionaryCompression"].readIfPresent()
        value.maxPaddingBytes = try reader["MaxPaddingBytes"].readIfPresent()
        value.writerVersion = try reader["WriterVersion"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.InputFormatConfiguration {

    static func write(value: FirehoseClientTypes.InputFormatConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Deserializer"].write(value.deserializer, with: FirehoseClientTypes.Deserializer.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.InputFormatConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.InputFormatConfiguration()
        value.deserializer = try reader["Deserializer"].readIfPresent(with: FirehoseClientTypes.Deserializer.read(from:))
        return value
    }
}

extension FirehoseClientTypes.Deserializer {

    static func write(value: FirehoseClientTypes.Deserializer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HiveJsonSerDe"].write(value.hiveJsonSerDe, with: FirehoseClientTypes.HiveJsonSerDe.write(value:to:))
        try writer["OpenXJsonSerDe"].write(value.openXJsonSerDe, with: FirehoseClientTypes.OpenXJsonSerDe.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.Deserializer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.Deserializer()
        value.openXJsonSerDe = try reader["OpenXJsonSerDe"].readIfPresent(with: FirehoseClientTypes.OpenXJsonSerDe.read(from:))
        value.hiveJsonSerDe = try reader["HiveJsonSerDe"].readIfPresent(with: FirehoseClientTypes.HiveJsonSerDe.read(from:))
        return value
    }
}

extension FirehoseClientTypes.HiveJsonSerDe {

    static func write(value: FirehoseClientTypes.HiveJsonSerDe?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TimestampFormats"].writeList(value.timestampFormats, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.HiveJsonSerDe {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.HiveJsonSerDe()
        value.timestampFormats = try reader["TimestampFormats"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FirehoseClientTypes.OpenXJsonSerDe {

    static func write(value: FirehoseClientTypes.OpenXJsonSerDe?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaseInsensitive"].write(value.caseInsensitive)
        try writer["ColumnToJsonKeyMappings"].writeMap(value.columnToJsonKeyMappings, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ConvertDotsInJsonKeysToUnderscores"].write(value.convertDotsInJsonKeysToUnderscores)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.OpenXJsonSerDe {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.OpenXJsonSerDe()
        value.convertDotsInJsonKeysToUnderscores = try reader["ConvertDotsInJsonKeysToUnderscores"].readIfPresent()
        value.caseInsensitive = try reader["CaseInsensitive"].readIfPresent()
        value.columnToJsonKeyMappings = try reader["ColumnToJsonKeyMappings"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension FirehoseClientTypes.SchemaConfiguration {

    static func write(value: FirehoseClientTypes.SchemaConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CatalogId"].write(value.catalogId)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["Region"].write(value.region)
        try writer["RoleARN"].write(value.roleARN)
        try writer["TableName"].write(value.tableName)
        try writer["VersionId"].write(value.versionId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SchemaConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SchemaConfiguration()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.catalogId = try reader["CatalogId"].readIfPresent()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        value.region = try reader["Region"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.SourceDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.SourceDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.SourceDescription()
        value.kinesisStreamSourceDescription = try reader["KinesisStreamSourceDescription"].readIfPresent(with: FirehoseClientTypes.KinesisStreamSourceDescription.read(from:))
        value.mskSourceDescription = try reader["MSKSourceDescription"].readIfPresent(with: FirehoseClientTypes.MSKSourceDescription.read(from:))
        return value
    }
}

extension FirehoseClientTypes.MSKSourceDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.MSKSourceDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.MSKSourceDescription()
        value.mskClusterARN = try reader["MSKClusterARN"].readIfPresent()
        value.topicName = try reader["TopicName"].readIfPresent()
        value.authenticationConfiguration = try reader["AuthenticationConfiguration"].readIfPresent(with: FirehoseClientTypes.AuthenticationConfiguration.read(from:))
        value.deliveryStartTimestamp = try reader["DeliveryStartTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension FirehoseClientTypes.AuthenticationConfiguration {

    static func write(value: FirehoseClientTypes.AuthenticationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Connectivity"].write(value.connectivity)
        try writer["RoleARN"].write(value.roleARN)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.AuthenticationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.AuthenticationConfiguration()
        value.roleARN = try reader["RoleARN"].readIfPresent() ?? ""
        value.connectivity = try reader["Connectivity"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension FirehoseClientTypes.KinesisStreamSourceDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.KinesisStreamSourceDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.KinesisStreamSourceDescription()
        value.kinesisStreamARN = try reader["KinesisStreamARN"].readIfPresent()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.deliveryStartTimestamp = try reader["DeliveryStartTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension FirehoseClientTypes.DeliveryStreamEncryptionConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.DeliveryStreamEncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.DeliveryStreamEncryptionConfiguration()
        value.keyARN = try reader["KeyARN"].readIfPresent()
        value.keyType = try reader["KeyType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.failureDescription = try reader["FailureDescription"].readIfPresent(with: FirehoseClientTypes.FailureDescription.read(from:))
        return value
    }
}

extension FirehoseClientTypes.FailureDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.FailureDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.FailureDescription()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.details = try reader["Details"].readIfPresent() ?? ""
        return value
    }
}

extension FirehoseClientTypes.Tag {

    static func write(value: FirehoseClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.PutRecordBatchResponseEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> FirehoseClientTypes.PutRecordBatchResponseEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FirehoseClientTypes.PutRecordBatchResponseEntry()
        value.recordId = try reader["RecordId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension FirehoseClientTypes.KinesisStreamSourceConfiguration {

    static func write(value: FirehoseClientTypes.KinesisStreamSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KinesisStreamARN"].write(value.kinesisStreamARN)
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput {

    static func write(value: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyARN"].write(value.keyARN)
        try writer["KeyType"].write(value.keyType)
    }
}

extension FirehoseClientTypes.S3DestinationConfiguration {

    static func write(value: FirehoseClientTypes.S3DestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketARN"].write(value.bucketARN)
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.BufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CompressionFormat"].write(value.compressionFormat)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: FirehoseClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["ErrorOutputPrefix"].write(value.errorOutputPrefix)
        try writer["Prefix"].write(value.`prefix`)
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension FirehoseClientTypes.ExtendedS3DestinationConfiguration {

    static func write(value: FirehoseClientTypes.ExtendedS3DestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketARN"].write(value.bucketARN)
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.BufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CompressionFormat"].write(value.compressionFormat)
        try writer["CustomTimeZone"].write(value.customTimeZone)
        try writer["DataFormatConversionConfiguration"].write(value.dataFormatConversionConfiguration, with: FirehoseClientTypes.DataFormatConversionConfiguration.write(value:to:))
        try writer["DynamicPartitioningConfiguration"].write(value.dynamicPartitioningConfiguration, with: FirehoseClientTypes.DynamicPartitioningConfiguration.write(value:to:))
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: FirehoseClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["ErrorOutputPrefix"].write(value.errorOutputPrefix)
        try writer["FileExtension"].write(value.fileExtension)
        try writer["Prefix"].write(value.`prefix`)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupConfiguration"].write(value.s3BackupConfiguration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["S3BackupMode"].write(value.s3BackupMode)
    }
}

extension FirehoseClientTypes.RedshiftDestinationConfiguration {

    static func write(value: FirehoseClientTypes.RedshiftDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterJDBCURL"].write(value.clusterJDBCURL)
        try writer["CopyCommand"].write(value.copyCommand, with: FirehoseClientTypes.CopyCommand.write(value:to:))
        try writer["Password"].write(value.password)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.RedshiftRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupConfiguration"].write(value.s3BackupConfiguration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension FirehoseClientTypes.ElasticsearchDestinationConfiguration {

    static func write(value: FirehoseClientTypes.ElasticsearchDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.ElasticsearchBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterEndpoint"].write(value.clusterEndpoint)
        try writer["DocumentIdOptions"].write(value.documentIdOptions, with: FirehoseClientTypes.DocumentIdOptions.write(value:to:))
        try writer["DomainARN"].write(value.domainARN)
        try writer["IndexName"].write(value.indexName)
        try writer["IndexRotationPeriod"].write(value.indexRotationPeriod)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.ElasticsearchRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["TypeName"].write(value.typeName)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: FirehoseClientTypes.VpcConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.VpcConfiguration {

    static func write(value: FirehoseClientTypes.VpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RoleARN"].write(value.roleARN)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration {

    static func write(value: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.AmazonopensearchserviceBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterEndpoint"].write(value.clusterEndpoint)
        try writer["DocumentIdOptions"].write(value.documentIdOptions, with: FirehoseClientTypes.DocumentIdOptions.write(value:to:))
        try writer["DomainARN"].write(value.domainARN)
        try writer["IndexName"].write(value.indexName)
        try writer["IndexRotationPeriod"].write(value.indexRotationPeriod)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.AmazonopensearchserviceRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["TypeName"].write(value.typeName)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: FirehoseClientTypes.VpcConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.SplunkDestinationConfiguration {

    static func write(value: FirehoseClientTypes.SplunkDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.SplunkBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["HECAcknowledgmentTimeoutInSeconds"].write(value.hecAcknowledgmentTimeoutInSeconds)
        try writer["HECEndpoint"].write(value.hecEndpoint)
        try writer["HECEndpointType"].write(value.hecEndpointType)
        try writer["HECToken"].write(value.hecToken)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.SplunkRetryOptions.write(value:to:))
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.HttpEndpointDestinationConfiguration {

    static func write(value: FirehoseClientTypes.HttpEndpointDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.HttpEndpointBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["EndpointConfiguration"].write(value.endpointConfiguration, with: FirehoseClientTypes.HttpEndpointConfiguration.write(value:to:))
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RequestConfiguration"].write(value.requestConfiguration, with: FirehoseClientTypes.HttpEndpointRequestConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.HttpEndpointRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.HttpEndpointConfiguration {

    static func write(value: FirehoseClientTypes.HttpEndpointConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessKey"].write(value.accessKey)
        try writer["Name"].write(value.name)
        try writer["Url"].write(value.url)
    }
}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration {

    static func write(value: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CollectionEndpoint"].write(value.collectionEndpoint)
        try writer["IndexName"].write(value.indexName)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: FirehoseClientTypes.VpcConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.MSKSourceConfiguration {

    static func write(value: FirehoseClientTypes.MSKSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationConfiguration"].write(value.authenticationConfiguration, with: FirehoseClientTypes.AuthenticationConfiguration.write(value:to:))
        try writer["MSKClusterARN"].write(value.mskClusterARN)
        try writer["TopicName"].write(value.topicName)
    }
}

extension FirehoseClientTypes.SnowflakeDestinationConfiguration {

    static func write(value: FirehoseClientTypes.SnowflakeDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountUrl"].write(value.accountUrl)
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ContentColumnName"].write(value.contentColumnName)
        try writer["DataLoadingOption"].write(value.dataLoadingOption)
        try writer["Database"].write(value.database)
        try writer["KeyPassphrase"].write(value.keyPassphrase)
        try writer["MetaDataColumnName"].write(value.metaDataColumnName)
        try writer["PrivateKey"].write(value.privateKey)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.SnowflakeRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Configuration"].write(value.s3Configuration, with: FirehoseClientTypes.S3DestinationConfiguration.write(value:to:))
        try writer["Schema"].write(value.schema)
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
        try writer["SnowflakeRoleConfiguration"].write(value.snowflakeRoleConfiguration, with: FirehoseClientTypes.SnowflakeRoleConfiguration.write(value:to:))
        try writer["SnowflakeVpcConfiguration"].write(value.snowflakeVpcConfiguration, with: FirehoseClientTypes.SnowflakeVpcConfiguration.write(value:to:))
        try writer["Table"].write(value.table)
        try writer["User"].write(value.user)
    }
}

extension FirehoseClientTypes.Record {

    static func write(value: FirehoseClientTypes.Record?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
    }
}

extension FirehoseClientTypes.S3DestinationUpdate {

    static func write(value: FirehoseClientTypes.S3DestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketARN"].write(value.bucketARN)
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.BufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CompressionFormat"].write(value.compressionFormat)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: FirehoseClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["ErrorOutputPrefix"].write(value.errorOutputPrefix)
        try writer["Prefix"].write(value.`prefix`)
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension FirehoseClientTypes.ExtendedS3DestinationUpdate {

    static func write(value: FirehoseClientTypes.ExtendedS3DestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketARN"].write(value.bucketARN)
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.BufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CompressionFormat"].write(value.compressionFormat)
        try writer["CustomTimeZone"].write(value.customTimeZone)
        try writer["DataFormatConversionConfiguration"].write(value.dataFormatConversionConfiguration, with: FirehoseClientTypes.DataFormatConversionConfiguration.write(value:to:))
        try writer["DynamicPartitioningConfiguration"].write(value.dynamicPartitioningConfiguration, with: FirehoseClientTypes.DynamicPartitioningConfiguration.write(value:to:))
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: FirehoseClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["ErrorOutputPrefix"].write(value.errorOutputPrefix)
        try writer["FileExtension"].write(value.fileExtension)
        try writer["Prefix"].write(value.`prefix`)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3BackupUpdate"].write(value.s3BackupUpdate, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
    }
}

extension FirehoseClientTypes.RedshiftDestinationUpdate {

    static func write(value: FirehoseClientTypes.RedshiftDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterJDBCURL"].write(value.clusterJDBCURL)
        try writer["CopyCommand"].write(value.copyCommand, with: FirehoseClientTypes.CopyCommand.write(value:to:))
        try writer["Password"].write(value.password)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.RedshiftRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3BackupUpdate"].write(value.s3BackupUpdate, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension FirehoseClientTypes.ElasticsearchDestinationUpdate {

    static func write(value: FirehoseClientTypes.ElasticsearchDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.ElasticsearchBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterEndpoint"].write(value.clusterEndpoint)
        try writer["DocumentIdOptions"].write(value.documentIdOptions, with: FirehoseClientTypes.DocumentIdOptions.write(value:to:))
        try writer["DomainARN"].write(value.domainARN)
        try writer["IndexName"].write(value.indexName)
        try writer["IndexRotationPeriod"].write(value.indexRotationPeriod)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.ElasticsearchRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["TypeName"].write(value.typeName)
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate {

    static func write(value: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.AmazonopensearchserviceBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ClusterEndpoint"].write(value.clusterEndpoint)
        try writer["DocumentIdOptions"].write(value.documentIdOptions, with: FirehoseClientTypes.DocumentIdOptions.write(value:to:))
        try writer["DomainARN"].write(value.domainARN)
        try writer["IndexName"].write(value.indexName)
        try writer["IndexRotationPeriod"].write(value.indexRotationPeriod)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.AmazonopensearchserviceRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["TypeName"].write(value.typeName)
    }
}

extension FirehoseClientTypes.SplunkDestinationUpdate {

    static func write(value: FirehoseClientTypes.SplunkDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.SplunkBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["HECAcknowledgmentTimeoutInSeconds"].write(value.hecAcknowledgmentTimeoutInSeconds)
        try writer["HECEndpoint"].write(value.hecEndpoint)
        try writer["HECEndpointType"].write(value.hecEndpointType)
        try writer["HECToken"].write(value.hecToken)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.SplunkRetryOptions.write(value:to:))
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.HttpEndpointDestinationUpdate {

    static func write(value: FirehoseClientTypes.HttpEndpointDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.HttpEndpointBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["EndpointConfiguration"].write(value.endpointConfiguration, with: FirehoseClientTypes.HttpEndpointConfiguration.write(value:to:))
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RequestConfiguration"].write(value.requestConfiguration, with: FirehoseClientTypes.HttpEndpointRequestConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.HttpEndpointRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
    }
}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate {

    static func write(value: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BufferingHints"].write(value.bufferingHints, with: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.write(value:to:))
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["CollectionEndpoint"].write(value.collectionEndpoint)
        try writer["IndexName"].write(value.indexName)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
    }
}

extension FirehoseClientTypes.SnowflakeDestinationUpdate {

    static func write(value: FirehoseClientTypes.SnowflakeDestinationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountUrl"].write(value.accountUrl)
        try writer["CloudWatchLoggingOptions"].write(value.cloudWatchLoggingOptions, with: FirehoseClientTypes.CloudWatchLoggingOptions.write(value:to:))
        try writer["ContentColumnName"].write(value.contentColumnName)
        try writer["DataLoadingOption"].write(value.dataLoadingOption)
        try writer["Database"].write(value.database)
        try writer["KeyPassphrase"].write(value.keyPassphrase)
        try writer["MetaDataColumnName"].write(value.metaDataColumnName)
        try writer["PrivateKey"].write(value.privateKey)
        try writer["ProcessingConfiguration"].write(value.processingConfiguration, with: FirehoseClientTypes.ProcessingConfiguration.write(value:to:))
        try writer["RetryOptions"].write(value.retryOptions, with: FirehoseClientTypes.SnowflakeRetryOptions.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
        try writer["S3BackupMode"].write(value.s3BackupMode)
        try writer["S3Update"].write(value.s3Update, with: FirehoseClientTypes.S3DestinationUpdate.write(value:to:))
        try writer["Schema"].write(value.schema)
        try writer["SecretsManagerConfiguration"].write(value.secretsManagerConfiguration, with: FirehoseClientTypes.SecretsManagerConfiguration.write(value:to:))
        try writer["SnowflakeRoleConfiguration"].write(value.snowflakeRoleConfiguration, with: FirehoseClientTypes.SnowflakeRoleConfiguration.write(value:to:))
        try writer["Table"].write(value.table)
        try writer["User"].write(value.user)
    }
}

public enum FirehoseClientTypes {}
