// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intervalInSeconds = "IntervalInSeconds"
        case sizeInMBs = "SizeInMBs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intervalInSeconds = self.intervalInSeconds {
            try encodeContainer.encode(intervalInSeconds, forKey: .intervalInSeconds)
        }
        if let sizeInMBs = self.sizeInMBs {
            try encodeContainer.encode(sizeInMBs, forKey: .sizeInMBs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalInSeconds)
        intervalInSeconds = intervalInSecondsDecoded
        let sizeInMBsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMBs)
        sizeInMBs = sizeInMBsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Serverless offering for Amazon OpenSearch Service destination.
    public struct AmazonOpenSearchServerlessBufferingHints: Swift.Equatable {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init (
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case collectionEndpoint = "CollectionEndpoint"
        case indexName = "IndexName"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let collectionEndpoint = self.collectionEndpoint {
            try encodeContainer.encode(collectionEndpoint, forKey: .collectionEndpoint)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let collectionEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionEndpoint)
        collectionEndpoint = collectionEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationConfiguration: Swift.Equatable {
        /// The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Kinesis Data Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
        public var s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case collectionEndpoint = "CollectionEndpoint"
        case indexName = "IndexName"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
        case vpcConfigurationDescription = "VpcConfigurationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let collectionEndpoint = self.collectionEndpoint {
            try encodeContainer.encode(collectionEndpoint, forKey: .collectionEndpoint)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let vpcConfigurationDescription = self.vpcConfigurationDescription {
            try encodeContainer.encode(vpcConfigurationDescription, forKey: .vpcConfigurationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let collectionEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionEndpoint)
        collectionEndpoint = collectionEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfigurationDescription.self, forKey: .vpcConfigurationDescription)
        vpcConfigurationDescription = vpcConfigurationDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// The destination description in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationDescription: Swift.Equatable {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Serverless offering for Amazon OpenSearch Service retry options.
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials.
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonOpenSearchServerlessS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case collectionEndpoint = "CollectionEndpoint"
        case indexName = "IndexName"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3Update = "S3Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let collectionEndpoint = self.collectionEndpoint {
            try encodeContainer.encode(collectionEndpoint, forKey: .collectionEndpoint)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let collectionEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionEndpoint)
        collectionEndpoint = collectionEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessDestinationUpdate: Swift.Equatable {
        /// The buffering options. If no value is specified, AmazonopensearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
        public var collectionEndpoint: Swift.String?
        /// The Serverless offering for Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.
        public var roleARN: Swift.String?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonOpenSearchServerlessBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            collectionEndpoint: Swift.String? = nil,
            indexName: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.collectionEndpoint = collectionEndpoint
            self.indexName = indexName
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
        }
    }

}

extension FirehoseClientTypes.AmazonOpenSearchServerlessRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service.
    public struct AmazonOpenSearchServerlessRetryOptions: Swift.Equatable {
        /// After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time during which Kinesis Data Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum AmazonOpenSearchServerlessS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonOpenSearchServerlessS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AmazonOpenSearchServerlessS3BackupMode(rawValue: rawValue) ?? AmazonOpenSearchServerlessS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceBufferingHints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intervalInSeconds = "IntervalInSeconds"
        case sizeInMBs = "SizeInMBs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intervalInSeconds = self.intervalInSeconds {
            try encodeContainer.encode(intervalInSeconds, forKey: .intervalInSeconds)
        }
        if let sizeInMBs = self.sizeInMBs {
            try encodeContainer.encode(sizeInMBs, forKey: .sizeInMBs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalInSeconds)
        intervalInSeconds = intervalInSecondsDecoded
        let sizeInMBsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMBs)
        sizeInMBs = sizeInMBsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Amazon OpenSearch Service destination.
    public struct AmazonopensearchserviceBufferingHints: Swift.Equatable {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init (
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
        case typeName = "TypeName"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon OpenSearch Service
    public struct AmazonopensearchserviceDestinationConfiguration: Swift.Equatable {
        /// The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon OpenSearch Service domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN.
        public var domainARN: Swift.String?
        /// The ElasticsearAmazon OpenSearch Service index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data.
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon OpenSearch Service Configuration API and for indexing documents.
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Kinesis Data Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
        public var s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon OpenSearch Service type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during run time.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            typeName: Swift.String? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.typeName = typeName
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
        case typeName = "TypeName"
        case vpcConfigurationDescription = "VpcConfigurationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let vpcConfigurationDescription = self.vpcConfigurationDescription {
            try encodeContainer.encode(vpcConfigurationDescription, forKey: .vpcConfigurationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfigurationDescription.self, forKey: .vpcConfigurationDescription)
        vpcConfigurationDescription = vpcConfigurationDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// The destination description in Amazon OpenSearch Service.
    public struct AmazonopensearchserviceDestinationDescription: Swift.Equatable {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Kinesis Data Firehose uses either this ClusterEndpoint or the DomainARN field to send data to Amazon OpenSearch Service.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon OpenSearch Service domain.
        public var domainARN: Swift.String?
        /// The Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon OpenSearch Service retry options.
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials.
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon OpenSearch Service type name. This applies to Elasticsearch 6.x and lower versions. For Elasticsearch 7.x and OpenSearch Service 1.x, there's no value for TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.AmazonopensearchserviceS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            typeName: Swift.String? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.typeName = typeName
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3Update = "S3Update"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon OpenSearch Service.
    public struct AmazonopensearchserviceDestinationUpdate: Swift.Equatable {
        /// The buffering options. If no value is specified, AmazonopensearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon OpenSearch Service domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the IAM role specified in RoleARN.
        public var domainARN: Swift.String?
        /// The Amazon OpenSearch Service index name.
        public var indexName: Swift.String?
        /// The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to IndexName to facilitate the expiration of old data.
        public var indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon OpenSearch Service Configuration API and for indexing documents.
        public var roleARN: Swift.String?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The Amazon OpenSearch Service type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during runtime. If you upgrade Elasticsearch from 6.x to 7.x and don’t update your delivery stream, Kinesis Data Firehose still delivers data to Elasticsearch with the old index name and type name. If you want to update your delivery stream with a new index name, provide an empty string for TypeName.
        public var typeName: Swift.String?

        public init (
            bufferingHints: FirehoseClientTypes.AmazonopensearchserviceBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.AmazonopensearchserviceIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.AmazonopensearchserviceRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.typeName = typeName
        }
    }

}

extension FirehoseClientTypes {
    public enum AmazonopensearchserviceIndexRotationPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case norotation
        case oneday
        case onehour
        case onemonth
        case oneweek
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonopensearchserviceIndexRotationPeriod] {
            return [
                .norotation,
                .oneday,
                .onehour,
                .onemonth,
                .oneweek,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .norotation: return "NoRotation"
            case .oneday: return "OneDay"
            case .onehour: return "OneHour"
            case .onemonth: return "OneMonth"
            case .oneweek: return "OneWeek"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AmazonopensearchserviceIndexRotationPeriod(rawValue: rawValue) ?? AmazonopensearchserviceIndexRotationPeriod.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.AmazonopensearchserviceRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service.
    public struct AmazonopensearchserviceRetryOptions: Swift.Equatable {
        /// After an initial failure to deliver to Amazon OpenSearch Service, the total amount of time during which Kinesis Data Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum AmazonopensearchserviceS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [AmazonopensearchserviceS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AmazonopensearchserviceS3BackupMode(rawValue: rawValue) ?? AmazonopensearchserviceS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.BufferingHints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intervalInSeconds = "IntervalInSeconds"
        case sizeInMBs = "SizeInMBs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intervalInSeconds = self.intervalInSeconds {
            try encodeContainer.encode(intervalInSeconds, forKey: .intervalInSeconds)
        }
        if let sizeInMBs = self.sizeInMBs {
            try encodeContainer.encode(sizeInMBs, forKey: .sizeInMBs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeInMBsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMBs)
        sizeInMBs = sizeInMBsDecoded
        let intervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalInSeconds)
        intervalInSeconds = intervalInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
    public struct BufferingHints: Swift.Equatable {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300. This parameter is optional but if you specify a value for it, you must also specify a value for SizeInMBs, and vice versa.
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MiBs, before delivering it to the destination. The default value is 5. This parameter is optional but if you specify a value for it, you must also specify a value for IntervalInSeconds, and vice versa. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MiB/sec, the value should be 10 MiB or higher.
        public var sizeInMBs: Swift.Int?

        public init (
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes.CloudWatchLoggingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case logGroupName = "LogGroupName"
        case logStreamName = "LogStreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the Amazon CloudWatch logging options for your delivery stream.
    public struct CloudWatchLoggingOptions: Swift.Equatable {
        /// Enables or disables CloudWatch logging.
        public var enabled: Swift.Bool?
        /// The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
        public var logGroupName: Swift.String?
        /// The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
        public var logStreamName: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            logGroupName: Swift.String? = nil,
            logStreamName: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }
    }

}

extension FirehoseClientTypes {
    public enum CompressionFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case hadoopSnappy
        case snappy
        case uncompressed
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionFormat] {
            return [
                .gzip,
                .hadoopSnappy,
                .snappy,
                .uncompressed,
                .zip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .hadoopSnappy: return "HADOOP_SNAPPY"
            case .snappy: return "Snappy"
            case .uncompressed: return "UNCOMPRESSED"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompressionFormat(rawValue: rawValue) ?? CompressionFormat.sdkUnknown(rawValue)
        }
    }
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Another modification has already happened. Fetch VersionId again and use it to update the destination.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FirehoseClientTypes {
    public enum ContentEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentEncoding] {
            return [
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentEncoding(rawValue: rawValue) ?? ContentEncoding.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.CopyCommand: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyOptions = "CopyOptions"
        case dataTableColumns = "DataTableColumns"
        case dataTableName = "DataTableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyOptions = self.copyOptions {
            try encodeContainer.encode(copyOptions, forKey: .copyOptions)
        }
        if let dataTableColumns = self.dataTableColumns {
            try encodeContainer.encode(dataTableColumns, forKey: .dataTableColumns)
        }
        if let dataTableName = self.dataTableName {
            try encodeContainer.encode(dataTableName, forKey: .dataTableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataTableName)
        dataTableName = dataTableNameDecoded
        let dataTableColumnsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataTableColumns)
        dataTableColumns = dataTableColumnsDecoded
        let copyOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .copyOptions)
        copyOptions = copyOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes a COPY command for Amazon Redshift.
    public struct CopyCommand: Swift.Equatable {
        /// Optional parameters to use with the Amazon Redshift COPY command. For more information, see the "Optional Parameters" section of [Amazon Redshift COPY command](https://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html). Some possible examples that would apply to Kinesis Data Firehose are as follows: delimiter '\t' lzop; - fields are delimited with "\t" (TAB character) and compressed using lzop. delimiter '|' - fields are delimited with "|" (this is the default delimiter). delimiter '|' escape - the delimiter should be escaped. fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6' - fields are fixed width in the source, with each width specified after every column in the table. JSON 's3://mybucket/jsonpaths.txt' - data is in JSON format, and the path specified is the format of the data. For more examples, see [Amazon Redshift COPY command examples](https://docs.aws.amazon.com/redshift/latest/dg/r_COPY_command_examples.html).
        public var copyOptions: Swift.String?
        /// A comma-separated list of column names.
        public var dataTableColumns: Swift.String?
        /// The name of the target table. The table must already exist in the database.
        /// This member is required.
        public var dataTableName: Swift.String?

        public init (
            copyOptions: Swift.String? = nil,
            dataTableColumns: Swift.String? = nil,
            dataTableName: Swift.String? = nil
        )
        {
            self.copyOptions = copyOptions
            self.dataTableColumns = dataTableColumns
            self.dataTableName = dataTableName
        }
    }

}

extension CreateDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonOpenSearchServerlessDestinationConfiguration = "AmazonOpenSearchServerlessDestinationConfiguration"
        case amazonopensearchserviceDestinationConfiguration = "AmazonopensearchserviceDestinationConfiguration"
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonOpenSearchServerlessDestinationConfiguration = self.amazonOpenSearchServerlessDestinationConfiguration {
            try encodeContainer.encode(amazonOpenSearchServerlessDestinationConfiguration, forKey: .amazonOpenSearchServerlessDestinationConfiguration)
        }
        if let amazonopensearchserviceDestinationConfiguration = self.amazonopensearchserviceDestinationConfiguration {
            try encodeContainer.encode(amazonopensearchserviceDestinationConfiguration, forKey: .amazonopensearchserviceDestinationConfiguration)
        }
        if let deliveryStreamEncryptionConfigurationInput = self.deliveryStreamEncryptionConfigurationInput {
            try encodeContainer.encode(deliveryStreamEncryptionConfigurationInput, forKey: .deliveryStreamEncryptionConfigurationInput)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let deliveryStreamType = self.deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let elasticsearchDestinationConfiguration = self.elasticsearchDestinationConfiguration {
            try encodeContainer.encode(elasticsearchDestinationConfiguration, forKey: .elasticsearchDestinationConfiguration)
        }
        if let extendedS3DestinationConfiguration = self.extendedS3DestinationConfiguration {
            try encodeContainer.encode(extendedS3DestinationConfiguration, forKey: .extendedS3DestinationConfiguration)
        }
        if let httpEndpointDestinationConfiguration = self.httpEndpointDestinationConfiguration {
            try encodeContainer.encode(httpEndpointDestinationConfiguration, forKey: .httpEndpointDestinationConfiguration)
        }
        if let kinesisStreamSourceConfiguration = self.kinesisStreamSourceConfiguration {
            try encodeContainer.encode(kinesisStreamSourceConfiguration, forKey: .kinesisStreamSourceConfiguration)
        }
        if let redshiftDestinationConfiguration = self.redshiftDestinationConfiguration {
            try encodeContainer.encode(redshiftDestinationConfiguration, forKey: .redshiftDestinationConfiguration)
        }
        if let s3DestinationConfiguration = self.s3DestinationConfiguration {
            try encodeContainer.encode(s3DestinationConfiguration, forKey: .s3DestinationConfiguration)
        }
        if let splunkDestinationConfiguration = self.splunkDestinationConfiguration {
            try encodeContainer.encode(splunkDestinationConfiguration, forKey: .splunkDestinationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDeliveryStreamInput: Swift.Equatable {
    /// The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.
    public var amazonOpenSearchServerlessDestinationConfiguration: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration?
    /// The destination in Amazon OpenSearch Service. You can specify only one destination.
    public var amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration?
    /// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
    public var deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    /// The name of the delivery stream. This name must be unique per Amazon Web Services account in the same Amazon Web Services Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The delivery stream type. This parameter can be one of the following values:
    ///
    /// * DirectPut: Provider applications access the delivery stream directly.
    ///
    /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
    public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    /// The destination in Amazon ES. You can specify only one destination.
    public var elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration?
    /// The destination in Amazon S3. You can specify only one destination.
    public var extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration?
    /// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.
    public var httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration?
    /// When a Kinesis data stream is used as the source for the delivery stream, a [KinesisStreamSourceConfiguration] containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.
    public var kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration?
    /// The destination in Amazon Redshift. You can specify only one destination.
    public var redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration?
    /// [Deprecated] The destination in Amazon S3. You can specify only one destination.
    @available(*, deprecated)
    public var s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
    /// The destination in Splunk. You can specify only one destination.
    public var splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration?
    /// A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to Amazon Web Services resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide. You can specify up to 50 tags when creating a delivery stream.
    public var tags: [FirehoseClientTypes.Tag]?

    public init (
        amazonOpenSearchServerlessDestinationConfiguration: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration? = nil,
        amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration? = nil,
        deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput? = nil,
        deliveryStreamName: Swift.String? = nil,
        deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
        elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration? = nil,
        extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration? = nil,
        httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration? = nil,
        kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration? = nil,
        redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration? = nil,
        s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
        splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.amazonOpenSearchServerlessDestinationConfiguration = amazonOpenSearchServerlessDestinationConfiguration
        self.amazonopensearchserviceDestinationConfiguration = amazonopensearchserviceDestinationConfiguration
        self.deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput
        self.deliveryStreamName = deliveryStreamName
        self.deliveryStreamType = deliveryStreamType
        self.elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration
        self.extendedS3DestinationConfiguration = extendedS3DestinationConfiguration
        self.httpEndpointDestinationConfiguration = httpEndpointDestinationConfiguration
        self.kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration
        self.redshiftDestinationConfiguration = redshiftDestinationConfiguration
        self.s3DestinationConfiguration = s3DestinationConfiguration
        self.splunkDestinationConfiguration = splunkDestinationConfiguration
        self.tags = tags
    }
}

struct CreateDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    let kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration?
    let deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    let s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
    let extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration?
    let redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration?
    let elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration?
    let amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration?
    let splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration?
    let httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration?
    let tags: [FirehoseClientTypes.Tag]?
    let amazonOpenSearchServerlessDestinationConfiguration: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration?
}

extension CreateDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonOpenSearchServerlessDestinationConfiguration = "AmazonOpenSearchServerlessDestinationConfiguration"
        case amazonopensearchserviceDestinationConfiguration = "AmazonopensearchserviceDestinationConfiguration"
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let kinesisStreamSourceConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KinesisStreamSourceConfiguration.self, forKey: .kinesisStreamSourceConfiguration)
        kinesisStreamSourceConfiguration = kinesisStreamSourceConfigurationDecoded
        let deliveryStreamEncryptionConfigurationInputDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput.self, forKey: .deliveryStreamEncryptionConfigurationInput)
        deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInputDecoded
        let s3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3DestinationConfiguration)
        s3DestinationConfiguration = s3DestinationConfigurationDecoded
        let extendedS3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ExtendedS3DestinationConfiguration.self, forKey: .extendedS3DestinationConfiguration)
        extendedS3DestinationConfiguration = extendedS3DestinationConfigurationDecoded
        let redshiftDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftDestinationConfiguration.self, forKey: .redshiftDestinationConfiguration)
        redshiftDestinationConfiguration = redshiftDestinationConfigurationDecoded
        let elasticsearchDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchDestinationConfiguration.self, forKey: .elasticsearchDestinationConfiguration)
        elasticsearchDestinationConfiguration = elasticsearchDestinationConfigurationDecoded
        let amazonopensearchserviceDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration.self, forKey: .amazonopensearchserviceDestinationConfiguration)
        amazonopensearchserviceDestinationConfiguration = amazonopensearchserviceDestinationConfigurationDecoded
        let splunkDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkDestinationConfiguration.self, forKey: .splunkDestinationConfiguration)
        splunkDestinationConfiguration = splunkDestinationConfigurationDecoded
        let httpEndpointDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDestinationConfiguration.self, forKey: .httpEndpointDestinationConfiguration)
        httpEndpointDestinationConfiguration = httpEndpointDestinationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FirehoseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FirehoseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let amazonOpenSearchServerlessDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessDestinationConfiguration.self, forKey: .amazonOpenSearchServerlessDestinationConfiguration)
        amazonOpenSearchServerlessDestinationConfiguration = amazonOpenSearchServerlessDestinationConfigurationDecoded
    }
}

extension CreateDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSResourceException" : self = .invalidKMSResourceException(try InvalidKMSResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case invalidKMSResourceException(InvalidKMSResourceException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeliveryStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliveryStreamARN = output.deliveryStreamARN
        } else {
            self.deliveryStreamARN = nil
        }
    }
}

public struct CreateDeliveryStreamOutputResponse: Swift.Equatable {
    /// The ARN of the delivery stream.
    public var deliveryStreamARN: Swift.String?

    public init (
        deliveryStreamARN: Swift.String? = nil
    )
    {
        self.deliveryStreamARN = deliveryStreamARN
    }
}

struct CreateDeliveryStreamOutputResponseBody: Swift.Equatable {
    let deliveryStreamARN: Swift.String?
}

extension CreateDeliveryStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamARN = "DeliveryStreamARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamARN)
        deliveryStreamARN = deliveryStreamARNDecoded
    }
}

extension FirehoseClientTypes.DataFormatConversionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case inputFormatConfiguration = "InputFormatConfiguration"
        case outputFormatConfiguration = "OutputFormatConfiguration"
        case schemaConfiguration = "SchemaConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let inputFormatConfiguration = self.inputFormatConfiguration {
            try encodeContainer.encode(inputFormatConfiguration, forKey: .inputFormatConfiguration)
        }
        if let outputFormatConfiguration = self.outputFormatConfiguration {
            try encodeContainer.encode(outputFormatConfiguration, forKey: .outputFormatConfiguration)
        }
        if let schemaConfiguration = self.schemaConfiguration {
            try encodeContainer.encode(schemaConfiguration, forKey: .schemaConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SchemaConfiguration.self, forKey: .schemaConfiguration)
        schemaConfiguration = schemaConfigurationDecoded
        let inputFormatConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.InputFormatConfiguration.self, forKey: .inputFormatConfiguration)
        inputFormatConfiguration = inputFormatConfigurationDecoded
        let outputFormatConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.OutputFormatConfiguration.self, forKey: .outputFormatConfiguration)
        outputFormatConfiguration = outputFormatConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension FirehoseClientTypes {
    /// Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see [Kinesis Data Firehose Record Format Conversion](https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
    public struct DataFormatConversionConfiguration: Swift.Equatable {
        /// Defaults to true. Set it to false if you want to disable format conversion while preserving the configuration details.
        public var enabled: Swift.Bool?
        /// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. This parameter is required if Enabled is set to true.
        public var inputFormatConfiguration: FirehoseClientTypes.InputFormatConfiguration?
        /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. This parameter is required if Enabled is set to true.
        public var outputFormatConfiguration: FirehoseClientTypes.OutputFormatConfiguration?
        /// Specifies the Amazon Web Services Glue Data Catalog table that contains the column information. This parameter is required if Enabled is set to true.
        public var schemaConfiguration: FirehoseClientTypes.SchemaConfiguration?

        public init (
            enabled: Swift.Bool? = nil,
            inputFormatConfiguration: FirehoseClientTypes.InputFormatConfiguration? = nil,
            outputFormatConfiguration: FirehoseClientTypes.OutputFormatConfiguration? = nil,
            schemaConfiguration: FirehoseClientTypes.SchemaConfiguration? = nil
        )
        {
            self.enabled = enabled
            self.inputFormatConfiguration = inputFormatConfiguration
            self.outputFormatConfiguration = outputFormatConfiguration
            self.schemaConfiguration = schemaConfiguration
        }
    }

}

extension DeleteDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowForceDelete = "AllowForceDelete"
        case deliveryStreamName = "DeliveryStreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowForceDelete = self.allowForceDelete {
            try encodeContainer.encode(allowForceDelete, forKey: .allowForceDelete)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
    }
}

extension DeleteDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeliveryStreamInput: Swift.Equatable {
    /// Set this to true if you want to delete the delivery stream even if Kinesis Data Firehose is unable to retire the grant for the CMK. Kinesis Data Firehose might be unable to retire the grant due to a customer error, such as when the CMK or the grant are in an invalid state. If you force deletion, you can then use the [RevokeGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html) operation to revoke the grant you gave to Kinesis Data Firehose. If a failure to retire the grant happens due to an Amazon Web Services KMS issue, Kinesis Data Firehose keeps retrying the delete operation. The default value is false.
    public var allowForceDelete: Swift.Bool?
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init (
        allowForceDelete: Swift.Bool? = nil,
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.allowForceDelete = allowForceDelete
        self.deliveryStreamName = deliveryStreamName
    }
}

struct DeleteDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let allowForceDelete: Swift.Bool?
}

extension DeleteDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowForceDelete = "AllowForceDelete"
        case deliveryStreamName = "DeliveryStreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let allowForceDeleteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowForceDelete)
        allowForceDelete = allowForceDeleteDecoded
    }
}

extension DeleteDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDeliveryStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension FirehoseClientTypes.DeliveryStreamDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTimestamp = "CreateTimestamp"
        case deliveryStreamARN = "DeliveryStreamARN"
        case deliveryStreamEncryptionConfiguration = "DeliveryStreamEncryptionConfiguration"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamStatus = "DeliveryStreamStatus"
        case deliveryStreamType = "DeliveryStreamType"
        case destinations = "Destinations"
        case failureDescription = "FailureDescription"
        case hasMoreDestinations = "HasMoreDestinations"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case source = "Source"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encodeTimestamp(createTimestamp, format: .epochSeconds, forKey: .createTimestamp)
        }
        if let deliveryStreamARN = self.deliveryStreamARN {
            try encodeContainer.encode(deliveryStreamARN, forKey: .deliveryStreamARN)
        }
        if let deliveryStreamEncryptionConfiguration = self.deliveryStreamEncryptionConfiguration {
            try encodeContainer.encode(deliveryStreamEncryptionConfiguration, forKey: .deliveryStreamEncryptionConfiguration)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let deliveryStreamStatus = self.deliveryStreamStatus {
            try encodeContainer.encode(deliveryStreamStatus.rawValue, forKey: .deliveryStreamStatus)
        }
        if let deliveryStreamType = self.deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for destinationdescription0 in destinations {
                try destinationsContainer.encode(destinationdescription0)
            }
        }
        if let failureDescription = self.failureDescription {
            try encodeContainer.encode(failureDescription, forKey: .failureDescription)
        }
        if let hasMoreDestinations = self.hasMoreDestinations {
            try encodeContainer.encode(hasMoreDestinations, forKey: .hasMoreDestinations)
        }
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdateTimestamp, format: .epochSeconds, forKey: .lastUpdateTimestamp)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let versionId = self.versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamARN)
        deliveryStreamARN = deliveryStreamARNDecoded
        let deliveryStreamStatusDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamStatus.self, forKey: .deliveryStreamStatus)
        deliveryStreamStatus = deliveryStreamStatusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.FailureDescription.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
        let deliveryStreamEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionConfiguration.self, forKey: .deliveryStreamEncryptionConfiguration)
        deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfigurationDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let createTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SourceDescription.self, forKey: .source)
        source = sourceDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.DestinationDescription?].self, forKey: .destinations)
        var destinationsDecoded0:[FirehoseClientTypes.DestinationDescription]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [FirehoseClientTypes.DestinationDescription]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let hasMoreDestinationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreDestinations)
        hasMoreDestinations = hasMoreDestinationsDecoded
    }
}

extension FirehoseClientTypes {
    /// Contains information about a delivery stream.
    public struct DeliveryStreamDescription: Swift.Equatable {
        /// The date and time that the delivery stream was created.
        public var createTimestamp: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the delivery stream. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var deliveryStreamARN: Swift.String?
        /// Indicates the server-side encryption (SSE) status for the delivery stream.
        public var deliveryStreamEncryptionConfiguration: FirehoseClientTypes.DeliveryStreamEncryptionConfiguration?
        /// The name of the delivery stream.
        /// This member is required.
        public var deliveryStreamName: Swift.String?
        /// The status of the delivery stream. If the status of a delivery stream is CREATING_FAILED, this status doesn't change, and you can't invoke CreateDeliveryStream again on it. However, you can invoke the [DeleteDeliveryStream] operation to delete it.
        /// This member is required.
        public var deliveryStreamStatus: FirehoseClientTypes.DeliveryStreamStatus?
        /// The delivery stream type. This can be one of the following values:
        ///
        /// * DirectPut: Provider applications access the delivery stream directly.
        ///
        /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
        /// This member is required.
        public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
        /// The destinations.
        /// This member is required.
        public var destinations: [FirehoseClientTypes.DestinationDescription]?
        /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
        public var failureDescription: FirehoseClientTypes.FailureDescription?
        /// Indicates whether there are more destinations available to list.
        /// This member is required.
        public var hasMoreDestinations: Swift.Bool?
        /// The date and time that the delivery stream was last updated.
        public var lastUpdateTimestamp: ClientRuntime.Date?
        /// If the DeliveryStreamType parameter is KinesisStreamAsSource, a [SourceDescription] object describing the source Kinesis data stream.
        public var source: FirehoseClientTypes.SourceDescription?
        /// Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
        /// This member is required.
        public var versionId: Swift.String?

        public init (
            createTimestamp: ClientRuntime.Date? = nil,
            deliveryStreamARN: Swift.String? = nil,
            deliveryStreamEncryptionConfiguration: FirehoseClientTypes.DeliveryStreamEncryptionConfiguration? = nil,
            deliveryStreamName: Swift.String? = nil,
            deliveryStreamStatus: FirehoseClientTypes.DeliveryStreamStatus? = nil,
            deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
            destinations: [FirehoseClientTypes.DestinationDescription]? = nil,
            failureDescription: FirehoseClientTypes.FailureDescription? = nil,
            hasMoreDestinations: Swift.Bool? = nil,
            lastUpdateTimestamp: ClientRuntime.Date? = nil,
            source: FirehoseClientTypes.SourceDescription? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.createTimestamp = createTimestamp
            self.deliveryStreamARN = deliveryStreamARN
            self.deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfiguration
            self.deliveryStreamName = deliveryStreamName
            self.deliveryStreamStatus = deliveryStreamStatus
            self.deliveryStreamType = deliveryStreamType
            self.destinations = destinations
            self.failureDescription = failureDescription
            self.hasMoreDestinations = hasMoreDestinations
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.source = source
            self.versionId = versionId
        }
    }

}

extension FirehoseClientTypes.DeliveryStreamEncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureDescription = "FailureDescription"
        case keyARN = "KeyARN"
        case keyType = "KeyType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDescription = self.failureDescription {
            try encodeContainer.encode(failureDescription, forKey: .failureDescription)
        }
        if let keyARN = self.keyARN {
            try encodeContainer.encode(keyARN, forKey: .keyARN)
        }
        if let keyType = self.keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyARN)
        keyARN = keyARNDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionStatus.self, forKey: .status)
        status = statusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.FailureDescription.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// Contains information about the server-side encryption (SSE) status for the delivery stream, the type customer master key (CMK) in use, if any, and the ARN of the CMK. You can get DeliveryStreamEncryptionConfiguration by invoking the [DescribeDeliveryStream] operation.
    public struct DeliveryStreamEncryptionConfiguration: Swift.Equatable {
        /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
        public var failureDescription: FirehoseClientTypes.FailureDescription?
        /// If KeyType is CUSTOMER_MANAGED_CMK, this field contains the ARN of the customer managed CMK. If KeyType is Amazon Web Services_OWNED_CMK, DeliveryStreamEncryptionConfiguration doesn't contain a value for KeyARN.
        public var keyARN: Swift.String?
        /// Indicates the type of customer master key (CMK) that is used for encryption. The default setting is Amazon Web Services_OWNED_CMK. For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys).
        public var keyType: FirehoseClientTypes.KeyType?
        /// This is the server-side encryption (SSE) status for the delivery stream. For a full description of the different values of this status, see [StartDeliveryStreamEncryption] and [StopDeliveryStreamEncryption]. If this status is ENABLING_FAILED or DISABLING_FAILED, it is the status of the most recent attempt to enable or disable SSE, respectively.
        public var status: FirehoseClientTypes.DeliveryStreamEncryptionStatus?

        public init (
            failureDescription: FirehoseClientTypes.FailureDescription? = nil,
            keyARN: Swift.String? = nil,
            keyType: FirehoseClientTypes.KeyType? = nil,
            status: FirehoseClientTypes.DeliveryStreamEncryptionStatus? = nil
        )
        {
            self.failureDescription = failureDescription
            self.keyARN = keyARN
            self.keyType = keyType
            self.status = status
        }
    }

}

extension FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyARN = "KeyARN"
        case keyType = "KeyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyARN = self.keyARN {
            try encodeContainer.encode(keyARN, forKey: .keyARN)
        }
        if let keyType = self.keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyARN)
        keyARN = keyARNDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
    }
}

extension FirehoseClientTypes {
    /// Specifies the type and Amazon Resource Name (ARN) of the CMK to use for Server-Side Encryption (SSE).
    public struct DeliveryStreamEncryptionConfigurationInput: Swift.Equatable {
        /// If you set KeyType to CUSTOMER_MANAGED_CMK, you must specify the Amazon Resource Name (ARN) of the CMK. If you set KeyType to Amazon Web Services_OWNED_CMK, Kinesis Data Firehose uses a service-account CMK.
        public var keyARN: Swift.String?
        /// Indicates the type of customer master key (CMK) to use for encryption. The default setting is Amazon Web Services_OWNED_CMK. For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys). When you invoke [CreateDeliveryStream] or [StartDeliveryStreamEncryption] with KeyType set to CUSTOMER_MANAGED_CMK, Kinesis Data Firehose invokes the Amazon KMS operation [CreateGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateGrant.html) to create a grant that allows the Kinesis Data Firehose service to use the customer managed CMK to perform encryption and decryption. Kinesis Data Firehose manages that grant. When you invoke [StartDeliveryStreamEncryption] to change the CMK for a delivery stream that is encrypted with a customer managed CMK, Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. You can use a CMK of type CUSTOMER_MANAGED_CMK to encrypt up to 500 delivery streams. If a [CreateDeliveryStream] or [StartDeliveryStreamEncryption] operation exceeds this limit, Kinesis Data Firehose throws a LimitExceededException. To encrypt your delivery stream, use symmetric CMKs. Kinesis Data Firehose doesn't support asymmetric CMKs. For information about symmetric and asymmetric CMKs, see [About Symmetric and Asymmetric CMKs](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html) in the Amazon Web Services Key Management Service developer guide.
        /// This member is required.
        public var keyType: FirehoseClientTypes.KeyType?

        public init (
            keyARN: Swift.String? = nil,
            keyType: FirehoseClientTypes.KeyType? = nil
        )
        {
            self.keyARN = keyARN
            self.keyType = keyType
        }
    }

}

extension FirehoseClientTypes {
    public enum DeliveryStreamEncryptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case disablingFailed
        case enabled
        case enabling
        case enablingFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamEncryptionStatus] {
            return [
                .disabled,
                .disabling,
                .disablingFailed,
                .enabled,
                .enabling,
                .enablingFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .disablingFailed: return "DISABLING_FAILED"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .enablingFailed: return "ENABLING_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStreamEncryptionStatus(rawValue: rawValue) ?? DeliveryStreamEncryptionStatus.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes {
    public enum DeliveryStreamFailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createEniFailed
        case createKmsGrantFailed
        case deleteEniFailed
        case disabledKmsKey
        case eniAccessDenied
        case invalidKmsKey
        case kmsAccessDenied
        case kmsKeyNotFound
        case kmsOptInRequired
        case retireKmsGrantFailed
        case securityGroupAccessDenied
        case securityGroupNotFound
        case subnetAccessDenied
        case subnetNotFound
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamFailureType] {
            return [
                .createEniFailed,
                .createKmsGrantFailed,
                .deleteEniFailed,
                .disabledKmsKey,
                .eniAccessDenied,
                .invalidKmsKey,
                .kmsAccessDenied,
                .kmsKeyNotFound,
                .kmsOptInRequired,
                .retireKmsGrantFailed,
                .securityGroupAccessDenied,
                .securityGroupNotFound,
                .subnetAccessDenied,
                .subnetNotFound,
                .unknownError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createEniFailed: return "CREATE_ENI_FAILED"
            case .createKmsGrantFailed: return "CREATE_KMS_GRANT_FAILED"
            case .deleteEniFailed: return "DELETE_ENI_FAILED"
            case .disabledKmsKey: return "DISABLED_KMS_KEY"
            case .eniAccessDenied: return "ENI_ACCESS_DENIED"
            case .invalidKmsKey: return "INVALID_KMS_KEY"
            case .kmsAccessDenied: return "KMS_ACCESS_DENIED"
            case .kmsKeyNotFound: return "KMS_KEY_NOT_FOUND"
            case .kmsOptInRequired: return "KMS_OPT_IN_REQUIRED"
            case .retireKmsGrantFailed: return "RETIRE_KMS_GRANT_FAILED"
            case .securityGroupAccessDenied: return "SECURITY_GROUP_ACCESS_DENIED"
            case .securityGroupNotFound: return "SECURITY_GROUP_NOT_FOUND"
            case .subnetAccessDenied: return "SUBNET_ACCESS_DENIED"
            case .subnetNotFound: return "SUBNET_NOT_FOUND"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStreamFailureType(rawValue: rawValue) ?? DeliveryStreamFailureType.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes {
    public enum DeliveryStreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case creatingFailed
        case deleting
        case deletingFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamStatus] {
            return [
                .active,
                .creating,
                .creatingFailed,
                .deleting,
                .deletingFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .creatingFailed: return "CREATING_FAILED"
            case .deleting: return "DELETING"
            case .deletingFailed: return "DELETING_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStreamStatus(rawValue: rawValue) ?? DeliveryStreamStatus.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes {
    public enum DeliveryStreamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directput
        case kinesisstreamassource
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStreamType] {
            return [
                .directput,
                .kinesisstreamassource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directput: return "DirectPut"
            case .kinesisstreamassource: return "KinesisStreamAsSource"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStreamType(rawValue: rawValue) ?? DeliveryStreamType.sdkUnknown(rawValue)
        }
    }
}

extension DescribeDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case exclusiveStartDestinationId = "ExclusiveStartDestinationId"
        case limit = "Limit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let exclusiveStartDestinationId = self.exclusiveStartDestinationId {
            try encodeContainer.encode(exclusiveStartDestinationId, forKey: .exclusiveStartDestinationId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
    }
}

extension DescribeDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeliveryStreamInput: Swift.Equatable {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The ID of the destination to start returning the destination information. Kinesis Data Firehose supports one destination per delivery stream.
    public var exclusiveStartDestinationId: Swift.String?
    /// The limit on the number of destinations to return. You can have one destination per delivery stream.
    public var limit: Swift.Int?

    public init (
        deliveryStreamName: Swift.String? = nil,
        exclusiveStartDestinationId: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.exclusiveStartDestinationId = exclusiveStartDestinationId
        self.limit = limit
    }
}

struct DescribeDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let limit: Swift.Int?
    let exclusiveStartDestinationId: Swift.String?
}

extension DescribeDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case exclusiveStartDestinationId = "ExclusiveStartDestinationId"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let exclusiveStartDestinationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartDestinationId)
        exclusiveStartDestinationId = exclusiveStartDestinationIdDecoded
    }
}

extension DescribeDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDeliveryStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliveryStreamDescription = output.deliveryStreamDescription
        } else {
            self.deliveryStreamDescription = nil
        }
    }
}

public struct DescribeDeliveryStreamOutputResponse: Swift.Equatable {
    /// Information about the delivery stream.
    /// This member is required.
    public var deliveryStreamDescription: FirehoseClientTypes.DeliveryStreamDescription?

    public init (
        deliveryStreamDescription: FirehoseClientTypes.DeliveryStreamDescription? = nil
    )
    {
        self.deliveryStreamDescription = deliveryStreamDescription
    }
}

struct DescribeDeliveryStreamOutputResponseBody: Swift.Equatable {
    let deliveryStreamDescription: FirehoseClientTypes.DeliveryStreamDescription?
}

extension DescribeDeliveryStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamDescription = "DeliveryStreamDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamDescription.self, forKey: .deliveryStreamDescription)
        deliveryStreamDescription = deliveryStreamDescriptionDecoded
    }
}

extension FirehoseClientTypes.Deserializer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hiveJsonSerDe = "HiveJsonSerDe"
        case openXJsonSerDe = "OpenXJsonSerDe"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hiveJsonSerDe = self.hiveJsonSerDe {
            try encodeContainer.encode(hiveJsonSerDe, forKey: .hiveJsonSerDe)
        }
        if let openXJsonSerDe = self.openXJsonSerDe {
            try encodeContainer.encode(openXJsonSerDe, forKey: .openXJsonSerDe)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openXJsonSerDeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.OpenXJsonSerDe.self, forKey: .openXJsonSerDe)
        openXJsonSerDe = openXJsonSerDeDecoded
        let hiveJsonSerDeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HiveJsonSerDe.self, forKey: .hiveJsonSerDe)
        hiveJsonSerDe = hiveJsonSerDeDecoded
    }
}

extension FirehoseClientTypes {
    /// The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the [Serializer]. Kinesis Data Firehose supports two types of deserializers: the [Apache Hive JSON SerDe](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON) and the [OpenX JSON SerDe](https://github.com/rcongiu/Hive-JSON-Serde).
    public struct Deserializer: Swift.Equatable {
        /// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
        public var hiveJsonSerDe: FirehoseClientTypes.HiveJsonSerDe?
        /// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
        public var openXJsonSerDe: FirehoseClientTypes.OpenXJsonSerDe?

        public init (
            hiveJsonSerDe: FirehoseClientTypes.HiveJsonSerDe? = nil,
            openXJsonSerDe: FirehoseClientTypes.OpenXJsonSerDe? = nil
        )
        {
            self.hiveJsonSerDe = hiveJsonSerDe
            self.openXJsonSerDe = openXJsonSerDe
        }
    }

}

extension FirehoseClientTypes.DestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonOpenSearchServerlessDestinationDescription = "AmazonOpenSearchServerlessDestinationDescription"
        case amazonopensearchserviceDestinationDescription = "AmazonopensearchserviceDestinationDescription"
        case destinationId = "DestinationId"
        case elasticsearchDestinationDescription = "ElasticsearchDestinationDescription"
        case extendedS3DestinationDescription = "ExtendedS3DestinationDescription"
        case httpEndpointDestinationDescription = "HttpEndpointDestinationDescription"
        case redshiftDestinationDescription = "RedshiftDestinationDescription"
        case s3DestinationDescription = "S3DestinationDescription"
        case splunkDestinationDescription = "SplunkDestinationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonOpenSearchServerlessDestinationDescription = self.amazonOpenSearchServerlessDestinationDescription {
            try encodeContainer.encode(amazonOpenSearchServerlessDestinationDescription, forKey: .amazonOpenSearchServerlessDestinationDescription)
        }
        if let amazonopensearchserviceDestinationDescription = self.amazonopensearchserviceDestinationDescription {
            try encodeContainer.encode(amazonopensearchserviceDestinationDescription, forKey: .amazonopensearchserviceDestinationDescription)
        }
        if let destinationId = self.destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationDescription = self.elasticsearchDestinationDescription {
            try encodeContainer.encode(elasticsearchDestinationDescription, forKey: .elasticsearchDestinationDescription)
        }
        if let extendedS3DestinationDescription = self.extendedS3DestinationDescription {
            try encodeContainer.encode(extendedS3DestinationDescription, forKey: .extendedS3DestinationDescription)
        }
        if let httpEndpointDestinationDescription = self.httpEndpointDestinationDescription {
            try encodeContainer.encode(httpEndpointDestinationDescription, forKey: .httpEndpointDestinationDescription)
        }
        if let redshiftDestinationDescription = self.redshiftDestinationDescription {
            try encodeContainer.encode(redshiftDestinationDescription, forKey: .redshiftDestinationDescription)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let splunkDestinationDescription = self.splunkDestinationDescription {
            try encodeContainer.encode(splunkDestinationDescription, forKey: .splunkDestinationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationId)
        destinationId = destinationIdDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let extendedS3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ExtendedS3DestinationDescription.self, forKey: .extendedS3DestinationDescription)
        extendedS3DestinationDescription = extendedS3DestinationDescriptionDecoded
        let redshiftDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftDestinationDescription.self, forKey: .redshiftDestinationDescription)
        redshiftDestinationDescription = redshiftDestinationDescriptionDecoded
        let elasticsearchDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchDestinationDescription.self, forKey: .elasticsearchDestinationDescription)
        elasticsearchDestinationDescription = elasticsearchDestinationDescriptionDecoded
        let amazonopensearchserviceDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceDestinationDescription.self, forKey: .amazonopensearchserviceDestinationDescription)
        amazonopensearchserviceDestinationDescription = amazonopensearchserviceDestinationDescriptionDecoded
        let splunkDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkDestinationDescription.self, forKey: .splunkDestinationDescription)
        splunkDestinationDescription = splunkDestinationDescriptionDecoded
        let httpEndpointDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDestinationDescription.self, forKey: .httpEndpointDestinationDescription)
        httpEndpointDestinationDescription = httpEndpointDestinationDescriptionDecoded
        let amazonOpenSearchServerlessDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription.self, forKey: .amazonOpenSearchServerlessDestinationDescription)
        amazonOpenSearchServerlessDestinationDescription = amazonOpenSearchServerlessDestinationDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the destination for a delivery stream.
    public struct DestinationDescription: Swift.Equatable {
        /// The destination in the Serverless offering for Amazon OpenSearch Service.
        public var amazonOpenSearchServerlessDestinationDescription: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription?
        /// The destination in Amazon OpenSearch Service.
        public var amazonopensearchserviceDestinationDescription: FirehoseClientTypes.AmazonopensearchserviceDestinationDescription?
        /// The ID of the destination.
        /// This member is required.
        public var destinationId: Swift.String?
        /// The destination in Amazon ES.
        public var elasticsearchDestinationDescription: FirehoseClientTypes.ElasticsearchDestinationDescription?
        /// The destination in Amazon S3.
        public var extendedS3DestinationDescription: FirehoseClientTypes.ExtendedS3DestinationDescription?
        /// Describes the specified HTTP endpoint destination.
        public var httpEndpointDestinationDescription: FirehoseClientTypes.HttpEndpointDestinationDescription?
        /// The destination in Amazon Redshift.
        public var redshiftDestinationDescription: FirehoseClientTypes.RedshiftDestinationDescription?
        /// [Deprecated] The destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The destination in Splunk.
        public var splunkDestinationDescription: FirehoseClientTypes.SplunkDestinationDescription?

        public init (
            amazonOpenSearchServerlessDestinationDescription: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationDescription? = nil,
            amazonopensearchserviceDestinationDescription: FirehoseClientTypes.AmazonopensearchserviceDestinationDescription? = nil,
            destinationId: Swift.String? = nil,
            elasticsearchDestinationDescription: FirehoseClientTypes.ElasticsearchDestinationDescription? = nil,
            extendedS3DestinationDescription: FirehoseClientTypes.ExtendedS3DestinationDescription? = nil,
            httpEndpointDestinationDescription: FirehoseClientTypes.HttpEndpointDestinationDescription? = nil,
            redshiftDestinationDescription: FirehoseClientTypes.RedshiftDestinationDescription? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            splunkDestinationDescription: FirehoseClientTypes.SplunkDestinationDescription? = nil
        )
        {
            self.amazonOpenSearchServerlessDestinationDescription = amazonOpenSearchServerlessDestinationDescription
            self.amazonopensearchserviceDestinationDescription = amazonopensearchserviceDestinationDescription
            self.destinationId = destinationId
            self.elasticsearchDestinationDescription = elasticsearchDestinationDescription
            self.extendedS3DestinationDescription = extendedS3DestinationDescription
            self.httpEndpointDestinationDescription = httpEndpointDestinationDescription
            self.redshiftDestinationDescription = redshiftDestinationDescription
            self.s3DestinationDescription = s3DestinationDescription
            self.splunkDestinationDescription = splunkDestinationDescription
        }
    }

}

extension FirehoseClientTypes.DynamicPartitioningConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case retryOptions = "RetryOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension FirehoseClientTypes {
    /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
    public struct DynamicPartitioningConfiguration: Swift.Equatable {
        /// Specifies that the dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.
        public var enabled: Swift.Bool?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.
        public var retryOptions: FirehoseClientTypes.RetryOptions?

        public init (
            enabled: Swift.Bool? = nil,
            retryOptions: FirehoseClientTypes.RetryOptions? = nil
        )
        {
            self.enabled = enabled
            self.retryOptions = retryOptions
        }
    }

}

extension FirehoseClientTypes.ElasticsearchBufferingHints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intervalInSeconds = "IntervalInSeconds"
        case sizeInMBs = "SizeInMBs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intervalInSeconds = self.intervalInSeconds {
            try encodeContainer.encode(intervalInSeconds, forKey: .intervalInSeconds)
        }
        if let sizeInMBs = self.sizeInMBs {
            try encodeContainer.encode(sizeInMBs, forKey: .sizeInMBs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalInSeconds)
        intervalInSeconds = intervalInSecondsDecoded
        let sizeInMBsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMBs)
        sizeInMBs = sizeInMBsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the buffering to perform before delivering data to the Amazon ES destination.
    public struct ElasticsearchBufferingHints: Swift.Equatable {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init (
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes.ElasticsearchDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
        case typeName = "TypeName"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon ES.
    public struct ElasticsearchDestinationConfiguration: Swift.Equatable {
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the role specified in RoleARN. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Specify either ClusterEndpoint or DomainARN.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation). The default value is OneDay.
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Grant Kinesis Data Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) and [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Kinesis Data Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix. For more information, see [Amazon S3 Backup for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-s3-backup). Default value is FailedDocumentsOnly. You can't change this backup mode after you create the delivery stream.
        public var s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode?
        /// The configuration for the backup Amazon S3 location.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during run time. For Elasticsearch 7.x, don't specify a TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init (
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            typeName: Swift.String? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.typeName = typeName
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension FirehoseClientTypes.ElasticsearchDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
        case typeName = "TypeName"
        case vpcConfigurationDescription = "VpcConfigurationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let vpcConfigurationDescription = self.vpcConfigurationDescription {
            try encodeContainer.encode(vpcConfigurationDescription, forKey: .vpcConfigurationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.VpcConfigurationDescription.self, forKey: .vpcConfigurationDescription)
        vpcConfigurationDescription = vpcConfigurationDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// The destination description in Amazon ES.
    public struct ElasticsearchDestinationDescription: Swift.Equatable {
        /// The buffering options.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The Amazon CloudWatch logging options.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Kinesis Data Firehose uses either this ClusterEndpoint or the DomainARN field to send data to Amazon ES.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon ES domain. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Kinesis Data Firehose uses either ClusterEndpoint or DomainARN to send data to Amazon ES.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon ES retry options.
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode?
        /// The Amazon S3 destination.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Elasticsearch type name. This applies to Elasticsearch 6.x and lower versions. For Elasticsearch 7.x and OpenSearch Service 1.x, there's no value for TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription?

        public init (
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            typeName: Swift.String? = nil,
            vpcConfigurationDescription: FirehoseClientTypes.VpcConfigurationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.typeName = typeName
            self.vpcConfigurationDescription = vpcConfigurationDescription
        }
    }

}

extension FirehoseClientTypes.ElasticsearchDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3Update = "S3Update"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = self.clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = self.domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = self.indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon ES.
    public struct ElasticsearchDestinationUpdate: Swift.Equatable {
        /// The buffering options. If no value is specified, ElasticsearchBufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeDomain, DescribeDomains, and DescribeDomainConfig after assuming the IAM role specified in RoleARN. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Specify either ClusterEndpoint or DomainARN.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to IndexName to facilitate the expiration of old data. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation). Default value is OneDay.
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Grant Kinesis Data Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) and [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// The Amazon S3 destination.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during runtime. If you upgrade Elasticsearch from 6.x to 7.x and don’t update your delivery stream, Kinesis Data Firehose still delivers data to Elasticsearch with the old index name and type name. If you want to update your delivery stream with a new index name, provide an empty string for TypeName.
        public var typeName: Swift.String?

        public init (
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.typeName = typeName
        }
    }

}

extension FirehoseClientTypes {
    public enum ElasticsearchIndexRotationPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case norotation
        case oneday
        case onehour
        case onemonth
        case oneweek
        case sdkUnknown(Swift.String)

        public static var allCases: [ElasticsearchIndexRotationPeriod] {
            return [
                .norotation,
                .oneday,
                .onehour,
                .onemonth,
                .oneweek,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .norotation: return "NoRotation"
            case .oneday: return "OneDay"
            case .onehour: return "OneHour"
            case .onemonth: return "OneMonth"
            case .oneweek: return "OneWeek"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ElasticsearchIndexRotationPeriod(rawValue: rawValue) ?? ElasticsearchIndexRotationPeriod.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.ElasticsearchRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
    public struct ElasticsearchRetryOptions: Swift.Equatable {
        /// After an initial failure to deliver to Amazon ES, the total amount of time during which Kinesis Data Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum ElasticsearchS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alldocuments
        case faileddocumentsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [ElasticsearchS3BackupMode] {
            return [
                .alldocuments,
                .faileddocumentsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alldocuments: return "AllDocuments"
            case .faileddocumentsonly: return "FailedDocumentsOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ElasticsearchS3BackupMode(rawValue: rawValue) ?? ElasticsearchS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.EncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsEncryptionConfig = "KMSEncryptionConfig"
        case noEncryptionConfig = "NoEncryptionConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsEncryptionConfig = self.kmsEncryptionConfig {
            try encodeContainer.encode(kmsEncryptionConfig, forKey: .kmsEncryptionConfig)
        }
        if let noEncryptionConfig = self.noEncryptionConfig {
            try encodeContainer.encode(noEncryptionConfig.rawValue, forKey: .noEncryptionConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noEncryptionConfigDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.NoEncryptionConfig.self, forKey: .noEncryptionConfig)
        noEncryptionConfig = noEncryptionConfigDecoded
        let kmsEncryptionConfigDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KMSEncryptionConfig.self, forKey: .kmsEncryptionConfig)
        kmsEncryptionConfig = kmsEncryptionConfigDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the encryption for a destination in Amazon S3.
    public struct EncryptionConfiguration: Swift.Equatable {
        /// The encryption key.
        public var kmsEncryptionConfig: FirehoseClientTypes.KMSEncryptionConfig?
        /// Specifically override existing encryption information to ensure that no encryption is used.
        public var noEncryptionConfig: FirehoseClientTypes.NoEncryptionConfig?

        public init (
            kmsEncryptionConfig: FirehoseClientTypes.KMSEncryptionConfig? = nil,
            noEncryptionConfig: FirehoseClientTypes.NoEncryptionConfig? = nil
        )
        {
            self.kmsEncryptionConfig = kmsEncryptionConfig
            self.noEncryptionConfig = noEncryptionConfig
        }
    }

}

extension FirehoseClientTypes.ExtendedS3DestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        case dynamicPartitioningConfiguration = "DynamicPartitioningConfiguration"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case processingConfiguration = "ProcessingConfiguration"
        case roleARN = "RoleARN"
        case s3BackupConfiguration = "S3BackupConfiguration"
        case s3BackupMode = "S3BackupMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let dataFormatConversionConfiguration = self.dataFormatConversionConfiguration {
            try encodeContainer.encode(dataFormatConversionConfiguration, forKey: .dataFormatConversionConfiguration)
        }
        if let dynamicPartitioningConfiguration = self.dynamicPartitioningConfiguration {
            try encodeContainer.encode(dynamicPartitioningConfiguration, forKey: .dynamicPartitioningConfiguration)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupConfiguration = self.s3BackupConfiguration {
            try encodeContainer.encode(s3BackupConfiguration, forKey: .s3BackupConfiguration)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3BackupConfiguration)
        s3BackupConfiguration = s3BackupConfigurationDecoded
        let dataFormatConversionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DataFormatConversionConfiguration.self, forKey: .dataFormatConversionConfiguration)
        dataFormatConversionConfiguration = dataFormatConversionConfigurationDecoded
        let dynamicPartitioningConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DynamicPartitioningConfiguration.self, forKey: .dynamicPartitioningConfiguration)
        dynamicPartitioningConfiguration = dynamicPartitioningConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon S3.
    public struct ExtendedS3DestinationConfiguration: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.s3BackupMode = s3BackupMode
        }
    }

}

extension FirehoseClientTypes.ExtendedS3DestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        case dynamicPartitioningConfiguration = "DynamicPartitioningConfiguration"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case processingConfiguration = "ProcessingConfiguration"
        case roleARN = "RoleARN"
        case s3BackupDescription = "S3BackupDescription"
        case s3BackupMode = "S3BackupMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let dataFormatConversionConfiguration = self.dataFormatConversionConfiguration {
            try encodeContainer.encode(dataFormatConversionConfiguration, forKey: .dataFormatConversionConfiguration)
        }
        if let dynamicPartitioningConfiguration = self.dynamicPartitioningConfiguration {
            try encodeContainer.encode(dynamicPartitioningConfiguration, forKey: .dynamicPartitioningConfiguration)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupDescription = self.s3BackupDescription {
            try encodeContainer.encode(s3BackupDescription, forKey: .s3BackupDescription)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3BackupDescription)
        s3BackupDescription = s3BackupDescriptionDecoded
        let dataFormatConversionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DataFormatConversionConfiguration.self, forKey: .dataFormatConversionConfiguration)
        dataFormatConversionConfiguration = dataFormatConversionConfigurationDecoded
        let dynamicPartitioningConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DynamicPartitioningConfiguration.self, forKey: .dynamicPartitioningConfiguration)
        dynamicPartitioningConfiguration = dynamicPartitioningConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon S3.
    public struct ExtendedS3DestinationDescription: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option.
        /// This member is required.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        /// This member is required.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        /// This member is required.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupDescription = s3BackupDescription
            self.s3BackupMode = s3BackupMode
        }
    }

}

extension FirehoseClientTypes.ExtendedS3DestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        case dynamicPartitioningConfiguration = "DynamicPartitioningConfiguration"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case processingConfiguration = "ProcessingConfiguration"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3BackupUpdate = "S3BackupUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let dataFormatConversionConfiguration = self.dataFormatConversionConfiguration {
            try encodeContainer.encode(dataFormatConversionConfiguration, forKey: .dataFormatConversionConfiguration)
        }
        if let dynamicPartitioningConfiguration = self.dynamicPartitioningConfiguration {
            try encodeContainer.encode(dynamicPartitioningConfiguration, forKey: .dynamicPartitioningConfiguration)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3BackupUpdate = self.s3BackupUpdate {
            try encodeContainer.encode(s3BackupUpdate, forKey: .s3BackupUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3BackupUpdate)
        s3BackupUpdate = s3BackupUpdateDecoded
        let dataFormatConversionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DataFormatConversionConfiguration.self, forKey: .dataFormatConversionConfiguration)
        dataFormatConversionConfiguration = dataFormatConversionConfigurationDecoded
        let dynamicPartitioningConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DynamicPartitioningConfiguration.self, forKey: .dynamicPartitioningConfiguration)
        dynamicPartitioningConfiguration = dynamicPartitioningConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon S3.
    public struct ExtendedS3DestinationUpdate: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var bucketARN: Swift.String?
        /// The buffering option.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public var dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration?
        /// The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
        public var dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// You can update a delivery stream to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.S3BackupMode?
        /// The Amazon S3 destination for backup.
        public var s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            dataFormatConversionConfiguration: FirehoseClientTypes.DataFormatConversionConfiguration? = nil,
            dynamicPartitioningConfiguration: FirehoseClientTypes.DynamicPartitioningConfiguration? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.S3BackupMode? = nil,
            s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
            self.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.processingConfiguration = processingConfiguration
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3BackupUpdate = s3BackupUpdate
        }
    }

}

extension FirehoseClientTypes.FailureDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamFailureType.self, forKey: .type)
        type = typeDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension FirehoseClientTypes {
    /// Provides details in case one of the following operations fails due to an error related to KMS: [CreateDeliveryStream], [DeleteDeliveryStream], [StartDeliveryStreamEncryption], [StopDeliveryStreamEncryption].
    public struct FailureDescription: Swift.Equatable {
        /// A message providing details about the error that caused the failure.
        /// This member is required.
        public var details: Swift.String?
        /// The type of error that caused the failure.
        /// This member is required.
        public var type: FirehoseClientTypes.DeliveryStreamFailureType?

        public init (
            details: Swift.String? = nil,
            type: FirehoseClientTypes.DeliveryStreamFailureType? = nil
        )
        {
            self.details = details
            self.type = type
        }
    }

}

extension FirehoseClientTypes {
    public enum HECEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case event
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [HECEndpointType] {
            return [
                .event,
                .raw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .event: return "Event"
            case .raw: return "Raw"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HECEndpointType(rawValue: rawValue) ?? HECEndpointType.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.HiveJsonSerDe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timestampFormats = "TimestampFormats"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timestampFormats = timestampFormats {
            var timestampFormatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestampFormats)
            for nonemptystring0 in timestampFormats {
                try timestampFormatsContainer.encode(nonemptystring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampFormatsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .timestampFormats)
        var timestampFormatsDecoded0:[Swift.String]? = nil
        if let timestampFormatsContainer = timestampFormatsContainer {
            timestampFormatsDecoded0 = [Swift.String]()
            for string0 in timestampFormatsContainer {
                if let string0 = string0 {
                    timestampFormatsDecoded0?.append(string0)
                }
            }
        }
        timestampFormats = timestampFormatsDecoded0
    }
}

extension FirehoseClientTypes {
    /// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
    public struct HiveJsonSerDe: Swift.Equatable {
        /// Indicates how you want Kinesis Data Firehose to parse the date and timestamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse timestamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
        public var timestampFormats: [Swift.String]?

        public init (
            timestampFormats: [Swift.String]? = nil
        )
        {
            self.timestampFormats = timestampFormats
        }
    }

}

extension FirehoseClientTypes.HttpEndpointBufferingHints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intervalInSeconds = "IntervalInSeconds"
        case sizeInMBs = "SizeInMBs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intervalInSeconds = self.intervalInSeconds {
            try encodeContainer.encode(intervalInSeconds, forKey: .intervalInSeconds)
        }
        if let sizeInMBs = self.sizeInMBs {
            try encodeContainer.encode(sizeInMBs, forKey: .sizeInMBs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeInMBsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMBs)
        sizeInMBs = sizeInMBsDecoded
        let intervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalInSeconds)
        intervalInSeconds = intervalInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the buffering options that can be applied before data is delivered to the HTTP endpoint destination. Kinesis Data Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
    public struct HttpEndpointBufferingHints: Swift.Equatable {
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public var intervalInSeconds: Swift.Int?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public var sizeInMBs: Swift.Int?

        public init (
            intervalInSeconds: Swift.Int? = nil,
            sizeInMBs: Swift.Int? = nil
        )
        {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }
    }

}

extension FirehoseClientTypes.HttpEndpointCommonAttribute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeValue = "AttributeValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let attributeValue = self.attributeValue {
            try encodeContainer.encode(attributeValue, forKey: .attributeValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeValue)
        attributeValue = attributeValueDecoded
    }
}

extension FirehoseClientTypes.HttpEndpointCommonAttribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointCommonAttribute(attributeName: \"CONTENT_REDACTED\", attributeValue: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the metadata that's delivered to the specified HTTP endpoint destination.
    public struct HttpEndpointCommonAttribute: Swift.Equatable {
        /// The name of the HTTP endpoint common attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The value of the HTTP endpoint common attribute.
        /// This member is required.
        public var attributeValue: Swift.String?

        public init (
            attributeName: Swift.String? = nil,
            attributeValue: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
        }
    }

}

extension FirehoseClientTypes.HttpEndpointConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case name = "Name"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKey = self.accessKey {
            try encodeContainer.encode(accessKey, forKey: .accessKey)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
    }
}

extension FirehoseClientTypes.HttpEndpointConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointConfiguration(name: \(Swift.String(describing: name)), accessKey: \"CONTENT_REDACTED\", url: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the configuration of the HTTP endpoint to which Kinesis Firehose delivers data.
    public struct HttpEndpointConfiguration: Swift.Equatable {
        /// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
        public var accessKey: Swift.String?
        /// The name of the HTTP endpoint selected as the destination.
        public var name: Swift.String?
        /// The URL of the HTTP endpoint selected as the destination. If you choose an HTTP endpoint as your destination, review and follow the instructions in the [Appendix - HTTP Endpoint Delivery Request and Response Specifications](https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html).
        /// This member is required.
        public var url: Swift.String?

        public init (
            accessKey: Swift.String? = nil,
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.accessKey = accessKey
            self.name = name
            self.url = url
        }
    }

}

extension FirehoseClientTypes.HttpEndpointDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension FirehoseClientTypes.HttpEndpointDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpEndpointDescription(name: \(Swift.String(describing: name)), url: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the HTTP endpoint selected as the destination.
    public struct HttpEndpointDescription: Swift.Equatable {
        /// The name of the HTTP endpoint selected as the destination.
        public var name: Swift.String?
        /// The URL of the HTTP endpoint selected as the destination.
        public var url: Swift.String?

        public init (
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.name = name
            self.url = url
        }
    }

}

extension FirehoseClientTypes.HttpEndpointDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case endpointConfiguration = "EndpointConfiguration"
        case processingConfiguration = "ProcessingConfiguration"
        case requestConfiguration = "RequestConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let endpointConfiguration = self.endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let requestConfiguration = self.requestConfiguration {
            try encodeContainer.encode(requestConfiguration, forKey: .requestConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let requestConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRequestConfiguration.self, forKey: .requestConfiguration)
        requestConfiguration = requestConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of the HTTP endpoint destination.
    public struct HttpEndpointDestinationConfiguration: Swift.Equatable {
        /// The buffering options that can be used before data is delivered to the specified destination. Kinesis Data Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if you specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The configuration of the HTTP endpoint selected as the destination.
        /// This member is required.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of the requeste sent to the HTTP endpoint specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Kinesis Data Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Kinesis Data Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes the configuration of a destination in Amazon S3.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?

        public init (
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
        }
    }

}

extension FirehoseClientTypes.HttpEndpointDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case endpointConfiguration = "EndpointConfiguration"
        case processingConfiguration = "ProcessingConfiguration"
        case requestConfiguration = "RequestConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let endpointConfiguration = self.endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let requestConfiguration = self.requestConfiguration {
            try encodeContainer.encode(requestConfiguration, forKey: .requestConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDescription.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let requestConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRequestConfiguration.self, forKey: .requestConfiguration)
        requestConfiguration = requestConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the HTTP endpoint destination.
    public struct HttpEndpointDestinationDescription: Swift.Equatable {
        /// Describes buffering options that can be applied to the data before it is delivered to the HTTPS endpoint destination. Kinesis Data Firehose teats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The configuration of the specified HTTP endpoint destination.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointDescription?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of request sent to the HTTP endpoint specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Kinesis Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Kinesis Data Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes a destination in Amazon S3.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?

        public init (
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointDescription? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
        }
    }

}

extension FirehoseClientTypes.HttpEndpointDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case endpointConfiguration = "EndpointConfiguration"
        case processingConfiguration = "ProcessingConfiguration"
        case requestConfiguration = "RequestConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Update = "S3Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let endpointConfiguration = self.endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let requestConfiguration = self.requestConfiguration {
            try encodeContainer.encode(requestConfiguration, forKey: .requestConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let requestConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRequestConfiguration.self, forKey: .requestConfiguration)
        requestConfiguration = requestConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
    }
}

extension FirehoseClientTypes {
    /// Updates the specified HTTP endpoint destination.
    public struct HttpEndpointDestinationUpdate: Swift.Equatable {
        /// Describes buffering options that can be applied to the data before it is delivered to the HTTPS endpoint destination. Kinesis Data Firehose teats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
        public var bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints?
        /// Describes the Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// Describes the configuration of the HTTP endpoint destination.
        public var endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration?
        /// Describes a data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The configuration of the request sent to the HTTP endpoint specified as the destination.
        public var requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration?
        /// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
        public var retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions?
        /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs.
        public var roleARN: Swift.String?
        /// Describes the S3 bucket backup options for the data that Kinesis Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Kinesis Data Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
        public var s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode?
        /// Describes an update for a destination in Amazon S3.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?

        public init (
            bufferingHints: FirehoseClientTypes.HttpEndpointBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            endpointConfiguration: FirehoseClientTypes.HttpEndpointConfiguration? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            requestConfiguration: FirehoseClientTypes.HttpEndpointRequestConfiguration? = nil,
            retryOptions: FirehoseClientTypes.HttpEndpointRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.HttpEndpointS3BackupMode? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.endpointConfiguration = endpointConfiguration
            self.processingConfiguration = processingConfiguration
            self.requestConfiguration = requestConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Update = s3Update
        }
    }

}

extension FirehoseClientTypes.HttpEndpointRequestConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonAttributes = "CommonAttributes"
        case contentEncoding = "ContentEncoding"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commonAttributes = commonAttributes {
            var commonAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .commonAttributes)
            for httpendpointcommonattribute0 in commonAttributes {
                try commonAttributesContainer.encode(httpendpointcommonattribute0)
            }
        }
        if let contentEncoding = self.contentEncoding {
            try encodeContainer.encode(contentEncoding.rawValue, forKey: .contentEncoding)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentEncodingDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ContentEncoding.self, forKey: .contentEncoding)
        contentEncoding = contentEncodingDecoded
        let commonAttributesContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.HttpEndpointCommonAttribute?].self, forKey: .commonAttributes)
        var commonAttributesDecoded0:[FirehoseClientTypes.HttpEndpointCommonAttribute]? = nil
        if let commonAttributesContainer = commonAttributesContainer {
            commonAttributesDecoded0 = [FirehoseClientTypes.HttpEndpointCommonAttribute]()
            for structure0 in commonAttributesContainer {
                if let structure0 = structure0 {
                    commonAttributesDecoded0?.append(structure0)
                }
            }
        }
        commonAttributes = commonAttributesDecoded0
    }
}

extension FirehoseClientTypes {
    /// The configuration of the HTTP endpoint request.
    public struct HttpEndpointRequestConfiguration: Swift.Equatable {
        /// Describes the metadata sent to the HTTP endpoint destination.
        public var commonAttributes: [FirehoseClientTypes.HttpEndpointCommonAttribute]?
        /// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. For more information, see [Content-Encoding](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) in MDN Web Docs, the official Mozilla documentation.
        public var contentEncoding: FirehoseClientTypes.ContentEncoding?

        public init (
            commonAttributes: [FirehoseClientTypes.HttpEndpointCommonAttribute]? = nil,
            contentEncoding: FirehoseClientTypes.ContentEncoding? = nil
        )
        {
            self.commonAttributes = commonAttributes
            self.contentEncoding = contentEncoding
        }
    }

}

extension FirehoseClientTypes.HttpEndpointRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
    public struct HttpEndpointRetryOptions: Swift.Equatable {
        /// The total amount of time that Kinesis Data Firehose spends on retries. This duration starts after the initial attempt to send data to the custom destination via HTTPS endpoint fails. It doesn't include the periods during which Kinesis Data Firehose waits for acknowledgment from the specified destination after each attempt.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum HttpEndpointS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alldata
        case faileddataonly
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpEndpointS3BackupMode] {
            return [
                .alldata,
                .faileddataonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alldata: return "AllData"
            case .faileddataonly: return "FailedDataOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpEndpointS3BackupMode(rawValue: rawValue) ?? HttpEndpointS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.InputFormatConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deserializer = "Deserializer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deserializer = self.deserializer {
            try encodeContainer.encode(deserializer, forKey: .deserializer)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deserializerDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.Deserializer.self, forKey: .deserializer)
        deserializer = deserializerDecoded
    }
}

extension FirehoseClientTypes {
    /// Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if Enabled is set to true.
    public struct InputFormatConfiguration: Swift.Equatable {
        /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. If both are non-null, the server rejects the request.
        public var deserializer: FirehoseClientTypes.Deserializer?

        public init (
            deserializer: FirehoseClientTypes.Deserializer? = nil
        )
        {
            self.deserializer = deserializer
        }
    }

}

extension InvalidArgumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidArgumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified input parameter has a value that is not valid.
public struct InvalidArgumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArgumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArgumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKMSResourceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidKMSResourceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Kinesis Data Firehose throws this exception when an attempt to put records or to start or stop delivery stream encryption fails. This happens when the KMS service throws one of the following exception types: AccessDeniedException, InvalidStateException, DisabledException, or NotFoundException.
public struct InvalidKMSResourceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidKMSResourceExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let message: Swift.String?
}

extension InvalidKMSResourceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FirehoseClientTypes.KMSEncryptionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awskmsKeyARN = "AWSKMSKeyARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awskmsKeyARN = self.awskmsKeyARN {
            try encodeContainer.encode(awskmsKeyARN, forKey: .awskmsKeyARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awskmsKeyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awskmsKeyARN)
        awskmsKeyARN = awskmsKeyARNDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an encryption key for a destination in Amazon S3.
    public struct KMSEncryptionConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the encryption key. Must belong to the same Amazon Web Services Region as the destination Amazon S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var awskmsKeyARN: Swift.String?

        public init (
            awskmsKeyARN: Swift.String? = nil
        )
        {
            self.awskmsKeyARN = awskmsKeyARN
        }
    }

}

extension FirehoseClientTypes {
    public enum KeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsOwnedCmk
        case customerManagedCmk
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyType] {
            return [
                .awsOwnedCmk,
                .customerManagedCmk,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsOwnedCmk: return "AWS_OWNED_CMK"
            case .customerManagedCmk: return "CUSTOMER_MANAGED_CMK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyType(rawValue: rawValue) ?? KeyType.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.KinesisStreamSourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kinesisStreamARN = "KinesisStreamARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kinesisStreamARN = self.kinesisStreamARN {
            try encodeContainer.encode(kinesisStreamARN, forKey: .kinesisStreamARN)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kinesisStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kinesisStreamARN)
        kinesisStreamARN = kinesisStreamARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
    }
}

extension FirehoseClientTypes {
    /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream.
    public struct KinesisStreamSourceConfiguration: Swift.Equatable {
        /// The ARN of the source Kinesis data stream. For more information, see [Amazon Kinesis Data Streams ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
        /// This member is required.
        public var kinesisStreamARN: Swift.String?
        /// The ARN of the role that provides access to the source Kinesis data stream. For more information, see [Amazon Web Services Identity and Access Management (IAM) ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam).
        /// This member is required.
        public var roleARN: Swift.String?

        public init (
            kinesisStreamARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes.KinesisStreamSourceDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStartTimestamp = "DeliveryStartTimestamp"
        case kinesisStreamARN = "KinesisStreamARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStartTimestamp = self.deliveryStartTimestamp {
            try encodeContainer.encodeTimestamp(deliveryStartTimestamp, format: .epochSeconds, forKey: .deliveryStartTimestamp)
        }
        if let kinesisStreamARN = self.kinesisStreamARN {
            try encodeContainer.encode(kinesisStreamARN, forKey: .kinesisStreamARN)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kinesisStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kinesisStreamARN)
        kinesisStreamARN = kinesisStreamARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let deliveryStartTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deliveryStartTimestamp)
        deliveryStartTimestamp = deliveryStartTimestampDecoded
    }
}

extension FirehoseClientTypes {
    /// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
    public struct KinesisStreamSourceDescription: Swift.Equatable {
        /// Kinesis Data Firehose starts retrieving records from the Kinesis data stream starting with this timestamp.
        public var deliveryStartTimestamp: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the source Kinesis data stream. For more information, see [Amazon Kinesis Data Streams ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
        public var kinesisStreamARN: Swift.String?
        /// The ARN of the role used by the source Kinesis data stream. For more information, see [Amazon Web Services Identity and Access Management (IAM) ARN Format](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam).
        public var roleARN: Swift.String?

        public init (
            deliveryStartTimestamp: ClientRuntime.Date? = nil,
            kinesisStreamARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.deliveryStartTimestamp = deliveryStartTimestamp
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have already reached the limit for a requested resource.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListDeliveryStreamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamType = "DeliveryStreamType"
        case exclusiveStartDeliveryStreamName = "ExclusiveStartDeliveryStreamName"
        case limit = "Limit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamType = self.deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let exclusiveStartDeliveryStreamName = self.exclusiveStartDeliveryStreamName {
            try encodeContainer.encode(exclusiveStartDeliveryStreamName, forKey: .exclusiveStartDeliveryStreamName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
    }
}

extension ListDeliveryStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDeliveryStreamsInput: Swift.Equatable {
    /// The delivery stream type. This can be one of the following values:
    ///
    /// * DirectPut: Provider applications access the delivery stream directly.
    ///
    /// * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
    ///
    ///
    /// This parameter is optional. If this parameter is omitted, delivery streams of all types are returned.
    public var deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    /// The list of delivery streams returned by this call to ListDeliveryStreams will start with the delivery stream whose name comes alphabetically immediately after the name you specify in ExclusiveStartDeliveryStreamName.
    public var exclusiveStartDeliveryStreamName: Swift.String?
    /// The maximum number of delivery streams to list. The default value is 10.
    public var limit: Swift.Int?

    public init (
        deliveryStreamType: FirehoseClientTypes.DeliveryStreamType? = nil,
        exclusiveStartDeliveryStreamName: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamType = deliveryStreamType
        self.exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamName
        self.limit = limit
    }
}

struct ListDeliveryStreamsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    let exclusiveStartDeliveryStreamName: Swift.String?
}

extension ListDeliveryStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamType = "DeliveryStreamType"
        case exclusiveStartDeliveryStreamName = "ExclusiveStartDeliveryStreamName"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let exclusiveStartDeliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartDeliveryStreamName)
        exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamNameDecoded
    }
}

extension ListDeliveryStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeliveryStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeliveryStreamsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeliveryStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeliveryStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliveryStreamNames = output.deliveryStreamNames
            self.hasMoreDeliveryStreams = output.hasMoreDeliveryStreams
        } else {
            self.deliveryStreamNames = nil
            self.hasMoreDeliveryStreams = nil
        }
    }
}

public struct ListDeliveryStreamsOutputResponse: Swift.Equatable {
    /// The names of the delivery streams.
    /// This member is required.
    public var deliveryStreamNames: [Swift.String]?
    /// Indicates whether there are more delivery streams available to list.
    /// This member is required.
    public var hasMoreDeliveryStreams: Swift.Bool?

    public init (
        deliveryStreamNames: [Swift.String]? = nil,
        hasMoreDeliveryStreams: Swift.Bool? = nil
    )
    {
        self.deliveryStreamNames = deliveryStreamNames
        self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
    }
}

struct ListDeliveryStreamsOutputResponseBody: Swift.Equatable {
    let deliveryStreamNames: [Swift.String]?
    let hasMoreDeliveryStreams: Swift.Bool?
}

extension ListDeliveryStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamNames = "DeliveryStreamNames"
        case hasMoreDeliveryStreams = "HasMoreDeliveryStreams"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deliveryStreamNames)
        var deliveryStreamNamesDecoded0:[Swift.String]? = nil
        if let deliveryStreamNamesContainer = deliveryStreamNamesContainer {
            deliveryStreamNamesDecoded0 = [Swift.String]()
            for string0 in deliveryStreamNamesContainer {
                if let string0 = string0 {
                    deliveryStreamNamesDecoded0?.append(string0)
                }
            }
        }
        deliveryStreamNames = deliveryStreamNamesDecoded0
        let hasMoreDeliveryStreamsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreDeliveryStreams)
        hasMoreDeliveryStreams = hasMoreDeliveryStreamsDecoded
    }
}

extension ListTagsForDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case exclusiveStartTagKey = "ExclusiveStartTagKey"
        case limit = "Limit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let exclusiveStartTagKey = self.exclusiveStartTagKey {
            try encodeContainer.encode(exclusiveStartTagKey, forKey: .exclusiveStartTagKey)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
    }
}

extension ListTagsForDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForDeliveryStreamInput: Swift.Equatable {
    /// The name of the delivery stream whose tags you want to list.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The key to use as the starting point for the list of tags. If you set this parameter, ListTagsForDeliveryStream gets all tags that occur after ExclusiveStartTagKey.
    public var exclusiveStartTagKey: Swift.String?
    /// The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, HasMoreTags is set to true in the response. To list additional tags, set ExclusiveStartTagKey to the last key in the response.
    public var limit: Swift.Int?

    public init (
        deliveryStreamName: Swift.String? = nil,
        exclusiveStartTagKey: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.exclusiveStartTagKey = exclusiveStartTagKey
        self.limit = limit
    }
}

struct ListTagsForDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let exclusiveStartTagKey: Swift.String?
    let limit: Swift.Int?
}

extension ListTagsForDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case exclusiveStartTagKey = "ExclusiveStartTagKey"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let exclusiveStartTagKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartTagKey)
        exclusiveStartTagKey = exclusiveStartTagKeyDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListTagsForDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForDeliveryStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreTags = output.hasMoreTags
            self.tags = output.tags
        } else {
            self.hasMoreTags = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForDeliveryStreamOutputResponse: Swift.Equatable {
    /// If this is true in the response, more tags are available. To list the remaining tags, set ExclusiveStartTagKey to the key of the last tag returned and call ListTagsForDeliveryStream again.
    /// This member is required.
    public var hasMoreTags: Swift.Bool?
    /// A list of tags associated with DeliveryStreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit.
    /// This member is required.
    public var tags: [FirehoseClientTypes.Tag]?

    public init (
        hasMoreTags: Swift.Bool? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.hasMoreTags = hasMoreTags
        self.tags = tags
    }
}

struct ListTagsForDeliveryStreamOutputResponseBody: Swift.Equatable {
    let tags: [FirehoseClientTypes.Tag]?
    let hasMoreTags: Swift.Bool?
}

extension ListTagsForDeliveryStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreTags = "HasMoreTags"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FirehoseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FirehoseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let hasMoreTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreTags)
        hasMoreTags = hasMoreTagsDecoded
    }
}

extension FirehoseClientTypes {
    public enum NoEncryptionConfig: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noencryption
        case sdkUnknown(Swift.String)

        public static var allCases: [NoEncryptionConfig] {
            return [
                .noencryption,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noencryption: return "NoEncryption"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NoEncryptionConfig(rawValue: rawValue) ?? NoEncryptionConfig.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.OpenXJsonSerDe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseInsensitive = "CaseInsensitive"
        case columnToJsonKeyMappings = "ColumnToJsonKeyMappings"
        case convertDotsInJsonKeysToUnderscores = "ConvertDotsInJsonKeysToUnderscores"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseInsensitive = self.caseInsensitive {
            try encodeContainer.encode(caseInsensitive, forKey: .caseInsensitive)
        }
        if let columnToJsonKeyMappings = columnToJsonKeyMappings {
            var columnToJsonKeyMappingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .columnToJsonKeyMappings)
            for (dictKey0, columnToJsonKeyMappings0) in columnToJsonKeyMappings {
                try columnToJsonKeyMappingsContainer.encode(columnToJsonKeyMappings0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let convertDotsInJsonKeysToUnderscores = self.convertDotsInJsonKeysToUnderscores {
            try encodeContainer.encode(convertDotsInJsonKeysToUnderscores, forKey: .convertDotsInJsonKeysToUnderscores)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convertDotsInJsonKeysToUnderscoresDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .convertDotsInJsonKeysToUnderscores)
        convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscoresDecoded
        let caseInsensitiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .caseInsensitive)
        caseInsensitive = caseInsensitiveDecoded
        let columnToJsonKeyMappingsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .columnToJsonKeyMappings)
        var columnToJsonKeyMappingsDecoded0: [Swift.String:Swift.String]? = nil
        if let columnToJsonKeyMappingsContainer = columnToJsonKeyMappingsContainer {
            columnToJsonKeyMappingsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in columnToJsonKeyMappingsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    columnToJsonKeyMappingsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        columnToJsonKeyMappings = columnToJsonKeyMappingsDecoded0
    }
}

extension FirehoseClientTypes {
    /// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
    public struct OpenXJsonSerDe: Swift.Equatable {
        /// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
        public var caseInsensitive: Swift.Bool?
        /// Maps column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to {"ts": "timestamp"} to map this key to a column named ts.
        public var columnToJsonKeyMappings: [Swift.String:Swift.String]?
        /// When set to true, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. The default is false.
        public var convertDotsInJsonKeysToUnderscores: Swift.Bool?

        public init (
            caseInsensitive: Swift.Bool? = nil,
            columnToJsonKeyMappings: [Swift.String:Swift.String]? = nil,
            convertDotsInJsonKeysToUnderscores: Swift.Bool? = nil
        )
        {
            self.caseInsensitive = caseInsensitive
            self.columnToJsonKeyMappings = columnToJsonKeyMappings
            self.convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores
        }
    }

}

extension FirehoseClientTypes {
    public enum OrcCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case snappy
        case zlib
        case sdkUnknown(Swift.String)

        public static var allCases: [OrcCompression] {
            return [
                .none,
                .snappy,
                .zlib,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .snappy: return "SNAPPY"
            case .zlib: return "ZLIB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrcCompression(rawValue: rawValue) ?? OrcCompression.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes {
    public enum OrcFormatVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v011
        case v012
        case sdkUnknown(Swift.String)

        public static var allCases: [OrcFormatVersion] {
            return [
                .v011,
                .v012,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v011: return "V0_11"
            case .v012: return "V0_12"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrcFormatVersion(rawValue: rawValue) ?? OrcFormatVersion.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.OrcSerDe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockSizeBytes = "BlockSizeBytes"
        case bloomFilterColumns = "BloomFilterColumns"
        case bloomFilterFalsePositiveProbability = "BloomFilterFalsePositiveProbability"
        case compression = "Compression"
        case dictionaryKeyThreshold = "DictionaryKeyThreshold"
        case enablePadding = "EnablePadding"
        case formatVersion = "FormatVersion"
        case paddingTolerance = "PaddingTolerance"
        case rowIndexStride = "RowIndexStride"
        case stripeSizeBytes = "StripeSizeBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockSizeBytes = self.blockSizeBytes {
            try encodeContainer.encode(blockSizeBytes, forKey: .blockSizeBytes)
        }
        if let bloomFilterColumns = bloomFilterColumns {
            var bloomFilterColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bloomFilterColumns)
            for nonemptystringwithoutwhitespace0 in bloomFilterColumns {
                try bloomFilterColumnsContainer.encode(nonemptystringwithoutwhitespace0)
            }
        }
        if let bloomFilterFalsePositiveProbability = self.bloomFilterFalsePositiveProbability {
            try encodeContainer.encode(bloomFilterFalsePositiveProbability, forKey: .bloomFilterFalsePositiveProbability)
        }
        if let compression = self.compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let dictionaryKeyThreshold = self.dictionaryKeyThreshold {
            try encodeContainer.encode(dictionaryKeyThreshold, forKey: .dictionaryKeyThreshold)
        }
        if let enablePadding = self.enablePadding {
            try encodeContainer.encode(enablePadding, forKey: .enablePadding)
        }
        if let formatVersion = self.formatVersion {
            try encodeContainer.encode(formatVersion.rawValue, forKey: .formatVersion)
        }
        if let paddingTolerance = self.paddingTolerance {
            try encodeContainer.encode(paddingTolerance, forKey: .paddingTolerance)
        }
        if let rowIndexStride = self.rowIndexStride {
            try encodeContainer.encode(rowIndexStride, forKey: .rowIndexStride)
        }
        if let stripeSizeBytes = self.stripeSizeBytes {
            try encodeContainer.encode(stripeSizeBytes, forKey: .stripeSizeBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stripeSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stripeSizeBytes)
        stripeSizeBytes = stripeSizeBytesDecoded
        let blockSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSizeBytes)
        blockSizeBytes = blockSizeBytesDecoded
        let rowIndexStrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rowIndexStride)
        rowIndexStride = rowIndexStrideDecoded
        let enablePaddingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePadding)
        enablePadding = enablePaddingDecoded
        let paddingToleranceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .paddingTolerance)
        paddingTolerance = paddingToleranceDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.OrcCompression.self, forKey: .compression)
        compression = compressionDecoded
        let bloomFilterColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bloomFilterColumns)
        var bloomFilterColumnsDecoded0:[Swift.String]? = nil
        if let bloomFilterColumnsContainer = bloomFilterColumnsContainer {
            bloomFilterColumnsDecoded0 = [Swift.String]()
            for string0 in bloomFilterColumnsContainer {
                if let string0 = string0 {
                    bloomFilterColumnsDecoded0?.append(string0)
                }
            }
        }
        bloomFilterColumns = bloomFilterColumnsDecoded0
        let bloomFilterFalsePositiveProbabilityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bloomFilterFalsePositiveProbability)
        bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbabilityDecoded
        let dictionaryKeyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dictionaryKeyThreshold)
        dictionaryKeyThreshold = dictionaryKeyThresholdDecoded
        let formatVersionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.OrcFormatVersion.self, forKey: .formatVersion)
        formatVersion = formatVersionDecoded
    }
}

extension FirehoseClientTypes {
    /// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/).
    public struct OrcSerDe: Swift.Equatable {
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        public var blockSizeBytes: Swift.Int?
        /// The column names for which you want Kinesis Data Firehose to create bloom filters. The default is null.
        public var bloomFilterColumns: [Swift.String]?
        /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
        public var bloomFilterFalsePositiveProbability: Swift.Double?
        /// The compression code to use over data blocks. The default is SNAPPY.
        public var compression: FirehoseClientTypes.OrcCompression?
        /// Represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
        public var dictionaryKeyThreshold: Swift.Double?
        /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
        public var enablePadding: Swift.Bool?
        /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
        public var formatVersion: FirehoseClientTypes.OrcFormatVersion?
        /// A number between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when [OrcSerDe$EnablePadding] is false.
        public var paddingTolerance: Swift.Double?
        /// The number of rows between index entries. The default is 10,000 and the minimum is 1,000.
        public var rowIndexStride: Swift.Int?
        /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
        public var stripeSizeBytes: Swift.Int?

        public init (
            blockSizeBytes: Swift.Int? = nil,
            bloomFilterColumns: [Swift.String]? = nil,
            bloomFilterFalsePositiveProbability: Swift.Double? = nil,
            compression: FirehoseClientTypes.OrcCompression? = nil,
            dictionaryKeyThreshold: Swift.Double? = nil,
            enablePadding: Swift.Bool? = nil,
            formatVersion: FirehoseClientTypes.OrcFormatVersion? = nil,
            paddingTolerance: Swift.Double? = nil,
            rowIndexStride: Swift.Int? = nil,
            stripeSizeBytes: Swift.Int? = nil
        )
        {
            self.blockSizeBytes = blockSizeBytes
            self.bloomFilterColumns = bloomFilterColumns
            self.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability
            self.compression = compression
            self.dictionaryKeyThreshold = dictionaryKeyThreshold
            self.enablePadding = enablePadding
            self.formatVersion = formatVersion
            self.paddingTolerance = paddingTolerance
            self.rowIndexStride = rowIndexStride
            self.stripeSizeBytes = stripeSizeBytes
        }
    }

}

extension FirehoseClientTypes.OutputFormatConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serializer = "Serializer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serializer = self.serializer {
            try encodeContainer.encode(serializer, forKey: .serializer)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serializerDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.Serializer.self, forKey: .serializer)
        serializer = serializerDecoded
    }
}

extension FirehoseClientTypes {
    /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
    public struct OutputFormatConfiguration: Swift.Equatable {
        /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.
        public var serializer: FirehoseClientTypes.Serializer?

        public init (
            serializer: FirehoseClientTypes.Serializer? = nil
        )
        {
            self.serializer = serializer
        }
    }

}

extension FirehoseClientTypes {
    public enum ParquetCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case snappy
        case uncompressed
        case sdkUnknown(Swift.String)

        public static var allCases: [ParquetCompression] {
            return [
                .gzip,
                .snappy,
                .uncompressed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .snappy: return "SNAPPY"
            case .uncompressed: return "UNCOMPRESSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParquetCompression(rawValue: rawValue) ?? ParquetCompression.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.ParquetSerDe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockSizeBytes = "BlockSizeBytes"
        case compression = "Compression"
        case enableDictionaryCompression = "EnableDictionaryCompression"
        case maxPaddingBytes = "MaxPaddingBytes"
        case pageSizeBytes = "PageSizeBytes"
        case writerVersion = "WriterVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockSizeBytes = self.blockSizeBytes {
            try encodeContainer.encode(blockSizeBytes, forKey: .blockSizeBytes)
        }
        if let compression = self.compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let enableDictionaryCompression = self.enableDictionaryCompression {
            try encodeContainer.encode(enableDictionaryCompression, forKey: .enableDictionaryCompression)
        }
        if let maxPaddingBytes = self.maxPaddingBytes {
            try encodeContainer.encode(maxPaddingBytes, forKey: .maxPaddingBytes)
        }
        if let pageSizeBytes = self.pageSizeBytes {
            try encodeContainer.encode(pageSizeBytes, forKey: .pageSizeBytes)
        }
        if let writerVersion = self.writerVersion {
            try encodeContainer.encode(writerVersion.rawValue, forKey: .writerVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSizeBytes)
        blockSizeBytes = blockSizeBytesDecoded
        let pageSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSizeBytes)
        pageSizeBytes = pageSizeBytesDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ParquetCompression.self, forKey: .compression)
        compression = compressionDecoded
        let enableDictionaryCompressionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableDictionaryCompression)
        enableDictionaryCompression = enableDictionaryCompressionDecoded
        let maxPaddingBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPaddingBytes)
        maxPaddingBytes = maxPaddingBytesDecoded
        let writerVersionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ParquetWriterVersion.self, forKey: .writerVersion)
        writerVersion = writerVersionDecoded
    }
}

extension FirehoseClientTypes {
    /// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/).
    public struct ParquetSerDe: Swift.Equatable {
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        public var blockSizeBytes: Swift.Int?
        /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
        public var compression: FirehoseClientTypes.ParquetCompression?
        /// Indicates whether to enable dictionary compression.
        public var enableDictionaryCompression: Swift.Bool?
        /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
        public var maxPaddingBytes: Swift.Int?
        /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
        public var pageSizeBytes: Swift.Int?
        /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
        public var writerVersion: FirehoseClientTypes.ParquetWriterVersion?

        public init (
            blockSizeBytes: Swift.Int? = nil,
            compression: FirehoseClientTypes.ParquetCompression? = nil,
            enableDictionaryCompression: Swift.Bool? = nil,
            maxPaddingBytes: Swift.Int? = nil,
            pageSizeBytes: Swift.Int? = nil,
            writerVersion: FirehoseClientTypes.ParquetWriterVersion? = nil
        )
        {
            self.blockSizeBytes = blockSizeBytes
            self.compression = compression
            self.enableDictionaryCompression = enableDictionaryCompression
            self.maxPaddingBytes = maxPaddingBytes
            self.pageSizeBytes = pageSizeBytes
            self.writerVersion = writerVersion
        }
    }

}

extension FirehoseClientTypes {
    public enum ParquetWriterVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v1
        case v2
        case sdkUnknown(Swift.String)

        public static var allCases: [ParquetWriterVersion] {
            return [
                .v1,
                .v2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V1"
            case .v2: return "V2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParquetWriterVersion(rawValue: rawValue) ?? ParquetWriterVersion.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.ProcessingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case processors = "Processors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let processors = processors {
            var processorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processors)
            for processor0 in processors {
                try processorsContainer.encode(processor0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let processorsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Processor?].self, forKey: .processors)
        var processorsDecoded0:[FirehoseClientTypes.Processor]? = nil
        if let processorsContainer = processorsContainer {
            processorsDecoded0 = [FirehoseClientTypes.Processor]()
            for structure0 in processorsContainer {
                if let structure0 = structure0 {
                    processorsDecoded0?.append(structure0)
                }
            }
        }
        processors = processorsDecoded0
    }
}

extension FirehoseClientTypes {
    /// Describes a data processing configuration.
    public struct ProcessingConfiguration: Swift.Equatable {
        /// Enables or disables data processing.
        public var enabled: Swift.Bool?
        /// The data processors.
        public var processors: [FirehoseClientTypes.Processor]?

        public init (
            enabled: Swift.Bool? = nil,
            processors: [FirehoseClientTypes.Processor]? = nil
        )
        {
            self.enabled = enabled
            self.processors = processors
        }
    }

}

extension FirehoseClientTypes.Processor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for processorparameter0 in parameters {
                try parametersContainer.encode(processorparameter0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessorType.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.ProcessorParameter?].self, forKey: .parameters)
        var parametersDecoded0:[FirehoseClientTypes.ProcessorParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [FirehoseClientTypes.ProcessorParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension FirehoseClientTypes {
    /// Describes a data processor.
    public struct Processor: Swift.Equatable {
        /// The processor parameters.
        public var parameters: [FirehoseClientTypes.ProcessorParameter]?
        /// The type of processor.
        /// This member is required.
        public var type: FirehoseClientTypes.ProcessorType?

        public init (
            parameters: [FirehoseClientTypes.ProcessorParameter]? = nil,
            type: FirehoseClientTypes.ProcessorType? = nil
        )
        {
            self.parameters = parameters
            self.type = type
        }
    }

}

extension FirehoseClientTypes.ProcessorParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterName = self.parameterName {
            try encodeContainer.encode(parameterName.rawValue, forKey: .parameterName)
        }
        if let parameterValue = self.parameterValue {
            try encodeContainer.encode(parameterValue, forKey: .parameterValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessorParameterName.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the processor parameter.
    public struct ProcessorParameter: Swift.Equatable {
        /// The name of the parameter. Currently the following default values are supported: 3 for NumberOfRetries and 60 for the BufferIntervalInSeconds. The BufferSizeInMBs ranges between 0.2 MB and up to 3MB. The default buffering hint is 1MB for all destinations, except Splunk. For Splunk, the default buffering hint is 256 KB.
        /// This member is required.
        public var parameterName: FirehoseClientTypes.ProcessorParameterName?
        /// The parameter value.
        /// This member is required.
        public var parameterValue: Swift.String?

        public init (
            parameterName: FirehoseClientTypes.ProcessorParameterName? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension FirehoseClientTypes {
    public enum ProcessorParameterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bufferIntervalInSeconds
        case bufferSizeInMb
        case delimiter
        case jsonParsingEngine
        case lambdaArn
        case lambdaNumberOfRetries
        case metadataExtractionQuery
        case roleArn
        case subRecordType
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessorParameterName] {
            return [
                .bufferIntervalInSeconds,
                .bufferSizeInMb,
                .delimiter,
                .jsonParsingEngine,
                .lambdaArn,
                .lambdaNumberOfRetries,
                .metadataExtractionQuery,
                .roleArn,
                .subRecordType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bufferIntervalInSeconds: return "BufferIntervalInSeconds"
            case .bufferSizeInMb: return "BufferSizeInMBs"
            case .delimiter: return "Delimiter"
            case .jsonParsingEngine: return "JsonParsingEngine"
            case .lambdaArn: return "LambdaArn"
            case .lambdaNumberOfRetries: return "NumberOfRetries"
            case .metadataExtractionQuery: return "MetadataExtractionQuery"
            case .roleArn: return "RoleArn"
            case .subRecordType: return "SubRecordType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessorParameterName(rawValue: rawValue) ?? ProcessorParameterName.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes {
    public enum ProcessorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case appenddelimitertorecord
        case lambda
        case metadataextraction
        case recorddeaggregation
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessorType] {
            return [
                .appenddelimitertorecord,
                .lambda,
                .metadataextraction,
                .recorddeaggregation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .appenddelimitertorecord: return "AppendDelimiterToRecord"
            case .lambda: return "Lambda"
            case .metadataextraction: return "MetadataExtraction"
            case .recorddeaggregation: return "RecordDeAggregation"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessorType(rawValue: rawValue) ?? ProcessorType.sdkUnknown(rawValue)
        }
    }
}

extension PutRecordBatchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case records = "Records"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for record0 in records {
                try recordsContainer.encode(record0)
            }
        }
    }
}

extension PutRecordBatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRecordBatchInput: Swift.Equatable {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// One or more records.
    /// This member is required.
    public var records: [FirehoseClientTypes.Record]?

    public init (
        deliveryStreamName: Swift.String? = nil,
        records: [FirehoseClientTypes.Record]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.records = records
    }
}

struct PutRecordBatchInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let records: [FirehoseClientTypes.Record]?
}

extension PutRecordBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case records = "Records"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let recordsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[FirehoseClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [FirehoseClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
    }
}

extension PutRecordBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRecordBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSResourceException" : self = .invalidKMSResourceException(try InvalidKMSResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRecordBatchOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case invalidKMSResourceException(InvalidKMSResourceException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRecordBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutRecordBatchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.encrypted = output.encrypted
            self.failedPutCount = output.failedPutCount
            self.requestResponses = output.requestResponses
        } else {
            self.encrypted = nil
            self.failedPutCount = nil
            self.requestResponses = nil
        }
    }
}

public struct PutRecordBatchOutputResponse: Swift.Equatable {
    /// Indicates whether server-side encryption (SSE) was enabled during this operation.
    public var encrypted: Swift.Bool?
    /// The number of records that might have failed processing. This number might be greater than 0 even if the [PutRecordBatch] call succeeds. Check FailedPutCount to determine whether there are records that you need to resend.
    /// This member is required.
    public var failedPutCount: Swift.Int?
    /// The results array. For each record, the index of the response element is the same as the index used in the request array.
    /// This member is required.
    public var requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]?

    public init (
        encrypted: Swift.Bool? = nil,
        failedPutCount: Swift.Int? = nil,
        requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]? = nil
    )
    {
        self.encrypted = encrypted
        self.failedPutCount = failedPutCount
        self.requestResponses = requestResponses
    }
}

struct PutRecordBatchOutputResponseBody: Swift.Equatable {
    let failedPutCount: Swift.Int?
    let encrypted: Swift.Bool?
    let requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]?
}

extension PutRecordBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encrypted = "Encrypted"
        case failedPutCount = "FailedPutCount"
        case requestResponses = "RequestResponses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedPutCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedPutCount)
        failedPutCount = failedPutCountDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let requestResponsesContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.PutRecordBatchResponseEntry?].self, forKey: .requestResponses)
        var requestResponsesDecoded0:[FirehoseClientTypes.PutRecordBatchResponseEntry]? = nil
        if let requestResponsesContainer = requestResponsesContainer {
            requestResponsesDecoded0 = [FirehoseClientTypes.PutRecordBatchResponseEntry]()
            for structure0 in requestResponsesContainer {
                if let structure0 = structure0 {
                    requestResponsesDecoded0?.append(structure0)
                }
            }
        }
        requestResponses = requestResponsesDecoded0
    }
}

extension FirehoseClientTypes.PutRecordBatchResponseEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case recordId = "RecordId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let recordId = self.recordId {
            try encodeContainer.encode(recordId, forKey: .recordId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordId)
        recordId = recordIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension FirehoseClientTypes {
    /// Contains the result for an individual record from a [PutRecordBatch] request. If the record is successfully added to your delivery stream, it receives a record ID. If the record fails to be added to your delivery stream, the result includes an error code and an error message.
    public struct PutRecordBatchResponseEntry: Swift.Equatable {
        /// The error code for an individual record result.
        public var errorCode: Swift.String?
        /// The error message for an individual record result.
        public var errorMessage: Swift.String?
        /// The ID of the record.
        public var recordId: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            recordId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.recordId = recordId
        }
    }

}

extension PutRecordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case record = "Record"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let record = self.record {
            try encodeContainer.encode(record, forKey: .record)
        }
    }
}

extension PutRecordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRecordInput: Swift.Equatable {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The record.
    /// This member is required.
    public var record: FirehoseClientTypes.Record?

    public init (
        deliveryStreamName: Swift.String? = nil,
        record: FirehoseClientTypes.Record? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.record = record
    }
}

struct PutRecordInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let record: FirehoseClientTypes.Record?
}

extension PutRecordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case record = "Record"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let recordDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.Record.self, forKey: .record)
        record = recordDecoded
    }
}

extension PutRecordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRecordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSResourceException" : self = .invalidKMSResourceException(try InvalidKMSResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRecordOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case invalidKMSResourceException(InvalidKMSResourceException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRecordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutRecordOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.encrypted = output.encrypted
            self.recordId = output.recordId
        } else {
            self.encrypted = nil
            self.recordId = nil
        }
    }
}

public struct PutRecordOutputResponse: Swift.Equatable {
    /// Indicates whether server-side encryption (SSE) was enabled during this operation.
    public var encrypted: Swift.Bool?
    /// The ID of the record.
    /// This member is required.
    public var recordId: Swift.String?

    public init (
        encrypted: Swift.Bool? = nil,
        recordId: Swift.String? = nil
    )
    {
        self.encrypted = encrypted
        self.recordId = recordId
    }
}

struct PutRecordOutputResponseBody: Swift.Equatable {
    let recordId: Swift.String?
    let encrypted: Swift.Bool?
}

extension PutRecordOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encrypted = "Encrypted"
        case recordId = "RecordId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordId)
        recordId = recordIdDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
    }
}

extension FirehoseClientTypes.Record: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
    }
}

extension FirehoseClientTypes {
    /// The unit of data in a delivery stream.
    public struct Record: Swift.Equatable {
        /// The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KiB.
        /// This member is required.
        public var data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterJDBCURL = "ClusterJDBCURL"
        case copyCommand = "CopyCommand"
        case password = "Password"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupConfiguration = "S3BackupConfiguration"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterJDBCURL = self.clusterJDBCURL {
            try encodeContainer.encode(clusterJDBCURL, forKey: .clusterJDBCURL)
        }
        if let copyCommand = self.copyCommand {
            try encodeContainer.encode(copyCommand, forKey: .copyCommand)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupConfiguration = self.s3BackupConfiguration {
            try encodeContainer.encode(s3BackupConfiguration, forKey: .s3BackupConfiguration)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clusterJDBCURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterJDBCURL)
        clusterJDBCURL = clusterJDBCURLDecoded
        let copyCommandDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CopyCommand.self, forKey: .copyCommand)
        copyCommand = copyCommandDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3BackupConfiguration)
        s3BackupConfiguration = s3BackupConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes.RedshiftDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationConfiguration(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupConfiguration: \(Swift.String(describing: s3BackupConfiguration)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3Configuration: \(Swift.String(describing: s3Configuration)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon Redshift.
    public struct RedshiftDestinationConfiguration: Swift.Equatable {
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        /// This member is required.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        /// This member is required.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The user password.
        /// This member is required.
        public var password: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for [CreateDeliveryStream]. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationConfiguration.S3Configuration because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The name of the user.
        /// This member is required.
        public var username: Swift.String?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            password: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupConfiguration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterJDBCURL = "ClusterJDBCURL"
        case copyCommand = "CopyCommand"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupDescription = "S3BackupDescription"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterJDBCURL = self.clusterJDBCURL {
            try encodeContainer.encode(clusterJDBCURL, forKey: .clusterJDBCURL)
        }
        if let copyCommand = self.copyCommand {
            try encodeContainer.encode(copyCommand, forKey: .copyCommand)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupDescription = self.s3BackupDescription {
            try encodeContainer.encode(s3BackupDescription, forKey: .s3BackupDescription)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clusterJDBCURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterJDBCURL)
        clusterJDBCURL = clusterJDBCURLDecoded
        let copyCommandDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CopyCommand.self, forKey: .copyCommand)
        copyCommand = copyCommandDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3BackupDescription)
        s3BackupDescription = s3BackupDescriptionDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes.RedshiftDestinationDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationDescription(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupDescription: \(Swift.String(describing: s3BackupDescription)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3DestinationDescription: \(Swift.String(describing: s3DestinationDescription)), username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon Redshift.
    public struct RedshiftDestinationDescription: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        /// This member is required.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        /// This member is required.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// The configuration for backup in Amazon S3.
        public var s3BackupDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The Amazon S3 backup mode.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The Amazon S3 destination.
        /// This member is required.
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?
        /// The name of the user.
        /// This member is required.
        public var username: Swift.String?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupDescription = s3BackupDescription
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterJDBCURL = "ClusterJDBCURL"
        case copyCommand = "CopyCommand"
        case password = "Password"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3BackupUpdate = "S3BackupUpdate"
        case s3Update = "S3Update"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterJDBCURL = self.clusterJDBCURL {
            try encodeContainer.encode(clusterJDBCURL, forKey: .clusterJDBCURL)
        }
        if let copyCommand = self.copyCommand {
            try encodeContainer.encode(copyCommand, forKey: .copyCommand)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3BackupUpdate = self.s3BackupUpdate {
            try encodeContainer.encode(s3BackupUpdate, forKey: .s3BackupUpdate)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clusterJDBCURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterJDBCURL)
        clusterJDBCURL = clusterJDBCURLDecoded
        let copyCommandDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CopyCommand.self, forKey: .copyCommand)
        copyCommand = copyCommandDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3BackupUpdate)
        s3BackupUpdate = s3BackupUpdateDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes.RedshiftDestinationUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDestinationUpdate(cloudWatchLoggingOptions: \(Swift.String(describing: cloudWatchLoggingOptions)), clusterJDBCURL: \(Swift.String(describing: clusterJDBCURL)), copyCommand: \(Swift.String(describing: copyCommand)), processingConfiguration: \(Swift.String(describing: processingConfiguration)), retryOptions: \(Swift.String(describing: retryOptions)), roleARN: \(Swift.String(describing: roleARN)), s3BackupMode: \(Swift.String(describing: s3BackupMode)), s3BackupUpdate: \(Swift.String(describing: s3BackupUpdate)), s3Update: \(Swift.String(describing: s3Update)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon Redshift.
    public struct RedshiftDestinationUpdate: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The user password.
        public var password: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// You can update a delivery stream to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The Amazon S3 destination for backup.
        public var s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The name of the user.
        public var username: Swift.String?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            password: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3BackupUpdate = s3BackupUpdate
            self.s3Update = s3Update
            self.username = username
        }
    }

}

extension FirehoseClientTypes.RedshiftRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
    public struct RedshiftRetryOptions: Swift.Equatable {
        /// The length of time during which Kinesis Data Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Kinesis Data Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum RedshiftS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftS3BackupMode] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedshiftS3BackupMode(rawValue: rawValue) ?? RedshiftS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource is already in use and not available for this operation.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource could not be found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FirehoseClientTypes.RetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.
    public struct RetryOptions: Swift.Equatable {
        /// The period of time during which Kinesis Data Firehose retries to deliver data to the specified Amazon S3 prefix.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum S3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [S3BackupMode] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3BackupMode(rawValue: rawValue) ?? S3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension FirehoseClientTypes.S3DestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon S3.
    public struct S3DestinationConfiguration: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes.S3DestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes a destination in Amazon S3.
    public struct S3DestinationDescription: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        /// This member is required.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        /// This member is required.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        /// This member is required.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes.S3DestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon S3.
    public struct S3DestinationUpdate: Swift.Equatable {
        /// The ARN of the S3 bucket. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var bucketARN: Swift.String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public var bufferingHints: FirehoseClientTypes.BufferingHints?
        /// The CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public var compressionFormat: FirehoseClientTypes.CompressionFormat?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public var encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration?
        /// A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var errorOutputPrefix: Swift.String?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
        public var `prefix`: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?

        public init (
            bucketARN: Swift.String? = nil,
            bufferingHints: FirehoseClientTypes.BufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            compressionFormat: FirehoseClientTypes.CompressionFormat? = nil,
            encryptionConfiguration: FirehoseClientTypes.EncryptionConfiguration? = nil,
            errorOutputPrefix: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.encryptionConfiguration = encryptionConfiguration
            self.errorOutputPrefix = errorOutputPrefix
            self.`prefix` = `prefix`
            self.roleARN = roleARN
        }
    }

}

extension FirehoseClientTypes.SchemaConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case region = "Region"
        case roleARN = "RoleARN"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = self.catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let versionId = self.versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension FirehoseClientTypes {
    /// Specifies the schema to which you want Kinesis Data Firehose to configure your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
    public struct SchemaConfiguration: Swift.Equatable {
        /// The ID of the Amazon Web Services Glue Data Catalog. If you don't supply this, the Amazon Web Services account ID is used by default.
        public var catalogId: Swift.String?
        /// Specifies the name of the Amazon Web Services Glue database that contains the schema for the output data. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the DatabaseName property is required and its value must be specified.
        public var databaseName: Swift.String?
        /// If you don't specify an Amazon Web Services Region, the default is the current Region.
        public var region: Swift.String?
        /// The role that Kinesis Data Firehose can use to access Amazon Web Services Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the RoleARN property is required and its value must be specified.
        public var roleARN: Swift.String?
        /// Specifies the Amazon Web Services Glue table that contains the column information that constitutes your data schema. If the SchemaConfiguration request parameter is used as part of invoking the CreateDeliveryStream API, then the TableName property is required and its value must be specified.
        public var tableName: Swift.String?
        /// Specifies the table version for the output data schema. If you don't specify this version ID, or if you set it to LATEST, Kinesis Data Firehose uses the most recent version. This means that any updates to the table are automatically picked up.
        public var versionId: Swift.String?

        public init (
            catalogId: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            region: Swift.String? = nil,
            roleARN: Swift.String? = nil,
            tableName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.databaseName = databaseName
            self.region = region
            self.roleARN = roleARN
            self.tableName = tableName
            self.versionId = versionId
        }
    }

}

extension FirehoseClientTypes.Serializer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case orcSerDe = "OrcSerDe"
        case parquetSerDe = "ParquetSerDe"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let orcSerDe = self.orcSerDe {
            try encodeContainer.encode(orcSerDe, forKey: .orcSerDe)
        }
        if let parquetSerDe = self.parquetSerDe {
            try encodeContainer.encode(parquetSerDe, forKey: .parquetSerDe)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parquetSerDeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ParquetSerDe.self, forKey: .parquetSerDe)
        parquetSerDe = parquetSerDeDecoded
        let orcSerDeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.OrcSerDe.self, forKey: .orcSerDe)
        orcSerDe = orcSerDeDecoded
    }
}

extension FirehoseClientTypes {
    /// The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the [ORC SerDe](https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html) and the [Parquet SerDe](https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
    public struct Serializer: Swift.Equatable {
        /// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/).
        public var orcSerDe: FirehoseClientTypes.OrcSerDe?
        /// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/).
        public var parquetSerDe: FirehoseClientTypes.ParquetSerDe?

        public init (
            orcSerDe: FirehoseClientTypes.OrcSerDe? = nil,
            parquetSerDe: FirehoseClientTypes.ParquetSerDe? = nil
        )
        {
            self.orcSerDe = orcSerDe
            self.parquetSerDe = parquetSerDe
        }
    }

}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is unavailable. Back off and retry the operation. If you continue to see the exception, throughput limits for the delivery stream may have been exceeded. For more information about limits and how to request an increase, see [Amazon Kinesis Data Firehose Limits](https://docs.aws.amazon.com/firehose/latest/dev/limits.html).
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A message that provides information about the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FirehoseClientTypes.SourceDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kinesisStreamSourceDescription = "KinesisStreamSourceDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kinesisStreamSourceDescription = self.kinesisStreamSourceDescription {
            try encodeContainer.encode(kinesisStreamSourceDescription, forKey: .kinesisStreamSourceDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kinesisStreamSourceDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KinesisStreamSourceDescription.self, forKey: .kinesisStreamSourceDescription)
        kinesisStreamSourceDescription = kinesisStreamSourceDescriptionDecoded
    }
}

extension FirehoseClientTypes {
    /// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
    public struct SourceDescription: Swift.Equatable {
        /// The [KinesisStreamSourceDescription] value for the source Kinesis data stream.
        public var kinesisStreamSourceDescription: FirehoseClientTypes.KinesisStreamSourceDescription?

        public init (
            kinesisStreamSourceDescription: FirehoseClientTypes.KinesisStreamSourceDescription? = nil
        )
        {
            self.kinesisStreamSourceDescription = kinesisStreamSourceDescription
        }
    }

}

extension FirehoseClientTypes.SplunkDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case hecAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
        case hecEndpoint = "HECEndpoint"
        case hecEndpointType = "HECEndpointType"
        case hecToken = "HECToken"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let hecAcknowledgmentTimeoutInSeconds = self.hecAcknowledgmentTimeoutInSeconds {
            try encodeContainer.encode(hecAcknowledgmentTimeoutInSeconds, forKey: .hecAcknowledgmentTimeoutInSeconds)
        }
        if let hecEndpoint = self.hecEndpoint {
            try encodeContainer.encode(hecEndpoint, forKey: .hecEndpoint)
        }
        if let hecEndpointType = self.hecEndpointType {
            try encodeContainer.encode(hecEndpointType.rawValue, forKey: .hecEndpointType)
        }
        if let hecToken = self.hecToken {
            try encodeContainer.encode(hecToken, forKey: .hecToken)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hecEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecEndpoint)
        hecEndpoint = hecEndpointDecoded
        let hecEndpointTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HECEndpointType.self, forKey: .hecEndpointType)
        hecEndpointType = hecEndpointTypeDecoded
        let hecTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecToken)
        hecToken = hecTokenDecoded
        let hecAcknowledgmentTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hecAcknowledgmentTimeoutInSeconds)
        hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSecondsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Splunk.
    public struct SplunkDestinationConfiguration: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        /// This member is required.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        /// This member is required.
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        /// This member is required.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedEventsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllEvents, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is FailedEventsOnly. You can update this backup mode from FailedEventsOnly to AllEvents. You can't update it from AllEvents to FailedEventsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// The configuration for the backup Amazon S3 location.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
        }
    }

}

extension FirehoseClientTypes.SplunkDestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case hecAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
        case hecEndpoint = "HECEndpoint"
        case hecEndpointType = "HECEndpointType"
        case hecToken = "HECToken"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case s3BackupMode = "S3BackupMode"
        case s3DestinationDescription = "S3DestinationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let hecAcknowledgmentTimeoutInSeconds = self.hecAcknowledgmentTimeoutInSeconds {
            try encodeContainer.encode(hecAcknowledgmentTimeoutInSeconds, forKey: .hecAcknowledgmentTimeoutInSeconds)
        }
        if let hecEndpoint = self.hecEndpoint {
            try encodeContainer.encode(hecEndpoint, forKey: .hecEndpoint)
        }
        if let hecEndpointType = self.hecEndpointType {
            try encodeContainer.encode(hecEndpointType.rawValue, forKey: .hecEndpointType)
        }
        if let hecToken = self.hecToken {
            try encodeContainer.encode(hecToken, forKey: .hecToken)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hecEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecEndpoint)
        hecEndpoint = hecEndpointDecoded
        let hecEndpointTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HECEndpointType.self, forKey: .hecEndpointType)
        hecEndpointType = hecEndpointTypeDecoded
        let hecTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecToken)
        hecToken = hecTokenDecoded
        let hecAcknowledgmentTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hecAcknowledgmentTimeoutInSeconds)
        hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSecondsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes a destination in Splunk.
    public struct SplunkDestinationDescription: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// A GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// The Amazon S3 destination.>
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
        }
    }

}

extension FirehoseClientTypes.SplunkDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case hecAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
        case hecEndpoint = "HECEndpoint"
        case hecEndpointType = "HECEndpointType"
        case hecToken = "HECToken"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case s3BackupMode = "S3BackupMode"
        case s3Update = "S3Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let hecAcknowledgmentTimeoutInSeconds = self.hecAcknowledgmentTimeoutInSeconds {
            try encodeContainer.encode(hecAcknowledgmentTimeoutInSeconds, forKey: .hecAcknowledgmentTimeoutInSeconds)
        }
        if let hecEndpoint = self.hecEndpoint {
            try encodeContainer.encode(hecEndpoint, forKey: .hecEndpoint)
        }
        if let hecEndpointType = self.hecEndpointType {
            try encodeContainer.encode(hecEndpointType.rawValue, forKey: .hecEndpointType)
        }
        if let hecToken = self.hecToken {
            try encodeContainer.encode(hecToken, forKey: .hecToken)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hecEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecEndpoint)
        hecEndpoint = hecEndpointDecoded
        let hecEndpointTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HECEndpointType.self, forKey: .hecEndpointType)
        hecEndpointType = hecEndpointTypeDecoded
        let hecTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hecToken)
        hecToken = hecTokenDecoded
        let hecAcknowledgmentTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hecAcknowledgmentTimeoutInSeconds)
        hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSecondsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}

extension FirehoseClientTypes {
    /// Describes an update for a destination in Splunk.
    public struct SplunkDestinationUpdate: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hecAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public var hecEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        public var hecEndpointType: FirehoseClientTypes.HECEndpointType?
        /// A GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hecToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Specifies how you want Kinesis Data Firehose to back up documents to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllEvents, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is FailedEventsOnly. You can update this backup mode from FailedEventsOnly to AllEvents. You can't update it from AllEvents to FailedEventsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// Your update to the configuration of the backup Amazon S3 location.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hecAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hecEndpoint: Swift.String? = nil,
            hecEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hecToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hecAcknowledgmentTimeoutInSeconds = hecAcknowledgmentTimeoutInSeconds
            self.hecEndpoint = hecEndpoint
            self.hecEndpointType = hecEndpointType
            self.hecToken = hecToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3Update = s3Update
        }
    }

}

extension FirehoseClientTypes.SplunkRetryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = self.durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension FirehoseClientTypes {
    /// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
    public struct SplunkRetryOptions: Swift.Equatable {
        /// The total amount of time that Kinesis Data Firehose spends on retries. This duration starts after the initial attempt to send data to Splunk fails. It doesn't include the periods during which Kinesis Data Firehose waits for acknowledgment from Splunk after each attempt.
        public var durationInSeconds: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
        }
    }

}

extension FirehoseClientTypes {
    public enum SplunkS3BackupMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allevents
        case failedeventsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [SplunkS3BackupMode] {
            return [
                .allevents,
                .failedeventsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allevents: return "AllEvents"
            case .failedeventsonly: return "FailedEventsOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SplunkS3BackupMode(rawValue: rawValue) ?? SplunkS3BackupMode.sdkUnknown(rawValue)
        }
    }
}

extension StartDeliveryStreamEncryptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamEncryptionConfigurationInput = self.deliveryStreamEncryptionConfigurationInput {
            try encodeContainer.encode(deliveryStreamEncryptionConfigurationInput, forKey: .deliveryStreamEncryptionConfigurationInput)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
    }
}

extension StartDeliveryStreamEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDeliveryStreamEncryptionInput: Swift.Equatable {
    /// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
    public var deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    /// The name of the delivery stream for which you want to enable server-side encryption (SSE).
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init (
        deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput? = nil,
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput
        self.deliveryStreamName = deliveryStreamName
    }
}

struct StartDeliveryStreamEncryptionInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
}

extension StartDeliveryStreamEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamEncryptionConfigurationInputDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput.self, forKey: .deliveryStreamEncryptionConfigurationInput)
        deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInputDecoded
    }
}

extension StartDeliveryStreamEncryptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDeliveryStreamEncryptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSResourceException" : self = .invalidKMSResourceException(try InvalidKMSResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDeliveryStreamEncryptionOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case invalidKMSResourceException(InvalidKMSResourceException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDeliveryStreamEncryptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartDeliveryStreamEncryptionOutputResponse: Swift.Equatable {

    public init () { }
}

extension StopDeliveryStreamEncryptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
    }
}

extension StopDeliveryStreamEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopDeliveryStreamEncryptionInput: Swift.Equatable {
    /// The name of the delivery stream for which you want to disable server-side encryption (SSE).
    /// This member is required.
    public var deliveryStreamName: Swift.String?

    public init (
        deliveryStreamName: Swift.String? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
    }
}

struct StopDeliveryStreamEncryptionInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
}

extension StopDeliveryStreamEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
    }
}

extension StopDeliveryStreamEncryptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopDeliveryStreamEncryptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopDeliveryStreamEncryptionOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopDeliveryStreamEncryptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopDeliveryStreamEncryptionOutputResponse: Swift.Equatable {

    public init () { }
}

extension FirehoseClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension FirehoseClientTypes {
    /// Metadata that you can assign to a delivery stream, consisting of a key-value pair.
    public struct Tag: Swift.Equatable {
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        /// This member is required.
        public var key: Swift.String?
        /// An optional string, which you can use to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagDeliveryStreamInput: Swift.Equatable {
    /// The name of the delivery stream to which you want to add the tags.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// A set of key-value pairs to use to create the tags.
    /// This member is required.
    public var tags: [FirehoseClientTypes.Tag]?

    public init (
        deliveryStreamName: Swift.String? = nil,
        tags: [FirehoseClientTypes.Tag]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.tags = tags
    }
}

struct TagDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let tags: [FirehoseClientTypes.Tag]?
}

extension TagDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FirehoseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FirehoseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagDeliveryStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension UntagDeliveryStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagDeliveryStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagDeliveryStreamInput: Swift.Equatable {
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// A list of tag keys. Each corresponding tag is removed from the delivery stream.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        deliveryStreamName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.deliveryStreamName = deliveryStreamName
        self.tagKeys = tagKeys
    }
}

struct UntagDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamName = "DeliveryStreamName"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagDeliveryStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagDeliveryStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagDeliveryStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidArgumentException(InvalidArgumentException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagDeliveryStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagDeliveryStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonOpenSearchServerlessDestinationUpdate = "AmazonOpenSearchServerlessDestinationUpdate"
        case amazonopensearchserviceDestinationUpdate = "AmazonopensearchserviceDestinationUpdate"
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonOpenSearchServerlessDestinationUpdate = self.amazonOpenSearchServerlessDestinationUpdate {
            try encodeContainer.encode(amazonOpenSearchServerlessDestinationUpdate, forKey: .amazonOpenSearchServerlessDestinationUpdate)
        }
        if let amazonopensearchserviceDestinationUpdate = self.amazonopensearchserviceDestinationUpdate {
            try encodeContainer.encode(amazonopensearchserviceDestinationUpdate, forKey: .amazonopensearchserviceDestinationUpdate)
        }
        if let currentDeliveryStreamVersionId = self.currentDeliveryStreamVersionId {
            try encodeContainer.encode(currentDeliveryStreamVersionId, forKey: .currentDeliveryStreamVersionId)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let destinationId = self.destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationUpdate = self.elasticsearchDestinationUpdate {
            try encodeContainer.encode(elasticsearchDestinationUpdate, forKey: .elasticsearchDestinationUpdate)
        }
        if let extendedS3DestinationUpdate = self.extendedS3DestinationUpdate {
            try encodeContainer.encode(extendedS3DestinationUpdate, forKey: .extendedS3DestinationUpdate)
        }
        if let httpEndpointDestinationUpdate = self.httpEndpointDestinationUpdate {
            try encodeContainer.encode(httpEndpointDestinationUpdate, forKey: .httpEndpointDestinationUpdate)
        }
        if let redshiftDestinationUpdate = self.redshiftDestinationUpdate {
            try encodeContainer.encode(redshiftDestinationUpdate, forKey: .redshiftDestinationUpdate)
        }
        if let s3DestinationUpdate = self.s3DestinationUpdate {
            try encodeContainer.encode(s3DestinationUpdate, forKey: .s3DestinationUpdate)
        }
        if let splunkDestinationUpdate = self.splunkDestinationUpdate {
            try encodeContainer.encode(splunkDestinationUpdate, forKey: .splunkDestinationUpdate)
        }
    }
}

extension UpdateDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDestinationInput: Swift.Equatable {
    /// Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.
    public var amazonOpenSearchServerlessDestinationUpdate: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate?
    /// Describes an update for a destination in Amazon OpenSearch Service.
    public var amazonopensearchserviceDestinationUpdate: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate?
    /// Obtain this value from the VersionId result of [DeliveryStreamDescription]. This value is required, and helps the service perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the VersionId value is updated. The service then performs a merge of the old configuration with the new configuration.
    /// This member is required.
    public var currentDeliveryStreamVersionId: Swift.String?
    /// The name of the delivery stream.
    /// This member is required.
    public var deliveryStreamName: Swift.String?
    /// The ID of the destination.
    /// This member is required.
    public var destinationId: Swift.String?
    /// Describes an update for a destination in Amazon ES.
    public var elasticsearchDestinationUpdate: FirehoseClientTypes.ElasticsearchDestinationUpdate?
    /// Describes an update for a destination in Amazon S3.
    public var extendedS3DestinationUpdate: FirehoseClientTypes.ExtendedS3DestinationUpdate?
    /// Describes an update to the specified HTTP endpoint destination.
    public var httpEndpointDestinationUpdate: FirehoseClientTypes.HttpEndpointDestinationUpdate?
    /// Describes an update for a destination in Amazon Redshift.
    public var redshiftDestinationUpdate: FirehoseClientTypes.RedshiftDestinationUpdate?
    /// [Deprecated] Describes an update for a destination in Amazon S3.
    @available(*, deprecated)
    public var s3DestinationUpdate: FirehoseClientTypes.S3DestinationUpdate?
    /// Describes an update for a destination in Splunk.
    public var splunkDestinationUpdate: FirehoseClientTypes.SplunkDestinationUpdate?

    public init (
        amazonOpenSearchServerlessDestinationUpdate: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate? = nil,
        amazonopensearchserviceDestinationUpdate: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate? = nil,
        currentDeliveryStreamVersionId: Swift.String? = nil,
        deliveryStreamName: Swift.String? = nil,
        destinationId: Swift.String? = nil,
        elasticsearchDestinationUpdate: FirehoseClientTypes.ElasticsearchDestinationUpdate? = nil,
        extendedS3DestinationUpdate: FirehoseClientTypes.ExtendedS3DestinationUpdate? = nil,
        httpEndpointDestinationUpdate: FirehoseClientTypes.HttpEndpointDestinationUpdate? = nil,
        redshiftDestinationUpdate: FirehoseClientTypes.RedshiftDestinationUpdate? = nil,
        s3DestinationUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil,
        splunkDestinationUpdate: FirehoseClientTypes.SplunkDestinationUpdate? = nil
    )
    {
        self.amazonOpenSearchServerlessDestinationUpdate = amazonOpenSearchServerlessDestinationUpdate
        self.amazonopensearchserviceDestinationUpdate = amazonopensearchserviceDestinationUpdate
        self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
        self.deliveryStreamName = deliveryStreamName
        self.destinationId = destinationId
        self.elasticsearchDestinationUpdate = elasticsearchDestinationUpdate
        self.extendedS3DestinationUpdate = extendedS3DestinationUpdate
        self.httpEndpointDestinationUpdate = httpEndpointDestinationUpdate
        self.redshiftDestinationUpdate = redshiftDestinationUpdate
        self.s3DestinationUpdate = s3DestinationUpdate
        self.splunkDestinationUpdate = splunkDestinationUpdate
    }
}

struct UpdateDestinationInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let currentDeliveryStreamVersionId: Swift.String?
    let destinationId: Swift.String?
    let s3DestinationUpdate: FirehoseClientTypes.S3DestinationUpdate?
    let extendedS3DestinationUpdate: FirehoseClientTypes.ExtendedS3DestinationUpdate?
    let redshiftDestinationUpdate: FirehoseClientTypes.RedshiftDestinationUpdate?
    let elasticsearchDestinationUpdate: FirehoseClientTypes.ElasticsearchDestinationUpdate?
    let amazonopensearchserviceDestinationUpdate: FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate?
    let splunkDestinationUpdate: FirehoseClientTypes.SplunkDestinationUpdate?
    let httpEndpointDestinationUpdate: FirehoseClientTypes.HttpEndpointDestinationUpdate?
    let amazonOpenSearchServerlessDestinationUpdate: FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate?
}

extension UpdateDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonOpenSearchServerlessDestinationUpdate = "AmazonOpenSearchServerlessDestinationUpdate"
        case amazonopensearchserviceDestinationUpdate = "AmazonopensearchserviceDestinationUpdate"
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let currentDeliveryStreamVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentDeliveryStreamVersionId)
        currentDeliveryStreamVersionId = currentDeliveryStreamVersionIdDecoded
        let destinationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationId)
        destinationId = destinationIdDecoded
        let s3DestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3DestinationUpdate)
        s3DestinationUpdate = s3DestinationUpdateDecoded
        let extendedS3DestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ExtendedS3DestinationUpdate.self, forKey: .extendedS3DestinationUpdate)
        extendedS3DestinationUpdate = extendedS3DestinationUpdateDecoded
        let redshiftDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftDestinationUpdate.self, forKey: .redshiftDestinationUpdate)
        redshiftDestinationUpdate = redshiftDestinationUpdateDecoded
        let elasticsearchDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchDestinationUpdate.self, forKey: .elasticsearchDestinationUpdate)
        elasticsearchDestinationUpdate = elasticsearchDestinationUpdateDecoded
        let amazonopensearchserviceDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceDestinationUpdate.self, forKey: .amazonopensearchserviceDestinationUpdate)
        amazonopensearchserviceDestinationUpdate = amazonopensearchserviceDestinationUpdateDecoded
        let splunkDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkDestinationUpdate.self, forKey: .splunkDestinationUpdate)
        splunkDestinationUpdate = splunkDestinationUpdateDecoded
        let httpEndpointDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDestinationUpdate.self, forKey: .httpEndpointDestinationUpdate)
        httpEndpointDestinationUpdate = httpEndpointDestinationUpdateDecoded
        let amazonOpenSearchServerlessDestinationUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonOpenSearchServerlessDestinationUpdate.self, forKey: .amazonOpenSearchServerlessDestinationUpdate)
        amazonOpenSearchServerlessDestinationUpdate = amazonOpenSearchServerlessDestinationUpdateDecoded
    }
}

extension UpdateDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDestinationOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidArgumentException(InvalidArgumentException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension FirehoseClientTypes.VpcConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleARN = "RoleARN"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for nonemptystringwithoutwhitespace0 in securityGroupIds {
                try securityGroupIdsContainer.encode(nonemptystringwithoutwhitespace0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for nonemptystringwithoutwhitespace0 in subnetIds {
                try subnetIdsContainer.encode(nonemptystringwithoutwhitespace0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension FirehoseClientTypes {
    /// The details of the VPC of the Amazon ES destination.
    public struct VpcConfiguration: Swift.Equatable {
        /// The ARN of the IAM role that you want the delivery stream to use to create endpoints in the destination VPC. You can use your existing Kinesis Data Firehose delivery role or you can specify a new role. In either case, make sure that the role trusts the Kinesis Data Firehose service principal and that it grants the following permissions:
        ///
        /// * ec2:DescribeVpcs
        ///
        /// * ec2:DescribeVpcAttribute
        ///
        /// * ec2:DescribeSubnets
        ///
        /// * ec2:DescribeSecurityGroups
        ///
        /// * ec2:DescribeNetworkInterfaces
        ///
        /// * ec2:CreateNetworkInterface
        ///
        /// * ec2:CreateNetworkInterfacePermission
        ///
        /// * ec2:DeleteNetworkInterface
        ///
        ///
        /// If you revoke these permissions after you create the delivery stream, Kinesis Data Firehose can't scale out by creating more ENIs when necessary. You might therefore see a degradation in performance.
        /// This member is required.
        public var roleARN: Swift.String?
        /// The IDs of the security groups that you want Kinesis Data Firehose to use when it creates ENIs in the VPC of the Amazon ES destination. You can use the same security group that the Amazon ES domain uses or different ones. If you specify different security groups here, ensure that they allow outbound HTTPS traffic to the Amazon ES domain's security group. Also ensure that the Amazon ES domain's security group allows HTTPS traffic from the security groups specified here. If you use the same security group for both your delivery stream and the Amazon ES domain, make sure the security group inbound rule allows HTTPS traffic. For more information about security group rules, see [Security group rules](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#SecurityGroupRules) in the Amazon VPC documentation.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets that you want Kinesis Data Firehose to use to create ENIs in the VPC of the Amazon ES destination. Make sure that the routing tables and inbound and outbound rules allow traffic to flow from the subnets whose IDs are specified here to the subnets that have the destination Amazon ES endpoints. Kinesis Data Firehose creates at least one ENI in each of the subnets that are specified here. Do not delete or modify these ENIs. The number of ENIs that Kinesis Data Firehose creates in the subnets specified here scales up and down automatically based on throughput. To enable Kinesis Data Firehose to scale up the number of ENIs to match throughput, ensure that you have sufficient quota. To help you calculate the quota you need, assume that Kinesis Data Firehose can create up to three ENIs for this delivery stream for each of the subnets specified here. For more information about ENI quota, see [Network Interfaces ](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-enis) in the Amazon VPC Quotas topic.
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init (
            roleARN: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.roleARN = roleARN
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension FirehoseClientTypes.VpcConfigurationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleARN = "RoleARN"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for nonemptystringwithoutwhitespace0 in securityGroupIds {
                try securityGroupIdsContainer.encode(nonemptystringwithoutwhitespace0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for nonemptystringwithoutwhitespace0 in subnetIds {
                try subnetIdsContainer.encode(nonemptystringwithoutwhitespace0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}

extension FirehoseClientTypes {
    /// The details of the VPC of the Amazon ES destination.
    public struct VpcConfigurationDescription: Swift.Equatable {
        /// The ARN of the IAM role that the delivery stream uses to create endpoints in the destination VPC. You can use your existing Kinesis Data Firehose delivery role or you can specify a new role. In either case, make sure that the role trusts the Kinesis Data Firehose service principal and that it grants the following permissions:
        ///
        /// * ec2:DescribeVpcs
        ///
        /// * ec2:DescribeVpcAttribute
        ///
        /// * ec2:DescribeSubnets
        ///
        /// * ec2:DescribeSecurityGroups
        ///
        /// * ec2:DescribeNetworkInterfaces
        ///
        /// * ec2:CreateNetworkInterface
        ///
        /// * ec2:CreateNetworkInterfacePermission
        ///
        /// * ec2:DeleteNetworkInterface
        ///
        ///
        /// If you revoke these permissions after you create the delivery stream, Kinesis Data Firehose can't scale out by creating more ENIs when necessary. You might therefore see a degradation in performance.
        /// This member is required.
        public var roleARN: Swift.String?
        /// The IDs of the security groups that Kinesis Data Firehose uses when it creates ENIs in the VPC of the Amazon ES destination. You can use the same security group that the Amazon ES domain uses or different ones. If you specify different security groups, ensure that they allow outbound HTTPS traffic to the Amazon ES domain's security group. Also ensure that the Amazon ES domain's security group allows HTTPS traffic from the security groups specified here. If you use the same security group for both your delivery stream and the Amazon ES domain, make sure the security group inbound rule allows HTTPS traffic. For more information about security group rules, see [Security group rules](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#SecurityGroupRules) in the Amazon VPC documentation.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets that Kinesis Data Firehose uses to create ENIs in the VPC of the Amazon ES destination. Make sure that the routing tables and inbound and outbound rules allow traffic to flow from the subnets whose IDs are specified here to the subnets that have the destination Amazon ES endpoints. Kinesis Data Firehose creates at least one ENI in each of the subnets that are specified here. Do not delete or modify these ENIs. The number of ENIs that Kinesis Data Firehose creates in the subnets specified here scales up and down automatically based on throughput. To enable Kinesis Data Firehose to scale up the number of ENIs to match throughput, ensure that you have sufficient quota. To help you calculate the quota you need, assume that Kinesis Data Firehose can create up to three ENIs for this delivery stream for each of the subnets specified here. For more information about ENI quota, see [Network Interfaces ](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-enis) in the Amazon VPC Quotas topic.
        /// This member is required.
        public var subnetIds: [Swift.String]?
        /// The ID of the Amazon ES destination's VPC.
        /// This member is required.
        public var vpcId: Swift.String?

        public init (
            roleARN: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.roleARN = roleARN
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}
