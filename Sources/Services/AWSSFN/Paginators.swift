// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SFNClient {
    /// Paginate over `[GetExecutionHistoryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetExecutionHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetExecutionHistoryOutput`
    public func getExecutionHistoryPaginated(input: GetExecutionHistoryInput) -> ClientRuntime.PaginatorSequence<GetExecutionHistoryInput, GetExecutionHistoryOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetExecutionHistoryInput, GetExecutionHistoryOutput>(input: input, inputKey: \GetExecutionHistoryInput.nextToken, outputKey: \GetExecutionHistoryOutput.nextToken, paginationFunction: self.getExecutionHistory(input:))
=======
        return ClientRuntime.PaginatorSequence<GetExecutionHistoryInput, GetExecutionHistoryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getExecutionHistory(input:))
>>>>>>> main
    }
}

extension GetExecutionHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetExecutionHistoryInput {
        return GetExecutionHistoryInput(
            executionArn: self.executionArn,
            includeExecutionData: self.includeExecutionData,
            maxResults: self.maxResults,
            nextToken: token,
            reverseOrder: self.reverseOrder
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetExecutionHistoryInput, Output == GetExecutionHistoryOutput {
=======
extension PaginatorSequence where OperationStackInput == GetExecutionHistoryInput, OperationStackOutput == GetExecutionHistoryOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getExecutionHistoryPaginated`
    /// to access the nested member `[SFNClientTypes.HistoryEvent]`
    /// - Returns: `[SFNClientTypes.HistoryEvent]`
    public func events() async throws -> [SFNClientTypes.HistoryEvent] {
        return try await self.asyncCompactMap { item in item.events }
    }
}
extension SFNClient {
    /// Paginate over `[ListActivitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListActivitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListActivitiesOutput`
    public func listActivitiesPaginated(input: ListActivitiesInput) -> ClientRuntime.PaginatorSequence<ListActivitiesInput, ListActivitiesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListActivitiesInput, ListActivitiesOutput>(input: input, inputKey: \ListActivitiesInput.nextToken, outputKey: \ListActivitiesOutput.nextToken, paginationFunction: self.listActivities(input:))
=======
        return ClientRuntime.PaginatorSequence<ListActivitiesInput, ListActivitiesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listActivities(input:))
>>>>>>> main
    }
}

extension ListActivitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListActivitiesInput {
        return ListActivitiesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListActivitiesInput, Output == ListActivitiesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListActivitiesInput, OperationStackOutput == ListActivitiesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listActivitiesPaginated`
    /// to access the nested member `[SFNClientTypes.ActivityListItem]`
    /// - Returns: `[SFNClientTypes.ActivityListItem]`
    public func activities() async throws -> [SFNClientTypes.ActivityListItem] {
        return try await self.asyncCompactMap { item in item.activities }
    }
}
extension SFNClient {
    /// Paginate over `[ListExecutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExecutionsOutput`
    public func listExecutionsPaginated(input: ListExecutionsInput) -> ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput>(input: input, inputKey: \ListExecutionsInput.nextToken, outputKey: \ListExecutionsOutput.nextToken, paginationFunction: self.listExecutions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExecutions(input:))
>>>>>>> main
    }
}

extension ListExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExecutionsInput {
        return ListExecutionsInput(
            mapRunArn: self.mapRunArn,
            maxResults: self.maxResults,
            nextToken: token,
            redriveFilter: self.redriveFilter,
            stateMachineArn: self.stateMachineArn,
            statusFilter: self.statusFilter
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListExecutionsInput, Output == ListExecutionsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListExecutionsInput, OperationStackOutput == ListExecutionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listExecutionsPaginated`
    /// to access the nested member `[SFNClientTypes.ExecutionListItem]`
    /// - Returns: `[SFNClientTypes.ExecutionListItem]`
    public func executions() async throws -> [SFNClientTypes.ExecutionListItem] {
        return try await self.asyncCompactMap { item in item.executions }
    }
}
extension SFNClient {
    /// Paginate over `[ListMapRunsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMapRunsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMapRunsOutput`
    public func listMapRunsPaginated(input: ListMapRunsInput) -> ClientRuntime.PaginatorSequence<ListMapRunsInput, ListMapRunsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListMapRunsInput, ListMapRunsOutput>(input: input, inputKey: \ListMapRunsInput.nextToken, outputKey: \ListMapRunsOutput.nextToken, paginationFunction: self.listMapRuns(input:))
=======
        return ClientRuntime.PaginatorSequence<ListMapRunsInput, ListMapRunsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMapRuns(input:))
>>>>>>> main
    }
}

extension ListMapRunsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMapRunsInput {
        return ListMapRunsInput(
            executionArn: self.executionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListMapRunsInput, Output == ListMapRunsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListMapRunsInput, OperationStackOutput == ListMapRunsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listMapRunsPaginated`
    /// to access the nested member `[SFNClientTypes.MapRunListItem]`
    /// - Returns: `[SFNClientTypes.MapRunListItem]`
    public func mapRuns() async throws -> [SFNClientTypes.MapRunListItem] {
        return try await self.asyncCompactMap { item in item.mapRuns }
    }
}
extension SFNClient {
    /// Paginate over `[ListStateMachinesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStateMachinesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStateMachinesOutput`
    public func listStateMachinesPaginated(input: ListStateMachinesInput) -> ClientRuntime.PaginatorSequence<ListStateMachinesInput, ListStateMachinesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListStateMachinesInput, ListStateMachinesOutput>(input: input, inputKey: \ListStateMachinesInput.nextToken, outputKey: \ListStateMachinesOutput.nextToken, paginationFunction: self.listStateMachines(input:))
=======
        return ClientRuntime.PaginatorSequence<ListStateMachinesInput, ListStateMachinesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listStateMachines(input:))
>>>>>>> main
    }
}

extension ListStateMachinesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStateMachinesInput {
        return ListStateMachinesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListStateMachinesInput, Output == ListStateMachinesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListStateMachinesInput, OperationStackOutput == ListStateMachinesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listStateMachinesPaginated`
    /// to access the nested member `[SFNClientTypes.StateMachineListItem]`
    /// - Returns: `[SFNClientTypes.StateMachineListItem]`
    public func stateMachines() async throws -> [SFNClientTypes.StateMachineListItem] {
        return try await self.asyncCompactMap { item in item.stateMachines }
    }
}
