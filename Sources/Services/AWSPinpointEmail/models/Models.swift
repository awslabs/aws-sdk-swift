// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccountSuspendedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountSuspendedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email has been permanently restricted.
public struct AccountSuspendedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountSuspendedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountSuspendedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in your request already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes {
    /// The action that you want Amazon Pinpoint to take if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public enum BehaviorOnMxFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectMessage
        case useDefaultValue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMxFailure] {
            return [
                .rejectMessage,
                .useDefaultValue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectMessage: return "REJECT_MESSAGE"
            case .useDefaultValue: return "USE_DEFAULT_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMxFailure(rawValue: rawValue) ?? BehaviorOnMxFailure.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.BlacklistEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case listingTime = "ListingTime"
        case rblName = "RblName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let listingTime = self.listingTime {
            try encodeContainer.encodeTimestamp(listingTime, format: .epochSeconds, forKey: .listingTime)
        }
        if let rblName = self.rblName {
            try encodeContainer.encode(rblName, forKey: .rblName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rblNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rblName)
        rblName = rblNameDecoded
        let listingTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .listingTime)
        listingTime = listingTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    public struct BlacklistEntry: Swift.Equatable {
        /// Additional information about the blacklisting event, as provided by the blacklist maintainer.
        public var description: Swift.String?
        /// The time when the blacklisting event occurred, shown in Unix time format.
        public var listingTime: ClientRuntime.Date?
        /// The name of the blacklist that the IP address appears on.
        public var rblName: Swift.String?

        public init (
            description: Swift.String? = nil,
            listingTime: ClientRuntime.Date? = nil,
            rblName: Swift.String? = nil
        )
        {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }
    }

}

extension PinpointEmailClientTypes.Body: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let html = self.html {
            try encodeContainer.encode(html, forKey: .html)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Content.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Content.self, forKey: .html)
        html = htmlDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Represents the body of the email message.
    public struct Body: Swift.Equatable {
        /// An object that represents the version of the message that is displayed in email clients that support HTML. HTML messages can include formatted text, hyperlinks, images, and more.
        public var html: PinpointEmailClientTypes.Content?
        /// An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering.
        public var text: PinpointEmailClientTypes.Content?

        public init (
            html: PinpointEmailClientTypes.Content? = nil,
            text: PinpointEmailClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension PinpointEmailClientTypes.CloudWatchDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionConfigurations)
            for cloudwatchdimensionconfiguration0 in dimensionConfigurations {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionConfigurationsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.CloudWatchDimensionConfiguration?].self, forKey: .dimensionConfigurations)
        var dimensionConfigurationsDecoded0:[PinpointEmailClientTypes.CloudWatchDimensionConfiguration]? = nil
        if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
            dimensionConfigurationsDecoded0 = [PinpointEmailClientTypes.CloudWatchDimensionConfiguration]()
            for structure0 in dimensionConfigurationsContainer {
                if let structure0 = structure0 {
                    dimensionConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        dimensionConfigurations = dimensionConfigurationsDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    public struct CloudWatchDestination: Swift.Equatable {
        /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [PinpointEmailClientTypes.CloudWatchDimensionConfiguration]?

        public init (
            dimensionConfigurations: [PinpointEmailClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension PinpointEmailClientTypes.CloudWatchDimensionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultDimensionValue = self.defaultDimensionValue {
            try encodeContainer.encode(defaultDimensionValue, forKey: .defaultDimensionValue)
        }
        if let dimensionName = self.dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let dimensionValueSource = self.dimensionValueSource {
            try encodeContainer.encode(dimensionValueSource.rawValue, forKey: .dimensionValueSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueSourceDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DimensionValueSource.self, forKey: .dimensionValueSource)
        dimensionValueSource = dimensionValueSourceDecoded
        let defaultDimensionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDimensionValue)
        defaultDimensionValue = defaultDimensionValueDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the dimension configuration to use when you send Amazon Pinpoint email events to Amazon CloudWatch.
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon Pinpoint to use your own email headers, choose emailHeader. If you want Amazon Pinpoint to use link tags, choose linkTags.
        /// This member is required.
        public var dimensionValueSource: PinpointEmailClientTypes.DimensionValueSource?

        public init (
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: PinpointEmailClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource is being modified by another operation or thread.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes.Content: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let charset = self.charset {
            try encodeContainer.encode(charset, forKey: .charset)
        }
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that represents the content of the email, and optionally a character set specification.
    public struct Content: Swift.Equatable {
        /// The character set for the content. Because of the constraints of the SMTP protocol, Amazon Pinpoint uses 7-bit ASCII by default. If the text includes characters outside of the ASCII range, you have to specify a character set. For example, you could specify UTF-8, ISO-8859-1, or Shift_JIS.
        public var charset: Swift.String?
        /// The content of the message itself.
        /// This member is required.
        public var data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = self.eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
        if let eventDestinationName = self.eventDestinationName {
            try encodeContainer.encode(eventDestinationName, forKey: .eventDestinationName)
        }
    }
}

extension CreateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

/// A request to add an event destination to a configuration set.
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that you want to add an event destination to.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination within the configuration set.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointEmailClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct CreateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let eventDestinationName: Swift.String?
    let eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
}

extension CreateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let eventDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension CreateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateConfigurationSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let deliveryOptions = self.deliveryOptions {
            try encodeContainer.encode(deliveryOptions, forKey: .deliveryOptions)
        }
        if let reputationOptions = self.reputationOptions {
            try encodeContainer.encode(reputationOptions, forKey: .reputationOptions)
        }
        if let sendingOptions = self.sendingOptions {
            try encodeContainer.encode(sendingOptions, forKey: .sendingOptions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let trackingOptions = self.trackingOptions {
            try encodeContainer.encode(trackingOptions, forKey: .trackingOptions)
        }
    }
}

extension CreateConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/configuration-sets"
    }
}

/// A request to create a configuration set.
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
    public var sendingOptions: PinpointEmailClientTypes.SendingOptions?
    /// An array of objects that define the tags (keys and values) that you want to associate with the configuration set.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: PinpointEmailClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: PinpointEmailClientTypes.DeliveryOptions? = nil,
        reputationOptions: PinpointEmailClientTypes.ReputationOptions? = nil,
        sendingOptions: PinpointEmailClientTypes.SendingOptions? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        trackingOptions: PinpointEmailClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

struct CreateConfigurationSetInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: PinpointEmailClientTypes.TrackingOptions?
    let deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    let reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    let sendingOptions: PinpointEmailClientTypes.SendingOptions?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension CreateConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateDedicatedIpPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDedicatedIpPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/dedicated-ip-pools"
    }
}

/// A request to create a new dedicated IP pool.
public struct CreateDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An object that defines the tags (keys and values) that you want to associate with the pool.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        poolName: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.poolName = poolName
        self.tags = tags
    }
}

struct CreateDedicatedIpPoolInputBody: Swift.Equatable {
    let poolName: Swift.String?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension CreateDedicatedIpPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateDeliverabilityTestReportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportName = self.reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDeliverabilityTestReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/deliverability-dashboard/test"
    }
}

/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon Pinpoint then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
public struct CreateDeliverabilityTestReportInput: Swift.Equatable {
    /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
    /// This member is required.
    public var content: PinpointEmailClientTypes.EmailContent?
    /// The email address that the predictive inbox placement test email was sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.
    public var reportName: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        content: PinpointEmailClientTypes.EmailContent? = nil,
        fromEmailAddress: Swift.String? = nil,
        reportName: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.fromEmailAddress = fromEmailAddress
        self.reportName = reportName
        self.tags = tags
    }
}

struct CreateDeliverabilityTestReportInputBody: Swift.Equatable {
    let reportName: Swift.String?
    let fromEmailAddress: Swift.String?
    let content: PinpointEmailClientTypes.EmailContent?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension CreateDeliverabilityTestReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let contentDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestStatus = output.deliverabilityTestStatus
            self.reportId = output.reportId
        } else {
            self.deliverabilityTestStatus = nil
            self.reportId = nil
        }
    }
}

/// Information about the predictive inbox placement test that you created.
public struct CreateDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
    /// This member is required.
    public var deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus?
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init (
        deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.deliverabilityTestStatus = deliverabilityTestStatus
        self.reportId = reportId
    }
}

struct CreateDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    let reportId: Swift.String?
    let deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus?
}

extension CreateDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case reportId = "ReportId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

extension CreateEmailIdentityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailIdentity = self.emailIdentity {
            try encodeContainer.encode(emailIdentity, forKey: .emailIdentity)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/identities"
    }
}

/// A request to begin the verification process for an email identity (an email address or domain).
public struct CreateEmailIdentityInput: Swift.Equatable {
    /// The email address or domain that you want to verify.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the email identity.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        emailIdentity: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.tags = tags
    }
}

struct CreateEmailIdentityInputBody: Swift.Equatable {
    let emailIdentity: Swift.String?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension CreateEmailIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailIdentity)
        emailIdentity = emailIdentityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
            self.identityType = output.identityType
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.dkimAttributes = nil
            self.identityType = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// If the email identity is a domain, this object contains tokens that you can use to create a set of CNAME records. To sucessfully verify your domain, you have to add these records to the DNS configuration for your domain. If the email identity is an email address, this object is empty.
public struct CreateEmailIdentityOutputResponse: Swift.Equatable {
    /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
    public var dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
    /// The email identity type.
    public var identityType: PinpointEmailClientTypes.IdentityType?
    /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init (
        dkimAttributes: PinpointEmailClientTypes.DkimAttributes? = nil,
        identityType: PinpointEmailClientTypes.IdentityType? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.identityType = identityType
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct CreateEmailIdentityOutputResponseBody: Swift.Equatable {
    let identityType: PinpointEmailClientTypes.IdentityType?
    let verifiedForSendingStatus: Swift.Bool
    let dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
}

extension CreateEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
        case identityType = "IdentityType"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verifiedForSendingStatus) ?? false
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
    }
}

extension PinpointEmailClientTypes.DailyVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case startDate = "StartDate"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacement0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacement0)
            }
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
        if let volumeStatistics = self.volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[PinpointEmailClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [PinpointEmailClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the volume of email sent on each day of the analysis period.
    public struct DailyVolume: Swift.Equatable {
        /// An object that contains inbox placement metrics for a specified day in the analysis period, broken out by the recipient's email provider.
        public var domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public var startDate: ClientRuntime.Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis period.
        public var volumeStatistics: PinpointEmailClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]? = nil,
            startDate: ClientRuntime.Date? = nil,
            volumeStatistics: PinpointEmailClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension PinpointEmailClientTypes.DedicatedIp: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ip = "Ip"
        case poolName = "PoolName"
        case warmupPercentage = "WarmupPercentage"
        case warmupStatus = "WarmupStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = self.ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let warmupPercentage = self.warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
        if let warmupStatus = self.warmupStatus {
            try encodeContainer.encode(warmupStatus.rawValue, forKey: .warmupStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ip)
        ip = ipDecoded
        let warmupStatusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.WarmupStatus.self, forKey: .warmupStatus)
        warmupStatus = warmupStatusDecoded
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Contains information about a dedicated IP address that is associated with your Amazon Pinpoint account.
    public struct DedicatedIp: Swift.Equatable {
        /// An IP address that is reserved for use by your Amazon Pinpoint account.
        /// This member is required.
        public var ip: Swift.String?
        /// The name of the dedicated IP pool that the IP address is associated with.
        public var poolName: Swift.String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.
        /// This member is required.
        public var warmupPercentage: Swift.Int?
        /// The warm-up status of a dedicated IP address. The status can have one of the following values:
        ///
        /// * IN_PROGRESS – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.
        ///
        /// * DONE – The dedicated IP warm-up process is complete, and the IP address is ready to use.
        /// This member is required.
        public var warmupStatus: PinpointEmailClientTypes.WarmupStatus?

        public init (
            ip: Swift.String? = nil,
            poolName: Swift.String? = nil,
            warmupPercentage: Swift.Int? = nil,
            warmupStatus: PinpointEmailClientTypes.WarmupStatus? = nil
        )
        {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }
    }

}

extension DeleteConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        guard let eventDestinationName = eventDestinationName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

/// A request to delete an event destination from a configuration set.
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination that you want to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination that you want to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

struct DeleteConfigurationSetEventDestinationInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetEventDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

/// A request to delete a configuration set.
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set that you want to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct DeleteConfigurationSetInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDedicatedIpPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let poolName = poolName else {
            return nil
        }
        return "/v1/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

/// A request to delete a dedicated IP pool.
public struct DeleteDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool that you want to delete.
    /// This member is required.
    public var poolName: Swift.String?

    public init (
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

struct DeleteDedicatedIpPoolInputBody: Swift.Equatable {
}

extension DeleteDedicatedIpPoolInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

/// A request to delete an existing email identity. When you delete an identity, you lose the ability to use Amazon Pinpoint to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
public struct DeleteEmailIdentityInput: Swift.Equatable {
    /// The identity (that is, the email address or domain) that you want to delete from your Amazon Pinpoint account.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct DeleteEmailIdentityInputBody: Swift.Equatable {
}

extension DeleteEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityOutputResponse: Swift.Equatable {

    public init () { }
}

extension PinpointEmailClientTypes {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public enum DeliverabilityDashboardAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case pendingExpiration
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityDashboardAccountStatus] {
            return [
                .active,
                .disabled,
                .pendingExpiration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .pendingExpiration: return "PENDING_EXPIRATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityDashboardAccountStatus(rawValue: rawValue) ?? DeliverabilityDashboardAccountStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.DeliverabilityTestReport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case fromEmailAddress = "FromEmailAddress"
        case reportId = "ReportId"
        case reportName = "ReportName"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = self.createDate {
            try encodeContainer.encodeTimestamp(createDate, format: .epochSeconds, forKey: .createDate)
        }
        if let deliverabilityTestStatus = self.deliverabilityTestStatus {
            try encodeContainer.encode(deliverabilityTestStatus.rawValue, forKey: .deliverabilityTestStatus)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportId = self.reportId {
            try encodeContainer.encode(reportId, forKey: .reportId)
        }
        if let reportName = self.reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let createDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createDate)
        createDate = createDateDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains metadata related to a predictive inbox placement test.
    public struct DeliverabilityTestReport: Swift.Equatable {
        /// The date and time when the predictive inbox placement test was created, in Unix time format.
        public var createDate: ClientRuntime.Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public var deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public var fromEmailAddress: Swift.String?
        /// A unique string that identifies the predictive inbox placement test.
        public var reportId: Swift.String?
        /// A name that helps you identify a predictive inbox placement test report.
        public var reportName: Swift.String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public var subject: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus? = nil,
            fromEmailAddress: Swift.String? = nil,
            reportId: Swift.String? = nil,
            reportName: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }
    }

}

extension PinpointEmailClientTypes {
    /// The status of a predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
    public enum DeliverabilityTestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityTestStatus] {
            return [
                .completed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityTestStatus(rawValue: rawValue) ?? DeliverabilityTestStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.DeliveryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = self.sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = self.tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Used to associate a configuration set with a dedicated IP pool.
    public struct DeliveryOptions: Swift.Equatable {
        /// The name of the dedicated IP pool that you want to associate with the configuration set.
        public var sendingPoolName: Swift.String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: PinpointEmailClientTypes.TlsPolicy?

        public init (
            sendingPoolName: Swift.String? = nil,
            tlsPolicy: PinpointEmailClientTypes.TlsPolicy? = nil
        )
        {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension PinpointEmailClientTypes.Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bccAddresses = bccAddresses {
            var bccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bccAddresses)
            for emailaddress0 in bccAddresses {
                try bccAddressesContainer.encode(emailaddress0)
            }
        }
        if let ccAddresses = ccAddresses {
            var ccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ccAddresses)
            for emailaddress0 in ccAddresses {
                try ccAddressesContainer.encode(emailaddress0)
            }
        }
        if let toAddresses = toAddresses {
            var toAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .toAddresses)
            for emailaddress0 in toAddresses {
                try toAddressesContainer.encode(emailaddress0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .toAddresses)
        var toAddressesDecoded0:[Swift.String]? = nil
        if let toAddressesContainer = toAddressesContainer {
            toAddressesDecoded0 = [Swift.String]()
            for string0 in toAddressesContainer {
                if let string0 = string0 {
                    toAddressesDecoded0?.append(string0)
                }
            }
        }
        toAddresses = toAddressesDecoded0
        let ccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ccAddresses)
        var ccAddressesDecoded0:[Swift.String]? = nil
        if let ccAddressesContainer = ccAddressesContainer {
            ccAddressesDecoded0 = [Swift.String]()
            for string0 in ccAddressesContainer {
                if let string0 = string0 {
                    ccAddressesDecoded0?.append(string0)
                }
            }
        }
        ccAddresses = ccAddressesDecoded0
        let bccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bccAddresses)
        var bccAddressesDecoded0:[Swift.String]? = nil
        if let bccAddressesContainer = bccAddressesContainer {
            bccAddressesDecoded0 = [Swift.String]()
            for string0 in bccAddressesContainer {
                if let string0 = string0 {
                    bccAddressesDecoded0?.append(string0)
                }
            }
        }
        bccAddresses = bccAddressesDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that describes the recipients for an email.
    public struct Destination: Swift.Equatable {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email.
        public var bccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for the email.
        public var ccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "To" recipients for the email.
        public var toAddresses: [Swift.String]?

        public init (
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension PinpointEmailClientTypes {
    /// The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon Pinpoint to use your own email headers, choose emailHeader. If you want Amazon Pinpoint to use link tags, choose linkTags.
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "EMAIL_HEADER"
            case .linkTag: return "LINK_TAG"
            case .messageTag: return "MESSAGE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.DkimAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
        case status = "Status"
        case tokens = "Tokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokens = tokens {
            var tokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokens)
            for dnstoken0 in tokens {
                try tokensContainer.encode(dnstoken0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingEnabled) ?? false
        signingEnabled = signingEnabledDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DkimStatus.self, forKey: .status)
        status = statusDecoded
        let tokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokens)
        var tokensDecoded0:[Swift.String]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [Swift.String]()
            for string0 in tokensContainer {
                if let string0 = string0 {
                    tokensDecoded0?.append(string0)
                }
            }
        }
        tokens = tokensDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the DKIM configuration for an email identity.
    public struct DkimAttributes: Swift.Equatable {
        /// If the value is true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. If the value is false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
        public var signingEnabled: Swift.Bool
        /// Describes whether or not Amazon Pinpoint has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:
        ///
        /// * PENDING – Amazon Pinpoint hasn't yet located the DKIM records in the DNS configuration for the domain, but will continue to attempt to locate them.
        ///
        /// * SUCCESS – Amazon Pinpoint located the DKIM records in the DNS configuration for the domain and determined that they're correct. Amazon Pinpoint can now send DKIM-signed email from the identity.
        ///
        /// * FAILED – Amazon Pinpoint was unable to locate the DKIM records in the DNS settings for the domain, and won't continue to search for them.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the DKIM status for the domain.
        ///
        /// * NOT_STARTED – Amazon Pinpoint hasn't yet started searching for the DKIM records in the DKIM records for the domain.
        public var status: PinpointEmailClientTypes.DkimStatus?
        /// A set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon Pinpoint detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. Amazon Pinpoint usually detects these records within about 72 hours of adding them to the DNS configuration for your domain.
        public var tokens: [Swift.String]?

        public init (
            signingEnabled: Swift.Bool = false,
            status: PinpointEmailClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}

extension PinpointEmailClientTypes {
    /// The DKIM authentication status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The DKIM verification process was initiated, and Amazon Pinpoint is still waiting for the required CNAME records to appear in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The DKIM authentication process completed successfully.
    ///
    /// * FAILED – The DKIM authentication process failed. This can happen when Amazon Pinpoint fails to find the required CNAME records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon Pinpoint from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public enum DkimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimStatus(rawValue: rawValue) ?? DkimStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.DomainDeliverabilityCampaign: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignId = "CampaignId"
        case deleteRate = "DeleteRate"
        case esps = "Esps"
        case firstSeenDateTime = "FirstSeenDateTime"
        case fromAddress = "FromAddress"
        case imageUrl = "ImageUrl"
        case inboxCount = "InboxCount"
        case lastSeenDateTime = "LastSeenDateTime"
        case projectedVolume = "ProjectedVolume"
        case readDeleteRate = "ReadDeleteRate"
        case readRate = "ReadRate"
        case sendingIps = "SendingIps"
        case spamCount = "SpamCount"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignId = self.campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let deleteRate = self.deleteRate {
            try encodeContainer.encode(deleteRate, forKey: .deleteRate)
        }
        if let esps = esps {
            var espsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .esps)
            for esp0 in esps {
                try espsContainer.encode(esp0)
            }
        }
        if let firstSeenDateTime = self.firstSeenDateTime {
            try encodeContainer.encodeTimestamp(firstSeenDateTime, format: .epochSeconds, forKey: .firstSeenDateTime)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let inboxCount = self.inboxCount {
            try encodeContainer.encode(inboxCount, forKey: .inboxCount)
        }
        if let lastSeenDateTime = self.lastSeenDateTime {
            try encodeContainer.encodeTimestamp(lastSeenDateTime, format: .epochSeconds, forKey: .lastSeenDateTime)
        }
        if let projectedVolume = self.projectedVolume {
            try encodeContainer.encode(projectedVolume, forKey: .projectedVolume)
        }
        if let readDeleteRate = self.readDeleteRate {
            try encodeContainer.encode(readDeleteRate, forKey: .readDeleteRate)
        }
        if let readRate = self.readRate {
            try encodeContainer.encode(readRate, forKey: .readRate)
        }
        if let sendingIps = sendingIps {
            var sendingIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sendingIps)
            for ip0 in sendingIps {
                try sendingIpsContainer.encode(ip0)
            }
        }
        if let spamCount = self.spamCount {
            try encodeContainer.encode(spamCount, forKey: .spamCount)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let sendingIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sendingIps)
        var sendingIpsDecoded0:[Swift.String]? = nil
        if let sendingIpsContainer = sendingIpsContainer {
            sendingIpsDecoded0 = [Swift.String]()
            for string0 in sendingIpsContainer {
                if let string0 = string0 {
                    sendingIpsDecoded0?.append(string0)
                }
            }
        }
        sendingIps = sendingIpsDecoded0
        let firstSeenDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .firstSeenDateTime)
        firstSeenDateTime = firstSeenDateTimeDecoded
        let lastSeenDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastSeenDateTime)
        lastSeenDateTime = lastSeenDateTimeDecoded
        let inboxCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxCount)
        inboxCount = inboxCountDecoded
        let spamCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamCount)
        spamCount = spamCountDecoded
        let readRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRate)
        readRate = readRateDecoded
        let deleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .deleteRate)
        deleteRate = deleteRateDecoded
        let readDeleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readDeleteRate)
        readDeleteRate = readDeleteRateDecoded
        let projectedVolumeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedVolume)
        projectedVolume = projectedVolumeDecoded
        let espsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .esps)
        var espsDecoded0:[Swift.String]? = nil
        if let espsContainer = espsContainer {
            espsDecoded0 = [Swift.String]()
            for string0 in espsContainer {
                if let string0 = string0 {
                    espsDecoded0?.append(string0)
                }
            }
        }
        esps = espsDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
    public struct DomainDeliverabilityCampaign: Swift.Equatable {
        /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
        public var campaignId: Swift.String?
        /// The percentage of email messages that were deleted by recipients, without being opened first. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var deleteRate: Swift.Double?
        /// The major email providers who handled the email message.
        public var esps: [Swift.String]?
        /// The first time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var firstSeenDateTime: ClientRuntime.Date?
        /// The verified email address that the email message was sent from.
        public var fromAddress: Swift.String?
        /// The URL of an image that contains a snapshot of the email message that was sent.
        public var imageUrl: Swift.String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public var inboxCount: Swift.Int?
        /// The last time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var lastSeenDateTime: ClientRuntime.Date?
        /// The projected number of recipients that the email message was sent to.
        public var projectedVolume: Swift.Int?
        /// The percentage of email messages that were opened and then deleted by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readDeleteRate: Swift.Double?
        /// The percentage of email messages that were opened by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readRate: Swift.Double?
        /// The IP addresses that were used to send the email message.
        public var sendingIps: [Swift.String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail folders.
        public var spamCount: Swift.Int?
        /// The subject line, or title, of the email message.
        public var subject: Swift.String?

        public init (
            campaignId: Swift.String? = nil,
            deleteRate: Swift.Double? = nil,
            esps: [Swift.String]? = nil,
            firstSeenDateTime: ClientRuntime.Date? = nil,
            fromAddress: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            inboxCount: Swift.Int? = nil,
            lastSeenDateTime: ClientRuntime.Date? = nil,
            projectedVolume: Swift.Int? = nil,
            readDeleteRate: Swift.Double? = nil,
            readRate: Swift.Double? = nil,
            sendingIps: [Swift.String]? = nil,
            spamCount: Swift.Int? = nil,
            subject: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }
    }

}

extension PinpointEmailClientTypes.DomainDeliverabilityTrackingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case inboxPlacementTrackingOption = "InboxPlacementTrackingOption"
        case subscriptionStartDate = "SubscriptionStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let inboxPlacementTrackingOption = self.inboxPlacementTrackingOption {
            try encodeContainer.encode(inboxPlacementTrackingOption, forKey: .inboxPlacementTrackingOption)
        }
        if let subscriptionStartDate = self.subscriptionStartDate {
            try encodeContainer.encodeTimestamp(subscriptionStartDate, format: .epochSeconds, forKey: .subscriptionStartDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let subscriptionStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .subscriptionStartDate)
        subscriptionStartDate = subscriptionStartDateDecoded
        let inboxPlacementTrackingOptionDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.InboxPlacementTrackingOption.self, forKey: .inboxPlacementTrackingOption)
        inboxPlacementTrackingOption = inboxPlacementTrackingOptionDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    public struct DomainDeliverabilityTrackingOption: Swift.Equatable {
        /// A verified domain that’s associated with your AWS account and currently has an active Deliverability dashboard subscription.
        public var domain: Swift.String?
        /// An object that contains information about the inbox placement data settings for the domain.
        public var inboxPlacementTrackingOption: PinpointEmailClientTypes.InboxPlacementTrackingOption?
        /// The date, in Unix time format, when you enabled the Deliverability dashboard for the domain.
        public var subscriptionStartDate: ClientRuntime.Date?

        public init (
            domain: Swift.String? = nil,
            inboxPlacementTrackingOption: PinpointEmailClientTypes.InboxPlacementTrackingOption? = nil,
            subscriptionStartDate: ClientRuntime.Date? = nil
        )
        {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }
    }

}

extension PinpointEmailClientTypes.DomainIspPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxPercentage = "InboxPercentage"
        case inboxRawCount = "InboxRawCount"
        case ispName = "IspName"
        case spamPercentage = "SpamPercentage"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxPercentage = self.inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let inboxRawCount = self.inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let ispName = self.ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let spamPercentage = self.spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spamRawCount = self.spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    public struct DomainIspPlacement: Swift.Equatable {
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init (
            inboxPercentage: Swift.Double? = nil,
            inboxRawCount: Swift.Int? = nil,
            ispName: Swift.String? = nil,
            spamPercentage: Swift.Double? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }
    }

}

extension PinpointEmailClientTypes.EmailContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case raw = "Raw"
        case simple = "Simple"
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let raw = self.raw {
            try encodeContainer.encode(raw, forKey: .raw)
        }
        if let simple = self.simple {
            try encodeContainer.encode(simple, forKey: .simple)
        }
        if let template = self.template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let simpleDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Message.self, forKey: .simple)
        simple = simpleDecoded
        let rawDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.RawMessage.self, forKey: .raw)
        raw = rawDecoded
        let templateDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    public struct EmailContent: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * If you include attachments, they must be in a file format that Amazon Pinpoint supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        public var raw: PinpointEmailClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public var simple: PinpointEmailClientTypes.Message?
        /// The template to use for the email message.
        public var template: PinpointEmailClientTypes.Template?

        public init (
            raw: PinpointEmailClientTypes.RawMessage? = nil,
            simple: PinpointEmailClientTypes.Message? = nil,
            template: PinpointEmailClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}

extension PinpointEmailClientTypes.EventDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = self.cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = self.kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtype0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtype0.rawValue)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pinpointDestination = self.pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = self.snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[PinpointEmailClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [PinpointEmailClientTypes.EventType]()
            for string0 in matchingEventTypesContainer {
                if let string0 = string0 {
                    matchingEventTypesDecoded0?.append(string0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension PinpointEmailClientTypes {
    /// In Amazon Pinpoint, events include message sends, deliveries, opens, clicks, bounces, and complaints. Event destinations are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    public struct EventDestination: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination?
        /// The types of events that Amazon Pinpoint sends to the specified event destinations.
        /// This member is required.
        public var matchingEventTypes: [PinpointEmailClientTypes.EventType]?
        /// A name that identifies the event destination.
        /// This member is required.
        public var name: Swift.String?
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public var pinpointDestination: PinpointEmailClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: PinpointEmailClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointEmailClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            pinpointDestination: PinpointEmailClientTypes.PinpointDestination? = nil,
            snsDestination: PinpointEmailClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension PinpointEmailClientTypes.EventDestinationDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = self.cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = self.kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtype0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtype0.rawValue)
            }
        }
        if let pinpointDestination = self.pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = self.snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[PinpointEmailClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [PinpointEmailClientTypes.EventType]()
            for string0 in matchingEventTypesContainer {
                if let string0 = string0 {
                    matchingEventTypesDecoded0?.append(string0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    public struct EventDestinationDefinition: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination?
        /// An array that specifies which events Amazon Pinpoint should send to the destinations in this EventDestinationDefinition.
        public var matchingEventTypes: [PinpointEmailClientTypes.EventType]?
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public var pinpointDestination: PinpointEmailClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: PinpointEmailClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointEmailClientTypes.EventType]? = nil,
            pinpointDestination: PinpointEmailClientTypes.PinpointDestination? = nil,
            snsDestination: PinpointEmailClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension PinpointEmailClientTypes {
    /// An email sending event type. For example, email sends, opens, and bounces are all email events.
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case `open`
        case reject
        case renderingFailure
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .open: return "OPEN"
            case .reject: return "REJECT"
            case .renderingFailure: return "RENDERING_FAILURE"
            case .send: return "SEND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension GetAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/account"
    }
}

/// A request to obtain information about the email-sending capabilities of your Amazon Pinpoint account.
public struct GetAccountInput: Swift.Equatable {

    public init () { }
}

struct GetAccountInputBody: Swift.Equatable {
}

extension GetAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAccountOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpAutoWarmupEnabled = output.dedicatedIpAutoWarmupEnabled
            self.enforcementStatus = output.enforcementStatus
            self.productionAccessEnabled = output.productionAccessEnabled
            self.sendQuota = output.sendQuota
            self.sendingEnabled = output.sendingEnabled
        } else {
            self.dedicatedIpAutoWarmupEnabled = false
            self.enforcementStatus = nil
            self.productionAccessEnabled = false
            self.sendQuota = nil
            self.sendingEnabled = false
        }
    }
}

/// A list of details about the email-sending capabilities of your Amazon Pinpoint account in the current AWS Region.
public struct GetAccountOutputResponse: Swift.Equatable {
    /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.
    public var dedicatedIpAutoWarmupEnabled: Swift.Bool
    /// The reputation status of your Amazon Pinpoint account. The status can be one of the following:
    ///
    /// * HEALTHY – There are no reputation-related issues that currently impact your account.
    ///
    /// * PROBATION – We've identified some issues with your Amazon Pinpoint account. We're placing your account under review while you work on correcting these issues.
    ///
    /// * SHUTDOWN – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.
    public var enforcementStatus: Swift.String?
    /// Indicates whether or not your account has production access in the current AWS Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool
    /// An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
    public var sendQuota: PinpointEmailClientTypes.SendQuota?
    /// Indicates whether or not email sending is enabled for your Amazon Pinpoint account in the current AWS Region.
    public var sendingEnabled: Swift.Bool

    public init (
        dedicatedIpAutoWarmupEnabled: Swift.Bool = false,
        enforcementStatus: Swift.String? = nil,
        productionAccessEnabled: Swift.Bool = false,
        sendQuota: PinpointEmailClientTypes.SendQuota? = nil,
        sendingEnabled: Swift.Bool = false
    )
    {
        self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
        self.enforcementStatus = enforcementStatus
        self.productionAccessEnabled = productionAccessEnabled
        self.sendQuota = sendQuota
        self.sendingEnabled = sendingEnabled
    }
}

struct GetAccountOutputResponseBody: Swift.Equatable {
    let sendQuota: PinpointEmailClientTypes.SendQuota?
    let sendingEnabled: Swift.Bool
    let dedicatedIpAutoWarmupEnabled: Swift.Bool
    let enforcementStatus: Swift.String?
    let productionAccessEnabled: Swift.Bool
}

extension GetAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpAutoWarmupEnabled = "DedicatedIpAutoWarmupEnabled"
        case enforcementStatus = "EnforcementStatus"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case sendQuota = "SendQuota"
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendQuotaDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SendQuota.self, forKey: .sendQuota)
        sendQuota = sendQuotaDecoded
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
        let dedicatedIpAutoWarmupEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedIpAutoWarmupEnabled) ?? false
        dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabledDecoded
        let enforcementStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enforcementStatus)
        enforcementStatus = enforcementStatusDecoded
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .productionAccessEnabled) ?? false
        productionAccessEnabled = productionAccessEnabledDecoded
    }
}

extension GetBlacklistReportsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let blacklistItemNames = blacklistItemNames else {
                let message = "Creating a URL Query Item failed. blacklistItemNames is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            blacklistItemNames.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "BlacklistItemNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension GetBlacklistReportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/deliverability-dashboard/blacklist-report"
    }
}

/// A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
public struct GetBlacklistReportsInput: Swift.Equatable {
    /// A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or Amazon SES.
    /// This member is required.
    public var blacklistItemNames: [Swift.String]?

    public init (
        blacklistItemNames: [Swift.String]? = nil
    )
    {
        self.blacklistItemNames = blacklistItemNames
    }
}

struct GetBlacklistReportsInputBody: Swift.Equatable {
}

extension GetBlacklistReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBlacklistReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlacklistReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBlacklistReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlacklistReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBlacklistReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blacklistReport = output.blacklistReport
        } else {
            self.blacklistReport = nil
        }
    }
}

/// An object that contains information about blacklist events.
public struct GetBlacklistReportsOutputResponse: Swift.Equatable {
    /// An object that contains information about a blacklist that one of your dedicated IP addresses appears on.
    /// This member is required.
    public var blacklistReport: [Swift.String:[PinpointEmailClientTypes.BlacklistEntry]]?

    public init (
        blacklistReport: [Swift.String:[PinpointEmailClientTypes.BlacklistEntry]]? = nil
    )
    {
        self.blacklistReport = blacklistReport
    }
}

struct GetBlacklistReportsOutputResponseBody: Swift.Equatable {
    let blacklistReport: [Swift.String:[PinpointEmailClientTypes.BlacklistEntry]]?
}

extension GetBlacklistReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blacklistReport = "BlacklistReport"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blacklistReportContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointEmailClientTypes.BlacklistEntry?]?].self, forKey: .blacklistReport)
        var blacklistReportDecoded0: [Swift.String:[PinpointEmailClientTypes.BlacklistEntry]]? = nil
        if let blacklistReportContainer = blacklistReportContainer {
            blacklistReportDecoded0 = [Swift.String:[PinpointEmailClientTypes.BlacklistEntry]]()
            for (key0, blacklistentries0) in blacklistReportContainer {
                var blacklistentries0Decoded0: [PinpointEmailClientTypes.BlacklistEntry]? = nil
                if let blacklistentries0 = blacklistentries0 {
                    blacklistentries0Decoded0 = [PinpointEmailClientTypes.BlacklistEntry]()
                    for structure1 in blacklistentries0 {
                        if let structure1 = structure1 {
                            blacklistentries0Decoded0?.append(structure1)
                        }
                    }
                }
                blacklistReportDecoded0?[key0] = blacklistentries0Decoded0
            }
        }
        blacklistReport = blacklistReportDecoded0
    }
}

extension GetConfigurationSetEventDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

/// A request to obtain information about the event destinations for a configuration set.
public struct GetConfigurationSetEventDestinationsInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetEventDestinationsInputBody: Swift.Equatable {
}

extension GetConfigurationSetEventDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetEventDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetEventDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfigurationSetEventDestinationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetEventDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfigurationSetEventDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventDestinations = output.eventDestinations
        } else {
            self.eventDestinations = nil
        }
    }
}

/// Information about an event destination for a configuration set.
public struct GetConfigurationSetEventDestinationsOutputResponse: Swift.Equatable {
    /// An array that includes all of the events destinations that have been configured for the configuration set.
    public var eventDestinations: [PinpointEmailClientTypes.EventDestination]?

    public init (
        eventDestinations: [PinpointEmailClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

struct GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Equatable {
    let eventDestinations: [PinpointEmailClientTypes.EventDestination]?
}

extension GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestinations = "EventDestinations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.EventDestination?].self, forKey: .eventDestinations)
        var eventDestinationsDecoded0:[PinpointEmailClientTypes.EventDestination]? = nil
        if let eventDestinationsContainer = eventDestinationsContainer {
            eventDestinationsDecoded0 = [PinpointEmailClientTypes.EventDestination]()
            for structure0 in eventDestinationsContainer {
                if let structure0 = structure0 {
                    eventDestinationsDecoded0?.append(structure0)
                }
            }
        }
        eventDestinations = eventDestinationsDecoded0
    }
}

extension GetConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

/// A request to obtain information about a configuration set.
public struct GetConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set that you want to obtain more information about.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetInputBody: Swift.Equatable {
}

extension GetConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfigurationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.configurationSetName
            self.deliveryOptions = output.deliveryOptions
            self.reputationOptions = output.reputationOptions
            self.sendingOptions = output.sendingOptions
            self.tags = output.tags
            self.trackingOptions = output.trackingOptions
        } else {
            self.configurationSetName = nil
            self.deliveryOptions = nil
            self.reputationOptions = nil
            self.sendingOptions = nil
            self.tags = nil
            self.trackingOptions = nil
        }
    }
}

/// Information about a configuration set.
public struct GetConfigurationSetOutputResponse: Swift.Equatable {
    /// The name of the configuration set.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
    public var sendingOptions: PinpointEmailClientTypes.SendingOptions?
    /// An array of objects that define the tags (keys and values) that are associated with the configuration set.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: PinpointEmailClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: PinpointEmailClientTypes.DeliveryOptions? = nil,
        reputationOptions: PinpointEmailClientTypes.ReputationOptions? = nil,
        sendingOptions: PinpointEmailClientTypes.SendingOptions? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        trackingOptions: PinpointEmailClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

struct GetConfigurationSetOutputResponseBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: PinpointEmailClientTypes.TrackingOptions?
    let deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    let reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    let sendingOptions: PinpointEmailClientTypes.SendingOptions?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension GetConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetDedicatedIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())"
    }
}

/// A request to obtain more information about a dedicated IP address.
public struct GetDedicatedIpInput: Swift.Equatable {
    /// The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.
    /// This member is required.
    public var ip: Swift.String?

    public init (
        ip: Swift.String? = nil
    )
    {
        self.ip = ip
    }
}

struct GetDedicatedIpInputBody: Swift.Equatable {
}

extension GetDedicatedIpInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDedicatedIpOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDedicatedIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIp = output.dedicatedIp
        } else {
            self.dedicatedIp = nil
        }
    }
}

/// Information about a dedicated IP address.
public struct GetDedicatedIpOutputResponse: Swift.Equatable {
    /// An object that contains information about a dedicated IP address.
    public var dedicatedIp: PinpointEmailClientTypes.DedicatedIp?

    public init (
        dedicatedIp: PinpointEmailClientTypes.DedicatedIp? = nil
    )
    {
        self.dedicatedIp = dedicatedIp
    }
}

struct GetDedicatedIpOutputResponseBody: Swift.Equatable {
    let dedicatedIp: PinpointEmailClientTypes.DedicatedIp?
}

extension GetDedicatedIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIp = "DedicatedIp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DedicatedIp.self, forKey: .dedicatedIp)
        dedicatedIp = dedicatedIpDecoded
    }
}

extension GetDedicatedIpsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let poolName = poolName {
                let poolNameQueryItem = ClientRuntime.URLQueryItem(name: "PoolName".urlPercentEncoding(), value: Swift.String(poolName).urlPercentEncoding())
                items.append(poolNameQueryItem)
            }
            return items
        }
    }
}

extension GetDedicatedIpsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/dedicated-ips"
    }
}

/// A request to obtain more information about dedicated IP pools.
public struct GetDedicatedIpsInput: Swift.Equatable {
    /// A token returned from a previous call to GetDedicatedIps to indicate the position of the dedicated IP pool in the list of IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to GetDedicatedIpsRequest. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The name of the IP pool that the dedicated IP address is associated with.
    public var poolName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        poolName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.poolName = poolName
    }
}

struct GetDedicatedIpsInputBody: Swift.Equatable {
}

extension GetDedicatedIpsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDedicatedIpsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDedicatedIpsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIps = output.dedicatedIps
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIps = nil
            self.nextToken = nil
        }
    }
}

/// Information about the dedicated IP addresses that are associated with your Amazon Pinpoint account.
public struct GetDedicatedIpsOutputResponse: Swift.Equatable {
    /// A list of dedicated IP addresses that are reserved for use by your Amazon Pinpoint account.
    public var dedicatedIps: [PinpointEmailClientTypes.DedicatedIp]?
    /// A token that indicates that there are additional dedicated IP addresses to list. To view additional addresses, issue another request to GetDedicatedIps, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        dedicatedIps: [PinpointEmailClientTypes.DedicatedIp]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIps = dedicatedIps
        self.nextToken = nextToken
    }
}

struct GetDedicatedIpsOutputResponseBody: Swift.Equatable {
    let dedicatedIps: [PinpointEmailClientTypes.DedicatedIp]?
    let nextToken: Swift.String?
}

extension GetDedicatedIpsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIps = "DedicatedIps"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DedicatedIp?].self, forKey: .dedicatedIps)
        var dedicatedIpsDecoded0:[PinpointEmailClientTypes.DedicatedIp]? = nil
        if let dedicatedIpsContainer = dedicatedIpsContainer {
            dedicatedIpsDecoded0 = [PinpointEmailClientTypes.DedicatedIp]()
            for structure0 in dedicatedIpsContainer {
                if let structure0 = structure0 {
                    dedicatedIpsDecoded0?.append(structure0)
                }
            }
        }
        dedicatedIps = dedicatedIpsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDeliverabilityDashboardOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/deliverability-dashboard"
    }
}

/// Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct GetDeliverabilityDashboardOptionsInput: Swift.Equatable {

    public init () { }
}

struct GetDeliverabilityDashboardOptionsInputBody: Swift.Equatable {
}

extension GetDeliverabilityDashboardOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityDashboardOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityDashboardOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeliverabilityDashboardOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityDashboardOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeliverabilityDashboardOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountStatus = output.accountStatus
            self.activeSubscribedDomains = output.activeSubscribedDomains
            self.dashboardEnabled = output.dashboardEnabled
            self.pendingExpirationSubscribedDomains = output.pendingExpirationSubscribedDomains
            self.subscriptionExpiryDate = output.subscriptionExpiryDate
        } else {
            self.accountStatus = nil
            self.activeSubscribedDomains = nil
            self.dashboardEnabled = false
            self.pendingExpirationSubscribedDomains = nil
            self.subscriptionExpiryDate = nil
        }
    }
}

/// An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account.
public struct GetDeliverabilityDashboardOptionsOutputResponse: Swift.Equatable {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public var accountStatus: PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus?
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at the end of the current calendar month.
    public var activeSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
    /// Specifies whether the Deliverability dashboard is enabled for your Amazon Pinpoint account. If this value is true, the dashboard is enabled.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that's scheduled to expire at the end of the current calendar month.
    public var pendingExpirationSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
    /// The date, in Unix time format, when your current subscription to the Deliverability dashboard is scheduled to expire, if your subscription is scheduled to expire at the end of the current calendar month. This value is null if you have an active subscription that isn’t due to expire at the end of the month.
    public var subscriptionExpiryDate: ClientRuntime.Date?

    public init (
        accountStatus: PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus? = nil,
        activeSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        dashboardEnabled: Swift.Bool = false,
        pendingExpirationSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        subscriptionExpiryDate: ClientRuntime.Date? = nil
    )
    {
        self.accountStatus = accountStatus
        self.activeSubscribedDomains = activeSubscribedDomains
        self.dashboardEnabled = dashboardEnabled
        self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
        self.subscriptionExpiryDate = subscriptionExpiryDate
    }
}

struct GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Equatable {
    let dashboardEnabled: Swift.Bool
    let subscriptionExpiryDate: ClientRuntime.Date?
    let accountStatus: PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus?
    let activeSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
    let pendingExpirationSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
}

extension GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountStatus = "AccountStatus"
        case activeSubscribedDomains = "ActiveSubscribedDomains"
        case dashboardEnabled = "DashboardEnabled"
        case pendingExpirationSubscribedDomains = "PendingExpirationSubscribedDomains"
        case subscriptionExpiryDate = "SubscriptionExpiryDate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dashboardEnabled) ?? false
        dashboardEnabled = dashboardEnabledDecoded
        let subscriptionExpiryDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .subscriptionExpiryDate)
        subscriptionExpiryDate = subscriptionExpiryDateDecoded
        let accountStatusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus.self, forKey: .accountStatus)
        accountStatus = accountStatusDecoded
        let activeSubscribedDomainsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .activeSubscribedDomains)
        var activeSubscribedDomainsDecoded0:[PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let activeSubscribedDomainsContainer = activeSubscribedDomainsContainer {
            activeSubscribedDomainsDecoded0 = [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in activeSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    activeSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        activeSubscribedDomains = activeSubscribedDomainsDecoded0
        let pendingExpirationSubscribedDomainsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .pendingExpirationSubscribedDomains)
        var pendingExpirationSubscribedDomainsDecoded0:[PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let pendingExpirationSubscribedDomainsContainer = pendingExpirationSubscribedDomainsContainer {
            pendingExpirationSubscribedDomainsDecoded0 = [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in pendingExpirationSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    pendingExpirationSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomainsDecoded0
    }
}

extension GetDeliverabilityTestReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let reportId = reportId else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/test-reports/\(reportId.urlPercentEncoding())"
    }
}

/// A request to retrieve the results of a predictive inbox placement test.
public struct GetDeliverabilityTestReportInput: Swift.Equatable {
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init (
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

struct GetDeliverabilityTestReportInputBody: Swift.Equatable {
}

extension GetDeliverabilityTestReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReport = output.deliverabilityTestReport
            self.ispPlacements = output.ispPlacements
            self.message = output.message
            self.overallPlacement = output.overallPlacement
            self.tags = output.tags
        } else {
            self.deliverabilityTestReport = nil
            self.ispPlacements = nil
            self.message = nil
            self.overallPlacement = nil
            self.tags = nil
        }
    }
}

/// The results of the predictive inbox placement test.
public struct GetDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// An object that contains the results of the predictive inbox placement test.
    /// This member is required.
    public var deliverabilityTestReport: PinpointEmailClientTypes.DeliverabilityTestReport?
    /// An object that describes how the test email was handled by several email providers, including Gmail, Hotmail, Yahoo, AOL, and others.
    /// This member is required.
    public var ispPlacements: [PinpointEmailClientTypes.IspPlacement]?
    /// An object that contains the message that you sent when you performed this predictive inbox placement test.
    public var message: Swift.String?
    /// An object that specifies how many test messages that were sent during the predictive inbox placement test were delivered to recipients' inboxes, how many were sent to recipients' spam folders, and how many weren't delivered.
    /// This member is required.
    public var overallPlacement: PinpointEmailClientTypes.PlacementStatistics?
    /// An array of objects that define the tags (keys and values) that are associated with the predictive inbox placement test.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        deliverabilityTestReport: PinpointEmailClientTypes.DeliverabilityTestReport? = nil,
        ispPlacements: [PinpointEmailClientTypes.IspPlacement]? = nil,
        message: Swift.String? = nil,
        overallPlacement: PinpointEmailClientTypes.PlacementStatistics? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.deliverabilityTestReport = deliverabilityTestReport
        self.ispPlacements = ispPlacements
        self.message = message
        self.overallPlacement = overallPlacement
        self.tags = tags
    }
}

struct GetDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    let deliverabilityTestReport: PinpointEmailClientTypes.DeliverabilityTestReport?
    let overallPlacement: PinpointEmailClientTypes.PlacementStatistics?
    let ispPlacements: [PinpointEmailClientTypes.IspPlacement]?
    let message: Swift.String?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension GetDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReport = "DeliverabilityTestReport"
        case ispPlacements = "IspPlacements"
        case message = "Message"
        case overallPlacement = "OverallPlacement"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliverabilityTestReport.self, forKey: .deliverabilityTestReport)
        deliverabilityTestReport = deliverabilityTestReportDecoded
        let overallPlacementDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.PlacementStatistics.self, forKey: .overallPlacement)
        overallPlacement = overallPlacementDecoded
        let ispPlacementsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.IspPlacement?].self, forKey: .ispPlacements)
        var ispPlacementsDecoded0:[PinpointEmailClientTypes.IspPlacement]? = nil
        if let ispPlacementsContainer = ispPlacementsContainer {
            ispPlacementsDecoded0 = [PinpointEmailClientTypes.IspPlacement]()
            for structure0 in ispPlacementsContainer {
                if let structure0 = structure0 {
                    ispPlacementsDecoded0?.append(structure0)
                }
            }
        }
        ispPlacements = ispPlacementsDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetDomainDeliverabilityCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

/// Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignInput: Swift.Equatable {
    /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
    /// This member is required.
    public var campaignId: Swift.String?

    public init (
        campaignId: Swift.String? = nil
    )
    {
        self.campaignId = campaignId
    }
}

struct GetDomainDeliverabilityCampaignInputBody: Swift.Equatable {
}

extension GetDomainDeliverabilityCampaignInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainDeliverabilityCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainDeliverabilityCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainDeliverabilityCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainDeliverabilityCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainDeliverabilityCampaignOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaign = output.domainDeliverabilityCampaign
        } else {
            self.domainDeliverabilityCampaign = nil
        }
    }
}

/// An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignOutputResponse: Swift.Equatable {
    /// An object that contains the deliverability data for the campaign.
    /// This member is required.
    public var domainDeliverabilityCampaign: PinpointEmailClientTypes.DomainDeliverabilityCampaign?

    public init (
        domainDeliverabilityCampaign: PinpointEmailClientTypes.DomainDeliverabilityCampaign? = nil
    )
    {
        self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
    }
}

struct GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Equatable {
    let domainDeliverabilityCampaign: PinpointEmailClientTypes.DomainDeliverabilityCampaign?
}

extension GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaign = "DomainDeliverabilityCampaign"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DomainDeliverabilityCampaign.self, forKey: .domainDeliverabilityCampaign)
        domainDeliverabilityCampaign = domainDeliverabilityCampaignDecoded
    }
}

extension GetDomainStatisticsReportInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let startDate = startDate else {
                let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
            items.append(startDateQueryItem)
            guard let endDate = endDate else {
                let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
            items.append(endDateQueryItem)
            return items
        }
    }
}

extension GetDomainStatisticsReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domain = domain else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/statistics-report/\(domain.urlPercentEncoding())"
    }
}

/// A request to obtain deliverability metrics for a domain.
public struct GetDomainStatisticsReportInput: Swift.Equatable {
    /// The domain that you want to obtain deliverability metrics for.
    /// This member is required.
    public var domain: Swift.String?
    /// The last day (in Unix time) that you want to obtain domain deliverability metrics for. The EndDate that you specify has to be less than or equal to 30 days after the StartDate.
    /// This member is required.
    public var endDate: ClientRuntime.Date?
    /// The first day (in Unix time) that you want to obtain domain deliverability metrics for.
    /// This member is required.
    public var startDate: ClientRuntime.Date?

    public init (
        domain: Swift.String? = nil,
        endDate: ClientRuntime.Date? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.domain = domain
        self.endDate = endDate
        self.startDate = startDate
    }
}

struct GetDomainStatisticsReportInputBody: Swift.Equatable {
}

extension GetDomainStatisticsReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainStatisticsReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainStatisticsReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainStatisticsReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainStatisticsReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainStatisticsReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dailyVolumes = output.dailyVolumes
            self.overallVolume = output.overallVolume
        } else {
            self.dailyVolumes = nil
            self.overallVolume = nil
        }
    }
}

/// An object that includes statistics that are related to the domain that you specified.
public struct GetDomainStatisticsReportOutputResponse: Swift.Equatable {
    /// An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the StartDate and ending on the EndDate.
    /// This member is required.
    public var dailyVolumes: [PinpointEmailClientTypes.DailyVolume]?
    /// An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the StartDate to the EndDate.
    /// This member is required.
    public var overallVolume: PinpointEmailClientTypes.OverallVolume?

    public init (
        dailyVolumes: [PinpointEmailClientTypes.DailyVolume]? = nil,
        overallVolume: PinpointEmailClientTypes.OverallVolume? = nil
    )
    {
        self.dailyVolumes = dailyVolumes
        self.overallVolume = overallVolume
    }
}

struct GetDomainStatisticsReportOutputResponseBody: Swift.Equatable {
    let overallVolume: PinpointEmailClientTypes.OverallVolume?
    let dailyVolumes: [PinpointEmailClientTypes.DailyVolume]?
}

extension GetDomainStatisticsReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dailyVolumes = "DailyVolumes"
        case overallVolume = "OverallVolume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let overallVolumeDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.OverallVolume.self, forKey: .overallVolume)
        overallVolume = overallVolumeDecoded
        let dailyVolumesContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DailyVolume?].self, forKey: .dailyVolumes)
        var dailyVolumesDecoded0:[PinpointEmailClientTypes.DailyVolume]? = nil
        if let dailyVolumesContainer = dailyVolumesContainer {
            dailyVolumesDecoded0 = [PinpointEmailClientTypes.DailyVolume]()
            for structure0 in dailyVolumesContainer {
                if let structure0 = structure0 {
                    dailyVolumesDecoded0?.append(structure0)
                }
            }
        }
        dailyVolumes = dailyVolumesDecoded0
    }
}

extension GetEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

/// A request to return details about an email identity.
public struct GetEmailIdentityInput: Swift.Equatable {
    /// The email identity that you want to retrieve details for.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct GetEmailIdentityInputBody: Swift.Equatable {
}

extension GetEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
            self.feedbackForwardingStatus = output.feedbackForwardingStatus
            self.identityType = output.identityType
            self.mailFromAttributes = output.mailFromAttributes
            self.tags = output.tags
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.dkimAttributes = nil
            self.feedbackForwardingStatus = false
            self.identityType = nil
            self.mailFromAttributes = nil
            self.tags = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// Details about an email identity.
public struct GetEmailIdentityOutputResponse: Swift.Equatable {
    /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
    public var dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
    /// The feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
    public var feedbackForwardingStatus: Swift.Bool
    /// The email identity type.
    public var identityType: PinpointEmailClientTypes.IdentityType?
    /// An object that contains information about the Mail-From attributes for the email identity.
    public var mailFromAttributes: PinpointEmailClientTypes.MailFromAttributes?
    /// An array of objects that define the tags (keys and values) that are associated with the email identity.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init (
        dkimAttributes: PinpointEmailClientTypes.DkimAttributes? = nil,
        feedbackForwardingStatus: Swift.Bool = false,
        identityType: PinpointEmailClientTypes.IdentityType? = nil,
        mailFromAttributes: PinpointEmailClientTypes.MailFromAttributes? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.feedbackForwardingStatus = feedbackForwardingStatus
        self.identityType = identityType
        self.mailFromAttributes = mailFromAttributes
        self.tags = tags
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct GetEmailIdentityOutputResponseBody: Swift.Equatable {
    let identityType: PinpointEmailClientTypes.IdentityType?
    let feedbackForwardingStatus: Swift.Bool
    let verifiedForSendingStatus: Swift.Bool
    let dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
    let mailFromAttributes: PinpointEmailClientTypes.MailFromAttributes?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension GetEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
        case feedbackForwardingStatus = "FeedbackForwardingStatus"
        case identityType = "IdentityType"
        case mailFromAttributes = "MailFromAttributes"
        case tags = "Tags"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let feedbackForwardingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .feedbackForwardingStatus) ?? false
        feedbackForwardingStatus = feedbackForwardingStatusDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verifiedForSendingStatus) ?? false
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
        let mailFromAttributesDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.MailFromAttributes.self, forKey: .mailFromAttributes)
        mailFromAttributes = mailFromAttributesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PinpointEmailClientTypes.IdentityInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Information about an email identity.
    public struct IdentityInfo: Swift.Equatable {
        /// The address or domain of the identity.
        public var identityName: Swift.String?
        /// The email identity type. The identity type can be one of the following:
        ///
        /// * EMAIL_ADDRESS – The identity is an email address.
        ///
        /// * DOMAIN – The identity is a domain.
        ///
        /// * MANAGED_DOMAIN – The identity is a domain that is managed by AWS.
        public var identityType: PinpointEmailClientTypes.IdentityType?
        /// Indicates whether or not you can send email from the identity. In Amazon Pinpoint, an identity is an email address or domain that you send email from. Before you can send email from an identity, you have to demostrate that you own the identity, and that you authorize Amazon Pinpoint to send email from that identity.
        public var sendingEnabled: Swift.Bool

        public init (
            identityName: Swift.String? = nil,
            identityType: PinpointEmailClientTypes.IdentityType? = nil,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension PinpointEmailClientTypes {
    /// The email identity type. The identity type can be one of the following:
    ///
    /// * EMAIL_ADDRESS – The identity is an email address.
    ///
    /// * DOMAIN – The identity is a domain.
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailAddress
        case managedDomain
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailAddress,
                .managedDomain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .managedDomain: return "MANAGED_DOMAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.InboxPlacementTrackingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case global = "Global"
        case trackedIsps = "TrackedIsps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if global != false {
            try encodeContainer.encode(global, forKey: .global)
        }
        if let trackedIsps = trackedIsps {
            var trackedIspsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trackedIsps)
            for ispname0 in trackedIsps {
                try trackedIspsContainer.encode(ispname0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .global) ?? false
        global = globalDecoded
        let trackedIspsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .trackedIsps)
        var trackedIspsDecoded0:[Swift.String]? = nil
        if let trackedIspsContainer = trackedIspsContainer {
            trackedIspsDecoded0 = [Swift.String]()
            for string0 in trackedIspsContainer {
                if let string0 = string0 {
                    trackedIspsDecoded0?.append(string0)
                }
            }
        }
        trackedIsps = trackedIspsDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain (PutDeliverabilityDashboardOption operation).
    public struct InboxPlacementTrackingOption: Swift.Equatable {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public var global: Swift.Bool
        /// An array of strings, one for each major email provider that the inbox placement data applies to.
        public var trackedIsps: [Swift.String]?

        public init (
            global: Swift.Bool = false,
            trackedIsps: [Swift.String]? = nil
        )
        {
            self.global = global
            self.trackedIsps = trackedIsps
        }
    }

}

extension PinpointEmailClientTypes.IspPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ispName = "IspName"
        case placementStatistics = "PlacementStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ispName = self.ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let placementStatistics = self.placementStatistics {
            try encodeContainer.encode(placementStatistics, forKey: .placementStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let placementStatisticsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.PlacementStatistics.self, forKey: .placementStatistics)
        placementStatistics = placementStatisticsDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    public struct IspPlacement: Swift.Equatable {
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public var placementStatistics: PinpointEmailClientTypes.PlacementStatistics?

        public init (
            ispName: Swift.String? = nil,
            placementStatistics: PinpointEmailClientTypes.PlacementStatistics? = nil
        )
        {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }
    }

}

extension PinpointEmailClientTypes.KinesisFirehoseDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamArn = "DeliveryStreamArn"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamArn = self.deliveryStreamArn {
            try encodeContainer.encode(deliveryStreamArn, forKey: .deliveryStreamArn)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let deliveryStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamArn)
        deliveryStreamArn = deliveryStreamArnDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that Amazon Pinpoint sends email events to.
        /// This member is required.
        public var deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon Pinpoint uses when sending email events to the Amazon Kinesis Data Firehose stream.
        /// This member is required.
        public var iamRoleArn: Swift.String?

        public init (
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListConfigurationSetsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListConfigurationSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/configuration-sets"
    }
}

/// A request to obtain a list of configuration sets for your Amazon Pinpoint account in the current AWS Region.
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListConfigurationSets. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListConfigurationSetsInputBody: Swift.Equatable {
}

extension ListConfigurationSetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListConfigurationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListConfigurationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListConfigurationSetsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfigurationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListConfigurationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSets = output.configurationSets
            self.nextToken = output.nextToken
        } else {
            self.configurationSets = nil
            self.nextToken = nil
        }
    }
}

/// A list of configuration sets in your Amazon Pinpoint account in the current AWS Region.
public struct ListConfigurationSetsOutputResponse: Swift.Equatable {
    /// An array that contains all of the configuration sets in your Amazon Pinpoint account in the current AWS Region.
    public var configurationSets: [Swift.String]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListConfigurationSets, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsOutputResponseBody: Swift.Equatable {
    let configurationSets: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListConfigurationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSets = "ConfigurationSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationSets)
        var configurationSetsDecoded0:[Swift.String]? = nil
        if let configurationSetsContainer = configurationSetsContainer {
            configurationSetsDecoded0 = [Swift.String]()
            for string0 in configurationSetsContainer {
                if let string0 = string0 {
                    configurationSetsDecoded0?.append(string0)
                }
            }
        }
        configurationSets = configurationSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDedicatedIpPoolsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListDedicatedIpPoolsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/dedicated-ip-pools"
    }
}

/// A request to obtain a list of dedicated IP pools.
public struct ListDedicatedIpPoolsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDedicatedIpPools to indicate the position in the list of dedicated IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDedicatedIpPools. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDedicatedIpPoolsInputBody: Swift.Equatable {
}

extension ListDedicatedIpPoolsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDedicatedIpPoolsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDedicatedIpPoolsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDedicatedIpPoolsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDedicatedIpPoolsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDedicatedIpPoolsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpPools = output.dedicatedIpPools
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIpPools = nil
            self.nextToken = nil
        }
    }
}

/// A list of dedicated IP pools.
public struct ListDedicatedIpPoolsOutputResponse: Swift.Equatable {
    /// A list of all of the dedicated IP pools that are associated with your Amazon Pinpoint account.
    public var dedicatedIpPools: [Swift.String]?
    /// A token that indicates that there are additional IP pools to list. To view additional IP pools, issue another request to ListDedicatedIpPools, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        dedicatedIpPools: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIpPools = dedicatedIpPools
        self.nextToken = nextToken
    }
}

struct ListDedicatedIpPoolsOutputResponseBody: Swift.Equatable {
    let dedicatedIpPools: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDedicatedIpPoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpPools = "DedicatedIpPools"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpPoolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dedicatedIpPools)
        var dedicatedIpPoolsDecoded0:[Swift.String]? = nil
        if let dedicatedIpPoolsContainer = dedicatedIpPoolsContainer {
            dedicatedIpPoolsDecoded0 = [Swift.String]()
            for string0 in dedicatedIpPoolsContainer {
                if let string0 = string0 {
                    dedicatedIpPoolsDecoded0?.append(string0)
                }
            }
        }
        dedicatedIpPools = dedicatedIpPoolsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeliverabilityTestReportsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListDeliverabilityTestReportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/deliverability-dashboard/test-reports"
    }
}

/// A request to list all of the predictive inbox placement tests that you've performed.
public struct ListDeliverabilityTestReportsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDeliverabilityTestReports to indicate the position in the list of predictive inbox placement tests.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDeliverabilityTestReports. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDeliverabilityTestReportsInputBody: Swift.Equatable {
}

extension ListDeliverabilityTestReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDeliverabilityTestReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeliverabilityTestReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeliverabilityTestReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeliverabilityTestReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeliverabilityTestReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReports = output.deliverabilityTestReports
            self.nextToken = output.nextToken
        } else {
            self.deliverabilityTestReports = nil
            self.nextToken = nil
        }
    }
}

/// A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
public struct ListDeliverabilityTestReportsOutputResponse: Swift.Equatable {
    /// An object that contains a lists of predictive inbox placement tests that you've performed.
    /// This member is required.
    public var deliverabilityTestReports: [PinpointEmailClientTypes.DeliverabilityTestReport]?
    /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        deliverabilityTestReports: [PinpointEmailClientTypes.DeliverabilityTestReport]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverabilityTestReports = deliverabilityTestReports
        self.nextToken = nextToken
    }
}

struct ListDeliverabilityTestReportsOutputResponseBody: Swift.Equatable {
    let deliverabilityTestReports: [PinpointEmailClientTypes.DeliverabilityTestReport]?
    let nextToken: Swift.String?
}

extension ListDeliverabilityTestReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReports = "DeliverabilityTestReports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DeliverabilityTestReport?].self, forKey: .deliverabilityTestReports)
        var deliverabilityTestReportsDecoded0:[PinpointEmailClientTypes.DeliverabilityTestReport]? = nil
        if let deliverabilityTestReportsContainer = deliverabilityTestReportsContainer {
            deliverabilityTestReportsDecoded0 = [PinpointEmailClientTypes.DeliverabilityTestReport]()
            for structure0 in deliverabilityTestReportsContainer {
                if let structure0 = structure0 {
                    deliverabilityTestReportsDecoded0?.append(structure0)
                }
            }
        }
        deliverabilityTestReports = deliverabilityTestReportsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDomainDeliverabilityCampaignsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let startDate = startDate else {
                let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
            items.append(startDateQueryItem)
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            guard let endDate = endDate else {
                let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
            items.append(endDateQueryItem)
            return items
        }
    }
}

extension ListDomainDeliverabilityCampaignsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let subscribedDomain = subscribedDomain else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/domains/\(subscribedDomain.urlPercentEncoding())/campaigns"
    }
}

/// Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (PutDeliverabilityDashboardOption operation) for the domain.
public struct ListDomainDeliverabilityCampaignsInput: Swift.Equatable {
    /// The last day, in Unix time format, that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the StartDate parameter.
    /// This member is required.
    public var endDate: ClientRuntime.Date?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of a campaign in the list of campaigns.
    public var nextToken: Swift.String?
    /// The maximum number of results to include in response to a single call to the ListDomainDeliverabilityCampaigns operation. If the number of results is larger than the number that you specify in this parameter, the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The first day, in Unix time format, that you want to obtain deliverability data for.
    /// This member is required.
    public var startDate: ClientRuntime.Date?
    /// The domain to obtain deliverability data for.
    /// This member is required.
    public var subscribedDomain: Swift.String?

    public init (
        endDate: ClientRuntime.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        startDate: ClientRuntime.Date? = nil,
        subscribedDomain: Swift.String? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startDate = startDate
        self.subscribedDomain = subscribedDomain
    }
}

struct ListDomainDeliverabilityCampaignsInputBody: Swift.Equatable {
}

extension ListDomainDeliverabilityCampaignsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainDeliverabilityCampaignsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainDeliverabilityCampaignsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainDeliverabilityCampaignsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainDeliverabilityCampaignsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainDeliverabilityCampaignsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaigns = output.domainDeliverabilityCampaigns
            self.nextToken = output.nextToken
        } else {
            self.domainDeliverabilityCampaigns = nil
            self.nextToken = nil
        }
    }
}

/// An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (PutDeliverabilityDashboardOption operation) for the domain.
public struct ListDomainDeliverabilityCampaignsOutputResponse: Swift.Equatable {
    /// An array of responses, one for each campaign that used the domain to send email during the specified time range.
    /// This member is required.
    public var domainDeliverabilityCampaigns: [PinpointEmailClientTypes.DomainDeliverabilityCampaign]?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of the campaign in the list of campaigns.
    public var nextToken: Swift.String?

    public init (
        domainDeliverabilityCampaigns: [PinpointEmailClientTypes.DomainDeliverabilityCampaign]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
        self.nextToken = nextToken
    }
}

struct ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Equatable {
    let domainDeliverabilityCampaigns: [PinpointEmailClientTypes.DomainDeliverabilityCampaign]?
    let nextToken: Swift.String?
}

extension ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaigns = "DomainDeliverabilityCampaigns"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainDeliverabilityCampaign?].self, forKey: .domainDeliverabilityCampaigns)
        var domainDeliverabilityCampaignsDecoded0:[PinpointEmailClientTypes.DomainDeliverabilityCampaign]? = nil
        if let domainDeliverabilityCampaignsContainer = domainDeliverabilityCampaignsContainer {
            domainDeliverabilityCampaignsDecoded0 = [PinpointEmailClientTypes.DomainDeliverabilityCampaign]()
            for structure0 in domainDeliverabilityCampaignsContainer {
                if let structure0 = structure0 {
                    domainDeliverabilityCampaignsDecoded0?.append(structure0)
                }
            }
        }
        domainDeliverabilityCampaigns = domainDeliverabilityCampaignsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEmailIdentitiesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListEmailIdentitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/identities"
    }
}

/// A request to list all of the email identities associated with your Amazon Pinpoint account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
public struct ListEmailIdentitiesInput: Swift.Equatable {
    /// A token returned from a previous call to ListEmailIdentities to indicate the position in the list of identities.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailIdentities. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListEmailIdentitiesInputBody: Swift.Equatable {
}

extension ListEmailIdentitiesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEmailIdentitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEmailIdentitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEmailIdentitiesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEmailIdentitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEmailIdentitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.emailIdentities = output.emailIdentities
            self.nextToken = output.nextToken
        } else {
            self.emailIdentities = nil
            self.nextToken = nil
        }
    }
}

/// A list of all of the identities that you've attempted to verify for use with Amazon Pinpoint, regardless of whether or not those identities were successfully verified.
public struct ListEmailIdentitiesOutputResponse: Swift.Equatable {
    /// An array that includes all of the identities associated with your Amazon Pinpoint account.
    public var emailIdentities: [PinpointEmailClientTypes.IdentityInfo]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListEmailIdentities, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        emailIdentities: [PinpointEmailClientTypes.IdentityInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.emailIdentities = emailIdentities
        self.nextToken = nextToken
    }
}

struct ListEmailIdentitiesOutputResponseBody: Swift.Equatable {
    let emailIdentities: [PinpointEmailClientTypes.IdentityInfo]?
    let nextToken: Swift.String?
}

extension ListEmailIdentitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailIdentities = "EmailIdentities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentitiesContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.IdentityInfo?].self, forKey: .emailIdentities)
        var emailIdentitiesDecoded0:[PinpointEmailClientTypes.IdentityInfo]? = nil
        if let emailIdentitiesContainer = emailIdentitiesContainer {
            emailIdentitiesDecoded0 = [PinpointEmailClientTypes.IdentityInfo]()
            for structure0 in emailIdentitiesContainer {
                if let structure0 = structure0 {
                    emailIdentitiesDecoded0?.append(structure0)
                }
            }
        }
        emailIdentities = emailIdentitiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            return items
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/tags"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array that lists all the tags that are associated with the resource. Each tag consists of a required tag key (Key) and an associated tag value (Value)
    /// This member is required.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PinpointEmailClientTypes.MailFromAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = self.behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = self.mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
        if let mailFromDomainStatus = self.mailFromDomainStatus {
            try encodeContainer.encode(mailFromDomainStatus.rawValue, forKey: .mailFromDomainStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let mailFromDomainStatusDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.MailFromDomainStatus.self, forKey: .mailFromDomainStatus)
        mailFromDomainStatus = mailFromDomainStatusDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension PinpointEmailClientTypes {
    /// A list of attributes that are associated with a MAIL FROM domain.
    public struct MailFromAttributes: Swift.Equatable {
        /// The action that Amazon Pinpoint to takes if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        /// This member is required.
        public var behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure?
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The status of the MAIL FROM domain. This status can have the following values:
        ///
        /// * PENDING – Amazon Pinpoint hasn't started searching for the MX record yet.
        ///
        /// * SUCCESS – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.
        ///
        /// * FAILED – Amazon Pinpoint can't find the required MX record, or the record no longer exists.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.
        /// This member is required.
        public var mailFromDomainStatus: PinpointEmailClientTypes.MailFromDomainStatus?

        public init (
            behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: PinpointEmailClientTypes.MailFromDomainStatus? = nil
        )
        {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension MailFromDomainNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MailFromDomainNotVerifiedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the sending domain isn't verified.
public struct MailFromDomainNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MailFromDomainNotVerifiedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MailFromDomainNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes {
    /// The status of the MAIL FROM domain. This status can have the following values:
    ///
    /// * PENDING – Amazon Pinpoint hasn't started searching for the MX record yet.
    ///
    /// * SUCCESS – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.
    ///
    /// * FAILED – Amazon Pinpoint can't find the required MX record, or the record no longer exists.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.
    public enum MailFromDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [MailFromDomainStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MailFromDomainStatus(rawValue: rawValue) ?? MailFromDomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointEmailClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Content.self, forKey: .subject)
        subject = subjectDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Represents the email message that you're sending. The Message object consists of a subject line and a message body.
    public struct Message: Swift.Equatable {
        /// The body of the message. You can specify an HTML version of the message, a text-only version of the message, or both.
        /// This member is required.
        public var body: PinpointEmailClientTypes.Body?
        /// The subject line of the email. The subject line can only contain 7-bit ASCII characters. However, you can specify non-ASCII characters in the subject line by using encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047).
        /// This member is required.
        public var subject: PinpointEmailClientTypes.Content?

        public init (
            body: PinpointEmailClientTypes.Body? = nil,
            subject: PinpointEmailClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension MessageRejected {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MessageRejectedBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because it contains invalid content.
public struct MessageRejected: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MessageRejectedBody: Swift.Equatable {
    let message: Swift.String?
}

extension MessageRejectedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes.MessageTag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    public struct MessageTag: Swift.Equatable {
        /// The name of the message tag. The message tag name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the message tag. The message tag value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes.OverallVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case readRatePercent = "ReadRatePercent"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacement0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacement0)
            }
        }
        if let readRatePercent = self.readRatePercent {
            try encodeContainer.encode(readRatePercent, forKey: .readRatePercent)
        }
        if let volumeStatistics = self.volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let readRatePercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRatePercent)
        readRatePercent = readRatePercentDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[PinpointEmailClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [PinpointEmailClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about email that was sent from the selected domain.
    public struct OverallVolume: Swift.Equatable {
        /// An object that contains inbox and junk mail placement metrics for individual email providers.
        public var domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their recipients.
        public var readRatePercent: Swift.Double?
        /// An object that contains information about the numbers of messages that arrived in recipients' inboxes and junk mail folders.
        public var volumeStatistics: PinpointEmailClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]? = nil,
            readRatePercent: Swift.Double? = nil,
            volumeStatistics: PinpointEmailClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension PinpointEmailClientTypes.PinpointDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn = "ApplicationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationArn = self.applicationArn {
            try encodeContainer.encode(applicationArn, forKey: .applicationArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
    public struct PinpointDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.
        public var applicationArn: Swift.String?

        public init (
            applicationArn: Swift.String? = nil
        )
        {
            self.applicationArn = applicationArn
        }
    }

}

extension PinpointEmailClientTypes.PlacementStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimPercentage = "DkimPercentage"
        case inboxPercentage = "InboxPercentage"
        case missingPercentage = "MissingPercentage"
        case spamPercentage = "SpamPercentage"
        case spfPercentage = "SpfPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dkimPercentage = self.dkimPercentage {
            try encodeContainer.encode(dkimPercentage, forKey: .dkimPercentage)
        }
        if let inboxPercentage = self.inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let missingPercentage = self.missingPercentage {
            try encodeContainer.encode(missingPercentage, forKey: .missingPercentage)
        }
        if let spamPercentage = self.spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spfPercentage = self.spfPercentage {
            try encodeContainer.encode(spfPercentage, forKey: .spfPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
        let missingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .missingPercentage)
        missingPercentage = missingPercentageDecoded
        let spfPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spfPercentage)
        spfPercentage = spfPercentageDecoded
        let dkimPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dkimPercentage)
        dkimPercentage = dkimPercentageDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains inbox placement data for an email provider.
    public struct PlacementStatistics: Swift.Equatable {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail (DKIM) during the predictive inbox placement test.
        public var dkimPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public var inboxPercentage: Swift.Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the predictive inbox placement test.
        public var missingPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during the predictive inbox placement test.
        public var spamPercentage: Swift.Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework (SPF) during the predictive inbox placement test.
        public var spfPercentage: Swift.Double?

        public init (
            dkimPercentage: Swift.Double? = nil,
            inboxPercentage: Swift.Double? = nil,
            missingPercentage: Swift.Double? = nil,
            spamPercentage: Swift.Double? = nil,
            spfPercentage: Swift.Double? = nil
        )
        {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }
    }

}

extension PutAccountDedicatedIpWarmupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoWarmupEnabled != false {
            try encodeContainer.encode(autoWarmupEnabled, forKey: .autoWarmupEnabled)
        }
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/account/dedicated-ips/warmup"
    }
}

/// A request to enable or disable the automatic IP address warm-up feature.
public struct PutAccountDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon Pinpoint account in the current AWS Region. Set to true to enable the automatic warm-up feature, or set to false to disable it.
    public var autoWarmupEnabled: Swift.Bool

    public init (
        autoWarmupEnabled: Swift.Bool = false
    )
    {
        self.autoWarmupEnabled = autoWarmupEnabled
    }
}

struct PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    let autoWarmupEnabled: Swift.Bool
}

extension PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoWarmupEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoWarmupEnabled) ?? false
        autoWarmupEnabled = autoWarmupEnabledDecoded
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutAccountSendingAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

extension PutAccountSendingAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/account/sending"
    }
}

/// A request to change the ability of your account to send email.
public struct PutAccountSendingAttributesInput: Swift.Equatable {
    /// Enables or disables your account's ability to send email. Set to true to enable email sending, or set to false to disable email sending. If AWS paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.
    public var sendingEnabled: Swift.Bool

    public init (
        sendingEnabled: Swift.Bool = false
    )
    {
        self.sendingEnabled = sendingEnabled
    }
}

struct PutAccountSendingAttributesInputBody: Swift.Equatable {
    let sendingEnabled: Swift.Bool
}

extension PutAccountSendingAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutAccountSendingAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountSendingAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountSendingAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountSendingAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSendingAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = self.sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = self.tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }
}

extension PutConfigurationSetDeliveryOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/delivery-options"
    }
}

/// A request to associate a configuration set with a dedicated IP pool.
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to associate with a dedicated IP pool.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the dedicated IP pool that you want to associate with the configuration set.
    public var sendingPoolName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public var tlsPolicy: PinpointEmailClientTypes.TlsPolicy?

    public init (
        configurationSetName: Swift.String? = nil,
        sendingPoolName: Swift.String? = nil,
        tlsPolicy: PinpointEmailClientTypes.TlsPolicy? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingPoolName = sendingPoolName
        self.tlsPolicy = tlsPolicy
    }
}

struct PutConfigurationSetDeliveryOptionsInputBody: Swift.Equatable {
    let tlsPolicy: PinpointEmailClientTypes.TlsPolicy?
    let sendingPoolName: Swift.String?
}

extension PutConfigurationSetDeliveryOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetDeliveryOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetReputationOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }
}

extension PutConfigurationSetReputationOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/reputation-options"
    }
}

/// A request to enable or disable tracking of reputation metrics for a configuration set.
public struct PutConfigurationSetReputationOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to enable or disable reputation metric tracking for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    public var reputationMetricsEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        reputationMetricsEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.reputationMetricsEnabled = reputationMetricsEnabled
    }
}

struct PutConfigurationSetReputationOptionsInputBody: Swift.Equatable {
    let reputationMetricsEnabled: Swift.Bool
}

extension PutConfigurationSetReputationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reputationMetricsEnabled) ?? false
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
    }
}

extension PutConfigurationSetReputationOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetReputationOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetReputationOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetReputationOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetReputationOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetSendingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

extension PutConfigurationSetSendingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/sending"
    }
}

/// A request to enable or disable the ability of Amazon Pinpoint to send emails that use a specific configuration set.
public struct PutConfigurationSetSendingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to enable or disable email sending for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    public var sendingEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        sendingEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingEnabled = sendingEnabled
    }
}

struct PutConfigurationSetSendingOptionsInputBody: Swift.Equatable {
    let sendingEnabled: Swift.Bool
}

extension PutConfigurationSetSendingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutConfigurationSetSendingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetSendingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetSendingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetSendingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSendingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetTrackingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = self.customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }
}

extension PutConfigurationSetTrackingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/tracking-options"
    }
}

/// A request to add a custom domain for tracking open and click events to a configuration set.
public struct PutConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to add a custom tracking domain to.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The domain that you want to use to track open and click events.
    public var customRedirectDomain: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        customRedirectDomain: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.customRedirectDomain = customRedirectDomain
    }
}

struct PutConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    let customRedirectDomain: Swift.String?
}

extension PutConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension PutConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDedicatedIpInPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPoolName = self.destinationPoolName {
            try encodeContainer.encode(destinationPoolName, forKey: .destinationPoolName)
        }
    }
}

extension PutDedicatedIpInPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())/pool"
    }
}

/// A request to move a dedicated IP address to a dedicated IP pool.
public struct PutDedicatedIpInPoolInput: Swift.Equatable {
    /// The name of the IP pool that you want to add the dedicated IP address to. You have to specify an IP pool that already exists.
    /// This member is required.
    public var destinationPoolName: Swift.String?
    /// The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Pinpoint account.
    /// This member is required.
    public var ip: Swift.String?

    public init (
        destinationPoolName: Swift.String? = nil,
        ip: Swift.String? = nil
    )
    {
        self.destinationPoolName = destinationPoolName
        self.ip = ip
    }
}

struct PutDedicatedIpInPoolInputBody: Swift.Equatable {
    let destinationPoolName: Swift.String?
}

extension PutDedicatedIpInPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPoolName)
        destinationPoolName = destinationPoolNameDecoded
    }
}

extension PutDedicatedIpInPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpInPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDedicatedIpInPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpInPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpInPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDedicatedIpWarmupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let warmupPercentage = self.warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
    }
}

extension PutDedicatedIpWarmupAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())/warmup"
    }
}

/// A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
public struct PutDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// The dedicated IP address that you want to update the warm-up attributes for.
    /// This member is required.
    public var ip: Swift.String?
    /// The warm-up percentage that you want to associate with the dedicated IP address.
    /// This member is required.
    public var warmupPercentage: Swift.Int?

    public init (
        ip: Swift.String? = nil,
        warmupPercentage: Swift.Int? = nil
    )
    {
        self.ip = ip
        self.warmupPercentage = warmupPercentage
    }
}

struct PutDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    let warmupPercentage: Swift.Int?
}

extension PutDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
    }
}

extension PutDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDeliverabilityDashboardOptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dashboardEnabled != false {
            try encodeContainer.encode(dashboardEnabled, forKey: .dashboardEnabled)
        }
        if let subscribedDomains = subscribedDomains {
            var subscribedDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscribedDomains)
            for domaindeliverabilitytrackingoption0 in subscribedDomains {
                try subscribedDomainsContainer.encode(domaindeliverabilitytrackingoption0)
            }
        }
    }
}

extension PutDeliverabilityDashboardOptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/deliverability-dashboard"
    }
}

/// Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct PutDeliverabilityDashboardOptionInput: Swift.Equatable {
    /// Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the dashboard, set this value to true.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and enabled the Deliverability dashboard for.
    public var subscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?

    public init (
        dashboardEnabled: Swift.Bool = false,
        subscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil
    )
    {
        self.dashboardEnabled = dashboardEnabled
        self.subscribedDomains = subscribedDomains
    }
}

struct PutDeliverabilityDashboardOptionInputBody: Swift.Equatable {
    let dashboardEnabled: Swift.Bool
    let subscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
}

extension PutDeliverabilityDashboardOptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dashboardEnabled) ?? false
        dashboardEnabled = dashboardEnabledDecoded
        let subscribedDomainsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .subscribedDomains)
        var subscribedDomainsDecoded0:[PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let subscribedDomainsContainer = subscribedDomainsContainer {
            subscribedDomainsDecoded0 = [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in subscribedDomainsContainer {
                if let structure0 = structure0 {
                    subscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        subscribedDomains = subscribedDomainsDecoded0
    }
}

extension PutDeliverabilityDashboardOptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDeliverabilityDashboardOptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDeliverabilityDashboardOptionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDeliverabilityDashboardOptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// A response that indicates whether the Deliverability dashboard is enabled for your Amazon Pinpoint account.
public struct PutDeliverabilityDashboardOptionOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityDkimAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
    }
}

extension PutEmailIdentityDkimAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/dkim"
    }
}

/// A request to enable or disable DKIM signing of email that you send from an email identity.
public struct PutEmailIdentityDkimAttributesInput: Swift.Equatable {
    /// The email identity that you want to change the DKIM settings for.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. When you set this value to false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
    public var signingEnabled: Swift.Bool

    public init (
        emailIdentity: Swift.String? = nil,
        signingEnabled: Swift.Bool = false
    )
    {
        self.emailIdentity = emailIdentity
        self.signingEnabled = signingEnabled
    }
}

struct PutEmailIdentityDkimAttributesInputBody: Swift.Equatable {
    let signingEnabled: Swift.Bool
}

extension PutEmailIdentityDkimAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingEnabled) ?? false
        signingEnabled = signingEnabledDecoded
    }
}

extension PutEmailIdentityDkimAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityDkimAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityDkimAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityDkimAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityDkimAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityFeedbackAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if emailForwardingEnabled != false {
            try encodeContainer.encode(emailForwardingEnabled, forKey: .emailForwardingEnabled)
        }
    }
}

extension PutEmailIdentityFeedbackAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/feedback"
    }
}

/// A request to set the attributes that control how bounce and complaint events are processed.
public struct PutEmailIdentityFeedbackAttributesInput: Swift.Equatable {
    /// Sets the feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
    public var emailForwardingEnabled: Swift.Bool
    /// The email identity that you want to configure bounce and complaint feedback forwarding for.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailForwardingEnabled: Swift.Bool = false,
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailForwardingEnabled = emailForwardingEnabled
        self.emailIdentity = emailIdentity
    }
}

struct PutEmailIdentityFeedbackAttributesInputBody: Swift.Equatable {
    let emailForwardingEnabled: Swift.Bool
}

extension PutEmailIdentityFeedbackAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailForwardingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .emailForwardingEnabled) ?? false
        emailForwardingEnabled = emailForwardingEnabledDecoded
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityFeedbackAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityFeedbackAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityFeedbackAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityMailFromAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = self.behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = self.mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
    }
}

extension PutEmailIdentityMailFromAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/mail-from"
    }
}

/// A request to configure the custom MAIL FROM domain for a verified identity.
public struct PutEmailIdentityMailFromAttributesInput: Swift.Equatable {
    /// The action that you want Amazon Pinpoint to take if it can't read the required MX record when you send an email. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure?
    /// The verified email identity that you want to set up the custom MAIL FROM domain for.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria:
    ///
    /// * It has to be a subdomain of the verified identity.
    ///
    /// * It can't be used to receive email.
    ///
    /// * It can't be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.
    public var mailFromDomain: Swift.String?

    public init (
        behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure? = nil,
        emailIdentity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMxFailure = behaviorOnMxFailure
        self.emailIdentity = emailIdentity
        self.mailFromDomain = mailFromDomain
    }
}

struct PutEmailIdentityMailFromAttributesInputBody: Swift.Equatable {
    let mailFromDomain: Swift.String?
    let behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure?
}

extension PutEmailIdentityMailFromAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension PutEmailIdentityMailFromAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityMailFromAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityMailFromAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityMailFromAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityMailFromAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PinpointEmailClientTypes.RawMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
    }
}

extension PinpointEmailClientTypes {
    /// The raw email message.
    public struct RawMessage: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * Attachments must be in a file format that Amazon Pinpoint supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension PinpointEmailClientTypes.ReputationOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastFreshStart = self.lastFreshStart {
            try encodeContainer.encodeTimestamp(lastFreshStart, format: .epochSeconds, forKey: .lastFreshStart)
        }
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reputationMetricsEnabled) ?? false
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastFreshStart)
        lastFreshStart = lastFreshStartDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region.
    public struct ReputationOptions: Swift.Equatable {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        public var lastFreshStart: ClientRuntime.Date?
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public var reputationMetricsEnabled: Swift.Bool

        public init (
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }
    }

}

extension SendEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case fromEmailAddress = "FromEmailAddress"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let emailTags = emailTags {
            var emailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailTags)
            for messagetag0 in emailTags {
                try emailTagsContainer.encode(messagetag0)
            }
        }
        if let feedbackForwardingEmailAddress = self.feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddress0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddress0)
            }
        }
    }
}

extension SendEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/outbound-emails"
    }
}

/// A request to send an email message.
public struct SendEmailInput: Swift.Equatable {
    /// The name of the configuration set that you want to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can send either a Simple message or a Raw message.
    /// This member is required.
    public var content: PinpointEmailClientTypes.EmailContent?
    /// An object that contains the recipients of the email message.
    /// This member is required.
    public var destination: PinpointEmailClientTypes.Destination?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var emailTags: [PinpointEmailClientTypes.MessageTag]?
    /// The address that Amazon Pinpoint should send bounce and complaint notifications to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// The email address that you want to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init (
        configurationSetName: Swift.String? = nil,
        content: PinpointEmailClientTypes.EmailContent? = nil,
        destination: PinpointEmailClientTypes.Destination? = nil,
        emailTags: [PinpointEmailClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.fromEmailAddress = fromEmailAddress
        self.replyToAddresses = replyToAddresses
    }
}

struct SendEmailInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let destination: PinpointEmailClientTypes.Destination?
    let replyToAddresses: [Swift.String]?
    let feedbackForwardingEmailAddress: Swift.String?
    let content: PinpointEmailClientTypes.EmailContent?
    let emailTags: [PinpointEmailClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
}

extension SendEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case fromEmailAddress = "FromEmailAddress"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let contentDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let emailTagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.MessageTag?].self, forKey: .emailTags)
        var emailTagsDecoded0:[PinpointEmailClientTypes.MessageTag]? = nil
        if let emailTagsContainer = emailTagsContainer {
            emailTagsDecoded0 = [PinpointEmailClientTypes.MessageTag]()
            for structure0 in emailTagsContainer {
                if let structure0 = structure0 {
                    emailTagsDecoded0?.append(structure0)
                }
            }
        }
        emailTags = emailTagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// A unique message ID that you receive when Amazon Pinpoint accepts an email for sending.
public struct SendEmailOutputResponse: Swift.Equatable {
    /// A unique identifier for the message that is generated when Amazon Pinpoint accepts the message. It is possible for Amazon Pinpoint to accept a message without sending it. This can happen when the message you're trying to send has an attachment doesn't pass a virus check, or when you send a templated email that contains invalid personalization content, for example.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension PinpointEmailClientTypes.SendQuota: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max24HourSend = "Max24HourSend"
        case maxSendRate = "MaxSendRate"
        case sentLast24Hours = "SentLast24Hours"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if max24HourSend != 0.0 {
            try encodeContainer.encode(max24HourSend, forKey: .max24HourSend)
        }
        if maxSendRate != 0.0 {
            try encodeContainer.encode(maxSendRate, forKey: .maxSendRate)
        }
        if sentLast24Hours != 0.0 {
            try encodeContainer.encode(sentLast24Hours, forKey: .sentLast24Hours)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let max24HourSendDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max24HourSend) ?? 0.0
        max24HourSend = max24HourSendDecoded
        let maxSendRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxSendRate) ?? 0.0
        maxSendRate = maxSendRateDecoded
        let sentLast24HoursDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sentLast24Hours) ?? 0.0
        sentLast24Hours = sentLast24HoursDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
    public struct SendQuota: Swift.Equatable {
        /// The maximum number of emails that you can send in the current AWS Region over a 24-hour period. This value is also called your sending quota.
        public var max24HourSend: Swift.Double
        /// The maximum number of emails that you can send per second in the current AWS Region. This value is also called your maximum sending rate or your maximum TPS (transactions per second) rate.
        public var maxSendRate: Swift.Double
        /// The number of emails sent from your Amazon Pinpoint account in the current AWS Region over the past 24 hours.
        public var sentLast24Hours: Swift.Double

        public init (
            max24HourSend: Swift.Double = 0.0,
            maxSendRate: Swift.Double = 0.0,
            sentLast24Hours: Swift.Double = 0.0
        )
        {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }
    }

}

extension PinpointEmailClientTypes.SendingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PinpointEmailClientTypes {
    /// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
    public struct SendingOptions: Swift.Equatable {
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public var sendingEnabled: Swift.Bool

        public init (
            sendingEnabled: Swift.Bool = false
        )
        {
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension SendingPausedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendingPausedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email is currently paused.
public struct SendingPausedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SendingPausedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes.SnsDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicArn = self.topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
    public struct SnsDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email events to. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init (
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension PinpointEmailClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the tags that are associated with a resource. A tag is a label that you optionally define and associate with a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * For each associated resource, each tag key must be unique and it can have only one value.
    ///
    /// * The aws: prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.
    ///
    /// * You can associate tags with public or shared resources, but the tags are available only for your AWS account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified AWS Region for your AWS account.
    public struct Tag: Swift.Equatable {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.
        /// This member is required.
        public var key: Swift.String?
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don’t want a resource to have a specific tag value, don’t specify a value for this parameter. Amazon Pinpoint will set the value to an empty string.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/tags"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    /// This member is required.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension PinpointEmailClientTypes.Template: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateArn = "TemplateArn"
        case templateData = "TemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateArn = self.templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let templateData = self.templateData {
            try encodeContainer.encode(templateData, forKey: .templateData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension PinpointEmailClientTypes {
    public struct Template: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the template.
        public var templateArn: Swift.String?
        /// An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.
        public var templateData: Swift.String?

        public init (
            templateArn: Swift.String? = nil,
            templateData: Swift.String? = nil
        )
        {
            self.templateArn = templateArn
            self.templateData = templateData
        }
    }

}

extension PinpointEmailClientTypes {
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .require: return "REQUIRE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Too many requests have been made to the operation.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PinpointEmailClientTypes.TrackingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = self.customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the tracking options for a configuration set. When you use Amazon Pinpoint to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them. These images and links include references to a domain operated by AWS. You can optionally configure Amazon Pinpoint to use a domain that you operate for these images and links.
    public struct TrackingOptions: Swift.Equatable {
        /// The domain that you want to use for tracking open and click events.
        /// This member is required.
        public var customRedirectDomain: Swift.String?

        public init (
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/email/tags"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value. To remove more than one tag from the resource, append the TagKeys parameter and argument for each additional tag to remove, separated by an ampersand. For example: /v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = self.eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
    }
}

extension UpdateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        guard let eventDestinationName = eventDestinationName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

/// A request to change the settings for an event destination for a configuration set.
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination that you want to modify.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
    /// The name of the event destination that you want to modify.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointEmailClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct UpdateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
}

extension UpdateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension UpdateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension PinpointEmailClientTypes.VolumeStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxRawCount = "InboxRawCount"
        case projectedInbox = "ProjectedInbox"
        case projectedSpam = "ProjectedSpam"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxRawCount = self.inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let projectedInbox = self.projectedInbox {
            try encodeContainer.encode(projectedInbox, forKey: .projectedInbox)
        }
        if let projectedSpam = self.projectedSpam {
            try encodeContainer.encode(projectedSpam, forKey: .projectedSpam)
        }
        if let spamRawCount = self.spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let projectedInboxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedInbox)
        projectedInbox = projectedInboxDecoded
        let projectedSpamDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedSpam)
        projectedSpam = projectedSpamDecoded
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the amount of email that was delivered to recipients.
    public struct VolumeStatistics: Swift.Equatable {
        /// The total number of emails that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' inboxes.
        public var projectedInbox: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' spam or junk mail folders.
        public var projectedSpam: Swift.Int?
        /// The total number of emails that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init (
            inboxRawCount: Swift.Int? = nil,
            projectedInbox: Swift.Int? = nil,
            projectedSpam: Swift.Int? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }
    }

}

extension PinpointEmailClientTypes {
    /// The warmup status of a dedicated IP.
    public enum WarmupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case done
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmupStatus] {
            return [
                .done,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .done: return "DONE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmupStatus(rawValue: rawValue) ?? WarmupStatus.sdkUnknown(rawValue)
        }
    }
}
