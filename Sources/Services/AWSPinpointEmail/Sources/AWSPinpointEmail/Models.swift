//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// The message can't be sent because the account's ability to send email has been permanently restricted.
public struct AccountSuspendedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountSuspendedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource specified in your request already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is being modified by another operation or thread.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Too many requests have been made to the operation.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PinpointEmailClientTypes {

    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .require: return "REQUIRE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// Used to associate a configuration set with a dedicated IP pool.
    public struct DeliveryOptions {
        /// The name of the dedicated IP pool that you want to associate with the configuration set.
        public var sendingPoolName: Swift.String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: PinpointEmailClientTypes.TlsPolicy?

        public init(
            sendingPoolName: Swift.String? = nil,
            tlsPolicy: PinpointEmailClientTypes.TlsPolicy? = nil
        )
        {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension PinpointEmailClientTypes {
    /// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region.
    public struct ReputationOptions {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        public var lastFreshStart: Foundation.Date?
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public var reputationMetricsEnabled: Swift.Bool

        public init(
            lastFreshStart: Foundation.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }
    }

}

extension PinpointEmailClientTypes {
    /// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
    public struct SendingOptions {
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public var sendingEnabled: Swift.Bool

        public init(
            sendingEnabled: Swift.Bool = false
        )
        {
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines the tags that are associated with a resource. A tag is a label that you optionally define and associate with a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * For each associated resource, each tag key must be unique and it can have only one value.
    ///
    /// * The aws: prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.
    ///
    /// * You can associate tags with public or shared resources, but the tags are available only for your AWS account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified AWS Region for your AWS account.
    public struct Tag {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.
        /// This member is required.
        public var key: Swift.String?
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don’t want a resource to have a specific tag value, don’t specify a value for this parameter. Amazon Pinpoint will set the value to an empty string.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines the tracking options for a configuration set. When you use Amazon Pinpoint to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them. These images and links include references to a domain operated by AWS. You can optionally configure Amazon Pinpoint to use a domain that you operate for these images and links.
    public struct TrackingOptions {
        /// The domain that you want to use for tracking open and click events.
        /// This member is required.
        public var customRedirectDomain: Swift.String?

        public init(
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

/// A request to create a configuration set.
public struct CreateConfigurationSetInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
    public var sendingOptions: PinpointEmailClientTypes.SendingOptions?
    /// An array of objects that define the tags (keys and values) that you want to associate with the configuration set.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: PinpointEmailClientTypes.TrackingOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        deliveryOptions: PinpointEmailClientTypes.DeliveryOptions? = nil,
        reputationOptions: PinpointEmailClientTypes.ReputationOptions? = nil,
        sendingOptions: PinpointEmailClientTypes.SendingOptions? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        trackingOptions: PinpointEmailClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetOutput {

    public init() { }
}

extension PinpointEmailClientTypes {

    /// The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon Pinpoint to use your own email headers, choose emailHeader. If you want Amazon Pinpoint to use link tags, choose linkTags.
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "EMAIL_HEADER"
            case .linkTag: return "LINK_TAG"
            case .messageTag: return "MESSAGE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines the dimension configuration to use when you send Amazon Pinpoint email events to Amazon CloudWatch.
    public struct CloudWatchDimensionConfiguration {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon Pinpoint to use your own email headers, choose emailHeader. If you want Amazon Pinpoint to use link tags, choose linkTags.
        /// This member is required.
        public var dimensionValueSource: PinpointEmailClientTypes.DimensionValueSource?

        public init(
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: PinpointEmailClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    public struct CloudWatchDestination {
        /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [PinpointEmailClientTypes.CloudWatchDimensionConfiguration]?

        public init(
            dimensionConfigurations: [PinpointEmailClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    public struct KinesisFirehoseDestination {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that Amazon Pinpoint sends email events to.
        /// This member is required.
        public var deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon Pinpoint uses when sending email events to the Amazon Kinesis Data Firehose stream.
        /// This member is required.
        public var iamRoleArn: Swift.String?

        public init(
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension PinpointEmailClientTypes {

    /// An email sending event type. For example, email sends, opens, and bounces are all email events.
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case `open`
        case reject
        case renderingFailure
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .open,
                .reject,
                .renderingFailure,
                .send
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .open: return "OPEN"
            case .reject: return "REJECT"
            case .renderingFailure: return "RENDERING_FAILURE"
            case .send: return "SEND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
    public struct PinpointDestination {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.
        public var applicationArn: Swift.String?

        public init(
            applicationArn: Swift.String? = nil
        )
        {
            self.applicationArn = applicationArn
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
    public struct SnsDestination {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email events to. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    public struct EventDestinationDefinition {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination?
        /// An array that specifies which events Amazon Pinpoint should send to the destinations in this EventDestinationDefinition.
        public var matchingEventTypes: [PinpointEmailClientTypes.EventType]?
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public var pinpointDestination: PinpointEmailClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: PinpointEmailClientTypes.SnsDestination?

        public init(
            cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointEmailClientTypes.EventType]? = nil,
            pinpointDestination: PinpointEmailClientTypes.PinpointDestination? = nil,
            snsDestination: PinpointEmailClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

/// A request to add an event destination to a configuration set.
public struct CreateConfigurationSetEventDestinationInput {
    /// The name of the configuration set that you want to add an event destination to.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination within the configuration set.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointEmailClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetEventDestinationOutput {

    public init() { }
}

/// A request to create a new dedicated IP pool.
public struct CreateDedicatedIpPoolInput {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An object that defines the tags (keys and values) that you want to associate with the pool.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        poolName: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.poolName = poolName
        self.tags = tags
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateDedicatedIpPoolOutput {

    public init() { }
}

/// The message can't be sent because the sending domain isn't verified.
public struct MailFromDomainNotVerifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MailFromDomainNotVerifiedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The message can't be sent because it contains invalid content.
public struct MessageRejected: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MessageRejected" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The message can't be sent because the account's ability to send email is currently paused.
public struct SendingPausedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SendingPausedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PinpointEmailClientTypes {
    /// The raw email message.
    public struct RawMessage {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * Attachments must be in a file format that Amazon Pinpoint supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var data: Foundation.Data?

        public init(
            data: Foundation.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that represents the content of the email, and optionally a character set specification.
    public struct Content {
        /// The character set for the content. Because of the constraints of the SMTP protocol, Amazon Pinpoint uses 7-bit ASCII by default. If the text includes characters outside of the ASCII range, you have to specify a character set. For example, you could specify UTF-8, ISO-8859-1, or Shift_JIS.
        public var charset: Swift.String?
        /// The content of the message itself.
        /// This member is required.
        public var data: Swift.String?

        public init(
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension PinpointEmailClientTypes {
    /// Represents the body of the email message.
    public struct Body {
        /// An object that represents the version of the message that is displayed in email clients that support HTML. HTML messages can include formatted text, hyperlinks, images, and more.
        public var html: PinpointEmailClientTypes.Content?
        /// An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering.
        public var text: PinpointEmailClientTypes.Content?

        public init(
            html: PinpointEmailClientTypes.Content? = nil,
            text: PinpointEmailClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension PinpointEmailClientTypes {
    /// Represents the email message that you're sending. The Message object consists of a subject line and a message body.
    public struct Message {
        /// The body of the message. You can specify an HTML version of the message, a text-only version of the message, or both.
        /// This member is required.
        public var body: PinpointEmailClientTypes.Body?
        /// The subject line of the email. The subject line can only contain 7-bit ASCII characters. However, you can specify non-ASCII characters in the subject line by using encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047).
        /// This member is required.
        public var subject: PinpointEmailClientTypes.Content?

        public init(
            body: PinpointEmailClientTypes.Body? = nil,
            subject: PinpointEmailClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension PinpointEmailClientTypes {
    public struct Template {
        /// The Amazon Resource Name (ARN) of the template.
        public var templateArn: Swift.String?
        /// An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.
        public var templateData: Swift.String?

        public init(
            templateArn: Swift.String? = nil,
            templateData: Swift.String? = nil
        )
        {
            self.templateArn = templateArn
            self.templateData = templateData
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    public struct EmailContent {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * If you include attachments, they must be in a file format that Amazon Pinpoint supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        public var raw: PinpointEmailClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public var simple: PinpointEmailClientTypes.Message?
        /// The template to use for the email message.
        public var template: PinpointEmailClientTypes.Template?

        public init(
            raw: PinpointEmailClientTypes.RawMessage? = nil,
            simple: PinpointEmailClientTypes.Message? = nil,
            template: PinpointEmailClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}

/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon Pinpoint then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
public struct CreateDeliverabilityTestReportInput {
    /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
    /// This member is required.
    public var content: PinpointEmailClientTypes.EmailContent?
    /// The email address that the predictive inbox placement test email was sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.
    public var reportName: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        content: PinpointEmailClientTypes.EmailContent? = nil,
        fromEmailAddress: Swift.String? = nil,
        reportName: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.fromEmailAddress = fromEmailAddress
        self.reportName = reportName
        self.tags = tags
    }
}

extension PinpointEmailClientTypes {

    /// The status of a predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
    public enum DeliverabilityTestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityTestStatus] {
            return [
                .completed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Information about the predictive inbox placement test that you created.
public struct CreateDeliverabilityTestReportOutput {
    /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
    /// This member is required.
    public var deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus?
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.deliverabilityTestStatus = deliverabilityTestStatus
        self.reportId = reportId
    }
}

/// A request to begin the verification process for an email identity (an email address or domain).
public struct CreateEmailIdentityInput {
    /// The email address or domain that you want to verify.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the email identity.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        emailIdentity: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.tags = tags
    }
}

extension PinpointEmailClientTypes {

    /// The DKIM authentication status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The DKIM verification process was initiated, and Amazon Pinpoint is still waiting for the required CNAME records to appear in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The DKIM authentication process completed successfully.
    ///
    /// * FAILED – The DKIM authentication process failed. This can happen when Amazon Pinpoint fails to find the required CNAME records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon Pinpoint from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public enum DkimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the DKIM configuration for an email identity.
    public struct DkimAttributes {
        /// If the value is true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. If the value is false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
        public var signingEnabled: Swift.Bool
        /// Describes whether or not Amazon Pinpoint has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:
        ///
        /// * PENDING – Amazon Pinpoint hasn't yet located the DKIM records in the DNS configuration for the domain, but will continue to attempt to locate them.
        ///
        /// * SUCCESS – Amazon Pinpoint located the DKIM records in the DNS configuration for the domain and determined that they're correct. Amazon Pinpoint can now send DKIM-signed email from the identity.
        ///
        /// * FAILED – Amazon Pinpoint was unable to locate the DKIM records in the DNS settings for the domain, and won't continue to search for them.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the DKIM status for the domain.
        ///
        /// * NOT_STARTED – Amazon Pinpoint hasn't yet started searching for the DKIM records in the DKIM records for the domain.
        public var status: PinpointEmailClientTypes.DkimStatus?
        /// A set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon Pinpoint detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. Amazon Pinpoint usually detects these records within about 72 hours of adding them to the DNS configuration for your domain.
        public var tokens: [Swift.String]?

        public init(
            signingEnabled: Swift.Bool = false,
            status: PinpointEmailClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}

extension PinpointEmailClientTypes {

    /// The email identity type. The identity type can be one of the following:
    ///
    /// * EMAIL_ADDRESS – The identity is an email address.
    ///
    /// * DOMAIN – The identity is a domain.
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case domain
        case emailAddress
        case managedDomain
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailAddress,
                .managedDomain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .managedDomain: return "MANAGED_DOMAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// If the email identity is a domain, this object contains tokens that you can use to create a set of CNAME records. To sucessfully verify your domain, you have to add these records to the DNS configuration for your domain. If the email identity is an email address, this object is empty.
public struct CreateEmailIdentityOutput {
    /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
    public var dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
    /// The email identity type.
    public var identityType: PinpointEmailClientTypes.IdentityType?
    /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init(
        dkimAttributes: PinpointEmailClientTypes.DkimAttributes? = nil,
        identityType: PinpointEmailClientTypes.IdentityType? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.identityType = identityType
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

/// A request to delete a configuration set.
public struct DeleteConfigurationSetInput {
    /// The name of the configuration set that you want to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetOutput {

    public init() { }
}

/// A request to delete an event destination from a configuration set.
public struct DeleteConfigurationSetEventDestinationInput {
    /// The name of the configuration set that contains the event destination that you want to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination that you want to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetEventDestinationOutput {

    public init() { }
}

/// A request to delete a dedicated IP pool.
public struct DeleteDedicatedIpPoolInput {
    /// The name of the dedicated IP pool that you want to delete.
    /// This member is required.
    public var poolName: Swift.String?

    public init(
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteDedicatedIpPoolOutput {

    public init() { }
}

/// A request to delete an existing email identity. When you delete an identity, you lose the ability to use Amazon Pinpoint to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
public struct DeleteEmailIdentityInput {
    /// The identity (that is, the email address or domain) that you want to delete from your Amazon Pinpoint account.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityOutput {

    public init() { }
}

/// A request to obtain information about the email-sending capabilities of your Amazon Pinpoint account.
public struct GetAccountInput {

    public init() { }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
    public struct SendQuota {
        /// The maximum number of emails that you can send in the current AWS Region over a 24-hour period. This value is also called your sending quota.
        public var max24HourSend: Swift.Double
        /// The maximum number of emails that you can send per second in the current AWS Region. This value is also called your maximum sending rate or your maximum TPS (transactions per second) rate.
        public var maxSendRate: Swift.Double
        /// The number of emails sent from your Amazon Pinpoint account in the current AWS Region over the past 24 hours.
        public var sentLast24Hours: Swift.Double

        public init(
            max24HourSend: Swift.Double = 0.0,
            maxSendRate: Swift.Double = 0.0,
            sentLast24Hours: Swift.Double = 0.0
        )
        {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }
    }

}

/// A list of details about the email-sending capabilities of your Amazon Pinpoint account in the current AWS Region.
public struct GetAccountOutput {
    /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.
    public var dedicatedIpAutoWarmupEnabled: Swift.Bool
    /// The reputation status of your Amazon Pinpoint account. The status can be one of the following:
    ///
    /// * HEALTHY – There are no reputation-related issues that currently impact your account.
    ///
    /// * PROBATION – We've identified some issues with your Amazon Pinpoint account. We're placing your account under review while you work on correcting these issues.
    ///
    /// * SHUTDOWN – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.
    public var enforcementStatus: Swift.String?
    /// Indicates whether or not your account has production access in the current AWS Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool
    /// An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
    public var sendQuota: PinpointEmailClientTypes.SendQuota?
    /// Indicates whether or not email sending is enabled for your Amazon Pinpoint account in the current AWS Region.
    public var sendingEnabled: Swift.Bool

    public init(
        dedicatedIpAutoWarmupEnabled: Swift.Bool = false,
        enforcementStatus: Swift.String? = nil,
        productionAccessEnabled: Swift.Bool = false,
        sendQuota: PinpointEmailClientTypes.SendQuota? = nil,
        sendingEnabled: Swift.Bool = false
    )
    {
        self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
        self.enforcementStatus = enforcementStatus
        self.productionAccessEnabled = productionAccessEnabled
        self.sendQuota = sendQuota
        self.sendingEnabled = sendingEnabled
    }
}

/// A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
public struct GetBlacklistReportsInput {
    /// A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or Amazon SES.
    /// This member is required.
    public var blacklistItemNames: [Swift.String]?

    public init(
        blacklistItemNames: [Swift.String]? = nil
    )
    {
        self.blacklistItemNames = blacklistItemNames
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    public struct BlacklistEntry {
        /// Additional information about the blacklisting event, as provided by the blacklist maintainer.
        public var description: Swift.String?
        /// The time when the blacklisting event occurred, shown in Unix time format.
        public var listingTime: Foundation.Date?
        /// The name of the blacklist that the IP address appears on.
        public var rblName: Swift.String?

        public init(
            description: Swift.String? = nil,
            listingTime: Foundation.Date? = nil,
            rblName: Swift.String? = nil
        )
        {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }
    }

}

/// An object that contains information about blacklist events.
public struct GetBlacklistReportsOutput {
    /// An object that contains information about a blacklist that one of your dedicated IP addresses appears on.
    /// This member is required.
    public var blacklistReport: [Swift.String: [PinpointEmailClientTypes.BlacklistEntry]]?

    public init(
        blacklistReport: [Swift.String: [PinpointEmailClientTypes.BlacklistEntry]]? = nil
    )
    {
        self.blacklistReport = blacklistReport
    }
}

/// A request to obtain information about a configuration set.
public struct GetConfigurationSetInput {
    /// The name of the configuration set that you want to obtain more information about.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// Information about a configuration set.
public struct GetConfigurationSetOutput {
    /// The name of the configuration set.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
    public var sendingOptions: PinpointEmailClientTypes.SendingOptions?
    /// An array of objects that define the tags (keys and values) that are associated with the configuration set.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: PinpointEmailClientTypes.TrackingOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        deliveryOptions: PinpointEmailClientTypes.DeliveryOptions? = nil,
        reputationOptions: PinpointEmailClientTypes.ReputationOptions? = nil,
        sendingOptions: PinpointEmailClientTypes.SendingOptions? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        trackingOptions: PinpointEmailClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

/// A request to obtain information about the event destinations for a configuration set.
public struct GetConfigurationSetEventDestinationsInput {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

extension PinpointEmailClientTypes {
    /// In Amazon Pinpoint, events include message sends, deliveries, opens, clicks, bounces, and complaints. Event destinations are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    public struct EventDestination {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination?
        /// The types of events that Amazon Pinpoint sends to the specified event destinations.
        /// This member is required.
        public var matchingEventTypes: [PinpointEmailClientTypes.EventType]?
        /// A name that identifies the event destination.
        /// This member is required.
        public var name: Swift.String?
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public var pinpointDestination: PinpointEmailClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: PinpointEmailClientTypes.SnsDestination?

        public init(
            cloudWatchDestination: PinpointEmailClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: PinpointEmailClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointEmailClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            pinpointDestination: PinpointEmailClientTypes.PinpointDestination? = nil,
            snsDestination: PinpointEmailClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

/// Information about an event destination for a configuration set.
public struct GetConfigurationSetEventDestinationsOutput {
    /// An array that includes all of the events destinations that have been configured for the configuration set.
    public var eventDestinations: [PinpointEmailClientTypes.EventDestination]?

    public init(
        eventDestinations: [PinpointEmailClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

/// A request to obtain more information about a dedicated IP address.
public struct GetDedicatedIpInput {
    /// The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.
    /// This member is required.
    public var ip: Swift.String?

    public init(
        ip: Swift.String? = nil
    )
    {
        self.ip = ip
    }
}

extension PinpointEmailClientTypes {

    /// The warmup status of a dedicated IP.
    public enum WarmupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case done
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmupStatus] {
            return [
                .done,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .done: return "DONE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// Contains information about a dedicated IP address that is associated with your Amazon Pinpoint account.
    public struct DedicatedIp {
        /// An IP address that is reserved for use by your Amazon Pinpoint account.
        /// This member is required.
        public var ip: Swift.String?
        /// The name of the dedicated IP pool that the IP address is associated with.
        public var poolName: Swift.String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.
        /// This member is required.
        public var warmupPercentage: Swift.Int?
        /// The warm-up status of a dedicated IP address. The status can have one of the following values:
        ///
        /// * IN_PROGRESS – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.
        ///
        /// * DONE – The dedicated IP warm-up process is complete, and the IP address is ready to use.
        /// This member is required.
        public var warmupStatus: PinpointEmailClientTypes.WarmupStatus?

        public init(
            ip: Swift.String? = nil,
            poolName: Swift.String? = nil,
            warmupPercentage: Swift.Int? = nil,
            warmupStatus: PinpointEmailClientTypes.WarmupStatus? = nil
        )
        {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }
    }

}

/// Information about a dedicated IP address.
public struct GetDedicatedIpOutput {
    /// An object that contains information about a dedicated IP address.
    public var dedicatedIp: PinpointEmailClientTypes.DedicatedIp?

    public init(
        dedicatedIp: PinpointEmailClientTypes.DedicatedIp? = nil
    )
    {
        self.dedicatedIp = dedicatedIp
    }
}

/// A request to obtain more information about dedicated IP pools.
public struct GetDedicatedIpsInput {
    /// A token returned from a previous call to GetDedicatedIps to indicate the position of the dedicated IP pool in the list of IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to GetDedicatedIpsRequest. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The name of the IP pool that the dedicated IP address is associated with.
    public var poolName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        poolName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.poolName = poolName
    }
}

/// Information about the dedicated IP addresses that are associated with your Amazon Pinpoint account.
public struct GetDedicatedIpsOutput {
    /// A list of dedicated IP addresses that are reserved for use by your Amazon Pinpoint account.
    public var dedicatedIps: [PinpointEmailClientTypes.DedicatedIp]?
    /// A token that indicates that there are additional dedicated IP addresses to list. To view additional addresses, issue another request to GetDedicatedIps, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        dedicatedIps: [PinpointEmailClientTypes.DedicatedIp]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIps = dedicatedIps
        self.nextToken = nextToken
    }
}

/// Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct GetDeliverabilityDashboardOptionsInput {

    public init() { }
}

extension PinpointEmailClientTypes {

    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public enum DeliverabilityDashboardAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case disabled
        case pendingExpiration
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityDashboardAccountStatus] {
            return [
                .active,
                .disabled,
                .pendingExpiration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .pendingExpiration: return "PENDING_EXPIRATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain (PutDeliverabilityDashboardOption operation).
    public struct InboxPlacementTrackingOption {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public var global: Swift.Bool
        /// An array of strings, one for each major email provider that the inbox placement data applies to.
        public var trackedIsps: [Swift.String]?

        public init(
            global: Swift.Bool = false,
            trackedIsps: [Swift.String]? = nil
        )
        {
            self.global = global
            self.trackedIsps = trackedIsps
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    public struct DomainDeliverabilityTrackingOption {
        /// A verified domain that’s associated with your AWS account and currently has an active Deliverability dashboard subscription.
        public var domain: Swift.String?
        /// An object that contains information about the inbox placement data settings for the domain.
        public var inboxPlacementTrackingOption: PinpointEmailClientTypes.InboxPlacementTrackingOption?
        /// The date, in Unix time format, when you enabled the Deliverability dashboard for the domain.
        public var subscriptionStartDate: Foundation.Date?

        public init(
            domain: Swift.String? = nil,
            inboxPlacementTrackingOption: PinpointEmailClientTypes.InboxPlacementTrackingOption? = nil,
            subscriptionStartDate: Foundation.Date? = nil
        )
        {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }
    }

}

/// An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account.
public struct GetDeliverabilityDashboardOptionsOutput {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public var accountStatus: PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus?
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at the end of the current calendar month.
    public var activeSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
    /// Specifies whether the Deliverability dashboard is enabled for your Amazon Pinpoint account. If this value is true, the dashboard is enabled.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that's scheduled to expire at the end of the current calendar month.
    public var pendingExpirationSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?
    /// The date, in Unix time format, when your current subscription to the Deliverability dashboard is scheduled to expire, if your subscription is scheduled to expire at the end of the current calendar month. This value is null if you have an active subscription that isn’t due to expire at the end of the month.
    public var subscriptionExpiryDate: Foundation.Date?

    public init(
        accountStatus: PinpointEmailClientTypes.DeliverabilityDashboardAccountStatus? = nil,
        activeSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        dashboardEnabled: Swift.Bool = false,
        pendingExpirationSubscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        subscriptionExpiryDate: Foundation.Date? = nil
    )
    {
        self.accountStatus = accountStatus
        self.activeSubscribedDomains = activeSubscribedDomains
        self.dashboardEnabled = dashboardEnabled
        self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
        self.subscriptionExpiryDate = subscriptionExpiryDate
    }
}

/// A request to retrieve the results of a predictive inbox placement test.
public struct GetDeliverabilityTestReportInput {
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains metadata related to a predictive inbox placement test.
    public struct DeliverabilityTestReport {
        /// The date and time when the predictive inbox placement test was created, in Unix time format.
        public var createDate: Foundation.Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public var deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public var fromEmailAddress: Swift.String?
        /// A unique string that identifies the predictive inbox placement test.
        public var reportId: Swift.String?
        /// A name that helps you identify a predictive inbox placement test report.
        public var reportName: Swift.String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public var subject: Swift.String?

        public init(
            createDate: Foundation.Date? = nil,
            deliverabilityTestStatus: PinpointEmailClientTypes.DeliverabilityTestStatus? = nil,
            fromEmailAddress: Swift.String? = nil,
            reportId: Swift.String? = nil,
            reportName: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that contains inbox placement data for an email provider.
    public struct PlacementStatistics {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail (DKIM) during the predictive inbox placement test.
        public var dkimPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public var inboxPercentage: Swift.Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the predictive inbox placement test.
        public var missingPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during the predictive inbox placement test.
        public var spamPercentage: Swift.Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework (SPF) during the predictive inbox placement test.
        public var spfPercentage: Swift.Double?

        public init(
            dkimPercentage: Swift.Double? = nil,
            inboxPercentage: Swift.Double? = nil,
            missingPercentage: Swift.Double? = nil,
            spamPercentage: Swift.Double? = nil,
            spfPercentage: Swift.Double? = nil
        )
        {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    public struct IspPlacement {
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public var placementStatistics: PinpointEmailClientTypes.PlacementStatistics?

        public init(
            ispName: Swift.String? = nil,
            placementStatistics: PinpointEmailClientTypes.PlacementStatistics? = nil
        )
        {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }
    }

}

/// The results of the predictive inbox placement test.
public struct GetDeliverabilityTestReportOutput {
    /// An object that contains the results of the predictive inbox placement test.
    /// This member is required.
    public var deliverabilityTestReport: PinpointEmailClientTypes.DeliverabilityTestReport?
    /// An object that describes how the test email was handled by several email providers, including Gmail, Hotmail, Yahoo, AOL, and others.
    /// This member is required.
    public var ispPlacements: [PinpointEmailClientTypes.IspPlacement]?
    /// An object that contains the message that you sent when you performed this predictive inbox placement test.
    public var message: Swift.String?
    /// An object that specifies how many test messages that were sent during the predictive inbox placement test were delivered to recipients' inboxes, how many were sent to recipients' spam folders, and how many weren't delivered.
    /// This member is required.
    public var overallPlacement: PinpointEmailClientTypes.PlacementStatistics?
    /// An array of objects that define the tags (keys and values) that are associated with the predictive inbox placement test.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        deliverabilityTestReport: PinpointEmailClientTypes.DeliverabilityTestReport? = nil,
        ispPlacements: [PinpointEmailClientTypes.IspPlacement]? = nil,
        message: Swift.String? = nil,
        overallPlacement: PinpointEmailClientTypes.PlacementStatistics? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.deliverabilityTestReport = deliverabilityTestReport
        self.ispPlacements = ispPlacements
        self.message = message
        self.overallPlacement = overallPlacement
        self.tags = tags
    }
}

/// Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignInput {
    /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
    /// This member is required.
    public var campaignId: Swift.String?

    public init(
        campaignId: Swift.String? = nil
    )
    {
        self.campaignId = campaignId
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
    public struct DomainDeliverabilityCampaign {
        /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
        public var campaignId: Swift.String?
        /// The percentage of email messages that were deleted by recipients, without being opened first. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var deleteRate: Swift.Double?
        /// The major email providers who handled the email message.
        public var esps: [Swift.String]?
        /// The first time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var firstSeenDateTime: Foundation.Date?
        /// The verified email address that the email message was sent from.
        public var fromAddress: Swift.String?
        /// The URL of an image that contains a snapshot of the email message that was sent.
        public var imageUrl: Swift.String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public var inboxCount: Swift.Int?
        /// The last time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var lastSeenDateTime: Foundation.Date?
        /// The projected number of recipients that the email message was sent to.
        public var projectedVolume: Swift.Int?
        /// The percentage of email messages that were opened and then deleted by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readDeleteRate: Swift.Double?
        /// The percentage of email messages that were opened by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readRate: Swift.Double?
        /// The IP addresses that were used to send the email message.
        public var sendingIps: [Swift.String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail folders.
        public var spamCount: Swift.Int?
        /// The subject line, or title, of the email message.
        public var subject: Swift.String?

        public init(
            campaignId: Swift.String? = nil,
            deleteRate: Swift.Double? = nil,
            esps: [Swift.String]? = nil,
            firstSeenDateTime: Foundation.Date? = nil,
            fromAddress: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            inboxCount: Swift.Int? = nil,
            lastSeenDateTime: Foundation.Date? = nil,
            projectedVolume: Swift.Int? = nil,
            readDeleteRate: Swift.Double? = nil,
            readRate: Swift.Double? = nil,
            sendingIps: [Swift.String]? = nil,
            spamCount: Swift.Int? = nil,
            subject: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }
    }

}

/// An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignOutput {
    /// An object that contains the deliverability data for the campaign.
    /// This member is required.
    public var domainDeliverabilityCampaign: PinpointEmailClientTypes.DomainDeliverabilityCampaign?

    public init(
        domainDeliverabilityCampaign: PinpointEmailClientTypes.DomainDeliverabilityCampaign? = nil
    )
    {
        self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
    }
}

/// A request to obtain deliverability metrics for a domain.
public struct GetDomainStatisticsReportInput {
    /// The domain that you want to obtain deliverability metrics for.
    /// This member is required.
    public var domain: Swift.String?
    /// The last day (in Unix time) that you want to obtain domain deliverability metrics for. The EndDate that you specify has to be less than or equal to 30 days after the StartDate.
    /// This member is required.
    public var endDate: Foundation.Date?
    /// The first day (in Unix time) that you want to obtain domain deliverability metrics for.
    /// This member is required.
    public var startDate: Foundation.Date?

    public init(
        domain: Swift.String? = nil,
        endDate: Foundation.Date? = nil,
        startDate: Foundation.Date? = nil
    )
    {
        self.domain = domain
        self.endDate = endDate
        self.startDate = startDate
    }
}

extension PinpointEmailClientTypes {
    /// An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    public struct DomainIspPlacement {
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init(
            inboxPercentage: Swift.Double? = nil,
            inboxRawCount: Swift.Int? = nil,
            ispName: Swift.String? = nil,
            spamPercentage: Swift.Double? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that contains information about the amount of email that was delivered to recipients.
    public struct VolumeStatistics {
        /// The total number of emails that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' inboxes.
        public var projectedInbox: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' spam or junk mail folders.
        public var projectedSpam: Swift.Int?
        /// The total number of emails that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init(
            inboxRawCount: Swift.Int? = nil,
            projectedInbox: Swift.Int? = nil,
            projectedSpam: Swift.Int? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that contains information about the volume of email sent on each day of the analysis period.
    public struct DailyVolume {
        /// An object that contains inbox placement metrics for a specified day in the analysis period, broken out by the recipient's email provider.
        public var domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public var startDate: Foundation.Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis period.
        public var volumeStatistics: PinpointEmailClientTypes.VolumeStatistics?

        public init(
            domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]? = nil,
            startDate: Foundation.Date? = nil,
            volumeStatistics: PinpointEmailClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension PinpointEmailClientTypes {
    /// An object that contains information about email that was sent from the selected domain.
    public struct OverallVolume {
        /// An object that contains inbox and junk mail placement metrics for individual email providers.
        public var domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their recipients.
        public var readRatePercent: Swift.Double?
        /// An object that contains information about the numbers of messages that arrived in recipients' inboxes and junk mail folders.
        public var volumeStatistics: PinpointEmailClientTypes.VolumeStatistics?

        public init(
            domainIspPlacements: [PinpointEmailClientTypes.DomainIspPlacement]? = nil,
            readRatePercent: Swift.Double? = nil,
            volumeStatistics: PinpointEmailClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }
    }

}

/// An object that includes statistics that are related to the domain that you specified.
public struct GetDomainStatisticsReportOutput {
    /// An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the StartDate and ending on the EndDate.
    /// This member is required.
    public var dailyVolumes: [PinpointEmailClientTypes.DailyVolume]?
    /// An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the StartDate to the EndDate.
    /// This member is required.
    public var overallVolume: PinpointEmailClientTypes.OverallVolume?

    public init(
        dailyVolumes: [PinpointEmailClientTypes.DailyVolume]? = nil,
        overallVolume: PinpointEmailClientTypes.OverallVolume? = nil
    )
    {
        self.dailyVolumes = dailyVolumes
        self.overallVolume = overallVolume
    }
}

/// A request to return details about an email identity.
public struct GetEmailIdentityInput {
    /// The email identity that you want to retrieve details for.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

extension PinpointEmailClientTypes {

    /// The action that you want Amazon Pinpoint to take if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public enum BehaviorOnMxFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rejectMessage
        case useDefaultValue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMxFailure] {
            return [
                .rejectMessage,
                .useDefaultValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rejectMessage: return "REJECT_MESSAGE"
            case .useDefaultValue: return "USE_DEFAULT_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {

    /// The status of the MAIL FROM domain. This status can have the following values:
    ///
    /// * PENDING – Amazon Pinpoint hasn't started searching for the MX record yet.
    ///
    /// * SUCCESS – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.
    ///
    /// * FAILED – Amazon Pinpoint can't find the required MX record, or the record no longer exists.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.
    public enum MailFromDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [MailFromDomainStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointEmailClientTypes {
    /// A list of attributes that are associated with a MAIL FROM domain.
    public struct MailFromAttributes {
        /// The action that Amazon Pinpoint to takes if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        /// This member is required.
        public var behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure?
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The status of the MAIL FROM domain. This status can have the following values:
        ///
        /// * PENDING – Amazon Pinpoint hasn't started searching for the MX record yet.
        ///
        /// * SUCCESS – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.
        ///
        /// * FAILED – Amazon Pinpoint can't find the required MX record, or the record no longer exists.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.
        /// This member is required.
        public var mailFromDomainStatus: PinpointEmailClientTypes.MailFromDomainStatus?

        public init(
            behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: PinpointEmailClientTypes.MailFromDomainStatus? = nil
        )
        {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

/// Details about an email identity.
public struct GetEmailIdentityOutput {
    /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
    public var dkimAttributes: PinpointEmailClientTypes.DkimAttributes?
    /// The feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
    public var feedbackForwardingStatus: Swift.Bool
    /// The email identity type.
    public var identityType: PinpointEmailClientTypes.IdentityType?
    /// An object that contains information about the Mail-From attributes for the email identity.
    public var mailFromAttributes: PinpointEmailClientTypes.MailFromAttributes?
    /// An array of objects that define the tags (keys and values) that are associated with the email identity.
    public var tags: [PinpointEmailClientTypes.Tag]?
    /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init(
        dkimAttributes: PinpointEmailClientTypes.DkimAttributes? = nil,
        feedbackForwardingStatus: Swift.Bool = false,
        identityType: PinpointEmailClientTypes.IdentityType? = nil,
        mailFromAttributes: PinpointEmailClientTypes.MailFromAttributes? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.feedbackForwardingStatus = feedbackForwardingStatus
        self.identityType = identityType
        self.mailFromAttributes = mailFromAttributes
        self.tags = tags
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

/// A request to obtain a list of configuration sets for your Amazon Pinpoint account in the current AWS Region.
public struct ListConfigurationSetsInput {
    /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListConfigurationSets. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of configuration sets in your Amazon Pinpoint account in the current AWS Region.
public struct ListConfigurationSetsOutput {
    /// An array that contains all of the configuration sets in your Amazon Pinpoint account in the current AWS Region.
    public var configurationSets: [Swift.String]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListConfigurationSets, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

/// A request to obtain a list of dedicated IP pools.
public struct ListDedicatedIpPoolsInput {
    /// A token returned from a previous call to ListDedicatedIpPools to indicate the position in the list of dedicated IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDedicatedIpPools. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of dedicated IP pools.
public struct ListDedicatedIpPoolsOutput {
    /// A list of all of the dedicated IP pools that are associated with your Amazon Pinpoint account.
    public var dedicatedIpPools: [Swift.String]?
    /// A token that indicates that there are additional IP pools to list. To view additional IP pools, issue another request to ListDedicatedIpPools, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        dedicatedIpPools: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIpPools = dedicatedIpPools
        self.nextToken = nextToken
    }
}

/// A request to list all of the predictive inbox placement tests that you've performed.
public struct ListDeliverabilityTestReportsInput {
    /// A token returned from a previous call to ListDeliverabilityTestReports to indicate the position in the list of predictive inbox placement tests.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDeliverabilityTestReports. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
public struct ListDeliverabilityTestReportsOutput {
    /// An object that contains a lists of predictive inbox placement tests that you've performed.
    /// This member is required.
    public var deliverabilityTestReports: [PinpointEmailClientTypes.DeliverabilityTestReport]?
    /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        deliverabilityTestReports: [PinpointEmailClientTypes.DeliverabilityTestReport]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverabilityTestReports = deliverabilityTestReports
        self.nextToken = nextToken
    }
}

/// Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (PutDeliverabilityDashboardOption operation) for the domain.
public struct ListDomainDeliverabilityCampaignsInput {
    /// The last day, in Unix time format, that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the StartDate parameter.
    /// This member is required.
    public var endDate: Foundation.Date?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of a campaign in the list of campaigns.
    public var nextToken: Swift.String?
    /// The maximum number of results to include in response to a single call to the ListDomainDeliverabilityCampaigns operation. If the number of results is larger than the number that you specify in this parameter, the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The first day, in Unix time format, that you want to obtain deliverability data for.
    /// This member is required.
    public var startDate: Foundation.Date?
    /// The domain to obtain deliverability data for.
    /// This member is required.
    public var subscribedDomain: Swift.String?

    public init(
        endDate: Foundation.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        startDate: Foundation.Date? = nil,
        subscribedDomain: Swift.String? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startDate = startDate
        self.subscribedDomain = subscribedDomain
    }
}

/// An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (PutDeliverabilityDashboardOption operation) for the domain.
public struct ListDomainDeliverabilityCampaignsOutput {
    /// An array of responses, one for each campaign that used the domain to send email during the specified time range.
    /// This member is required.
    public var domainDeliverabilityCampaigns: [PinpointEmailClientTypes.DomainDeliverabilityCampaign]?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of the campaign in the list of campaigns.
    public var nextToken: Swift.String?

    public init(
        domainDeliverabilityCampaigns: [PinpointEmailClientTypes.DomainDeliverabilityCampaign]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
        self.nextToken = nextToken
    }
}

/// A request to list all of the email identities associated with your Amazon Pinpoint account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
public struct ListEmailIdentitiesInput {
    /// A token returned from a previous call to ListEmailIdentities to indicate the position in the list of identities.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailIdentities. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

extension PinpointEmailClientTypes {
    /// Information about an email identity.
    public struct IdentityInfo {
        /// The address or domain of the identity.
        public var identityName: Swift.String?
        /// The email identity type. The identity type can be one of the following:
        ///
        /// * EMAIL_ADDRESS – The identity is an email address.
        ///
        /// * DOMAIN – The identity is a domain.
        ///
        /// * MANAGED_DOMAIN – The identity is a domain that is managed by AWS.
        public var identityType: PinpointEmailClientTypes.IdentityType?
        /// Indicates whether or not you can send email from the identity. In Amazon Pinpoint, an identity is an email address or domain that you send email from. Before you can send email from an identity, you have to demostrate that you own the identity, and that you authorize Amazon Pinpoint to send email from that identity.
        public var sendingEnabled: Swift.Bool

        public init(
            identityName: Swift.String? = nil,
            identityType: PinpointEmailClientTypes.IdentityType? = nil,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
        }
    }

}

/// A list of all of the identities that you've attempted to verify for use with Amazon Pinpoint, regardless of whether or not those identities were successfully verified.
public struct ListEmailIdentitiesOutput {
    /// An array that includes all of the identities associated with your Amazon Pinpoint account.
    public var emailIdentities: [PinpointEmailClientTypes.IdentityInfo]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListEmailIdentities, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        emailIdentities: [PinpointEmailClientTypes.IdentityInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.emailIdentities = emailIdentities
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// An array that lists all the tags that are associated with the resource. Each tag consists of a required tag key (Key) and an associated tag value (Value)
    /// This member is required.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

/// A request to enable or disable the automatic IP address warm-up feature.
public struct PutAccountDedicatedIpWarmupAttributesInput {
    /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon Pinpoint account in the current AWS Region. Set to true to enable the automatic warm-up feature, or set to false to disable it.
    public var autoWarmupEnabled: Swift.Bool?

    public init(
        autoWarmupEnabled: Swift.Bool? = false
    )
    {
        self.autoWarmupEnabled = autoWarmupEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDedicatedIpWarmupAttributesOutput {

    public init() { }
}

/// A request to change the ability of your account to send email.
public struct PutAccountSendingAttributesInput {
    /// Enables or disables your account's ability to send email. Set to true to enable email sending, or set to false to disable email sending. If AWS paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.
    public var sendingEnabled: Swift.Bool?

    public init(
        sendingEnabled: Swift.Bool? = false
    )
    {
        self.sendingEnabled = sendingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSendingAttributesOutput {

    public init() { }
}

/// A request to associate a configuration set with a dedicated IP pool.
public struct PutConfigurationSetDeliveryOptionsInput {
    /// The name of the configuration set that you want to associate with a dedicated IP pool.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the dedicated IP pool that you want to associate with the configuration set.
    public var sendingPoolName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public var tlsPolicy: PinpointEmailClientTypes.TlsPolicy?

    public init(
        configurationSetName: Swift.String? = nil,
        sendingPoolName: Swift.String? = nil,
        tlsPolicy: PinpointEmailClientTypes.TlsPolicy? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingPoolName = sendingPoolName
        self.tlsPolicy = tlsPolicy
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutput {

    public init() { }
}

/// A request to enable or disable tracking of reputation metrics for a configuration set.
public struct PutConfigurationSetReputationOptionsInput {
    /// The name of the configuration set that you want to enable or disable reputation metric tracking for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    public var reputationMetricsEnabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        reputationMetricsEnabled: Swift.Bool? = false
    )
    {
        self.configurationSetName = configurationSetName
        self.reputationMetricsEnabled = reputationMetricsEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetReputationOptionsOutput {

    public init() { }
}

/// A request to enable or disable the ability of Amazon Pinpoint to send emails that use a specific configuration set.
public struct PutConfigurationSetSendingOptionsInput {
    /// The name of the configuration set that you want to enable or disable email sending for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    public var sendingEnabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        sendingEnabled: Swift.Bool? = false
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingEnabled = sendingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSendingOptionsOutput {

    public init() { }
}

/// A request to add a custom domain for tracking open and click events to a configuration set.
public struct PutConfigurationSetTrackingOptionsInput {
    /// The name of the configuration set that you want to add a custom tracking domain to.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The domain that you want to use to track open and click events.
    public var customRedirectDomain: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        customRedirectDomain: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.customRedirectDomain = customRedirectDomain
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetTrackingOptionsOutput {

    public init() { }
}

/// A request to move a dedicated IP address to a dedicated IP pool.
public struct PutDedicatedIpInPoolInput {
    /// The name of the IP pool that you want to add the dedicated IP address to. You have to specify an IP pool that already exists.
    /// This member is required.
    public var destinationPoolName: Swift.String?
    /// The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Pinpoint account.
    /// This member is required.
    public var ip: Swift.String?

    public init(
        destinationPoolName: Swift.String? = nil,
        ip: Swift.String? = nil
    )
    {
        self.destinationPoolName = destinationPoolName
        self.ip = ip
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpInPoolOutput {

    public init() { }
}

/// A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
public struct PutDedicatedIpWarmupAttributesInput {
    /// The dedicated IP address that you want to update the warm-up attributes for.
    /// This member is required.
    public var ip: Swift.String?
    /// The warm-up percentage that you want to associate with the dedicated IP address.
    /// This member is required.
    public var warmupPercentage: Swift.Int?

    public init(
        ip: Swift.String? = nil,
        warmupPercentage: Swift.Int? = nil
    )
    {
        self.ip = ip
        self.warmupPercentage = warmupPercentage
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpWarmupAttributesOutput {

    public init() { }
}

/// Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct PutDeliverabilityDashboardOptionInput {
    /// Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the dashboard, set this value to true.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool?
    /// An array of objects, one for each verified domain that you use to send email and enabled the Deliverability dashboard for.
    public var subscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]?

    public init(
        dashboardEnabled: Swift.Bool? = false,
        subscribedDomains: [PinpointEmailClientTypes.DomainDeliverabilityTrackingOption]? = nil
    )
    {
        self.dashboardEnabled = dashboardEnabled
        self.subscribedDomains = subscribedDomains
    }
}

/// A response that indicates whether the Deliverability dashboard is enabled for your Amazon Pinpoint account.
public struct PutDeliverabilityDashboardOptionOutput {

    public init() { }
}

/// A request to enable or disable DKIM signing of email that you send from an email identity.
public struct PutEmailIdentityDkimAttributesInput {
    /// The email identity that you want to change the DKIM settings for.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. When you set this value to false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
    public var signingEnabled: Swift.Bool?

    public init(
        emailIdentity: Swift.String? = nil,
        signingEnabled: Swift.Bool? = false
    )
    {
        self.emailIdentity = emailIdentity
        self.signingEnabled = signingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityDkimAttributesOutput {

    public init() { }
}

/// A request to set the attributes that control how bounce and complaint events are processed.
public struct PutEmailIdentityFeedbackAttributesInput {
    /// Sets the feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
    public var emailForwardingEnabled: Swift.Bool?
    /// The email identity that you want to configure bounce and complaint feedback forwarding for.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailForwardingEnabled: Swift.Bool? = false,
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailForwardingEnabled = emailForwardingEnabled
        self.emailIdentity = emailIdentity
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityFeedbackAttributesOutput {

    public init() { }
}

/// A request to configure the custom MAIL FROM domain for a verified identity.
public struct PutEmailIdentityMailFromAttributesInput {
    /// The action that you want Amazon Pinpoint to take if it can't read the required MX record when you send an email. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure?
    /// The verified email identity that you want to set up the custom MAIL FROM domain for.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria:
    ///
    /// * It has to be a subdomain of the verified identity.
    ///
    /// * It can't be used to receive email.
    ///
    /// * It can't be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.
    public var mailFromDomain: Swift.String?

    public init(
        behaviorOnMxFailure: PinpointEmailClientTypes.BehaviorOnMxFailure? = nil,
        emailIdentity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMxFailure = behaviorOnMxFailure
        self.emailIdentity = emailIdentity
        self.mailFromDomain = mailFromDomain
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityMailFromAttributesOutput {

    public init() { }
}

extension PinpointEmailClientTypes {
    /// An object that describes the recipients for an email.
    public struct Destination {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email.
        public var bccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for the email.
        public var ccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "To" recipients for the email.
        public var toAddresses: [Swift.String]?

        public init(
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension PinpointEmailClientTypes {
    /// Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    public struct MessageTag {
        /// The name of the message tag. The message tag name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the message tag. The message tag value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

/// A request to send an email message.
public struct SendEmailInput {
    /// The name of the configuration set that you want to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can send either a Simple message or a Raw message.
    /// This member is required.
    public var content: PinpointEmailClientTypes.EmailContent?
    /// An object that contains the recipients of the email message.
    /// This member is required.
    public var destination: PinpointEmailClientTypes.Destination?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var emailTags: [PinpointEmailClientTypes.MessageTag]?
    /// The address that Amazon Pinpoint should send bounce and complaint notifications to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// The email address that you want to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init(
        configurationSetName: Swift.String? = nil,
        content: PinpointEmailClientTypes.EmailContent? = nil,
        destination: PinpointEmailClientTypes.Destination? = nil,
        emailTags: [PinpointEmailClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.fromEmailAddress = fromEmailAddress
        self.replyToAddresses = replyToAddresses
    }
}

/// A unique message ID that you receive when Amazon Pinpoint accepts an email for sending.
public struct SendEmailOutput {
    /// A unique identifier for the message that is generated when Amazon Pinpoint accepts the message. It is possible for Amazon Pinpoint to accept a message without sending it. This can happen when the message you're trying to send has an attachment doesn't pass a virus check, or when you send a templated email that contains invalid personalization content, for example.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    /// This member is required.
    public var tags: [PinpointEmailClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [PinpointEmailClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value. To remove more than one tag from the resource, append the TagKeys parameter and argument for each additional tag to remove, separated by an ampersand. For example: /v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// A request to change the settings for an event destination for a configuration set.
public struct UpdateConfigurationSetEventDestinationInput {
    /// The name of the configuration set that contains the event destination that you want to modify.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: PinpointEmailClientTypes.EventDestinationDefinition?
    /// The name of the event destination that you want to modify.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointEmailClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateConfigurationSetEventDestinationOutput {

    public init() { }
}

extension CreateConfigurationSetInput {

    static func urlPathProvider(_ value: CreateConfigurationSetInput) -> Swift.String? {
        return "/v1/email/configuration-sets"
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: CreateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension CreateDedicatedIpPoolInput {

    static func urlPathProvider(_ value: CreateDedicatedIpPoolInput) -> Swift.String? {
        return "/v1/email/dedicated-ip-pools"
    }
}

extension CreateDeliverabilityTestReportInput {

    static func urlPathProvider(_ value: CreateDeliverabilityTestReportInput) -> Swift.String? {
        return "/v1/email/deliverability-dashboard/test"
    }
}

extension CreateEmailIdentityInput {

    static func urlPathProvider(_ value: CreateEmailIdentityInput) -> Swift.String? {
        return "/v1/email/identities"
    }
}

extension DeleteConfigurationSetInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

extension DeleteConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension DeleteDedicatedIpPoolInput {

    static func urlPathProvider(_ value: DeleteDedicatedIpPoolInput) -> Swift.String? {
        guard let poolName = value.poolName else {
            return nil
        }
        return "/v1/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

extension DeleteEmailIdentityInput {

    static func urlPathProvider(_ value: DeleteEmailIdentityInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

extension GetAccountInput {

    static func urlPathProvider(_ value: GetAccountInput) -> Swift.String? {
        return "/v1/email/account"
    }
}

extension GetBlacklistReportsInput {

    static func urlPathProvider(_ value: GetBlacklistReportsInput) -> Swift.String? {
        return "/v1/email/deliverability-dashboard/blacklist-report"
    }
}

extension GetBlacklistReportsInput {

    static func queryItemProvider(_ value: GetBlacklistReportsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let blacklistItemNames = value.blacklistItemNames else {
            let message = "Creating a URL Query Item failed. blacklistItemNames is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        blacklistItemNames.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "BlacklistItemNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension GetConfigurationSetInput {

    static func urlPathProvider(_ value: GetConfigurationSetInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

extension GetConfigurationSetEventDestinationsInput {

    static func urlPathProvider(_ value: GetConfigurationSetEventDestinationsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension GetDedicatedIpInput {

    static func urlPathProvider(_ value: GetDedicatedIpInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())"
    }
}

extension GetDedicatedIpsInput {

    static func urlPathProvider(_ value: GetDedicatedIpsInput) -> Swift.String? {
        return "/v1/email/dedicated-ips"
    }
}

extension GetDedicatedIpsInput {

    static func queryItemProvider(_ value: GetDedicatedIpsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        if let poolName = value.poolName {
            let poolNameQueryItem = Smithy.URIQueryItem(name: "PoolName".urlPercentEncoding(), value: Swift.String(poolName).urlPercentEncoding())
            items.append(poolNameQueryItem)
        }
        return items
    }
}

extension GetDeliverabilityDashboardOptionsInput {

    static func urlPathProvider(_ value: GetDeliverabilityDashboardOptionsInput) -> Swift.String? {
        return "/v1/email/deliverability-dashboard"
    }
}

extension GetDeliverabilityTestReportInput {

    static func urlPathProvider(_ value: GetDeliverabilityTestReportInput) -> Swift.String? {
        guard let reportId = value.reportId else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/test-reports/\(reportId.urlPercentEncoding())"
    }
}

extension GetDomainDeliverabilityCampaignInput {

    static func urlPathProvider(_ value: GetDomainDeliverabilityCampaignInput) -> Swift.String? {
        guard let campaignId = value.campaignId else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

extension GetDomainStatisticsReportInput {

    static func urlPathProvider(_ value: GetDomainStatisticsReportInput) -> Swift.String? {
        guard let domain = value.domain else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/statistics-report/\(domain.urlPercentEncoding())"
    }
}

extension GetDomainStatisticsReportInput {

    static func queryItemProvider(_ value: GetDomainStatisticsReportInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let startDate = value.startDate else {
            let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let startDateQueryItem = Smithy.URIQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
        items.append(startDateQueryItem)
        guard let endDate = value.endDate else {
            let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let endDateQueryItem = Smithy.URIQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
        items.append(endDateQueryItem)
        return items
    }
}

extension GetEmailIdentityInput {

    static func urlPathProvider(_ value: GetEmailIdentityInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

extension ListConfigurationSetsInput {

    static func urlPathProvider(_ value: ListConfigurationSetsInput) -> Swift.String? {
        return "/v1/email/configuration-sets"
    }
}

extension ListConfigurationSetsInput {

    static func queryItemProvider(_ value: ListConfigurationSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDedicatedIpPoolsInput {

    static func urlPathProvider(_ value: ListDedicatedIpPoolsInput) -> Swift.String? {
        return "/v1/email/dedicated-ip-pools"
    }
}

extension ListDedicatedIpPoolsInput {

    static func queryItemProvider(_ value: ListDedicatedIpPoolsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDeliverabilityTestReportsInput {

    static func urlPathProvider(_ value: ListDeliverabilityTestReportsInput) -> Swift.String? {
        return "/v1/email/deliverability-dashboard/test-reports"
    }
}

extension ListDeliverabilityTestReportsInput {

    static func queryItemProvider(_ value: ListDeliverabilityTestReportsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDomainDeliverabilityCampaignsInput {

    static func urlPathProvider(_ value: ListDomainDeliverabilityCampaignsInput) -> Swift.String? {
        guard let subscribedDomain = value.subscribedDomain else {
            return nil
        }
        return "/v1/email/deliverability-dashboard/domains/\(subscribedDomain.urlPercentEncoding())/campaigns"
    }
}

extension ListDomainDeliverabilityCampaignsInput {

    static func queryItemProvider(_ value: ListDomainDeliverabilityCampaignsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let startDate = value.startDate else {
            let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let startDateQueryItem = Smithy.URIQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
        items.append(startDateQueryItem)
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        guard let endDate = value.endDate else {
            let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let endDateQueryItem = Smithy.URIQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
        items.append(endDateQueryItem)
        return items
    }
}

extension ListEmailIdentitiesInput {

    static func urlPathProvider(_ value: ListEmailIdentitiesInput) -> Swift.String? {
        return "/v1/email/identities"
    }
}

extension ListEmailIdentitiesInput {

    static func queryItemProvider(_ value: ListEmailIdentitiesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/v1/email/tags"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput {

    static func urlPathProvider(_ value: PutAccountDedicatedIpWarmupAttributesInput) -> Swift.String? {
        return "/v1/email/account/dedicated-ips/warmup"
    }
}

extension PutAccountSendingAttributesInput {

    static func urlPathProvider(_ value: PutAccountSendingAttributesInput) -> Swift.String? {
        return "/v1/email/account/sending"
    }
}

extension PutConfigurationSetDeliveryOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetDeliveryOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/delivery-options"
    }
}

extension PutConfigurationSetReputationOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetReputationOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/reputation-options"
    }
}

extension PutConfigurationSetSendingOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetSendingOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/sending"
    }
}

extension PutConfigurationSetTrackingOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetTrackingOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/tracking-options"
    }
}

extension PutDedicatedIpInPoolInput {

    static func urlPathProvider(_ value: PutDedicatedIpInPoolInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())/pool"
    }
}

extension PutDedicatedIpWarmupAttributesInput {

    static func urlPathProvider(_ value: PutDedicatedIpWarmupAttributesInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v1/email/dedicated-ips/\(ip.urlPercentEncoding())/warmup"
    }
}

extension PutDeliverabilityDashboardOptionInput {

    static func urlPathProvider(_ value: PutDeliverabilityDashboardOptionInput) -> Swift.String? {
        return "/v1/email/deliverability-dashboard"
    }
}

extension PutEmailIdentityDkimAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityDkimAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/dkim"
    }
}

extension PutEmailIdentityFeedbackAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityFeedbackAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/feedback"
    }
}

extension PutEmailIdentityMailFromAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityMailFromAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/mail-from"
    }
}

extension SendEmailInput {

    static func urlPathProvider(_ value: SendEmailInput) -> Swift.String? {
        return "/v1/email/outbound-emails"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/v1/email/tags"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/v1/email/tags"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v1/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension CreateConfigurationSetInput {

    static func write(value: CreateConfigurationSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["DeliveryOptions"].write(value.deliveryOptions, with: PinpointEmailClientTypes.DeliveryOptions.write(value:to:))
        try writer["ReputationOptions"].write(value.reputationOptions, with: PinpointEmailClientTypes.ReputationOptions.write(value:to:))
        try writer["SendingOptions"].write(value.sendingOptions, with: PinpointEmailClientTypes.SendingOptions.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PinpointEmailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrackingOptions"].write(value.trackingOptions, with: PinpointEmailClientTypes.TrackingOptions.write(value:to:))
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func write(value: CreateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: PinpointEmailClientTypes.EventDestinationDefinition.write(value:to:))
        try writer["EventDestinationName"].write(value.eventDestinationName)
    }
}

extension CreateDedicatedIpPoolInput {

    static func write(value: CreateDedicatedIpPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PoolName"].write(value.poolName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PinpointEmailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDeliverabilityTestReportInput {

    static func write(value: CreateDeliverabilityTestReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content, with: PinpointEmailClientTypes.EmailContent.write(value:to:))
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["ReportName"].write(value.reportName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PinpointEmailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEmailIdentityInput {

    static func write(value: CreateEmailIdentityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailIdentity"].write(value.emailIdentity)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PinpointEmailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput {

    static func write(value: PutAccountDedicatedIpWarmupAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoWarmupEnabled"].write(value.autoWarmupEnabled)
    }
}

extension PutAccountSendingAttributesInput {

    static func write(value: PutAccountSendingAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }
}

extension PutConfigurationSetDeliveryOptionsInput {

    static func write(value: PutConfigurationSetDeliveryOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingPoolName"].write(value.sendingPoolName)
        try writer["TlsPolicy"].write(value.tlsPolicy)
    }
}

extension PutConfigurationSetReputationOptionsInput {

    static func write(value: PutConfigurationSetReputationOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReputationMetricsEnabled"].write(value.reputationMetricsEnabled)
    }
}

extension PutConfigurationSetSendingOptionsInput {

    static func write(value: PutConfigurationSetSendingOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }
}

extension PutConfigurationSetTrackingOptionsInput {

    static func write(value: PutConfigurationSetTrackingOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRedirectDomain"].write(value.customRedirectDomain)
    }
}

extension PutDedicatedIpInPoolInput {

    static func write(value: PutDedicatedIpInPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationPoolName"].write(value.destinationPoolName)
    }
}

extension PutDedicatedIpWarmupAttributesInput {

    static func write(value: PutDedicatedIpWarmupAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WarmupPercentage"].write(value.warmupPercentage)
    }
}

extension PutDeliverabilityDashboardOptionInput {

    static func write(value: PutDeliverabilityDashboardOptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DashboardEnabled"].write(value.dashboardEnabled)
        try writer["SubscribedDomains"].writeList(value.subscribedDomains, memberWritingClosure: PinpointEmailClientTypes.DomainDeliverabilityTrackingOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutEmailIdentityDkimAttributesInput {

    static func write(value: PutEmailIdentityDkimAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SigningEnabled"].write(value.signingEnabled)
    }
}

extension PutEmailIdentityFeedbackAttributesInput {

    static func write(value: PutEmailIdentityFeedbackAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailForwardingEnabled"].write(value.emailForwardingEnabled)
    }
}

extension PutEmailIdentityMailFromAttributesInput {

    static func write(value: PutEmailIdentityMailFromAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BehaviorOnMxFailure"].write(value.behaviorOnMxFailure)
        try writer["MailFromDomain"].write(value.mailFromDomain)
    }
}

extension SendEmailInput {

    static func write(value: SendEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["Content"].write(value.content, with: PinpointEmailClientTypes.EmailContent.write(value:to:))
        try writer["Destination"].write(value.destination, with: PinpointEmailClientTypes.Destination.write(value:to:))
        try writer["EmailTags"].writeList(value.emailTags, memberWritingClosure: PinpointEmailClientTypes.MessageTag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeedbackForwardingEmailAddress"].write(value.feedbackForwardingEmailAddress)
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["ReplyToAddresses"].writeList(value.replyToAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PinpointEmailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func write(value: UpdateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: PinpointEmailClientTypes.EventDestinationDefinition.write(value:to:))
    }
}

extension CreateConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetOutput {
        return CreateConfigurationSetOutput()
    }
}

extension CreateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetEventDestinationOutput {
        return CreateConfigurationSetEventDestinationOutput()
    }
}

extension CreateDedicatedIpPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDedicatedIpPoolOutput {
        return CreateDedicatedIpPoolOutput()
    }
}

extension CreateDeliverabilityTestReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeliverabilityTestReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeliverabilityTestReportOutput()
        value.deliverabilityTestStatus = try reader["DeliverabilityTestStatus"].readIfPresent() ?? .sdkUnknown("")
        value.reportId = try reader["ReportId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEmailIdentityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEmailIdentityOutput()
        value.dkimAttributes = try reader["DkimAttributes"].readIfPresent(with: PinpointEmailClientTypes.DkimAttributes.read(from:))
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.verifiedForSendingStatus = try reader["VerifiedForSendingStatus"].readIfPresent() ?? false
        return value
    }
}

extension DeleteConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetOutput {
        return DeleteConfigurationSetOutput()
    }
}

extension DeleteConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetEventDestinationOutput {
        return DeleteConfigurationSetEventDestinationOutput()
    }
}

extension DeleteDedicatedIpPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDedicatedIpPoolOutput {
        return DeleteDedicatedIpPoolOutput()
    }
}

extension DeleteEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEmailIdentityOutput {
        return DeleteEmailIdentityOutput()
    }
}

extension GetAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountOutput()
        value.dedicatedIpAutoWarmupEnabled = try reader["DedicatedIpAutoWarmupEnabled"].readIfPresent() ?? false
        value.enforcementStatus = try reader["EnforcementStatus"].readIfPresent()
        value.productionAccessEnabled = try reader["ProductionAccessEnabled"].readIfPresent() ?? false
        value.sendQuota = try reader["SendQuota"].readIfPresent(with: PinpointEmailClientTypes.SendQuota.read(from:))
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        return value
    }
}

extension GetBlacklistReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBlacklistReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBlacklistReportsOutput()
        value.blacklistReport = try reader["BlacklistReport"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: PinpointEmailClientTypes.BlacklistEntry.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension GetConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationSetOutput()
        value.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.deliveryOptions = try reader["DeliveryOptions"].readIfPresent(with: PinpointEmailClientTypes.DeliveryOptions.read(from:))
        value.reputationOptions = try reader["ReputationOptions"].readIfPresent(with: PinpointEmailClientTypes.ReputationOptions.read(from:))
        value.sendingOptions = try reader["SendingOptions"].readIfPresent(with: PinpointEmailClientTypes.SendingOptions.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trackingOptions = try reader["TrackingOptions"].readIfPresent(with: PinpointEmailClientTypes.TrackingOptions.read(from:))
        return value
    }
}

extension GetConfigurationSetEventDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationSetEventDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationSetEventDestinationsOutput()
        value.eventDestinations = try reader["EventDestinations"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.EventDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDedicatedIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDedicatedIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDedicatedIpOutput()
        value.dedicatedIp = try reader["DedicatedIp"].readIfPresent(with: PinpointEmailClientTypes.DedicatedIp.read(from:))
        return value
    }
}

extension GetDedicatedIpsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDedicatedIpsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDedicatedIpsOutput()
        value.dedicatedIps = try reader["DedicatedIps"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DedicatedIp.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetDeliverabilityDashboardOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliverabilityDashboardOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliverabilityDashboardOptionsOutput()
        value.accountStatus = try reader["AccountStatus"].readIfPresent()
        value.activeSubscribedDomains = try reader["ActiveSubscribedDomains"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DomainDeliverabilityTrackingOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dashboardEnabled = try reader["DashboardEnabled"].readIfPresent() ?? false
        value.pendingExpirationSubscribedDomains = try reader["PendingExpirationSubscribedDomains"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DomainDeliverabilityTrackingOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subscriptionExpiryDate = try reader["SubscriptionExpiryDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GetDeliverabilityTestReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliverabilityTestReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliverabilityTestReportOutput()
        value.deliverabilityTestReport = try reader["DeliverabilityTestReport"].readIfPresent(with: PinpointEmailClientTypes.DeliverabilityTestReport.read(from:))
        value.ispPlacements = try reader["IspPlacements"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.IspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.message = try reader["Message"].readIfPresent()
        value.overallPlacement = try reader["OverallPlacement"].readIfPresent(with: PinpointEmailClientTypes.PlacementStatistics.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDomainDeliverabilityCampaignOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainDeliverabilityCampaignOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainDeliverabilityCampaignOutput()
        value.domainDeliverabilityCampaign = try reader["DomainDeliverabilityCampaign"].readIfPresent(with: PinpointEmailClientTypes.DomainDeliverabilityCampaign.read(from:))
        return value
    }
}

extension GetDomainStatisticsReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainStatisticsReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainStatisticsReportOutput()
        value.dailyVolumes = try reader["DailyVolumes"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DailyVolume.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.overallVolume = try reader["OverallVolume"].readIfPresent(with: PinpointEmailClientTypes.OverallVolume.read(from:))
        return value
    }
}

extension GetEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEmailIdentityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEmailIdentityOutput()
        value.dkimAttributes = try reader["DkimAttributes"].readIfPresent(with: PinpointEmailClientTypes.DkimAttributes.read(from:))
        value.feedbackForwardingStatus = try reader["FeedbackForwardingStatus"].readIfPresent() ?? false
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.mailFromAttributes = try reader["MailFromAttributes"].readIfPresent(with: PinpointEmailClientTypes.MailFromAttributes.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.verifiedForSendingStatus = try reader["VerifiedForSendingStatus"].readIfPresent() ?? false
        return value
    }
}

extension ListConfigurationSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfigurationSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfigurationSetsOutput()
        value.configurationSets = try reader["ConfigurationSets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDedicatedIpPoolsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDedicatedIpPoolsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDedicatedIpPoolsOutput()
        value.dedicatedIpPools = try reader["DedicatedIpPools"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDeliverabilityTestReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeliverabilityTestReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeliverabilityTestReportsOutput()
        value.deliverabilityTestReports = try reader["DeliverabilityTestReports"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DeliverabilityTestReport.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDomainDeliverabilityCampaignsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDomainDeliverabilityCampaignsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDomainDeliverabilityCampaignsOutput()
        value.domainDeliverabilityCampaigns = try reader["DomainDeliverabilityCampaigns"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DomainDeliverabilityCampaign.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEmailIdentitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEmailIdentitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEmailIdentitiesOutput()
        value.emailIdentities = try reader["EmailIdentities"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.IdentityInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountDedicatedIpWarmupAttributesOutput {
        return PutAccountDedicatedIpWarmupAttributesOutput()
    }
}

extension PutAccountSendingAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSendingAttributesOutput {
        return PutAccountSendingAttributesOutput()
    }
}

extension PutConfigurationSetDeliveryOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetDeliveryOptionsOutput {
        return PutConfigurationSetDeliveryOptionsOutput()
    }
}

extension PutConfigurationSetReputationOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetReputationOptionsOutput {
        return PutConfigurationSetReputationOptionsOutput()
    }
}

extension PutConfigurationSetSendingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetSendingOptionsOutput {
        return PutConfigurationSetSendingOptionsOutput()
    }
}

extension PutConfigurationSetTrackingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetTrackingOptionsOutput {
        return PutConfigurationSetTrackingOptionsOutput()
    }
}

extension PutDedicatedIpInPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDedicatedIpInPoolOutput {
        return PutDedicatedIpInPoolOutput()
    }
}

extension PutDedicatedIpWarmupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDedicatedIpWarmupAttributesOutput {
        return PutDedicatedIpWarmupAttributesOutput()
    }
}

extension PutDeliverabilityDashboardOptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDeliverabilityDashboardOptionOutput {
        return PutDeliverabilityDashboardOptionOutput()
    }
}

extension PutEmailIdentityDkimAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityDkimAttributesOutput {
        return PutEmailIdentityDkimAttributesOutput()
    }
}

extension PutEmailIdentityFeedbackAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityFeedbackAttributesOutput {
        return PutEmailIdentityFeedbackAttributesOutput()
    }
}

extension PutEmailIdentityMailFromAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityMailFromAttributesOutput {
        return PutEmailIdentityMailFromAttributesOutput()
    }
}

extension SendEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendEmailOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendEmailOutput()
        value.messageId = try reader["MessageId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationSetEventDestinationOutput {
        return UpdateConfigurationSetEventDestinationOutput()
    }
}

enum CreateConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDedicatedIpPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeliverabilityTestReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountSuspendedException": return try AccountSuspendedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDedicatedIpPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBlacklistReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationSetEventDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDedicatedIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDedicatedIpsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliverabilityDashboardOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliverabilityTestReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainDeliverabilityCampaignOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainStatisticsReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfigurationSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDedicatedIpPoolsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeliverabilityTestReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDomainDeliverabilityCampaignsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEmailIdentitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountDedicatedIpWarmupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSendingAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetDeliveryOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetReputationOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetSendingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetTrackingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDedicatedIpInPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDedicatedIpWarmupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDeliverabilityDashboardOptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityDkimAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityFeedbackAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityMailFromAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountSuspendedException": return try AccountSuspendedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SendingPausedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> SendingPausedException {
        let reader = baseError.errorBodyReader
        var value = SendingPausedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MessageRejected {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MessageRejected {
        let reader = baseError.errorBodyReader
        var value = MessageRejected()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountSuspendedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccountSuspendedException {
        let reader = baseError.errorBodyReader
        var value = AccountSuspendedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MailFromDomainNotVerifiedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MailFromDomainNotVerifiedException {
        let reader = baseError.errorBodyReader
        var value = MailFromDomainNotVerifiedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PinpointEmailClientTypes.DkimAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DkimAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DkimAttributes()
        value.signingEnabled = try reader["SigningEnabled"].readIfPresent() ?? false
        value.status = try reader["Status"].readIfPresent()
        value.tokens = try reader["Tokens"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PinpointEmailClientTypes.SendQuota {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.SendQuota {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.SendQuota()
        value.max24HourSend = try reader["Max24HourSend"].readIfPresent() ?? 0
        value.maxSendRate = try reader["MaxSendRate"].readIfPresent() ?? 0
        value.sentLast24Hours = try reader["SentLast24Hours"].readIfPresent() ?? 0
        return value
    }
}

extension PinpointEmailClientTypes.BlacklistEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.BlacklistEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.BlacklistEntry()
        value.rblName = try reader["RblName"].readIfPresent()
        value.listingTime = try reader["ListingTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.TrackingOptions {

    static func write(value: PinpointEmailClientTypes.TrackingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRedirectDomain"].write(value.customRedirectDomain)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.TrackingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.TrackingOptions()
        value.customRedirectDomain = try reader["CustomRedirectDomain"].readIfPresent() ?? ""
        return value
    }
}

extension PinpointEmailClientTypes.DeliveryOptions {

    static func write(value: PinpointEmailClientTypes.DeliveryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingPoolName"].write(value.sendingPoolName)
        try writer["TlsPolicy"].write(value.tlsPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DeliveryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DeliveryOptions()
        value.tlsPolicy = try reader["TlsPolicy"].readIfPresent()
        value.sendingPoolName = try reader["SendingPoolName"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.ReputationOptions {

    static func write(value: PinpointEmailClientTypes.ReputationOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LastFreshStart"].writeTimestamp(value.lastFreshStart, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ReputationMetricsEnabled"].write(value.reputationMetricsEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.ReputationOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.ReputationOptions()
        value.reputationMetricsEnabled = try reader["ReputationMetricsEnabled"].readIfPresent() ?? false
        value.lastFreshStart = try reader["LastFreshStart"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PinpointEmailClientTypes.SendingOptions {

    static func write(value: PinpointEmailClientTypes.SendingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.SendingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.SendingOptions()
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        return value
    }
}

extension PinpointEmailClientTypes.Tag {

    static func write(value: PinpointEmailClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension PinpointEmailClientTypes.EventDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.EventDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.EventDestination()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.matchingEventTypes = try reader["MatchingEventTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<PinpointEmailClientTypes.EventType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.kinesisFirehoseDestination = try reader["KinesisFirehoseDestination"].readIfPresent(with: PinpointEmailClientTypes.KinesisFirehoseDestination.read(from:))
        value.cloudWatchDestination = try reader["CloudWatchDestination"].readIfPresent(with: PinpointEmailClientTypes.CloudWatchDestination.read(from:))
        value.snsDestination = try reader["SnsDestination"].readIfPresent(with: PinpointEmailClientTypes.SnsDestination.read(from:))
        value.pinpointDestination = try reader["PinpointDestination"].readIfPresent(with: PinpointEmailClientTypes.PinpointDestination.read(from:))
        return value
    }
}

extension PinpointEmailClientTypes.PinpointDestination {

    static func write(value: PinpointEmailClientTypes.PinpointDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationArn"].write(value.applicationArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.PinpointDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.PinpointDestination()
        value.applicationArn = try reader["ApplicationArn"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.SnsDestination {

    static func write(value: PinpointEmailClientTypes.SnsDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TopicArn"].write(value.topicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.SnsDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.SnsDestination()
        value.topicArn = try reader["TopicArn"].readIfPresent() ?? ""
        return value
    }
}

extension PinpointEmailClientTypes.CloudWatchDestination {

    static func write(value: PinpointEmailClientTypes.CloudWatchDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DimensionConfigurations"].writeList(value.dimensionConfigurations, memberWritingClosure: PinpointEmailClientTypes.CloudWatchDimensionConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.CloudWatchDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.CloudWatchDestination()
        value.dimensionConfigurations = try reader["DimensionConfigurations"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.CloudWatchDimensionConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PinpointEmailClientTypes.CloudWatchDimensionConfiguration {

    static func write(value: PinpointEmailClientTypes.CloudWatchDimensionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultDimensionValue"].write(value.defaultDimensionValue)
        try writer["DimensionName"].write(value.dimensionName)
        try writer["DimensionValueSource"].write(value.dimensionValueSource)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.CloudWatchDimensionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.CloudWatchDimensionConfiguration()
        value.dimensionName = try reader["DimensionName"].readIfPresent() ?? ""
        value.dimensionValueSource = try reader["DimensionValueSource"].readIfPresent() ?? .sdkUnknown("")
        value.defaultDimensionValue = try reader["DefaultDimensionValue"].readIfPresent() ?? ""
        return value
    }
}

extension PinpointEmailClientTypes.KinesisFirehoseDestination {

    static func write(value: PinpointEmailClientTypes.KinesisFirehoseDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamArn"].write(value.deliveryStreamArn)
        try writer["IamRoleArn"].write(value.iamRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.KinesisFirehoseDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.KinesisFirehoseDestination()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.deliveryStreamArn = try reader["DeliveryStreamArn"].readIfPresent() ?? ""
        return value
    }
}

extension PinpointEmailClientTypes.DedicatedIp {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DedicatedIp {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DedicatedIp()
        value.ip = try reader["Ip"].readIfPresent() ?? ""
        value.warmupStatus = try reader["WarmupStatus"].readIfPresent() ?? .sdkUnknown("")
        value.warmupPercentage = try reader["WarmupPercentage"].readIfPresent() ?? 0
        value.poolName = try reader["PoolName"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.DomainDeliverabilityTrackingOption {

    static func write(value: PinpointEmailClientTypes.DomainDeliverabilityTrackingOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Domain"].write(value.domain)
        try writer["InboxPlacementTrackingOption"].write(value.inboxPlacementTrackingOption, with: PinpointEmailClientTypes.InboxPlacementTrackingOption.write(value:to:))
        try writer["SubscriptionStartDate"].writeTimestamp(value.subscriptionStartDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DomainDeliverabilityTrackingOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DomainDeliverabilityTrackingOption()
        value.domain = try reader["Domain"].readIfPresent()
        value.subscriptionStartDate = try reader["SubscriptionStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inboxPlacementTrackingOption = try reader["InboxPlacementTrackingOption"].readIfPresent(with: PinpointEmailClientTypes.InboxPlacementTrackingOption.read(from:))
        return value
    }
}

extension PinpointEmailClientTypes.InboxPlacementTrackingOption {

    static func write(value: PinpointEmailClientTypes.InboxPlacementTrackingOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Global"].write(value.global)
        try writer["TrackedIsps"].writeList(value.trackedIsps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.InboxPlacementTrackingOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.InboxPlacementTrackingOption()
        value.global = try reader["Global"].readIfPresent() ?? false
        value.trackedIsps = try reader["TrackedIsps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PinpointEmailClientTypes.DeliverabilityTestReport {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DeliverabilityTestReport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DeliverabilityTestReport()
        value.reportId = try reader["ReportId"].readIfPresent()
        value.reportName = try reader["ReportName"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.createDate = try reader["CreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deliverabilityTestStatus = try reader["DeliverabilityTestStatus"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.PlacementStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.PlacementStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.PlacementStatistics()
        value.inboxPercentage = try reader["InboxPercentage"].readIfPresent()
        value.spamPercentage = try reader["SpamPercentage"].readIfPresent()
        value.missingPercentage = try reader["MissingPercentage"].readIfPresent()
        value.spfPercentage = try reader["SpfPercentage"].readIfPresent()
        value.dkimPercentage = try reader["DkimPercentage"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.IspPlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.IspPlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.IspPlacement()
        value.ispName = try reader["IspName"].readIfPresent()
        value.placementStatistics = try reader["PlacementStatistics"].readIfPresent(with: PinpointEmailClientTypes.PlacementStatistics.read(from:))
        return value
    }
}

extension PinpointEmailClientTypes.DomainDeliverabilityCampaign {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DomainDeliverabilityCampaign {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DomainDeliverabilityCampaign()
        value.campaignId = try reader["CampaignId"].readIfPresent()
        value.imageUrl = try reader["ImageUrl"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        value.fromAddress = try reader["FromAddress"].readIfPresent()
        value.sendingIps = try reader["SendingIps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.firstSeenDateTime = try reader["FirstSeenDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastSeenDateTime = try reader["LastSeenDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inboxCount = try reader["InboxCount"].readIfPresent()
        value.spamCount = try reader["SpamCount"].readIfPresent()
        value.readRate = try reader["ReadRate"].readIfPresent()
        value.deleteRate = try reader["DeleteRate"].readIfPresent()
        value.readDeleteRate = try reader["ReadDeleteRate"].readIfPresent()
        value.projectedVolume = try reader["ProjectedVolume"].readIfPresent()
        value.esps = try reader["Esps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PinpointEmailClientTypes.OverallVolume {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.OverallVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.OverallVolume()
        value.volumeStatistics = try reader["VolumeStatistics"].readIfPresent(with: PinpointEmailClientTypes.VolumeStatistics.read(from:))
        value.readRatePercent = try reader["ReadRatePercent"].readIfPresent()
        value.domainIspPlacements = try reader["DomainIspPlacements"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DomainIspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PinpointEmailClientTypes.DomainIspPlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DomainIspPlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DomainIspPlacement()
        value.ispName = try reader["IspName"].readIfPresent()
        value.inboxRawCount = try reader["InboxRawCount"].readIfPresent()
        value.spamRawCount = try reader["SpamRawCount"].readIfPresent()
        value.inboxPercentage = try reader["InboxPercentage"].readIfPresent()
        value.spamPercentage = try reader["SpamPercentage"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.VolumeStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.VolumeStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.VolumeStatistics()
        value.inboxRawCount = try reader["InboxRawCount"].readIfPresent()
        value.spamRawCount = try reader["SpamRawCount"].readIfPresent()
        value.projectedInbox = try reader["ProjectedInbox"].readIfPresent()
        value.projectedSpam = try reader["ProjectedSpam"].readIfPresent()
        return value
    }
}

extension PinpointEmailClientTypes.DailyVolume {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.DailyVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.DailyVolume()
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.volumeStatistics = try reader["VolumeStatistics"].readIfPresent(with: PinpointEmailClientTypes.VolumeStatistics.read(from:))
        value.domainIspPlacements = try reader["DomainIspPlacements"].readListIfPresent(memberReadingClosure: PinpointEmailClientTypes.DomainIspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PinpointEmailClientTypes.MailFromAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.MailFromAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.MailFromAttributes()
        value.mailFromDomain = try reader["MailFromDomain"].readIfPresent() ?? ""
        value.mailFromDomainStatus = try reader["MailFromDomainStatus"].readIfPresent() ?? .sdkUnknown("")
        value.behaviorOnMxFailure = try reader["BehaviorOnMxFailure"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PinpointEmailClientTypes.IdentityInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointEmailClientTypes.IdentityInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointEmailClientTypes.IdentityInfo()
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.identityName = try reader["IdentityName"].readIfPresent()
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        return value
    }
}

extension PinpointEmailClientTypes.EventDestinationDefinition {

    static func write(value: PinpointEmailClientTypes.EventDestinationDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchDestination"].write(value.cloudWatchDestination, with: PinpointEmailClientTypes.CloudWatchDestination.write(value:to:))
        try writer["Enabled"].write(value.enabled)
        try writer["KinesisFirehoseDestination"].write(value.kinesisFirehoseDestination, with: PinpointEmailClientTypes.KinesisFirehoseDestination.write(value:to:))
        try writer["MatchingEventTypes"].writeList(value.matchingEventTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<PinpointEmailClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PinpointDestination"].write(value.pinpointDestination, with: PinpointEmailClientTypes.PinpointDestination.write(value:to:))
        try writer["SnsDestination"].write(value.snsDestination, with: PinpointEmailClientTypes.SnsDestination.write(value:to:))
    }
}

extension PinpointEmailClientTypes.EmailContent {

    static func write(value: PinpointEmailClientTypes.EmailContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Raw"].write(value.raw, with: PinpointEmailClientTypes.RawMessage.write(value:to:))
        try writer["Simple"].write(value.simple, with: PinpointEmailClientTypes.Message.write(value:to:))
        try writer["Template"].write(value.template, with: PinpointEmailClientTypes.Template.write(value:to:))
    }
}

extension PinpointEmailClientTypes.Template {

    static func write(value: PinpointEmailClientTypes.Template?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TemplateArn"].write(value.templateArn)
        try writer["TemplateData"].write(value.templateData)
    }
}

extension PinpointEmailClientTypes.RawMessage {

    static func write(value: PinpointEmailClientTypes.RawMessage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
    }
}

extension PinpointEmailClientTypes.Message {

    static func write(value: PinpointEmailClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body, with: PinpointEmailClientTypes.Body.write(value:to:))
        try writer["Subject"].write(value.subject, with: PinpointEmailClientTypes.Content.write(value:to:))
    }
}

extension PinpointEmailClientTypes.Body {

    static func write(value: PinpointEmailClientTypes.Body?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Html"].write(value.html, with: PinpointEmailClientTypes.Content.write(value:to:))
        try writer["Text"].write(value.text, with: PinpointEmailClientTypes.Content.write(value:to:))
    }
}

extension PinpointEmailClientTypes.Content {

    static func write(value: PinpointEmailClientTypes.Content?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Charset"].write(value.charset)
        try writer["Data"].write(value.data)
    }
}

extension PinpointEmailClientTypes.Destination {

    static func write(value: PinpointEmailClientTypes.Destination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BccAddresses"].writeList(value.bccAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CcAddresses"].writeList(value.ccAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ToAddresses"].writeList(value.toAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PinpointEmailClientTypes.MessageTag {

    static func write(value: PinpointEmailClientTypes.MessageTag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

public enum PinpointEmailClientTypes {}
