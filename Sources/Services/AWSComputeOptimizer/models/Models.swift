// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.AccountEnrollmentStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case lastUpdatedTimestamp
        case status
        case statusReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the enrollment status of an organization's member accounts in Compute Optimizer.
    public struct AccountEnrollmentStatus: Swift.Equatable {
        /// The Amazon Web Services account ID.
        public var accountId: Swift.String?
        /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The account enrollment status.
        public var status: ComputeOptimizerClientTypes.Status?
        /// The reason for the account enrollment status. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
        public var statusReason: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            status: ComputeOptimizerClientTypes.Status? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum AutoScalingConfiguration: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case targetTrackingScalingCpu
        case targetTrackingScalingMemory
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingConfiguration] {
            return [
                .targetTrackingScalingCpu,
                .targetTrackingScalingMemory,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .targetTrackingScalingCpu: return "TargetTrackingScalingCpu"
            case .targetTrackingScalingMemory: return "TargetTrackingScalingMemory"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoScalingConfiguration(rawValue: rawValue) ?? AutoScalingConfiguration.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCapacity
        case instanceType
        case maxSize
        case minSize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredCapacity != 0 {
            try encodeContainer.encode(desiredCapacity, forKey: .desiredCapacity)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if maxSize != 0 {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if minSize != 0 {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity) ?? 0
        desiredCapacity = desiredCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize) ?? 0
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize) ?? 0
        maxSize = maxSizeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the configuration of an Auto Scaling group.
    public struct AutoScalingGroupConfiguration: Swift.Equatable {
        /// The desired capacity, or number of instances, for the Auto Scaling group.
        public var desiredCapacity: Swift.Int
        /// The instance type for the Auto Scaling group.
        public var instanceType: Swift.String?
        /// The maximum size, or maximum number of instances, for the Auto Scaling group.
        public var maxSize: Swift.Int
        /// The minimum size, or minimum number of instances, for the Auto Scaling group.
        public var minSize: Swift.Int

        public init (
            desiredCapacity: Swift.Int = 0,
            instanceType: Swift.String? = nil,
            maxSize: Swift.Int = 0,
            minSize: Swift.Int = 0
        )
        {
            self.desiredCapacity = desiredCapacity
            self.instanceType = instanceType
            self.maxSize = maxSize
            self.minSize = minSize
        }
    }

}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfiguration
        case currentPerformanceRisk
        case effectiveRecommendationPreferences
        case finding
        case inferredWorkloadTypes
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case recommendationOptions
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let autoScalingGroupArn = self.autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let autoScalingGroupName = self.autoScalingGroupName {
            try encodeContainer.encode(autoScalingGroupName, forKey: .autoScalingGroupName)
        }
        if let currentConfiguration = self.currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let effectiveRecommendationPreferences = self.effectiveRecommendationPreferences {
            try encodeContainer.encode(effectiveRecommendationPreferences, forKey: .effectiveRecommendationPreferences)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let inferredWorkloadTypes = inferredWorkloadTypes {
            var inferredWorkloadTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferredWorkloadTypes)
            for inferredworkloadtype0 in inferredWorkloadTypes {
                try inferredWorkloadTypesContainer.encode(inferredworkloadtype0.rawValue)
            }
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encodeTimestamp(lastRefreshTimestamp, format: .epochSeconds, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let recommendationOptions = recommendationOptions {
            var recommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationOptions)
            for autoscalinggrouprecommendationoption0 in recommendationOptions {
                try recommendationOptionsContainer.encode(autoscalinggrouprecommendationoption0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for utilizationmetric0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(utilizationmetric0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookBackPeriodInDays) ?? 0.0
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let recommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption?].self, forKey: .recommendationOptions)
        var recommendationOptionsDecoded0:[ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]? = nil
        if let recommendationOptionsContainer = recommendationOptionsContainer {
            recommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]()
            for structure0 in recommendationOptionsContainer {
                if let structure0 = structure0 {
                    recommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        recommendationOptions = recommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
        let effectiveRecommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EffectiveRecommendationPreferences.self, forKey: .effectiveRecommendationPreferences)
        effectiveRecommendationPreferences = effectiveRecommendationPreferencesDecoded
        let inferredWorkloadTypesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InferredWorkloadType?].self, forKey: .inferredWorkloadTypes)
        var inferredWorkloadTypesDecoded0:[ComputeOptimizerClientTypes.InferredWorkloadType]? = nil
        if let inferredWorkloadTypesContainer = inferredWorkloadTypesContainer {
            inferredWorkloadTypesDecoded0 = [ComputeOptimizerClientTypes.InferredWorkloadType]()
            for enum0 in inferredWorkloadTypesContainer {
                if let enum0 = enum0 {
                    inferredWorkloadTypesDecoded0?.append(enum0)
                }
            }
        }
        inferredWorkloadTypes = inferredWorkloadTypesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an Auto Scaling group recommendation.
    public struct AutoScalingGroupRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the Auto Scaling group.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupArn: Swift.String?
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// An array of objects that describe the current configuration of the Auto Scaling group.
        public var currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// The risk of the current Auto Scaling group not meeting the performance needs of its workloads. The higher the risk, the more likely the current Auto Scaling group configuration has insufficient capacity and cannot meet workload requirements.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the Auto Scaling group.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences?
        /// The finding classification of the Auto Scaling group. Findings for Auto Scaling groups include:
        ///
        /// * NotOptimized —An Auto Scaling group is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.
        ///
        /// * Optimized —An Auto Scaling group is considered optimized when Compute Optimizer determines that the group is correctly provisioned to run your workload based on the chosen instance type. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        public var finding: ComputeOptimizerClientTypes.Finding?
        /// The applications that might be running on the instances in the Auto Scaling group as inferred by Compute Optimizer. Compute Optimizer can infer if one of the following applications might be running on the instances:
        ///
        /// * AmazonEmr - Infers that Amazon EMR might be running on the instances.
        ///
        /// * ApacheCassandra - Infers that Apache Cassandra might be running on the instances.
        ///
        /// * ApacheHadoop - Infers that Apache Hadoop might be running on the instances.
        ///
        /// * Memcached - Infers that Memcached might be running on the instances.
        ///
        /// * NGINX - Infers that NGINX might be running on the instances.
        ///
        /// * PostgreSql - Infers that PostgreSQL might be running on the instances.
        ///
        /// * Redis - Infers that Redis might be running on the instances.
        public var inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]?
        /// The timestamp of when the Auto Scaling group recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The number of days for which utilization metrics were analyzed for the Auto Scaling group.
        public var lookBackPeriodInDays: Swift.Double
        /// An array of objects that describe the recommendation options for the Auto Scaling group.
        public var recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]?
        /// An array of objects that describe the utilization metrics of the Auto Scaling group.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            autoScalingGroupArn: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.autoScalingGroupArn = autoScalingGroupArn
            self.autoScalingGroupName = autoScalingGroupName
            self.currentConfiguration = currentConfiguration
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case migrationEffort
        case performanceRisk
        case projectedUtilizationMetrics
        case rank
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let migrationEffort = self.migrationEffort {
            try encodeContainer.encode(migrationEffort.rawValue, forKey: .migrationEffort)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for utilizationmetric0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(utilizationmetric0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let performanceRiskDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .performanceRisk) ?? 0.0
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
        let migrationEffortDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MigrationEffort.self, forKey: .migrationEffort)
        migrationEffort = migrationEffortDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation option for an Auto Scaling group.
    public struct AutoScalingGroupRecommendationOption: Swift.Equatable {
        /// An array of objects that describe an Auto Scaling group configuration.
        public var configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// The level of effort required to migrate from the current instance type to the recommended instance type. For example, the migration effort is Low if Amazon EMR is the inferred workload type and an Amazon Web Services Graviton instance type is recommended. The migration effort is Medium if a workload type couldn't be inferred but an Amazon Web Services Graviton instance type is recommended. The migration effort is VeryLow if both the current and recommended instance types are of the same CPU architecture.
        public var migrationEffort: ComputeOptimizerClientTypes.MigrationEffort?
        /// The performance risk of the Auto Scaling group configuration recommendation. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// An array of objects that describe the projected utilization metrics of the Auto Scaling group recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// The rank of the Auto Scaling group recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the Auto Scaling group recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init (
            configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            migrationEffort: ComputeOptimizerClientTypes.MigrationEffort? = nil,
            performanceRisk: Swift.Double = 0.0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.configuration = configuration
            self.migrationEffort = migrationEffort
            self.performanceRisk = performanceRisk
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }
    }

}

extension ComputeOptimizerClientTypes.ContainerConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case cpu
        case memorySizeConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = self.containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let memorySizeConfiguration = self.memorySizeConfiguration {
            try encodeContainer.encode(memorySizeConfiguration, forKey: .memorySizeConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let memorySizeConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MemorySizeConfiguration.self, forKey: .memorySizeConfiguration)
        memorySizeConfiguration = memorySizeConfigurationDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the container configurations within the tasks of your Amazon ECS service.
    public struct ContainerConfiguration: Swift.Equatable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The number of CPU units reserved for the container.
        public var cpu: Swift.Int?
        /// The memory size configurations for the container.
        public var memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration?

        public init (
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration? = nil
        )
        {
            self.containerName = containerName
            self.cpu = cpu
            self.memorySizeConfiguration = memorySizeConfiguration
        }
    }

}

extension ComputeOptimizerClientTypes.ContainerRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case cpu
        case memorySizeConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = self.containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let memorySizeConfiguration = self.memorySizeConfiguration {
            try encodeContainer.encode(memorySizeConfiguration, forKey: .memorySizeConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let memorySizeConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MemorySizeConfiguration.self, forKey: .memorySizeConfiguration)
        memorySizeConfiguration = memorySizeConfigurationDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// The CPU and memory recommendations for a container within the tasks of your Amazon ECS service.
    public struct ContainerRecommendation: Swift.Equatable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The recommended number of CPU units reserved for the container.
        public var cpu: Swift.Int?
        /// The recommended memory size configurations for the container.
        public var memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration?

        public init (
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration? = nil
        )
        {
            self.containerName = containerName
            self.cpu = cpu
            self.memorySizeConfiguration = memorySizeConfiguration
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum CpuVendorArchitecture: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsArm64
        case current
        case sdkUnknown(Swift.String)

        public static var allCases: [CpuVendorArchitecture] {
            return [
                .awsArm64,
                .current,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsArm64: return "AWS_ARM64"
            case .current: return "CURRENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CpuVendorArchitecture(rawValue: rawValue) ?? CpuVendorArchitecture.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum Currency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cny
        case usd
        case sdkUnknown(Swift.String)

        public static var allCases: [Currency] {
            return [
                .cny,
                .usd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cny: return "CNY"
            case .usd: return "USD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Currency(rawValue: rawValue) ?? Currency.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum CurrentPerformanceRisk: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case veryLow
        case sdkUnknown(Swift.String)

        public static var allCases: [CurrentPerformanceRisk] {
            return [
                .high,
                .low,
                .medium,
                .veryLow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case .veryLow: return "VeryLow"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CurrentPerformanceRisk(rawValue: rawValue) ?? CurrentPerformanceRisk.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case high
        case low
        case medium
        case veryLow
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if high != 0 {
            try encodeContainer.encode(high, forKey: .high)
        }
        if low != 0 {
            try encodeContainer.encode(low, forKey: .low)
        }
        if medium != 0 {
            try encodeContainer.encode(medium, forKey: .medium)
        }
        if veryLow != 0 {
            try encodeContainer.encode(veryLow, forKey: .veryLow)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let highDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .high) ?? 0
        high = highDecoded
        let mediumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .medium) ?? 0
        medium = mediumDecoded
        let lowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .low) ?? 0
        low = lowDecoded
        let veryLowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .veryLow) ?? 0
        veryLow = veryLowDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the performance risk ratings for a given resource type. Resources with a high or medium rating are at risk of not meeting the performance needs of their workloads, while resources with a low rating are performing well in their workloads.
    public struct CurrentPerformanceRiskRatings: Swift.Equatable {
        /// A count of the applicable resource types with a high performance risk rating.
        public var high: Swift.Int
        /// A count of the applicable resource types with a low performance risk rating.
        public var low: Swift.Int
        /// A count of the applicable resource types with a medium performance risk rating.
        public var medium: Swift.Int
        /// A count of the applicable resource types with a very low performance risk rating.
        public var veryLow: Swift.Int

        public init (
            high: Swift.Int = 0,
            low: Swift.Int = 0,
            medium: Swift.Int = 0,
            veryLow: Swift.Int = 0
        )
        {
            self.high = high
            self.low = low
            self.medium = medium
            self.veryLow = veryLow
        }
    }

}

extension DeleteRecommendationPreferencesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendationPreferenceNames
        case resourceType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recommendationPreferenceNames = recommendationPreferenceNames {
            var recommendationPreferenceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationPreferenceNames)
            for recommendationpreferencename0 in recommendationPreferenceNames {
                try recommendationPreferenceNamesContainer.encode(recommendationpreferencename0.rawValue)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
    }
}

extension DeleteRecommendationPreferencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRecommendationPreferencesInput: Swift.Equatable {
    /// The name of the recommendation preference to delete.
    /// This member is required.
    public var recommendationPreferenceNames: [ComputeOptimizerClientTypes.RecommendationPreferenceName]?
    /// The target resource type of the recommendation preference to delete. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group. The valid values for this parameter are Ec2Instance and AutoScalingGroup.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// An object that describes the scope of the recommendation preference to delete. You can delete recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var scope: ComputeOptimizerClientTypes.Scope?

    public init (
        recommendationPreferenceNames: [ComputeOptimizerClientTypes.RecommendationPreferenceName]? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil
    )
    {
        self.recommendationPreferenceNames = recommendationPreferenceNames
        self.resourceType = resourceType
        self.scope = scope
    }
}

struct DeleteRecommendationPreferencesInputBody: Swift.Equatable {
    let resourceType: ComputeOptimizerClientTypes.ResourceType?
    let scope: ComputeOptimizerClientTypes.Scope?
    let recommendationPreferenceNames: [ComputeOptimizerClientTypes.RecommendationPreferenceName]?
}

extension DeleteRecommendationPreferencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendationPreferenceNames
        case resourceType
        case scope
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let recommendationPreferenceNamesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationPreferenceName?].self, forKey: .recommendationPreferenceNames)
        var recommendationPreferenceNamesDecoded0:[ComputeOptimizerClientTypes.RecommendationPreferenceName]? = nil
        if let recommendationPreferenceNamesContainer = recommendationPreferenceNamesContainer {
            recommendationPreferenceNamesDecoded0 = [ComputeOptimizerClientTypes.RecommendationPreferenceName]()
            for enum0 in recommendationPreferenceNamesContainer {
                if let enum0 = enum0 {
                    recommendationPreferenceNamesDecoded0?.append(enum0)
                }
            }
        }
        recommendationPreferenceNames = recommendationPreferenceNamesDecoded0
    }
}

extension DeleteRecommendationPreferencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRecommendationPreferencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRecommendationPreferencesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRecommendationPreferencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRecommendationPreferencesOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeRecommendationExportJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case jobIds
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for jobfilter0 in filters {
                try filtersContainer.encode(jobfilter0)
            }
        }
        if let jobIds = jobIds {
            var jobIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobIds)
            for jobid0 in jobIds {
                try jobIdsContainer.encode(jobid0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeRecommendationExportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRecommendationExportJobsInput: Swift.Equatable {
    /// An array of objects to specify a filter that returns a more specific list of export jobs.
    public var filters: [ComputeOptimizerClientTypes.JobFilter]?
    /// The identification numbers of the export jobs to return. An export job ID is returned when you create an export using the [ExportAutoScalingGroupRecommendations] or [ExportEC2InstanceRecommendations] actions. All export jobs created in the last seven days are returned if this parameter is omitted.
    public var jobIds: [Swift.String]?
    /// The maximum number of export jobs to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of export jobs.
    public var nextToken: Swift.String?

    public init (
        filters: [ComputeOptimizerClientTypes.JobFilter]? = nil,
        jobIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.jobIds = jobIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeRecommendationExportJobsInputBody: Swift.Equatable {
    let jobIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.JobFilter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeRecommendationExportJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case jobIds
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobIds)
        var jobIdsDecoded0:[Swift.String]? = nil
        if let jobIdsContainer = jobIdsContainer {
            jobIdsDecoded0 = [Swift.String]()
            for string0 in jobIdsContainer {
                if let string0 = string0 {
                    jobIdsDecoded0?.append(string0)
                }
            }
        }
        jobIds = jobIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.JobFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.JobFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.JobFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeRecommendationExportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRecommendationExportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRecommendationExportJobsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRecommendationExportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRecommendationExportJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationExportJobs = output.recommendationExportJobs
        } else {
            self.nextToken = nil
            self.recommendationExportJobs = nil
        }
    }
}

public struct DescribeRecommendationExportJobsOutputResponse: Swift.Equatable {
    /// The token to use to advance to the next page of export jobs. This value is null when there are no more pages of export jobs to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe recommendation export jobs.
    public var recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationExportJobs = recommendationExportJobs
    }
}

struct DescribeRecommendationExportJobsOutputResponseBody: Swift.Equatable {
    let recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]?
    let nextToken: Swift.String?
}

extension DescribeRecommendationExportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationExportJobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationExportJobsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationExportJob?].self, forKey: .recommendationExportJobs)
        var recommendationExportJobsDecoded0:[ComputeOptimizerClientTypes.RecommendationExportJob]? = nil
        if let recommendationExportJobsContainer = recommendationExportJobsContainer {
            recommendationExportJobsDecoded0 = [ComputeOptimizerClientTypes.RecommendationExportJob]()
            for structure0 in recommendationExportJobsContainer {
                if let structure0 = structure0 {
                    recommendationExportJobsDecoded0?.append(structure0)
                }
            }
        }
        recommendationExportJobs = recommendationExportJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ComputeOptimizerClientTypes.EBSFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of Amazon Elastic Block Store (Amazon EBS) volume recommendations. Use this filter with the [GetEBSVolumeRecommendations] action. You can use LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, JobFilter with the [DescribeRecommendationExportJobs] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct EBSFilter: Swift.Equatable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized).
        public var name: ComputeOptimizerClientTypes.EBSFilterName?
        /// The value of the filter. The valid values are Optimized, or NotOptimized.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.EBSFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum EBSFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFilterName] {
            return [
                .finding,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSFilterName(rawValue: rawValue) ?? EBSFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum EBSFinding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFinding] {
            return [
                .notOptimized,
                .optimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSFinding(rawValue: rawValue) ?? EBSFinding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum EBSMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case volumeReadBytesPerSecond
        case volumeReadOpsPerSecond
        case volumeWriteBytesPerSecond
        case volumeWriteOpsPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSMetricName] {
            return [
                .volumeReadBytesPerSecond,
                .volumeReadOpsPerSecond,
                .volumeWriteBytesPerSecond,
                .volumeWriteOpsPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .volumeReadBytesPerSecond: return "VolumeReadBytesPerSecond"
            case .volumeReadOpsPerSecond: return "VolumeReadOpsPerSecond"
            case .volumeWriteBytesPerSecond: return "VolumeWriteBytesPerSecond"
            case .volumeWriteOpsPerSecond: return "VolumeWriteOpsPerSecond"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSMetricName(rawValue: rawValue) ?? EBSMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.EBSUtilizationMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a utilization metric of an Amazon Elastic Block Store (Amazon EBS) volume. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option.
    public struct EBSUtilizationMetric: Swift.Equatable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * VolumeReadOpsPerSecond - The completed read operations per second from the volume in a specified period of time. Unit: Count
        ///
        /// * VolumeWriteOpsPerSecond - The completed write operations per second to the volume in a specified period of time. Unit: Count
        ///
        /// * VolumeReadBytesPerSecond - The bytes read per second from the volume in a specified period of time. Unit: Bytes
        ///
        /// * VolumeWriteBytesPerSecond - The bytes written to the volume in a specified period of time. Unit: Bytes
        public var name: ComputeOptimizerClientTypes.EBSMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.EBSMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceLaunchType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceLaunchType] {
            return [
                .ec2,
                .fargate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "Fargate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceLaunchType(rawValue: rawValue) ?? ECSServiceLaunchType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpu
        case memory
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceMetricName] {
            return [
                .cpu,
                .memory,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .memory: return "Memory"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceMetricName(rawValue: rawValue) ?? ECSServiceMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceMetricStatistic] {
            return [
                .average,
                .maximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceMetricStatistic(rawValue: rawValue) ?? ECSServiceMetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ECSServiceProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lowerBoundValues
        case name
        case timestamps
        case upperBoundValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lowerBoundValues = lowerBoundValues {
            var lowerBoundValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lowerBoundValues)
            for metricvalue0 in lowerBoundValues {
                try lowerBoundValuesContainer.encode(metricvalue0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let timestamps = timestamps {
            var timestampsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestamps)
            for timestamp0 in timestamps {
                try timestampsContainer.encodeTimestamp(timestamp0, format: .epochSeconds)
            }
        }
        if let upperBoundValues = upperBoundValues {
            var upperBoundValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .upperBoundValues)
            for metricvalue0 in upperBoundValues {
                try upperBoundValuesContainer.encode(metricvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceMetricName.self, forKey: .name)
        name = nameDecoded
        let timestampsContainer = try containerValues.decodeIfPresent([ClientRuntime.Date?].self, forKey: .timestamps)
        var timestampsDecoded0:[ClientRuntime.Date]? = nil
        if let timestampsContainer = timestampsContainer {
            timestampsDecoded0 = [ClientRuntime.Date]()
            for timestamp0 in timestampsContainer {
                if let timestamp0 = timestamp0 {
                    timestampsDecoded0?.append(timestamp0)
                }
            }
        }
        timestamps = timestampsDecoded0
        let upperBoundValuesContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .upperBoundValues)
        var upperBoundValuesDecoded0:[Swift.Double]? = nil
        if let upperBoundValuesContainer = upperBoundValuesContainer {
            upperBoundValuesDecoded0 = [Swift.Double]()
            for double0 in upperBoundValuesContainer {
                if let double0 = double0 {
                    upperBoundValuesDecoded0?.append(double0)
                }
            }
        }
        upperBoundValues = upperBoundValuesDecoded0
        let lowerBoundValuesContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .lowerBoundValues)
        var lowerBoundValuesDecoded0:[Swift.Double]? = nil
        if let lowerBoundValuesContainer = lowerBoundValuesContainer {
            lowerBoundValuesDecoded0 = [Swift.Double]()
            for double0 in lowerBoundValuesContainer {
                if let double0 = double0 {
                    lowerBoundValuesDecoded0?.append(double0)
                }
            }
        }
        lowerBoundValues = lowerBoundValuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the projected metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the metric data of your service against its projected metric data.
    public struct ECSServiceProjectedMetric: Swift.Equatable {
        /// The lower bound values for the projected metric.
        public var lowerBoundValues: [Swift.Double]?
        /// The name of the projected metric. The following metrics are available:
        ///
        /// * Cpu — The percentage of allocated compute units that are currently in use on the service tasks.
        ///
        /// * Memory — The percentage of memory that's currently in use on the service tasks.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The timestamps of the projected metric.
        public var timestamps: [ClientRuntime.Date]?
        /// The upper bound values for the projected metric.
        public var upperBoundValues: [Swift.Double]?

        public init (
            lowerBoundValues: [Swift.Double]? = nil,
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            upperBoundValues: [Swift.Double]? = nil
        )
        {
            self.lowerBoundValues = lowerBoundValues
            self.name = name
            self.timestamps = timestamps
            self.upperBoundValues = upperBoundValues
        }
    }

}

extension ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lowerBoundValue
        case name
        case statistic
        case upperBoundValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if lowerBoundValue != 0.0 {
            try encodeContainer.encode(lowerBoundValue, forKey: .lowerBoundValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if upperBoundValue != 0.0 {
            try encodeContainer.encode(upperBoundValue, forKey: .upperBoundValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let lowerBoundValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lowerBoundValue) ?? 0.0
        lowerBoundValue = lowerBoundValueDecoded
        let upperBoundValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .upperBoundValue) ?? 0.0
        upperBoundValue = upperBoundValueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the projected utilization metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the utilization metric data of your service against its projected utilization metric data.
    public struct ECSServiceProjectedUtilizationMetric: Swift.Equatable {
        /// The lower bound values for the projected utilization metrics.
        public var lowerBoundValue: Swift.Double
        /// The name of the projected utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu — The percentage of allocated compute units that are currently in use on the service tasks.
        ///
        /// * Memory — The percentage of memory that's currently in use on the service tasks.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The statistic of the projected utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic?
        /// The upper bound values for the projected utilization metrics.
        public var upperBoundValue: Swift.Double

        public init (
            lowerBoundValue: Swift.Double = 0.0,
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic? = nil,
            upperBoundValue: Swift.Double = 0.0
        )
        {
            self.lowerBoundValue = lowerBoundValue
            self.name = name
            self.statistic = statistic
            self.upperBoundValue = upperBoundValue
        }
    }

}

extension ComputeOptimizerClientTypes.ECSServiceRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentPerformanceRisk
        case currentServiceConfiguration
        case finding
        case findingReasonCodes
        case lastRefreshTimestamp
        case launchType
        case lookbackPeriodInDays
        case serviceArn
        case serviceRecommendationOptions
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let currentServiceConfiguration = self.currentServiceConfiguration {
            try encodeContainer.encode(currentServiceConfiguration, forKey: .currentServiceConfiguration)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for ecsservicerecommendationfindingreasoncode0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(ecsservicerecommendationfindingreasoncode0.rawValue)
            }
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encodeTimestamp(lastRefreshTimestamp, format: .epochSeconds, forKey: .lastRefreshTimestamp)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if lookbackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookbackPeriodInDays, forKey: .lookbackPeriodInDays)
        }
        if let serviceArn = self.serviceArn {
            try encodeContainer.encode(serviceArn, forKey: .serviceArn)
        }
        if let serviceRecommendationOptions = serviceRecommendationOptions {
            var serviceRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRecommendationOptions)
            for ecsservicerecommendationoption0 in serviceRecommendationOptions {
                try serviceRecommendationOptionsContainer.encode(ecsservicerecommendationoption0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for ecsserviceutilizationmetric0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(ecsserviceutilizationmetric0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceArn)
        serviceArn = serviceArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentServiceConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ServiceConfiguration.self, forKey: .currentServiceConfiguration)
        currentServiceConfiguration = currentServiceConfigurationDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookbackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookbackPeriodInDays) ?? 0.0
        lookbackPeriodInDays = lookbackPeriodInDaysDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceLaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let lastRefreshTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceRecommendationFinding.self, forKey: .finding)
        finding = findingDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]()
            for enum0 in findingReasonCodesContainer {
                if let enum0 = enum0 {
                    findingReasonCodesDecoded0?.append(enum0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
        let serviceRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendationOption?].self, forKey: .serviceRecommendationOptions)
        var serviceRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendationOption]? = nil
        if let serviceRecommendationOptionsContainer = serviceRecommendationOptionsContainer {
            serviceRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendationOption]()
            for structure0 in serviceRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    serviceRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        serviceRecommendationOptions = serviceRecommendationOptionsDecoded0
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an Amazon ECS service recommendation.
    public struct ECSServiceRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the Amazon ECS service.
        public var accountId: Swift.String?
        /// The risk of the current Amazon ECS service not meeting the performance needs of its workloads. The higher the risk, the more likely the current service can't meet the performance requirements of its workload.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// The configuration of the current Amazon ECS service.
        public var currentServiceConfiguration: ComputeOptimizerClientTypes.ServiceConfiguration?
        /// The finding classification of an Amazon ECS service. Findings for Amazon ECS services include:
        ///
        /// * Underprovisioned — When Compute Optimizer detects that there’s not enough memory or CPU, an Amazon ECS service is considered under-provisioned. An under-provisioned service might result in poor application performance.
        ///
        /// * Overprovisioned — When Compute Optimizer detects that there’s excessive memory or CPU, an Amazon ECS service is considered over-provisioned. An over-provisioned service might result in additional infrastructure costs.
        ///
        /// * Optimized — When both the CPU and memory of your Amazon ECS service meet the performance requirements of your workload, the service is considered optimized.
        public var finding: ComputeOptimizerClientTypes.ECSServiceRecommendationFinding?
        /// The reason for the finding classification of an Amazon ECS service. Finding reason codes for Amazon ECS services include:
        ///
        /// * CPUUnderprovisioned — The service CPU configuration can be sized up to enhance the performance of your workload. This is identified by analyzing the CPUUtilization metric of the current service during the look-back period.
        ///
        /// * CPUOverprovisioned — The service CPU configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the CPUUtilization metric of the current service during the look-back period.
        ///
        /// * MemoryUnderprovisioned — The service memory configuration can be sized up to enhance the performance of your workload. This is identified by analyzing the MemoryUtilization metric of the current service during the look-back period.
        ///
        /// * MemoryOverprovisioned — The service memory configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the MemoryUtilization metric of the current service during the look-back period.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]?
        /// The timestamp of when the Amazon ECS service recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The launch type the Amazon ECS service is using. Compute Optimizer only supports the Fargate launch type.
        public var launchType: ComputeOptimizerClientTypes.ECSServiceLaunchType?
        /// The number of days the Amazon ECS service utilization metrics were analyzed.
        public var lookbackPeriodInDays: Swift.Double
        /// The Amazon Resource Name (ARN) of the current Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
        public var serviceArn: Swift.String?
        /// An array of objects that describe the recommendation options for the Amazon ECS service.
        public var serviceRecommendationOptions: [ComputeOptimizerClientTypes.ECSServiceRecommendationOption]?
        /// An array of objects that describe the utilization metrics of the Amazon ECS service.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            currentServiceConfiguration: ComputeOptimizerClientTypes.ServiceConfiguration? = nil,
            finding: ComputeOptimizerClientTypes.ECSServiceRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            launchType: ComputeOptimizerClientTypes.ECSServiceLaunchType? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            serviceArn: Swift.String? = nil,
            serviceRecommendationOptions: [ComputeOptimizerClientTypes.ECSServiceRecommendationOption]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentPerformanceRisk = currentPerformanceRisk
            self.currentServiceConfiguration = currentServiceConfiguration
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.launchType = launchType
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.serviceArn = serviceArn
            self.serviceRecommendationOptions = serviceRecommendationOptions
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes.ECSServiceRecommendationFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceRecommendationFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of Amazon ECS service recommendations. Use this filter with the [GetECSServiceRecommendations] action.
    public struct ECSServiceRecommendationFilter: Swift.Equatable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification. Specify FindingReasonCode to return recommendations with a specific finding reason code.
        public var name: ComputeOptimizerClientTypes.ECSServiceRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows:
        ///
        /// * If you specify the name parameter as Finding, specify Optimized, NotOptimized, or Unavailable.
        ///
        /// * If you specify the name parameter as FindingReasonCode, specify CPUUnderprovisioned, CPUOverprovisioned, MemoryUnderprovisioned, or MemoryOverprovisioned.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.ECSServiceRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceRecommendationFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case findingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFilterName] {
            return [
                .finding,
                .findingReasonCode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCode: return "FindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceRecommendationFilterName(rawValue: rawValue) ?? ECSServiceRecommendationFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceRecommendationFinding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFinding] {
            return [
                .optimized,
                .overProvisioned,
                .underProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceRecommendationFinding(rawValue: rawValue) ?? ECSServiceRecommendationFinding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ECSServiceRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ECSServiceRecommendationFindingReasonCode(rawValue: rawValue) ?? ECSServiceRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ECSServiceRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerRecommendations
        case cpu
        case memory
        case projectedUtilizationMetrics
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerRecommendations = containerRecommendations {
            var containerRecommendationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerRecommendations)
            for containerrecommendation0 in containerRecommendations {
                try containerRecommendationsContainer.encode(containerrecommendation0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for ecsserviceprojectedutilizationmetric0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(ecsserviceprojectedutilizationmetric0)
            }
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let containerRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ContainerRecommendation?].self, forKey: .containerRecommendations)
        var containerRecommendationsDecoded0:[ComputeOptimizerClientTypes.ContainerRecommendation]? = nil
        if let containerRecommendationsContainer = containerRecommendationsContainer {
            containerRecommendationsDecoded0 = [ComputeOptimizerClientTypes.ContainerRecommendation]()
            for structure0 in containerRecommendationsContainer {
                if let structure0 = structure0 {
                    containerRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        containerRecommendations = containerRecommendationsDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the recommendation options for an Amazon ECS service.
    public struct ECSServiceRecommendationOption: Swift.Equatable {
        /// The CPU and memory size recommendations for the containers within the task of your Amazon ECS service.
        public var containerRecommendations: [ComputeOptimizerClientTypes.ContainerRecommendation]?
        /// The CPU size of the Amazon ECS service recommendation option.
        public var cpu: Swift.Int?
        /// The memory size of the Amazon ECS service recommendation option.
        public var memory: Swift.Int?
        /// An array of objects that describe the projected utilization metrics of the Amazon ECS service recommendation option.
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]?
        /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init (
            containerRecommendations: [ComputeOptimizerClientTypes.ContainerRecommendation]? = nil,
            cpu: Swift.Int? = nil,
            memory: Swift.Int? = nil,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]? = nil,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.containerRecommendations = containerRecommendations
            self.cpu = cpu
            self.memory = memory
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.savingsOpportunity = savingsOpportunity
        }
    }

}

extension ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectedMetrics
        case recommendedCpuUnits
        case recommendedMemorySize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectedMetrics = projectedMetrics {
            var projectedMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedMetrics)
            for ecsserviceprojectedmetric0 in projectedMetrics {
                try projectedMetricsContainer.encode(ecsserviceprojectedmetric0)
            }
        }
        if recommendedCpuUnits != 0 {
            try encodeContainer.encode(recommendedCpuUnits, forKey: .recommendedCpuUnits)
        }
        if recommendedMemorySize != 0 {
            try encodeContainer.encode(recommendedMemorySize, forKey: .recommendedMemorySize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedCpuUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recommendedCpuUnits) ?? 0
        recommendedCpuUnits = recommendedCpuUnitsDecoded
        let recommendedMemorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recommendedMemorySize) ?? 0
        recommendedMemorySize = recommendedMemorySizeDecoded
        let projectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceProjectedMetric?].self, forKey: .projectedMetrics)
        var projectedMetricsDecoded0:[ComputeOptimizerClientTypes.ECSServiceProjectedMetric]? = nil
        if let projectedMetricsContainer = projectedMetricsContainer {
            projectedMetricsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceProjectedMetric]()
            for structure0 in projectedMetricsContainer {
                if let structure0 = structure0 {
                    projectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedMetrics = projectedMetricsDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the projected metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the metric data of your service against its projected metric data.
    public struct ECSServiceRecommendedOptionProjectedMetric: Swift.Equatable {
        /// An array of objects that describe the projected metric.
        public var projectedMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedMetric]?
        /// The recommended CPU size for the Amazon ECS service.
        public var recommendedCpuUnits: Swift.Int
        /// The recommended memory size for the Amazon ECS service.
        public var recommendedMemorySize: Swift.Int

        public init (
            projectedMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedMetric]? = nil,
            recommendedCpuUnits: Swift.Int = 0,
            recommendedMemorySize: Swift.Int = 0
        )
        {
            self.projectedMetrics = projectedMetrics
            self.recommendedCpuUnits = recommendedCpuUnits
            self.recommendedMemorySize = recommendedMemorySize
        }
    }

}

extension ComputeOptimizerClientTypes.ECSServiceUtilizationMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ECSServiceMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the utilization metric of an Amazon ECS service. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the utilization metric data of your service against its projected utilization metric data.
    public struct ECSServiceUtilizationMetric: Swift.Equatable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu — The amount of CPU capacity that's used in the service.
        ///
        /// * Memory — The amount of memory that's used in the service.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.EffectiveRecommendationPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuVendorArchitectures
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuVendorArchitectures = cpuVendorArchitectures {
            var cpuVendorArchitecturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cpuVendorArchitectures)
            for cpuvendorarchitecture0 in cpuVendorArchitectures {
                try cpuVendorArchitecturesContainer.encode(cpuvendorarchitecture0.rawValue)
            }
        }
        if let enhancedInfrastructureMetrics = self.enhancedInfrastructureMetrics {
            try encodeContainer.encode(enhancedInfrastructureMetrics.rawValue, forKey: .enhancedInfrastructureMetrics)
        }
        if let externalMetricsPreference = self.externalMetricsPreference {
            try encodeContainer.encode(externalMetricsPreference, forKey: .externalMetricsPreference)
        }
        if let inferredWorkloadTypes = self.inferredWorkloadTypes {
            try encodeContainer.encode(inferredWorkloadTypes.rawValue, forKey: .inferredWorkloadTypes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuVendorArchitecturesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.CpuVendorArchitecture?].self, forKey: .cpuVendorArchitectures)
        var cpuVendorArchitecturesDecoded0:[ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil
        if let cpuVendorArchitecturesContainer = cpuVendorArchitecturesContainer {
            cpuVendorArchitecturesDecoded0 = [ComputeOptimizerClientTypes.CpuVendorArchitecture]()
            for enum0 in cpuVendorArchitecturesContainer {
                if let enum0 = enum0 {
                    cpuVendorArchitecturesDecoded0?.append(enum0)
                }
            }
        }
        cpuVendorArchitectures = cpuVendorArchitecturesDecoded0
        let enhancedInfrastructureMetricsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics.self, forKey: .enhancedInfrastructureMetrics)
        enhancedInfrastructureMetrics = enhancedInfrastructureMetricsDecoded
        let inferredWorkloadTypesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.InferredWorkloadTypesPreference.self, forKey: .inferredWorkloadTypes)
        inferredWorkloadTypes = inferredWorkloadTypesDecoded
        let externalMetricsPreferenceDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExternalMetricsPreference.self, forKey: .externalMetricsPreference)
        externalMetricsPreference = externalMetricsPreferenceDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the effective recommendation preferences for a resource.
    public struct EffectiveRecommendationPreferences: Swift.Equatable {
        /// Describes the CPU vendor and architecture for an instance or Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:
        ///
        /// * A [GetEC2InstanceRecommendations] or [GetAutoScalingGroupRecommendations] request, Compute Optimizer returns recommendations that consist of Graviton2 instance types only.
        ///
        /// * A [GetEC2RecommendationProjectedMetrics] request, Compute Optimizer returns projected utilization metrics for Graviton2 instance type recommendations only.
        ///
        /// * A [ExportEC2InstanceRecommendations] or [ExportAutoScalingGroupRecommendations] request, Compute Optimizer exports recommendations that consist of Graviton2 instance types only.
        public var cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]?
        /// Describes the activation status of the enhanced infrastructure metrics preference. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied to recommendations. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
        /// An object that describes the external metrics recommendation preference. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response.
        public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
        /// Describes the activation status of the inferred workload types preference. A status of Active confirms that the preference is applied in the latest recommendation refresh. A status of Inactive confirms that it's not yet applied to recommendations.
        public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?

        public init (
            cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil,
            enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
            externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
            inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil
        )
        {
            self.cpuVendorArchitectures = cpuVendorArchitectures
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.externalMetricsPreference = externalMetricsPreference
            self.inferredWorkloadTypes = inferredWorkloadTypes
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum EnhancedInfrastructureMetrics: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [EnhancedInfrastructureMetrics] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnhancedInfrastructureMetrics(rawValue: rawValue) ?? EnhancedInfrastructureMetrics.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.EnrollmentFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EnrollmentFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of account enrollment statuses. Use this filter with the [GetEnrollmentStatusesForOrganization] action.
    public struct EnrollmentFilter: Swift.Equatable {
        /// The name of the filter. Specify Status to return accounts with a specific enrollment status (for example, Active).
        public var name: ComputeOptimizerClientTypes.EnrollmentFilterName?
        /// The value of the filter. The valid values are Active, Inactive, Pending, and Failed.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.EnrollmentFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum EnrollmentFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EnrollmentFilterName] {
            return [
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnrollmentFilterName(rawValue: rawValue) ?? EnrollmentFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.EstimatedMonthlySavings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currency
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = self.currency {
            try encodeContainer.encode(currency.rawValue, forKey: .currency)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currencyDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Currency.self, forKey: .currency)
        currency = currencyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the estimated monthly savings amount possible, based on On-Demand instance pricing, by adopting Compute Optimizer recommendations for a given resource. For more information, see [Estimated monthly savings and savings opportunities](https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-ec2-recommendations.html#ec2-savings-calculation) in the Compute Optimizer User Guide.
    public struct EstimatedMonthlySavings: Swift.Equatable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init (
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }

}

extension ExportAutoScalingGroupRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableautoscalinggroupfield0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableautoscalinggroupfield0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

extension ExportAutoScalingGroupRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportAutoScalingGroupRecommendationsInput: Swift.Equatable {
    /// The IDs of the Amazon Web Services accounts for which to export Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Auto Scaling group recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool
    /// An object to specify the preferences for the Auto Scaling group recommendations to export.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.recommendationPreferences = recommendationPreferences
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportAutoScalingGroupRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.Filter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension ExportAutoScalingGroupRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableAutoScalingGroupField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]()
            for enum0 in fieldsToExportContainer {
                if let enum0 = enum0 {
                    fieldsToExportDecoded0?.append(enum0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}

extension ExportAutoScalingGroupRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportAutoScalingGroupRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportAutoScalingGroupRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportAutoScalingGroupRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportAutoScalingGroupRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportAutoScalingGroupRecommendationsOutputResponse: Swift.Equatable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportAutoScalingGroupRecommendationsOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportAutoScalingGroupRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ComputeOptimizerClientTypes.ExportDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the destination of the recommendations export and metadata files.
    public struct ExportDestination: Swift.Equatable {
        /// An object that describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
        public var s3: ComputeOptimizerClientTypes.S3Destination?

        public init (
            s3: ComputeOptimizerClientTypes.S3Destination? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension ExportEBSVolumeRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportablevolumefield0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportablevolumefield0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ebsfilter0 in filters {
                try filtersContainer.encode(ebsfilter0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

extension ExportEBSVolumeRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportEBSVolumeRecommendationsInput: Swift.Equatable {
    /// The IDs of the Amazon Web Services accounts for which to export Amazon EBS volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Amazon EBS volume recommendations.
    public var filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportEBSVolumeRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
}

extension ExportEBSVolumeRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EBSFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableVolumeField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableVolumeField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableVolumeField]()
            for enum0 in fieldsToExportContainer {
                if let enum0 = enum0 {
                    fieldsToExportDecoded0?.append(enum0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportEBSVolumeRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportEBSVolumeRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportEBSVolumeRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportEBSVolumeRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportEBSVolumeRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportEBSVolumeRecommendationsOutputResponse: Swift.Equatable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportEBSVolumeRecommendationsOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportEBSVolumeRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ExportEC2InstanceRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableinstancefield0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableinstancefield0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

extension ExportEC2InstanceRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportEC2InstanceRecommendationsInput: Swift.Equatable {
    /// The IDs of the Amazon Web Services accounts for which to export instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of instance recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool
    /// An object to specify the preferences for the Amazon EC2 instance recommendations to export.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.recommendationPreferences = recommendationPreferences
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportEC2InstanceRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.Filter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension ExportEC2InstanceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableInstanceField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableInstanceField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableInstanceField]()
            for enum0 in fieldsToExportContainer {
                if let enum0 = enum0 {
                    fieldsToExportDecoded0?.append(enum0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}

extension ExportEC2InstanceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportEC2InstanceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportEC2InstanceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportEC2InstanceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportEC2InstanceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportEC2InstanceRecommendationsOutputResponse: Swift.Equatable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportEC2InstanceRecommendationsOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportEC2InstanceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ExportECSServiceRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableecsservicefield0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableecsservicefield0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ecsservicerecommendationfilter0 in filters {
                try filtersContainer.encode(ecsservicerecommendationfilter0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

extension ExportECSServiceRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportECSServiceRecommendationsInput: Swift.Equatable {
    /// The Amazon Web Services account IDs for the export Amazon ECS service recommendations. If your account is the management account or the delegated administrator of an organization, use this parameter to specify the member account you want to export recommendations to. This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive. If this parameter or the include member accounts parameter is omitted, the recommendations for member accounts aren't included in the export. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableECSServiceField]?
    /// The format of the export file. The CSV file is the only export file format currently supported.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Amazon ECS service recommendations.
    public var filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    /// If your account is the management account or the delegated administrator of an organization, this parameter indicates whether to include recommendations for resources in all member accounts of the organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file. If this parameter or the account ID parameter is omitted, recommendations for member accounts aren't included in the export.
    public var includeMemberAccounts: Swift.Bool
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableECSServiceField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportECSServiceRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableECSServiceField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
}

extension ExportECSServiceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableECSServiceField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableECSServiceField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableECSServiceField]()
            for enum0 in fieldsToExportContainer {
                if let enum0 = enum0 {
                    fieldsToExportDecoded0?.append(enum0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportECSServiceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportECSServiceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportECSServiceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportECSServiceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportECSServiceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportECSServiceRecommendationsOutputResponse: Swift.Equatable {
    /// The identification number of the export job. To view the status of an export job, use the [DescribeRecommendationExportJobs] action and specify the job ID.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportECSServiceRecommendationsOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportECSServiceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ExportLambdaFunctionRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportablelambdafunctionfield0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportablelambdafunctionfield0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for lambdafunctionrecommendationfilter0 in filters {
                try filtersContainer.encode(lambdafunctionrecommendationfilter0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

extension ExportLambdaFunctionRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportLambdaFunctionRecommendationsInput: Swift.Equatable {
    /// The IDs of the Amazon Web Services accounts for which to export Lambda function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Lambda function recommendations.
    public var filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportLambdaFunctionRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
}

extension ExportLambdaFunctionRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableLambdaFunctionField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableLambdaFunctionField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]()
            for enum0 in fieldsToExportContainer {
                if let enum0 = enum0 {
                    fieldsToExportDecoded0?.append(enum0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportLambdaFunctionRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportLambdaFunctionRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportLambdaFunctionRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportLambdaFunctionRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportLambdaFunctionRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportLambdaFunctionRecommendationsOutputResponse: Swift.Equatable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportLambdaFunctionRecommendationsOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportLambdaFunctionRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableAutoScalingGroupField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfigurationDesiredCapacity
        case currentConfigurationInstanceType
        case currentConfigurationMaxSize
        case currentConfigurationMinSize
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentPerformanceRisk
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case effectiveRecommendationPreferencesCpuVendorArchitectures
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics
        case effectiveRecommendationPreferencesInferredWorkloadTypes
        case finding
        case inferredWorkloadTypes
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationDesiredCapacity
        case recommendationOptionsConfigurationInstanceType
        case recommendationOptionsConfigurationMaxSize
        case recommendationOptionsConfigurationMinSize
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsMemory
        case recommendationOptionsMigrationEffort
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityPercentage
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableAutoScalingGroupField] {
            return [
                .accountId,
                .autoScalingGroupArn,
                .autoScalingGroupName,
                .currentConfigurationDesiredCapacity,
                .currentConfigurationInstanceType,
                .currentConfigurationMaxSize,
                .currentConfigurationMinSize,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentPerformanceRisk,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .effectiveRecommendationPreferencesCpuVendorArchitectures,
                .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics,
                .effectiveRecommendationPreferencesInferredWorkloadTypes,
                .finding,
                .inferredWorkloadTypes,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationDesiredCapacity,
                .recommendationOptionsConfigurationInstanceType,
                .recommendationOptionsConfigurationMaxSize,
                .recommendationOptionsConfigurationMinSize,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsMemory,
                .recommendationOptionsMigrationEffort,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityPercentage,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .autoScalingGroupArn: return "AutoScalingGroupArn"
            case .autoScalingGroupName: return "AutoScalingGroupName"
            case .currentConfigurationDesiredCapacity: return "CurrentConfigurationDesiredCapacity"
            case .currentConfigurationInstanceType: return "CurrentConfigurationInstanceType"
            case .currentConfigurationMaxSize: return "CurrentConfigurationMaxSize"
            case .currentConfigurationMinSize: return "CurrentConfigurationMinSize"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .effectiveRecommendationPreferencesCpuVendorArchitectures: return "EffectiveRecommendationPreferencesCpuVendorArchitectures"
            case .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics: return "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
            case .effectiveRecommendationPreferencesInferredWorkloadTypes: return "EffectiveRecommendationPreferencesInferredWorkloadTypes"
            case .finding: return "Finding"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationDesiredCapacity: return "RecommendationOptionsConfigurationDesiredCapacity"
            case .recommendationOptionsConfigurationInstanceType: return "RecommendationOptionsConfigurationInstanceType"
            case .recommendationOptionsConfigurationMaxSize: return "RecommendationOptionsConfigurationMaxSize"
            case .recommendationOptionsConfigurationMinSize: return "RecommendationOptionsConfigurationMinSize"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsMigrationEffort: return "RecommendationOptionsMigrationEffort"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableAutoScalingGroupField(rawValue: rawValue) ?? ExportableAutoScalingGroupField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableECSServiceField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentPerformanceRisk
        case currentServiceConfigurationAutoScalingConfiguration
        case currentServiceConfigurationCpu
        case currentServiceConfigurationMemory
        case currentServiceConfigurationTaskDefinitionArn
        case currentServiceContainerConfigurations
        case finding
        case findingReasonCodes
        case lastRefreshTimestamp
        case launchType
        case lookbackPeriodInDays
        case recommendationOptionsContainerRecommendations
        case recommendationOptionsCpu
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsMemory
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityPercentage
        case serviceArn
        case utilizationMetricsCpuMaximum
        case utilizationMetricsMemoryMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableECSServiceField] {
            return [
                .accountId,
                .currentPerformanceRisk,
                .currentServiceConfigurationAutoScalingConfiguration,
                .currentServiceConfigurationCpu,
                .currentServiceConfigurationMemory,
                .currentServiceConfigurationTaskDefinitionArn,
                .currentServiceContainerConfigurations,
                .finding,
                .findingReasonCodes,
                .lastRefreshTimestamp,
                .launchType,
                .lookbackPeriodInDays,
                .recommendationOptionsContainerRecommendations,
                .recommendationOptionsCpu,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsMemory,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityPercentage,
                .serviceArn,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsMemoryMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentServiceConfigurationAutoScalingConfiguration: return "CurrentServiceConfigurationAutoScalingConfiguration"
            case .currentServiceConfigurationCpu: return "CurrentServiceConfigurationCpu"
            case .currentServiceConfigurationMemory: return "CurrentServiceConfigurationMemory"
            case .currentServiceConfigurationTaskDefinitionArn: return "CurrentServiceConfigurationTaskDefinitionArn"
            case .currentServiceContainerConfigurations: return "CurrentServiceContainerConfigurations"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .launchType: return "LaunchType"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsContainerRecommendations: return "RecommendationOptionsContainerRecommendations"
            case .recommendationOptionsCpu: return "RecommendationOptionsCpu"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .serviceArn: return "ServiceArn"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableECSServiceField(rawValue: rawValue) ?? ExportableECSServiceField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableInstanceField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentInstanceType
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentPerformanceRisk
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case effectiveRecommendationPreferencesCpuVendorArchitectures
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics
        case effectiveRecommendationPreferencesExternalMetricsSource
        case effectiveRecommendationPreferencesInferredWorkloadTypes
        case finding
        case findingReasonCodes
        case inferredWorkloadTypes
        case instanceArn
        case instanceName
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationsSourcesRecommendationSourceArn
        case recommendationsSourcesRecommendationSourceType
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsInstanceType
        case recommendationOptionsMemory
        case recommendationOptionsMigrationEffort
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsPlatformDifferences
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityPercentage
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableInstanceField] {
            return [
                .accountId,
                .currentInstanceType,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentPerformanceRisk,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .effectiveRecommendationPreferencesCpuVendorArchitectures,
                .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics,
                .effectiveRecommendationPreferencesExternalMetricsSource,
                .effectiveRecommendationPreferencesInferredWorkloadTypes,
                .finding,
                .findingReasonCodes,
                .inferredWorkloadTypes,
                .instanceArn,
                .instanceName,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationsSourcesRecommendationSourceArn,
                .recommendationsSourcesRecommendationSourceType,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsInstanceType,
                .recommendationOptionsMemory,
                .recommendationOptionsMigrationEffort,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsPlatformDifferences,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityPercentage,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentInstanceType: return "CurrentInstanceType"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .effectiveRecommendationPreferencesCpuVendorArchitectures: return "EffectiveRecommendationPreferencesCpuVendorArchitectures"
            case .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics: return "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
            case .effectiveRecommendationPreferencesExternalMetricsSource: return "EffectiveRecommendationPreferencesExternalMetricsSource"
            case .effectiveRecommendationPreferencesInferredWorkloadTypes: return "EffectiveRecommendationPreferencesInferredWorkloadTypes"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .instanceArn: return "InstanceArn"
            case .instanceName: return "InstanceName"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationsSourcesRecommendationSourceArn: return "RecommendationsSourcesRecommendationSourceArn"
            case .recommendationsSourcesRecommendationSourceType: return "RecommendationsSourcesRecommendationSourceType"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsInstanceType: return "RecommendationOptionsInstanceType"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsMigrationEffort: return "RecommendationOptionsMigrationEffort"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsPlatformDifferences: return "RecommendationOptionsPlatformDifferences"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableInstanceField(rawValue: rawValue) ?? ExportableInstanceField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableLambdaFunctionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentConfigurationMemorySize
        case currentConfigurationTimeout
        case currentCostAverage
        case currentCostTotal
        case currentPerformanceRisk
        case finding
        case findingReasonCodes
        case functionArn
        case functionVersion
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case numberOfInvocations
        case recommendationOptionsConfigurationMemorySize
        case recommendationOptionsCostHigh
        case recommendationOptionsCostLow
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsProjectedUtilizationMetricsDurationExpected
        case recommendationOptionsProjectedUtilizationMetricsDurationLowerBound
        case recommendationOptionsProjectedUtilizationMetricsDurationUpperBound
        case recommendationOptionsSavingsOpportunityPercentage
        case utilizationMetricsDurationAverage
        case utilizationMetricsDurationMaximum
        case utilizationMetricsMemoryAverage
        case utilizationMetricsMemoryMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableLambdaFunctionField] {
            return [
                .accountId,
                .currentConfigurationMemorySize,
                .currentConfigurationTimeout,
                .currentCostAverage,
                .currentCostTotal,
                .currentPerformanceRisk,
                .finding,
                .findingReasonCodes,
                .functionArn,
                .functionVersion,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .numberOfInvocations,
                .recommendationOptionsConfigurationMemorySize,
                .recommendationOptionsCostHigh,
                .recommendationOptionsCostLow,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsProjectedUtilizationMetricsDurationExpected,
                .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound,
                .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound,
                .recommendationOptionsSavingsOpportunityPercentage,
                .utilizationMetricsDurationAverage,
                .utilizationMetricsDurationMaximum,
                .utilizationMetricsMemoryAverage,
                .utilizationMetricsMemoryMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationMemorySize: return "CurrentConfigurationMemorySize"
            case .currentConfigurationTimeout: return "CurrentConfigurationTimeout"
            case .currentCostAverage: return "CurrentCostAverage"
            case .currentCostTotal: return "CurrentCostTotal"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .functionArn: return "FunctionArn"
            case .functionVersion: return "FunctionVersion"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .numberOfInvocations: return "NumberOfInvocations"
            case .recommendationOptionsConfigurationMemorySize: return "RecommendationOptionsConfigurationMemorySize"
            case .recommendationOptionsCostHigh: return "RecommendationOptionsCostHigh"
            case .recommendationOptionsCostLow: return "RecommendationOptionsCostLow"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsProjectedUtilizationMetricsDurationExpected: return "RecommendationOptionsProjectedUtilizationMetricsDurationExpected"
            case .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound"
            case .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .utilizationMetricsDurationAverage: return "UtilizationMetricsDurationAverage"
            case .utilizationMetricsDurationMaximum: return "UtilizationMetricsDurationMaximum"
            case .utilizationMetricsMemoryAverage: return "UtilizationMetricsMemoryAverage"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableLambdaFunctionField(rawValue: rawValue) ?? ExportableLambdaFunctionField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableVolumeField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentConfigurationVolumeBaselineIops
        case currentConfigurationVolumeBaselineThroughput
        case currentConfigurationVolumeBurstIops
        case currentConfigurationVolumeBurstThroughput
        case currentConfigurationVolumeSize
        case currentConfigurationVolumeType
        case currentMonthlyPrice
        case currentPerformanceRisk
        case finding
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationVolumeBaselineIops
        case recommendationOptionsConfigurationVolumeBaselineThroughput
        case recommendationOptionsConfigurationVolumeBurstIops
        case recommendationOptionsConfigurationVolumeBurstThroughput
        case recommendationOptionsConfigurationVolumeSize
        case recommendationOptionsConfigurationVolumeType
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsMonthlyPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsSavingsOpportunityPercentage
        case utilizationMetricsVolumeReadBytesPerSecondMaximum
        case utilizationMetricsVolumeReadOpsPerSecondMaximum
        case utilizationMetricsVolumeWriteBytesPerSecondMaximum
        case utilizationMetricsVolumeWriteOpsPerSecondMaximum
        case volumeArn
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableVolumeField] {
            return [
                .accountId,
                .currentConfigurationVolumeBaselineIops,
                .currentConfigurationVolumeBaselineThroughput,
                .currentConfigurationVolumeBurstIops,
                .currentConfigurationVolumeBurstThroughput,
                .currentConfigurationVolumeSize,
                .currentConfigurationVolumeType,
                .currentMonthlyPrice,
                .currentPerformanceRisk,
                .finding,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationVolumeBaselineIops,
                .recommendationOptionsConfigurationVolumeBaselineThroughput,
                .recommendationOptionsConfigurationVolumeBurstIops,
                .recommendationOptionsConfigurationVolumeBurstThroughput,
                .recommendationOptionsConfigurationVolumeSize,
                .recommendationOptionsConfigurationVolumeType,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsMonthlyPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsSavingsOpportunityPercentage,
                .utilizationMetricsVolumeReadBytesPerSecondMaximum,
                .utilizationMetricsVolumeReadOpsPerSecondMaximum,
                .utilizationMetricsVolumeWriteBytesPerSecondMaximum,
                .utilizationMetricsVolumeWriteOpsPerSecondMaximum,
                .volumeArn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationVolumeBaselineIops: return "CurrentConfigurationVolumeBaselineIOPS"
            case .currentConfigurationVolumeBaselineThroughput: return "CurrentConfigurationVolumeBaselineThroughput"
            case .currentConfigurationVolumeBurstIops: return "CurrentConfigurationVolumeBurstIOPS"
            case .currentConfigurationVolumeBurstThroughput: return "CurrentConfigurationVolumeBurstThroughput"
            case .currentConfigurationVolumeSize: return "CurrentConfigurationVolumeSize"
            case .currentConfigurationVolumeType: return "CurrentConfigurationVolumeType"
            case .currentMonthlyPrice: return "CurrentMonthlyPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .finding: return "Finding"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationVolumeBaselineIops: return "RecommendationOptionsConfigurationVolumeBaselineIOPS"
            case .recommendationOptionsConfigurationVolumeBaselineThroughput: return "RecommendationOptionsConfigurationVolumeBaselineThroughput"
            case .recommendationOptionsConfigurationVolumeBurstIops: return "RecommendationOptionsConfigurationVolumeBurstIOPS"
            case .recommendationOptionsConfigurationVolumeBurstThroughput: return "RecommendationOptionsConfigurationVolumeBurstThroughput"
            case .recommendationOptionsConfigurationVolumeSize: return "RecommendationOptionsConfigurationVolumeSize"
            case .recommendationOptionsConfigurationVolumeType: return "RecommendationOptionsConfigurationVolumeType"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsMonthlyPrice: return "RecommendationOptionsMonthlyPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .utilizationMetricsVolumeReadBytesPerSecondMaximum: return "UtilizationMetricsVolumeReadBytesPerSecondMaximum"
            case .utilizationMetricsVolumeReadOpsPerSecondMaximum: return "UtilizationMetricsVolumeReadOpsPerSecondMaximum"
            case .utilizationMetricsVolumeWriteBytesPerSecondMaximum: return "UtilizationMetricsVolumeWriteBytesPerSecondMaximum"
            case .utilizationMetricsVolumeWriteOpsPerSecondMaximum: return "UtilizationMetricsVolumeWriteOpsPerSecondMaximum"
            case .volumeArn: return "VolumeArn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableVolumeField(rawValue: rawValue) ?? ExportableVolumeField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ExternalMetricsPreference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case source
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = self.source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExternalMetricsSource.self, forKey: .source)
        source = sourceDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the external metrics preferences for EC2 rightsizing recommendations.
    public struct ExternalMetricsPreference: Swift.Equatable {
        /// Contains the source options for external metrics preferences.
        public var source: ComputeOptimizerClientTypes.ExternalMetricsSource?

        public init (
            source: ComputeOptimizerClientTypes.ExternalMetricsSource? = nil
        )
        {
            self.source = source
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum ExternalMetricsSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case datadog
        case dynatrace
        case instana
        case newrelic
        case sdkUnknown(Swift.String)

        public static var allCases: [ExternalMetricsSource] {
            return [
                .datadog,
                .dynatrace,
                .instana,
                .newrelic,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .datadog: return "Datadog"
            case .dynatrace: return "Dynatrace"
            case .instana: return "Instana"
            case .newrelic: return "NewRelic"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExternalMetricsSource(rawValue: rawValue) ?? ExternalMetricsSource.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum FileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [FileFormat] {
            return [
                .csv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "Csv"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileFormat(rawValue: rawValue) ?? FileFormat.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of recommendations. Use this filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, and JobFilter with the [DescribeRecommendationExportJobs] action.
    public struct Filter: Swift.Equatable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, Underprovisioned). Specify RecommendationSourceType to return recommendations of a specific resource type (for example, Ec2Instance). Specify FindingReasonCodes to return recommendations with a specific finding reason code (for example, CPUUnderprovisioned).
        public var name: ComputeOptimizerClientTypes.FilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter and the resource type that you wish to filter results for:
        ///
        /// * Specify Optimized or NotOptimized if you specify the name parameter as Finding and you want to filter results for Auto Scaling groups.
        ///
        /// * Specify Underprovisioned, Overprovisioned, or Optimized if you specify the name parameter as Finding and you want to filter results for EC2 instances.
        ///
        /// * Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as RecommendationSourceType.
        ///
        /// * Specify one of the following options if you specify the name parameter as FindingReasonCodes:
        ///
        /// * CPUOverprovisioned — The instance’s CPU configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * CPUUnderprovisioned — The instance’s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance.
        ///
        /// * MemoryOverprovisioned — The instance’s memory configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * MemoryUnderprovisioned — The instance’s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance.
        ///
        /// * EBSThroughputOverprovisioned — The instance’s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * EBSThroughputUnderprovisioned — The instance’s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance.
        ///
        /// * EBSIOPSOverprovisioned — The instance’s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * EBSIOPSUnderprovisioned — The instance’s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance.
        ///
        /// * NetworkBandwidthOverprovisioned — The instance’s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * NetworkBandwidthUnderprovisioned — The instance’s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.
        ///
        /// * NetworkPPSOverprovisioned — The instance’s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * NetworkPPSUnderprovisioned — The instance’s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance.
        ///
        /// * DiskIOPSOverprovisioned — The instance’s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * DiskIOPSUnderprovisioned — The instance’s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance.
        ///
        /// * DiskThroughputOverprovisioned — The instance’s disk throughput configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * DiskThroughputUnderprovisioned — The instance’s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.FilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum FilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case findingReasonCodes
        case recommendationSourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterName] {
            return [
                .finding,
                .findingReasonCodes,
                .recommendationSourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .recommendationSourceType: return "RecommendationSourceType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterName(rawValue: rawValue) ?? FilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum Finding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [Finding] {
            return [
                .notOptimized,
                .optimized,
                .overProvisioned,
                .underProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Finding(rawValue: rawValue) ?? Finding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum FindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingReasonCode] {
            return [
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FindingReasonCode(rawValue: rawValue) ?? FindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension GetAutoScalingGroupRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case autoScalingGroupArns
        case filters
        case maxResults
        case nextToken
        case recommendationPreferences
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let autoScalingGroupArns = autoScalingGroupArns {
            var autoScalingGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroupArns)
            for autoscalinggrouparn0 in autoScalingGroupArns {
                try autoScalingGroupArnsContainer.encode(autoscalinggrouparn0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
    }
}

extension GetAutoScalingGroupRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAutoScalingGroupRecommendationsInput: Swift.Equatable {
    /// The ID of the Amazon Web Services account for which to return Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return Auto Scaling group recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return recommendations.
    public var autoScalingGroupArns: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of Auto Scaling group recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// The maximum number of Auto Scaling group recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of Auto Scaling group recommendations.
    public var nextToken: Swift.String?
    /// An object to specify the preferences for the Auto Scaling group recommendations to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?

    public init (
        accountIds: [Swift.String]? = nil,
        autoScalingGroupArns: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil
    )
    {
        self.accountIds = accountIds
        self.autoScalingGroupArns = autoScalingGroupArns
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationPreferences = recommendationPreferences
    }
}

struct GetAutoScalingGroupRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let autoScalingGroupArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [ComputeOptimizerClientTypes.Filter]?
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension GetAutoScalingGroupRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case autoScalingGroupArns
        case filters
        case maxResults
        case nextToken
        case recommendationPreferences
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let autoScalingGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoScalingGroupArns)
        var autoScalingGroupArnsDecoded0:[Swift.String]? = nil
        if let autoScalingGroupArnsContainer = autoScalingGroupArnsContainer {
            autoScalingGroupArnsDecoded0 = [Swift.String]()
            for string0 in autoScalingGroupArnsContainer {
                if let string0 = string0 {
                    autoScalingGroupArnsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroupArns = autoScalingGroupArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}

extension GetAutoScalingGroupRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAutoScalingGroupRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAutoScalingGroupRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAutoScalingGroupRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAutoScalingGroupRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingGroupRecommendations = output.autoScalingGroupRecommendations
            self.errors = output.errors
            self.nextToken = output.nextToken
        } else {
            self.autoScalingGroupRecommendations = nil
            self.errors = nil
            self.nextToken = nil
        }
    }
}

public struct GetAutoScalingGroupRecommendationsOutputResponse: Swift.Equatable {
    /// An array of objects that describe Auto Scaling group recommendations.
    public var autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]?
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported Auto Scaling group.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to use to advance to the next page of Auto Scaling group recommendations. This value is null when there are no more pages of Auto Scaling group recommendations to return.
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]? = nil,
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupRecommendations = autoScalingGroupRecommendations
        self.errors = errors
        self.nextToken = nextToken
    }
}

struct GetAutoScalingGroupRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]?
    let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetAutoScalingGroupRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupRecommendations
        case errors
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let autoScalingGroupRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.AutoScalingGroupRecommendation?].self, forKey: .autoScalingGroupRecommendations)
        var autoScalingGroupRecommendationsDecoded0:[ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]? = nil
        if let autoScalingGroupRecommendationsContainer = autoScalingGroupRecommendationsContainer {
            autoScalingGroupRecommendationsDecoded0 = [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]()
            for structure0 in autoScalingGroupRecommendationsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroupRecommendations = autoScalingGroupRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetEBSVolumeRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ebsfilter0 in filters {
                try filtersContainer.encode(ebsfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let volumeArns = volumeArns {
            var volumeArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeArns)
            for volumearn0 in volumeArns {
                try volumeArnsContainer.encode(volumearn0)
            }
        }
    }
}

extension GetEBSVolumeRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEBSVolumeRecommendationsInput: Swift.Equatable {
    /// The ID of the Amazon Web Services account for which to return volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of volume recommendations.
    public var filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// The maximum number of volume recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of volume recommendations.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the volumes for which to return recommendations.
    public var volumeArns: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        volumeArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeArns = volumeArns
    }
}

struct GetEBSVolumeRecommendationsInputBody: Swift.Equatable {
    let volumeArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    let accountIds: [Swift.String]?
}

extension GetEBSVolumeRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .volumeArns)
        var volumeArnsDecoded0:[Swift.String]? = nil
        if let volumeArnsContainer = volumeArnsContainer {
            volumeArnsDecoded0 = [Swift.String]()
            for string0 in volumeArnsContainer {
                if let string0 = string0 {
                    volumeArnsDecoded0?.append(string0)
                }
            }
        }
        volumeArns = volumeArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EBSFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension GetEBSVolumeRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEBSVolumeRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEBSVolumeRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEBSVolumeRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEBSVolumeRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.nextToken = output.nextToken
            self.volumeRecommendations = output.volumeRecommendations
        } else {
            self.errors = nil
            self.nextToken = nil
            self.volumeRecommendations = nil
        }
    }
}

public struct GetEBSVolumeRecommendationsOutputResponse: Swift.Equatable {
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported volume.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to use to advance to the next page of volume recommendations. This value is null when there are no more pages of volume recommendations to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe volume recommendations.
    public var volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]?

    public init (
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil,
        volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]? = nil
    )
    {
        self.errors = errors
        self.nextToken = nextToken
        self.volumeRecommendations = volumeRecommendations
    }
}

struct GetEBSVolumeRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]?
    let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetEBSVolumeRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case nextToken
        case volumeRecommendations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let volumeRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.VolumeRecommendation?].self, forKey: .volumeRecommendations)
        var volumeRecommendationsDecoded0:[ComputeOptimizerClientTypes.VolumeRecommendation]? = nil
        if let volumeRecommendationsContainer = volumeRecommendationsContainer {
            volumeRecommendationsDecoded0 = [ComputeOptimizerClientTypes.VolumeRecommendation]()
            for structure0 in volumeRecommendationsContainer {
                if let structure0 = structure0 {
                    volumeRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        volumeRecommendations = volumeRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetEC2InstanceRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case instanceArns
        case maxResults
        case nextToken
        case recommendationPreferences
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let instanceArns = instanceArns {
            var instanceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceArns)
            for instancearn0 in instanceArns {
                try instanceArnsContainer.encode(instancearn0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
    }
}

extension GetEC2InstanceRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEC2InstanceRecommendationsInput: Swift.Equatable {
    /// The ID of the Amazon Web Services account for which to return instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return instance recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of instance recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// The Amazon Resource Name (ARN) of the instances for which to return recommendations.
    public var instanceArns: [Swift.String]?
    /// The maximum number of instance recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of instance recommendations.
    public var nextToken: Swift.String?
    /// An object to specify the preferences for the Amazon EC2 instance recommendations to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        instanceArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.instanceArns = instanceArns
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationPreferences = recommendationPreferences
    }
}

struct GetEC2InstanceRecommendationsInputBody: Swift.Equatable {
    let instanceArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [ComputeOptimizerClientTypes.Filter]?
    let accountIds: [Swift.String]?
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension GetEC2InstanceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case instanceArns
        case maxResults
        case nextToken
        case recommendationPreferences
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceArns)
        var instanceArnsDecoded0:[Swift.String]? = nil
        if let instanceArnsContainer = instanceArnsContainer {
            instanceArnsDecoded0 = [Swift.String]()
            for string0 in instanceArnsContainer {
                if let string0 = string0 {
                    instanceArnsDecoded0?.append(string0)
                }
            }
        }
        instanceArns = instanceArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}

extension GetEC2InstanceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEC2InstanceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEC2InstanceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEC2InstanceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEC2InstanceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.instanceRecommendations = output.instanceRecommendations
            self.nextToken = output.nextToken
        } else {
            self.errors = nil
            self.instanceRecommendations = nil
            self.nextToken = nil
        }
    }
}

public struct GetEC2InstanceRecommendationsOutputResponse: Swift.Equatable {
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an instance of an unsupported instance family.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// An array of objects that describe instance recommendations.
    public var instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    /// The token to use to advance to the next page of instance recommendations. This value is null when there are no more pages of instance recommendations to return.
    public var nextToken: Swift.String?

    public init (
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.errors = errors
        self.instanceRecommendations = instanceRecommendations
        self.nextToken = nextToken
    }
}

struct GetEC2InstanceRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetEC2InstanceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case instanceRecommendations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let instanceRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendation?].self, forKey: .instanceRecommendations)
        var instanceRecommendationsDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendation]? = nil
        if let instanceRecommendationsContainer = instanceRecommendationsContainer {
            instanceRecommendationsDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendation]()
            for structure0 in instanceRecommendationsContainer {
                if let structure0 = structure0 {
                    instanceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        instanceRecommendations = instanceRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetEC2RecommendationProjectedMetricsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceArn
        case period
        case recommendationPreferences
        case startTime
        case stat
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let stat = self.stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
    }
}

extension GetEC2RecommendationProjectedMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEC2RecommendationProjectedMetricsInput: Swift.Equatable {
    /// The timestamp of the last projected metrics data point to return.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the instances for which to return recommendation projected metrics.
    /// This member is required.
    public var instanceArn: Swift.String?
    /// The granularity, in seconds, of the projected metrics data points.
    /// This member is required.
    public var period: Swift.Int
    /// An object to specify the preferences for the Amazon EC2 recommendation projected metrics to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// The timestamp of the first projected metrics data point to return.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic of the projected metrics.
    /// This member is required.
    public var stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init (
        endTime: ClientRuntime.Date? = nil,
        instanceArn: Swift.String? = nil,
        period: Swift.Int = 0,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        startTime: ClientRuntime.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.instanceArn = instanceArn
        self.period = period
        self.recommendationPreferences = recommendationPreferences
        self.startTime = startTime
        self.stat = stat
    }
}

struct GetEC2RecommendationProjectedMetricsInputBody: Swift.Equatable {
    let instanceArn: Swift.String?
    let stat: ComputeOptimizerClientTypes.MetricStatistic?
    let period: Swift.Int
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension GetEC2RecommendationProjectedMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceArn
        case period
        case recommendationPreferences
        case startTime
        case stat
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let statDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .stat)
        stat = statDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}

extension GetEC2RecommendationProjectedMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEC2RecommendationProjectedMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEC2RecommendationProjectedMetricsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEC2RecommendationProjectedMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEC2RecommendationProjectedMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.recommendedOptionProjectedMetrics = output.recommendedOptionProjectedMetrics
        } else {
            self.recommendedOptionProjectedMetrics = nil
        }
    }
}

public struct GetEC2RecommendationProjectedMetricsOutputResponse: Swift.Equatable {
    /// An array of objects that describes projected metrics.
    public var recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]?

    public init (
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

struct GetEC2RecommendationProjectedMetricsOutputResponseBody: Swift.Equatable {
    let recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]?
}

extension GetEC2RecommendationProjectedMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendedOptionProjectedMetrics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedOptionProjectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric?].self, forKey: .recommendedOptionProjectedMetrics)
        var recommendedOptionProjectedMetricsDecoded0:[ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]? = nil
        if let recommendedOptionProjectedMetricsContainer = recommendedOptionProjectedMetricsContainer {
            recommendedOptionProjectedMetricsDecoded0 = [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]()
            for structure0 in recommendedOptionProjectedMetricsContainer {
                if let structure0 = structure0 {
                    recommendedOptionProjectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        recommendedOptionProjectedMetrics = recommendedOptionProjectedMetricsDecoded0
    }
}

extension GetECSServiceRecommendationProjectedMetricsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case period
        case serviceArn
        case startTime
        case stat
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let serviceArn = self.serviceArn {
            try encodeContainer.encode(serviceArn, forKey: .serviceArn)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let stat = self.stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
    }
}

extension GetECSServiceRecommendationProjectedMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetECSServiceRecommendationProjectedMetricsInput: Swift.Equatable {
    /// The timestamp of the last projected metrics data point to return.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The granularity, in seconds, of the projected metrics data points.
    /// This member is required.
    public var period: Swift.Int
    /// The ARN that identifies the Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
    /// This member is required.
    public var serviceArn: Swift.String?
    /// The timestamp of the first projected metrics data point to return.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic of the projected metrics.
    /// This member is required.
    public var stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init (
        endTime: ClientRuntime.Date? = nil,
        period: Swift.Int = 0,
        serviceArn: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.period = period
        self.serviceArn = serviceArn
        self.startTime = startTime
        self.stat = stat
    }
}

struct GetECSServiceRecommendationProjectedMetricsInputBody: Swift.Equatable {
    let serviceArn: Swift.String?
    let stat: ComputeOptimizerClientTypes.MetricStatistic?
    let period: Swift.Int
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension GetECSServiceRecommendationProjectedMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case period
        case serviceArn
        case startTime
        case stat
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceArn)
        serviceArn = serviceArnDecoded
        let statDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .stat)
        stat = statDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension GetECSServiceRecommendationProjectedMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetECSServiceRecommendationProjectedMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetECSServiceRecommendationProjectedMetricsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetECSServiceRecommendationProjectedMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetECSServiceRecommendationProjectedMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.recommendedOptionProjectedMetrics = output.recommendedOptionProjectedMetrics
        } else {
            self.recommendedOptionProjectedMetrics = nil
        }
    }
}

public struct GetECSServiceRecommendationProjectedMetricsOutputResponse: Swift.Equatable {
    /// An array of objects that describes the projected metrics.
    public var recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]?

    public init (
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

struct GetECSServiceRecommendationProjectedMetricsOutputResponseBody: Swift.Equatable {
    let recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]?
}

extension GetECSServiceRecommendationProjectedMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendedOptionProjectedMetrics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedOptionProjectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric?].self, forKey: .recommendedOptionProjectedMetrics)
        var recommendedOptionProjectedMetricsDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]? = nil
        if let recommendedOptionProjectedMetricsContainer = recommendedOptionProjectedMetricsContainer {
            recommendedOptionProjectedMetricsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]()
            for structure0 in recommendedOptionProjectedMetricsContainer {
                if let structure0 = structure0 {
                    recommendedOptionProjectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        recommendedOptionProjectedMetrics = recommendedOptionProjectedMetricsDecoded0
    }
}

extension GetECSServiceRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case serviceArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ecsservicerecommendationfilter0 in filters {
                try filtersContainer.encode(ecsservicerecommendationfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let serviceArns = serviceArns {
            var serviceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceArns)
            for servicearn0 in serviceArns {
                try serviceArnsContainer.encode(servicearn0)
            }
        }
    }
}

extension GetECSServiceRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetECSServiceRecommendationsInput: Swift.Equatable {
    /// Return the Amazon ECS service recommendations to the specified Amazon Web Services account IDs. If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon ECS service recommendations to specific member accounts. You can only specify one account ID per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of Amazon ECS service recommendations.
    public var filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    /// The maximum number of Amazon ECS service recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of Amazon ECS service recommendations.
    public var nextToken: Swift.String?
    /// The ARN that identifies the Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
    public var serviceArns: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceArns = serviceArns
    }
}

struct GetECSServiceRecommendationsInputBody: Swift.Equatable {
    let serviceArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    let accountIds: [Swift.String]?
}

extension GetECSServiceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case serviceArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .serviceArns)
        var serviceArnsDecoded0:[Swift.String]? = nil
        if let serviceArnsContainer = serviceArnsContainer {
            serviceArnsDecoded0 = [Swift.String]()
            for string0 in serviceArnsContainer {
                if let string0 = string0 {
                    serviceArnsDecoded0?.append(string0)
                }
            }
        }
        serviceArns = serviceArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension GetECSServiceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetECSServiceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetECSServiceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetECSServiceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetECSServiceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ecsServiceRecommendations = output.ecsServiceRecommendations
            self.errors = output.errors
            self.nextToken = output.nextToken
        } else {
            self.ecsServiceRecommendations = nil
            self.errors = nil
            self.nextToken = nil
        }
    }
}

public struct GetECSServiceRecommendationsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the Amazon ECS service recommendations.
    public var ecsServiceRecommendations: [ComputeOptimizerClientTypes.ECSServiceRecommendation]?
    /// An array of objects that describe errors of the request.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to advance to the next page of Amazon ECS service recommendations.
    public var nextToken: Swift.String?

    public init (
        ecsServiceRecommendations: [ComputeOptimizerClientTypes.ECSServiceRecommendation]? = nil,
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ecsServiceRecommendations = ecsServiceRecommendations
        self.errors = errors
        self.nextToken = nextToken
    }
}

struct GetECSServiceRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let ecsServiceRecommendations: [ComputeOptimizerClientTypes.ECSServiceRecommendation]?
    let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetECSServiceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ecsServiceRecommendations
        case errors
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let ecsServiceRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ECSServiceRecommendation?].self, forKey: .ecsServiceRecommendations)
        var ecsServiceRecommendationsDecoded0:[ComputeOptimizerClientTypes.ECSServiceRecommendation]? = nil
        if let ecsServiceRecommendationsContainer = ecsServiceRecommendationsContainer {
            ecsServiceRecommendationsDecoded0 = [ComputeOptimizerClientTypes.ECSServiceRecommendation]()
            for structure0 in ecsServiceRecommendationsContainer {
                if let structure0 = structure0 {
                    ecsServiceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        ecsServiceRecommendations = ecsServiceRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetEffectiveRecommendationPreferencesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetEffectiveRecommendationPreferencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEffectiveRecommendationPreferencesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource for which to confirm effective recommendation preferences. Only EC2 instance and Auto Scaling group ARNs are currently supported.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetEffectiveRecommendationPreferencesInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetEffectiveRecommendationPreferencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetEffectiveRecommendationPreferencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEffectiveRecommendationPreferencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEffectiveRecommendationPreferencesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEffectiveRecommendationPreferencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEffectiveRecommendationPreferencesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.enhancedInfrastructureMetrics = output.enhancedInfrastructureMetrics
            self.externalMetricsPreference = output.externalMetricsPreference
        } else {
            self.enhancedInfrastructureMetrics = nil
            self.externalMetricsPreference = nil
        }
    }
}

public struct GetEffectiveRecommendationPreferencesOutputResponse: Swift.Equatable {
    /// The status of the enhanced infrastructure metrics recommendation preference. Considers all applicable preferences that you might have set at the resource, account, and organization level. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied to recommendations. To validate whether the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    /// The provider of the external metrics recommendation preference. Considers all applicable preferences that you might have set at the account and organization level. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response. To validate whether the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the [GetEC2InstanceRecommendations] actions. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/external-metrics-ingestion.html) in the Compute Optimizer User Guide.
    public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?

    public init (
        enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
        externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil
    )
    {
        self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        self.externalMetricsPreference = externalMetricsPreference
    }
}

struct GetEffectiveRecommendationPreferencesOutputResponseBody: Swift.Equatable {
    let enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    let externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
}

extension GetEffectiveRecommendationPreferencesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enhancedInfrastructureMetricsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics.self, forKey: .enhancedInfrastructureMetrics)
        enhancedInfrastructureMetrics = enhancedInfrastructureMetricsDecoded
        let externalMetricsPreferenceDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExternalMetricsPreference.self, forKey: .externalMetricsPreference)
        externalMetricsPreference = externalMetricsPreferenceDecoded
    }
}

extension GetEnrollmentStatusInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetEnrollmentStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEnrollmentStatusInput: Swift.Equatable {

    public init () { }
}

struct GetEnrollmentStatusInputBody: Swift.Equatable {
}

extension GetEnrollmentStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEnrollmentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEnrollmentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEnrollmentStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEnrollmentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEnrollmentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lastUpdatedTimestamp = output.lastUpdatedTimestamp
            self.memberAccountsEnrolled = output.memberAccountsEnrolled
            self.numberOfMemberAccountsOptedIn = output.numberOfMemberAccountsOptedIn
            self.status = output.status
            self.statusReason = output.statusReason
        } else {
            self.lastUpdatedTimestamp = nil
            self.memberAccountsEnrolled = false
            self.numberOfMemberAccountsOptedIn = nil
            self.status = nil
            self.statusReason = nil
        }
    }
}

public struct GetEnrollmentStatusOutputResponse: Swift.Equatable {
    /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
    public var lastUpdatedTimestamp: ClientRuntime.Date?
    /// Confirms the enrollment status of member accounts of the organization, if the account is a management account of an organization.
    public var memberAccountsEnrolled: Swift.Bool
    /// The count of organization member accounts that are opted in to the service, if your account is an organization management account.
    public var numberOfMemberAccountsOptedIn: Swift.Int?
    /// The enrollment status of the account.
    public var status: ComputeOptimizerClientTypes.Status?
    /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
    public var statusReason: Swift.String?

    public init (
        lastUpdatedTimestamp: ClientRuntime.Date? = nil,
        memberAccountsEnrolled: Swift.Bool = false,
        numberOfMemberAccountsOptedIn: Swift.Int? = nil,
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.memberAccountsEnrolled = memberAccountsEnrolled
        self.numberOfMemberAccountsOptedIn = numberOfMemberAccountsOptedIn
        self.status = status
        self.statusReason = statusReason
    }
}

struct GetEnrollmentStatusOutputResponseBody: Swift.Equatable {
    let status: ComputeOptimizerClientTypes.Status?
    let statusReason: Swift.String?
    let memberAccountsEnrolled: Swift.Bool
    let lastUpdatedTimestamp: ClientRuntime.Date?
    let numberOfMemberAccountsOptedIn: Swift.Int?
}

extension GetEnrollmentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTimestamp
        case memberAccountsEnrolled
        case numberOfMemberAccountsOptedIn
        case status
        case statusReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let memberAccountsEnrolledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .memberAccountsEnrolled) ?? false
        memberAccountsEnrolled = memberAccountsEnrolledDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let numberOfMemberAccountsOptedInDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfMemberAccountsOptedIn)
        numberOfMemberAccountsOptedIn = numberOfMemberAccountsOptedInDecoded
    }
}

extension GetEnrollmentStatusesForOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for enrollmentfilter0 in filters {
                try filtersContainer.encode(enrollmentfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetEnrollmentStatusesForOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEnrollmentStatusesForOrganizationInput: Swift.Equatable {
    /// An array of objects to specify a filter that returns a more specific list of account enrollment statuses.
    public var filters: [ComputeOptimizerClientTypes.EnrollmentFilter]?
    /// The maximum number of account enrollment statuses to return with a single request. You can specify up to 100 statuses to return with each request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of account enrollment statuses.
    public var nextToken: Swift.String?

    public init (
        filters: [ComputeOptimizerClientTypes.EnrollmentFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetEnrollmentStatusesForOrganizationInputBody: Swift.Equatable {
    let filters: [ComputeOptimizerClientTypes.EnrollmentFilter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetEnrollmentStatusesForOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EnrollmentFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EnrollmentFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EnrollmentFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetEnrollmentStatusesForOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEnrollmentStatusesForOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEnrollmentStatusesForOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEnrollmentStatusesForOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEnrollmentStatusesForOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountEnrollmentStatuses = output.accountEnrollmentStatuses
            self.nextToken = output.nextToken
        } else {
            self.accountEnrollmentStatuses = nil
            self.nextToken = nil
        }
    }
}

public struct GetEnrollmentStatusesForOrganizationOutputResponse: Swift.Equatable {
    /// An array of objects that describe the enrollment statuses of organization member accounts.
    public var accountEnrollmentStatuses: [ComputeOptimizerClientTypes.AccountEnrollmentStatus]?
    /// The token to use to advance to the next page of account enrollment statuses. This value is null when there are no more pages of account enrollment statuses to return.
    public var nextToken: Swift.String?

    public init (
        accountEnrollmentStatuses: [ComputeOptimizerClientTypes.AccountEnrollmentStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountEnrollmentStatuses = accountEnrollmentStatuses
        self.nextToken = nextToken
    }
}

struct GetEnrollmentStatusesForOrganizationOutputResponseBody: Swift.Equatable {
    let accountEnrollmentStatuses: [ComputeOptimizerClientTypes.AccountEnrollmentStatus]?
    let nextToken: Swift.String?
}

extension GetEnrollmentStatusesForOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountEnrollmentStatuses
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountEnrollmentStatusesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.AccountEnrollmentStatus?].self, forKey: .accountEnrollmentStatuses)
        var accountEnrollmentStatusesDecoded0:[ComputeOptimizerClientTypes.AccountEnrollmentStatus]? = nil
        if let accountEnrollmentStatusesContainer = accountEnrollmentStatusesContainer {
            accountEnrollmentStatusesDecoded0 = [ComputeOptimizerClientTypes.AccountEnrollmentStatus]()
            for structure0 in accountEnrollmentStatusesContainer {
                if let structure0 = structure0 {
                    accountEnrollmentStatusesDecoded0?.append(structure0)
                }
            }
        }
        accountEnrollmentStatuses = accountEnrollmentStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetLambdaFunctionRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case functionArns
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for lambdafunctionrecommendationfilter0 in filters {
                try filtersContainer.encode(lambdafunctionrecommendationfilter0)
            }
        }
        if let functionArns = functionArns {
            var functionArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .functionArns)
            for functionarn0 in functionArns {
                try functionArnsContainer.encode(functionarn0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetLambdaFunctionRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLambdaFunctionRecommendationsInput: Swift.Equatable {
    /// The ID of the Amazon Web Services account for which to return function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return function recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of function recommendations.
    public var filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// The Amazon Resource Name (ARN) of the functions for which to return recommendations. You can specify a qualified or unqualified ARN. If you specify an unqualified ARN without a function version suffix, Compute Optimizer will return recommendations for the latest ($LATEST) version of the function. If you specify a qualified ARN with a version suffix, Compute Optimizer will return recommendations for the specified function version. For more information about using function versions, see [Using versions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using) in the Lambda Developer Guide.
    public var functionArns: [Swift.String]?
    /// The maximum number of function recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of function recommendations.
    public var nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        functionArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.functionArns = functionArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetLambdaFunctionRecommendationsInputBody: Swift.Equatable {
    let functionArns: [Swift.String]?
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetLambdaFunctionRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case functionArns
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .functionArns)
        var functionArnsDecoded0:[Swift.String]? = nil
        if let functionArnsContainer = functionArnsContainer {
            functionArnsDecoded0 = [Swift.String]()
            for string0 in functionArnsContainer {
                if let string0 = string0 {
                    functionArnsDecoded0?.append(string0)
                }
            }
        }
        functionArns = functionArnsDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetLambdaFunctionRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLambdaFunctionRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLambdaFunctionRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLambdaFunctionRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLambdaFunctionRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lambdaFunctionRecommendations = output.lambdaFunctionRecommendations
            self.nextToken = output.nextToken
        } else {
            self.lambdaFunctionRecommendations = nil
            self.nextToken = nil
        }
    }
}

public struct GetLambdaFunctionRecommendationsOutputResponse: Swift.Equatable {
    /// An array of objects that describe function recommendations.
    public var lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]?
    /// The token to use to advance to the next page of function recommendations. This value is null when there are no more pages of function recommendations to return.
    public var nextToken: Swift.String?

    public init (
        lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lambdaFunctionRecommendations = lambdaFunctionRecommendations
        self.nextToken = nextToken
    }
}

struct GetLambdaFunctionRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]?
}

extension GetLambdaFunctionRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionRecommendations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let lambdaFunctionRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendation?].self, forKey: .lambdaFunctionRecommendations)
        var lambdaFunctionRecommendationsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendation]? = nil
        if let lambdaFunctionRecommendationsContainer = lambdaFunctionRecommendationsContainer {
            lambdaFunctionRecommendationsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]()
            for structure0 in lambdaFunctionRecommendationsContainer {
                if let structure0 = structure0 {
                    lambdaFunctionRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        lambdaFunctionRecommendations = lambdaFunctionRecommendationsDecoded0
    }
}

extension ComputeOptimizerClientTypes.GetRecommendationError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case identifier
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an error experienced when getting recommendations. For example, an error is returned if you request recommendations for an unsupported Auto Scaling group, or if you request recommendations for an instance of an unsupported instance family.
    public struct GetRecommendationError: Swift.Equatable {
        /// The error code.
        public var code: Swift.String?
        /// The ID of the error.
        public var identifier: Swift.String?
        /// The message, or reason, for the error.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            identifier: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.identifier = identifier
            self.message = message
        }
    }

}

extension GetRecommendationPreferencesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case resourceType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
    }
}

extension GetRecommendationPreferencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRecommendationPreferencesInput: Swift.Equatable {
    /// The maximum number of recommendation preferences to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of recommendation preferences.
    public var nextToken: Swift.String?
    /// The target resource type of the recommendation preference for which to return preferences. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group. The valid values for this parameter are Ec2Instance and AutoScalingGroup.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// An object that describes the scope of the recommendation preference to return. You can return recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var scope: ComputeOptimizerClientTypes.Scope?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceType = resourceType
        self.scope = scope
    }
}

struct GetRecommendationPreferencesInputBody: Swift.Equatable {
    let resourceType: ComputeOptimizerClientTypes.ResourceType?
    let scope: ComputeOptimizerClientTypes.Scope?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetRecommendationPreferencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case resourceType
        case scope
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetRecommendationPreferencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecommendationPreferencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRecommendationPreferencesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecommendationPreferencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRecommendationPreferencesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationPreferencesDetails = output.recommendationPreferencesDetails
        } else {
            self.nextToken = nil
            self.recommendationPreferencesDetails = nil
        }
    }
}

public struct GetRecommendationPreferencesOutputResponse: Swift.Equatable {
    /// The token to use to advance to the next page of recommendation preferences. This value is null when there are no more pages of recommendation preferences to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe recommendation preferences.
    public var recommendationPreferencesDetails: [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationPreferencesDetails: [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationPreferencesDetails = recommendationPreferencesDetails
    }
}

struct GetRecommendationPreferencesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let recommendationPreferencesDetails: [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]?
}

extension GetRecommendationPreferencesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationPreferencesDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recommendationPreferencesDetailsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationPreferencesDetail?].self, forKey: .recommendationPreferencesDetails)
        var recommendationPreferencesDetailsDecoded0:[ComputeOptimizerClientTypes.RecommendationPreferencesDetail]? = nil
        if let recommendationPreferencesDetailsContainer = recommendationPreferencesDetailsContainer {
            recommendationPreferencesDetailsDecoded0 = [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]()
            for structure0 in recommendationPreferencesDetailsContainer {
                if let structure0 = structure0 {
                    recommendationPreferencesDetailsDecoded0?.append(structure0)
                }
            }
        }
        recommendationPreferencesDetails = recommendationPreferencesDetailsDecoded0
    }
}

extension GetRecommendationSummariesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountid0 in accountIds {
                try accountIdsContainer.encode(accountid0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetRecommendationSummariesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRecommendationSummariesInput: Swift.Equatable {
    /// The ID of the Amazon Web Services account for which to return recommendation summaries. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return recommendation summaries. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// The maximum number of recommendation summaries to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of recommendation summaries.
    public var nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetRecommendationSummariesInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetRecommendationSummariesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetRecommendationSummariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecommendationSummariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRecommendationSummariesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecommendationSummariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRecommendationSummariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationSummaries = output.recommendationSummaries
        } else {
            self.nextToken = nil
            self.recommendationSummaries = nil
        }
    }
}

public struct GetRecommendationSummariesOutputResponse: Swift.Equatable {
    /// The token to use to advance to the next page of recommendation summaries. This value is null when there are no more pages of recommendation summaries to return.
    public var nextToken: Swift.String?
    /// An array of objects that summarize a recommendation.
    public var recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationSummaries = recommendationSummaries
    }
}

struct GetRecommendationSummariesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]?
}

extension GetRecommendationSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationSummaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recommendationSummariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationSummary?].self, forKey: .recommendationSummaries)
        var recommendationSummariesDecoded0:[ComputeOptimizerClientTypes.RecommendationSummary]? = nil
        if let recommendationSummariesContainer = recommendationSummariesContainer {
            recommendationSummariesDecoded0 = [ComputeOptimizerClientTypes.RecommendationSummary]()
            for structure0 in recommendationSummariesContainer {
                if let structure0 = structure0 {
                    recommendationSummariesDecoded0?.append(structure0)
                }
            }
        }
        recommendationSummaries = recommendationSummariesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    public enum InferredWorkloadType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonEmr
        case apacheCassandra
        case apacheHadoop
        case kafka
        case memcached
        case nginx
        case postgreSql
        case redis
        case sdkUnknown(Swift.String)

        public static var allCases: [InferredWorkloadType] {
            return [
                .amazonEmr,
                .apacheCassandra,
                .apacheHadoop,
                .kafka,
                .memcached,
                .nginx,
                .postgreSql,
                .redis,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonEmr: return "AmazonEmr"
            case .apacheCassandra: return "ApacheCassandra"
            case .apacheHadoop: return "ApacheHadoop"
            case .kafka: return "Kafka"
            case .memcached: return "Memcached"
            case .nginx: return "Nginx"
            case .postgreSql: return "PostgreSql"
            case .redis: return "Redis"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferredWorkloadType(rawValue: rawValue) ?? InferredWorkloadType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum InferredWorkloadTypesPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [InferredWorkloadTypesPreference] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferredWorkloadTypesPreference(rawValue: rawValue) ?? InferredWorkloadTypesPreference.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentInstanceType
        case currentPerformanceRisk
        case effectiveRecommendationPreferences
        case finding
        case findingReasonCodes
        case inferredWorkloadTypes
        case instanceArn
        case instanceName
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case recommendationOptions
        case recommendationSources
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentInstanceType = self.currentInstanceType {
            try encodeContainer.encode(currentInstanceType, forKey: .currentInstanceType)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let effectiveRecommendationPreferences = self.effectiveRecommendationPreferences {
            try encodeContainer.encode(effectiveRecommendationPreferences, forKey: .effectiveRecommendationPreferences)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for instancerecommendationfindingreasoncode0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(instancerecommendationfindingreasoncode0.rawValue)
            }
        }
        if let inferredWorkloadTypes = inferredWorkloadTypes {
            var inferredWorkloadTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferredWorkloadTypes)
            for inferredworkloadtype0 in inferredWorkloadTypes {
                try inferredWorkloadTypesContainer.encode(inferredworkloadtype0.rawValue)
            }
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encodeTimestamp(lastRefreshTimestamp, format: .epochSeconds, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let recommendationOptions = recommendationOptions {
            var recommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationOptions)
            for instancerecommendationoption0 in recommendationOptions {
                try recommendationOptionsContainer.encode(instancerecommendationoption0)
            }
        }
        if let recommendationSources = recommendationSources {
            var recommendationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationSources)
            for recommendationsource0 in recommendationSources {
                try recommendationSourcesContainer.encode(recommendationsource0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for utilizationmetric0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(utilizationmetric0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let currentInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentInstanceType)
        currentInstanceType = currentInstanceTypeDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .finding)
        finding = findingDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]()
            for enum0 in findingReasonCodesContainer {
                if let enum0 = enum0 {
                    findingReasonCodesDecoded0?.append(enum0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookBackPeriodInDays) ?? 0.0
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let recommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendationOption?].self, forKey: .recommendationOptions)
        var recommendationOptionsDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendationOption]? = nil
        if let recommendationOptionsContainer = recommendationOptionsContainer {
            recommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendationOption]()
            for structure0 in recommendationOptionsContainer {
                if let structure0 = structure0 {
                    recommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        recommendationOptions = recommendationOptionsDecoded0
        let recommendationSourcesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationSource?].self, forKey: .recommendationSources)
        var recommendationSourcesDecoded0:[ComputeOptimizerClientTypes.RecommendationSource]? = nil
        if let recommendationSourcesContainer = recommendationSourcesContainer {
            recommendationSourcesDecoded0 = [ComputeOptimizerClientTypes.RecommendationSource]()
            for structure0 in recommendationSourcesContainer {
                if let structure0 = structure0 {
                    recommendationSourcesDecoded0?.append(structure0)
                }
            }
        }
        recommendationSources = recommendationSourcesDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
        let effectiveRecommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EffectiveRecommendationPreferences.self, forKey: .effectiveRecommendationPreferences)
        effectiveRecommendationPreferences = effectiveRecommendationPreferencesDecoded
        let inferredWorkloadTypesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InferredWorkloadType?].self, forKey: .inferredWorkloadTypes)
        var inferredWorkloadTypesDecoded0:[ComputeOptimizerClientTypes.InferredWorkloadType]? = nil
        if let inferredWorkloadTypesContainer = inferredWorkloadTypesContainer {
            inferredWorkloadTypesDecoded0 = [ComputeOptimizerClientTypes.InferredWorkloadType]()
            for enum0 in inferredWorkloadTypesContainer {
                if let enum0 = enum0 {
                    inferredWorkloadTypesDecoded0?.append(enum0)
                }
            }
        }
        inferredWorkloadTypes = inferredWorkloadTypesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an Amazon EC2 instance recommendation.
    public struct InstanceRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the instance.
        public var accountId: Swift.String?
        /// The instance type of the current instance.
        public var currentInstanceType: Swift.String?
        /// The risk of the current instance not meeting the performance needs of its workloads. The higher the risk, the more likely the current instance cannot meet the performance requirements of its workload.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the instance.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences?
        /// The finding classification of the instance. Findings for instances include:
        ///
        /// * Underprovisioned —An instance is considered under-provisioned when at least one specification of your instance, such as CPU, memory, or network, does not meet the performance requirements of your workload. Under-provisioned instances may lead to poor application performance.
        ///
        /// * Overprovisioned —An instance is considered over-provisioned when at least one specification of your instance, such as CPU, memory, or network, can be sized down while still meeting the performance requirements of your workload, and no specification is under-provisioned. Over-provisioned instances may lead to unnecessary infrastructure cost.
        ///
        /// * Optimized —An instance is considered optimized when all specifications of your instance, such as CPU, memory, and network, meet the performance requirements of your workload and is not over provisioned. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        public var finding: ComputeOptimizerClientTypes.Finding?
        /// The reason for the finding classification of the instance. Finding reason codes for instances include:
        ///
        /// * CPUOverprovisioned — The instance’s CPU configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.
        ///
        /// * CPUUnderprovisioned — The instance’s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.
        ///
        /// * MemoryOverprovisioned — The instance’s memory configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the memory utilization metric of the current instance during the look-back period.
        ///
        /// * MemoryUnderprovisioned — The instance’s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance. This is identified by analyzing the memory utilization metric of the current instance during the look-back period. Memory utilization is analyzed only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling memory utilization with the Amazon CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent) in the Compute Optimizer User Guide. On Linux instances, Compute Optimizer analyses the mem_used_percent metric in the CWAgent namespace, or the legacy MemoryUtilization metric in the System/Linux namespace. On Windows instances, Compute Optimizer analyses the Memory % Committed Bytes In Use metric in the CWAgent namespace.
        ///
        /// * EBSThroughputOverprovisioned — The instance’s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metrics of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSThroughputUnderprovisioned — The instance’s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metrics of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSIOPSOverprovisioned — The instance’s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metric of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSIOPSUnderprovisioned — The instance’s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metric of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * NetworkBandwidthOverprovisioned — The instance’s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period.
        ///
        /// * NetworkBandwidthUnderprovisioned — The instance’s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.
        ///
        /// * NetworkPPSOverprovisioned — The instance’s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.
        ///
        /// * NetworkPPSUnderprovisioned — The instance’s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.
        ///
        /// * DiskIOPSOverprovisioned — The instance’s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.
        ///
        /// * DiskIOPSUnderprovisioned — The instance’s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.
        ///
        /// * DiskThroughputOverprovisioned — The instance’s disk throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.
        ///
        /// * DiskThroughputUnderprovisioned — The instance’s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.
        ///
        ///
        /// For more information about instance metrics, see [List the available CloudWatch metrics for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html) in the Amazon Elastic Compute Cloud User Guide. For more information about EBS volume metrics, see [Amazon CloudWatch metrics for Amazon EBS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cloudwatch_ebs.html) in the Amazon Elastic Compute Cloud User Guide.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]?
        /// The applications that might be running on the instance as inferred by Compute Optimizer. Compute Optimizer can infer if one of the following applications might be running on the instance:
        ///
        /// * AmazonEmr - Infers that Amazon EMR might be running on the instance.
        ///
        /// * ApacheCassandra - Infers that Apache Cassandra might be running on the instance.
        ///
        /// * ApacheHadoop - Infers that Apache Hadoop might be running on the instance.
        ///
        /// * Memcached - Infers that Memcached might be running on the instance.
        ///
        /// * NGINX - Infers that NGINX might be running on the instance.
        ///
        /// * PostgreSql - Infers that PostgreSQL might be running on the instance.
        ///
        /// * Redis - Infers that Redis might be running on the instance.
        ///
        /// * Kafka - Infers that Kafka might be running on the instance.
        public var inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]?
        /// The Amazon Resource Name (ARN) of the current instance.
        public var instanceArn: Swift.String?
        /// The name of the current instance.
        public var instanceName: Swift.String?
        /// The timestamp of when the instance recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The number of days for which utilization metrics were analyzed for the instance.
        public var lookBackPeriodInDays: Swift.Double
        /// An array of objects that describe the recommendation options for the instance.
        public var recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]?
        /// An array of objects that describe the source resource of the recommendation.
        public var recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]?
        /// An array of objects that describe the utilization metrics of the instance.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentInstanceType: Swift.String? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]? = nil,
            inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]? = nil,
            instanceArn: Swift.String? = nil,
            instanceName: Swift.String? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]? = nil,
            recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentInstanceType = currentInstanceType
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.recommendationSources = recommendationSources
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum InstanceRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case diskIopsOverProvisioned
        case diskIopsUnderProvisioned
        case diskThroughputOverProvisioned
        case diskThroughputUnderProvisioned
        case ebsIopsOverProvisioned
        case ebsIopsUnderProvisioned
        case ebsThroughputOverProvisioned
        case ebsThroughputUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case networkBandwidthOverProvisioned
        case networkBandwidthUnderProvisioned
        case networkPpsOverProvisioned
        case networkPpsUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .diskIopsOverProvisioned,
                .diskIopsUnderProvisioned,
                .diskThroughputOverProvisioned,
                .diskThroughputUnderProvisioned,
                .ebsIopsOverProvisioned,
                .ebsIopsUnderProvisioned,
                .ebsThroughputOverProvisioned,
                .ebsThroughputUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .networkBandwidthOverProvisioned,
                .networkBandwidthUnderProvisioned,
                .networkPpsOverProvisioned,
                .networkPpsUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .diskIopsOverProvisioned: return "DiskIOPSOverprovisioned"
            case .diskIopsUnderProvisioned: return "DiskIOPSUnderprovisioned"
            case .diskThroughputOverProvisioned: return "DiskThroughputOverprovisioned"
            case .diskThroughputUnderProvisioned: return "DiskThroughputUnderprovisioned"
            case .ebsIopsOverProvisioned: return "EBSIOPSOverprovisioned"
            case .ebsIopsUnderProvisioned: return "EBSIOPSUnderprovisioned"
            case .ebsThroughputOverProvisioned: return "EBSThroughputOverprovisioned"
            case .ebsThroughputUnderProvisioned: return "EBSThroughputUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case .networkBandwidthOverProvisioned: return "NetworkBandwidthOverprovisioned"
            case .networkBandwidthUnderProvisioned: return "NetworkBandwidthUnderprovisioned"
            case .networkPpsOverProvisioned: return "NetworkPPSOverprovisioned"
            case .networkPpsUnderProvisioned: return "NetworkPPSUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRecommendationFindingReasonCode(rawValue: rawValue) ?? InstanceRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType
        case migrationEffort
        case performanceRisk
        case platformDifferences
        case projectedUtilizationMetrics
        case rank
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let migrationEffort = self.migrationEffort {
            try encodeContainer.encode(migrationEffort.rawValue, forKey: .migrationEffort)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if let platformDifferences = platformDifferences {
            var platformDifferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformDifferences)
            for platformdifference0 in platformDifferences {
                try platformDifferencesContainer.encode(platformdifference0.rawValue)
            }
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for utilizationmetric0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(utilizationmetric0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let platformDifferencesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.PlatformDifference?].self, forKey: .platformDifferences)
        var platformDifferencesDecoded0:[ComputeOptimizerClientTypes.PlatformDifference]? = nil
        if let platformDifferencesContainer = platformDifferencesContainer {
            platformDifferencesDecoded0 = [ComputeOptimizerClientTypes.PlatformDifference]()
            for enum0 in platformDifferencesContainer {
                if let enum0 = enum0 {
                    platformDifferencesDecoded0?.append(enum0)
                }
            }
        }
        platformDifferences = platformDifferencesDecoded0
        let performanceRiskDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .performanceRisk) ?? 0.0
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
        let migrationEffortDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MigrationEffort.self, forKey: .migrationEffort)
        migrationEffort = migrationEffortDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation option for an Amazon EC2 instance.
    public struct InstanceRecommendationOption: Swift.Equatable {
        /// The instance type of the instance recommendation.
        public var instanceType: Swift.String?
        /// The level of effort required to migrate from the current instance type to the recommended instance type. For example, the migration effort is Low if Amazon EMR is the inferred workload type and an Amazon Web Services Graviton instance type is recommended. The migration effort is Medium if a workload type couldn't be inferred but an Amazon Web Services Graviton instance type is recommended. The migration effort is VeryLow if both the current and recommended instance types are of the same CPU architecture.
        public var migrationEffort: ComputeOptimizerClientTypes.MigrationEffort?
        /// The performance risk of the instance recommendation option. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// Describes the configuration differences between the current instance and the recommended instance type. You should consider the configuration differences before migrating your workloads from the current instance to the recommended instance type. The [Change the instance type guide for Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html) and [Change the instance type guide for Windows](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-resize.html) provide general guidance for getting started with an instance migration. Platform differences include:
        ///
        /// * Hypervisor — The hypervisor of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses a Nitro hypervisor and the current instance uses a Xen hypervisor. The differences that you should consider between these hypervisors are covered in the [Nitro Hypervisor](http://aws.amazon.com/ec2/faqs/#Nitro_Hypervisor) section of the Amazon EC2 frequently asked questions. For more information, see [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances) in the Amazon EC2 User Guide for Linux, or [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#ec2-nitro-instances) in the Amazon EC2 User Guide for Windows.
        ///
        /// * NetworkInterface — The network interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type supports enhanced networking and the current instance might not. To enable enhanced networking for the recommended instance type, you must install the Elastic Network Adapter (ENA) driver or the Intel 82599 Virtual Function driver. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Enhanced networking on Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html) in the Amazon EC2 User Guide for Linux, or [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Enhanced networking on Windows](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/enhanced-networking.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * StorageInterface — The storage interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses an NVMe storage interface and the current instance does not. To access NVMe volumes for the recommended instance type, you will need to install or upgrade the NVMe driver. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Amazon EBS and NVMe on Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html) in the Amazon EC2 User Guide for Linux, or [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Amazon EBS and NVMe on Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/nvme-ebs-volumes.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * InstanceStoreAvailability — The recommended instance type does not support instance store volumes and the current instance does. Before migrating, you might need to back up the data on your instance store volumes if you want to preserve them. For more information, see [How do I back up an instance store volume on my Amazon EC2 instance to Amazon EBS?](https://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/) in the Amazon Web Services Premium Support Knowledge Base. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Linux, or see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * VirtualizationType — The recommended instance type uses the hardware virtual machine (HVM) virtualization type and the current instance uses the paravirtual (PV) virtualization type. For more information about the differences between these virtualization types, see [Linux AMI virtualization types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html) in the Amazon EC2 User Guide for Linux, or [Windows AMI virtualization types](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#virtualization-types) in the Amazon EC2 User Guide for Windows.
        ///
        /// * Architecture — The CPU architecture between the recommended instance type and the current instance is different. For example, the recommended instance type might use an Arm CPU architecture and the current instance type might use a different one, such as x86. Before migrating, you should consider recompiling the software on your instance for the new architecture. Alternatively, you might switch to an Amazon Machine Image (AMI) that supports the new architecture. For more information about the CPU architecture for each instance type, see [Amazon EC2 Instance Types](http://aws.amazon.com/ec2/instance-types/).
        public var platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]?
        /// An array of objects that describe the projected utilization metrics of the instance recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// The rank of the instance recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the instance recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init (
            instanceType: Swift.String? = nil,
            migrationEffort: ComputeOptimizerClientTypes.MigrationEffort? = nil,
            performanceRisk: Swift.Double = 0.0,
            platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]? = nil,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.instanceType = instanceType
            self.migrationEffort = migrationEffort
            self.performanceRisk = performanceRisk
            self.platformDifferences = platformDifferences
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal error has occurred. Try your call again.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The value supplied for the input parameter is out of range or not valid.
public struct InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.JobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.JobFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of recommendation export jobs. Use this filter with the [DescribeRecommendationExportJobs] action. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct JobFilter: Swift.Equatable {
        /// The name of the filter. Specify ResourceType to return export jobs of a specific resource type (for example, Ec2Instance). Specify JobStatus to return export jobs with a specific status (e.g, Complete).
        public var name: ComputeOptimizerClientTypes.JobFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:
        ///
        /// * Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as ResourceType. There is no filter for EBS volumes because volume recommendations cannot be exported at this time.
        ///
        /// * Specify Queued, InProgress, Complete, or Failed if you specify the name parameter as JobStatus.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.JobFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum JobFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jobStatus
        case resourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [JobFilterName] {
            return [
                .jobStatus,
                .resourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jobStatus: return "JobStatus"
            case .resourceType: return "ResourceType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobFilterName(rawValue: rawValue) ?? JobFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case queued
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .queued,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .queued: return "Queued"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMemoryMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duration
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricName] {
            return [
                .duration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMemoryMetricName(rawValue: rawValue) ?? LambdaFunctionMemoryMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMemoryMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expected
        case lowerBound
        case upperBound
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricStatistic] {
            return [
                .expected,
                .lowerBound,
                .upperBound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expected: return "Expected"
            case .lowerBound: return "LowerBound"
            case .upperBound: return "UpperBound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMemoryMetricStatistic(rawValue: rawValue) ?? LambdaFunctionMemoryMetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a projected utilization metric of an Lambda function recommendation option.
    public struct LambdaFunctionMemoryProjectedMetric: Swift.Equatable {
        /// The name of the projected utilization metric.
        public var name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName?
        /// The statistic of the projected utilization metric.
        public var statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic?
        /// The values of the projected utilization metrics.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memorySize
        case projectedUtilizationMetrics
        case rank
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if memorySize != 0 {
            try encodeContainer.encode(memorySize, forKey: .memorySize)
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for lambdafunctionmemoryprojectedmetric0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(lambdafunctionmemoryprojectedmetric0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let memorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memorySize) ?? 0
        memorySize = memorySizeDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation option for an Lambda function.
    public struct LambdaFunctionMemoryRecommendationOption: Swift.Equatable {
        /// The memory size, in MB, of the function recommendation option.
        public var memorySize: Swift.Int
        /// An array of objects that describe the projected utilization metrics of the function recommendation option.
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]?
        /// The rank of the function recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the Lambda function recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init (
            memorySize: Swift.Int = 0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.memorySize = memorySize
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duration
        case memory
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricName] {
            return [
                .duration,
                .memory,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case .memory: return "Memory"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMetricName(rawValue: rawValue) ?? LambdaFunctionMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricStatistic] {
            return [
                .average,
                .maximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMetricStatistic(rawValue: rawValue) ?? LambdaFunctionMetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentMemorySize
        case currentPerformanceRisk
        case finding
        case findingReasonCodes
        case functionArn
        case functionVersion
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case memorySizeRecommendationOptions
        case numberOfInvocations
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if currentMemorySize != 0 {
            try encodeContainer.encode(currentMemorySize, forKey: .currentMemorySize)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for lambdafunctionrecommendationfindingreasoncode0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(lambdafunctionrecommendationfindingreasoncode0.rawValue)
            }
        }
        if let functionArn = self.functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
        if let functionVersion = self.functionVersion {
            try encodeContainer.encode(functionVersion, forKey: .functionVersion)
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encodeTimestamp(lastRefreshTimestamp, format: .epochSeconds, forKey: .lastRefreshTimestamp)
        }
        if lookbackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookbackPeriodInDays, forKey: .lookbackPeriodInDays)
        }
        if let memorySizeRecommendationOptions = memorySizeRecommendationOptions {
            var memorySizeRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memorySizeRecommendationOptions)
            for lambdafunctionmemoryrecommendationoption0 in memorySizeRecommendationOptions {
                try memorySizeRecommendationOptionsContainer.encode(lambdafunctionmemoryrecommendationoption0)
            }
        }
        if numberOfInvocations != 0 {
            try encodeContainer.encode(numberOfInvocations, forKey: .numberOfInvocations)
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for lambdafunctionutilizationmetric0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(lambdafunctionutilizationmetric0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let functionVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionVersion)
        functionVersion = functionVersionDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentMemorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentMemorySize) ?? 0
        currentMemorySize = currentMemorySizeDecoded
        let numberOfInvocationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfInvocations) ?? 0
        numberOfInvocations = numberOfInvocationsDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookbackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookbackPeriodInDays) ?? 0.0
        lookbackPeriodInDays = lookbackPeriodInDaysDecoded
        let lastRefreshTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding.self, forKey: .finding)
        finding = findingDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]()
            for enum0 in findingReasonCodesContainer {
                if let enum0 = enum0 {
                    findingReasonCodesDecoded0?.append(enum0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
        let memorySizeRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption?].self, forKey: .memorySizeRecommendationOptions)
        var memorySizeRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil
        if let memorySizeRecommendationOptionsContainer = memorySizeRecommendationOptionsContainer {
            memorySizeRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]()
            for structure0 in memorySizeRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    memorySizeRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        memorySizeRecommendationOptions = memorySizeRecommendationOptionsDecoded0
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an Lambda function recommendation.
    public struct LambdaFunctionRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the function.
        public var accountId: Swift.String?
        /// The amount of memory, in MB, that's allocated to the current function.
        public var currentMemorySize: Swift.Int
        /// The risk of the current Lambda function not meeting the performance needs of its workloads. The higher the risk, the more likely the current Lambda function requires more memory.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// The finding classification of the function. Findings for functions include:
        ///
        /// * Optimized — The function is correctly provisioned to run your workload based on its current configuration and its utilization history. This finding classification does not include finding reason codes.
        ///
        /// * NotOptimized — The function is performing at a higher level (over-provisioned) or at a lower level (under-provisioned) than required for your workload because its current configuration is not optimal. Over-provisioned resources might lead to unnecessary infrastructure cost, and under-provisioned resources might lead to poor application performance. This finding classification can include the MemoryUnderprovisioned and MemoryUnderprovisioned finding reason codes.
        ///
        /// * Unavailable — Compute Optimizer was unable to generate a recommendation for the function. This could be because the function has not accumulated sufficient metric data, or the function does not qualify for a recommendation. This finding classification can include the InsufficientData and Inconclusive finding reason codes. Functions with a finding of unavailable are not returned unless you specify the filter parameter with a value of Unavailable in your GetLambdaFunctionRecommendations request.
        public var finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding?
        /// The reason for the finding classification of the function. Functions that have a finding classification of Optimized don't have a finding reason code. Finding reason codes for functions include:
        ///
        /// * MemoryOverprovisioned — The function is over-provisioned when its memory configuration can be sized down while still meeting the performance requirements of your workload. An over-provisioned function might lead to unnecessary infrastructure cost. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * MemoryUnderprovisioned — The function is under-provisioned when its memory configuration doesn't meet the performance requirements of the workload. An under-provisioned function might lead to poor application performance. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * InsufficientData — The function does not have sufficient metric data for Compute Optimizer to generate a recommendation. For more information, see the [Supported resources and requirements](https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html) in the Compute Optimizer User Guide. This finding reason code is part of the Unavailable finding classification.
        ///
        /// * Inconclusive — The function does not qualify for a recommendation because Compute Optimizer cannot generate a recommendation with a high degree of confidence. This finding reason code is part of the Unavailable finding classification.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]?
        /// The Amazon Resource Name (ARN) of the current function.
        public var functionArn: Swift.String?
        /// The version number of the current function.
        public var functionVersion: Swift.String?
        /// The timestamp of when the function recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The number of days for which utilization metrics were analyzed for the function.
        public var lookbackPeriodInDays: Swift.Double
        /// An array of objects that describe the memory configuration recommendation options for the function.
        public var memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]?
        /// The number of times your function code was applied during the look-back period.
        public var numberOfInvocations: Swift.Int
        /// An array of objects that describe the utilization metrics of the function.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentMemorySize: Swift.Int = 0,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil,
            functionArn: Swift.String? = nil,
            functionVersion: Swift.String? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil,
            numberOfInvocations: Swift.Int = 0,
            utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentMemorySize = currentMemorySize
            self.currentPerformanceRisk = currentPerformanceRisk
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.functionArn = functionArn
            self.functionVersion = functionVersion
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.memorySizeRecommendationOptions = memorySizeRecommendationOptions
            self.numberOfInvocations = numberOfInvocations
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalue0 in values {
                try valuesContainer.encode(filtervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a filter that returns a more specific list of Lambda function recommendations. Use this filter with the [GetLambdaFunctionRecommendations] action. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, JobFilter with the [DescribeRecommendationExportJobs] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct LambdaFunctionRecommendationFilter: Swift.Equatable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized). Specify FindingReasonCode to return recommendations with a specific finding reason code (for example, MemoryUnderprovisioned).
        public var name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:
        ///
        /// * Specify Optimized, NotOptimized, or Unavailable if you specify the name parameter as Finding.
        ///
        /// * Specify MemoryOverprovisioned, MemoryUnderprovisioned, InsufficientData, or Inconclusive if you specify the name parameter as FindingReasonCode.
        public var values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case findingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFilterName] {
            return [
                .finding,
                .findingReasonCode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCode: return "FindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFilterName(rawValue: rawValue) ?? LambdaFunctionRecommendationFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFinding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFinding] {
            return [
                .notOptimized,
                .optimized,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .unavailable: return "Unavailable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFinding(rawValue: rawValue) ?? LambdaFunctionRecommendationFinding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inconclusive
        case insufficientData
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFindingReasonCode] {
            return [
                .inconclusive,
                .insufficientData,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inconclusive: return "Inconclusive"
            case .insufficientData: return "InsufficientData"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFindingReasonCode(rawValue: rawValue) ?? LambdaFunctionRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a utilization metric of an Lambda function.
    public struct LambdaFunctionUtilizationMetric: Swift.Equatable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Duration - The amount of time that your function code spends processing an event.
        ///
        /// * Memory - The amount of memory used per invocation.
        public var name: ComputeOptimizerClientTypes.LambdaFunctionMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request exceeds a limit of the service.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.MemorySizeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memory
        case memoryReservation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let memoryReservation = self.memoryReservation {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memoryReservation)
        memoryReservation = memoryReservationDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// The memory size configurations of a container.
    public struct MemorySizeConfiguration: Swift.Equatable {
        /// The amount of memory in the container.
        public var memory: Swift.Int?
        /// The limit of memory reserve for the container.
        public var memoryReservation: Swift.Int?

        public init (
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil
        )
        {
            self.memory = memory
            self.memoryReservation = memoryReservation
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpu
        case diskReadBytesPerSecond
        case diskReadOpsPerSecond
        case diskWriteBytesPerSecond
        case diskWriteOpsPerSecond
        case ebsReadBytesPerSecond
        case ebsReadOpsPerSecond
        case ebsWriteBytesPerSecond
        case ebsWriteOpsPerSecond
        case memory
        case networkInBytesPerSecond
        case networkOutBytesPerSecond
        case networkPacketsInPerSecond
        case networkPacketsOutPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .cpu,
                .diskReadBytesPerSecond,
                .diskReadOpsPerSecond,
                .diskWriteBytesPerSecond,
                .diskWriteOpsPerSecond,
                .ebsReadBytesPerSecond,
                .ebsReadOpsPerSecond,
                .ebsWriteBytesPerSecond,
                .ebsWriteOpsPerSecond,
                .memory,
                .networkInBytesPerSecond,
                .networkOutBytesPerSecond,
                .networkPacketsInPerSecond,
                .networkPacketsOutPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .diskReadBytesPerSecond: return "DISK_READ_BYTES_PER_SECOND"
            case .diskReadOpsPerSecond: return "DISK_READ_OPS_PER_SECOND"
            case .diskWriteBytesPerSecond: return "DISK_WRITE_BYTES_PER_SECOND"
            case .diskWriteOpsPerSecond: return "DISK_WRITE_OPS_PER_SECOND"
            case .ebsReadBytesPerSecond: return "EBS_READ_BYTES_PER_SECOND"
            case .ebsReadOpsPerSecond: return "EBS_READ_OPS_PER_SECOND"
            case .ebsWriteBytesPerSecond: return "EBS_WRITE_BYTES_PER_SECOND"
            case .ebsWriteOpsPerSecond: return "EBS_WRITE_OPS_PER_SECOND"
            case .memory: return "Memory"
            case .networkInBytesPerSecond: return "NETWORK_IN_BYTES_PER_SECOND"
            case .networkOutBytesPerSecond: return "NETWORK_OUT_BYTES_PER_SECOND"
            case .networkPacketsInPerSecond: return "NETWORK_PACKETS_IN_PER_SECOND"
            case .networkPacketsOutPerSecond: return "NETWORK_PACKETS_OUT_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum MigrationEffort: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case veryLow
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationEffort] {
            return [
                .high,
                .low,
                .medium,
                .veryLow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case .veryLow: return "VeryLow"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationEffort(rawValue: rawValue) ?? MigrationEffort.sdkUnknown(rawValue)
        }
    }
}

extension MissingAuthenticationToken {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MissingAuthenticationTokenBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request must contain either a valid (registered) Amazon Web Services access key ID or X.509 certificate.
public struct MissingAuthenticationToken: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingAuthenticationTokenBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingAuthenticationTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OptInRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OptInRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The account is not opted in to Compute Optimizer.
public struct OptInRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OptInRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OptInRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum PlatformDifference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case architecture
        case hypervisor
        case instanceStoreAvailability
        case networkInterface
        case storageInterface
        case virtualizationType
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformDifference] {
            return [
                .architecture,
                .hypervisor,
                .instanceStoreAvailability,
                .networkInterface,
                .storageInterface,
                .virtualizationType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .architecture: return "Architecture"
            case .hypervisor: return "Hypervisor"
            case .instanceStoreAvailability: return "InstanceStoreAvailability"
            case .networkInterface: return "NetworkInterface"
            case .storageInterface: return "StorageInterface"
            case .virtualizationType: return "VirtualizationType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformDifference(rawValue: rawValue) ?? PlatformDifference.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case timestamps
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let timestamps = timestamps {
            var timestampsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestamps)
            for timestamp0 in timestamps {
                try timestampsContainer.encodeTimestamp(timestamp0, format: .epochSeconds)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for metricvalue0 in values {
                try valuesContainer.encode(metricvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricName.self, forKey: .name)
        name = nameDecoded
        let timestampsContainer = try containerValues.decodeIfPresent([ClientRuntime.Date?].self, forKey: .timestamps)
        var timestampsDecoded0:[ClientRuntime.Date]? = nil
        if let timestampsContainer = timestampsContainer {
            timestampsDecoded0 = [ClientRuntime.Date]()
            for timestamp0 in timestampsContainer {
                if let timestamp0 = timestamp0 {
                    timestampsDecoded0?.append(timestamp0)
                }
            }
        }
        timestamps = timestampsDecoded0
        let valuesContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .values)
        var valuesDecoded0:[Swift.Double]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.Double]()
            for double0 in valuesContainer {
                if let double0 = double0 {
                    valuesDecoded0?.append(double0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a projected utilization metric of a recommendation option, such as an Amazon EC2 instance. This represents the projected utilization of a recommendation option had you used that resource during the analyzed period. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option. The Cpu and Memory metrics are the only projected utilization metrics returned when you run the [GetEC2RecommendationProjectedMetrics] action. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
    public struct ProjectedMetric: Swift.Equatable {
        /// The name of the projected utilization metric. The following projected utilization metrics are returned:
        ///
        /// * Cpu - The projected percentage of allocated EC2 compute units that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the processing power required to run an application on the recommendation option. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core. Units: Percent
        ///
        /// * Memory - The percentage of memory that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the amount of memory required to run an application on the recommendation option. Units: Percent The Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        public var name: ComputeOptimizerClientTypes.MetricName?
        /// The timestamps of the projected utilization metric.
        public var timestamps: [ClientRuntime.Date]?
        /// The values of the projected utilization metrics.
        public var values: [Swift.Double]?

        public init (
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.name = name
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension PutRecommendationPreferencesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
        case resourceType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enhancedInfrastructureMetrics = self.enhancedInfrastructureMetrics {
            try encodeContainer.encode(enhancedInfrastructureMetrics.rawValue, forKey: .enhancedInfrastructureMetrics)
        }
        if let externalMetricsPreference = self.externalMetricsPreference {
            try encodeContainer.encode(externalMetricsPreference, forKey: .externalMetricsPreference)
        }
        if let inferredWorkloadTypes = self.inferredWorkloadTypes {
            try encodeContainer.encode(inferredWorkloadTypes.rawValue, forKey: .inferredWorkloadTypes)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
    }
}

extension PutRecommendationPreferencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRecommendationPreferencesInput: Swift.Equatable {
    /// The status of the enhanced infrastructure metrics recommendation preference to create or update. Specify the Active status to activate the preference, or specify Inactive to deactivate the preference. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    /// The provider of the external metrics recommendation preference to create or update. Specify a valid provider in the source field to activate the preference. To delete this preference, see the [DeleteRecommendationPreferences] action. This preference can only be set for the Ec2Instance resource type. For more information, see [External metrics ingestion](https://docs.aws.amazon.com/compute-optimizer/latest/ug/external-metrics-ingestion.html) in the Compute Optimizer User Guide.
    public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
    /// The status of the inferred workload types recommendation preference to create or update. The inferred workload type feature is active by default. To deactivate it, create a recommendation preference. Specify the Inactive status to deactivate the feature, or specify Active to activate it. For more information, see [Inferred workload types](https://docs.aws.amazon.com/compute-optimizer/latest/ug/inferred-workload-types.html) in the Compute Optimizer User Guide.
    public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
    /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group. The valid values for this parameter are Ec2Instance and AutoScalingGroup.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// An object that describes the scope of the recommendation preference to create. You can create recommendation preferences at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide. You cannot create recommendation preferences for Auto Scaling groups at the organization and account levels. You can create recommendation preferences for Auto Scaling groups only at the resource level by specifying a scope name of ResourceArn and a scope value of the Auto Scaling group Amazon Resource Name (ARN). This will configure the preference for all instances that are part of the specified Auto Scaling group. You also cannot create recommendation preferences at the resource level for instances that are part of an Auto Scaling group. You can create recommendation preferences at the resource level only for standalone instances.
    public var scope: ComputeOptimizerClientTypes.Scope?

    public init (
        enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
        externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
        inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil
    )
    {
        self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        self.externalMetricsPreference = externalMetricsPreference
        self.inferredWorkloadTypes = inferredWorkloadTypes
        self.resourceType = resourceType
        self.scope = scope
    }
}

struct PutRecommendationPreferencesInputBody: Swift.Equatable {
    let resourceType: ComputeOptimizerClientTypes.ResourceType?
    let scope: ComputeOptimizerClientTypes.Scope?
    let enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    let inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
    let externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
}

extension PutRecommendationPreferencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
        case resourceType
        case scope
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let enhancedInfrastructureMetricsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics.self, forKey: .enhancedInfrastructureMetrics)
        enhancedInfrastructureMetrics = enhancedInfrastructureMetricsDecoded
        let inferredWorkloadTypesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.InferredWorkloadTypesPreference.self, forKey: .inferredWorkloadTypes)
        inferredWorkloadTypes = inferredWorkloadTypesDecoded
        let externalMetricsPreferenceDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExternalMetricsPreference.self, forKey: .externalMetricsPreference)
        externalMetricsPreference = externalMetricsPreferenceDecoded
    }
}

extension PutRecommendationPreferencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRecommendationPreferencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRecommendationPreferencesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRecommendationPreferencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRecommendationPreferencesOutputResponse: Swift.Equatable {

    public init () { }
}

extension ComputeOptimizerClientTypes.ReasonCodeSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FindingReasonCode.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// A summary of a finding reason code.
    public struct ReasonCodeSummary: Swift.Equatable {
        /// The name of the finding reason code.
        public var name: ComputeOptimizerClientTypes.FindingReasonCode?
        /// The value of the finding reason code summary.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.FindingReasonCode? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendationExportJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp
        case destination
        case failureReason
        case jobId
        case lastUpdatedTimestamp
        case resourceType
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExportDestination.self, forKey: .destination)
        destination = destinationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation export job. Use the [DescribeRecommendationExportJobs] action to view your recommendation export jobs. Use the [ExportAutoScalingGroupRecommendations] or [ExportEC2InstanceRecommendations] actions to request an export of your recommendations.
    public struct RecommendationExportJob: Swift.Equatable {
        /// The timestamp of when the export job was created.
        public var creationTimestamp: ClientRuntime.Date?
        /// An object that describes the destination of the export file.
        public var destination: ComputeOptimizerClientTypes.ExportDestination?
        /// The reason for an export job failure.
        public var failureReason: Swift.String?
        /// The identification number of the export job.
        public var jobId: Swift.String?
        /// The timestamp of when the export job was last updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The resource type of the exported recommendations.
        public var resourceType: ComputeOptimizerClientTypes.ResourceType?
        /// The status of the export job.
        public var status: ComputeOptimizerClientTypes.JobStatus?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            destination: ComputeOptimizerClientTypes.ExportDestination? = nil,
            failureReason: Swift.String? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
            status: ComputeOptimizerClientTypes.JobStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.destination = destination
            self.failureReason = failureReason
            self.jobId = jobId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceType = resourceType
            self.status = status
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum RecommendationPreferenceName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationPreferenceName] {
            return [
                .enhancedInfrastructureMetrics,
                .externalMetricsPreference,
                .inferredWorkloadTypes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enhancedInfrastructureMetrics: return "EnhancedInfrastructureMetrics"
            case .externalMetricsPreference: return "ExternalMetricsPreference"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationPreferenceName(rawValue: rawValue) ?? RecommendationPreferenceName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.RecommendationPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuVendorArchitectures
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuVendorArchitectures = cpuVendorArchitectures {
            var cpuVendorArchitecturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cpuVendorArchitectures)
            for cpuvendorarchitecture0 in cpuVendorArchitectures {
                try cpuVendorArchitecturesContainer.encode(cpuvendorarchitecture0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuVendorArchitecturesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.CpuVendorArchitecture?].self, forKey: .cpuVendorArchitectures)
        var cpuVendorArchitecturesDecoded0:[ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil
        if let cpuVendorArchitecturesContainer = cpuVendorArchitecturesContainer {
            cpuVendorArchitecturesDecoded0 = [ComputeOptimizerClientTypes.CpuVendorArchitecture]()
            for enum0 in cpuVendorArchitecturesContainer {
                if let enum0 = enum0 {
                    cpuVendorArchitecturesDecoded0?.append(enum0)
                }
            }
        }
        cpuVendorArchitectures = cpuVendorArchitecturesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the recommendation preferences to return in the response of a [GetAutoScalingGroupRecommendations], [GetEC2InstanceRecommendations], and [GetEC2RecommendationProjectedMetrics] request.
    public struct RecommendationPreferences: Swift.Equatable {
        /// Specifies the CPU vendor and architecture for Amazon EC2 instance and Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:
        ///
        /// * A [GetEC2InstanceRecommendations] or [GetAutoScalingGroupRecommendations] request, Compute Optimizer returns recommendations that consist of Graviton2 instance types only.
        ///
        /// * A [GetEC2RecommendationProjectedMetrics] request, Compute Optimizer returns projected utilization metrics for Graviton2 instance type recommendations only.
        ///
        /// * A [ExportEC2InstanceRecommendations] or [ExportAutoScalingGroupRecommendations] request, Compute Optimizer exports recommendations that consist of Graviton2 instance types only.
        public var cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]?

        public init (
            cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil
        )
        {
            self.cpuVendorArchitectures = cpuVendorArchitectures
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendationPreferencesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
        case resourceType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enhancedInfrastructureMetrics = self.enhancedInfrastructureMetrics {
            try encodeContainer.encode(enhancedInfrastructureMetrics.rawValue, forKey: .enhancedInfrastructureMetrics)
        }
        if let externalMetricsPreference = self.externalMetricsPreference {
            try encodeContainer.encode(externalMetricsPreference, forKey: .externalMetricsPreference)
        }
        if let inferredWorkloadTypes = self.inferredWorkloadTypes {
            try encodeContainer.encode(inferredWorkloadTypes.rawValue, forKey: .inferredWorkloadTypes)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let enhancedInfrastructureMetricsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics.self, forKey: .enhancedInfrastructureMetrics)
        enhancedInfrastructureMetrics = enhancedInfrastructureMetricsDecoded
        let inferredWorkloadTypesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.InferredWorkloadTypesPreference.self, forKey: .inferredWorkloadTypes)
        inferredWorkloadTypes = inferredWorkloadTypesDecoded
        let externalMetricsPreferenceDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExternalMetricsPreference.self, forKey: .externalMetricsPreference)
        externalMetricsPreference = externalMetricsPreferenceDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation preference.
    public struct RecommendationPreferencesDetail: Swift.Equatable {
        /// The status of the enhanced infrastructure metrics recommendation preference. When the recommendations page is refreshed, a status of Active confirms that the preference is applied to the recommendations, and a status of Inactive confirms that the preference isn't yet applied to recommendations. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
        /// An object that describes the external metrics recommendation preference. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response.
        public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
        /// The status of the inferred workload types recommendation preference. When the recommendations page is refreshed, a status of Active confirms that the preference is applied to the recommendations, and a status of Inactive confirms that the preference isn't yet applied to recommendations.
        public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
        /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public var resourceType: ComputeOptimizerClientTypes.ResourceType?
        /// An object that describes the scope of the recommendation preference. Recommendation preferences can be created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var scope: ComputeOptimizerClientTypes.Scope?

        public init (
            enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
            externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
            inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil,
            resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
            scope: ComputeOptimizerClientTypes.Scope? = nil
        )
        {
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.externalMetricsPreference = externalMetricsPreference
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.resourceType = resourceType
            self.scope = scope
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendationSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendationSourceArn
        case recommendationSourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recommendationSourceArn = self.recommendationSourceArn {
            try encodeContainer.encode(recommendationSourceArn, forKey: .recommendationSourceArn)
        }
        if let recommendationSourceType = self.recommendationSourceType {
            try encodeContainer.encode(recommendationSourceType.rawValue, forKey: .recommendationSourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationSourceArn)
        recommendationSourceArn = recommendationSourceArnDecoded
        let recommendationSourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationSourceType.self, forKey: .recommendationSourceType)
        recommendationSourceType = recommendationSourceTypeDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the source of a recommendation, such as an Amazon EC2 instance or Auto Scaling group.
    public struct RecommendationSource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the recommendation source.
        public var recommendationSourceArn: Swift.String?
        /// The resource type of the recommendation source.
        public var recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType?

        public init (
            recommendationSourceArn: Swift.String? = nil,
            recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil
        )
        {
            self.recommendationSourceArn = recommendationSourceArn
            self.recommendationSourceType = recommendationSourceType
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum RecommendationSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case ecsService
        case lambdaFunction
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationSourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .ecsService,
                .lambdaFunction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .ecsService: return "EcsService"
            case .lambdaFunction: return "LambdaFunction"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationSourceType(rawValue: rawValue) ?? RecommendationSourceType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.RecommendationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentPerformanceRiskRatings
        case recommendationResourceType
        case savingsOpportunity
        case summaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentPerformanceRiskRatings = self.currentPerformanceRiskRatings {
            try encodeContainer.encode(currentPerformanceRiskRatings, forKey: .currentPerformanceRiskRatings)
        }
        if let recommendationResourceType = self.recommendationResourceType {
            try encodeContainer.encode(recommendationResourceType.rawValue, forKey: .recommendationResourceType)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
        if let summaries = summaries {
            var summariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .summaries)
            for summary0 in summaries {
                try summariesContainer.encode(summary0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Summary?].self, forKey: .summaries)
        var summariesDecoded0:[ComputeOptimizerClientTypes.Summary]? = nil
        if let summariesContainer = summariesContainer {
            summariesDecoded0 = [ComputeOptimizerClientTypes.Summary]()
            for structure0 in summariesContainer {
                if let structure0 = structure0 {
                    summariesDecoded0?.append(structure0)
                }
            }
        }
        summaries = summariesDecoded0
        let recommendationResourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationSourceType.self, forKey: .recommendationResourceType)
        recommendationResourceType = recommendationResourceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
        let currentPerformanceRiskRatingsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings.self, forKey: .currentPerformanceRiskRatings)
        currentPerformanceRiskRatings = currentPerformanceRiskRatingsDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// A summary of a recommendation.
    public struct RecommendationSummary: Swift.Equatable {
        /// The Amazon Web Services account ID of the recommendation summary.
        public var accountId: Swift.String?
        /// An object that describes the performance risk ratings for a given resource type.
        public var currentPerformanceRiskRatings: ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings?
        /// The resource type that the recommendation summary applies to.
        public var recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType?
        /// An object that describes the savings opportunity for a given resource type. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An array of objects that describe a recommendation summary.
        public var summaries: [ComputeOptimizerClientTypes.Summary]?

        public init (
            accountId: Swift.String? = nil,
            currentPerformanceRiskRatings: ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings? = nil,
            recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            summaries: [ComputeOptimizerClientTypes.Summary]? = nil
        )
        {
            self.accountId = accountId
            self.currentPerformanceRiskRatings = currentPerformanceRiskRatings
            self.recommendationResourceType = recommendationResourceType
            self.savingsOpportunity = savingsOpportunity
            self.summaries = summaries
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectedMetrics
        case rank
        case recommendedInstanceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectedMetrics = projectedMetrics {
            var projectedMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedMetrics)
            for projectedmetric0 in projectedMetrics {
                try projectedMetricsContainer.encode(projectedmetric0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let recommendedInstanceType = self.recommendedInstanceType {
            try encodeContainer.encode(recommendedInstanceType, forKey: .recommendedInstanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedInstanceType)
        recommendedInstanceType = recommendedInstanceTypeDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let projectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ProjectedMetric?].self, forKey: .projectedMetrics)
        var projectedMetricsDecoded0:[ComputeOptimizerClientTypes.ProjectedMetric]? = nil
        if let projectedMetricsContainer = projectedMetricsContainer {
            projectedMetricsDecoded0 = [ComputeOptimizerClientTypes.ProjectedMetric]()
            for structure0 in projectedMetricsContainer {
                if let structure0 = structure0 {
                    projectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedMetrics = projectedMetricsDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a projected utilization metric of a recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned when you run the [GetEC2RecommendationProjectedMetrics] action. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
    public struct RecommendedOptionProjectedMetric: Swift.Equatable {
        /// An array of objects that describe a projected utilization metric.
        public var projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]?
        /// The rank of the recommendation option projected metric. The top recommendation option is ranked as 1. The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as 1 is related to the recommendation option that is also ranked as 1 in the same response.
        public var rank: Swift.Int
        /// The recommended instance type.
        public var recommendedInstanceType: Swift.String?

        public init (
            projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            recommendedInstanceType: Swift.String? = nil
        )
        {
            self.projectedMetrics = projectedMetrics
            self.rank = rank
            self.recommendedInstanceType = recommendedInstanceType
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource that is required for the action doesn't exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case ecsService
        case lambdaFunction
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .ecsService,
                .lambdaFunction,
                .notApplicable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .ecsService: return "EcsService"
            case .lambdaFunction: return "LambdaFunction"
            case .notApplicable: return "NotApplicable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.S3Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case key
        case metadataKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let metadataKey = self.metadataKey {
            try encodeContainer.encode(metadataKey, forKey: .metadataKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let metadataKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataKey)
        metadataKey = metadataKeyDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public struct S3Destination: Swift.Equatable {
        /// The name of the Amazon S3 bucket used as the destination of an export file.
        public var bucket: Swift.String?
        /// The Amazon S3 bucket key of an export file. The key uniquely identifies the object, or export file, in the S3 bucket.
        public var key: Swift.String?
        /// The Amazon S3 bucket key of a metadata file. The key uniquely identifies the object, or metadata file, in the S3 bucket.
        public var metadataKey: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            metadataKey: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.metadataKey = metadataKey
        }
    }

}

extension ComputeOptimizerClientTypes.S3DestinationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    public struct S3DestinationConfig: Swift.Equatable {
        /// The name of the Amazon S3 bucket to use as the destination for an export job.
        public var bucket: Swift.String?
        /// The Amazon S3 bucket prefix for an export job.
        public var keyPrefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension ComputeOptimizerClientTypes.SavingsOpportunity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedMonthlySavings
        case savingsOpportunityPercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedMonthlySavings = self.estimatedMonthlySavings {
            try encodeContainer.encode(estimatedMonthlySavings, forKey: .estimatedMonthlySavings)
        }
        if savingsOpportunityPercentage != 0.0 {
            try encodeContainer.encode(savingsOpportunityPercentage, forKey: .savingsOpportunityPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsOpportunityPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .savingsOpportunityPercentage) ?? 0.0
        savingsOpportunityPercentage = savingsOpportunityPercentageDecoded
        let estimatedMonthlySavingsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EstimatedMonthlySavings.self, forKey: .estimatedMonthlySavings)
        estimatedMonthlySavings = estimatedMonthlySavingsDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
    public struct SavingsOpportunity: Swift.Equatable {
        /// An object that describes the estimated monthly savings amount possible, based on On-Demand instance pricing, by adopting Compute Optimizer recommendations for a given resource.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer recommendations for a given resource.
        public var savingsOpportunityPercentage: Swift.Double

        public init (
            estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }

}

extension ComputeOptimizerClientTypes.Scope: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ScopeName.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the scope of a recommendation preference. Recommendation preferences can be created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide. You cannot create recommendation preferences for Auto Scaling groups at the organization and account levels. You can create recommendation preferences for Auto Scaling groups only at the resource level by specifying a scope name of ResourceArn and a scope value of the Auto Scaling group Amazon Resource Name (ARN). This will configure the preference for all instances that are part of the specified Auto Scaling group. You also cannot create recommendation preferences at the resource level for instances that are part of an Auto Scaling group. You can create recommendation preferences at the resource level only for standalone instances.
    public struct Scope: Swift.Equatable {
        /// The name of the scope. The following scopes are possible:
        ///
        /// * Organization - Specifies that the recommendation preference applies at the organization level, for all member accounts of an organization.
        ///
        /// * AccountId - Specifies that the recommendation preference applies at the account level, for all resources of a given resource type in an account.
        ///
        /// * ResourceArn - Specifies that the recommendation preference applies at the individual resource level.
        public var name: ComputeOptimizerClientTypes.ScopeName?
        /// The value of the scope. If you specified the name of the scope as:
        ///
        /// * Organization - The value must be ALL_ACCOUNTS.
        ///
        /// * AccountId - The value must be a 12-digit Amazon Web Services account ID.
        ///
        /// * ResourceArn - The value must be the Amazon Resource Name (ARN) of an EC2 instance or an Auto Scaling group.
        ///
        ///
        /// Only EC2 instance and Auto Scaling group ARNs are currently supported.
        public var value: Swift.String?

        public init (
            name: ComputeOptimizerClientTypes.ScopeName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum ScopeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case organization
        case resourceArn
        case sdkUnknown(Swift.String)

        public static var allCases: [ScopeName] {
            return [
                .accountId,
                .organization,
                .resourceArn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .organization: return "Organization"
            case .resourceArn: return "ResourceArn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScopeName(rawValue: rawValue) ?? ScopeName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ServiceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingConfiguration
        case containerConfigurations
        case cpu
        case memory
        case taskDefinitionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingConfiguration = self.autoScalingConfiguration {
            try encodeContainer.encode(autoScalingConfiguration.rawValue, forKey: .autoScalingConfiguration)
        }
        if let containerConfigurations = containerConfigurations {
            var containerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerConfigurations)
            for containerconfiguration0 in containerConfigurations {
                try containerConfigurationsContainer.encode(containerconfiguration0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let taskDefinitionArn = self.taskDefinitionArn {
            try encodeContainer.encode(taskDefinitionArn, forKey: .taskDefinitionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
        let containerConfigurationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ContainerConfiguration?].self, forKey: .containerConfigurations)
        var containerConfigurationsDecoded0:[ComputeOptimizerClientTypes.ContainerConfiguration]? = nil
        if let containerConfigurationsContainer = containerConfigurationsContainer {
            containerConfigurationsDecoded0 = [ComputeOptimizerClientTypes.ContainerConfiguration]()
            for structure0 in containerConfigurationsContainer {
                if let structure0 = structure0 {
                    containerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        containerConfigurations = containerConfigurationsDecoded0
        let autoScalingConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.AutoScalingConfiguration.self, forKey: .autoScalingConfiguration)
        autoScalingConfiguration = autoScalingConfigurationDecoded
        let taskDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinitionArn)
        taskDefinitionArn = taskDefinitionArnDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// The Amazon ECS service configurations used for recommendations.
    public struct ServiceConfiguration: Swift.Equatable {
        /// Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. The Auto Scaling configuration methods include:
        ///
        /// * TARGET_TRACKING_SCALING_CPU — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.
        ///
        /// * TARGET_TRACKING_SCALING_MEMORY — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.
        ///
        ///
        /// For more information about step scaling and target scaling, see [ Step scaling policies for Application Auto Scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) and [ Target tracking scaling policies for Application Auto Scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) in the Application Auto Scaling User Guide.
        public var autoScalingConfiguration: ComputeOptimizerClientTypes.AutoScalingConfiguration?
        /// The container configurations within a task of an Amazon ECS service.
        public var containerConfigurations: [ComputeOptimizerClientTypes.ContainerConfiguration]?
        /// The number of CPU units used by the tasks in the Amazon ECS service.
        public var cpu: Swift.Int?
        /// The amount of memory used by the tasks in the Amazon ECS service.
        public var memory: Swift.Int?
        /// The task definition ARN used by the tasks in the Amazon ECS service.
        public var taskDefinitionArn: Swift.String?

        public init (
            autoScalingConfiguration: ComputeOptimizerClientTypes.AutoScalingConfiguration? = nil,
            containerConfigurations: [ComputeOptimizerClientTypes.ContainerConfiguration]? = nil,
            cpu: Swift.Int? = nil,
            memory: Swift.Int? = nil,
            taskDefinitionArn: Swift.String? = nil
        )
        {
            self.autoScalingConfiguration = autoScalingConfiguration
            self.containerConfigurations = containerConfigurations
            self.cpu = cpu
            self.memory = memory
            self.taskDefinitionArn = taskDefinitionArn
        }
    }

}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request has failed due to a temporary failure of the server.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case failed
        case inactive
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .active,
                .failed,
                .inactive,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .failed: return "Failed"
            case .inactive: return "Inactive"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.Summary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case reasonCodeSummaries
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let reasonCodeSummaries = reasonCodeSummaries {
            var reasonCodeSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reasonCodeSummaries)
            for reasoncodesummary0 in reasonCodeSummaries {
                try reasonCodeSummariesContainer.encode(reasoncodesummary0)
            }
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
        let reasonCodeSummariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ReasonCodeSummary?].self, forKey: .reasonCodeSummaries)
        var reasonCodeSummariesDecoded0:[ComputeOptimizerClientTypes.ReasonCodeSummary]? = nil
        if let reasonCodeSummariesContainer = reasonCodeSummariesContainer {
            reasonCodeSummariesDecoded0 = [ComputeOptimizerClientTypes.ReasonCodeSummary]()
            for structure0 in reasonCodeSummariesContainer {
                if let structure0 = structure0 {
                    reasonCodeSummariesDecoded0?.append(structure0)
                }
            }
        }
        reasonCodeSummaries = reasonCodeSummariesDecoded0
    }
}

extension ComputeOptimizerClientTypes {
    /// The summary of a recommendation.
    public struct Summary: Swift.Equatable {
        /// The finding classification of the recommendation.
        public var name: ComputeOptimizerClientTypes.Finding?
        /// An array of objects that summarize a finding reason code.
        public var reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]?
        /// The value of the recommendation summary.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.Finding? = nil,
            reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.reasonCodeSummaries = reasonCodeSummaries
            self.value = value
        }
    }

}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UpdateEnrollmentStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeMemberAccounts
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension UpdateEnrollmentStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateEnrollmentStatusInput: Swift.Equatable {
    /// Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.
    public var includeMemberAccounts: Swift.Bool
    /// The new enrollment status of the account. The following status options are available:
    ///
    /// * Active - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see [Metrics analyzed by Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html) in the Compute Optimizer User Guide.
    ///
    /// * Inactive - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.
    ///
    ///
    /// The Pending and Failed options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.
    /// This member is required.
    public var status: ComputeOptimizerClientTypes.Status?

    public init (
        includeMemberAccounts: Swift.Bool = false,
        status: ComputeOptimizerClientTypes.Status? = nil
    )
    {
        self.includeMemberAccounts = includeMemberAccounts
        self.status = status
    }
}

struct UpdateEnrollmentStatusInputBody: Swift.Equatable {
    let status: ComputeOptimizerClientTypes.Status?
    let includeMemberAccounts: Swift.Bool
}

extension UpdateEnrollmentStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeMemberAccounts
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension UpdateEnrollmentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEnrollmentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEnrollmentStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEnrollmentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateEnrollmentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
            self.statusReason = output.statusReason
        } else {
            self.status = nil
            self.statusReason = nil
        }
    }
}

public struct UpdateEnrollmentStatusOutputResponse: Swift.Equatable {
    /// The enrollment status of the account.
    public var status: ComputeOptimizerClientTypes.Status?
    /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
    public var statusReason: Swift.String?

    public init (
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.status = status
        self.statusReason = statusReason
    }
}

struct UpdateEnrollmentStatusOutputResponseBody: Swift.Equatable {
    let status: ComputeOptimizerClientTypes.Status?
    let statusReason: Swift.String?
}

extension UpdateEnrollmentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case statusReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension ComputeOptimizerClientTypes.UtilizationMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value) ?? 0.0
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a utilization metric of a resource, such as an Amazon EC2 instance. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option.
    public struct UtilizationMetric: Swift.Equatable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu - The percentage of allocated EC2 compute units that are currently in use on the instance. This metric identifies the processing power required to run an application on the instance. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core. Units: Percent
        ///
        /// * Memory - The percentage of memory that is currently in use on the instance. This metric identifies the amount of memory required to run an application on the instance. Units: Percent The Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        ///
        /// * EBS_READ_OPS_PER_SECOND - The completed read operations from all EBS volumes attached to the instance in a specified period of time. Unit: Count
        ///
        /// * EBS_WRITE_OPS_PER_SECOND - The completed write operations to all EBS volumes attached to the instance in a specified period of time. Unit: Count
        ///
        /// * EBS_READ_BYTES_PER_SECOND - The bytes read from all EBS volumes attached to the instance in a specified period of time. Unit: Bytes
        ///
        /// * EBS_WRITE_BYTES_PER_SECOND - The bytes written to all EBS volumes attached to the instance in a specified period of time. Unit: Bytes
        ///
        /// * DISK_READ_OPS_PER_SECOND - The completed read operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_WRITE_OPS_PER_SECOND - The completed write operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_READ_BYTES_PER_SECOND - The bytes read from all instance store volumes available to the instance. This metric is used to determine the volume of the data the application reads from the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_WRITE_BYTES_PER_SECOND - The bytes written to all instance store volumes available to the instance. This metric is used to determine the volume of the data the application writes onto the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * NETWORK_IN_BYTES_PER_SECOND - The number of bytes received by the instance on all network interfaces. This metric identifies the volume of incoming network traffic to a single instance.
        ///
        /// * NETWORK_OUT_BYTES_PER_SECOND - The number of bytes sent out by the instance on all network interfaces. This metric identifies the volume of outgoing network traffic from a single instance.
        ///
        /// * NETWORK_PACKETS_IN_PER_SECOND - The number of packets received by the instance on all network interfaces. This metric identifies the volume of incoming traffic in terms of the number of packets on a single instance.
        ///
        /// * NETWORK_PACKETS_OUT_PER_SECOND - The number of packets sent out by the instance on all network interfaces. This metric identifies the volume of outgoing traffic in terms of the number of packets on a single instance.
        public var name: ComputeOptimizerClientTypes.MetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volumeBaselineIOPS
        case volumeBaselineThroughput
        case volumeBurstIOPS
        case volumeBurstThroughput
        case volumeSize
        case volumeType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if volumeBaselineIOPS != 0 {
            try encodeContainer.encode(volumeBaselineIOPS, forKey: .volumeBaselineIOPS)
        }
        if volumeBaselineThroughput != 0 {
            try encodeContainer.encode(volumeBaselineThroughput, forKey: .volumeBaselineThroughput)
        }
        if volumeBurstIOPS != 0 {
            try encodeContainer.encode(volumeBurstIOPS, forKey: .volumeBurstIOPS)
        }
        if volumeBurstThroughput != 0 {
            try encodeContainer.encode(volumeBurstThroughput, forKey: .volumeBurstThroughput)
        }
        if volumeSize != 0 {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize) ?? 0
        volumeSize = volumeSizeDecoded
        let volumeBaselineIOPSDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeBaselineIOPS) ?? 0
        volumeBaselineIOPS = volumeBaselineIOPSDecoded
        let volumeBurstIOPSDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeBurstIOPS) ?? 0
        volumeBurstIOPS = volumeBurstIOPSDecoded
        let volumeBaselineThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeBaselineThroughput) ?? 0
        volumeBaselineThroughput = volumeBaselineThroughputDecoded
        let volumeBurstThroughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeBurstThroughput) ?? 0
        volumeBurstThroughput = volumeBurstThroughputDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes the configuration of an Amazon Elastic Block Store (Amazon EBS) volume.
    public struct VolumeConfiguration: Swift.Equatable {
        /// The baseline IOPS of the volume.
        public var volumeBaselineIOPS: Swift.Int
        /// The baseline throughput of the volume.
        public var volumeBaselineThroughput: Swift.Int
        /// The burst IOPS of the volume.
        public var volumeBurstIOPS: Swift.Int
        /// The burst throughput of the volume.
        public var volumeBurstThroughput: Swift.Int
        /// The size of the volume, in GiB.
        public var volumeSize: Swift.Int
        /// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public var volumeType: Swift.String?

        public init (
            volumeBaselineIOPS: Swift.Int = 0,
            volumeBaselineThroughput: Swift.Int = 0,
            volumeBurstIOPS: Swift.Int = 0,
            volumeBurstThroughput: Swift.Int = 0,
            volumeSize: Swift.Int = 0,
            volumeType: Swift.String? = nil
        )
        {
            self.volumeBaselineIOPS = volumeBaselineIOPS
            self.volumeBaselineThroughput = volumeBaselineThroughput
            self.volumeBurstIOPS = volumeBurstIOPS
            self.volumeBurstThroughput = volumeBurstThroughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentConfiguration
        case currentPerformanceRisk
        case finding
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case utilizationMetrics
        case volumeArn
        case volumeRecommendationOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentConfiguration = self.currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encodeTimestamp(lastRefreshTimestamp, format: .epochSeconds, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for ebsutilizationmetric0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(ebsutilizationmetric0)
            }
        }
        if let volumeArn = self.volumeArn {
            try encodeContainer.encode(volumeArn, forKey: .volumeArn)
        }
        if let volumeRecommendationOptions = volumeRecommendationOptions {
            var volumeRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeRecommendationOptions)
            for volumerecommendationoption0 in volumeRecommendationOptions {
                try volumeRecommendationOptionsContainer.encode(volumerecommendationoption0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeArn)
        volumeArn = volumeArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSFinding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.EBSUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookBackPeriodInDays) ?? 0.0
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let volumeRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.VolumeRecommendationOption?].self, forKey: .volumeRecommendationOptions)
        var volumeRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        if let volumeRecommendationOptionsContainer = volumeRecommendationOptionsContainer {
            volumeRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.VolumeRecommendationOption]()
            for structure0 in volumeRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    volumeRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        volumeRecommendationOptions = volumeRecommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes an Amazon Elastic Block Store (Amazon EBS) volume recommendation.
    public struct VolumeRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the volume.
        public var accountId: Swift.String?
        /// An array of objects that describe the current configuration of the volume.
        public var currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// The finding classification of the volume. Findings for volumes include:
        ///
        /// * NotOptimized —A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.
        ///
        /// * Optimized —An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.
        public var finding: ComputeOptimizerClientTypes.EBSFinding?
        /// The timestamp of when the volume recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The number of days for which utilization metrics were analyzed for the volume.
        public var lookBackPeriodInDays: Swift.Double
        /// An array of objects that describe the utilization metrics of the volume.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]?
        /// The Amazon Resource Name (ARN) of the current volume.
        public var volumeArn: Swift.String?
        /// An array of objects that describe the recommendation options for the volume.
        public var volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]?

        public init (
            accountId: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            finding: ComputeOptimizerClientTypes.EBSFinding? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil,
            volumeArn: Swift.String? = nil,
            volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        )
        {
            self.accountId = accountId
            self.currentConfiguration = currentConfiguration
            self.currentPerformanceRisk = currentPerformanceRisk
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.utilizationMetrics = utilizationMetrics
            self.volumeArn = volumeArn
            self.volumeRecommendationOptions = volumeRecommendationOptions
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case performanceRisk
        case rank
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let performanceRiskDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .performanceRisk) ?? 0.0
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
    }
}

extension ComputeOptimizerClientTypes {
    /// Describes a recommendation option for an Amazon Elastic Block Store (Amazon EBS) instance.
    public struct VolumeRecommendationOption: Swift.Equatable {
        /// An array of objects that describe a volume configuration.
        public var configuration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// The performance risk of the volume recommendation option. Performance risk is the likelihood of the recommended volume type meeting the performance requirement of your workload. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// The rank of the volume recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the EBS volume recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init (
            configuration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            performanceRisk: Swift.Double = 0.0,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }
    }

}
