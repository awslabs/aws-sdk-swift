//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.timestampReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComputeOptimizerClientTypes {

    public enum Status: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case failed
        case inactive
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .active,
                .failed,
                .inactive,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .failed: return "Failed"
            case .inactive: return "Inactive"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the enrollment status of an organization's member accounts in Compute Optimizer.
    public struct AccountEnrollmentStatus: Swift.Sendable {
        /// The Amazon Web Services account ID.
        public var accountId: Swift.String?
        /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The account enrollment status.
        public var status: ComputeOptimizerClientTypes.Status?
        /// The reason for the account enrollment status. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
        public var statusReason: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            status: ComputeOptimizerClientTypes.Status? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
            self.statusReason = statusReason
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum AutoScalingConfiguration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case targetTrackingScalingCpu
        case targetTrackingScalingMemory
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingConfiguration] {
            return [
                .targetTrackingScalingCpu,
                .targetTrackingScalingMemory
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .targetTrackingScalingCpu: return "TargetTrackingScalingCpu"
            case .targetTrackingScalingMemory: return "TargetTrackingScalingMemory"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the configuration of an Auto Scaling group.
    public struct AutoScalingGroupConfiguration: Swift.Sendable {
        /// The desired capacity, or number of instances, for the Auto Scaling group.
        public var desiredCapacity: Swift.Int
        /// The instance type for the Auto Scaling group.
        public var instanceType: Swift.String?
        /// The maximum size, or maximum number of instances, for the Auto Scaling group.
        public var maxSize: Swift.Int
        /// The minimum size, or minimum number of instances, for the Auto Scaling group.
        public var minSize: Swift.Int

        public init(
            desiredCapacity: Swift.Int = 0,
            instanceType: Swift.String? = nil,
            maxSize: Swift.Int = 0,
            minSize: Swift.Int = 0
        )
        {
            self.desiredCapacity = desiredCapacity
            self.instanceType = instanceType
            self.maxSize = maxSize
            self.minSize = minSize
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum Currency: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cny
        case usd
        case sdkUnknown(Swift.String)

        public static var allCases: [Currency] {
            return [
                .cny,
                .usd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cny: return "CNY"
            case .usd: return "USD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Auto Scaling group recommendations. This is based on the Savings Plans and Reserved Instances discounts.
    public struct AutoScalingGroupEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the GPU accelerators for the instance type.
    public struct Gpu: Swift.Sendable {
        /// The number of GPUs for the instance type.
        public var gpuCount: Swift.Int
        /// The total size of the memory for the GPU accelerators for the instance type, in MiB.
        public var gpuMemorySizeInMiB: Swift.Int

        public init(
            gpuCount: Swift.Int = 0,
            gpuMemorySizeInMiB: Swift.Int = 0
        )
        {
            self.gpuCount = gpuCount
            self.gpuMemorySizeInMiB = gpuMemorySizeInMiB
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the GPU accelerator settings for the instance type.
    public struct GpuInfo: Swift.Sendable {
        /// Describes the GPU accelerators for the instance type.
        public var gpus: [ComputeOptimizerClientTypes.Gpu]?

        public init(
            gpus: [ComputeOptimizerClientTypes.Gpu]? = nil
        )
        {
            self.gpus = gpus
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum CurrentPerformanceRisk: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case veryLow
        case sdkUnknown(Swift.String)

        public static var allCases: [CurrentPerformanceRisk] {
            return [
                .high,
                .low,
                .medium,
                .veryLow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case .veryLow: return "VeryLow"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum CpuVendorArchitecture: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsArm64
        case current
        case sdkUnknown(Swift.String)

        public static var allCases: [CpuVendorArchitecture] {
            return [
                .awsArm64,
                .current
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsArm64: return "AWS_ARM64"
            case .current: return "CURRENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum EnhancedInfrastructureMetrics: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [EnhancedInfrastructureMetrics] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExternalMetricsSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case datadog
        case dynatrace
        case instana
        case newrelic
        case sdkUnknown(Swift.String)

        public static var allCases: [ExternalMetricsSource] {
            return [
                .datadog,
                .dynatrace,
                .instana,
                .newrelic
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .datadog: return "Datadog"
            case .dynatrace: return "Dynatrace"
            case .instana: return "Instana"
            case .newrelic: return "NewRelic"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the external metrics preferences for EC2 rightsizing recommendations.
    public struct ExternalMetricsPreference: Swift.Sendable {
        /// Contains the source options for external metrics preferences.
        public var source: ComputeOptimizerClientTypes.ExternalMetricsSource?

        public init(
            source: ComputeOptimizerClientTypes.ExternalMetricsSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InferredWorkloadTypesPreference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [InferredWorkloadTypesPreference] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LookBackPeriodPreference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days14
        case days32
        case days93
        case sdkUnknown(Swift.String)

        public static var allCases: [LookBackPeriodPreference] {
            return [
                .days14,
                .days32,
                .days93
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days14: return "DAYS_14"
            case .days32: return "DAYS_32"
            case .days93: return "DAYS_93"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum PreferredResourceName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2InstanceTypes
        case sdkUnknown(Swift.String)

        public static var allCases: [PreferredResourceName] {
            return [
                .ec2InstanceTypes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2InstanceTypes: return "Ec2InstanceTypes"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective preferred resources that Compute Optimizer considers as rightsizing recommendation candidates. Compute Optimizer only supports Amazon EC2 instance types.
    public struct EffectivePreferredResource: Swift.Sendable {
        /// The expanded version of your preferred resource's include list.
        public var effectiveIncludeList: [Swift.String]?
        /// The list of preferred resources values that you want excluded from rightsizing recommendation candidates.
        public var excludeList: [Swift.String]?
        /// The list of preferred resource values that you want considered as rightsizing recommendation candidates.
        public var includeList: [Swift.String]?
        /// The name of the preferred resource list.
        public var name: ComputeOptimizerClientTypes.PreferredResourceName?

        public init(
            effectiveIncludeList: [Swift.String]? = nil,
            excludeList: [Swift.String]? = nil,
            includeList: [Swift.String]? = nil,
            name: ComputeOptimizerClientTypes.PreferredResourceName? = nil
        )
        {
            self.effectiveIncludeList = effectiveIncludeList
            self.excludeList = excludeList
            self.includeList = includeList
            self.name = name
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InstanceSavingsEstimationModeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case costExplorerRightsizing
        case costOptimizationHub
        case publicPricing
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceSavingsEstimationModeSource] {
            return [
                .costExplorerRightsizing,
                .costOptimizationHub,
                .publicPricing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .costExplorerRightsizing: return "CostExplorerRightsizing"
            case .costOptimizationHub: return "CostOptimizationHub"
            case .publicPricing: return "PublicPricing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings estimation mode used for calculating savings opportunity for Amazon EC2 instances.
    public struct InstanceSavingsEstimationMode: Swift.Sendable {
        /// Describes the source for calculating the savings opportunity for Amazon EC2 instances.
        public var source: ComputeOptimizerClientTypes.InstanceSavingsEstimationModeSource?

        public init(
            source: ComputeOptimizerClientTypes.InstanceSavingsEstimationModeSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum CustomizableMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuUtilization
        case memoryUtilization
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomizableMetricName] {
            return [
                .cpuUtilization,
                .memoryUtilization
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuUtilization: return "CpuUtilization"
            case .memoryUtilization: return "MemoryUtilization"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum CustomizableMetricHeadroom: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case percent0
        case percent10
        case percent20
        case percent30
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomizableMetricHeadroom] {
            return [
                .percent0,
                .percent10,
                .percent20,
                .percent30
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .percent0: return "PERCENT_0"
            case .percent10: return "PERCENT_10"
            case .percent20: return "PERCENT_20"
            case .percent30: return "PERCENT_30"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum CustomizableMetricThreshold: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case p90
        case p95
        case p995
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomizableMetricThreshold] {
            return [
                .p90,
                .p95,
                .p995
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .p90: return "P90"
            case .p95: return "P95"
            case .p995: return "P99_5"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Defines the various metric parameters that can be customized, such as threshold and headroom.
    public struct CustomizableMetricParameters: Swift.Sendable {
        /// The headroom value in percentage used for the specified metric parameter. The following lists the valid values for CPU and memory utilization.
        ///
        /// * CPU utilization: PERCENT_30 | PERCENT_20 | PERCENT_0
        ///
        /// * Memory utilization: PERCENT_30 | PERCENT_20 | PERCENT_10
        public var headroom: ComputeOptimizerClientTypes.CustomizableMetricHeadroom?
        /// The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization.
        public var threshold: ComputeOptimizerClientTypes.CustomizableMetricThreshold?

        public init(
            headroom: ComputeOptimizerClientTypes.CustomizableMetricHeadroom? = nil,
            threshold: ComputeOptimizerClientTypes.CustomizableMetricThreshold? = nil
        )
        {
            self.headroom = headroom
            self.threshold = threshold
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The preference to control the resourceâ€™s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. This preference is only available for the Amazon EC2 instance resource type.
    public struct UtilizationPreference: Swift.Sendable {
        /// The name of the resource utilization metric name to customize.
        public var metricName: ComputeOptimizerClientTypes.CustomizableMetricName?
        /// The parameters to set when customizing the resource utilization thresholds.
        public var metricParameters: ComputeOptimizerClientTypes.CustomizableMetricParameters?

        public init(
            metricName: ComputeOptimizerClientTypes.CustomizableMetricName? = nil,
            metricParameters: ComputeOptimizerClientTypes.CustomizableMetricParameters? = nil
        )
        {
            self.metricName = metricName
            self.metricParameters = metricParameters
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective recommendation preferences for a resource.
    public struct EffectiveRecommendationPreferences: Swift.Sendable {
        /// Describes the CPU vendor and architecture for an instance or Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:
        ///
        /// * A [GetEC2InstanceRecommendations] or [GetAutoScalingGroupRecommendations] request, Compute Optimizer returns recommendations that consist of Graviton instance types only.
        ///
        /// * A [GetEC2RecommendationProjectedMetrics] request, Compute Optimizer returns projected utilization metrics for Graviton instance type recommendations only.
        ///
        /// * A [ExportEC2InstanceRecommendations] or [ExportAutoScalingGroupRecommendations] request, Compute Optimizer exports recommendations that consist of Graviton instance types only.
        public var cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]?
        /// Describes the activation status of the enhanced infrastructure metrics preference. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied to recommendations. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
        /// An object that describes the external metrics recommendation preference. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response.
        public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
        /// Describes the activation status of the inferred workload types preference. A status of Active confirms that the preference is applied in the latest recommendation refresh. A status of Inactive confirms that it's not yet applied to recommendations.
        public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
        /// The number of days the utilization metrics of the Amazon Web Services resource are analyzed.
        public var lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference?
        /// The resource type values that are considered as candidates when generating rightsizing recommendations.
        public var preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]?
        /// Describes the savings estimation mode applied for calculating savings opportunity for a resource.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.InstanceSavingsEstimationMode?
        /// The resourceâ€™s CPU and memory utilization preferences, such as threshold and headroom, that are used to generate rightsizing recommendations. This preference is only available for the Amazon EC2 instance resource type.
        public var utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]?

        public init(
            cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil,
            enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
            externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
            inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil,
            lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference? = nil,
            preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]? = nil,
            savingsEstimationMode: ComputeOptimizerClientTypes.InstanceSavingsEstimationMode? = nil,
            utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]? = nil
        )
        {
            self.cpuVendorArchitectures = cpuVendorArchitectures
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.externalMetricsPreference = externalMetricsPreference
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.lookBackPeriod = lookBackPeriod
            self.preferredResources = preferredResources
            self.savingsEstimationMode = savingsEstimationMode
            self.utilizationPreferences = utilizationPreferences
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum Finding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notOptimized
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [Finding] {
            return [
                .notOptimized,
                .optimized,
                .overProvisioned,
                .underProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InferredWorkloadType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonEmr
        case apacheCassandra
        case apacheHadoop
        case kafka
        case memcached
        case nginx
        case postgreSql
        case redis
        case sqlserver
        case sdkUnknown(Swift.String)

        public static var allCases: [InferredWorkloadType] {
            return [
                .amazonEmr,
                .apacheCassandra,
                .apacheHadoop,
                .kafka,
                .memcached,
                .nginx,
                .postgreSql,
                .redis,
                .sqlserver
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonEmr: return "AmazonEmr"
            case .apacheCassandra: return "ApacheCassandra"
            case .apacheHadoop: return "ApacheHadoop"
            case .kafka: return "Kafka"
            case .memcached: return "Memcached"
            case .nginx: return "Nginx"
            case .postgreSql: return "PostgreSql"
            case .redis: return "Redis"
            case .sqlserver: return "SQLServer"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum MigrationEffort: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case veryLow
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationEffort] {
            return [
                .high,
                .low,
                .medium,
                .veryLow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case .veryLow: return "VeryLow"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum MetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpu
        case diskReadBytesPerSecond
        case diskReadOpsPerSecond
        case diskWriteBytesPerSecond
        case diskWriteOpsPerSecond
        case ebsReadBytesPerSecond
        case ebsReadOpsPerSecond
        case ebsWriteBytesPerSecond
        case ebsWriteOpsPerSecond
        case gpuMemoryPercentage
        case gpuPercentage
        case memory
        case networkInBytesPerSecond
        case networkOutBytesPerSecond
        case networkPacketsInPerSecond
        case networkPacketsOutPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .cpu,
                .diskReadBytesPerSecond,
                .diskReadOpsPerSecond,
                .diskWriteBytesPerSecond,
                .diskWriteOpsPerSecond,
                .ebsReadBytesPerSecond,
                .ebsReadOpsPerSecond,
                .ebsWriteBytesPerSecond,
                .ebsWriteOpsPerSecond,
                .gpuMemoryPercentage,
                .gpuPercentage,
                .memory,
                .networkInBytesPerSecond,
                .networkOutBytesPerSecond,
                .networkPacketsInPerSecond,
                .networkPacketsOutPerSecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .diskReadBytesPerSecond: return "DISK_READ_BYTES_PER_SECOND"
            case .diskReadOpsPerSecond: return "DISK_READ_OPS_PER_SECOND"
            case .diskWriteBytesPerSecond: return "DISK_WRITE_BYTES_PER_SECOND"
            case .diskWriteOpsPerSecond: return "DISK_WRITE_OPS_PER_SECOND"
            case .ebsReadBytesPerSecond: return "EBS_READ_BYTES_PER_SECOND"
            case .ebsReadOpsPerSecond: return "EBS_READ_OPS_PER_SECOND"
            case .ebsWriteBytesPerSecond: return "EBS_WRITE_BYTES_PER_SECOND"
            case .ebsWriteOpsPerSecond: return "EBS_WRITE_OPS_PER_SECOND"
            case .gpuMemoryPercentage: return "GPU_MEMORY_PERCENTAGE"
            case .gpuPercentage: return "GPU_PERCENTAGE"
            case .memory: return "Memory"
            case .networkInBytesPerSecond: return "NETWORK_IN_BYTES_PER_SECOND"
            case .networkOutBytesPerSecond: return "NETWORK_OUT_BYTES_PER_SECOND"
            case .networkPacketsInPerSecond: return "NETWORK_PACKETS_IN_PER_SECOND"
            case .networkPacketsOutPerSecond: return "NETWORK_PACKETS_OUT_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum MetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a utilization metric of a resource, such as an Amazon EC2 instance. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option.
    public struct UtilizationMetric: Swift.Sendable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu - The percentage of allocated EC2 compute units that are currently in use on the instance. This metric identifies the processing power required to run an application on the instance. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core. Units: Percent
        ///
        /// * Memory - The percentage of memory that is currently in use on the instance. This metric identifies the amount of memory required to run an application on the instance. Units: Percent The Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        ///
        /// * GPU - The percentage of allocated GPUs that currently run on the instance.
        ///
        /// * GPU_MEMORY - The percentage of total GPU memory that currently runs on the instance. The GPU and GPU_MEMORY metrics are only returned for resources with the unified CloudWatch Agent installed on them. For more information, see [Enabling NVIDIA GPU utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#nvidia-cw-agent).
        ///
        /// * EBS_READ_OPS_PER_SECOND - The completed read operations from all EBS volumes attached to the instance in a specified period of time. Unit: Count
        ///
        /// * EBS_WRITE_OPS_PER_SECOND - The completed write operations to all EBS volumes attached to the instance in a specified period of time. Unit: Count
        ///
        /// * EBS_READ_BYTES_PER_SECOND - The bytes read from all EBS volumes attached to the instance in a specified period of time. Unit: Bytes
        ///
        /// * EBS_WRITE_BYTES_PER_SECOND - The bytes written to all EBS volumes attached to the instance in a specified period of time. Unit: Bytes
        ///
        /// * DISK_READ_OPS_PER_SECOND - The completed read operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_WRITE_OPS_PER_SECOND - The completed write operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_READ_BYTES_PER_SECOND - The bytes read from all instance store volumes available to the instance. This metric is used to determine the volume of the data the application reads from the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * DISK_WRITE_BYTES_PER_SECOND - The bytes written to all instance store volumes available to the instance. This metric is used to determine the volume of the data the application writes onto the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.
        ///
        /// * NETWORK_IN_BYTES_PER_SECOND - The number of bytes received by the instance on all network interfaces. This metric identifies the volume of incoming network traffic to a single instance.
        ///
        /// * NETWORK_OUT_BYTES_PER_SECOND - The number of bytes sent out by the instance on all network interfaces. This metric identifies the volume of outgoing network traffic from a single instance.
        ///
        /// * NETWORK_PACKETS_IN_PER_SECOND - The number of packets received by the instance on all network interfaces. This metric identifies the volume of incoming traffic in terms of the number of packets on a single instance.
        ///
        /// * NETWORK_PACKETS_OUT_PER_SECOND - The number of packets sent out by the instance on all network interfaces. This metric identifies the volume of outgoing traffic in terms of the number of packets on a single instance.
        public var name: ComputeOptimizerClientTypes.MetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the estimated monthly savings amount possible, based on On-Demand instance pricing, by adopting Compute Optimizer recommendations for a given resource. For more information, see [Estimated monthly savings and savings opportunities](https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-ec2-recommendations.html#ec2-savings-calculation) in the Compute Optimizer User Guide.
    public struct EstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
    public struct SavingsOpportunity: Swift.Sendable {
        /// An object that describes the estimated monthly savings amount possible by adopting Compute Optimizer recommendations for a given resource. This is based on the On-Demand instance pricing..
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer recommendations for a given resource.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Auto Scaling group recommendations after applying the Savings Plans and Reserved Instances discounts. Savings opportunity represents the estimated monthly savings you can achieve by implementing Compute Optimizer recommendations.
    public struct AutoScalingGroupSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Auto Scaling group recommendations. This is based on the Savings Plans and Reserved Instances pricing discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost after applying the Savings Plans and Reserved Instances discounts. This saving can be achieved by adopting Compute Optimizerâ€™s Auto Scaling group recommendations.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation option for an Auto Scaling group.
    public struct AutoScalingGroupRecommendationOption: Swift.Sendable {
        /// An array of objects that describe an Auto Scaling group configuration.
        public var configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// Describes the GPU accelerator settings for the recommended instance type of the Auto Scaling group.
        public var instanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo?
        /// The level of effort required to migrate from the current instance type to the recommended instance type. For example, the migration effort is Low if Amazon EMR is the inferred workload type and an Amazon Web Services Graviton instance type is recommended. The migration effort is Medium if a workload type couldn't be inferred but an Amazon Web Services Graviton instance type is recommended. The migration effort is VeryLow if both the current and recommended instance types are of the same CPU architecture.
        public var migrationEffort: ComputeOptimizerClientTypes.MigrationEffort?
        /// The performance risk of the Auto Scaling group configuration recommendation. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// An array of objects that describe the projected utilization metrics of the Auto Scaling group recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// The rank of the Auto Scaling group recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the Auto Scaling group recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An object that describes the savings opportunity for the Auto Scaling group recommendation option that includes Savings Plans and Reserved Instances discounts. Savings opportunity includes the estimated monthly savings and percentage.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts?

        public init(
            configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            instanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo? = nil,
            migrationEffort: ComputeOptimizerClientTypes.MigrationEffort? = nil,
            performanceRisk: Swift.Double = 0.0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.configuration = configuration
            self.instanceGpuInfo = instanceGpuInfo
            self.migrationEffort = migrationEffort
            self.performanceRisk = performanceRisk
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Auto Scaling group recommendation.
    public struct AutoScalingGroupRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the Auto Scaling group.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupArn: Swift.String?
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// An array of objects that describe the current configuration of the Auto Scaling group.
        public var currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// Describes the GPU accelerator settings for the current instance type of the Auto Scaling group.
        public var currentInstanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo?
        /// The risk of the current Auto Scaling group not meeting the performance needs of its workloads. The higher the risk, the more likely the current Auto Scaling group configuration has insufficient capacity and cannot meet workload requirements.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the Auto Scaling group.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences?
        /// The finding classification of the Auto Scaling group. Findings for Auto Scaling groups include:
        ///
        /// * NotOptimized â€”An Auto Scaling group is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.
        ///
        /// * Optimized â€”An Auto Scaling group is considered optimized when Compute Optimizer determines that the group is correctly provisioned to run your workload based on the chosen instance type. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        public var finding: ComputeOptimizerClientTypes.Finding?
        /// The applications that might be running on the instances in the Auto Scaling group as inferred by Compute Optimizer. Compute Optimizer can infer if one of the following applications might be running on the instances:
        ///
        /// * AmazonEmr - Infers that Amazon EMR might be running on the instances.
        ///
        /// * ApacheCassandra - Infers that Apache Cassandra might be running on the instances.
        ///
        /// * ApacheHadoop - Infers that Apache Hadoop might be running on the instances.
        ///
        /// * Memcached - Infers that Memcached might be running on the instances.
        ///
        /// * NGINX - Infers that NGINX might be running on the instances.
        ///
        /// * PostgreSql - Infers that PostgreSQL might be running on the instances.
        ///
        /// * Redis - Infers that Redis might be running on the instances.
        ///
        /// * Kafka - Infers that Kafka might be running on the instance.
        ///
        /// * SQLServer - Infers that SQLServer might be running on the instance.
        public var inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]?
        /// The timestamp of when the Auto Scaling group recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The number of days for which utilization metrics were analyzed for the Auto Scaling group.
        public var lookBackPeriodInDays: Swift.Double
        /// An array of objects that describe the recommendation options for the Auto Scaling group.
        public var recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]?
        /// An array of objects that describe the utilization metrics of the Auto Scaling group.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init(
            accountId: Swift.String? = nil,
            autoScalingGroupArn: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            currentInstanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.autoScalingGroupArn = autoScalingGroupArn
            self.autoScalingGroupName = autoScalingGroupName
            self.currentConfiguration = currentConfiguration
            self.currentInstanceGpuInfo = currentInstanceGpuInfo
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.utilizationMetrics = utilizationMetrics
        }
    }
}

/// An internal error has occurred. Try your call again.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value supplied for the input parameter is out of range or not valid.
public struct InvalidParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request must contain either a valid (registered) Amazon Web Services access key ID or X.509 certificate.
public struct MissingAuthenticationToken: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingAuthenticationToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The account is not opted in to Compute Optimizer.
public struct OptInRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OptInRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource that is required for the action doesn't exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request has failed due to a temporary failure of the server.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComputeOptimizerClientTypes {

    public enum RecommendationPreferenceName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enhancedInfrastructureMetrics
        case externalMetricsPreference
        case inferredWorkloadTypes
        case lookbackPeriodPreference
        case preferredResources
        case utilizationPreferences
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationPreferenceName] {
            return [
                .enhancedInfrastructureMetrics,
                .externalMetricsPreference,
                .inferredWorkloadTypes,
                .lookbackPeriodPreference,
                .preferredResources,
                .utilizationPreferences
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enhancedInfrastructureMetrics: return "EnhancedInfrastructureMetrics"
            case .externalMetricsPreference: return "ExternalMetricsPreference"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .lookbackPeriodPreference: return "LookBackPeriodPreference"
            case .preferredResources: return "PreferredResources"
            case .utilizationPreferences: return "UtilizationPreferences"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case ecsService
        case lambdaFunction
        case license
        case notApplicable
        case rdsDbInstance
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .ecsService,
                .lambdaFunction,
                .license,
                .notApplicable,
                .rdsDbInstance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .ecsService: return "EcsService"
            case .lambdaFunction: return "LambdaFunction"
            case .license: return "License"
            case .notApplicable: return "NotApplicable"
            case .rdsDbInstance: return "RdsDBInstance"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ScopeName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case organization
        case resourceArn
        case sdkUnknown(Swift.String)

        public static var allCases: [ScopeName] {
            return [
                .accountId,
                .organization,
                .resourceArn
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .organization: return "Organization"
            case .resourceArn: return "ResourceArn"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the scope of a recommendation preference. Recommendation preferences can be created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide. You cannot create recommendation preferences for Auto Scaling groups at the organization and account levels. You can create recommendation preferences for Auto Scaling groups only at the resource level by specifying a scope name of ResourceArn and a scope value of the Auto Scaling group Amazon Resource Name (ARN). This will configure the preference for all instances that are part of the specified Auto Scaling group. You also cannot create recommendation preferences at the resource level for instances that are part of an Auto Scaling group. You can create recommendation preferences at the resource level only for standalone instances.
    public struct Scope: Swift.Sendable {
        /// The name of the scope. The following scopes are possible:
        ///
        /// * Organization - Specifies that the recommendation preference applies at the organization level, for all member accounts of an organization.
        ///
        /// * AccountId - Specifies that the recommendation preference applies at the account level, for all resources of a given resource type in an account.
        ///
        /// * ResourceArn - Specifies that the recommendation preference applies at the individual resource level.
        public var name: ComputeOptimizerClientTypes.ScopeName?
        /// The value of the scope. If you specified the name of the scope as:
        ///
        /// * Organization - The value must be ALL_ACCOUNTS.
        ///
        /// * AccountId - The value must be a 12-digit Amazon Web Services account ID.
        ///
        /// * ResourceArn - The value must be the Amazon Resource Name (ARN) of an EC2 instance or an Auto Scaling group.
        ///
        ///
        /// Only EC2 instance and Auto Scaling group ARNs are currently supported.
        public var value: Swift.String?

        public init(
            name: ComputeOptimizerClientTypes.ScopeName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

public struct DeleteRecommendationPreferencesInput: Swift.Sendable {
    /// The name of the recommendation preference to delete.
    /// This member is required.
    public var recommendationPreferenceNames: [ComputeOptimizerClientTypes.RecommendationPreferenceName]?
    /// The target resource type of the recommendation preference to delete. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// An object that describes the scope of the recommendation preference to delete. You can delete recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var scope: ComputeOptimizerClientTypes.Scope?

    public init(
        recommendationPreferenceNames: [ComputeOptimizerClientTypes.RecommendationPreferenceName]? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil
    )
    {
        self.recommendationPreferenceNames = recommendationPreferenceNames
        self.resourceType = resourceType
        self.scope = scope
    }
}

public struct DeleteRecommendationPreferencesOutput: Swift.Sendable {

    public init() { }
}

extension ComputeOptimizerClientTypes {

    public enum JobFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jobStatus
        case resourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [JobFilterName] {
            return [
                .jobStatus,
                .resourceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jobStatus: return "JobStatus"
            case .resourceType: return "ResourceType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of recommendation export jobs. Use this filter with the [DescribeRecommendationExportJobs] action. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct JobFilter: Swift.Sendable {
        /// The name of the filter. Specify ResourceType to return export jobs of a specific resource type (for example, Ec2Instance). Specify JobStatus to return export jobs with a specific status (e.g, Complete).
        public var name: ComputeOptimizerClientTypes.JobFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:
        ///
        /// * Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as ResourceType. There is no filter for EBS volumes because volume recommendations cannot be exported at this time.
        ///
        /// * Specify Queued, InProgress, Complete, or Failed if you specify the name parameter as JobStatus.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.JobFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct DescribeRecommendationExportJobsInput: Swift.Sendable {
    /// An array of objects to specify a filter that returns a more specific list of export jobs.
    public var filters: [ComputeOptimizerClientTypes.JobFilter]?
    /// The identification numbers of the export jobs to return. An export job ID is returned when you create an export using the [ExportAutoScalingGroupRecommendations] or [ExportEC2InstanceRecommendations] actions. All export jobs created in the last seven days are returned if this parameter is omitted.
    public var jobIds: [Swift.String]?
    /// The maximum number of export jobs to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of export jobs.
    public var nextToken: Swift.String?

    public init(
        filters: [ComputeOptimizerClientTypes.JobFilter]? = nil,
        jobIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.jobIds = jobIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public struct S3Destination: Swift.Sendable {
        /// The name of the Amazon S3 bucket used as the destination of an export file.
        public var bucket: Swift.String?
        /// The Amazon S3 bucket key of an export file. The key uniquely identifies the object, or export file, in the S3 bucket.
        public var key: Swift.String?
        /// The Amazon S3 bucket key of a metadata file. The key uniquely identifies the object, or metadata file, in the S3 bucket.
        public var metadataKey: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            metadataKey: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.metadataKey = metadataKey
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the destination of the recommendations export and metadata files.
    public struct ExportDestination: Swift.Sendable {
        /// An object that describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
        public var s3: ComputeOptimizerClientTypes.S3Destination?

        public init(
            s3: ComputeOptimizerClientTypes.S3Destination? = nil
        )
        {
            self.s3 = s3
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum JobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case queued
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .queued
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .queued: return "Queued"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation export job. Use the [DescribeRecommendationExportJobs] action to view your recommendation export jobs. Use the [ExportAutoScalingGroupRecommendations] or [ExportEC2InstanceRecommendations] actions to request an export of your recommendations.
    public struct RecommendationExportJob: Swift.Sendable {
        /// The timestamp of when the export job was created.
        public var creationTimestamp: Foundation.Date?
        /// An object that describes the destination of the export file.
        public var destination: ComputeOptimizerClientTypes.ExportDestination?
        /// The reason for an export job failure.
        public var failureReason: Swift.String?
        /// The identification number of the export job.
        public var jobId: Swift.String?
        /// The timestamp of when the export job was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The resource type of the exported recommendations.
        public var resourceType: ComputeOptimizerClientTypes.ResourceType?
        /// The status of the export job.
        public var status: ComputeOptimizerClientTypes.JobStatus?

        public init(
            creationTimestamp: Foundation.Date? = nil,
            destination: ComputeOptimizerClientTypes.ExportDestination? = nil,
            failureReason: Swift.String? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
            status: ComputeOptimizerClientTypes.JobStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.destination = destination
            self.failureReason = failureReason
            self.jobId = jobId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceType = resourceType
            self.status = status
        }
    }
}

public struct DescribeRecommendationExportJobsOutput: Swift.Sendable {
    /// The token to use to advance to the next page of export jobs. This value is null when there are no more pages of export jobs to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe recommendation export jobs.
    public var recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]?

    public init(
        nextToken: Swift.String? = nil,
        recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationExportJobs = recommendationExportJobs
    }
}

/// The request exceeds a limit of the service.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableAutoScalingGroupField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfigurationDesiredCapacity
        case currentConfigurationInstanceType
        case currentConfigurationMaxSize
        case currentConfigurationMinSize
        case currentInstanceGpuInfo
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentPerformanceRisk
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case effectiveRecommendationPreferencesCpuVendorArchitectures
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics
        case effectiveRecommendationPreferencesInferredWorkloadTypes
        case effectiveRecommendationPreferencesLookbackPeriod
        case effectiveRecommendationPreferencesPreferredResources
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case finding
        case inferredWorkloadTypes
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationDesiredCapacity
        case recommendationOptionsConfigurationInstanceType
        case recommendationOptionsConfigurationMaxSize
        case recommendationOptionsConfigurationMinSize
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case recommendationOptionsInstanceGpuInfo
        case recommendationOptionsMemory
        case recommendationOptionsMigrationEffort
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsGpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsGpuMemoryMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case recommendationOptionsSavingsOpportunityPercentage
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsGpuMemoryPercentageMaximum
        case utilizationMetricsGpuPercentageMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableAutoScalingGroupField] {
            return [
                .accountId,
                .autoScalingGroupArn,
                .autoScalingGroupName,
                .currentConfigurationDesiredCapacity,
                .currentConfigurationInstanceType,
                .currentConfigurationMaxSize,
                .currentConfigurationMinSize,
                .currentInstanceGpuInfo,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentPerformanceRisk,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .effectiveRecommendationPreferencesCpuVendorArchitectures,
                .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics,
                .effectiveRecommendationPreferencesInferredWorkloadTypes,
                .effectiveRecommendationPreferencesLookbackPeriod,
                .effectiveRecommendationPreferencesPreferredResources,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .finding,
                .inferredWorkloadTypes,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationDesiredCapacity,
                .recommendationOptionsConfigurationInstanceType,
                .recommendationOptionsConfigurationMaxSize,
                .recommendationOptionsConfigurationMinSize,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .recommendationOptionsInstanceGpuInfo,
                .recommendationOptionsMemory,
                .recommendationOptionsMigrationEffort,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsGpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsGpuMemoryMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .recommendationOptionsSavingsOpportunityPercentage,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsGpuMemoryPercentageMaximum,
                .utilizationMetricsGpuPercentageMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .autoScalingGroupArn: return "AutoScalingGroupArn"
            case .autoScalingGroupName: return "AutoScalingGroupName"
            case .currentConfigurationDesiredCapacity: return "CurrentConfigurationDesiredCapacity"
            case .currentConfigurationInstanceType: return "CurrentConfigurationInstanceType"
            case .currentConfigurationMaxSize: return "CurrentConfigurationMaxSize"
            case .currentConfigurationMinSize: return "CurrentConfigurationMinSize"
            case .currentInstanceGpuInfo: return "CurrentInstanceGpuInfo"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .effectiveRecommendationPreferencesCpuVendorArchitectures: return "EffectiveRecommendationPreferencesCpuVendorArchitectures"
            case .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics: return "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
            case .effectiveRecommendationPreferencesInferredWorkloadTypes: return "EffectiveRecommendationPreferencesInferredWorkloadTypes"
            case .effectiveRecommendationPreferencesLookbackPeriod: return "EffectiveRecommendationPreferencesLookBackPeriod"
            case .effectiveRecommendationPreferencesPreferredResources: return "EffectiveRecommendationPreferencesPreferredResources"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .finding: return "Finding"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationDesiredCapacity: return "RecommendationOptionsConfigurationDesiredCapacity"
            case .recommendationOptionsConfigurationInstanceType: return "RecommendationOptionsConfigurationInstanceType"
            case .recommendationOptionsConfigurationMaxSize: return "RecommendationOptionsConfigurationMaxSize"
            case .recommendationOptionsConfigurationMinSize: return "RecommendationOptionsConfigurationMinSize"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .recommendationOptionsInstanceGpuInfo: return "RecommendationOptionsInstanceGpuInfo"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsMigrationEffort: return "RecommendationOptionsMigrationEffort"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsGpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsGpuMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsGpuMemoryPercentageMaximum: return "UtilizationMetricsGpuMemoryPercentageMaximum"
            case .utilizationMetricsGpuPercentageMaximum: return "UtilizationMetricsGpuPercentageMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum FileFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [FileFormat] {
            return [
                .csv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "Csv"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum FilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case finding
        case findingReasonCodes
        case inferredWorkloadTypes
        case recommendationSourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterName] {
            return [
                .finding,
                .findingReasonCodes,
                .inferredWorkloadTypes,
                .recommendationSourceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .recommendationSourceType: return "RecommendationSourceType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of recommendations. Use this filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, and JobFilter with the [DescribeRecommendationExportJobs] action.
    public struct Filter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification. For example, Underprovisioned. Specify RecommendationSourceType to return recommendations of a specific resource type. For example, Ec2Instance. Specify FindingReasonCodes to return recommendations with a specific finding reason code. For example, CPUUnderprovisioned. Specify InferredWorkloadTypes to return recommendations of a specific inferred workload. For example, Redis. You can filter your EC2 instance recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your recommendations. Use this filter to find all of your recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.FilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter and the resource type that you wish to filter results for:
        ///
        /// * Specify Optimized or NotOptimized if you specify the name parameter as Finding and you want to filter results for Auto Scaling groups.
        ///
        /// * Specify Underprovisioned, Overprovisioned, or Optimized if you specify the name parameter as Finding and you want to filter results for EC2 instances.
        ///
        /// * Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as RecommendationSourceType.
        ///
        /// * Specify one of the following options if you specify the name parameter as FindingReasonCodes:
        ///
        /// * CPUOverprovisioned â€” The instanceâ€™s CPU configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * CPUUnderprovisioned â€” The instanceâ€™s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance.
        ///
        /// * MemoryOverprovisioned â€” The instanceâ€™s memory configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * MemoryUnderprovisioned â€” The instanceâ€™s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance.
        ///
        /// * EBSThroughputOverprovisioned â€” The instanceâ€™s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * EBSThroughputUnderprovisioned â€” The instanceâ€™s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance.
        ///
        /// * EBSIOPSOverprovisioned â€” The instanceâ€™s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * EBSIOPSUnderprovisioned â€” The instanceâ€™s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance.
        ///
        /// * NetworkBandwidthOverprovisioned â€” The instanceâ€™s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * NetworkBandwidthUnderprovisioned â€” The instanceâ€™s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.
        ///
        /// * NetworkPPSOverprovisioned â€” The instanceâ€™s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * NetworkPPSUnderprovisioned â€” The instanceâ€™s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance.
        ///
        /// * DiskIOPSOverprovisioned â€” The instanceâ€™s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * DiskIOPSUnderprovisioned â€” The instanceâ€™s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance.
        ///
        /// * DiskThroughputOverprovisioned â€” The instanceâ€™s disk throughput configuration can be sized down while still meeting the performance requirements of your workload.
        ///
        /// * DiskThroughputUnderprovisioned â€” The instanceâ€™s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.FilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the recommendation preferences to return in the response of a [GetAutoScalingGroupRecommendations], [GetEC2InstanceRecommendations], [GetEC2RecommendationProjectedMetrics], [GetRDSDatabaseRecommendations], and [GetRDSDatabaseRecommendationProjectedMetrics] request.
    public struct RecommendationPreferences: Swift.Sendable {
        /// Specifies the CPU vendor and architecture for Amazon EC2 instance and Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:
        ///
        /// * A [GetEC2InstanceRecommendations] or [GetAutoScalingGroupRecommendations] request, Compute Optimizer returns recommendations that consist of Graviton instance types only.
        ///
        /// * A [GetEC2RecommendationProjectedMetrics] request, Compute Optimizer returns projected utilization metrics for Graviton instance type recommendations only.
        ///
        /// * A [ExportEC2InstanceRecommendations] or [ExportAutoScalingGroupRecommendations] request, Compute Optimizer exports recommendations that consist of Graviton instance types only.
        public var cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]?

        public init(
            cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil
        )
        {
            self.cpuVendorArchitectures = cpuVendorArchitectures
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    public struct S3DestinationConfig: Swift.Sendable {
        /// The name of the Amazon S3 bucket to use as the destination for an export job.
        public var bucket: Swift.String?
        /// The Amazon S3 bucket prefix for an export job.
        public var keyPrefix: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }
}

public struct ExportAutoScalingGroupRecommendationsInput: Swift.Sendable {
    /// The IDs of the Amazon Web Services accounts for which to export Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Auto Scaling group recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool?
    /// An object to specify the preferences for the Auto Scaling group recommendations to export.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.recommendationPreferences = recommendationPreferences
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportAutoScalingGroupRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableVolumeField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentConfigurationRootVolume
        case currentConfigurationVolumeBaselineIops
        case currentConfigurationVolumeBaselineThroughput
        case currentConfigurationVolumeBurstIops
        case currentConfigurationVolumeBurstThroughput
        case currentConfigurationVolumeSize
        case currentConfigurationVolumeType
        case currentMonthlyPrice
        case currentPerformanceRisk
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case finding
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationVolumeBaselineIops
        case recommendationOptionsConfigurationVolumeBaselineThroughput
        case recommendationOptionsConfigurationVolumeBurstIops
        case recommendationOptionsConfigurationVolumeBurstThroughput
        case recommendationOptionsConfigurationVolumeSize
        case recommendationOptionsConfigurationVolumeType
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case recommendationOptionsMonthlyPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case recommendationOptionsSavingsOpportunityPercentage
        case rootVolume
        case tags
        case utilizationMetricsVolumeReadBytesPerSecondMaximum
        case utilizationMetricsVolumeReadOpsPerSecondMaximum
        case utilizationMetricsVolumeWriteBytesPerSecondMaximum
        case utilizationMetricsVolumeWriteOpsPerSecondMaximum
        case volumeArn
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableVolumeField] {
            return [
                .accountId,
                .currentConfigurationRootVolume,
                .currentConfigurationVolumeBaselineIops,
                .currentConfigurationVolumeBaselineThroughput,
                .currentConfigurationVolumeBurstIops,
                .currentConfigurationVolumeBurstThroughput,
                .currentConfigurationVolumeSize,
                .currentConfigurationVolumeType,
                .currentMonthlyPrice,
                .currentPerformanceRisk,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .finding,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationVolumeBaselineIops,
                .recommendationOptionsConfigurationVolumeBaselineThroughput,
                .recommendationOptionsConfigurationVolumeBurstIops,
                .recommendationOptionsConfigurationVolumeBurstThroughput,
                .recommendationOptionsConfigurationVolumeSize,
                .recommendationOptionsConfigurationVolumeType,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .recommendationOptionsMonthlyPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .recommendationOptionsSavingsOpportunityPercentage,
                .rootVolume,
                .tags,
                .utilizationMetricsVolumeReadBytesPerSecondMaximum,
                .utilizationMetricsVolumeReadOpsPerSecondMaximum,
                .utilizationMetricsVolumeWriteBytesPerSecondMaximum,
                .utilizationMetricsVolumeWriteOpsPerSecondMaximum,
                .volumeArn
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationRootVolume: return "CurrentConfigurationRootVolume"
            case .currentConfigurationVolumeBaselineIops: return "CurrentConfigurationVolumeBaselineIOPS"
            case .currentConfigurationVolumeBaselineThroughput: return "CurrentConfigurationVolumeBaselineThroughput"
            case .currentConfigurationVolumeBurstIops: return "CurrentConfigurationVolumeBurstIOPS"
            case .currentConfigurationVolumeBurstThroughput: return "CurrentConfigurationVolumeBurstThroughput"
            case .currentConfigurationVolumeSize: return "CurrentConfigurationVolumeSize"
            case .currentConfigurationVolumeType: return "CurrentConfigurationVolumeType"
            case .currentMonthlyPrice: return "CurrentMonthlyPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .finding: return "Finding"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationVolumeBaselineIops: return "RecommendationOptionsConfigurationVolumeBaselineIOPS"
            case .recommendationOptionsConfigurationVolumeBaselineThroughput: return "RecommendationOptionsConfigurationVolumeBaselineThroughput"
            case .recommendationOptionsConfigurationVolumeBurstIops: return "RecommendationOptionsConfigurationVolumeBurstIOPS"
            case .recommendationOptionsConfigurationVolumeBurstThroughput: return "RecommendationOptionsConfigurationVolumeBurstThroughput"
            case .recommendationOptionsConfigurationVolumeSize: return "RecommendationOptionsConfigurationVolumeSize"
            case .recommendationOptionsConfigurationVolumeType: return "RecommendationOptionsConfigurationVolumeType"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .recommendationOptionsMonthlyPrice: return "RecommendationOptionsMonthlyPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .rootVolume: return "RootVolume"
            case .tags: return "Tags"
            case .utilizationMetricsVolumeReadBytesPerSecondMaximum: return "UtilizationMetricsVolumeReadBytesPerSecondMaximum"
            case .utilizationMetricsVolumeReadOpsPerSecondMaximum: return "UtilizationMetricsVolumeReadOpsPerSecondMaximum"
            case .utilizationMetricsVolumeWriteBytesPerSecondMaximum: return "UtilizationMetricsVolumeWriteBytesPerSecondMaximum"
            case .utilizationMetricsVolumeWriteOpsPerSecondMaximum: return "UtilizationMetricsVolumeWriteOpsPerSecondMaximum"
            case .volumeArn: return "VolumeArn"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum EBSFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case finding
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFilterName] {
            return [
                .finding
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of Amazon Elastic Block Store (Amazon EBS) volume recommendations. Use this filter with the [GetEBSVolumeRecommendations] action. You can use LambdaFunctionRecommendationFilter with the [GetLambdaFunctionRecommendations] action, JobFilter with the [DescribeRecommendationExportJobs] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct EBSFilter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized). You can filter your Amazon EBS volume recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your Amazon EBS volume recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all Amazon EBS volume recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your Amazon EBS volume recommendations. Use this filter to find all of your Amazon EBS volume recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your Amazon EBS volume recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.EBSFilterName?
        /// The value of the filter. The valid values are Optimized, or NotOptimized.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.EBSFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ExportEBSVolumeRecommendationsInput: Swift.Sendable {
    /// The IDs of the Amazon Web Services accounts for which to export Amazon EBS volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Amazon EBS volume recommendations.
    public var filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportEBSVolumeRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableInstanceField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentInstanceGpuInfo
        case currentInstanceType
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentPerformanceRisk
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case effectiveRecommendationPreferencesCpuVendorArchitectures
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics
        case effectiveRecommendationPreferencesExternalMetricsSource
        case effectiveRecommendationPreferencesInferredWorkloadTypes
        case effectiveRecommendationPreferencesLookbackPeriod
        case effectiveRecommendationPreferencesPreferredResources
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case effectiveRecommendationPreferencesUtilizationPreferences
        case externalMetricStatusCode
        case externalMetricStatusReason
        case finding
        case findingReasonCodes
        case idle
        case inferredWorkloadTypes
        case instanceArn
        case instanceName
        case instanceState
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationsSourcesRecommendationSourceArn
        case recommendationsSourcesRecommendationSourceType
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case recommendationOptionsInstanceGpuInfo
        case recommendationOptionsInstanceType
        case recommendationOptionsMemory
        case recommendationOptionsMigrationEffort
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsPlatformDifferences
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum
        case recommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case recommendationOptionsSavingsOpportunityPercentage
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case tags
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsGpuMemoryPercentageMaximum
        case utilizationMetricsGpuPercentageMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableInstanceField] {
            return [
                .accountId,
                .currentInstanceGpuInfo,
                .currentInstanceType,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentPerformanceRisk,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .effectiveRecommendationPreferencesCpuVendorArchitectures,
                .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics,
                .effectiveRecommendationPreferencesExternalMetricsSource,
                .effectiveRecommendationPreferencesInferredWorkloadTypes,
                .effectiveRecommendationPreferencesLookbackPeriod,
                .effectiveRecommendationPreferencesPreferredResources,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .effectiveRecommendationPreferencesUtilizationPreferences,
                .externalMetricStatusCode,
                .externalMetricStatusReason,
                .finding,
                .findingReasonCodes,
                .idle,
                .inferredWorkloadTypes,
                .instanceArn,
                .instanceName,
                .instanceState,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationsSourcesRecommendationSourceArn,
                .recommendationsSourcesRecommendationSourceType,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .recommendationOptionsInstanceGpuInfo,
                .recommendationOptionsInstanceType,
                .recommendationOptionsMemory,
                .recommendationOptionsMigrationEffort,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsPlatformDifferences,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum,
                .recommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .recommendationOptionsSavingsOpportunityPercentage,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .tags,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsGpuMemoryPercentageMaximum,
                .utilizationMetricsGpuPercentageMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentInstanceGpuInfo: return "CurrentInstanceGpuInfo"
            case .currentInstanceType: return "CurrentInstanceType"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .effectiveRecommendationPreferencesCpuVendorArchitectures: return "EffectiveRecommendationPreferencesCpuVendorArchitectures"
            case .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics: return "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
            case .effectiveRecommendationPreferencesExternalMetricsSource: return "EffectiveRecommendationPreferencesExternalMetricsSource"
            case .effectiveRecommendationPreferencesInferredWorkloadTypes: return "EffectiveRecommendationPreferencesInferredWorkloadTypes"
            case .effectiveRecommendationPreferencesLookbackPeriod: return "EffectiveRecommendationPreferencesLookBackPeriod"
            case .effectiveRecommendationPreferencesPreferredResources: return "EffectiveRecommendationPreferencesPreferredResources"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .effectiveRecommendationPreferencesUtilizationPreferences: return "EffectiveRecommendationPreferencesUtilizationPreferences"
            case .externalMetricStatusCode: return "ExternalMetricStatusCode"
            case .externalMetricStatusReason: return "ExternalMetricStatusReason"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .idle: return "Idle"
            case .inferredWorkloadTypes: return "InferredWorkloadTypes"
            case .instanceArn: return "InstanceArn"
            case .instanceName: return "InstanceName"
            case .instanceState: return "InstanceState"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationsSourcesRecommendationSourceArn: return "RecommendationsSourcesRecommendationSourceArn"
            case .recommendationsSourcesRecommendationSourceType: return "RecommendationsSourcesRecommendationSourceType"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .recommendationOptionsInstanceGpuInfo: return "RecommendationOptionsInstanceGpuInfo"
            case .recommendationOptionsInstanceType: return "RecommendationOptionsInstanceType"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsMigrationEffort: return "RecommendationOptionsMigrationEffort"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsPlatformDifferences: return "RecommendationOptionsPlatformDifferences"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum: return "RecommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum: return "RecommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .tags: return "Tags"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsGpuMemoryPercentageMaximum: return "UtilizationMetricsGpuMemoryPercentageMaximum"
            case .utilizationMetricsGpuPercentageMaximum: return "UtilizationMetricsGpuPercentageMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ExportEC2InstanceRecommendationsInput: Swift.Sendable {
    /// The IDs of the Amazon Web Services accounts for which to export instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of instance recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool?
    /// An object to specify the preferences for the Amazon EC2 instance recommendations to export.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.recommendationPreferences = recommendationPreferences
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportEC2InstanceRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableECSServiceField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentPerformanceRisk
        case currentServiceConfigurationAutoScalingConfiguration
        case currentServiceConfigurationCpu
        case currentServiceConfigurationMemory
        case currentServiceConfigurationTaskDefinitionArn
        case currentServiceContainerConfigurations
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case finding
        case findingReasonCodes
        case lastRefreshTimestamp
        case launchType
        case lookbackPeriodInDays
        case recommendationOptionsContainerRecommendations
        case recommendationOptionsCpu
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case recommendationOptionsMemory
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case recommendationOptionsSavingsOpportunityPercentage
        case serviceArn
        case tags
        case utilizationMetricsCpuMaximum
        case utilizationMetricsMemoryMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableECSServiceField] {
            return [
                .accountId,
                .currentPerformanceRisk,
                .currentServiceConfigurationAutoScalingConfiguration,
                .currentServiceConfigurationCpu,
                .currentServiceConfigurationMemory,
                .currentServiceConfigurationTaskDefinitionArn,
                .currentServiceContainerConfigurations,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .finding,
                .findingReasonCodes,
                .lastRefreshTimestamp,
                .launchType,
                .lookbackPeriodInDays,
                .recommendationOptionsContainerRecommendations,
                .recommendationOptionsCpu,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .recommendationOptionsMemory,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .recommendationOptionsSavingsOpportunityPercentage,
                .serviceArn,
                .tags,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsMemoryMaximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .currentServiceConfigurationAutoScalingConfiguration: return "CurrentServiceConfigurationAutoScalingConfiguration"
            case .currentServiceConfigurationCpu: return "CurrentServiceConfigurationCpu"
            case .currentServiceConfigurationMemory: return "CurrentServiceConfigurationMemory"
            case .currentServiceConfigurationTaskDefinitionArn: return "CurrentServiceConfigurationTaskDefinitionArn"
            case .currentServiceContainerConfigurations: return "CurrentServiceContainerConfigurations"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .launchType: return "LaunchType"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsContainerRecommendations: return "RecommendationOptionsContainerRecommendations"
            case .recommendationOptionsCpu: return "RecommendationOptionsCpu"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .serviceArn: return "ServiceArn"
            case .tags: return "Tags"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceRecommendationFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case finding
        case findingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFilterName] {
            return [
                .finding,
                .findingReasonCode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCode: return "FindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of Amazon ECS service recommendations. Use this filter with the [GetECSServiceRecommendations] action.
    public struct ECSServiceRecommendationFilter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification. Specify FindingReasonCode to return recommendations with a specific finding reason code. You can filter your Amazon ECS service recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your Amazon ECS service recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all Amazon ECS service recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your Amazon ECS service recommendations. Use this filter to find all of your Amazon ECS service recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your Amazon ECS service recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.ECSServiceRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows:
        ///
        /// * If you specify the name parameter as Finding, specify Optimized, Underprovisioned, or Overprovisioned.
        ///
        /// * If you specify the name parameter as FindingReasonCode, specify CPUUnderprovisioned, CPUOverprovisioned, MemoryUnderprovisioned, or MemoryOverprovisioned.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.ECSServiceRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ExportECSServiceRecommendationsInput: Swift.Sendable {
    /// The Amazon Web Services account IDs for the export Amazon ECS service recommendations. If your account is the management account or the delegated administrator of an organization, use this parameter to specify the member account you want to export recommendations to. This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive. If this parameter or the include member accounts parameter is omitted, the recommendations for member accounts aren't included in the export. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableECSServiceField]?
    /// The format of the export file. The CSV file is the only export file format currently supported.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Amazon ECS service recommendations.
    public var filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    /// If your account is the management account or the delegated administrator of an organization, this parameter indicates whether to include recommendations for resources in all member accounts of the organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file. If this parameter or the account ID parameter is omitted, recommendations for member accounts aren't included in the export.
    public var includeMemberAccounts: Swift.Bool?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableECSServiceField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportECSServiceRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. To view the status of an export job, use the [DescribeRecommendationExportJobs] action and specify the job ID.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableLambdaFunctionField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentConfigurationMemorySize
        case currentConfigurationTimeout
        case currentCostAverage
        case currentCostTotal
        case currentPerformanceRisk
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case finding
        case findingReasonCodes
        case functionArn
        case functionVersion
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case numberOfInvocations
        case recommendationOptionsConfigurationMemorySize
        case recommendationOptionsCostHigh
        case recommendationOptionsCostLow
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case recommendationOptionsProjectedUtilizationMetricsDurationExpected
        case recommendationOptionsProjectedUtilizationMetricsDurationLowerBound
        case recommendationOptionsProjectedUtilizationMetricsDurationUpperBound
        case recommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case recommendationOptionsSavingsOpportunityPercentage
        case tags
        case utilizationMetricsDurationAverage
        case utilizationMetricsDurationMaximum
        case utilizationMetricsMemoryAverage
        case utilizationMetricsMemoryMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableLambdaFunctionField] {
            return [
                .accountId,
                .currentConfigurationMemorySize,
                .currentConfigurationTimeout,
                .currentCostAverage,
                .currentCostTotal,
                .currentPerformanceRisk,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .finding,
                .findingReasonCodes,
                .functionArn,
                .functionVersion,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .numberOfInvocations,
                .recommendationOptionsConfigurationMemorySize,
                .recommendationOptionsCostHigh,
                .recommendationOptionsCostLow,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .recommendationOptionsProjectedUtilizationMetricsDurationExpected,
                .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound,
                .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound,
                .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .recommendationOptionsSavingsOpportunityPercentage,
                .tags,
                .utilizationMetricsDurationAverage,
                .utilizationMetricsDurationMaximum,
                .utilizationMetricsMemoryAverage,
                .utilizationMetricsMemoryMaximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationMemorySize: return "CurrentConfigurationMemorySize"
            case .currentConfigurationTimeout: return "CurrentConfigurationTimeout"
            case .currentCostAverage: return "CurrentCostAverage"
            case .currentCostTotal: return "CurrentCostTotal"
            case .currentPerformanceRisk: return "CurrentPerformanceRisk"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .functionArn: return "FunctionArn"
            case .functionVersion: return "FunctionVersion"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .numberOfInvocations: return "NumberOfInvocations"
            case .recommendationOptionsConfigurationMemorySize: return "RecommendationOptionsConfigurationMemorySize"
            case .recommendationOptionsCostHigh: return "RecommendationOptionsCostHigh"
            case .recommendationOptionsCostLow: return "RecommendationOptionsCostLow"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .recommendationOptionsProjectedUtilizationMetricsDurationExpected: return "RecommendationOptionsProjectedUtilizationMetricsDurationExpected"
            case .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound"
            case .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound"
            case .recommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .tags: return "Tags"
            case .utilizationMetricsDurationAverage: return "UtilizationMetricsDurationAverage"
            case .utilizationMetricsDurationMaximum: return "UtilizationMetricsDurationMaximum"
            case .utilizationMetricsMemoryAverage: return "UtilizationMetricsMemoryAverage"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionRecommendationFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case finding
        case findingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFilterName] {
            return [
                .finding,
                .findingReasonCode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCode: return "FindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of Lambda function recommendations. Use this filter with the [GetLambdaFunctionRecommendations] action. You can use EBSFilter with the [GetEBSVolumeRecommendations] action, JobFilter with the [DescribeRecommendationExportJobs] action, and Filter with the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions.
    public struct LambdaFunctionRecommendationFilter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized). Specify FindingReasonCode to return recommendations with a specific finding reason code (for example, MemoryUnderprovisioned). You can filter your Lambda function recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your Lambda function recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all Lambda function recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your Lambda function recommendations. Use this filter to find all of your Lambda function recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your Lambda function recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:
        ///
        /// * Specify Optimized, NotOptimized, or Unavailable if you specify the name parameter as Finding.
        ///
        /// * Specify MemoryOverprovisioned, MemoryUnderprovisioned, InsufficientData, or Inconclusive if you specify the name parameter as FindingReasonCode.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ExportLambdaFunctionRecommendationsInput: Swift.Sendable {
    /// The IDs of the Amazon Web Services accounts for which to export Lambda function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]?
    /// The format of the export file. The only export file format currently supported is Csv.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Lambda function recommendations.
    public var filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
    public var includeMemberAccounts: Swift.Bool?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportLambdaFunctionRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. Use the [DescribeRecommendationExportJobs] action, and specify the job ID to view the status of an export job.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableLicenseField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentLicenseConfigurationInstanceType
        case currentLicenseConfigurationLicenseEdition
        case currentLicenseConfigurationLicenseModel
        case currentLicenseConfigurationLicenseName
        case currentLicenseConfigurationLicenseVersion
        case currentLicenseConfigurationMetricsSource
        case currentLicenseConfigurationNumberOfCores
        case currentLicenseConfigurationOperatingSystem
        case lastRefreshTimestamp
        case licenseFinding
        case licenseFindingReasonCodes
        case lookbackPeriodInDays
        case recommendationOptionsEstimatedMonthlySavingsCurrency
        case recommendationOptionsEstimatedMonthlySavingsValue
        case recommendationOptionsLicenseEdition
        case recommendationOptionsLicenseModel
        case recommendationOptionsOperatingSystem
        case recommendationOptionsSavingsOpportunityPercentage
        case resourceArn
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableLicenseField] {
            return [
                .accountId,
                .currentLicenseConfigurationInstanceType,
                .currentLicenseConfigurationLicenseEdition,
                .currentLicenseConfigurationLicenseModel,
                .currentLicenseConfigurationLicenseName,
                .currentLicenseConfigurationLicenseVersion,
                .currentLicenseConfigurationMetricsSource,
                .currentLicenseConfigurationNumberOfCores,
                .currentLicenseConfigurationOperatingSystem,
                .lastRefreshTimestamp,
                .licenseFinding,
                .licenseFindingReasonCodes,
                .lookbackPeriodInDays,
                .recommendationOptionsEstimatedMonthlySavingsCurrency,
                .recommendationOptionsEstimatedMonthlySavingsValue,
                .recommendationOptionsLicenseEdition,
                .recommendationOptionsLicenseModel,
                .recommendationOptionsOperatingSystem,
                .recommendationOptionsSavingsOpportunityPercentage,
                .resourceArn,
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentLicenseConfigurationInstanceType: return "CurrentLicenseConfigurationInstanceType"
            case .currentLicenseConfigurationLicenseEdition: return "CurrentLicenseConfigurationLicenseEdition"
            case .currentLicenseConfigurationLicenseModel: return "CurrentLicenseConfigurationLicenseModel"
            case .currentLicenseConfigurationLicenseName: return "CurrentLicenseConfigurationLicenseName"
            case .currentLicenseConfigurationLicenseVersion: return "CurrentLicenseConfigurationLicenseVersion"
            case .currentLicenseConfigurationMetricsSource: return "CurrentLicenseConfigurationMetricsSource"
            case .currentLicenseConfigurationNumberOfCores: return "CurrentLicenseConfigurationNumberOfCores"
            case .currentLicenseConfigurationOperatingSystem: return "CurrentLicenseConfigurationOperatingSystem"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .licenseFinding: return "Finding"
            case .licenseFindingReasonCodes: return "FindingReasonCodes"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsEstimatedMonthlySavingsCurrency: return "RecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .recommendationOptionsEstimatedMonthlySavingsValue: return "RecommendationOptionsEstimatedMonthlySavingsValue"
            case .recommendationOptionsLicenseEdition: return "RecommendationOptionsLicenseEdition"
            case .recommendationOptionsLicenseModel: return "RecommendationOptionsLicenseModel"
            case .recommendationOptionsOperatingSystem: return "RecommendationOptionsOperatingSystem"
            case .recommendationOptionsSavingsOpportunityPercentage: return "RecommendationOptionsSavingsOpportunityPercentage"
            case .resourceArn: return "ResourceArn"
            case .tags: return "Tags"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseRecommendationFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case licenseFinding
        case licenseFindingReasonCode
        case licenseName
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseRecommendationFilterName] {
            return [
                .licenseFinding,
                .licenseFindingReasonCode,
                .licenseName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .licenseFinding: return "Finding"
            case .licenseFindingReasonCode: return "FindingReasonCode"
            case .licenseName: return "LicenseName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of license recommendations. Use this filter with the GetLicenseRecommendation action.
    public struct LicenseRecommendationFilter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification. Specify FindingReasonCode to return recommendations with a specific finding reason code. You can filter your license recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your license recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all license recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your license recommendations. Use this filter to find all of your license recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your license recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.LicenseRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:
        ///
        /// * If you specify the name parameter as Finding, then specify Optimized, NotOptimized, or InsufficentMetrics.
        ///
        /// * If you specify the name parameter as FindingReasonCode, then specify Optimized, LicenseOverprovisioned, InvalidCloudwatchApplicationInsights, or CloudwatchApplicationInsightsError.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.LicenseRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ExportLicenseRecommendationsInput: Swift.Sendable {
    /// The IDs of the Amazon Web Services accounts for which to export license recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive. If this parameter is omitted, recommendations for member accounts aren't included in the export. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableLicenseField]?
    /// The format of the export file. A CSV file is the only export format currently supported.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of license recommendations.
    public var filters: [ComputeOptimizerClientTypes.LicenseRecommendationFilter]?
    /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file . This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive.
    public var includeMemberAccounts: Swift.Bool?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableLicenseField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.LicenseRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportLicenseRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. To view the status of an export job, use the [DescribeRecommendationExportJobs] action and specify the job ID.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExportableRDSDBField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case currentDbInstanceClass
        case currentInstanceOnDemandHourlyPrice
        case currentStorageConfigurationAllocatedStorage
        case currentStorageConfigurationIops
        case currentStorageConfigurationMaxAllocatedStorage
        case currentStorageConfigurationStorageThroughput
        case currentStorageConfigurationStorageType
        case currentStorageOnDemandMonthlyPrice
        case effectiveRecommendationPreferencesCpuVendorArchitectures
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics
        case effectiveRecommendationPreferencesLookbackPeriod
        case effectiveRecommendationPreferencesSavingsEstimationMode
        case engine
        case engineVersion
        case idle
        case instanceFinding
        case instanceFindingReasonCodes
        case instanceRecommendationOptionsDbInstanceClass
        case instanceRecommendationOptionsEstimatedMonthlySavingsCurrency
        case instanceRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case instanceRecommendationOptionsEstimatedMonthlySavingsValue
        case instanceRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case instanceRecommendationOptionsInstanceOnDemandHourlyPrice
        case instanceRecommendationOptionsPerformanceRisk
        case instanceRecommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case instanceRecommendationOptionsRank
        case instanceRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case instanceRecommendationOptionsSavingsOpportunityPercentage
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case multiAzDbInstance
        case resourceArn
        case storageFinding
        case storageFindingReasonCodes
        case storageRecommendationOptionsAllocatedStorage
        case storageRecommendationOptionsEstimatedMonthlySavingsCurrency
        case storageRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts
        case storageRecommendationOptionsEstimatedMonthlySavingsValue
        case storageRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts
        case storageRecommendationOptionsIops
        case storageRecommendationOptionsMaxAllocatedStorage
        case storageRecommendationOptionsOnDemandMonthlyPrice
        case storageRecommendationOptionsRank
        case storageRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage
        case storageRecommendationOptionsSavingsOpportunityPercentage
        case storageRecommendationOptionsStorageThroughput
        case storageRecommendationOptionsStorageType
        case tags
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDatabaseConnectionsMaximum
        case utilizationMetricsEbsVolumeReadIopsMaximum
        case utilizationMetricsEbsVolumeReadThroughputMaximum
        case utilizationMetricsEbsVolumeStorageSpaceUtilizationMaximum
        case utilizationMetricsEbsVolumeWriteIopsMaximum
        case utilizationMetricsEbsVolumeWriteThroughputMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkReceiveThroughputMaximum
        case utilizationMetricsNetworkTransmitThroughputMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableRDSDBField] {
            return [
                .accountId,
                .currentDbInstanceClass,
                .currentInstanceOnDemandHourlyPrice,
                .currentStorageConfigurationAllocatedStorage,
                .currentStorageConfigurationIops,
                .currentStorageConfigurationMaxAllocatedStorage,
                .currentStorageConfigurationStorageThroughput,
                .currentStorageConfigurationStorageType,
                .currentStorageOnDemandMonthlyPrice,
                .effectiveRecommendationPreferencesCpuVendorArchitectures,
                .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics,
                .effectiveRecommendationPreferencesLookbackPeriod,
                .effectiveRecommendationPreferencesSavingsEstimationMode,
                .engine,
                .engineVersion,
                .idle,
                .instanceFinding,
                .instanceFindingReasonCodes,
                .instanceRecommendationOptionsDbInstanceClass,
                .instanceRecommendationOptionsEstimatedMonthlySavingsCurrency,
                .instanceRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .instanceRecommendationOptionsEstimatedMonthlySavingsValue,
                .instanceRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .instanceRecommendationOptionsInstanceOnDemandHourlyPrice,
                .instanceRecommendationOptionsPerformanceRisk,
                .instanceRecommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .instanceRecommendationOptionsRank,
                .instanceRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .instanceRecommendationOptionsSavingsOpportunityPercentage,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .multiAzDbInstance,
                .resourceArn,
                .storageFinding,
                .storageFindingReasonCodes,
                .storageRecommendationOptionsAllocatedStorage,
                .storageRecommendationOptionsEstimatedMonthlySavingsCurrency,
                .storageRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts,
                .storageRecommendationOptionsEstimatedMonthlySavingsValue,
                .storageRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts,
                .storageRecommendationOptionsIops,
                .storageRecommendationOptionsMaxAllocatedStorage,
                .storageRecommendationOptionsOnDemandMonthlyPrice,
                .storageRecommendationOptionsRank,
                .storageRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage,
                .storageRecommendationOptionsSavingsOpportunityPercentage,
                .storageRecommendationOptionsStorageThroughput,
                .storageRecommendationOptionsStorageType,
                .tags,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDatabaseConnectionsMaximum,
                .utilizationMetricsEbsVolumeReadIopsMaximum,
                .utilizationMetricsEbsVolumeReadThroughputMaximum,
                .utilizationMetricsEbsVolumeStorageSpaceUtilizationMaximum,
                .utilizationMetricsEbsVolumeWriteIopsMaximum,
                .utilizationMetricsEbsVolumeWriteThroughputMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkReceiveThroughputMaximum,
                .utilizationMetricsNetworkTransmitThroughputMaximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentDbInstanceClass: return "CurrentDBInstanceClass"
            case .currentInstanceOnDemandHourlyPrice: return "CurrentInstanceOnDemandHourlyPrice"
            case .currentStorageConfigurationAllocatedStorage: return "CurrentStorageConfigurationAllocatedStorage"
            case .currentStorageConfigurationIops: return "CurrentStorageConfigurationIOPS"
            case .currentStorageConfigurationMaxAllocatedStorage: return "CurrentStorageConfigurationMaxAllocatedStorage"
            case .currentStorageConfigurationStorageThroughput: return "CurrentStorageConfigurationStorageThroughput"
            case .currentStorageConfigurationStorageType: return "CurrentStorageConfigurationStorageType"
            case .currentStorageOnDemandMonthlyPrice: return "CurrentStorageOnDemandMonthlyPrice"
            case .effectiveRecommendationPreferencesCpuVendorArchitectures: return "EffectiveRecommendationPreferencesCpuVendorArchitectures"
            case .effectiveRecommendationPreferencesEnhancedInfrastructureMetrics: return "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
            case .effectiveRecommendationPreferencesLookbackPeriod: return "EffectiveRecommendationPreferencesLookBackPeriod"
            case .effectiveRecommendationPreferencesSavingsEstimationMode: return "EffectiveRecommendationPreferencesSavingsEstimationMode"
            case .engine: return "Engine"
            case .engineVersion: return "EngineVersion"
            case .idle: return "Idle"
            case .instanceFinding: return "InstanceFinding"
            case .instanceFindingReasonCodes: return "InstanceFindingReasonCodes"
            case .instanceRecommendationOptionsDbInstanceClass: return "InstanceRecommendationOptionsDBInstanceClass"
            case .instanceRecommendationOptionsEstimatedMonthlySavingsCurrency: return "InstanceRecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .instanceRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "InstanceRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .instanceRecommendationOptionsEstimatedMonthlySavingsValue: return "InstanceRecommendationOptionsEstimatedMonthlySavingsValue"
            case .instanceRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "InstanceRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .instanceRecommendationOptionsInstanceOnDemandHourlyPrice: return "InstanceRecommendationOptionsInstanceOnDemandHourlyPrice"
            case .instanceRecommendationOptionsPerformanceRisk: return "InstanceRecommendationOptionsPerformanceRisk"
            case .instanceRecommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "InstanceRecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .instanceRecommendationOptionsRank: return "InstanceRecommendationOptionsRank"
            case .instanceRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "InstanceRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .instanceRecommendationOptionsSavingsOpportunityPercentage: return "InstanceRecommendationOptionsSavingsOpportunityPercentage"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .multiAzDbInstance: return "MultiAZDBInstance"
            case .resourceArn: return "ResourceArn"
            case .storageFinding: return "StorageFinding"
            case .storageFindingReasonCodes: return "StorageFindingReasonCodes"
            case .storageRecommendationOptionsAllocatedStorage: return "StorageRecommendationOptionsAllocatedStorage"
            case .storageRecommendationOptionsEstimatedMonthlySavingsCurrency: return "StorageRecommendationOptionsEstimatedMonthlySavingsCurrency"
            case .storageRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts: return "StorageRecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts"
            case .storageRecommendationOptionsEstimatedMonthlySavingsValue: return "StorageRecommendationOptionsEstimatedMonthlySavingsValue"
            case .storageRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts: return "StorageRecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts"
            case .storageRecommendationOptionsIops: return "StorageRecommendationOptionsIOPS"
            case .storageRecommendationOptionsMaxAllocatedStorage: return "StorageRecommendationOptionsMaxAllocatedStorage"
            case .storageRecommendationOptionsOnDemandMonthlyPrice: return "StorageRecommendationOptionsOnDemandMonthlyPrice"
            case .storageRecommendationOptionsRank: return "StorageRecommendationOptionsRank"
            case .storageRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage: return "StorageRecommendationOptionsSavingsOpportunityAfterDiscountsPercentage"
            case .storageRecommendationOptionsSavingsOpportunityPercentage: return "StorageRecommendationOptionsSavingsOpportunityPercentage"
            case .storageRecommendationOptionsStorageThroughput: return "StorageRecommendationOptionsStorageThroughput"
            case .storageRecommendationOptionsStorageType: return "StorageRecommendationOptionsStorageType"
            case .tags: return "Tags"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDatabaseConnectionsMaximum: return "UtilizationMetricsDatabaseConnectionsMaximum"
            case .utilizationMetricsEbsVolumeReadIopsMaximum: return "UtilizationMetricsEBSVolumeReadIOPSMaximum"
            case .utilizationMetricsEbsVolumeReadThroughputMaximum: return "UtilizationMetricsEBSVolumeReadThroughputMaximum"
            case .utilizationMetricsEbsVolumeStorageSpaceUtilizationMaximum: return "UtilizationMetricsEBSVolumeStorageSpaceUtilizationMaximum"
            case .utilizationMetricsEbsVolumeWriteIopsMaximum: return "UtilizationMetricsEBSVolumeWriteIOPSMaximum"
            case .utilizationMetricsEbsVolumeWriteThroughputMaximum: return "UtilizationMetricsEBSVolumeWriteThroughputMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkReceiveThroughputMaximum: return "UtilizationMetricsNetworkReceiveThroughputMaximum"
            case .utilizationMetricsNetworkTransmitThroughputMaximum: return "UtilizationMetricsNetworkTransmitThroughputMaximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSDBRecommendationFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case idle
        case instanceFinding
        case instanceFindingReasonCode
        case storageFinding
        case storageFindingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSDBRecommendationFilterName] {
            return [
                .idle,
                .instanceFinding,
                .instanceFindingReasonCode,
                .storageFinding,
                .storageFindingReasonCode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .idle: return "Idle"
            case .instanceFinding: return "InstanceFinding"
            case .instanceFindingReasonCode: return "InstanceFindingReasonCode"
            case .storageFinding: return "StorageFinding"
            case .storageFindingReasonCode: return "StorageFindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of Amazon RDS recommendations. Use this filter with the [GetECSServiceRecommendations] action.
    public struct RDSDBRecommendationFilter: Swift.Sendable {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification. You can filter your Amazon RDS recommendations by tag:key and tag-key tags. A tag:key is a key and value combination of a tag assigned to your Amazon RDS recommendations. Use the tag key in the filter name and the tag value as the filter value. For example, to find all Amazon RDS service recommendations that have a tag with the key of Owner and the value of TeamA, specify tag:Owner for the filter name and TeamA for the filter value. A tag-key is the key of a tag assigned to your Amazon RDS recommendations. Use this filter to find all of your Amazon RDS recommendations that have a tag with a specific key. This doesnâ€™t consider the tag value. For example, you can find your Amazon RDS service recommendations with a tag key value of Owner or without any tag keys assigned.
        public var name: ComputeOptimizerClientTypes.RDSDBRecommendationFilterName?
        /// The value of the filter.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.RDSDBRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ExportRDSDatabaseRecommendationsInput: Swift.Sendable {
    /// The Amazon Web Services account IDs for the export Amazon RDS recommendations. If your account is the management account or the delegated administrator of an organization, use this parameter to specify the member account you want to export recommendations to. This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive. If this parameter or the include member accounts parameter is omitted, the recommendations for member accounts aren't included in the export. You can specify multiple account IDs per request.
    public var accountIds: [Swift.String]?
    /// The recommendations data to include in the export file. For more information about the fields that can be exported, see [Exported files](https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files) in the Compute Optimizer User Guide.
    public var fieldsToExport: [ComputeOptimizerClientTypes.ExportableRDSDBField]?
    /// The format of the export file. The CSV file is the only export file format currently supported.
    public var fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// An array of objects to specify a filter that exports a more specific set of Amazon RDS recommendations.
    public var filters: [ComputeOptimizerClientTypes.RDSDBRecommendationFilter]?
    /// If your account is the management account or the delegated administrator of an organization, this parameter indicates whether to include recommendations for resources in all member accounts of the organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see [Compute Optimizer and Amazon Web Services Organizations trusted access](https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access) in the Compute Optimizer User Guide. If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file. If this parameter or the account ID parameter is omitted, recommendations for member accounts aren't included in the export.
    public var includeMemberAccounts: Swift.Bool?
    /// Describes the recommendation preferences to return in the response of a [GetAutoScalingGroupRecommendations], [GetEC2InstanceRecommendations], [GetEC2RecommendationProjectedMetrics], [GetRDSDatabaseRecommendations], and [GetRDSDatabaseRecommendationProjectedMetrics] request.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see [Amazon S3 Bucket Policy for Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html) in the Compute Optimizer User Guide.
    /// This member is required.
    public var s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init(
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableRDSDBField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.RDSDBRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool? = false,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.recommendationPreferences = recommendationPreferences
        self.s3DestinationConfig = s3DestinationConfig
    }
}

public struct ExportRDSDatabaseRecommendationsOutput: Swift.Sendable {
    /// The identification number of the export job. To view the status of an export job, use the [DescribeRecommendationExportJobs] action and specify the job ID.
    public var jobId: Swift.String?
    /// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
    public var s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init(
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

public struct GetAutoScalingGroupRecommendationsInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return Auto Scaling group recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return recommendations.
    public var autoScalingGroupArns: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of Auto Scaling group recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// The maximum number of Auto Scaling group recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of Auto Scaling group recommendations.
    public var nextToken: Swift.String?
    /// An object to specify the preferences for the Auto Scaling group recommendations to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?

    public init(
        accountIds: [Swift.String]? = nil,
        autoScalingGroupArns: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil
    )
    {
        self.accountIds = accountIds
        self.autoScalingGroupArns = autoScalingGroupArns
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationPreferences = recommendationPreferences
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an error experienced when getting recommendations. For example, an error is returned if you request recommendations for an unsupported Auto Scaling group, or if you request recommendations for an instance of an unsupported instance family.
    public struct GetRecommendationError: Swift.Sendable {
        /// The error code.
        public var code: Swift.String?
        /// The ID of the error.
        public var identifier: Swift.String?
        /// The message, or reason, for the error.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            identifier: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.identifier = identifier
            self.message = message
        }
    }
}

public struct GetAutoScalingGroupRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe Auto Scaling group recommendations.
    public var autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]?
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported Auto Scaling group.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to use to advance to the next page of Auto Scaling group recommendations. This value is null when there are no more pages of Auto Scaling group recommendations to return.
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]? = nil,
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupRecommendations = autoScalingGroupRecommendations
        self.errors = errors
        self.nextToken = nextToken
    }
}

public struct GetEBSVolumeRecommendationsInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of volume recommendations.
    public var filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// The maximum number of volume recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of volume recommendations.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the volumes for which to return recommendations.
    public var volumeArns: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        volumeArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeArns = volumeArns
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the configuration of an Amazon Elastic Block Store (Amazon EBS) volume.
    public struct VolumeConfiguration: Swift.Sendable {
        /// Contains the image used to boot the instance during launch.
        public var rootVolume: Swift.Bool?
        /// The baseline IOPS of the volume.
        public var volumeBaselineIOPS: Swift.Int
        /// The baseline throughput of the volume.
        public var volumeBaselineThroughput: Swift.Int
        /// The burst IOPS of the volume.
        public var volumeBurstIOPS: Swift.Int
        /// The burst throughput of the volume.
        public var volumeBurstThroughput: Swift.Int
        /// The size of the volume, in GiB.
        public var volumeSize: Swift.Int
        /// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public var volumeType: Swift.String?

        public init(
            rootVolume: Swift.Bool? = nil,
            volumeBaselineIOPS: Swift.Int = 0,
            volumeBaselineThroughput: Swift.Int = 0,
            volumeBurstIOPS: Swift.Int = 0,
            volumeBurstThroughput: Swift.Int = 0,
            volumeSize: Swift.Int = 0,
            volumeType: Swift.String? = nil
        )
        {
            self.rootVolume = rootVolume
            self.volumeBaselineIOPS = volumeBaselineIOPS
            self.volumeBaselineThroughput = volumeBaselineThroughput
            self.volumeBurstIOPS = volumeBurstIOPS
            self.volumeBurstThroughput = volumeBurstThroughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum EBSSavingsEstimationModeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case costExplorerRightsizing
        case costOptimizationHub
        case publicPricing
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSSavingsEstimationModeSource] {
            return [
                .costExplorerRightsizing,
                .costOptimizationHub,
                .publicPricing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .costExplorerRightsizing: return "CostExplorerRightsizing"
            case .costOptimizationHub: return "CostOptimizationHub"
            case .publicPricing: return "PublicPricing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings estimation mode used for calculating savings opportunity for Amazon EBS volumes.
    public struct EBSSavingsEstimationMode: Swift.Sendable {
        /// Describes the source for calculating the savings opportunity for Amazon EBS volumes.
        public var source: ComputeOptimizerClientTypes.EBSSavingsEstimationModeSource?

        public init(
            source: ComputeOptimizerClientTypes.EBSSavingsEstimationModeSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective recommendation preferences for Amazon EBS volumes.
    public struct EBSEffectiveRecommendationPreferences: Swift.Sendable {
        /// Describes the savings estimation mode preference applied for calculating savings opportunity for Amazon EBS volumes.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.EBSSavingsEstimationMode?

        public init(
            savingsEstimationMode: ComputeOptimizerClientTypes.EBSSavingsEstimationMode? = nil
        )
        {
            self.savingsEstimationMode = savingsEstimationMode
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum EBSFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notOptimized
        case optimized
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFinding] {
            return [
                .notOptimized,
                .optimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// A list of tag key and value pairs that you define.
    public struct Tag: Swift.Sendable {
        /// One part of a key-value pair that makes up a tag. A key is a general label that acts like a category for more specific tag values.
        public var key: Swift.String?
        /// One part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum EBSMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case volumeReadBytesPerSecond
        case volumeReadOpsPerSecond
        case volumeWriteBytesPerSecond
        case volumeWriteOpsPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSMetricName] {
            return [
                .volumeReadBytesPerSecond,
                .volumeReadOpsPerSecond,
                .volumeWriteBytesPerSecond,
                .volumeWriteOpsPerSecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .volumeReadBytesPerSecond: return "VolumeReadBytesPerSecond"
            case .volumeReadOpsPerSecond: return "VolumeReadOpsPerSecond"
            case .volumeWriteBytesPerSecond: return "VolumeWriteBytesPerSecond"
            case .volumeWriteOpsPerSecond: return "VolumeWriteOpsPerSecond"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a utilization metric of an Amazon Elastic Block Store (Amazon EBS) volume. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option.
    public struct EBSUtilizationMetric: Swift.Sendable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * VolumeReadOpsPerSecond - The completed read operations per second from the volume in a specified period of time. Unit: Count
        ///
        /// * VolumeWriteOpsPerSecond - The completed write operations per second to the volume in a specified period of time. Unit: Count
        ///
        /// * VolumeReadBytesPerSecond - The bytes read per second from the volume in a specified period of time. Unit: Bytes
        ///
        /// * VolumeWriteBytesPerSecond - The bytes written to the volume in a specified period of time. Unit: Bytes
        public var name: ComputeOptimizerClientTypes.EBSMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.EBSMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon EBS volume recommendations. This includes any applicable discounts.
    public struct EBSEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Amazon EBS volume recommendations after applying specific discounts.
    public struct EBSSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizerâ€™s Amazon EBS volume recommendations. This saving includes any applicable discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizerâ€™s Amazon EBS volume recommendations.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation option for an Amazon Elastic Block Store (Amazon EBS) instance.
    public struct VolumeRecommendationOption: Swift.Sendable {
        /// An array of objects that describe a volume configuration.
        public var configuration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// The performance risk of the volume recommendation option. Performance risk is the likelihood of the recommended volume type meeting the performance requirement of your workload. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// The rank of the volume recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the EBS volume recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An object that describes the savings opportunity for the Amazon EBS volume recommendation option with specific discounts. Savings opportunity includes the estimated monthly savings and percentage.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts?

        public init(
            configuration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            performanceRisk: Swift.Double = 0.0,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Amazon Elastic Block Store (Amazon EBS) volume recommendation.
    public struct VolumeRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the volume.
        public var accountId: Swift.String?
        /// An array of objects that describe the current configuration of the volume.
        public var currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// Describes the effective recommendation preferences for Amazon EBS volume.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences?
        /// The finding classification of the volume. Findings for volumes include:
        ///
        /// * NotOptimized â€”A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.
        ///
        /// * Optimized â€”An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.
        public var finding: ComputeOptimizerClientTypes.EBSFinding?
        /// The timestamp of when the volume recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The number of days for which utilization metrics were analyzed for the volume.
        public var lookBackPeriodInDays: Swift.Double
        /// A list of tags assigned to your Amazon EBS volume recommendations.
        public var tags: [ComputeOptimizerClientTypes.Tag]?
        /// An array of objects that describe the utilization metrics of the volume.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]?
        /// The Amazon Resource Name (ARN) of the current volume.
        public var volumeArn: Swift.String?
        /// An array of objects that describe the recommendation options for the volume.
        public var volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]?

        public init(
            accountId: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.EBSFinding? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil,
            volumeArn: Swift.String? = nil,
            volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        )
        {
            self.accountId = accountId
            self.currentConfiguration = currentConfiguration
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.tags = tags
            self.utilizationMetrics = utilizationMetrics
            self.volumeArn = volumeArn
            self.volumeRecommendationOptions = volumeRecommendationOptions
        }
    }
}

public struct GetEBSVolumeRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported volume.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to use to advance to the next page of volume recommendations. This value is null when there are no more pages of volume recommendations to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe volume recommendations.
    public var volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]?

    public init(
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil,
        volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]? = nil
    )
    {
        self.errors = errors
        self.nextToken = nextToken
        self.volumeRecommendations = volumeRecommendations
    }
}

public struct GetEC2InstanceRecommendationsInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return instance recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of instance recommendations.
    public var filters: [ComputeOptimizerClientTypes.Filter]?
    /// The Amazon Resource Name (ARN) of the instances for which to return recommendations.
    public var instanceArns: [Swift.String]?
    /// The maximum number of instance recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of instance recommendations.
    public var nextToken: Swift.String?
    /// An object to specify the preferences for the Amazon EC2 instance recommendations to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        instanceArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.instanceArns = instanceArns
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationPreferences = recommendationPreferences
    }
}

extension ComputeOptimizerClientTypes {

    public enum ExternalMetricStatusCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case datadogIntegrationError
        case dynatraceIntegrationError
        case instanaIntegrationError
        case insufficientDatadogMetrics
        case insufficientDynatraceMetrics
        case insufficientInstanaMetrics
        case insufficientNewrelicMetrics
        case integrationSuccess
        case newrelicIntegrationError
        case noExternalMetricSet
        case sdkUnknown(Swift.String)

        public static var allCases: [ExternalMetricStatusCode] {
            return [
                .datadogIntegrationError,
                .dynatraceIntegrationError,
                .instanaIntegrationError,
                .insufficientDatadogMetrics,
                .insufficientDynatraceMetrics,
                .insufficientInstanaMetrics,
                .insufficientNewrelicMetrics,
                .integrationSuccess,
                .newrelicIntegrationError,
                .noExternalMetricSet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .datadogIntegrationError: return "DATADOG_INTEGRATION_ERROR"
            case .dynatraceIntegrationError: return "DYNATRACE_INTEGRATION_ERROR"
            case .instanaIntegrationError: return "INSTANA_INTEGRATION_ERROR"
            case .insufficientDatadogMetrics: return "INSUFFICIENT_DATADOG_METRICS"
            case .insufficientDynatraceMetrics: return "INSUFFICIENT_DYNATRACE_METRICS"
            case .insufficientInstanaMetrics: return "INSUFFICIENT_INSTANA_METRICS"
            case .insufficientNewrelicMetrics: return "INSUFFICIENT_NEWRELIC_METRICS"
            case .integrationSuccess: return "INTEGRATION_SUCCESS"
            case .newrelicIntegrationError: return "NEWRELIC_INTEGRATION_ERROR"
            case .noExternalMetricSet: return "NO_EXTERNAL_METRIC_SET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes Compute Optimizer's integration status with your chosen external metric provider. For example, Datadog.
    public struct ExternalMetricStatus: Swift.Sendable {
        /// The status code for Compute Optimizer's integration with an external metrics provider.
        public var statusCode: ComputeOptimizerClientTypes.ExternalMetricStatusCode?
        /// The reason for Compute Optimizer's integration status with your external metric provider.
        public var statusReason: Swift.String?

        public init(
            statusCode: ComputeOptimizerClientTypes.ExternalMetricStatusCode? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.statusCode = statusCode
            self.statusReason = statusReason
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InstanceRecommendationFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case diskIopsOverProvisioned
        case diskIopsUnderProvisioned
        case diskThroughputOverProvisioned
        case diskThroughputUnderProvisioned
        case ebsIopsOverProvisioned
        case ebsIopsUnderProvisioned
        case ebsThroughputOverProvisioned
        case ebsThroughputUnderProvisioned
        case gpuMemoryOverProvisioned
        case gpuMemoryUnderProvisioned
        case gpuOverProvisioned
        case gpuUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case networkBandwidthOverProvisioned
        case networkBandwidthUnderProvisioned
        case networkPpsOverProvisioned
        case networkPpsUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .diskIopsOverProvisioned,
                .diskIopsUnderProvisioned,
                .diskThroughputOverProvisioned,
                .diskThroughputUnderProvisioned,
                .ebsIopsOverProvisioned,
                .ebsIopsUnderProvisioned,
                .ebsThroughputOverProvisioned,
                .ebsThroughputUnderProvisioned,
                .gpuMemoryOverProvisioned,
                .gpuMemoryUnderProvisioned,
                .gpuOverProvisioned,
                .gpuUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .networkBandwidthOverProvisioned,
                .networkBandwidthUnderProvisioned,
                .networkPpsOverProvisioned,
                .networkPpsUnderProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .diskIopsOverProvisioned: return "DiskIOPSOverprovisioned"
            case .diskIopsUnderProvisioned: return "DiskIOPSUnderprovisioned"
            case .diskThroughputOverProvisioned: return "DiskThroughputOverprovisioned"
            case .diskThroughputUnderProvisioned: return "DiskThroughputUnderprovisioned"
            case .ebsIopsOverProvisioned: return "EBSIOPSOverprovisioned"
            case .ebsIopsUnderProvisioned: return "EBSIOPSUnderprovisioned"
            case .ebsThroughputOverProvisioned: return "EBSThroughputOverprovisioned"
            case .ebsThroughputUnderProvisioned: return "EBSThroughputUnderprovisioned"
            case .gpuMemoryOverProvisioned: return "GPUMemoryOverprovisioned"
            case .gpuMemoryUnderProvisioned: return "GPUMemoryUnderprovisioned"
            case .gpuOverProvisioned: return "GPUOverprovisioned"
            case .gpuUnderProvisioned: return "GPUUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case .networkBandwidthOverProvisioned: return "NetworkBandwidthOverprovisioned"
            case .networkBandwidthUnderProvisioned: return "NetworkBandwidthUnderprovisioned"
            case .networkPpsOverProvisioned: return "NetworkPPSOverprovisioned"
            case .networkPpsUnderProvisioned: return "NetworkPPSUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InstanceIdle: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceIdle] {
            return [
                .false,
                .true
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum InstanceState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case running
        case shuttingDown
        case stopped
        case stopping
        case terminated
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceState] {
            return [
                .pending,
                .running,
                .shuttingDown,
                .stopped,
                .stopping,
                .terminated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "pending"
            case .running: return "running"
            case .shuttingDown: return "shutting-down"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case .terminated: return "terminated"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum PlatformDifference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case architecture
        case hypervisor
        case instanceStoreAvailability
        case networkInterface
        case storageInterface
        case virtualizationType
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformDifference] {
            return [
                .architecture,
                .hypervisor,
                .instanceStoreAvailability,
                .networkInterface,
                .storageInterface,
                .virtualizationType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .architecture: return "Architecture"
            case .hypervisor: return "Hypervisor"
            case .instanceStoreAvailability: return "InstanceStoreAvailability"
            case .networkInterface: return "NetworkInterface"
            case .storageInterface: return "StorageInterface"
            case .virtualizationType: return "VirtualizationType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon EC2 instance recommendations. This is based on the Savings Plans and Reserved Instances pricing discounts.
    public struct InstanceEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for instance recommendations after applying the Savings Plans and Reserved Instances discounts. Savings opportunity after discounts represents the estimated monthly savings you can achieve by implementing Compute Optimizer recommendations.
    public struct InstanceSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon EC2 instance recommendations. This is based on pricing after applying the Savings Plans and Reserved Instances discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost after applying the Savings Plans and Reserved Instances discounts. This saving can be achieved by adopting Compute Optimizerâ€™s EC2 instance recommendations.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation option for an Amazon EC2 instance.
    public struct InstanceRecommendationOption: Swift.Sendable {
        /// Describes the GPU accelerator settings for the recommended instance type.
        public var instanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo?
        /// The instance type of the instance recommendation.
        public var instanceType: Swift.String?
        /// The level of effort required to migrate from the current instance type to the recommended instance type. For example, the migration effort is Low if Amazon EMR is the inferred workload type and an Amazon Web Services Graviton instance type is recommended. The migration effort is Medium if a workload type couldn't be inferred but an Amazon Web Services Graviton instance type is recommended. The migration effort is VeryLow if both the current and recommended instance types are of the same CPU architecture.
        public var migrationEffort: ComputeOptimizerClientTypes.MigrationEffort?
        /// The performance risk of the instance recommendation option. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public var performanceRisk: Swift.Double
        /// Describes the configuration differences between the current instance and the recommended instance type. You should consider the configuration differences before migrating your workloads from the current instance to the recommended instance type. The [Change the instance type guide for Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html) and [Change the instance type guide for Windows](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-resize.html) provide general guidance for getting started with an instance migration. Platform differences include:
        ///
        /// * Hypervisor â€” The hypervisor of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses a Nitro hypervisor and the current instance uses a Xen hypervisor. The differences that you should consider between these hypervisors are covered in the [Nitro Hypervisor](http://aws.amazon.com/ec2/faqs/#Nitro_Hypervisor) section of the Amazon EC2 frequently asked questions. For more information, see [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances) in the Amazon EC2 User Guide for Linux, or [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#ec2-nitro-instances) in the Amazon EC2 User Guide for Windows.
        ///
        /// * NetworkInterface â€” The network interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type supports enhanced networking and the current instance might not. To enable enhanced networking for the recommended instance type, you must install the Elastic Network Adapter (ENA) driver or the Intel 82599 Virtual Function driver. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Enhanced networking on Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html) in the Amazon EC2 User Guide for Linux, or [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Enhanced networking on Windows](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/enhanced-networking.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * StorageInterface â€” The storage interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses an NVMe storage interface and the current instance does not. To access NVMe volumes for the recommended instance type, you will need to install or upgrade the NVMe driver. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Amazon EBS and NVMe on Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html) in the Amazon EC2 User Guide for Linux, or [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Amazon EBS and NVMe on Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/nvme-ebs-volumes.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * InstanceStoreAvailability â€” The recommended instance type does not support instance store volumes and the current instance does. Before migrating, you might need to back up the data on your instance store volumes if you want to preserve them. For more information, see [How do I back up an instance store volume on my Amazon EC2 instance to Amazon EBS?](https://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/) in the Amazon Web Services Premium Support Knowledge Base. For more information, see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage) and [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Linux, or see [Networking and storage features](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage) and [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Windows.
        ///
        /// * VirtualizationType â€” The recommended instance type uses the hardware virtual machine (HVM) virtualization type and the current instance uses the paravirtual (PV) virtualization type. For more information about the differences between these virtualization types, see [Linux AMI virtualization types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html) in the Amazon EC2 User Guide for Linux, or [Windows AMI virtualization types](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#virtualization-types) in the Amazon EC2 User Guide for Windows.
        ///
        /// * Architecture â€” The CPU architecture between the recommended instance type and the current instance is different. For example, the recommended instance type might use an Arm CPU architecture and the current instance type might use a different one, such as x86. Before migrating, you should consider recompiling the software on your instance for the new architecture. Alternatively, you might switch to an Amazon Machine Image (AMI) that supports the new architecture. For more information about the CPU architecture for each instance type, see [Amazon EC2 Instance Types](http://aws.amazon.com/ec2/instance-types/).
        public var platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]?
        /// An array of objects that describe the projected utilization metrics of the instance recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// The rank of the instance recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the instance recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An object that describes the savings opportunity for the instance recommendation option that includes Savings Plans and Reserved Instances discounts. Savings opportunity includes the estimated monthly savings and percentage.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts?

        public init(
            instanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo? = nil,
            instanceType: Swift.String? = nil,
            migrationEffort: ComputeOptimizerClientTypes.MigrationEffort? = nil,
            performanceRisk: Swift.Double = 0.0,
            platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]? = nil,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.instanceGpuInfo = instanceGpuInfo
            self.instanceType = instanceType
            self.migrationEffort = migrationEffort
            self.performanceRisk = performanceRisk
            self.platformDifferences = platformDifferences
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RecommendationSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case ecsService
        case lambdaFunction
        case license
        case rdsDbInstance
        case rdsDbInstanceStorage
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationSourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .ecsService,
                .lambdaFunction,
                .license,
                .rdsDbInstance,
                .rdsDbInstanceStorage
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .ecsService: return "EcsService"
            case .lambdaFunction: return "LambdaFunction"
            case .license: return "License"
            case .rdsDbInstance: return "RdsDBInstance"
            case .rdsDbInstanceStorage: return "RdsDBInstanceStorage"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the source of a recommendation, such as an Amazon EC2 instance or Auto Scaling group.
    public struct RecommendationSource: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the recommendation source.
        public var recommendationSourceArn: Swift.String?
        /// The resource type of the recommendation source.
        public var recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType?

        public init(
            recommendationSourceArn: Swift.String? = nil,
            recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil
        )
        {
            self.recommendationSourceArn = recommendationSourceArn
            self.recommendationSourceType = recommendationSourceType
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Amazon EC2 instance recommendation.
    public struct InstanceRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the instance.
        public var accountId: Swift.String?
        /// Describes the GPU accelerator settings for the current instance type.
        public var currentInstanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo?
        /// The instance type of the current instance.
        public var currentInstanceType: Swift.String?
        /// The risk of the current instance not meeting the performance needs of its workloads. The higher the risk, the more likely the current instance cannot meet the performance requirements of its workload.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the instance.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences?
        /// An object that describes Compute Optimizer's integration status with your external metrics provider.
        public var externalMetricStatus: ComputeOptimizerClientTypes.ExternalMetricStatus?
        /// The finding classification of the instance. Findings for instances include:
        ///
        /// * Underprovisioned â€”An instance is considered under-provisioned when at least one specification of your instance, such as CPU, memory, or network, does not meet the performance requirements of your workload. Under-provisioned instances may lead to poor application performance.
        ///
        /// * Overprovisioned â€”An instance is considered over-provisioned when at least one specification of your instance, such as CPU, memory, or network, can be sized down while still meeting the performance requirements of your workload, and no specification is under-provisioned. Over-provisioned instances may lead to unnecessary infrastructure cost.
        ///
        /// * Optimized â€”An instance is considered optimized when all specifications of your instance, such as CPU, memory, and network, meet the performance requirements of your workload and is not over provisioned. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        ///
        ///
        /// The valid values in your API responses appear as OVER_PROVISIONED, UNDER_PROVISIONED, or OPTIMIZED.
        public var finding: ComputeOptimizerClientTypes.Finding?
        /// The reason for the finding classification of the instance. Finding reason codes for instances include:
        ///
        /// * CPUOverprovisioned â€” The instanceâ€™s CPU configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.
        ///
        /// * CPUUnderprovisioned â€” The instanceâ€™s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.
        ///
        /// * MemoryOverprovisioned â€” The instanceâ€™s memory configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the memory utilization metric of the current instance during the look-back period.
        ///
        /// * MemoryUnderprovisioned â€” The instanceâ€™s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance. This is identified by analyzing the memory utilization metric of the current instance during the look-back period. Memory utilization is analyzed only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling memory utilization with the Amazon CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent) in the Compute Optimizer User Guide. On Linux instances, Compute Optimizer analyses the mem_used_percent metric in the CWAgent namespace, or the legacy MemoryUtilization metric in the System/Linux namespace. On Windows instances, Compute Optimizer analyses the Memory % Committed Bytes In Use metric in the CWAgent namespace.
        ///
        /// * EBSThroughputOverprovisioned â€” The instanceâ€™s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metrics of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSThroughputUnderprovisioned â€” The instanceâ€™s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metrics of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSIOPSOverprovisioned â€” The instanceâ€™s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metric of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * EBSIOPSUnderprovisioned â€” The instanceâ€™s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metric of EBS volumes attached to the current instance during the look-back period.
        ///
        /// * NetworkBandwidthOverprovisioned â€” The instanceâ€™s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period.
        ///
        /// * NetworkBandwidthUnderprovisioned â€” The instanceâ€™s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.
        ///
        /// * NetworkPPSOverprovisioned â€” The instanceâ€™s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.
        ///
        /// * NetworkPPSUnderprovisioned â€” The instanceâ€™s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.
        ///
        /// * DiskIOPSOverprovisioned â€” The instanceâ€™s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.
        ///
        /// * DiskIOPSUnderprovisioned â€” The instanceâ€™s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.
        ///
        /// * DiskThroughputOverprovisioned â€” The instanceâ€™s disk throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.
        ///
        /// * DiskThroughputUnderprovisioned â€” The instanceâ€™s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.
        ///
        ///
        /// For more information about instance metrics, see [List the available CloudWatch metrics for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html) in the Amazon Elastic Compute Cloud User Guide. For more information about EBS volume metrics, see [Amazon CloudWatch metrics for Amazon EBS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cloudwatch_ebs.html) in the Amazon Elastic Compute Cloud User Guide.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]?
        /// Describes if an Amazon EC2 instance is idle.
        public var idle: ComputeOptimizerClientTypes.InstanceIdle?
        /// The applications that might be running on the instance as inferred by Compute Optimizer. Compute Optimizer can infer if one of the following applications might be running on the instance:
        ///
        /// * AmazonEmr - Infers that Amazon EMR might be running on the instance.
        ///
        /// * ApacheCassandra - Infers that Apache Cassandra might be running on the instance.
        ///
        /// * ApacheHadoop - Infers that Apache Hadoop might be running on the instance.
        ///
        /// * Memcached - Infers that Memcached might be running on the instance.
        ///
        /// * NGINX - Infers that NGINX might be running on the instance.
        ///
        /// * PostgreSql - Infers that PostgreSQL might be running on the instance.
        ///
        /// * Redis - Infers that Redis might be running on the instance.
        ///
        /// * Kafka - Infers that Kafka might be running on the instance.
        ///
        /// * SQLServer - Infers that SQLServer might be running on the instance.
        public var inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]?
        /// The Amazon Resource Name (ARN) of the current instance.
        public var instanceArn: Swift.String?
        /// The name of the current instance.
        public var instanceName: Swift.String?
        /// The state of the instance when the recommendation was generated.
        public var instanceState: ComputeOptimizerClientTypes.InstanceState?
        /// The timestamp of when the instance recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The number of days for which utilization metrics were analyzed for the instance.
        public var lookBackPeriodInDays: Swift.Double
        /// An array of objects that describe the recommendation options for the instance.
        public var recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]?
        /// An array of objects that describe the source resource of the recommendation.
        public var recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]?
        /// A list of tags assigned to your Amazon EC2 instance recommendations.
        public var tags: [ComputeOptimizerClientTypes.Tag]?
        /// An array of objects that describe the utilization metrics of the instance.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init(
            accountId: Swift.String? = nil,
            currentInstanceGpuInfo: ComputeOptimizerClientTypes.GpuInfo? = nil,
            currentInstanceType: Swift.String? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences? = nil,
            externalMetricStatus: ComputeOptimizerClientTypes.ExternalMetricStatus? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]? = nil,
            idle: ComputeOptimizerClientTypes.InstanceIdle? = nil,
            inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]? = nil,
            instanceArn: Swift.String? = nil,
            instanceName: Swift.String? = nil,
            instanceState: ComputeOptimizerClientTypes.InstanceState? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]? = nil,
            recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]? = nil,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentInstanceGpuInfo = currentInstanceGpuInfo
            self.currentInstanceType = currentInstanceType
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.externalMetricStatus = externalMetricStatus
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.idle = idle
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.instanceState = instanceState
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.recommendationSources = recommendationSources
            self.tags = tags
            self.utilizationMetrics = utilizationMetrics
        }
    }
}

public struct GetEC2InstanceRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an instance of an unsupported instance family.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// An array of objects that describe instance recommendations.
    public var instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    /// The token to use to advance to the next page of instance recommendations. This value is null when there are no more pages of instance recommendations to return.
    public var nextToken: Swift.String?

    public init(
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.errors = errors
        self.instanceRecommendations = instanceRecommendations
        self.nextToken = nextToken
    }
}

public struct GetEC2RecommendationProjectedMetricsInput: Swift.Sendable {
    /// The timestamp of the last projected metrics data point to return.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the instances for which to return recommendation projected metrics.
    /// This member is required.
    public var instanceArn: Swift.String?
    /// The granularity, in seconds, of the projected metrics data points.
    /// This member is required.
    public var period: Swift.Int?
    /// An object to specify the preferences for the Amazon EC2 recommendation projected metrics to return in the response.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// The timestamp of the first projected metrics data point to return.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic of the projected metrics.
    /// This member is required.
    public var stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init(
        endTime: Foundation.Date? = nil,
        instanceArn: Swift.String? = nil,
        period: Swift.Int? = 0,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        startTime: Foundation.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.instanceArn = instanceArn
        self.period = period
        self.recommendationPreferences = recommendationPreferences
        self.startTime = startTime
        self.stat = stat
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a projected utilization metric of a recommendation option, such as an Amazon EC2 instance. This represents the projected utilization of a recommendation option had you used that resource during the analyzed period. Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option. The Cpu, Memory, GPU, and GPU_MEMORY metrics are the only projected utilization metrics returned when you run the [GetEC2RecommendationProjectedMetrics] action. Additionally, these metrics are only returned for resources with the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent) and [Enabling NVIDIA GPU utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#nvidia-cw-agent).
    public struct ProjectedMetric: Swift.Sendable {
        /// The name of the projected utilization metric. The following projected utilization metrics are returned:
        ///
        /// * Cpu - The projected percentage of allocated EC2 compute units that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the processing power required to run an application on the recommendation option. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core.
        ///
        /// * Memory - The percentage of memory that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the amount of memory required to run an application on the recommendation option. Units: Percent The Memory metric is only returned for resources with the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
        ///
        /// * GPU - The projected percentage of allocated GPUs if you adjust your configurations to Compute Optimizer's recommendation option.
        ///
        /// * GPU_MEMORY - The projected percentage of total GPU memory if you adjust your configurations to Compute Optimizer's recommendation option. The GPU and GPU_MEMORY metrics are only returned for resources with the unified CloudWatch Agent installed on them. For more information, see [Enabling NVIDIA GPU utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#nvidia-cw-agent).
        public var name: ComputeOptimizerClientTypes.MetricName?
        /// The timestamps of the projected utilization metric.
        public var timestamps: [Foundation.Date]?
        /// The values of the projected utilization metrics.
        public var values: [Swift.Double]?

        public init(
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.name = name
            self.timestamps = timestamps
            self.values = values
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a projected utilization metric of a recommendation option. The Cpu and Memory metrics are the only projected utilization metrics returned when you run the [GetEC2RecommendationProjectedMetrics] action. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see [Enabling Memory Utilization with the CloudWatch Agent](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
    public struct RecommendedOptionProjectedMetric: Swift.Sendable {
        /// An array of objects that describe a projected utilization metric.
        public var projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]?
        /// The rank of the recommendation option projected metric. The top recommendation option is ranked as 1. The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as 1 is related to the recommendation option that is also ranked as 1 in the same response.
        public var rank: Swift.Int
        /// The recommended instance type.
        public var recommendedInstanceType: Swift.String?

        public init(
            projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            recommendedInstanceType: Swift.String? = nil
        )
        {
            self.projectedMetrics = projectedMetrics
            self.rank = rank
            self.recommendedInstanceType = recommendedInstanceType
        }
    }
}

public struct GetEC2RecommendationProjectedMetricsOutput: Swift.Sendable {
    /// An array of objects that describes projected metrics.
    public var recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]?

    public init(
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

public struct GetECSServiceRecommendationProjectedMetricsInput: Swift.Sendable {
    /// The timestamp of the last projected metrics data point to return.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The granularity, in seconds, of the projected metrics data points.
    /// This member is required.
    public var period: Swift.Int?
    /// The ARN that identifies the Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
    /// This member is required.
    public var serviceArn: Swift.String?
    /// The timestamp of the first projected metrics data point to return.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic of the projected metrics.
    /// This member is required.
    public var stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init(
        endTime: Foundation.Date? = nil,
        period: Swift.Int? = 0,
        serviceArn: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.period = period
        self.serviceArn = serviceArn
        self.startTime = startTime
        self.stat = stat
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpu
        case memory
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceMetricName] {
            return [
                .cpu,
                .memory
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .memory: return "Memory"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the projected metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the metric data of your service against its projected metric data.
    public struct ECSServiceProjectedMetric: Swift.Sendable {
        /// The lower bound values for the projected metric.
        public var lowerBoundValues: [Swift.Double]?
        /// The name of the projected metric. The following metrics are available:
        ///
        /// * Cpu â€” The percentage of allocated compute units that are currently in use on the service tasks.
        ///
        /// * Memory â€” The percentage of memory that's currently in use on the service tasks.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The timestamps of the projected metric.
        public var timestamps: [Foundation.Date]?
        /// The upper bound values for the projected metric.
        public var upperBoundValues: [Swift.Double]?

        public init(
            lowerBoundValues: [Swift.Double]? = nil,
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            timestamps: [Foundation.Date]? = nil,
            upperBoundValues: [Swift.Double]? = nil
        )
        {
            self.lowerBoundValues = lowerBoundValues
            self.name = name
            self.timestamps = timestamps
            self.upperBoundValues = upperBoundValues
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the projected metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the metric data of your service against its projected metric data.
    public struct ECSServiceRecommendedOptionProjectedMetric: Swift.Sendable {
        /// An array of objects that describe the projected metric.
        public var projectedMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedMetric]?
        /// The recommended CPU size for the Amazon ECS service.
        public var recommendedCpuUnits: Swift.Int
        /// The recommended memory size for the Amazon ECS service.
        public var recommendedMemorySize: Swift.Int

        public init(
            projectedMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedMetric]? = nil,
            recommendedCpuUnits: Swift.Int = 0,
            recommendedMemorySize: Swift.Int = 0
        )
        {
            self.projectedMetrics = projectedMetrics
            self.recommendedCpuUnits = recommendedCpuUnits
            self.recommendedMemorySize = recommendedMemorySize
        }
    }
}

public struct GetECSServiceRecommendationProjectedMetricsOutput: Swift.Sendable {
    /// An array of objects that describes the projected metrics.
    public var recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]?

    public init(
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

public struct GetECSServiceRecommendationsInput: Swift.Sendable {
    /// Return the Amazon ECS service recommendations to the specified Amazon Web Services account IDs. If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon ECS service recommendations to specific member accounts. You can only specify one account ID per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of Amazon ECS service recommendations.
    public var filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]?
    /// The maximum number of Amazon ECS service recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of Amazon ECS service recommendations.
    public var nextToken: Swift.String?
    /// The ARN that identifies the Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
    public var serviceArns: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.ECSServiceRecommendationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceArns = serviceArns
    }
}

extension ComputeOptimizerClientTypes {

    /// The memory size configurations of a container.
    public struct MemorySizeConfiguration: Swift.Sendable {
        /// The amount of memory in the container.
        public var memory: Swift.Int?
        /// The limit of memory reserve for the container.
        public var memoryReservation: Swift.Int?

        public init(
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil
        )
        {
            self.memory = memory
            self.memoryReservation = memoryReservation
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the container configurations within the tasks of your Amazon ECS service.
    public struct ContainerConfiguration: Swift.Sendable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The number of CPU units reserved for the container.
        public var cpu: Swift.Int?
        /// The memory size configurations for the container.
        public var memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration?

        public init(
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration? = nil
        )
        {
            self.containerName = containerName
            self.cpu = cpu
            self.memorySizeConfiguration = memorySizeConfiguration
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The Amazon ECS service configurations used for recommendations.
    public struct ServiceConfiguration: Swift.Sendable {
        /// Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a serviceâ€™s CPU, then Compute Optimizer doesnâ€™t generate CPU size recommendations. The Auto Scaling configuration methods include:
        ///
        /// * TARGET_TRACKING_SCALING_CPU â€” If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.
        ///
        /// * TARGET_TRACKING_SCALING_MEMORY â€” If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.
        ///
        ///
        /// For more information about step scaling and target scaling, see [ Step scaling policies for Application Auto Scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) and [ Target tracking scaling policies for Application Auto Scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) in the Application Auto Scaling User Guide.
        public var autoScalingConfiguration: ComputeOptimizerClientTypes.AutoScalingConfiguration?
        /// The container configurations within a task of an Amazon ECS service.
        public var containerConfigurations: [ComputeOptimizerClientTypes.ContainerConfiguration]?
        /// The number of CPU units used by the tasks in the Amazon ECS service.
        public var cpu: Swift.Int?
        /// The amount of memory used by the tasks in the Amazon ECS service.
        public var memory: Swift.Int?
        /// The task definition ARN used by the tasks in the Amazon ECS service.
        public var taskDefinitionArn: Swift.String?

        public init(
            autoScalingConfiguration: ComputeOptimizerClientTypes.AutoScalingConfiguration? = nil,
            containerConfigurations: [ComputeOptimizerClientTypes.ContainerConfiguration]? = nil,
            cpu: Swift.Int? = nil,
            memory: Swift.Int? = nil,
            taskDefinitionArn: Swift.String? = nil
        )
        {
            self.autoScalingConfiguration = autoScalingConfiguration
            self.containerConfigurations = containerConfigurations
            self.cpu = cpu
            self.memory = memory
            self.taskDefinitionArn = taskDefinitionArn
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSSavingsEstimationModeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case costExplorerRightsizing
        case costOptimizationHub
        case publicPricing
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSSavingsEstimationModeSource] {
            return [
                .costExplorerRightsizing,
                .costOptimizationHub,
                .publicPricing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .costExplorerRightsizing: return "CostExplorerRightsizing"
            case .costOptimizationHub: return "CostOptimizationHub"
            case .publicPricing: return "PublicPricing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings estimation mode used for calculating savings opportunity for Amazon ECS services.
    public struct ECSSavingsEstimationMode: Swift.Sendable {
        /// Describes the source for calculating the savings opportunity for Amazon ECS services.
        public var source: ComputeOptimizerClientTypes.ECSSavingsEstimationModeSource?

        public init(
            source: ComputeOptimizerClientTypes.ECSSavingsEstimationModeSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective recommendation preferences for Amazon ECS services.
    public struct ECSEffectiveRecommendationPreferences: Swift.Sendable {
        /// Describes the savings estimation mode preference applied for calculating savings opportunity for Amazon ECS services.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.ECSSavingsEstimationMode?

        public init(
            savingsEstimationMode: ComputeOptimizerClientTypes.ECSSavingsEstimationMode? = nil
        )
        {
            self.savingsEstimationMode = savingsEstimationMode
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceRecommendationFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFinding] {
            return [
                .optimized,
                .overProvisioned,
                .underProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceRecommendationFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceLaunchType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceLaunchType] {
            return [
                .ec2,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "Fargate"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The CPU and memory recommendations for a container within the tasks of your Amazon ECS service.
    public struct ContainerRecommendation: Swift.Sendable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The recommended number of CPU units reserved for the container.
        public var cpu: Swift.Int?
        /// The recommended memory size configurations for the container.
        public var memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration?

        public init(
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            memorySizeConfiguration: ComputeOptimizerClientTypes.MemorySizeConfiguration? = nil
        )
        {
            self.containerName = containerName
            self.cpu = cpu
            self.memorySizeConfiguration = memorySizeConfiguration
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum ECSServiceMetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ECSServiceMetricStatistic] {
            return [
                .average,
                .maximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the projected utilization metrics of an Amazon ECS service recommendation option. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the utilization metric data of your service against its projected utilization metric data.
    public struct ECSServiceProjectedUtilizationMetric: Swift.Sendable {
        /// The lower bound values for the projected utilization metrics.
        public var lowerBoundValue: Swift.Double
        /// The name of the projected utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu â€” The percentage of allocated compute units that are currently in use on the service tasks.
        ///
        /// * Memory â€” The percentage of memory that's currently in use on the service tasks.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The statistic of the projected utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic?
        /// The upper bound values for the projected utilization metrics.
        public var upperBoundValue: Swift.Double

        public init(
            lowerBoundValue: Swift.Double = 0.0,
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic? = nil,
            upperBoundValue: Swift.Double = 0.0
        )
        {
            self.lowerBoundValue = lowerBoundValue
            self.name = name
            self.statistic = statistic
            self.upperBoundValue = upperBoundValue
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the estimated monthly savings possible for Amazon ECS services by adopting Compute Optimizer recommendations. This is based on Amazon ECS service pricing after applying Savings Plans discounts.
    public struct ECSEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings for Amazon ECS services.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Amazon ECS service recommendations after applying Savings Plans discounts. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
    public struct ECSSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// The estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon ECS service recommendations. This includes any applicable Savings Plans discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizerâ€™s Amazon ECS service recommendations. This includes any applicable Savings Plans discounts.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the recommendation options for an Amazon ECS service.
    public struct ECSServiceRecommendationOption: Swift.Sendable {
        /// The CPU and memory size recommendations for the containers within the task of your Amazon ECS service.
        public var containerRecommendations: [ComputeOptimizerClientTypes.ContainerRecommendation]?
        /// The CPU size of the Amazon ECS service recommendation option.
        public var cpu: Swift.Int?
        /// The memory size of the Amazon ECS service recommendation option.
        public var memory: Swift.Int?
        /// An array of objects that describe the projected utilization metrics of the Amazon ECS service recommendation option.
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]?
        /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// Describes the savings opportunity for Amazon ECS service recommendations or for the recommendation option. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts?

        public init(
            containerRecommendations: [ComputeOptimizerClientTypes.ContainerRecommendation]? = nil,
            cpu: Swift.Int? = nil,
            memory: Swift.Int? = nil,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric]? = nil,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.containerRecommendations = containerRecommendations
            self.cpu = cpu
            self.memory = memory
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the utilization metric of an Amazon ECS service. To determine the performance difference between your current Amazon ECS service and the recommended option, compare the utilization metric data of your service against its projected utilization metric data.
    public struct ECSServiceUtilizationMetric: Swift.Sendable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Cpu â€” The amount of CPU capacity that's used in the service.
        ///
        /// * Memory â€” The amount of memory that's used in the service.
        public var name: ComputeOptimizerClientTypes.ECSServiceMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.ECSServiceMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.ECSServiceMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Amazon ECS service recommendation.
    public struct ECSServiceRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the Amazon ECS service.
        public var accountId: Swift.String?
        /// The risk of the current Amazon ECS service not meeting the performance needs of its workloads. The higher the risk, the more likely the current service can't meet the performance requirements of its workload.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// The configuration of the current Amazon ECS service.
        public var currentServiceConfiguration: ComputeOptimizerClientTypes.ServiceConfiguration?
        /// Describes the effective recommendation preferences for Amazon ECS services.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences?
        /// The finding classification of an Amazon ECS service. Findings for Amazon ECS services include:
        ///
        /// * Underprovisioned â€” When Compute Optimizer detects that thereâ€™s not enough memory or CPU, an Amazon ECS service is considered under-provisioned. An under-provisioned service might result in poor application performance.
        ///
        /// * Overprovisioned â€” When Compute Optimizer detects that thereâ€™s excessive memory or CPU, an Amazon ECS service is considered over-provisioned. An over-provisioned service might result in additional infrastructure costs.
        ///
        /// * Optimized â€” When both the CPU and memory of your Amazon ECS service meet the performance requirements of your workload, the service is considered optimized.
        public var finding: ComputeOptimizerClientTypes.ECSServiceRecommendationFinding?
        /// The reason for the finding classification of an Amazon ECS service. Finding reason codes for Amazon ECS services include:
        ///
        /// * CPUUnderprovisioned â€” The service CPU configuration can be sized up to enhance the performance of your workload. This is identified by analyzing the CPUUtilization metric of the current service during the look-back period.
        ///
        /// * CPUOverprovisioned â€” The service CPU configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the CPUUtilization metric of the current service during the look-back period.
        ///
        /// * MemoryUnderprovisioned â€” The service memory configuration can be sized up to enhance the performance of your workload. This is identified by analyzing the MemoryUtilization metric of the current service during the look-back period.
        ///
        /// * MemoryOverprovisioned â€” The service memory configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the MemoryUtilization metric of the current service during the look-back period.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]?
        /// The timestamp of when the Amazon ECS service recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The launch type the Amazon ECS service is using. Compute Optimizer only supports the Fargate launch type.
        public var launchType: ComputeOptimizerClientTypes.ECSServiceLaunchType?
        /// The number of days the Amazon ECS service utilization metrics were analyzed.
        public var lookbackPeriodInDays: Swift.Double
        /// The Amazon Resource Name (ARN) of the current Amazon ECS service. The following is the format of the ARN: arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name
        public var serviceArn: Swift.String?
        /// An array of objects that describe the recommendation options for the Amazon ECS service.
        public var serviceRecommendationOptions: [ComputeOptimizerClientTypes.ECSServiceRecommendationOption]?
        /// A list of tags assigned to your Amazon ECS service recommendations.
        public var tags: [ComputeOptimizerClientTypes.Tag]?
        /// An array of objects that describe the utilization metrics of the Amazon ECS service.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]?

        public init(
            accountId: Swift.String? = nil,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            currentServiceConfiguration: ComputeOptimizerClientTypes.ServiceConfiguration? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.ECSServiceRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode]? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            launchType: ComputeOptimizerClientTypes.ECSServiceLaunchType? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            serviceArn: Swift.String? = nil,
            serviceRecommendationOptions: [ComputeOptimizerClientTypes.ECSServiceRecommendationOption]? = nil,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.ECSServiceUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentPerformanceRisk = currentPerformanceRisk
            self.currentServiceConfiguration = currentServiceConfiguration
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.launchType = launchType
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.serviceArn = serviceArn
            self.serviceRecommendationOptions = serviceRecommendationOptions
            self.tags = tags
            self.utilizationMetrics = utilizationMetrics
        }
    }
}

public struct GetECSServiceRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe the Amazon ECS service recommendations.
    public var ecsServiceRecommendations: [ComputeOptimizerClientTypes.ECSServiceRecommendation]?
    /// An array of objects that describe errors of the request.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to advance to the next page of Amazon ECS service recommendations.
    public var nextToken: Swift.String?

    public init(
        ecsServiceRecommendations: [ComputeOptimizerClientTypes.ECSServiceRecommendation]? = nil,
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ecsServiceRecommendations = ecsServiceRecommendations
        self.errors = errors
        self.nextToken = nextToken
    }
}

public struct GetEffectiveRecommendationPreferencesInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource for which to confirm effective recommendation preferences. Only EC2 instance and Auto Scaling group ARNs are currently supported.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetEffectiveRecommendationPreferencesOutput: Swift.Sendable {
    /// The status of the enhanced infrastructure metrics recommendation preference. Considers all applicable preferences that you might have set at the resource, account, and organization level. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied to recommendations. To validate whether the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the [GetAutoScalingGroupRecommendations] and [GetEC2InstanceRecommendations] actions. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    /// The provider of the external metrics recommendation preference. Considers all applicable preferences that you might have set at the account and organization level. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response. To validate whether the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the [GetEC2InstanceRecommendations] actions. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/external-metrics-ingestion.html) in the Compute Optimizer User Guide.
    public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
    /// The number of days the utilization metrics of the Amazon Web Services resource are analyzed. To validate that the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the GetAutoScalingGroupRecommendations or GetEC2InstanceRecommendations actions.
    public var lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference?
    /// The resource type values that are considered as candidates when generating rightsizing recommendations. This object resolves any wildcard expressions and returns the effective list of candidate resource type values. It also considers all applicable preferences that you set at the resource, account, and organization level. To validate that the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the GetAutoScalingGroupRecommendations or GetEC2InstanceRecommendations actions.
    public var preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]?
    /// The resourceâ€™s CPU and memory utilization preferences, such as threshold and headroom, that were used to generate rightsizing recommendations. It considers all applicable preferences that you set at the resource, account, and organization level. To validate that the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the GetAutoScalingGroupRecommendations or GetEC2InstanceRecommendations actions.
    public var utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]?

    public init(
        enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
        externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
        lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference? = nil,
        preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]? = nil,
        utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]? = nil
    )
    {
        self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        self.externalMetricsPreference = externalMetricsPreference
        self.lookBackPeriod = lookBackPeriod
        self.preferredResources = preferredResources
        self.utilizationPreferences = utilizationPreferences
    }
}

public struct GetEnrollmentStatusInput: Swift.Sendable {

    public init() { }
}

public struct GetEnrollmentStatusOutput: Swift.Sendable {
    /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
    public var lastUpdatedTimestamp: Foundation.Date?
    /// Confirms the enrollment status of member accounts of the organization, if the account is a management account of an organization.
    public var memberAccountsEnrolled: Swift.Bool
    /// The count of organization member accounts that are opted in to the service, if your account is an organization management account.
    public var numberOfMemberAccountsOptedIn: Swift.Int?
    /// The enrollment status of the account.
    public var status: ComputeOptimizerClientTypes.Status?
    /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
    public var statusReason: Swift.String?

    public init(
        lastUpdatedTimestamp: Foundation.Date? = nil,
        memberAccountsEnrolled: Swift.Bool = false,
        numberOfMemberAccountsOptedIn: Swift.Int? = nil,
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.memberAccountsEnrolled = memberAccountsEnrolled
        self.numberOfMemberAccountsOptedIn = numberOfMemberAccountsOptedIn
        self.status = status
        self.statusReason = statusReason
    }
}

extension ComputeOptimizerClientTypes {

    public enum EnrollmentFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EnrollmentFilterName] {
            return [
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a filter that returns a more specific list of account enrollment statuses. Use this filter with the [GetEnrollmentStatusesForOrganization] action.
    public struct EnrollmentFilter: Swift.Sendable {
        /// The name of the filter. Specify Status to return accounts with a specific enrollment status (for example, Active).
        public var name: ComputeOptimizerClientTypes.EnrollmentFilterName?
        /// The value of the filter. The valid values are Active, Inactive, Pending, and Failed.
        public var values: [Swift.String]?

        public init(
            name: ComputeOptimizerClientTypes.EnrollmentFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct GetEnrollmentStatusesForOrganizationInput: Swift.Sendable {
    /// An array of objects to specify a filter that returns a more specific list of account enrollment statuses.
    public var filters: [ComputeOptimizerClientTypes.EnrollmentFilter]?
    /// The maximum number of account enrollment statuses to return with a single request. You can specify up to 100 statuses to return with each request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of account enrollment statuses.
    public var nextToken: Swift.String?

    public init(
        filters: [ComputeOptimizerClientTypes.EnrollmentFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetEnrollmentStatusesForOrganizationOutput: Swift.Sendable {
    /// An array of objects that describe the enrollment statuses of organization member accounts.
    public var accountEnrollmentStatuses: [ComputeOptimizerClientTypes.AccountEnrollmentStatus]?
    /// The token to use to advance to the next page of account enrollment statuses. This value is null when there are no more pages of account enrollment statuses to return.
    public var nextToken: Swift.String?

    public init(
        accountEnrollmentStatuses: [ComputeOptimizerClientTypes.AccountEnrollmentStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountEnrollmentStatuses = accountEnrollmentStatuses
        self.nextToken = nextToken
    }
}

public struct GetLambdaFunctionRecommendationsInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return function recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of function recommendations.
    public var filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// The Amazon Resource Name (ARN) of the functions for which to return recommendations. You can specify a qualified or unqualified ARN. If you specify an unqualified ARN without a function version suffix, Compute Optimizer will return recommendations for the latest ($LATEST) version of the function. If you specify a qualified ARN with a version suffix, Compute Optimizer will return recommendations for the specified function version. For more information about using function versions, see [Using versions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using) in the Lambda Developer Guide.
    public var functionArns: [Swift.String]?
    /// The maximum number of function recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of function recommendations.
    public var nextToken: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        functionArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.functionArns = functionArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaSavingsEstimationModeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case costExplorerRightsizing
        case costOptimizationHub
        case publicPricing
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaSavingsEstimationModeSource] {
            return [
                .costExplorerRightsizing,
                .costOptimizationHub,
                .publicPricing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .costExplorerRightsizing: return "CostExplorerRightsizing"
            case .costOptimizationHub: return "CostOptimizationHub"
            case .publicPricing: return "PublicPricing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings estimation used for calculating savings opportunity for Lambda functions.
    public struct LambdaSavingsEstimationMode: Swift.Sendable {
        /// Describes the source for calculation of savings opportunity for Lambda functions.
        public var source: ComputeOptimizerClientTypes.LambdaSavingsEstimationModeSource?

        public init(
            source: ComputeOptimizerClientTypes.LambdaSavingsEstimationModeSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective recommendation preferences for Lambda functions.
    public struct LambdaEffectiveRecommendationPreferences: Swift.Sendable {
        /// Describes the savings estimation mode applied for calculating savings opportunity for Lambda functions.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.LambdaSavingsEstimationMode?

        public init(
            savingsEstimationMode: ComputeOptimizerClientTypes.LambdaSavingsEstimationMode? = nil
        )
        {
            self.savingsEstimationMode = savingsEstimationMode
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionRecommendationFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notOptimized
        case optimized
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFinding] {
            return [
                .notOptimized,
                .optimized,
                .unavailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .unavailable: return "Unavailable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionRecommendationFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inconclusive
        case insufficientData
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFindingReasonCode] {
            return [
                .inconclusive,
                .insufficientData,
                .memoryOverProvisioned,
                .memoryUnderProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inconclusive: return "Inconclusive"
            case .insufficientData: return "InsufficientData"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionMemoryMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duration
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricName] {
            return [
                .duration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionMemoryMetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case expected
        case lowerBound
        case upperBound
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricStatistic] {
            return [
                .expected,
                .lowerBound,
                .upperBound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .expected: return "Expected"
            case .lowerBound: return "LowerBound"
            case .upperBound: return "UpperBound"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a projected utilization metric of an Lambda function recommendation option.
    public struct LambdaFunctionMemoryProjectedMetric: Swift.Sendable {
        /// The name of the projected utilization metric.
        public var name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName?
        /// The statistic of the projected utilization metric.
        public var statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic?
        /// The values of the projected utilization metrics.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the estimated monthly savings possible for Lambda functions by adopting Compute Optimizer recommendations. This is based on Lambda functions pricing after applying Savings Plans discounts.
    public struct LambdaEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Lambda functions recommendations after applying Savings Plans discounts. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
    public struct LambdaSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// The estimated monthly savings possible by adopting Compute Optimizerâ€™s Lambda function recommendations. This includes any applicable Savings Plans discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizerâ€™s Lambda function recommendations. This includes any applicable Savings Plans discounts.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation option for an Lambda function.
    public struct LambdaFunctionMemoryRecommendationOption: Swift.Sendable {
        /// The memory size, in MB, of the function recommendation option.
        public var memorySize: Swift.Int
        /// An array of objects that describe the projected utilization metrics of the function recommendation option.
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]?
        /// The rank of the function recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// An object that describes the savings opportunity for the Lambda function recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An object that describes the savings opportunity for the Lambda recommendation option which includes Saving Plans discounts. Savings opportunity includes the estimated monthly savings and percentage.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts?

        public init(
            memorySize: Swift.Int = 0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.memorySize = memorySize
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duration
        case memory
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricName] {
            return [
                .duration,
                .memory
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case .memory: return "Memory"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LambdaFunctionMetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricStatistic] {
            return [
                .average,
                .maximum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a utilization metric of an Lambda function.
    public struct LambdaFunctionUtilizationMetric: Swift.Sendable {
        /// The name of the utilization metric. The following utilization metrics are available:
        ///
        /// * Duration - The amount of time that your function code spends processing an event.
        ///
        /// * Memory - The amount of memory used per invocation.
        public var name: ComputeOptimizerClientTypes.LambdaFunctionMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.LambdaFunctionMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Lambda function recommendation.
    public struct LambdaFunctionRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the function.
        public var accountId: Swift.String?
        /// The amount of memory, in MB, that's allocated to the current function.
        public var currentMemorySize: Swift.Int
        /// The risk of the current Lambda function not meeting the performance needs of its workloads. The higher the risk, the more likely the current Lambda function requires more memory.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// Describes the effective recommendation preferences for Lambda functions.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences?
        /// The finding classification of the function. Findings for functions include:
        ///
        /// * Optimized â€” The function is correctly provisioned to run your workload based on its current configuration and its utilization history. This finding classification does not include finding reason codes.
        ///
        /// * NotOptimized â€” The function is performing at a higher level (over-provisioned) or at a lower level (under-provisioned) than required for your workload because its current configuration is not optimal. Over-provisioned resources might lead to unnecessary infrastructure cost, and under-provisioned resources might lead to poor application performance. This finding classification can include the MemoryUnderprovisioned and MemoryUnderprovisioned finding reason codes.
        ///
        /// * Unavailable â€” Compute Optimizer was unable to generate a recommendation for the function. This could be because the function has not accumulated sufficient metric data, or the function does not qualify for a recommendation. This finding classification can include the InsufficientData and Inconclusive finding reason codes. Functions with a finding of unavailable are not returned unless you specify the filter parameter with a value of Unavailable in your GetLambdaFunctionRecommendations request.
        public var finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding?
        /// The reason for the finding classification of the function. Functions that have a finding classification of Optimized don't have a finding reason code. Finding reason codes for functions include:
        ///
        /// * MemoryOverprovisioned â€” The function is over-provisioned when its memory configuration can be sized down while still meeting the performance requirements of your workload. An over-provisioned function might lead to unnecessary infrastructure cost. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * MemoryUnderprovisioned â€” The function is under-provisioned when its memory configuration doesn't meet the performance requirements of the workload. An under-provisioned function might lead to poor application performance. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * InsufficientData â€” The function does not have sufficient metric data for Compute Optimizer to generate a recommendation. For more information, see the [Supported resources and requirements](https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html) in the Compute Optimizer User Guide. This finding reason code is part of the Unavailable finding classification.
        ///
        /// * Inconclusive â€” The function does not qualify for a recommendation because Compute Optimizer cannot generate a recommendation with a high degree of confidence. This finding reason code is part of the Unavailable finding classification.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]?
        /// The Amazon Resource Name (ARN) of the current function.
        public var functionArn: Swift.String?
        /// The version number of the current function.
        public var functionVersion: Swift.String?
        /// The timestamp of when the function recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The number of days for which utilization metrics were analyzed for the function.
        public var lookbackPeriodInDays: Swift.Double
        /// An array of objects that describe the memory configuration recommendation options for the function.
        public var memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]?
        /// The number of times your function code was applied during the look-back period.
        public var numberOfInvocations: Swift.Int
        /// A list of tags assigned to your Lambda function recommendations.
        public var tags: [ComputeOptimizerClientTypes.Tag]?
        /// An array of objects that describe the utilization metrics of the function.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]?

        public init(
            accountId: Swift.String? = nil,
            currentMemorySize: Swift.Int = 0,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences? = nil,
            finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil,
            functionArn: Swift.String? = nil,
            functionVersion: Swift.String? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil,
            numberOfInvocations: Swift.Int = 0,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentMemorySize = currentMemorySize
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.functionArn = functionArn
            self.functionVersion = functionVersion
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.memorySizeRecommendationOptions = memorySizeRecommendationOptions
            self.numberOfInvocations = numberOfInvocations
            self.tags = tags
            self.utilizationMetrics = utilizationMetrics
        }
    }
}

public struct GetLambdaFunctionRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe function recommendations.
    public var lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]?
    /// The token to use to advance to the next page of function recommendations. This value is null when there are no more pages of function recommendations to return.
    public var nextToken: Swift.String?

    public init(
        lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lambdaFunctionRecommendations = lambdaFunctionRecommendations
        self.nextToken = nextToken
    }
}

public struct GetLicenseRecommendationsInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return license recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return license recommendations. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of license recommendations.
    public var filters: [ComputeOptimizerClientTypes.LicenseRecommendationFilter]?
    /// The maximum number of license recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of license recommendations.
    public var nextToken: Swift.String?
    /// The ARN that identifies the Amazon EC2 instance. The following is the format of the ARN: arn:aws:ec2:region:aws_account_id:instance/instance-id
    public var resourceArns: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.LicenseRecommendationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArns = resourceArns
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseEdition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enterprise
        case free
        case noLicenseEditionFound
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseEdition] {
            return [
                .enterprise,
                .free,
                .noLicenseEditionFound,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enterprise: return "Enterprise"
            case .free: return "Free"
            case .noLicenseEditionFound: return "NoLicenseEditionFound"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseModel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bringYourOwnLicense
        case licenseIncluded
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseModel] {
            return [
                .bringYourOwnLicense,
                .licenseIncluded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bringYourOwnLicense: return "BringYourOwnLicense"
            case .licenseIncluded: return "LicenseIncluded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sqlserver
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseName] {
            return [
                .sqlserver
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sqlserver: return "SQLServer"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum MetricSourceProvider: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudwatchappinsights
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricSourceProvider] {
            return [
                .cloudwatchappinsights
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchappinsights: return "CloudWatchApplicationInsights"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The list of metric sources required to generate recommendations for commercial software licenses.
    public struct MetricSource: Swift.Sendable {
        /// The name of the metric source provider.
        public var provider: ComputeOptimizerClientTypes.MetricSourceProvider?
        /// The ARN of the metric source provider.
        public var providerArn: Swift.String?

        public init(
            provider: ComputeOptimizerClientTypes.MetricSourceProvider? = nil,
            providerArn: Swift.String? = nil
        )
        {
            self.provider = provider
            self.providerArn = providerArn
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the configuration of a license for an Amazon EC2 instance.
    public struct LicenseConfiguration: Swift.Sendable {
        /// The instance type used in the license.
        public var instanceType: Swift.String?
        /// The edition of the license for the application that runs on the instance.
        public var licenseEdition: ComputeOptimizerClientTypes.LicenseEdition?
        /// The license type associated with the instance.
        public var licenseModel: ComputeOptimizerClientTypes.LicenseModel?
        /// The name of the license for the application that runs on the instance.
        public var licenseName: ComputeOptimizerClientTypes.LicenseName?
        /// The version of the license for the application that runs on the instance.
        public var licenseVersion: Swift.String?
        /// The list of metric sources required to generate recommendations for commercial software licenses.
        public var metricsSource: [ComputeOptimizerClientTypes.MetricSource]?
        /// The current number of cores associated with the instance.
        public var numberOfCores: Swift.Int
        /// The operating system of the instance.
        public var operatingSystem: Swift.String?

        public init(
            instanceType: Swift.String? = nil,
            licenseEdition: ComputeOptimizerClientTypes.LicenseEdition? = nil,
            licenseModel: ComputeOptimizerClientTypes.LicenseModel? = nil,
            licenseName: ComputeOptimizerClientTypes.LicenseName? = nil,
            licenseVersion: Swift.String? = nil,
            metricsSource: [ComputeOptimizerClientTypes.MetricSource]? = nil,
            numberOfCores: Swift.Int = 0,
            operatingSystem: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.licenseEdition = licenseEdition
            self.licenseModel = licenseModel
            self.licenseName = licenseName
            self.licenseVersion = licenseVersion
            self.metricsSource = metricsSource
            self.numberOfCores = numberOfCores
            self.operatingSystem = operatingSystem
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insufficientMetrics
        case notOptimized
        case optimized
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseFinding] {
            return [
                .insufficientMetrics,
                .notOptimized,
                .optimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insufficientMetrics: return "InsufficientMetrics"
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum LicenseFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cwAppInsightsDisabled
        case cwAppInsightsError
        case licenseOverProvisioned
        case optimized
        case sdkUnknown(Swift.String)

        public static var allCases: [LicenseFindingReasonCode] {
            return [
                .cwAppInsightsDisabled,
                .cwAppInsightsError,
                .licenseOverProvisioned,
                .optimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cwAppInsightsDisabled: return "InvalidCloudWatchApplicationInsightsSetup"
            case .cwAppInsightsError: return "CloudWatchApplicationInsightsError"
            case .licenseOverProvisioned: return "LicenseOverprovisioned"
            case .optimized: return "Optimized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the recommendation options for licenses.
    public struct LicenseRecommendationOption: Swift.Sendable {
        /// The recommended edition of the license for the application that runs on the instance.
        public var licenseEdition: ComputeOptimizerClientTypes.LicenseEdition?
        /// The recommended license type associated with the instance.
        public var licenseModel: ComputeOptimizerClientTypes.LicenseModel?
        /// The operating system of a license recommendation option.
        public var operatingSystem: Swift.String?
        /// The rank of the license recommendation option. The top recommendation option is ranked as 1.
        public var rank: Swift.Int
        /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?

        public init(
            licenseEdition: ComputeOptimizerClientTypes.LicenseEdition? = nil,
            licenseModel: ComputeOptimizerClientTypes.LicenseModel? = nil,
            operatingSystem: Swift.String? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil
        )
        {
            self.licenseEdition = licenseEdition
            self.licenseModel = licenseModel
            self.operatingSystem = operatingSystem
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a license recommendation for an EC2 instance.
    public struct LicenseRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the license.
        public var accountId: Swift.String?
        /// An object that describes the current configuration of an instance that runs on a license.
        public var currentLicenseConfiguration: ComputeOptimizerClientTypes.LicenseConfiguration?
        /// The finding classification for an instance that runs on a license. Findings include:
        ///
        /// * InsufficentMetrics â€” When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions.
        ///
        /// * NotOptimized â€” When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.
        ///
        /// * Optimized â€” When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload.
        public var finding: ComputeOptimizerClientTypes.LicenseFinding?
        /// The reason for the finding classification for an instance that runs on a license. Finding reason codes include:
        ///
        /// * Optimized â€” All specifications of your license meet the performance requirements of your workload.
        ///
        /// * LicenseOverprovisioned â€” A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.
        ///
        /// * InvalidCloudwatchApplicationInsights â€” CloudWatch Application Insights isn't configured properly.
        ///
        /// * CloudwatchApplicationInsightsError â€” There is a CloudWatch Application Insights error.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.LicenseFindingReasonCode]?
        /// The timestamp of when the license recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// An array of objects that describe the license recommendation options.
        public var licenseRecommendationOptions: [ComputeOptimizerClientTypes.LicenseRecommendationOption]?
        /// The number of days for which utilization metrics were analyzed for an instance that runs on a license.
        public var lookbackPeriodInDays: Swift.Double
        /// The ARN that identifies the Amazon EC2 instance.
        public var resourceArn: Swift.String?
        /// A list of tags assigned to an EC2 instance.
        public var tags: [ComputeOptimizerClientTypes.Tag]?

        public init(
            accountId: Swift.String? = nil,
            currentLicenseConfiguration: ComputeOptimizerClientTypes.LicenseConfiguration? = nil,
            finding: ComputeOptimizerClientTypes.LicenseFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.LicenseFindingReasonCode]? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            licenseRecommendationOptions: [ComputeOptimizerClientTypes.LicenseRecommendationOption]? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            resourceArn: Swift.String? = nil,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil
        )
        {
            self.accountId = accountId
            self.currentLicenseConfiguration = currentLicenseConfiguration
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.licenseRecommendationOptions = licenseRecommendationOptions
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.resourceArn = resourceArn
            self.tags = tags
        }
    }
}

public struct GetLicenseRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe errors of the request.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// An array of objects that describe license recommendations.
    public var licenseRecommendations: [ComputeOptimizerClientTypes.LicenseRecommendation]?
    /// The token to use to advance to the next page of license recommendations.
    public var nextToken: Swift.String?

    public init(
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        licenseRecommendations: [ComputeOptimizerClientTypes.LicenseRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.errors = errors
        self.licenseRecommendations = licenseRecommendations
        self.nextToken = nextToken
    }
}

public struct GetRDSDatabaseRecommendationProjectedMetricsInput: Swift.Sendable {
    /// The timestamp of the last projected metrics data point to return.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The granularity, in seconds, of the projected metrics data points.
    /// This member is required.
    public var period: Swift.Int?
    /// Describes the recommendation preferences to return in the response of a [GetAutoScalingGroupRecommendations], [GetEC2InstanceRecommendations], [GetEC2RecommendationProjectedMetrics], [GetRDSDatabaseRecommendations], and [GetRDSDatabaseRecommendationProjectedMetrics] request.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// The ARN that identifies the Amazon RDS. The following is the format of the ARN: arn:aws:rds:{region}:{accountId}:db:{resourceName}
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The timestamp of the first projected metrics data point to return.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic of the projected metrics.
    /// This member is required.
    public var stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init(
        endTime: Foundation.Date? = nil,
        period: Swift.Int? = 0,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        resourceArn: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.period = period
        self.recommendationPreferences = recommendationPreferences
        self.resourceArn = resourceArn
        self.startTime = startTime
        self.stat = stat
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSDBMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpu
        case databaseConnections
        case ebsVolumeReadIops
        case ebsVolumeReadThroughput
        case ebsVolumeStorageSpaceUtilization
        case ebsVolumeWriteIops
        case ebsVolumeWriteThroughput
        case memory
        case networkReceiveThroughput
        case networkTransmitThroughput
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSDBMetricName] {
            return [
                .cpu,
                .databaseConnections,
                .ebsVolumeReadIops,
                .ebsVolumeReadThroughput,
                .ebsVolumeStorageSpaceUtilization,
                .ebsVolumeWriteIops,
                .ebsVolumeWriteThroughput,
                .memory,
                .networkReceiveThroughput,
                .networkTransmitThroughput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "CPU"
            case .databaseConnections: return "DatabaseConnections"
            case .ebsVolumeReadIops: return "EBSVolumeReadIOPS"
            case .ebsVolumeReadThroughput: return "EBSVolumeReadThroughput"
            case .ebsVolumeStorageSpaceUtilization: return "EBSVolumeStorageSpaceUtilization"
            case .ebsVolumeWriteIops: return "EBSVolumeWriteIOPS"
            case .ebsVolumeWriteThroughput: return "EBSVolumeWriteThroughput"
            case .memory: return "Memory"
            case .networkReceiveThroughput: return "NetworkReceiveThroughput"
            case .networkTransmitThroughput: return "NetworkTransmitThroughput"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the projected metrics of an Amazon RDS recommendation option. To determine the performance difference between your current Amazon RDS and the recommended option, compare the metric data of your service against its projected metric data.
    public struct RDSDatabaseProjectedMetric: Swift.Sendable {
        /// The name of the projected metric.
        public var name: ComputeOptimizerClientTypes.RDSDBMetricName?
        /// The timestamps of the projected metric.
        public var timestamps: [Foundation.Date]?
        /// The values for the projected metric.
        public var values: [Swift.Double]?

        public init(
            name: ComputeOptimizerClientTypes.RDSDBMetricName? = nil,
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.name = name
            self.timestamps = timestamps
            self.values = values
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the projected metrics of an Amazon RDS recommendation option. To determine the performance difference between your current Amazon RDS and the recommended option, compare the metric data of your service against its projected metric data.
    public struct RDSDatabaseRecommendedOptionProjectedMetric: Swift.Sendable {
        /// An array of objects that describe the projected metric.
        public var projectedMetrics: [ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric]?
        /// The rank identifier of the RDS instance recommendation option.
        public var rank: Swift.Int
        /// The recommended DB instance class for the Amazon RDS.
        public var recommendedDBInstanceClass: Swift.String?

        public init(
            projectedMetrics: [ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            recommendedDBInstanceClass: Swift.String? = nil
        )
        {
            self.projectedMetrics = projectedMetrics
            self.rank = rank
            self.recommendedDBInstanceClass = recommendedDBInstanceClass
        }
    }
}

public struct GetRDSDatabaseRecommendationProjectedMetricsOutput: Swift.Sendable {
    /// An array of objects that describes the projected metrics.
    public var recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric]?

    public init(
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

public struct GetRDSDatabaseRecommendationsInput: Swift.Sendable {
    /// Return the Amazon RDS recommendations to the specified Amazon Web Services account IDs. If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon RDS recommendations to specific member accounts. You can only specify one account ID per request.
    public var accountIds: [Swift.String]?
    /// An array of objects to specify a filter that returns a more specific list of Amazon RDS recommendations.
    public var filters: [ComputeOptimizerClientTypes.RDSDBRecommendationFilter]?
    /// The maximum number of Amazon RDS recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of Amazon RDS recommendations.
    public var nextToken: Swift.String?
    /// Describes the recommendation preferences to return in the response of a [GetAutoScalingGroupRecommendations], [GetEC2InstanceRecommendations], [GetEC2RecommendationProjectedMetrics], [GetRDSDatabaseRecommendations], and [GetRDSDatabaseRecommendationProjectedMetrics] request.
    public var recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
    /// The ARN that identifies the Amazon RDS. The following is the format of the ARN: arn:aws:rds:{region}:{accountId}:db:{resourceName} The following is the format of a DB Cluster ARN: arn:aws:rds:{region}:{accountId}:cluster:{resourceName}
    public var resourceArns: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.RDSDBRecommendationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationPreferences = recommendationPreferences
        self.resourceArns = resourceArns
    }
}

extension ComputeOptimizerClientTypes {

    /// The configuration of the recommended RDS storage.
    public struct DBStorageConfiguration: Swift.Sendable {
        /// The size of the RDS storage in gigabytes (GB).
        public var allocatedStorage: Swift.Int
        /// The provisioned IOPs of the RDS storage.
        public var iops: Swift.Int?
        /// The maximum limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the RDS instance.
        public var maxAllocatedStorage: Swift.Int?
        /// The storage throughput of the RDS storage.
        public var storageThroughput: Swift.Int?
        /// The type of RDS storage.
        public var storageType: Swift.String?

        public init(
            allocatedStorage: Swift.Int = 0,
            iops: Swift.Int? = nil,
            maxAllocatedStorage: Swift.Int? = nil,
            storageThroughput: Swift.Int? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.iops = iops
            self.maxAllocatedStorage = maxAllocatedStorage
            self.storageThroughput = storageThroughput
            self.storageType = storageType
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSSavingsEstimationModeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case costExplorerRightsizing
        case costOptimizationHub
        case publicPricing
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSSavingsEstimationModeSource] {
            return [
                .costExplorerRightsizing,
                .costOptimizationHub,
                .publicPricing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .costExplorerRightsizing: return "CostExplorerRightsizing"
            case .costOptimizationHub: return "CostOptimizationHub"
            case .publicPricing: return "PublicPricing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings estimation mode used for calculating savings opportunity for Amazon RDS.
    public struct RDSSavingsEstimationMode: Swift.Sendable {
        /// Describes the source for calculating the savings opportunity for Amazon RDS.
        public var source: ComputeOptimizerClientTypes.RDSSavingsEstimationModeSource?

        public init(
            source: ComputeOptimizerClientTypes.RDSSavingsEstimationModeSource? = nil
        )
        {
            self.source = source
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the effective recommendation preferences for Amazon RDS.
    public struct RDSEffectiveRecommendationPreferences: Swift.Sendable {
        /// Describes the CPU vendor and architecture for Amazon RDS recommendations.
        public var cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]?
        /// Describes the activation status of the enhanced infrastructure metrics preference. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied to recommendations. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
        /// The number of days the utilization metrics of the Amazon RDS are analyzed.
        public var lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference?
        /// Describes the savings estimation mode preference applied for calculating savings opportunity for Amazon RDS.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.RDSSavingsEstimationMode?

        public init(
            cpuVendorArchitectures: [ComputeOptimizerClientTypes.CpuVendorArchitecture]? = nil,
            enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
            lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference? = nil,
            savingsEstimationMode: ComputeOptimizerClientTypes.RDSSavingsEstimationMode? = nil
        )
        {
            self.cpuVendorArchitectures = cpuVendorArchitectures
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.lookBackPeriod = lookBackPeriod
            self.savingsEstimationMode = savingsEstimationMode
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum Idle: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [Idle] {
            return [
                .false,
                .true
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSInstanceFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSInstanceFinding] {
            return [
                .optimized,
                .overProvisioned,
                .underProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSInstanceFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case ebsIopsOverProvisioned
        case ebsThroughputOverProvisioned
        case ebsThroughputUnderProvisioned
        case networkBandwidthOverProvisioned
        case networkBandwidthUnderProvisioned
        case newEngineVersionAvailable
        case newGenerationDbInstanceClassAvailable
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSInstanceFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .ebsIopsOverProvisioned,
                .ebsThroughputOverProvisioned,
                .ebsThroughputUnderProvisioned,
                .networkBandwidthOverProvisioned,
                .networkBandwidthUnderProvisioned,
                .newEngineVersionAvailable,
                .newGenerationDbInstanceClassAvailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .ebsIopsOverProvisioned: return "EBSIOPSOverprovisioned"
            case .ebsThroughputOverProvisioned: return "EBSThroughputOverprovisioned"
            case .ebsThroughputUnderProvisioned: return "EBSThroughputUnderprovisioned"
            case .networkBandwidthOverProvisioned: return "NetworkBandwidthOverprovisioned"
            case .networkBandwidthUnderProvisioned: return "NetworkBandwidthUnderprovisioned"
            case .newEngineVersionAvailable: return "NewEngineVersionAvailable"
            case .newGenerationDbInstanceClassAvailable: return "NewGenerationDBInstanceClassAvailable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSDBMetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSDBMetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the utilization metric of an Amazon RDS. To determine the performance difference between your current Amazon RDS and the recommended option, compare the utilization metric data of your service against its projected utilization metric data.
    public struct RDSDBUtilizationMetric: Swift.Sendable {
        /// The name of the utilization metric.
        public var name: ComputeOptimizerClientTypes.RDSDBMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see [Viewing resource recommendations](https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html) in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
        public var statistic: ComputeOptimizerClientTypes.RDSDBMetricStatistic?
        /// The value of the utilization metric.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.RDSDBMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.RDSDBMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the estimated monthly savings possible for Amazon RDS instances by adopting Compute Optimizer recommendations. This is based on Amazon RDS pricing after applying Savings Plans discounts.
    public struct RDSInstanceEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings for Amazon RDS instances.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Amazon RDS instance recommendations after applying Savings Plans discounts. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
    public struct RDSInstanceSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// The estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon RDS instance recommendations. This includes any applicable Savings Plans discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizerâ€™s Amazon RDS instance recommendations. This includes any applicable Savings Plans discounts.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the recommendation options for an Amazon RDS instance.
    public struct RDSDBInstanceRecommendationOption: Swift.Sendable {
        /// Describes the DB instance class recommendation option for your Amazon RDS instance.
        public var dbInstanceClass: Swift.String?
        /// The performance risk of the RDS instance recommendation option.
        public var performanceRisk: Swift.Double
        /// An array of objects that describe the projected utilization metrics of the RDS instance recommendation option.
        public var projectedUtilizationMetrics: [ComputeOptimizerClientTypes.RDSDBUtilizationMetric]?
        /// The rank identifier of the RDS instance recommendation option.
        public var rank: Swift.Int
        /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// Describes the savings opportunity for Amazon RDS recommendations or for the recommendation option. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts?

        public init(
            dbInstanceClass: Swift.String? = nil,
            performanceRisk: Swift.Double = 0.0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.RDSDBUtilizationMetric]? = nil,
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts? = nil
        )
        {
            self.dbInstanceClass = dbInstanceClass
            self.performanceRisk = performanceRisk
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSStorageFinding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSStorageFinding] {
            return [
                .optimized,
                .overProvisioned,
                .underProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum RDSStorageFindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ebsVolumeAllocatedStorageUnderProvisioned
        case ebsVolumeIopsOverProvisioned
        case ebsVolumeThroughputOverProvisioned
        case ebsVolumeThroughputUnderProvisioned
        case newGenerationStorageTypeAvailable
        case sdkUnknown(Swift.String)

        public static var allCases: [RDSStorageFindingReasonCode] {
            return [
                .ebsVolumeAllocatedStorageUnderProvisioned,
                .ebsVolumeIopsOverProvisioned,
                .ebsVolumeThroughputOverProvisioned,
                .ebsVolumeThroughputUnderProvisioned,
                .newGenerationStorageTypeAvailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ebsVolumeAllocatedStorageUnderProvisioned: return "EBSVolumeAllocatedStorageUnderprovisioned"
            case .ebsVolumeIopsOverProvisioned: return "EBSVolumeIOPSOverprovisioned"
            case .ebsVolumeThroughputOverProvisioned: return "EBSVolumeThroughputOverprovisioned"
            case .ebsVolumeThroughputUnderProvisioned: return "EBSVolumeThroughputUnderprovisioned"
            case .newGenerationStorageTypeAvailable: return "NewGenerationStorageTypeAvailable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the estimated monthly savings possible for Amazon RDS storage by adopting Compute Optimizer recommendations. This is based on Amazon RDS pricing after applying Savings Plans discounts.
    public struct RDSStorageEstimatedMonthlySavings: Swift.Sendable {
        /// The currency of the estimated monthly savings.
        public var currency: ComputeOptimizerClientTypes.Currency?
        /// The value of the estimated monthly savings for Amazon RDS storage.
        public var value: Swift.Double

        public init(
            currency: ComputeOptimizerClientTypes.Currency? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.currency = currency
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the savings opportunity for Amazon RDS storage recommendations after applying Savings Plans discounts. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
    public struct RDSStorageSavingsOpportunityAfterDiscounts: Swift.Sendable {
        /// The estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon RDS storage recommendations. This includes any applicable Savings Plans discounts.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizerâ€™s Amazon RDS storage recommendations. This includes any applicable Savings Plans discounts.
        public var savingsOpportunityPercentage: Swift.Double

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings? = nil,
            savingsOpportunityPercentage: Swift.Double = 0.0
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the recommendation options for Amazon RDS storage.
    public struct RDSDBStorageRecommendationOption: Swift.Sendable {
        /// The rank identifier of the RDS storage recommendation option.
        public var rank: Swift.Int
        /// Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource. Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation. Savings opportunity data requires that you opt in to Cost Explorer, as well as activate Receive Amazon EC2 resource recommendations in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see [Enabling Cost Explorer](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html) and [Optimizing your cost with Rightsizing Recommendations](https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html) in the Cost Management User Guide.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// Describes the savings opportunity for Amazon RDS storage recommendations or for the recommendation option. Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.
        public var savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts?
        /// The recommended storage configuration.
        public var storageConfiguration: ComputeOptimizerClientTypes.DBStorageConfiguration?

        public init(
            rank: Swift.Int = 0,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            savingsOpportunityAfterDiscounts: ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts? = nil,
            storageConfiguration: ComputeOptimizerClientTypes.DBStorageConfiguration? = nil
        )
        {
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
            self.savingsOpportunityAfterDiscounts = savingsOpportunityAfterDiscounts
            self.storageConfiguration = storageConfiguration
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes an Amazon RDS recommendation.
    public struct RDSDBRecommendation: Swift.Sendable {
        /// The Amazon Web Services account ID of the Amazon RDS.
        public var accountId: Swift.String?
        /// The DB instance class of the current RDS instance.
        public var currentDBInstanceClass: Swift.String?
        /// The configuration of the current RDS storage.
        public var currentStorageConfiguration: ComputeOptimizerClientTypes.DBStorageConfiguration?
        /// Describes the effective recommendation preferences for Amazon RDS.
        public var effectiveRecommendationPreferences: ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences?
        /// The engine of the RDS instance.
        public var engine: Swift.String?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// This indicates if the RDS instance is idle or not.
        public var idle: ComputeOptimizerClientTypes.Idle?
        /// The finding classification of an Amazon RDS instance. Findings for Amazon RDS instance include:
        ///
        /// * Underprovisioned â€” When Compute Optimizer detects that thereâ€™s not enough resource specifications, an Amazon RDS is considered under-provisioned.
        ///
        /// * Overprovisioned â€” When Compute Optimizer detects that thereâ€™s excessive resource specifications, an Amazon RDS is considered over-provisioned.
        ///
        /// * Optimized â€” When the specifications of your Amazon RDS instance meet the performance requirements of your workload, the service is considered optimized.
        public var instanceFinding: ComputeOptimizerClientTypes.RDSInstanceFinding?
        /// The reason for the finding classification of an Amazon RDS instance.
        public var instanceFindingReasonCodes: [ComputeOptimizerClientTypes.RDSInstanceFindingReasonCode]?
        /// An array of objects that describe the recommendation options for the Amazon RDS instance.
        public var instanceRecommendationOptions: [ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption]?
        /// The timestamp of when the Amazon RDS recommendation was last generated.
        public var lastRefreshTimestamp: Foundation.Date?
        /// The number of days the Amazon RDS utilization metrics were analyzed.
        public var lookbackPeriodInDays: Swift.Double
        /// The ARN of the current Amazon RDS. The following is the format of the ARN: arn:aws:rds:{region}:{accountId}:db:{resourceName}
        public var resourceArn: Swift.String?
        /// The finding classification of Amazon RDS storage. Findings for Amazon RDS instance include:
        ///
        /// * Underprovisioned â€” When Compute Optimizer detects that thereâ€™s not enough storage, an Amazon RDS is considered under-provisioned.
        ///
        /// * Overprovisioned â€” When Compute Optimizer detects that thereâ€™s excessive storage, an Amazon RDS is considered over-provisioned.
        ///
        /// * Optimized â€” When the storage of your Amazon RDS meet the performance requirements of your workload, the service is considered optimized.
        public var storageFinding: ComputeOptimizerClientTypes.RDSStorageFinding?
        /// The reason for the finding classification of Amazon RDS storage.
        public var storageFindingReasonCodes: [ComputeOptimizerClientTypes.RDSStorageFindingReasonCode]?
        /// An array of objects that describe the recommendation options for Amazon RDS storage.
        public var storageRecommendationOptions: [ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption]?
        /// A list of tags assigned to your Amazon RDS recommendations.
        public var tags: [ComputeOptimizerClientTypes.Tag]?
        /// An array of objects that describe the utilization metrics of the Amazon RDS.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.RDSDBUtilizationMetric]?

        public init(
            accountId: Swift.String? = nil,
            currentDBInstanceClass: Swift.String? = nil,
            currentStorageConfiguration: ComputeOptimizerClientTypes.DBStorageConfiguration? = nil,
            effectiveRecommendationPreferences: ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            idle: ComputeOptimizerClientTypes.Idle? = nil,
            instanceFinding: ComputeOptimizerClientTypes.RDSInstanceFinding? = nil,
            instanceFindingReasonCodes: [ComputeOptimizerClientTypes.RDSInstanceFindingReasonCode]? = nil,
            instanceRecommendationOptions: [ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption]? = nil,
            lastRefreshTimestamp: Foundation.Date? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            resourceArn: Swift.String? = nil,
            storageFinding: ComputeOptimizerClientTypes.RDSStorageFinding? = nil,
            storageFindingReasonCodes: [ComputeOptimizerClientTypes.RDSStorageFindingReasonCode]? = nil,
            storageRecommendationOptions: [ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption]? = nil,
            tags: [ComputeOptimizerClientTypes.Tag]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.RDSDBUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentDBInstanceClass = currentDBInstanceClass
            self.currentStorageConfiguration = currentStorageConfiguration
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.engine = engine
            self.engineVersion = engineVersion
            self.idle = idle
            self.instanceFinding = instanceFinding
            self.instanceFindingReasonCodes = instanceFindingReasonCodes
            self.instanceRecommendationOptions = instanceRecommendationOptions
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.resourceArn = resourceArn
            self.storageFinding = storageFinding
            self.storageFindingReasonCodes = storageFindingReasonCodes
            self.storageRecommendationOptions = storageRecommendationOptions
            self.tags = tags
            self.utilizationMetrics = utilizationMetrics
        }
    }
}

public struct GetRDSDatabaseRecommendationsOutput: Swift.Sendable {
    /// An array of objects that describe errors of the request.
    public var errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// The token to advance to the next page of Amazon RDS recommendations.
    public var nextToken: Swift.String?
    /// An array of objects that describe the Amazon RDS recommendations.
    public var rdsDBRecommendations: [ComputeOptimizerClientTypes.RDSDBRecommendation]?

    public init(
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil,
        rdsDBRecommendations: [ComputeOptimizerClientTypes.RDSDBRecommendation]? = nil
    )
    {
        self.errors = errors
        self.nextToken = nextToken
        self.rdsDBRecommendations = rdsDBRecommendations
    }
}

public struct GetRecommendationPreferencesInput: Swift.Sendable {
    /// The maximum number of recommendation preferences to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of recommendation preferences.
    public var nextToken: Swift.String?
    /// The target resource type of the recommendation preference for which to return preferences. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// An object that describes the scope of the recommendation preference to return. You can return recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var scope: ComputeOptimizerClientTypes.Scope?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceType = resourceType
        self.scope = scope
    }
}

extension ComputeOptimizerClientTypes {

    public enum SavingsEstimationMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afterDiscounts
        case beforeDiscounts
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsEstimationMode] {
            return [
                .afterDiscounts,
                .beforeDiscounts
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afterDiscounts: return "AfterDiscounts"
            case .beforeDiscounts: return "BeforeDiscounts"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes a recommendation preference.
    public struct RecommendationPreferencesDetail: Swift.Sendable {
        /// The status of the enhanced infrastructure metrics recommendation preference. When the recommendations page is refreshed, a status of Active confirms that the preference is applied to the recommendations, and a status of Inactive confirms that the preference isn't yet applied to recommendations. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
        /// An object that describes the external metrics recommendation preference. If the preference is applied in the latest recommendation refresh, an object with a valid source value appears in the response. If the preference isn't applied to the recommendations already, then this object doesn't appear in the response.
        public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
        /// The status of the inferred workload types recommendation preference. When the recommendations page is refreshed, a status of Active confirms that the preference is applied to the recommendations, and a status of Inactive confirms that the preference isn't yet applied to recommendations.
        public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
        /// The preference to control the number of days the utilization metrics of the Amazon Web Services resource are analyzed. If the preference isnâ€™t set, this object is null.
        public var lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference?
        /// The preference to control which resource type values are considered when generating rightsizing recommendations. This object resolves any wildcard expressions and returns the effective list of candidate resource type values. If the preference isnâ€™t set, this object is null.
        public var preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]?
        /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public var resourceType: ComputeOptimizerClientTypes.ResourceType?
        /// Describes the savings estimation mode used for calculating savings opportunity. Only the account manager or delegated administrator of your organization can activate this preference.
        public var savingsEstimationMode: ComputeOptimizerClientTypes.SavingsEstimationMode?
        /// An object that describes the scope of the recommendation preference. Recommendation preferences can be created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
        public var scope: ComputeOptimizerClientTypes.Scope?
        /// The preference to control the resourceâ€™s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. If the preference isnâ€™t set, this object is null. This preference is only available for the Amazon EC2 instance resource type.
        public var utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]?

        public init(
            enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
            externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
            inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil,
            lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference? = nil,
            preferredResources: [ComputeOptimizerClientTypes.EffectivePreferredResource]? = nil,
            resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
            savingsEstimationMode: ComputeOptimizerClientTypes.SavingsEstimationMode? = nil,
            scope: ComputeOptimizerClientTypes.Scope? = nil,
            utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]? = nil
        )
        {
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.externalMetricsPreference = externalMetricsPreference
            self.inferredWorkloadTypes = inferredWorkloadTypes
            self.lookBackPeriod = lookBackPeriod
            self.preferredResources = preferredResources
            self.resourceType = resourceType
            self.savingsEstimationMode = savingsEstimationMode
            self.scope = scope
            self.utilizationPreferences = utilizationPreferences
        }
    }
}

public struct GetRecommendationPreferencesOutput: Swift.Sendable {
    /// The token to use to advance to the next page of recommendation preferences. This value is null when there are no more pages of recommendation preferences to return.
    public var nextToken: Swift.String?
    /// An array of objects that describe recommendation preferences.
    public var recommendationPreferencesDetails: [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]?

    public init(
        nextToken: Swift.String? = nil,
        recommendationPreferencesDetails: [ComputeOptimizerClientTypes.RecommendationPreferencesDetail]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationPreferencesDetails = recommendationPreferencesDetails
    }
}

public struct GetRecommendationSummariesInput: Swift.Sendable {
    /// The ID of the Amazon Web Services account for which to return recommendation summaries. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return recommendation summaries. Only one account ID can be specified per request.
    public var accountIds: [Swift.String]?
    /// The maximum number of recommendation summaries to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token to advance to the next page of recommendation summaries.
    public var nextToken: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComputeOptimizerClientTypes {

    /// Describes the performance risk ratings for a given resource type. Resources with a high or medium rating are at risk of not meeting the performance needs of their workloads, while resources with a low rating are performing well in their workloads.
    public struct CurrentPerformanceRiskRatings: Swift.Sendable {
        /// A count of the applicable resource types with a high performance risk rating.
        public var high: Swift.Int
        /// A count of the applicable resource types with a low performance risk rating.
        public var low: Swift.Int
        /// A count of the applicable resource types with a medium performance risk rating.
        public var medium: Swift.Int
        /// A count of the applicable resource types with a very low performance risk rating.
        public var veryLow: Swift.Int

        public init(
            high: Swift.Int = 0,
            low: Swift.Int = 0,
            medium: Swift.Int = 0,
            veryLow: Swift.Int = 0
        )
        {
            self.high = high
            self.low = low
            self.medium = medium
            self.veryLow = veryLow
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The estimated monthly savings after you adjust the configurations of your instances running on the inferred workload types to the recommended configurations. If the inferredWorkloadTypes list contains multiple entries, then the savings are the sum of the monthly savings from instances that run the exact combination of the inferred workload types.
    public struct InferredWorkloadSaving: Swift.Sendable {
        /// An object that describes the estimated monthly savings amount possible by adopting Compute Optimizer recommendations for a given resource. This is based on the On-Demand instance pricing.
        public var estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings?
        /// The applications that might be running on the instance as inferred by Compute Optimizer. Compute Optimizer can infer if one of the following applications might be running on the instance:
        ///
        /// * AmazonEmr - Infers that Amazon EMR might be running on the instance.
        ///
        /// * ApacheCassandra - Infers that Apache Cassandra might be running on the instance.
        ///
        /// * ApacheHadoop - Infers that Apache Hadoop might be running on the instance.
        ///
        /// * Memcached - Infers that Memcached might be running on the instance.
        ///
        /// * NGINX - Infers that NGINX might be running on the instance.
        ///
        /// * PostgreSql - Infers that PostgreSQL might be running on the instance.
        ///
        /// * Redis - Infers that Redis might be running on the instance.
        ///
        /// * Kafka - Infers that Kafka might be running on the instance.
        ///
        /// * SQLServer - Infers that SQLServer might be running on the instance.
        public var inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]?

        public init(
            estimatedMonthlySavings: ComputeOptimizerClientTypes.EstimatedMonthlySavings? = nil,
            inferredWorkloadTypes: [ComputeOptimizerClientTypes.InferredWorkloadType]? = nil
        )
        {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.inferredWorkloadTypes = inferredWorkloadTypes
        }
    }
}

extension ComputeOptimizerClientTypes {

    public enum FindingReasonCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingReasonCode] {
            return [
                .memoryOverProvisioned,
                .memoryUnderProvisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// A summary of a finding reason code.
    public struct ReasonCodeSummary: Swift.Sendable {
        /// The name of the finding reason code.
        public var name: ComputeOptimizerClientTypes.FindingReasonCode?
        /// The value of the finding reason code summary.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.FindingReasonCode? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// The summary of a recommendation.
    public struct Summary: Swift.Sendable {
        /// The finding classification of the recommendation.
        public var name: ComputeOptimizerClientTypes.Finding?
        /// An array of objects that summarize a finding reason code.
        public var reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]?
        /// The value of the recommendation summary.
        public var value: Swift.Double

        public init(
            name: ComputeOptimizerClientTypes.Finding? = nil,
            reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.reasonCodeSummaries = reasonCodeSummaries
            self.value = value
        }
    }
}

extension ComputeOptimizerClientTypes {

    /// A summary of a recommendation.
    public struct RecommendationSummary: Swift.Sendable {
        /// The Amazon Web Services account ID of the recommendation summary.
        public var accountId: Swift.String?
        /// An object that describes the performance risk ratings for a given resource type.
        public var currentPerformanceRiskRatings: ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings?
        /// An array of objects that describes the estimated monthly saving amounts for the instances running on the specified inferredWorkloadTypes. The array contains the top five savings opportunites for the instances that run inferred workload types.
        public var inferredWorkloadSavings: [ComputeOptimizerClientTypes.InferredWorkloadSaving]?
        /// The resource type that the recommendation summary applies to.
        public var recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType?
        /// An object that describes the savings opportunity for a given resource type. Savings opportunity includes the estimated monthly savings amount and percentage.
        public var savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity?
        /// An array of objects that describe a recommendation summary.
        public var summaries: [ComputeOptimizerClientTypes.Summary]?

        public init(
            accountId: Swift.String? = nil,
            currentPerformanceRiskRatings: ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings? = nil,
            inferredWorkloadSavings: [ComputeOptimizerClientTypes.InferredWorkloadSaving]? = nil,
            recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil,
            savingsOpportunity: ComputeOptimizerClientTypes.SavingsOpportunity? = nil,
            summaries: [ComputeOptimizerClientTypes.Summary]? = nil
        )
        {
            self.accountId = accountId
            self.currentPerformanceRiskRatings = currentPerformanceRiskRatings
            self.inferredWorkloadSavings = inferredWorkloadSavings
            self.recommendationResourceType = recommendationResourceType
            self.savingsOpportunity = savingsOpportunity
            self.summaries = summaries
        }
    }
}

public struct GetRecommendationSummariesOutput: Swift.Sendable {
    /// The token to use to advance to the next page of recommendation summaries. This value is null when there are no more pages of recommendation summaries to return.
    public var nextToken: Swift.String?
    /// An array of objects that summarize a recommendation.
    public var recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]?

    public init(
        nextToken: Swift.String? = nil,
        recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationSummaries = recommendationSummaries
    }
}

extension ComputeOptimizerClientTypes {

    /// The preference to control which resource type values are considered when generating rightsizing recommendations. You can specify this preference as a combination of include and exclude lists. You must specify either an includeList or excludeList. If the preference is an empty set of resource type values, an error occurs. For more information, see [ Rightsizing recommendation preferences](https://docs.aws.amazon.com/compute-optimizer/latest/ug/rightsizing-preferences.html) in the Compute Optimizer User Guide.
    ///
    /// * This preference is only available for the Amazon EC2 instance and Auto Scaling group resource types.
    ///
    /// * Compute Optimizer only supports the customization of Ec2InstanceTypes.
    public struct PreferredResource: Swift.Sendable {
        /// The preferred resource type values to exclude from the recommendation candidates. If this isnâ€™t specified, all supported resources are included by default. You can specify up to 1000 values in this list.
        public var excludeList: [Swift.String]?
        /// The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isnâ€™t specified, all supported resources are included by default. You can specify up to 1000 values in this list.
        public var includeList: [Swift.String]?
        /// The type of preferred resource to customize. Compute Optimizer only supports the customization of Ec2InstanceTypes.
        public var name: ComputeOptimizerClientTypes.PreferredResourceName?

        public init(
            excludeList: [Swift.String]? = nil,
            includeList: [Swift.String]? = nil,
            name: ComputeOptimizerClientTypes.PreferredResourceName? = nil
        )
        {
            self.excludeList = excludeList
            self.includeList = includeList
            self.name = name
        }
    }
}

public struct PutRecommendationPreferencesInput: Swift.Sendable {
    /// The status of the enhanced infrastructure metrics recommendation preference to create or update. Specify the Active status to activate the preference, or specify Inactive to deactivate the preference. For more information, see [Enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide.
    public var enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics?
    /// The provider of the external metrics recommendation preference to create or update. Specify a valid provider in the source field to activate the preference. To delete this preference, see the [DeleteRecommendationPreferences] action. This preference can only be set for the Ec2Instance resource type. For more information, see [External metrics ingestion](https://docs.aws.amazon.com/compute-optimizer/latest/ug/external-metrics-ingestion.html) in the Compute Optimizer User Guide.
    public var externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference?
    /// The status of the inferred workload types recommendation preference to create or update. The inferred workload type feature is active by default. To deactivate it, create a recommendation preference. Specify the Inactive status to deactivate the feature, or specify Active to activate it. For more information, see [Inferred workload types](https://docs.aws.amazon.com/compute-optimizer/latest/ug/inferred-workload-types.html) in the Compute Optimizer User Guide.
    public var inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference?
    /// The preference to control the number of days the utilization metrics of the Amazon Web Services resource are analyzed. When this preference isn't specified, we use the default value DAYS_14. You can only set this preference for the Amazon EC2 instance and Auto Scaling group resource types.
    ///
    /// * Amazon EC2 instance lookback preferences can be set at the organization, account, and resource levels.
    ///
    /// * Auto Scaling group lookback preferences can only be set at the resource level.
    public var lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference?
    /// The preference to control which resource type values are considered when generating rightsizing recommendations. You can specify this preference as a combination of include and exclude lists. You must specify either an includeList or excludeList. If the preference is an empty set of resource type values, an error occurs. You can only set this preference for the Amazon EC2 instance and Auto Scaling group resource types.
    public var preferredResources: [ComputeOptimizerClientTypes.PreferredResource]?
    /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
    /// This member is required.
    public var resourceType: ComputeOptimizerClientTypes.ResourceType?
    /// The status of the savings estimation mode preference to create or update. Specify the AfterDiscounts status to activate the preference, or specify BeforeDiscounts to deactivate the preference. Only the account manager or delegated administrator of your organization can activate this preference. For more information, see [ Savings estimation mode](https://docs.aws.amazon.com/compute-optimizer/latest/ug/savings-estimation-mode.html) in the Compute Optimizer User Guide.
    public var savingsEstimationMode: ComputeOptimizerClientTypes.SavingsEstimationMode?
    /// An object that describes the scope of the recommendation preference to create. You can create recommendation preferences at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see [Activating enhanced infrastructure metrics](https://docs.aws.amazon.com/compute-optimizer/latest/ug/enhanced-infrastructure-metrics.html) in the Compute Optimizer User Guide. You cannot create recommendation preferences for Auto Scaling groups at the organization and account levels. You can create recommendation preferences for Auto Scaling groups only at the resource level by specifying a scope name of ResourceArn and a scope value of the Auto Scaling group Amazon Resource Name (ARN). This will configure the preference for all instances that are part of the specified Auto Scaling group. You also cannot create recommendation preferences at the resource level for instances that are part of an Auto Scaling group. You can create recommendation preferences at the resource level only for standalone instances.
    public var scope: ComputeOptimizerClientTypes.Scope?
    /// The preference to control the resourceâ€™s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. When this preference isn't specified, we use the following default values. CPU utilization:
    ///
    /// * P99_5 for threshold
    ///
    /// * PERCENT_20 for headroom
    ///
    ///
    /// Memory utilization:
    ///
    /// * PERCENT_20 for headroom
    ///
    ///
    ///
    ///
    /// * You can only set CPU and memory utilization preferences for the Amazon EC2 instance resource type.
    ///
    /// * The threshold setting isnâ€™t available for memory utilization.
    public var utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]?

    public init(
        enhancedInfrastructureMetrics: ComputeOptimizerClientTypes.EnhancedInfrastructureMetrics? = nil,
        externalMetricsPreference: ComputeOptimizerClientTypes.ExternalMetricsPreference? = nil,
        inferredWorkloadTypes: ComputeOptimizerClientTypes.InferredWorkloadTypesPreference? = nil,
        lookBackPeriod: ComputeOptimizerClientTypes.LookBackPeriodPreference? = nil,
        preferredResources: [ComputeOptimizerClientTypes.PreferredResource]? = nil,
        resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
        savingsEstimationMode: ComputeOptimizerClientTypes.SavingsEstimationMode? = nil,
        scope: ComputeOptimizerClientTypes.Scope? = nil,
        utilizationPreferences: [ComputeOptimizerClientTypes.UtilizationPreference]? = nil
    )
    {
        self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        self.externalMetricsPreference = externalMetricsPreference
        self.inferredWorkloadTypes = inferredWorkloadTypes
        self.lookBackPeriod = lookBackPeriod
        self.preferredResources = preferredResources
        self.resourceType = resourceType
        self.savingsEstimationMode = savingsEstimationMode
        self.scope = scope
        self.utilizationPreferences = utilizationPreferences
    }
}

public struct PutRecommendationPreferencesOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateEnrollmentStatusInput: Swift.Sendable {
    /// Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.
    public var includeMemberAccounts: Swift.Bool?
    /// The new enrollment status of the account. The following status options are available:
    ///
    /// * Active - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see [Metrics analyzed by Compute Optimizer](https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html) in the Compute Optimizer User Guide.
    ///
    /// * Inactive - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.
    ///
    ///
    /// The Pending and Failed options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.
    /// This member is required.
    public var status: ComputeOptimizerClientTypes.Status?

    public init(
        includeMemberAccounts: Swift.Bool? = false,
        status: ComputeOptimizerClientTypes.Status? = nil
    )
    {
        self.includeMemberAccounts = includeMemberAccounts
        self.status = status
    }
}

public struct UpdateEnrollmentStatusOutput: Swift.Sendable {
    /// The enrollment status of the account.
    public var status: ComputeOptimizerClientTypes.Status?
    /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
    public var statusReason: Swift.String?

    public init(
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.status = status
        self.statusReason = statusReason
    }
}

extension DeleteRecommendationPreferencesInput {

    static func urlPathProvider(_ value: DeleteRecommendationPreferencesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRecommendationExportJobsInput {

    static func urlPathProvider(_ value: DescribeRecommendationExportJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportAutoScalingGroupRecommendationsInput {

    static func urlPathProvider(_ value: ExportAutoScalingGroupRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportEBSVolumeRecommendationsInput {

    static func urlPathProvider(_ value: ExportEBSVolumeRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportEC2InstanceRecommendationsInput {

    static func urlPathProvider(_ value: ExportEC2InstanceRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportECSServiceRecommendationsInput {

    static func urlPathProvider(_ value: ExportECSServiceRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportLambdaFunctionRecommendationsInput {

    static func urlPathProvider(_ value: ExportLambdaFunctionRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportLicenseRecommendationsInput {

    static func urlPathProvider(_ value: ExportLicenseRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ExportRDSDatabaseRecommendationsInput {

    static func urlPathProvider(_ value: ExportRDSDatabaseRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetAutoScalingGroupRecommendationsInput {

    static func urlPathProvider(_ value: GetAutoScalingGroupRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetEBSVolumeRecommendationsInput {

    static func urlPathProvider(_ value: GetEBSVolumeRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetEC2InstanceRecommendationsInput {

    static func urlPathProvider(_ value: GetEC2InstanceRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetEC2RecommendationProjectedMetricsInput {

    static func urlPathProvider(_ value: GetEC2RecommendationProjectedMetricsInput) -> Swift.String? {
        return "/"
    }
}

extension GetECSServiceRecommendationProjectedMetricsInput {

    static func urlPathProvider(_ value: GetECSServiceRecommendationProjectedMetricsInput) -> Swift.String? {
        return "/"
    }
}

extension GetECSServiceRecommendationsInput {

    static func urlPathProvider(_ value: GetECSServiceRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetEffectiveRecommendationPreferencesInput {

    static func urlPathProvider(_ value: GetEffectiveRecommendationPreferencesInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnrollmentStatusInput {

    static func urlPathProvider(_ value: GetEnrollmentStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnrollmentStatusesForOrganizationInput {

    static func urlPathProvider(_ value: GetEnrollmentStatusesForOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension GetLambdaFunctionRecommendationsInput {

    static func urlPathProvider(_ value: GetLambdaFunctionRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetLicenseRecommendationsInput {

    static func urlPathProvider(_ value: GetLicenseRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRDSDatabaseRecommendationProjectedMetricsInput {

    static func urlPathProvider(_ value: GetRDSDatabaseRecommendationProjectedMetricsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRDSDatabaseRecommendationsInput {

    static func urlPathProvider(_ value: GetRDSDatabaseRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRecommendationPreferencesInput {

    static func urlPathProvider(_ value: GetRecommendationPreferencesInput) -> Swift.String? {
        return "/"
    }
}

extension GetRecommendationSummariesInput {

    static func urlPathProvider(_ value: GetRecommendationSummariesInput) -> Swift.String? {
        return "/"
    }
}

extension PutRecommendationPreferencesInput {

    static func urlPathProvider(_ value: PutRecommendationPreferencesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnrollmentStatusInput {

    static func urlPathProvider(_ value: UpdateEnrollmentStatusInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRecommendationPreferencesInput {

    static func write(value: DeleteRecommendationPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["recommendationPreferenceNames"].writeList(value.recommendationPreferenceNames, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.RecommendationPreferenceName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceType"].write(value.resourceType)
        try writer["scope"].write(value.scope, with: ComputeOptimizerClientTypes.Scope.write(value:to:))
    }
}

extension DescribeRecommendationExportJobsInput {

    static func write(value: DescribeRecommendationExportJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.JobFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["jobIds"].writeList(value.jobIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ExportAutoScalingGroupRecommendationsInput {

    static func write(value: ExportAutoScalingGroupRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableAutoScalingGroupField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportEBSVolumeRecommendationsInput {

    static func write(value: ExportEBSVolumeRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableVolumeField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.EBSFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportEC2InstanceRecommendationsInput {

    static func write(value: ExportEC2InstanceRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableInstanceField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportECSServiceRecommendationsInput {

    static func write(value: ExportECSServiceRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableECSServiceField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.ECSServiceRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportLambdaFunctionRecommendationsInput {

    static func write(value: ExportLambdaFunctionRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableLambdaFunctionField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportLicenseRecommendationsInput {

    static func write(value: ExportLicenseRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableLicenseField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.LicenseRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension ExportRDSDatabaseRecommendationsInput {

    static func write(value: ExportRDSDatabaseRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fieldsToExport"].writeList(value.fieldsToExport, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.ExportableRDSDBField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.RDSDBRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["s3DestinationConfig"].write(value.s3DestinationConfig, with: ComputeOptimizerClientTypes.S3DestinationConfig.write(value:to:))
    }
}

extension GetAutoScalingGroupRecommendationsInput {

    static func write(value: GetAutoScalingGroupRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["autoScalingGroupArns"].writeList(value.autoScalingGroupArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
    }
}

extension GetEBSVolumeRecommendationsInput {

    static func write(value: GetEBSVolumeRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.EBSFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["volumeArns"].writeList(value.volumeArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetEC2InstanceRecommendationsInput {

    static func write(value: GetEC2InstanceRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["instanceArns"].writeList(value.instanceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
    }
}

extension GetEC2RecommendationProjectedMetricsInput {

    static func write(value: GetEC2RecommendationProjectedMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["instanceArn"].write(value.instanceArn)
        try writer["period"].write(value.period)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["stat"].write(value.stat)
    }
}

extension GetECSServiceRecommendationProjectedMetricsInput {

    static func write(value: GetECSServiceRecommendationProjectedMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["period"].write(value.period)
        try writer["serviceArn"].write(value.serviceArn)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["stat"].write(value.stat)
    }
}

extension GetECSServiceRecommendationsInput {

    static func write(value: GetECSServiceRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.ECSServiceRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceArns"].writeList(value.serviceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetEffectiveRecommendationPreferencesInput {

    static func write(value: GetEffectiveRecommendationPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension GetEnrollmentStatusInput {

    static func write(value: GetEnrollmentStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetEnrollmentStatusesForOrganizationInput {

    static func write(value: GetEnrollmentStatusesForOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.EnrollmentFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension GetLambdaFunctionRecommendationsInput {

    static func write(value: GetLambdaFunctionRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["functionArns"].writeList(value.functionArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension GetLicenseRecommendationsInput {

    static func write(value: GetLicenseRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.LicenseRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetRDSDatabaseRecommendationProjectedMetricsInput {

    static func write(value: GetRDSDatabaseRecommendationProjectedMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["period"].write(value.period)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["resourceArn"].write(value.resourceArn)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["stat"].write(value.stat)
    }
}

extension GetRDSDatabaseRecommendationsInput {

    static func write(value: GetRDSDatabaseRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: ComputeOptimizerClientTypes.RDSDBRecommendationFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["recommendationPreferences"].write(value.recommendationPreferences, with: ComputeOptimizerClientTypes.RecommendationPreferences.write(value:to:))
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetRecommendationPreferencesInput {

    static func write(value: GetRecommendationPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceType"].write(value.resourceType)
        try writer["scope"].write(value.scope, with: ComputeOptimizerClientTypes.Scope.write(value:to:))
    }
}

extension GetRecommendationSummariesInput {

    static func write(value: GetRecommendationSummariesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension PutRecommendationPreferencesInput {

    static func write(value: PutRecommendationPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enhancedInfrastructureMetrics"].write(value.enhancedInfrastructureMetrics)
        try writer["externalMetricsPreference"].write(value.externalMetricsPreference, with: ComputeOptimizerClientTypes.ExternalMetricsPreference.write(value:to:))
        try writer["inferredWorkloadTypes"].write(value.inferredWorkloadTypes)
        try writer["lookBackPeriod"].write(value.lookBackPeriod)
        try writer["preferredResources"].writeList(value.preferredResources, memberWritingClosure: ComputeOptimizerClientTypes.PreferredResource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceType"].write(value.resourceType)
        try writer["savingsEstimationMode"].write(value.savingsEstimationMode)
        try writer["scope"].write(value.scope, with: ComputeOptimizerClientTypes.Scope.write(value:to:))
        try writer["utilizationPreferences"].writeList(value.utilizationPreferences, memberWritingClosure: ComputeOptimizerClientTypes.UtilizationPreference.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateEnrollmentStatusInput {

    static func write(value: UpdateEnrollmentStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["includeMemberAccounts"].write(value.includeMemberAccounts)
        try writer["status"].write(value.status)
    }
}

extension DeleteRecommendationPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRecommendationPreferencesOutput {
        return DeleteRecommendationPreferencesOutput()
    }
}

extension DescribeRecommendationExportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRecommendationExportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRecommendationExportJobsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recommendationExportJobs = try reader["recommendationExportJobs"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RecommendationExportJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ExportAutoScalingGroupRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportAutoScalingGroupRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportAutoScalingGroupRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportEBSVolumeRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportEBSVolumeRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportEBSVolumeRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportEC2InstanceRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportEC2InstanceRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportEC2InstanceRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportECSServiceRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportECSServiceRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportECSServiceRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportLambdaFunctionRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportLambdaFunctionRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportLambdaFunctionRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportLicenseRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportLicenseRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportLicenseRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ExportRDSDatabaseRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportRDSDatabaseRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportRDSDatabaseRecommendationsOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension GetAutoScalingGroupRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAutoScalingGroupRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAutoScalingGroupRecommendationsOutput()
        value.autoScalingGroupRecommendations = try reader["autoScalingGroupRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.AutoScalingGroupRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetEBSVolumeRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEBSVolumeRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEBSVolumeRecommendationsOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.volumeRecommendations = try reader["volumeRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.VolumeRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetEC2InstanceRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEC2InstanceRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEC2InstanceRecommendationsOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceRecommendations = try reader["instanceRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.InstanceRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetEC2RecommendationProjectedMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEC2RecommendationProjectedMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEC2RecommendationProjectedMetricsOutput()
        value.recommendedOptionProjectedMetrics = try reader["recommendedOptionProjectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetECSServiceRecommendationProjectedMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetECSServiceRecommendationProjectedMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetECSServiceRecommendationProjectedMetricsOutput()
        value.recommendedOptionProjectedMetrics = try reader["recommendedOptionProjectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetECSServiceRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetECSServiceRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetECSServiceRecommendationsOutput()
        value.ecsServiceRecommendations = try reader["ecsServiceRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetEffectiveRecommendationPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEffectiveRecommendationPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEffectiveRecommendationPreferencesOutput()
        value.enhancedInfrastructureMetrics = try reader["enhancedInfrastructureMetrics"].readIfPresent()
        value.externalMetricsPreference = try reader["externalMetricsPreference"].readIfPresent(with: ComputeOptimizerClientTypes.ExternalMetricsPreference.read(from:))
        value.lookBackPeriod = try reader["lookBackPeriod"].readIfPresent()
        value.preferredResources = try reader["preferredResources"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.EffectivePreferredResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.utilizationPreferences = try reader["utilizationPreferences"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetEnrollmentStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnrollmentStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnrollmentStatusOutput()
        value.lastUpdatedTimestamp = try reader["lastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.memberAccountsEnrolled = try reader["memberAccountsEnrolled"].readIfPresent() ?? false
        value.numberOfMemberAccountsOptedIn = try reader["numberOfMemberAccountsOptedIn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        return value
    }
}

extension GetEnrollmentStatusesForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnrollmentStatusesForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnrollmentStatusesForOrganizationOutput()
        value.accountEnrollmentStatuses = try reader["accountEnrollmentStatuses"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.AccountEnrollmentStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetLambdaFunctionRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLambdaFunctionRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLambdaFunctionRecommendationsOutput()
        value.lambdaFunctionRecommendations = try reader["lambdaFunctionRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LambdaFunctionRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetLicenseRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLicenseRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLicenseRecommendationsOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.licenseRecommendations = try reader["licenseRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LicenseRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetRDSDatabaseRecommendationProjectedMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRDSDatabaseRecommendationProjectedMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRDSDatabaseRecommendationProjectedMetricsOutput()
        value.recommendedOptionProjectedMetrics = try reader["recommendedOptionProjectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRDSDatabaseRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRDSDatabaseRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRDSDatabaseRecommendationsOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.GetRecommendationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.rdsDBRecommendations = try reader["rdsDBRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDBRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRecommendationPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRecommendationPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRecommendationPreferencesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recommendationPreferencesDetails = try reader["recommendationPreferencesDetails"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RecommendationPreferencesDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRecommendationSummariesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRecommendationSummariesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRecommendationSummariesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recommendationSummaries = try reader["recommendationSummaries"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RecommendationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutRecommendationPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRecommendationPreferencesOutput {
        return PutRecommendationPreferencesOutput()
    }
}

extension UpdateEnrollmentStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnrollmentStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnrollmentStatusOutput()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        return value
    }
}

enum DeleteRecommendationPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRecommendationExportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportAutoScalingGroupRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportEBSVolumeRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportEC2InstanceRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportECSServiceRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportLambdaFunctionRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportLicenseRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportRDSDatabaseRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAutoScalingGroupRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEBSVolumeRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEC2InstanceRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEC2RecommendationProjectedMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetECSServiceRecommendationProjectedMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetECSServiceRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEffectiveRecommendationPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnrollmentStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnrollmentStatusesForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLambdaFunctionRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLicenseRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRDSDatabaseRecommendationProjectedMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRDSDatabaseRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRecommendationPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRecommendationSummariesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRecommendationPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "OptInRequiredException": return try OptInRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnrollmentStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingAuthenticationToken": return try MissingAuthenticationToken.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OptInRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OptInRequiredException {
        let reader = baseError.errorBodyReader
        var value = OptInRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterValueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingAuthenticationToken {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MissingAuthenticationToken {
        let reader = baseError.errorBodyReader
        var value = MissingAuthenticationToken()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ComputeOptimizerClientTypes.RecommendationExportJob {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RecommendationExportJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RecommendationExportJob()
        value.jobId = try reader["jobId"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent(with: ComputeOptimizerClientTypes.ExportDestination.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.creationTimestamp = try reader["creationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["lastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["failureReason"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ExportDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ExportDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ExportDestination()
        value.s3 = try reader["s3"].readIfPresent(with: ComputeOptimizerClientTypes.S3Destination.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.S3Destination {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.S3Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.S3Destination()
        value.bucket = try reader["bucket"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.metadataKey = try reader["metadataKey"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AutoScalingGroupRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AutoScalingGroupRecommendation()
        value.accountId = try reader["accountId"].readIfPresent()
        value.autoScalingGroupArn = try reader["autoScalingGroupArn"].readIfPresent()
        value.autoScalingGroupName = try reader["autoScalingGroupName"].readIfPresent()
        value.finding = try reader["finding"].readIfPresent()
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lookBackPeriodInDays = try reader["lookBackPeriodInDays"].readIfPresent() ?? 0
        value.currentConfiguration = try reader["currentConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.read(from:))
        value.currentInstanceGpuInfo = try reader["currentInstanceGpuInfo"].readIfPresent(with: ComputeOptimizerClientTypes.GpuInfo.read(from:))
        value.recommendationOptions = try reader["recommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPerformanceRisk = try reader["currentPerformanceRisk"].readIfPresent()
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences.read(from:))
        value.inferredWorkloadTypes = try reader["inferredWorkloadTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.InferredWorkloadType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.EffectiveRecommendationPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EffectiveRecommendationPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EffectiveRecommendationPreferences()
        value.cpuVendorArchitectures = try reader["cpuVendorArchitectures"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.CpuVendorArchitecture>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enhancedInfrastructureMetrics = try reader["enhancedInfrastructureMetrics"].readIfPresent()
        value.inferredWorkloadTypes = try reader["inferredWorkloadTypes"].readIfPresent()
        value.externalMetricsPreference = try reader["externalMetricsPreference"].readIfPresent(with: ComputeOptimizerClientTypes.ExternalMetricsPreference.read(from:))
        value.lookBackPeriod = try reader["lookBackPeriod"].readIfPresent()
        value.utilizationPreferences = try reader["utilizationPreferences"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preferredResources = try reader["preferredResources"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.EffectivePreferredResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent(with: ComputeOptimizerClientTypes.InstanceSavingsEstimationMode.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.InstanceSavingsEstimationMode {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InstanceSavingsEstimationMode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InstanceSavingsEstimationMode()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.EffectivePreferredResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EffectivePreferredResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EffectivePreferredResource()
        value.name = try reader["name"].readIfPresent()
        value.includeList = try reader["includeList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.effectiveIncludeList = try reader["effectiveIncludeList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeList = try reader["excludeList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.UtilizationPreference {

    static func write(value: ComputeOptimizerClientTypes.UtilizationPreference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["metricName"].write(value.metricName)
        try writer["metricParameters"].write(value.metricParameters, with: ComputeOptimizerClientTypes.CustomizableMetricParameters.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.UtilizationPreference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.UtilizationPreference()
        value.metricName = try reader["metricName"].readIfPresent()
        value.metricParameters = try reader["metricParameters"].readIfPresent(with: ComputeOptimizerClientTypes.CustomizableMetricParameters.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.CustomizableMetricParameters {

    static func write(value: ComputeOptimizerClientTypes.CustomizableMetricParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["headroom"].write(value.headroom)
        try writer["threshold"].write(value.threshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.CustomizableMetricParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.CustomizableMetricParameters()
        value.threshold = try reader["threshold"].readIfPresent()
        value.headroom = try reader["headroom"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ExternalMetricsPreference {

    static func write(value: ComputeOptimizerClientTypes.ExternalMetricsPreference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["source"].write(value.source)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ExternalMetricsPreference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ExternalMetricsPreference()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption()
        value.configuration = try reader["configuration"].readIfPresent(with: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.read(from:))
        value.instanceGpuInfo = try reader["instanceGpuInfo"].readIfPresent(with: ComputeOptimizerClientTypes.GpuInfo.read(from:))
        value.projectedUtilizationMetrics = try reader["projectedUtilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.performanceRisk = try reader["performanceRisk"].readIfPresent() ?? 0
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts.read(from:))
        value.migrationEffort = try reader["migrationEffort"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AutoScalingGroupSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AutoScalingGroupEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.SavingsOpportunity {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.SavingsOpportunity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.SavingsOpportunity()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.EstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.EstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.UtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.UtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.UtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.GpuInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.GpuInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.GpuInfo()
        value.gpus = try reader["gpus"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Gpu.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.Gpu {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.Gpu {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.Gpu()
        value.gpuCount = try reader["gpuCount"].readIfPresent() ?? 0
        value.gpuMemorySizeInMiB = try reader["gpuMemorySizeInMiB"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AutoScalingGroupConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AutoScalingGroupConfiguration()
        value.desiredCapacity = try reader["desiredCapacity"].readIfPresent() ?? 0
        value.minSize = try reader["minSize"].readIfPresent() ?? 0
        value.maxSize = try reader["maxSize"].readIfPresent() ?? 0
        value.instanceType = try reader["instanceType"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.GetRecommendationError {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.GetRecommendationError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.GetRecommendationError()
        value.identifier = try reader["identifier"].readIfPresent()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.VolumeRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.VolumeRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.VolumeRecommendation()
        value.volumeArn = try reader["volumeArn"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.currentConfiguration = try reader["currentConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.VolumeConfiguration.read(from:))
        value.finding = try reader["finding"].readIfPresent()
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.EBSUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lookBackPeriodInDays = try reader["lookBackPeriodInDays"].readIfPresent() ?? 0
        value.volumeRecommendationOptions = try reader["volumeRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.VolumeRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPerformanceRisk = try reader["currentPerformanceRisk"].readIfPresent()
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.Tag {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EBSEffectiveRecommendationPreferences()
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent(with: ComputeOptimizerClientTypes.EBSSavingsEstimationMode.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.EBSSavingsEstimationMode {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EBSSavingsEstimationMode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EBSSavingsEstimationMode()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.VolumeRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.VolumeRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.VolumeRecommendationOption()
        value.configuration = try reader["configuration"].readIfPresent(with: ComputeOptimizerClientTypes.VolumeConfiguration.read(from:))
        value.performanceRisk = try reader["performanceRisk"].readIfPresent() ?? 0
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EBSSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EBSEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.VolumeConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.VolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.VolumeConfiguration()
        value.volumeType = try reader["volumeType"].readIfPresent()
        value.volumeSize = try reader["volumeSize"].readIfPresent() ?? 0
        value.volumeBaselineIOPS = try reader["volumeBaselineIOPS"].readIfPresent() ?? 0
        value.volumeBurstIOPS = try reader["volumeBurstIOPS"].readIfPresent() ?? 0
        value.volumeBaselineThroughput = try reader["volumeBaselineThroughput"].readIfPresent() ?? 0
        value.volumeBurstThroughput = try reader["volumeBurstThroughput"].readIfPresent() ?? 0
        value.rootVolume = try reader["rootVolume"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.EBSUtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.EBSUtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.EBSUtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InstanceRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InstanceRecommendation()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.instanceName = try reader["instanceName"].readIfPresent()
        value.currentInstanceType = try reader["currentInstanceType"].readIfPresent()
        value.finding = try reader["finding"].readIfPresent()
        value.findingReasonCodes = try reader["findingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lookBackPeriodInDays = try reader["lookBackPeriodInDays"].readIfPresent() ?? 0
        value.recommendationOptions = try reader["recommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.InstanceRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.recommendationSources = try reader["recommendationSources"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RecommendationSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPerformanceRisk = try reader["currentPerformanceRisk"].readIfPresent()
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.EffectiveRecommendationPreferences.read(from:))
        value.inferredWorkloadTypes = try reader["inferredWorkloadTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.InferredWorkloadType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceState = try reader["instanceState"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.externalMetricStatus = try reader["externalMetricStatus"].readIfPresent(with: ComputeOptimizerClientTypes.ExternalMetricStatus.read(from:))
        value.currentInstanceGpuInfo = try reader["currentInstanceGpuInfo"].readIfPresent(with: ComputeOptimizerClientTypes.GpuInfo.read(from:))
        value.idle = try reader["idle"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ExternalMetricStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ExternalMetricStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ExternalMetricStatus()
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.RecommendationSource {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RecommendationSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RecommendationSource()
        value.recommendationSourceArn = try reader["recommendationSourceArn"].readIfPresent()
        value.recommendationSourceType = try reader["recommendationSourceType"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InstanceRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InstanceRecommendationOption()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.instanceGpuInfo = try reader["instanceGpuInfo"].readIfPresent(with: ComputeOptimizerClientTypes.GpuInfo.read(from:))
        value.projectedUtilizationMetrics = try reader["projectedUtilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.platformDifferences = try reader["platformDifferences"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.PlatformDifference>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.performanceRisk = try reader["performanceRisk"].readIfPresent() ?? 0
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts.read(from:))
        value.migrationEffort = try reader["migrationEffort"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InstanceSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InstanceEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric()
        value.recommendedInstanceType = try reader["recommendedInstanceType"].readIfPresent()
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.projectedMetrics = try reader["projectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ProjectedMetric()
        value.name = try reader["name"].readIfPresent()
        value.timestamps = try reader["timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.epochSeconds), memberNodeInfo: "member", isFlattened: false)
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceRecommendedOptionProjectedMetric()
        value.recommendedCpuUnits = try reader["recommendedCpuUnits"].readIfPresent() ?? 0
        value.recommendedMemorySize = try reader["recommendedMemorySize"].readIfPresent() ?? 0
        value.projectedMetrics = try reader["projectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceProjectedMetric()
        value.name = try reader["name"].readIfPresent()
        value.timestamps = try reader["timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.epochSeconds), memberNodeInfo: "member", isFlattened: false)
        value.upperBoundValues = try reader["upperBoundValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        value.lowerBoundValues = try reader["lowerBoundValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceRecommendation()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.currentServiceConfiguration = try reader["currentServiceConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.ServiceConfiguration.read(from:))
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lookbackPeriodInDays = try reader["lookbackPeriodInDays"].readIfPresent() ?? 0
        value.launchType = try reader["launchType"].readIfPresent()
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.finding = try reader["finding"].readIfPresent()
        value.findingReasonCodes = try reader["findingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.ECSServiceRecommendationFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRecommendationOptions = try reader["serviceRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentPerformanceRisk = try reader["currentPerformanceRisk"].readIfPresent()
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSEffectiveRecommendationPreferences()
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent(with: ComputeOptimizerClientTypes.ECSSavingsEstimationMode.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSSavingsEstimationMode {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSSavingsEstimationMode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSSavingsEstimationMode()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceRecommendationOption()
        value.memory = try reader["memory"].readIfPresent()
        value.cpu = try reader["cpu"].readIfPresent()
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts.read(from:))
        value.projectedUtilizationMetrics = try reader["projectedUtilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerRecommendations = try reader["containerRecommendations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ContainerRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ContainerRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ContainerRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ContainerRecommendation()
        value.containerName = try reader["containerName"].readIfPresent()
        value.memorySizeConfiguration = try reader["memorySizeConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.MemorySizeConfiguration.read(from:))
        value.cpu = try reader["cpu"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.MemorySizeConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.MemorySizeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.MemorySizeConfiguration()
        value.memory = try reader["memory"].readIfPresent()
        value.memoryReservation = try reader["memoryReservation"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceProjectedUtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.lowerBoundValue = try reader["lowerBoundValue"].readIfPresent() ?? 0
        value.upperBoundValue = try reader["upperBoundValue"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.ECSServiceUtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ECSServiceUtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ECSServiceUtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.ServiceConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ServiceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ServiceConfiguration()
        value.memory = try reader["memory"].readIfPresent()
        value.cpu = try reader["cpu"].readIfPresent()
        value.containerConfigurations = try reader["containerConfigurations"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ContainerConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoScalingConfiguration = try reader["autoScalingConfiguration"].readIfPresent()
        value.taskDefinitionArn = try reader["taskDefinitionArn"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.ContainerConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ContainerConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ContainerConfiguration()
        value.containerName = try reader["containerName"].readIfPresent()
        value.memorySizeConfiguration = try reader["memorySizeConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.MemorySizeConfiguration.read(from:))
        value.cpu = try reader["cpu"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.AccountEnrollmentStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.AccountEnrollmentStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.AccountEnrollmentStatus()
        value.accountId = try reader["accountId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["lastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaFunctionRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaFunctionRecommendation()
        value.functionArn = try reader["functionArn"].readIfPresent()
        value.functionVersion = try reader["functionVersion"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.currentMemorySize = try reader["currentMemorySize"].readIfPresent() ?? 0
        value.numberOfInvocations = try reader["numberOfInvocations"].readIfPresent() ?? 0
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lookbackPeriodInDays = try reader["lookbackPeriodInDays"].readIfPresent() ?? 0
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.finding = try reader["finding"].readIfPresent()
        value.findingReasonCodes = try reader["findingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.memorySizeRecommendationOptions = try reader["memorySizeRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentPerformanceRisk = try reader["currentPerformanceRisk"].readIfPresent()
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaEffectiveRecommendationPreferences()
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent(with: ComputeOptimizerClientTypes.LambdaSavingsEstimationMode.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaSavingsEstimationMode {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaSavingsEstimationMode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaSavingsEstimationMode()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption()
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.memorySize = try reader["memorySize"].readIfPresent() ?? 0
        value.projectedUtilizationMetrics = try reader["projectedUtilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.LicenseRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LicenseRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LicenseRecommendation()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.currentLicenseConfiguration = try reader["currentLicenseConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.LicenseConfiguration.read(from:))
        value.lookbackPeriodInDays = try reader["lookbackPeriodInDays"].readIfPresent() ?? 0
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.finding = try reader["finding"].readIfPresent()
        value.findingReasonCodes = try reader["findingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.LicenseFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.licenseRecommendationOptions = try reader["licenseRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.LicenseRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.LicenseRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LicenseRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LicenseRecommendationOption()
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.operatingSystem = try reader["operatingSystem"].readIfPresent()
        value.licenseEdition = try reader["licenseEdition"].readIfPresent()
        value.licenseModel = try reader["licenseModel"].readIfPresent()
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.LicenseConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.LicenseConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.LicenseConfiguration()
        value.numberOfCores = try reader["numberOfCores"].readIfPresent() ?? 0
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.operatingSystem = try reader["operatingSystem"].readIfPresent()
        value.licenseEdition = try reader["licenseEdition"].readIfPresent()
        value.licenseName = try reader["licenseName"].readIfPresent()
        value.licenseModel = try reader["licenseModel"].readIfPresent()
        value.licenseVersion = try reader["licenseVersion"].readIfPresent()
        value.metricsSource = try reader["metricsSource"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.MetricSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.MetricSource {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.MetricSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.MetricSource()
        value.provider = try reader["provider"].readIfPresent()
        value.providerArn = try reader["providerArn"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDatabaseRecommendedOptionProjectedMetric()
        value.recommendedDBInstanceClass = try reader["recommendedDBInstanceClass"].readIfPresent()
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.projectedMetrics = try reader["projectedMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDatabaseProjectedMetric()
        value.name = try reader["name"].readIfPresent()
        value.timestamps = try reader["timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.epochSeconds), memberNodeInfo: "member", isFlattened: false)
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDBRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDBRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDBRecommendation()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.engine = try reader["engine"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.currentDBInstanceClass = try reader["currentDBInstanceClass"].readIfPresent()
        value.currentStorageConfiguration = try reader["currentStorageConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.DBStorageConfiguration.read(from:))
        value.idle = try reader["idle"].readIfPresent()
        value.instanceFinding = try reader["instanceFinding"].readIfPresent()
        value.storageFinding = try reader["storageFinding"].readIfPresent()
        value.instanceFindingReasonCodes = try reader["instanceFindingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.RDSInstanceFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.storageFindingReasonCodes = try reader["storageFindingReasonCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.RDSStorageFindingReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceRecommendationOptions = try reader["instanceRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.storageRecommendationOptions = try reader["storageRecommendationOptions"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.utilizationMetrics = try reader["utilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDBUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.effectiveRecommendationPreferences = try reader["effectiveRecommendationPreferences"].readIfPresent(with: ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences.read(from:))
        value.lookbackPeriodInDays = try reader["lookbackPeriodInDays"].readIfPresent() ?? 0
        value.lastRefreshTimestamp = try reader["lastRefreshTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSEffectiveRecommendationPreferences()
        value.cpuVendorArchitectures = try reader["cpuVendorArchitectures"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.CpuVendorArchitecture>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enhancedInfrastructureMetrics = try reader["enhancedInfrastructureMetrics"].readIfPresent()
        value.lookBackPeriod = try reader["lookBackPeriod"].readIfPresent()
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent(with: ComputeOptimizerClientTypes.RDSSavingsEstimationMode.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSSavingsEstimationMode {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSSavingsEstimationMode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSSavingsEstimationMode()
        value.source = try reader["source"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDBUtilizationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDBUtilizationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDBUtilizationMetric()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDBStorageRecommendationOption()
        value.storageConfiguration = try reader["storageConfiguration"].readIfPresent(with: ComputeOptimizerClientTypes.DBStorageConfiguration.read(from:))
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSStorageSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSStorageEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.DBStorageConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.DBStorageConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.DBStorageConfiguration()
        value.storageType = try reader["storageType"].readIfPresent()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent() ?? 0
        value.iops = try reader["iops"].readIfPresent()
        value.maxAllocatedStorage = try reader["maxAllocatedStorage"].readIfPresent()
        value.storageThroughput = try reader["storageThroughput"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSDBInstanceRecommendationOption()
        value.dbInstanceClass = try reader["dbInstanceClass"].readIfPresent()
        value.projectedUtilizationMetrics = try reader["projectedUtilizationMetrics"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.RDSDBUtilizationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.performanceRisk = try reader["performanceRisk"].readIfPresent() ?? 0
        value.rank = try reader["rank"].readIfPresent() ?? 0
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.savingsOpportunityAfterDiscounts = try reader["savingsOpportunityAfterDiscounts"].readIfPresent(with: ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSInstanceSavingsOpportunityAfterDiscounts()
        value.savingsOpportunityPercentage = try reader["savingsOpportunityPercentage"].readIfPresent() ?? 0
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RDSInstanceEstimatedMonthlySavings()
        value.currency = try reader["currency"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.RecommendationPreferencesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RecommendationPreferencesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RecommendationPreferencesDetail()
        value.scope = try reader["scope"].readIfPresent(with: ComputeOptimizerClientTypes.Scope.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.enhancedInfrastructureMetrics = try reader["enhancedInfrastructureMetrics"].readIfPresent()
        value.inferredWorkloadTypes = try reader["inferredWorkloadTypes"].readIfPresent()
        value.externalMetricsPreference = try reader["externalMetricsPreference"].readIfPresent(with: ComputeOptimizerClientTypes.ExternalMetricsPreference.read(from:))
        value.lookBackPeriod = try reader["lookBackPeriod"].readIfPresent()
        value.utilizationPreferences = try reader["utilizationPreferences"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.UtilizationPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preferredResources = try reader["preferredResources"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.EffectivePreferredResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.savingsEstimationMode = try reader["savingsEstimationMode"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.Scope {

    static func write(value: ComputeOptimizerClientTypes.Scope?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.Scope {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.Scope()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ComputeOptimizerClientTypes.RecommendationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.RecommendationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.RecommendationSummary()
        value.summaries = try reader["summaries"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.Summary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.recommendationResourceType = try reader["recommendationResourceType"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.savingsOpportunity = try reader["savingsOpportunity"].readIfPresent(with: ComputeOptimizerClientTypes.SavingsOpportunity.read(from:))
        value.currentPerformanceRiskRatings = try reader["currentPerformanceRiskRatings"].readIfPresent(with: ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings.read(from:))
        value.inferredWorkloadSavings = try reader["inferredWorkloadSavings"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.InferredWorkloadSaving.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.InferredWorkloadSaving {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.InferredWorkloadSaving {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.InferredWorkloadSaving()
        value.inferredWorkloadTypes = try reader["inferredWorkloadTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComputeOptimizerClientTypes.InferredWorkloadType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.estimatedMonthlySavings = try reader["estimatedMonthlySavings"].readIfPresent(with: ComputeOptimizerClientTypes.EstimatedMonthlySavings.read(from:))
        return value
    }
}

extension ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings()
        value.high = try reader["high"].readIfPresent() ?? 0
        value.medium = try reader["medium"].readIfPresent() ?? 0
        value.low = try reader["low"].readIfPresent() ?? 0
        value.veryLow = try reader["veryLow"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.Summary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.Summary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.Summary()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        value.reasonCodeSummaries = try reader["reasonCodeSummaries"].readListIfPresent(memberReadingClosure: ComputeOptimizerClientTypes.ReasonCodeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComputeOptimizerClientTypes.ReasonCodeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComputeOptimizerClientTypes.ReasonCodeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComputeOptimizerClientTypes.ReasonCodeSummary()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension ComputeOptimizerClientTypes.JobFilter {

    static func write(value: ComputeOptimizerClientTypes.JobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.Filter {

    static func write(value: ComputeOptimizerClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.S3DestinationConfig {

    static func write(value: ComputeOptimizerClientTypes.S3DestinationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["keyPrefix"].write(value.keyPrefix)
    }
}

extension ComputeOptimizerClientTypes.RecommendationPreferences {

    static func write(value: ComputeOptimizerClientTypes.RecommendationPreferences?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cpuVendorArchitectures"].writeList(value.cpuVendorArchitectures, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComputeOptimizerClientTypes.CpuVendorArchitecture>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.EBSFilter {

    static func write(value: ComputeOptimizerClientTypes.EBSFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.ECSServiceRecommendationFilter {

    static func write(value: ComputeOptimizerClientTypes.ECSServiceRecommendationFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter {

    static func write(value: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.LicenseRecommendationFilter {

    static func write(value: ComputeOptimizerClientTypes.LicenseRecommendationFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.RDSDBRecommendationFilter {

    static func write(value: ComputeOptimizerClientTypes.RDSDBRecommendationFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.EnrollmentFilter {

    static func write(value: ComputeOptimizerClientTypes.EnrollmentFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ComputeOptimizerClientTypes.PreferredResource {

    static func write(value: ComputeOptimizerClientTypes.PreferredResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludeList"].writeList(value.excludeList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeList"].writeList(value.includeList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
    }
}

public enum ComputeOptimizerClientTypes {}
