//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// You are not authorized to perform the action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

extension RekognitionClientTypes {
    /// Structure containing the estimated age range, in years, for a face. Amazon Rekognition estimates an age range for faces detected in the input image. Estimated age ranges can overlap. A face of a 5-year-old might have an estimated range of 4-6, while the face of a 6-year-old might have an estimated range of 4-8.
    public struct AgeRange {
        /// The highest estimated age.
        public var high: Swift.Int?
        /// The lowest estimated age.
        public var low: Swift.Int?

        public init(
            high: Swift.Int? = nil,
            low: Swift.Int? = nil
        )
        {
            self.high = high
            self.low = low
        }
    }

}

extension RekognitionClientTypes {
    /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    public struct S3Object {
        /// Name of the S3 bucket.
        public var bucket: Swift.String?
        /// S3 object key name.
        public var name: Swift.String?
        /// If the bucket is versioning enabled, you can specify the object version.
        public var version: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.name = name
            self.version = version
        }
    }

}

extension RekognitionClientTypes {
    /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
    public struct GroundTruthManifest {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {
    /// Assets are the images that you use to train and evaluate a model version. Assets can also contain validation information that you use to debug a failed model training.
    public struct Asset {
        /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
        public var groundTruthManifest: RekognitionClientTypes.GroundTruthManifest?

        public init(
            groundTruthManifest: RekognitionClientTypes.GroundTruthManifest? = nil
        )
        {
            self.groundTruthManifest = groundTruthManifest
        }
    }

}

extension RekognitionClientTypes {
    /// Provides face metadata for the faces that are associated to a specific UserID.
    public struct AssociatedFace {
        /// Unique identifier assigned to the face.
        public var faceId: Swift.String?

        public init(
            faceId: Swift.String? = nil
        )
        {
            self.faceId = faceId
        }
    }

}

/// A User with the same Id already exists within the collection, or the update or deletion of the User caused an inconsistent state. **
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// A ClientRequestToken input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// Amazon Rekognition experienced a service issue. Try your call again.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// Input parameter violated a constraint. Validate your parameter before calling the API operation again.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Rekognition.
public struct ProvisionedThroughputExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedThroughputExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// The resource specified in the request cannot be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// The size of the collection exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// Amazon Rekognition is temporarily unable to process the request. Try your call again.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct AssociateFacesInput {
    /// Idempotent token used to identify the request to AssociateFaces. If you use the same token with multiple AssociateFaces requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.
    public var clientRequestToken: Swift.String?
    /// The ID of an existing collection containing the UserID.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of FaceIDs to associate with the UserID.
    /// This member is required.
    public var faceIds: [Swift.String]?
    /// The ID for the existing UserID.
    /// This member is required.
    public var userId: Swift.String?
    /// An optional value specifying the minimum confidence in the UserID match to return. The default value is 75.
    public var userMatchThreshold: Swift.Float?

    public init(
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        faceIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userMatchThreshold: Swift.Float? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.faceIds = faceIds
        self.userId = userId
        self.userMatchThreshold = userMatchThreshold
    }
}

extension RekognitionClientTypes {

    public enum UnsuccessfulFaceAssociationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case associatedToADifferentUser
        case faceNotFound
        case lowMatchConfidence
        case sdkUnknown(Swift.String)

        public static var allCases: [UnsuccessfulFaceAssociationReason] {
            return [
                .associatedToADifferentUser,
                .faceNotFound,
                .lowMatchConfidence
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .associatedToADifferentUser: return "ASSOCIATED_TO_A_DIFFERENT_USER"
            case .faceNotFound: return "FACE_NOT_FOUND"
            case .lowMatchConfidence: return "LOW_MATCH_CONFIDENCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains metadata like FaceId, UserID, and Reasons, for a face that was unsuccessfully associated.
    public struct UnsuccessfulFaceAssociation {
        /// Match confidence with the UserID, provides information regarding if a face association was unsuccessful because it didn't meet UserMatchThreshold.
        public var confidence: Swift.Float?
        /// A unique identifier assigned to the face.
        public var faceId: Swift.String?
        /// The reason why the association was unsuccessful.
        public var reasons: [RekognitionClientTypes.UnsuccessfulFaceAssociationReason]?
        /// A provided ID for the UserID. Unique within the collection.
        public var userId: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            faceId: Swift.String? = nil,
            reasons: [RekognitionClientTypes.UnsuccessfulFaceAssociationReason]? = nil,
            userId: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.faceId = faceId
            self.reasons = reasons
            self.userId = userId
        }
    }

}

extension RekognitionClientTypes {

    public enum UserStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case created
        case creating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [UserStatus] {
            return [
                .active,
                .created,
                .creating,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AssociateFacesOutput {
    /// An array of AssociatedFace objects containing FaceIDs that have been successfully associated with the UserID. Returned if the AssociateFaces action is successful.
    public var associatedFaces: [RekognitionClientTypes.AssociatedFace]?
    /// An array of UnsuccessfulAssociation objects containing FaceIDs that are not successfully associated along with the reasons. Returned if the AssociateFaces action is successful.
    public var unsuccessfulFaceAssociations: [RekognitionClientTypes.UnsuccessfulFaceAssociation]?
    /// The status of an update made to a UserID. Reflects if the UserID has been updated for every requested change.
    public var userStatus: RekognitionClientTypes.UserStatus?

    public init(
        associatedFaces: [RekognitionClientTypes.AssociatedFace]? = nil,
        unsuccessfulFaceAssociations: [RekognitionClientTypes.UnsuccessfulFaceAssociation]? = nil,
        userStatus: RekognitionClientTypes.UserStatus? = nil
    )
    {
        self.associatedFaces = associatedFaces
        self.unsuccessfulFaceAssociations = unsuccessfulFaceAssociations
        self.userStatus = userStatus
    }
}

extension RekognitionClientTypes {

    public enum Attribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ageRange
        case all
        case beard
        case `default`
        case emotions
        case eyeglasses
        case eyesOpen
        case eyeDirection
        case faceOccluded
        case gender
        case mouthOpen
        case mustache
        case smile
        case sunglasses
        case sdkUnknown(Swift.String)

        public static var allCases: [Attribute] {
            return [
                .ageRange,
                .all,
                .beard,
                .default,
                .emotions,
                .eyeglasses,
                .eyesOpen,
                .eyeDirection,
                .faceOccluded,
                .gender,
                .mouthOpen,
                .mustache,
                .smile,
                .sunglasses
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ageRange: return "AGE_RANGE"
            case .all: return "ALL"
            case .beard: return "BEARD"
            case .default: return "DEFAULT"
            case .emotions: return "EMOTIONS"
            case .eyeglasses: return "EYEGLASSES"
            case .eyesOpen: return "EYES_OPEN"
            case .eyeDirection: return "EYE_DIRECTION"
            case .faceOccluded: return "FACE_OCCLUDED"
            case .gender: return "GENDER"
            case .mouthOpen: return "MOUTH_OPEN"
            case .mustache: return "MUSTACHE"
            case .smile: return "SMILE"
            case .sunglasses: return "SUNGLASSES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Metadata information about an audio stream. An array of AudioMetadata objects for the audio streams found in a stored video is returned by [GetSegmentDetection].
    public struct AudioMetadata {
        /// The audio codec used to encode or decode the audio stream.
        public var codec: Swift.String?
        /// The duration of the audio stream in milliseconds.
        public var durationMillis: Swift.Int?
        /// The number of audio channels in the segment.
        public var numberOfChannels: Swift.Int?
        /// The sample rate for the audio stream.
        public var sampleRate: Swift.Int?

        public init(
            codec: Swift.String? = nil,
            durationMillis: Swift.Int? = nil,
            numberOfChannels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.codec = codec
            self.durationMillis = durationMillis
            self.numberOfChannels = numberOfChannels
            self.sampleRate = sampleRate
        }
    }

}

extension RekognitionClientTypes {
    /// Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The left (x-coordinate) and top (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). The top and left values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a left value of 0.5 (350/700) and a top value of 0.25 (50/200). The width and height values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the left or top values.
    public struct BoundingBox {
        /// Height of the bounding box as a ratio of the overall image height.
        public var height: Swift.Float?
        /// Left coordinate of the bounding box as a ratio of overall image width.
        public var `left`: Swift.Float?
        /// Top coordinate of the bounding box as a ratio of overall image height.
        public var top: Swift.Float?
        /// Width of the bounding box as a ratio of the overall image width.
        public var width: Swift.Float?

        public init(
            height: Swift.Float? = nil,
            `left`: Swift.Float? = nil,
            top: Swift.Float? = nil,
            width: Swift.Float? = nil
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }

}

extension RekognitionClientTypes {
    /// An image that is picked from the Face Liveness video and returned for audit trail purposes, returned as Base64-encoded bytes.
    public struct AuditImage {
        /// Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The left (x-coordinate) and top (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). The top and left values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a left value of 0.5 (350/700) and a top value of 0.25 (50/200). The width and height values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the left or top values.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The Base64-encoded bytes representing an image selected from the Face Liveness video and returned for audit purposes.
        public var bytes: Foundation.Data?
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            bytes: Foundation.Data? = nil,
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.boundingBox = boundingBox
            self.bytes = bytes
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes.AuditImage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditImage(boundingBox: \(Swift.String(describing: boundingBox)), s3Object: \(Swift.String(describing: s3Object)), bytes: \"CONTENT_REDACTED\")"}
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face has a beard, and the confidence level in the determination.
    public struct Beard {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face has beard or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// A filter that allows you to control the black frame detection by specifying the black levels and pixel coverage of black pixels in a frame. As videos can come from multiple sources, formats, and time periods, they may contain different standards and varying noise levels for black frames that need to be accounted for. For more information, see [StartSegmentDetection].
    public struct BlackFrame {
        /// A threshold used to determine the maximum luminance value for a pixel to be considered black. In a full color range video, luminance values range from 0-255. A pixel value of 0 is pure black, and the most strict filter. The maximum black pixel value is computed as follows: max_black_pixel_value = minimum_luminance + MaxPixelThreshold *luminance_range. For example, for a full range video with BlackPixelThreshold = 0.1, max_black_pixel_value is 0 + 0.1 * (255-0) = 25.5. The default value of MaxPixelThreshold is 0.2, which maps to a max_black_pixel_value of 51 for a full range video. You can lower this threshold to be more strict on black levels.
        public var maxPixelThreshold: Swift.Float?
        /// The minimum percentage of pixels in a frame that need to have a luminance below the max_black_pixel_value for a frame to be considered a black frame. Luminance is calculated using the BT.709 matrix. The default value is 99, which means at least 99% of all pixels in the frame are black pixels as per the MaxPixelThreshold set. You can reduce this value to allow more noise on the black frame.
        public var minCoveragePercentage: Swift.Float?

        public init(
            maxPixelThreshold: Swift.Float? = nil,
            minCoveragePercentage: Swift.Float? = nil
        )
        {
            self.maxPixelThreshold = maxPixelThreshold
            self.minCoveragePercentage = minCoveragePercentage
        }
    }

}

extension RekognitionClientTypes {

    public enum BodyPart: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case face
        case head
        case leftHand
        case rightHand
        case sdkUnknown(Swift.String)

        public static var allCases: [BodyPart] {
            return [
                .face,
                .head,
                .leftHand,
                .rightHand
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .face: return "FACE"
            case .head: return "HEAD"
            case .leftHand: return "LEFT_HAND"
            case .rightHand: return "RIGHT_HAND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about an item of Personal Protective Equipment covering a corresponding body part. For more information, see [DetectProtectiveEquipment].
    public struct CoversBodyPart {
        /// The confidence that Amazon Rekognition has in the value of Value.
        public var confidence: Swift.Float?
        /// True if the PPE covers the corresponding body part, otherwise false.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {

    public enum ProtectiveEquipmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case faceCover
        case handCover
        case headCover
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectiveEquipmentType] {
            return [
                .faceCover,
                .handCover,
                .headCover
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .faceCover: return "FACE_COVER"
            case .handCover: return "HAND_COVER"
            case .headCover: return "HEAD_COVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about an item of Personal Protective Equipment (PPE) detected by [DetectProtectiveEquipment]. For more information, see [DetectProtectiveEquipment].
    public struct EquipmentDetection {
        /// A bounding box surrounding the item of detected PPE.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has that the bounding box (BoundingBox) contains an item of PPE.
        public var confidence: Swift.Float?
        /// Information about the body part covered by the detected PPE.
        public var coversBodyPart: RekognitionClientTypes.CoversBodyPart?
        /// The type of detected PPE.
        public var type: RekognitionClientTypes.ProtectiveEquipmentType?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            coversBodyPart: RekognitionClientTypes.CoversBodyPart? = nil,
            type: RekognitionClientTypes.ProtectiveEquipmentType? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.coversBodyPart = coversBodyPart
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    /// Information about a body part detected by [DetectProtectiveEquipment] that contains PPE. An array of ProtectiveEquipmentBodyPart objects is returned for each person detected by DetectProtectiveEquipment.
    public struct ProtectiveEquipmentBodyPart {
        /// The confidence that Amazon Rekognition has in the detection accuracy of the detected body part.
        public var confidence: Swift.Float?
        /// An array of Personal Protective Equipment items detected around a body part.
        public var equipmentDetections: [RekognitionClientTypes.EquipmentDetection]?
        /// The detected body part.
        public var name: RekognitionClientTypes.BodyPart?

        public init(
            confidence: Swift.Float? = nil,
            equipmentDetections: [RekognitionClientTypes.EquipmentDetection]? = nil,
            name: RekognitionClientTypes.BodyPart? = nil
        )
        {
            self.confidence = confidence
            self.equipmentDetections = equipmentDetections
            self.name = name
        }
    }

}

extension RekognitionClientTypes {

    public enum EmotionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case angry
        case calm
        case confused
        case disgusted
        case fear
        case happy
        case sad
        case surprised
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [EmotionName] {
            return [
                .angry,
                .calm,
                .confused,
                .disgusted,
                .fear,
                .happy,
                .sad,
                .surprised,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .angry: return "ANGRY"
            case .calm: return "CALM"
            case .confused: return "CONFUSED"
            case .disgusted: return "DISGUSTED"
            case .fear: return "FEAR"
            case .happy: return "HAPPY"
            case .sad: return "SAD"
            case .surprised: return "SURPRISED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// The emotions that appear to be expressed on the face, and the confidence level in the determination. The API is only making a determination of the physical appearance of a person's face. It is not a determination of the person’s internal emotional state and should not be used in such a way. For example, a person pretending to have a sad face might not be sad emotionally.
    public struct Emotion {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Type of emotion detected.
        public var type: RekognitionClientTypes.EmotionName?

        public init(
            confidence: Swift.Float? = nil,
            type: RekognitionClientTypes.EmotionName? = nil
        )
        {
            self.confidence = confidence
            self.type = type
        }
    }

}

extension RekognitionClientTypes {

    public enum LandmarkType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case chinbottom
        case eyeleft
        case eyeright
        case lefteyebrowleft
        case lefteyebrowright
        case lefteyebrowup
        case lefteyedown
        case lefteyeleft
        case lefteyeright
        case lefteyeup
        case leftpupil
        case midjawlineleft
        case midjawlineright
        case mouthdown
        case mouthleft
        case mouthright
        case mouthup
        case nose
        case noseleft
        case noseright
        case righteyebrowleft
        case righteyebrowright
        case righteyebrowup
        case righteyedown
        case righteyeleft
        case righteyeright
        case righteyeup
        case rightpupil
        case upperjawlineleft
        case upperjawlineright
        case sdkUnknown(Swift.String)

        public static var allCases: [LandmarkType] {
            return [
                .chinbottom,
                .eyeleft,
                .eyeright,
                .lefteyebrowleft,
                .lefteyebrowright,
                .lefteyebrowup,
                .lefteyedown,
                .lefteyeleft,
                .lefteyeright,
                .lefteyeup,
                .leftpupil,
                .midjawlineleft,
                .midjawlineright,
                .mouthdown,
                .mouthleft,
                .mouthright,
                .mouthup,
                .nose,
                .noseleft,
                .noseright,
                .righteyebrowleft,
                .righteyebrowright,
                .righteyebrowup,
                .righteyedown,
                .righteyeleft,
                .righteyeright,
                .righteyeup,
                .rightpupil,
                .upperjawlineleft,
                .upperjawlineright
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .chinbottom: return "chinBottom"
            case .eyeleft: return "eyeLeft"
            case .eyeright: return "eyeRight"
            case .lefteyebrowleft: return "leftEyeBrowLeft"
            case .lefteyebrowright: return "leftEyeBrowRight"
            case .lefteyebrowup: return "leftEyeBrowUp"
            case .lefteyedown: return "leftEyeDown"
            case .lefteyeleft: return "leftEyeLeft"
            case .lefteyeright: return "leftEyeRight"
            case .lefteyeup: return "leftEyeUp"
            case .leftpupil: return "leftPupil"
            case .midjawlineleft: return "midJawlineLeft"
            case .midjawlineright: return "midJawlineRight"
            case .mouthdown: return "mouthDown"
            case .mouthleft: return "mouthLeft"
            case .mouthright: return "mouthRight"
            case .mouthup: return "mouthUp"
            case .nose: return "nose"
            case .noseleft: return "noseLeft"
            case .noseright: return "noseRight"
            case .righteyebrowleft: return "rightEyeBrowLeft"
            case .righteyebrowright: return "rightEyeBrowRight"
            case .righteyebrowup: return "rightEyeBrowUp"
            case .righteyedown: return "rightEyeDown"
            case .righteyeleft: return "rightEyeLeft"
            case .righteyeright: return "rightEyeRight"
            case .righteyeup: return "rightEyeUp"
            case .rightpupil: return "rightPupil"
            case .upperjawlineleft: return "upperJawlineLeft"
            case .upperjawlineright: return "upperJawlineRight"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Indicates the location of the landmark on the face.
    public struct Landmark {
        /// Type of landmark.
        public var type: RekognitionClientTypes.LandmarkType?
        /// The x-coordinate of the landmark expressed as a ratio of the width of the image. The x-coordinate is measured from the left-side of the image. For example, if the image is 700 pixels wide and the x-coordinate of the landmark is at 350 pixels, this value is 0.5.
        public var x: Swift.Float?
        /// The y-coordinate of the landmark expressed as a ratio of the height of the image. The y-coordinate is measured from the top of the image. For example, if the image height is 200 pixels and the y-coordinate of the landmark is at 50 pixels, this value is 0.25.
        public var y: Swift.Float?

        public init(
            type: RekognitionClientTypes.LandmarkType? = nil,
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.type = type
            self.x = x
            self.y = y
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates the pose of the face as determined by its pitch, roll, and yaw.
    public struct Pose {
        /// Value representing the face rotation on the pitch axis.
        public var pitch: Swift.Float?
        /// Value representing the face rotation on the roll axis.
        public var roll: Swift.Float?
        /// Value representing the face rotation on the yaw axis.
        public var yaw: Swift.Float?

        public init(
            pitch: Swift.Float? = nil,
            roll: Swift.Float? = nil,
            yaw: Swift.Float? = nil
        )
        {
            self.pitch = pitch
            self.roll = roll
            self.yaw = yaw
        }
    }

}

extension RekognitionClientTypes {
    /// Identifies face image brightness and sharpness.
    public struct ImageQuality {
        /// Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.
        public var brightness: Swift.Float?
        /// Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.
        public var sharpness: Swift.Float?

        public init(
            brightness: Swift.Float? = nil,
            sharpness: Swift.Float? = nil
        )
        {
            self.brightness = brightness
            self.sharpness = sharpness
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is smiling, and the confidence level in the determination.
    public struct Smile {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is smiling or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Provides face metadata for target image faces that are analyzed by CompareFaces and RecognizeCelebrities.
    public struct ComparedFace {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Level of confidence that what the bounding box contains is a face.
        public var confidence: Swift.Float?
        /// The emotions that appear to be expressed on the face, and the confidence level in the determination. Valid values include "Happy", "Sad", "Angry", "Confused", "Disgusted", "Surprised", "Calm", "Unknown", and "Fear".
        public var emotions: [RekognitionClientTypes.Emotion]?
        /// An array of facial landmarks.
        public var landmarks: [RekognitionClientTypes.Landmark]?
        /// Indicates the pose of the face as determined by its pitch, roll, and yaw.
        public var pose: RekognitionClientTypes.Pose?
        /// Identifies face image brightness and sharpness.
        public var quality: RekognitionClientTypes.ImageQuality?
        /// Indicates whether or not the face is smiling, and the confidence level in the determination.
        public var smile: RekognitionClientTypes.Smile?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            emotions: [RekognitionClientTypes.Emotion]? = nil,
            landmarks: [RekognitionClientTypes.Landmark]? = nil,
            pose: RekognitionClientTypes.Pose? = nil,
            quality: RekognitionClientTypes.ImageQuality? = nil,
            smile: RekognitionClientTypes.Smile? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.emotions = emotions
            self.landmarks = landmarks
            self.pose = pose
            self.quality = quality
            self.smile = smile
        }
    }

}

extension RekognitionClientTypes {

    /// A list of enum string of possible gender values that Celebrity returns.
    public enum KnownGenderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case female
        case male
        case nonbinary
        case unlisted
        case sdkUnknown(Swift.String)

        public static var allCases: [KnownGenderType] {
            return [
                .female,
                .male,
                .nonbinary,
                .unlisted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .female: return "Female"
            case .male: return "Male"
            case .nonbinary: return "Nonbinary"
            case .unlisted: return "Unlisted"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// The known gender identity for the celebrity that matches the provided ID. The known gender identity can be Male, Female, Nonbinary, or Unlisted.
    public struct KnownGender {
        /// A string value of the KnownGender info about the Celebrity.
        public var type: RekognitionClientTypes.KnownGenderType?

        public init(
            type: RekognitionClientTypes.KnownGenderType? = nil
        )
        {
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    /// Provides information about a celebrity recognized by the [RecognizeCelebrities] operation.
    public struct Celebrity {
        /// Provides information about the celebrity's face, such as its location on the image.
        public var face: RekognitionClientTypes.ComparedFace?
        /// A unique identifier for the celebrity.
        public var id: Swift.String?
        /// The known gender identity for the celebrity that matches the provided ID. The known gender identity can be Male, Female, Nonbinary, or Unlisted.
        public var knownGender: RekognitionClientTypes.KnownGender?
        /// The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity.
        public var matchConfidence: Swift.Float?
        /// The name of the celebrity.
        public var name: Swift.String?
        /// An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty.
        public var urls: [Swift.String]?

        public init(
            face: RekognitionClientTypes.ComparedFace? = nil,
            id: Swift.String? = nil,
            knownGender: RekognitionClientTypes.KnownGender? = nil,
            matchConfidence: Swift.Float? = nil,
            name: Swift.String? = nil,
            urls: [Swift.String]? = nil
        )
        {
            self.face = face
            self.id = id
            self.knownGender = knownGender
            self.matchConfidence = matchConfidence
            self.name = name
            self.urls = urls
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates the direction the eyes are gazing in (independent of the head pose) as determined by its pitch and yaw.
    public struct EyeDirection {
        /// The confidence that the service has in its predicted eye direction.
        public var confidence: Swift.Float?
        /// Value representing eye direction on the pitch axis.
        public var pitch: Swift.Float?
        /// Value representing eye direction on the yaw axis.
        public var yaw: Swift.Float?

        public init(
            confidence: Swift.Float? = nil,
            pitch: Swift.Float? = nil,
            yaw: Swift.Float? = nil
        )
        {
            self.confidence = confidence
            self.pitch = pitch
            self.yaw = yaw
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
    public struct Eyeglasses {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is wearing eye glasses or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
    public struct EyeOpen {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the eyes on the face are open.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// FaceOccluded should return "true" with a high confidence score if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. FaceOccluded should return "false" with a high confidence score if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others. You can use FaceOccluded to determine if an obstruction on a face negatively impacts using the image for face matching.
    public struct FaceOccluded {
        /// The confidence that the service has detected the presence of a face occlusion.
        public var confidence: Swift.Float?
        /// True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {

    public enum GenderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case female
        case male
        case sdkUnknown(Swift.String)

        public static var allCases: [GenderType] {
            return [
                .female,
                .male
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .female: return "Female"
            case .male: return "Male"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// The predicted gender of a detected face. Amazon Rekognition makes gender binary (male/female) predictions based on the physical appearance of a face in a particular image. This kind of prediction is not designed to categorize a person’s gender identity, and you shouldn't use Amazon Rekognition to make such a determination. For example, a male actor wearing a long-haired wig and earrings for a role might be predicted as female. Using Amazon Rekognition to make gender binary predictions is best suited for use cases where aggregate gender distribution statistics need to be analyzed without identifying specific users. For example, the percentage of female users compared to male users on a social media platform. We don't recommend using gender binary predictions to make decisions that impact an individual's rights, privacy, or access to services.
    public struct Gender {
        /// Level of confidence in the prediction.
        public var confidence: Swift.Float?
        /// The predicted gender of the face.
        public var value: RekognitionClientTypes.GenderType?

        public init(
            confidence: Swift.Float? = nil,
            value: RekognitionClientTypes.GenderType? = nil
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
    public struct MouthOpen {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the mouth on the face is open or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the face has a mustache, and the confidence level in the determination.
    public struct Mustache {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face has mustache or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
    public struct Sunglasses {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is wearing sunglasses or not.
        public var value: Swift.Bool

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    /// Structure containing attributes of the face that the algorithm detected. A FaceDetail object contains either the default facial attributes or all facial attributes. The default attributes are BoundingBox, Confidence, Landmarks, Pose, and Quality. [GetFaceDetection] is the only Amazon Rekognition Video stored video operation that can return a FaceDetail object with all attributes. To specify which attributes to return, use the FaceAttributes input parameter for [StartFaceDetection]. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a FaceAttributes input parameter:
    ///
    /// * GetCelebrityRecognition
    ///
    /// * GetPersonTracking
    ///
    /// * GetFaceSearch
    ///
    ///
    /// The Amazon Rekognition Image [DetectFaces] and [IndexFaces] operations can return all facial attributes. To specify which attributes to return, use the Attributes input parameter for DetectFaces. For IndexFaces, use the DetectAttributes input parameter.
    public struct FaceDetail {
        /// The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.
        public var ageRange: RekognitionClientTypes.AgeRange?
        /// Indicates whether or not the face has a beard, and the confidence level in the determination.
        public var beard: RekognitionClientTypes.Beard?
        /// Bounding box of the face. Default attribute.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree). Default attribute.
        public var confidence: Swift.Float?
        /// The emotions that appear to be expressed on the face, and the confidence level in the determination. The API is only making a determination of the physical appearance of a person's face. It is not a determination of the person’s internal emotional state and should not be used in such a way. For example, a person pretending to have a sad face might not be sad emotionally.
        public var emotions: [RekognitionClientTypes.Emotion]?
        /// Indicates the direction the eyes are gazing in, as defined by pitch and yaw.
        public var eyeDirection: RekognitionClientTypes.EyeDirection?
        /// Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
        public var eyeglasses: RekognitionClientTypes.Eyeglasses?
        /// Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
        public var eyesOpen: RekognitionClientTypes.EyeOpen?
        /// FaceOccluded should return "true" with a high confidence score if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. FaceOccluded should return "false" with a high confidence score if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.
        public var faceOccluded: RekognitionClientTypes.FaceOccluded?
        /// The predicted gender of a detected face.
        public var gender: RekognitionClientTypes.Gender?
        /// Indicates the location of landmarks on the face. Default attribute.
        public var landmarks: [RekognitionClientTypes.Landmark]?
        /// Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
        public var mouthOpen: RekognitionClientTypes.MouthOpen?
        /// Indicates whether or not the face has a mustache, and the confidence level in the determination.
        public var mustache: RekognitionClientTypes.Mustache?
        /// Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.
        public var pose: RekognitionClientTypes.Pose?
        /// Identifies image brightness and sharpness. Default attribute.
        public var quality: RekognitionClientTypes.ImageQuality?
        /// Indicates whether or not the face is smiling, and the confidence level in the determination.
        public var smile: RekognitionClientTypes.Smile?
        /// Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
        public var sunglasses: RekognitionClientTypes.Sunglasses?

        public init(
            ageRange: RekognitionClientTypes.AgeRange? = nil,
            beard: RekognitionClientTypes.Beard? = nil,
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            emotions: [RekognitionClientTypes.Emotion]? = nil,
            eyeDirection: RekognitionClientTypes.EyeDirection? = nil,
            eyeglasses: RekognitionClientTypes.Eyeglasses? = nil,
            eyesOpen: RekognitionClientTypes.EyeOpen? = nil,
            faceOccluded: RekognitionClientTypes.FaceOccluded? = nil,
            gender: RekognitionClientTypes.Gender? = nil,
            landmarks: [RekognitionClientTypes.Landmark]? = nil,
            mouthOpen: RekognitionClientTypes.MouthOpen? = nil,
            mustache: RekognitionClientTypes.Mustache? = nil,
            pose: RekognitionClientTypes.Pose? = nil,
            quality: RekognitionClientTypes.ImageQuality? = nil,
            smile: RekognitionClientTypes.Smile? = nil,
            sunglasses: RekognitionClientTypes.Sunglasses? = nil
        )
        {
            self.ageRange = ageRange
            self.beard = beard
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.emotions = emotions
            self.eyeDirection = eyeDirection
            self.eyeglasses = eyeglasses
            self.eyesOpen = eyesOpen
            self.faceOccluded = faceOccluded
            self.gender = gender
            self.landmarks = landmarks
            self.mouthOpen = mouthOpen
            self.mustache = mustache
            self.pose = pose
            self.quality = quality
            self.smile = smile
            self.sunglasses = sunglasses
        }
    }

}

extension RekognitionClientTypes {
    /// Information about a recognized celebrity.
    public struct CelebrityDetail {
        /// Bounding box around the body of a celebrity.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity.
        public var confidence: Swift.Float?
        /// Face details for the recognized celebrity.
        public var face: RekognitionClientTypes.FaceDetail?
        /// The unique identifier for the celebrity.
        public var id: Swift.String?
        /// Retrieves the known gender for the celebrity.
        public var knownGender: RekognitionClientTypes.KnownGender?
        /// The name of the celebrity.
        public var name: Swift.String?
        /// An array of URLs pointing to additional celebrity information.
        public var urls: [Swift.String]?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            face: RekognitionClientTypes.FaceDetail? = nil,
            id: Swift.String? = nil,
            knownGender: RekognitionClientTypes.KnownGender? = nil,
            name: Swift.String? = nil,
            urls: [Swift.String]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.face = face
            self.id = id
            self.knownGender = knownGender
            self.name = name
            self.urls = urls
        }
    }

}

extension RekognitionClientTypes {
    /// Information about a detected celebrity and the time the celebrity was detected in a stored video. For more information, see GetCelebrityRecognition in the Amazon Rekognition Developer Guide.
    public struct CelebrityRecognition {
        /// Information about a recognized celebrity.
        public var celebrity: RekognitionClientTypes.CelebrityDetail?
        /// The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that Timestamp is not guaranteed to be accurate to the individual frame where the celebrity first appears.
        public var timestamp: Swift.Int

        public init(
            celebrity: RekognitionClientTypes.CelebrityDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.celebrity = celebrity
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {

    public enum CelebrityRecognitionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case id
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [CelebrityRecognitionSortBy] {
            return [
                .id,
                .timestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .id: return "ID"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Type that describes the face Amazon Rekognition chose to compare with the faces in the target. This contains a bounding box for the selected face and confidence level that the bounding box contains a face. Note that Amazon Rekognition selects the largest face in the source image for this comparison.
    public struct ComparedSourceImageFace {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the selected bounding box contains a face.
        public var confidence: Swift.Float?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
        }
    }

}

/// The input image size exceeds the allowed limit. If you are calling DetectProtectiveEquipment, the image size or resolution exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide.
public struct ImageTooLargeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ImageTooLargeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// The provided image format is not supported.
public struct InvalidImageFormatException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidImageFormatException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// Amazon Rekognition is unable to access the S3 object specified in the request.
public struct InvalidS3ObjectException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3ObjectException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

extension RekognitionClientTypes {

    public enum QualityFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case low
        case medium
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [QualityFilter] {
            return [
                .auto,
                .high,
                .low,
                .medium,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Provides the input image either as bytes or an S3 object. You pass image bytes to an Amazon Rekognition API operation by using the Bytes property. For example, you would use the Bytes property to pass an image loaded from a local file system. Image bytes passed by using the Bytes property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide. You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the S3Object property. Images stored in an S3 bucket do not need to be base64-encoded. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    public struct Image {
        /// Blob of image bytes up to 5 MBs. Note that the maximum image size you can pass to DetectCustomLabels is 4MB.
        public var bytes: Foundation.Data?
        /// Identifies an S3 object as the image source.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            bytes: Foundation.Data? = nil,
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.bytes = bytes
            self.s3Object = s3Object
        }
    }

}

public struct CompareFacesInput {
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't compared. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. The default value is NONE. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?
    /// The minimum level of confidence in the face matches that a match must meet to be included in the FaceMatches array.
    public var similarityThreshold: Swift.Float?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var sourceImage: RekognitionClientTypes.Image?
    /// The target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var targetImage: RekognitionClientTypes.Image?

    public init(
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil,
        similarityThreshold: Swift.Float? = nil,
        sourceImage: RekognitionClientTypes.Image? = nil,
        targetImage: RekognitionClientTypes.Image? = nil
    )
    {
        self.qualityFilter = qualityFilter
        self.similarityThreshold = similarityThreshold
        self.sourceImage = sourceImage
        self.targetImage = targetImage
    }
}

extension RekognitionClientTypes {
    /// Provides information about a face in a target image that matches the source image face analyzed by CompareFaces. The Face property contains the bounding box of the face in the target image. The Similarity property is the confidence that the source image face matches the face in the bounding box.
    public struct CompareFacesMatch {
        /// Provides face metadata (bounding box and confidence that the bounding box actually contains a face).
        public var face: RekognitionClientTypes.ComparedFace?
        /// Level of confidence that the faces match.
        public var similarity: Swift.Float?

        public init(
            face: RekognitionClientTypes.ComparedFace? = nil,
            similarity: Swift.Float? = nil
        )
        {
            self.face = face
            self.similarity = similarity
        }
    }

}

extension RekognitionClientTypes {

    public enum OrientationCorrection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rotate0
        case rotate180
        case rotate270
        case rotate90
        case sdkUnknown(Swift.String)

        public static var allCases: [OrientationCorrection] {
            return [
                .rotate0,
                .rotate180,
                .rotate270,
                .rotate90
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rotate0: return "ROTATE_0"
            case .rotate180: return "ROTATE_180"
            case .rotate270: return "ROTATE_270"
            case .rotate90: return "ROTATE_90"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CompareFacesOutput {
    /// An array of faces in the target image that match the source image face. Each CompareFacesMatch object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image.
    public var faceMatches: [RekognitionClientTypes.CompareFacesMatch]?
    /// The face in the source image that was used for comparison.
    public var sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace?
    /// The value of SourceImageOrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// The value of TargetImageOrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// An array of faces in the target image that did not match the source image face.
    public var unmatchedFaces: [RekognitionClientTypes.ComparedFace]?

    public init(
        faceMatches: [RekognitionClientTypes.CompareFacesMatch]? = nil,
        sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace? = nil,
        sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unmatchedFaces: [RekognitionClientTypes.ComparedFace]? = nil
    )
    {
        self.faceMatches = faceMatches
        self.sourceImageFace = sourceImageFace
        self.sourceImageOrientationCorrection = sourceImageOrientationCorrection
        self.targetImageOrientationCorrection = targetImageOrientationCorrection
        self.unmatchedFaces = unmatchedFaces
    }
}

extension RekognitionClientTypes {
    /// Label detection settings to use on a streaming video. Defining the settings is required in the request parameter for [CreateStreamProcessor]. Including this setting in the CreateStreamProcessor request enables you to use the stream processor for label detection. You can then select what you want the stream processor to detect, such as people or pets. When the stream processor has started, one notification is sent for each object class specified. For example, if packages and pets are selected, one SNS notification is published the first time a package is detected and one SNS notification is published the first time a pet is detected, as well as an end-of-session summary.
    public struct ConnectedHomeSettings {
        /// Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: "PERSON", "PET", "PACKAGE", and "ALL".
        /// This member is required.
        public var labels: [Swift.String]?
        /// The minimum confidence required to label an object in the video.
        public var minConfidence: Swift.Float?

        public init(
            labels: [Swift.String]? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.labels = labels
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes {
    /// The label detection settings you want to use in your stream processor. This includes the labels you want the stream processor to detect and the minimum confidence level allowed to label objects.
    public struct ConnectedHomeSettingsForUpdate {
        /// Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: "PERSON", "PET", "PACKAGE", and "ALL".
        public var labels: [Swift.String]?
        /// The minimum confidence required to label an object in the video.
        public var minConfidence: Swift.Float?

        public init(
            labels: [Swift.String]? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.labels = labels
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes {

    public enum ContentClassifier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {

    public enum ContentModerationAggregateBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segments
        case timestamps
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentModerationAggregateBy] {
            return [
                .segments,
                .timestamps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segments: return "SEGMENTS"
            case .timestamps: return "TIMESTAMPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains information regarding the confidence and name of a detected content type.
    public struct ContentType {
        /// The confidence level of the label given
        public var confidence: Swift.Float?
        /// The name of the label
        public var name: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            name: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.name = name
        }
    }

}

extension RekognitionClientTypes {
    /// Provides information about a single type of inappropriate, unwanted, or offensive content found in an image or video. Each type of moderated content has a label within a hierarchical taxonomy. For more information, see Content moderation in the Amazon Rekognition Developer Guide.
    public struct ModerationLabel {
        /// Specifies the confidence that Amazon Rekognition has that the label has been correctly identified. If you don't specify the MinConfidence parameter in the call to DetectModerationLabels, the operation returns labels with a confidence value greater than or equal to 50 percent.
        public var confidence: Swift.Float?
        /// The label name for the type of unsafe content detected in the image.
        public var name: Swift.String?
        /// The name for the parent label. Labels at the top level of the hierarchy have the parent label "".
        public var parentName: Swift.String?
        /// The level of the moderation label with regard to its taxonomy, from 1 to 3.
        public var taxonomyLevel: Swift.Int?

        public init(
            confidence: Swift.Float? = nil,
            name: Swift.String? = nil,
            parentName: Swift.String? = nil,
            taxonomyLevel: Swift.Int? = nil
        )
        {
            self.confidence = confidence
            self.name = name
            self.parentName = parentName
            self.taxonomyLevel = taxonomyLevel
        }
    }

}

extension RekognitionClientTypes {
    /// Information about an inappropriate, unwanted, or offensive content label detection in a stored video.
    public struct ContentModerationDetection {
        /// A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.
        public var contentTypes: [RekognitionClientTypes.ContentType]?
        /// The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.
        public var durationMillis: Swift.Int?
        /// The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.
        public var endTimestampMillis: Swift.Int?
        /// The content moderation label detected by in the stored video.
        public var moderationLabel: RekognitionClientTypes.ModerationLabel?
        /// The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.
        public var startTimestampMillis: Swift.Int?
        /// Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the moderated content first appears.
        public var timestamp: Swift.Int

        public init(
            contentTypes: [RekognitionClientTypes.ContentType]? = nil,
            durationMillis: Swift.Int? = nil,
            endTimestampMillis: Swift.Int? = nil,
            moderationLabel: RekognitionClientTypes.ModerationLabel? = nil,
            startTimestampMillis: Swift.Int? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.contentTypes = contentTypes
            self.durationMillis = durationMillis
            self.endTimestampMillis = endTimestampMillis
            self.moderationLabel = moderationLabel
            self.startTimestampMillis = startTimestampMillis
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {

    public enum ContentModerationSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case name
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentModerationSortBy] {
            return [
                .name,
                .timestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .name: return "NAME"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An Amazon Rekognition service limit was exceeded. For example, if you start too many jobs concurrently, subsequent calls to start operations (ex: StartLabelDetection) will raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Rekognition service limit.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

/// The specified resource is already being used.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

extension RekognitionClientTypes {
    /// The S3 bucket and folder location where training output is placed.
    public struct OutputConfig {
        /// The S3 bucket where training output is placed.
        public var s3Bucket: Swift.String?
        /// The prefix applied to the training output files.
        public var s3KeyPrefix: Swift.String?

        public init(
            s3Bucket: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

public struct CopyProjectVersionInput {
    /// The ARN of the project in the trusted AWS account that you want to copy the model version to.
    /// This member is required.
    public var destinationProjectArn: Swift.String?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training results and manifest files written to the output Amazon S3 bucket (OutputConfig). If you choose to use your own KMS key, you need the following permissions on the KMS key.
    ///
    /// * kms:CreateGrant
    ///
    /// * kms:DescribeKey
    ///
    /// * kms:GenerateDataKey
    ///
    /// * kms:Decrypt
    ///
    ///
    /// If you don't specify a value for KmsKeyId, images copied into the service are encrypted using a key that AWS owns and manages.
    public var kmsKeyId: Swift.String?
    /// The S3 bucket and folder location where the training output for the source model version is placed.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.OutputConfig?
    /// The ARN of the source project in the trusting AWS account.
    /// This member is required.
    public var sourceProjectArn: Swift.String?
    /// The ARN of the model version in the source project that you want to copy to a destination project.
    /// This member is required.
    public var sourceProjectVersionArn: Swift.String?
    /// The key-value tags to assign to the model version.
    public var tags: [Swift.String: Swift.String]?
    /// A name for the version of the model that's copied to the destination project.
    /// This member is required.
    public var versionName: Swift.String?

    public init(
        destinationProjectArn: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        outputConfig: RekognitionClientTypes.OutputConfig? = nil,
        sourceProjectArn: Swift.String? = nil,
        sourceProjectVersionArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.destinationProjectArn = destinationProjectArn
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.sourceProjectArn = sourceProjectArn
        self.sourceProjectVersionArn = sourceProjectVersionArn
        self.tags = tags
        self.versionName = versionName
    }
}

public struct CopyProjectVersionOutput {
    /// The ARN of the copied model version in the destination project.
    public var projectVersionArn: Swift.String?

    public init(
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

/// A resource with the specified ID already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct CreateCollectionInput {
    /// ID for the collection that you are creating.
    /// This member is required.
    public var collectionId: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the collection.
    public var tags: [Swift.String: Swift.String]?

    public init(
        collectionId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.collectionId = collectionId
        self.tags = tags
    }
}

public struct CreateCollectionOutput {
    /// Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources.
    public var collectionArn: Swift.String?
    /// Version number of the face detection model associated with the collection you are creating.
    public var faceModelVersion: Swift.String?
    /// HTTP status code indicating the result of the operation.
    public var statusCode: Swift.Int?

    public init(
        collectionArn: Swift.String? = nil,
        faceModelVersion: Swift.String? = nil,
        statusCode: Swift.Int? = nil
    )
    {
        self.collectionArn = collectionArn
        self.faceModelVersion = faceModelVersion
        self.statusCode = statusCode
    }
}

extension RekognitionClientTypes {
    /// The source that Amazon Rekognition Custom Labels uses to create a dataset. To use an Amazon Sagemaker format manifest file, specify the S3 bucket location in the GroundTruthManifest field. The S3 bucket must be in your AWS account. To create a copy of an existing dataset, specify the Amazon Resource Name (ARN) of an existing dataset in DatasetArn. You need to specify a value for DatasetArn or GroundTruthManifest, but not both. if you supply both values, or if you don't specify any values, an InvalidParameterException exception occurs. For more information, see [CreateDataset].
    public struct DatasetSource {
        /// The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy.
        public var datasetArn: Swift.String?
        /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
        public var groundTruthManifest: RekognitionClientTypes.GroundTruthManifest?

        public init(
            datasetArn: Swift.String? = nil,
            groundTruthManifest: RekognitionClientTypes.GroundTruthManifest? = nil
        )
        {
            self.datasetArn = datasetArn
            self.groundTruthManifest = groundTruthManifest
        }
    }

}

extension RekognitionClientTypes {

    public enum DatasetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case test
        case train
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetType] {
            return [
                .test,
                .train
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .test: return "TEST"
            case .train: return "TRAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDatasetInput {
    /// The source files for the dataset. You can specify the ARN of an existing dataset or specify the Amazon S3 bucket location of an Amazon Sagemaker format manifest file. If you don't specify datasetSource, an empty dataset is created. To add labeled images to the dataset, You can use the console or call [UpdateDatasetEntries].
    public var datasetSource: RekognitionClientTypes.DatasetSource?
    /// The type of the dataset. Specify TRAIN to create a training dataset. Specify TEST to create a test dataset.
    /// This member is required.
    public var datasetType: RekognitionClientTypes.DatasetType?
    /// The ARN of the Amazon Rekognition Custom Labels project to which you want to asssign the dataset.
    /// This member is required.
    public var projectArn: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the dataset.
    public var tags: [Swift.String: Swift.String]?

    public init(
        datasetSource: RekognitionClientTypes.DatasetSource? = nil,
        datasetType: RekognitionClientTypes.DatasetType? = nil,
        projectArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.datasetSource = datasetSource
        self.datasetType = datasetType
        self.projectArn = projectArn
        self.tags = tags
    }
}

public struct CreateDatasetOutput {
    /// The ARN of the created Amazon Rekognition Custom Labels dataset.
    public var datasetArn: Swift.String?

    public init(
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

extension RekognitionClientTypes {
    /// Contains settings that specify the location of an Amazon S3 bucket used to store the output of a Face Liveness session. Note that the S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system.
    public struct LivenessOutputConfig {
        /// The path to an AWS Amazon S3 bucket used to store Face Liveness session results.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// The prefix prepended to the output files for the Face Liveness session results.
        public var s3KeyPrefix: Swift.String?

        public init(
            s3Bucket: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

extension RekognitionClientTypes {
    /// A session settings object. It contains settings for the operation to be performed. It accepts arguments for OutputConfig and AuditImagesLimit.
    public struct CreateFaceLivenessSessionRequestSettings {
        /// Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.
        public var auditImagesLimit: Swift.Int?
        /// Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the s3:PutObject permission on the Amazon S3 bucket.
        public var outputConfig: RekognitionClientTypes.LivenessOutputConfig?

        public init(
            auditImagesLimit: Swift.Int? = nil,
            outputConfig: RekognitionClientTypes.LivenessOutputConfig? = nil
        )
        {
            self.auditImagesLimit = auditImagesLimit
            self.outputConfig = outputConfig
        }
    }

}

public struct CreateFaceLivenessSessionInput {
    /// Idempotent token is used to recognize the Face Liveness request. If the same token is used with multiple CreateFaceLivenessSession requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.
    public var clientRequestToken: Swift.String?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). Used to encrypt audit images and reference images.
    public var kmsKeyId: Swift.String?
    /// A session settings object. It contains settings for the operation to be performed. For Face Liveness, it accepts OutputConfig and AuditImagesLimit.
    public var settings: RekognitionClientTypes.CreateFaceLivenessSessionRequestSettings?

    public init(
        clientRequestToken: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        settings: RekognitionClientTypes.CreateFaceLivenessSessionRequestSettings? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.kmsKeyId = kmsKeyId
        self.settings = settings
    }
}

public struct CreateFaceLivenessSessionOutput {
    /// A unique 128-bit UUID identifying a Face Liveness session. A new sessionID must be used for every Face Liveness check. If a given sessionID is used for subsequent Face Liveness checks, the checks will fail. Additionally, a SessionId expires 3 minutes after it's sent, making all Liveness data associated with the session (e.g., sessionID, reference image, audit images, etc.) unavailable.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        sessionId: Swift.String? = nil
    )
    {
        self.sessionId = sessionId
    }
}

extension RekognitionClientTypes {

    public enum ProjectAutoUpdate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectAutoUpdate] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {

    public enum CustomizationFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contentModeration
        case customLabels
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomizationFeature] {
            return [
                .contentModeration,
                .customLabels
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contentModeration: return "CONTENT_MODERATION"
            case .customLabels: return "CUSTOM_LABELS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateProjectInput {
    /// Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.
    public var autoUpdate: RekognitionClientTypes.ProjectAutoUpdate?
    /// Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.
    public var feature: RekognitionClientTypes.CustomizationFeature?
    /// The name of the project to create.
    /// This member is required.
    public var projectName: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the project.
    public var tags: [Swift.String: Swift.String]?

    public init(
        autoUpdate: RekognitionClientTypes.ProjectAutoUpdate? = nil,
        feature: RekognitionClientTypes.CustomizationFeature? = nil,
        projectName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.autoUpdate = autoUpdate
        self.feature = feature
        self.projectName = projectName
        self.tags = tags
    }
}

public struct CreateProjectOutput {
    /// The Amazon Resource Name (ARN) of the new project. You can use the ARN to configure IAM access to the project.
    public var projectArn: Swift.String?

    public init(
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

extension RekognitionClientTypes {
    /// Configuration options for Content Moderation training.
    public struct CustomizationFeatureContentModerationConfig {
        /// The confidence level you plan to use to identify if unsafe content is present during inference.
        public var confidenceThreshold: Swift.Float?

        public init(
            confidenceThreshold: Swift.Float? = nil
        )
        {
            self.confidenceThreshold = confidenceThreshold
        }
    }

}

extension RekognitionClientTypes {
    /// Feature specific configuration for the training job. Configuration provided for the job must match the feature type parameter associated with project. If configuration and feature type do not match an InvalidParameterException is returned.
    public struct CustomizationFeatureConfig {
        /// Configuration options for Custom Moderation training.
        public var contentModeration: RekognitionClientTypes.CustomizationFeatureContentModerationConfig?

        public init(
            contentModeration: RekognitionClientTypes.CustomizationFeatureContentModerationConfig? = nil
        )
        {
            self.contentModeration = contentModeration
        }
    }

}

extension RekognitionClientTypes {
    /// The dataset used for testing. Optionally, if AutoCreate is set, Amazon Rekognition uses the training dataset to create a test dataset with a temporary split of the training dataset.
    public struct TestingData {
        /// The assets used for testing.
        public var assets: [RekognitionClientTypes.Asset]?
        /// If specified, Rekognition splits training dataset to create a test dataset for the training job.
        public var autoCreate: Swift.Bool

        public init(
            assets: [RekognitionClientTypes.Asset]? = nil,
            autoCreate: Swift.Bool = false
        )
        {
            self.assets = assets
            self.autoCreate = autoCreate
        }
    }

}

extension RekognitionClientTypes {
    /// The dataset used for training.
    public struct TrainingData {
        /// A manifest file that contains references to the training images and ground-truth annotations.
        public var assets: [RekognitionClientTypes.Asset]?

        public init(
            assets: [RekognitionClientTypes.Asset]? = nil
        )
        {
            self.assets = assets
        }
    }

}

public struct CreateProjectVersionInput {
    /// Feature-specific configuration of the training job. If the job configuration does not match the feature type associated with the project, an InvalidParameterException is returned.
    public var featureConfig: RekognitionClientTypes.CustomizationFeatureConfig?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training images, test images, and manifest files copied into the service for the project version. Your source images are unaffected. The key is also used to encrypt training results and manifest files written to the output Amazon S3 bucket (OutputConfig). If you choose to use your own KMS key, you need the following permissions on the KMS key.
    ///
    /// * kms:CreateGrant
    ///
    /// * kms:DescribeKey
    ///
    /// * kms:GenerateDataKey
    ///
    /// * kms:Decrypt
    ///
    ///
    /// If you don't specify a value for KmsKeyId, images copied into the service are encrypted using a key that AWS owns and manages.
    public var kmsKeyId: Swift.String?
    /// The Amazon S3 bucket location to store the results of training. The bucket can be any S3 bucket in your AWS account. You need s3:PutObject permission on the bucket.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.OutputConfig?
    /// The ARN of the Amazon Rekognition project that will manage the project version you want to train.
    /// This member is required.
    public var projectArn: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the project version.
    public var tags: [Swift.String: Swift.String]?
    /// Specifies an external manifest that the service uses to test the project version. If you specify TestingData you must also specify TrainingData. The project must not have any associated datasets.
    public var testingData: RekognitionClientTypes.TestingData?
    /// Specifies an external manifest that the services uses to train the project version. If you specify TrainingData you must also specify TestingData. The project must not have any associated datasets.
    public var trainingData: RekognitionClientTypes.TrainingData?
    /// A description applied to the project version being created.
    public var versionDescription: Swift.String?
    /// A name for the version of the project version. This value must be unique.
    /// This member is required.
    public var versionName: Swift.String?

    public init(
        featureConfig: RekognitionClientTypes.CustomizationFeatureConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        outputConfig: RekognitionClientTypes.OutputConfig? = nil,
        projectArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        testingData: RekognitionClientTypes.TestingData? = nil,
        trainingData: RekognitionClientTypes.TrainingData? = nil,
        versionDescription: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.featureConfig = featureConfig
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.projectArn = projectArn
        self.tags = tags
        self.testingData = testingData
        self.trainingData = trainingData
        self.versionDescription = versionDescription
        self.versionName = versionName
    }
}

public struct CreateProjectVersionOutput {
    /// The ARN of the model or the project version that was created. Use DescribeProjectVersion to get the current status of the training operation.
    public var projectVersionArn: Swift.String?

    public init(
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

extension RekognitionClientTypes {
    /// Allows you to opt in or opt out to share data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public struct StreamProcessorDataSharingPreference {
        /// If this option is set to true, you choose to share data with Rekognition to improve model performance.
        /// This member is required.
        public var optIn: Swift.Bool

        public init(
            optIn: Swift.Bool = false
        )
        {
            self.optIn = optIn
        }
    }

}

extension RekognitionClientTypes {
    /// Kinesis video stream stream that provides the source streaming video for a Amazon Rekognition Video stream processor. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct KinesisVideoStream {
        /// ARN of the Kinesis video stream stream that streams the source video.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RekognitionClientTypes {
    /// Information about the source streaming video.
    public struct StreamProcessorInput {
        /// The Kinesis video stream input stream for the source streaming video.
        public var kinesisVideoStream: RekognitionClientTypes.KinesisVideoStream?

        public init(
            kinesisVideoStream: RekognitionClientTypes.KinesisVideoStream? = nil
        )
        {
            self.kinesisVideoStream = kinesisVideoStream
        }
    }

}

extension RekognitionClientTypes {
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public struct StreamProcessorNotificationChannel {
        /// The Amazon Resource Number (ARN) of the Amazon Amazon Simple Notification Service topic to which Amazon Rekognition posts the completion status.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init(
            snsTopicArn: Swift.String? = nil
        )
        {
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension RekognitionClientTypes {
    /// The Kinesis data stream Amazon Rekognition to which the analysis results of a Amazon Rekognition stream processor are streamed. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct KinesisDataStream {
        /// ARN of the output Amazon Kinesis Data Streams stream.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RekognitionClientTypes {
    /// The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation. These results include the name of the stream processor resource, the session ID of the stream processing session, and labeled timestamps and bounding boxes for detected labels.
    public struct S3Destination {
        /// The name of the Amazon S3 bucket you want to associate with the streaming video project. You must be the owner of the Amazon S3 bucket.
        public var bucket: Swift.String?
        /// The prefix value of the location within the bucket that you want the information to be published to. For more information, see [Using prefixes](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html).
        public var keyPrefix: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension RekognitionClientTypes {
    /// Information about the Amazon Kinesis Data Streams stream to which a Amazon Rekognition Video stream processor streams the results of a video analysis. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct StreamProcessorOutput {
        /// The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.
        public var kinesisDataStream: RekognitionClientTypes.KinesisDataStream?
        /// The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation.
        public var s3Destination: RekognitionClientTypes.S3Destination?

        public init(
            kinesisDataStream: RekognitionClientTypes.KinesisDataStream? = nil,
            s3Destination: RekognitionClientTypes.S3Destination? = nil
        )
        {
            self.kinesisDataStream = kinesisDataStream
            self.s3Destination = s3Destination
        }
    }

}

extension RekognitionClientTypes {
    /// The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image. An array of Point objects makes up a Polygon. A Polygon is returned by [DetectText] and by [DetectCustomLabels]Polygon represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide.
    public struct Point {
        /// The value of the X coordinate for a point on a Polygon.
        public var x: Swift.Float?
        /// The value of the Y coordinate for a point on a Polygon.
        public var y: Swift.Float?

        public init(
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.x = x
            self.y = y
        }
    }

}

extension RekognitionClientTypes {
    /// Specifies a location within the frame that Rekognition checks for objects of interest such as text, labels, or faces. It uses a BoundingBox or Polygon to set a region of the screen. A word, face, or label is included in the region if it is more than half in that region. If there is more than one region, the word, face, or label is compared with all regions of the screen. Any object of interest that is more than half in a region is kept in the results.
    public struct RegionOfInterest {
        /// The box representing a region of interest on screen.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Specifies a shape made up of up to 10 Point objects to define a region of interest.
        public var polygon: [RekognitionClientTypes.Point]?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            polygon: [RekognitionClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension RekognitionClientTypes {
    /// Input face recognition parameters for an Amazon Rekognition stream processor. Includes the collection to use for face recognition and the face attributes to detect. Defining the settings is required in the request parameter for [CreateStreamProcessor].
    public struct FaceSearchSettings {
        /// The ID of a collection that contains faces that you want to search for.
        public var collectionId: Swift.String?
        /// Minimum face match confidence score that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted, and values lower than 80 are set to 80.
        public var faceMatchThreshold: Swift.Float?

        public init(
            collectionId: Swift.String? = nil,
            faceMatchThreshold: Swift.Float? = nil
        )
        {
            self.collectionId = collectionId
            self.faceMatchThreshold = faceMatchThreshold
        }
    }

}

extension RekognitionClientTypes {
    /// Input parameters used in a streaming video analyzed by a Amazon Rekognition stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    public struct StreamProcessorSettings {
        /// Label detection settings to use on a streaming video. Defining the settings is required in the request parameter for [CreateStreamProcessor]. Including this setting in the CreateStreamProcessor request enables you to use the stream processor for label detection. You can then select what you want the stream processor to detect, such as people or pets. When the stream processor has started, one notification is sent for each object class specified. For example, if packages and pets are selected, one SNS notification is published the first time a package is detected and one SNS notification is published the first time a pet is detected, as well as an end-of-session summary.
        public var connectedHome: RekognitionClientTypes.ConnectedHomeSettings?
        /// Face search settings to use on a streaming video.
        public var faceSearch: RekognitionClientTypes.FaceSearchSettings?

        public init(
            connectedHome: RekognitionClientTypes.ConnectedHomeSettings? = nil,
            faceSearch: RekognitionClientTypes.FaceSearchSettings? = nil
        )
        {
            self.connectedHome = connectedHome
            self.faceSearch = faceSearch
        }
    }

}

public struct CreateStreamProcessorInput {
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is StreamProcessorInput. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor. You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt results and data published to your Amazon S3 bucket, which includes image frames and hero images. Your source images are unaffected.
    public var kmsKeyId: Swift.String?
    /// An identifier you assign to the stream processor. You can use Name to manage the stream processor. For example, you can get the current status of the stream processor by calling [DescribeStreamProcessor]. Name is idempotent. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is StreamProcessorOutput. This must be a [S3Destination] of an Amazon S3 bucket that you own for a label detection stream processor or a Kinesis data stream ARN for a face search stream processor.
    /// This member is required.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. You can specify up to 10 regions of interest, and each region has either a polygon or a bounding box. This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    /// This member is required.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// A set of tags (key-value pairs) that you want to attach to the stream processor.
    public var tags: [Swift.String: Swift.String]?

    public init(
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.tags = tags
    }
}

public struct CreateStreamProcessorOutput {
    /// Amazon Resource Number for the newly created stream processor.
    public var streamProcessorArn: Swift.String?

    public init(
        streamProcessorArn: Swift.String? = nil
    )
    {
        self.streamProcessorArn = streamProcessorArn
    }
}

public struct CreateUserInput {
    /// Idempotent token used to identify the request to CreateUser. If you use the same token with multiple CreateUser requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.
    public var clientRequestToken: Swift.String?
    /// The ID of an existing collection to which the new UserID needs to be created.
    /// This member is required.
    public var collectionId: Swift.String?
    /// ID for the UserID to be created. This ID needs to be unique within the collection.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.userId = userId
    }
}

public struct CreateUserOutput {

    public init() { }
}

extension RekognitionClientTypes {
    /// Information about where an object ([DetectCustomLabels]) or text ([DetectText]) is located on an image.
    public struct Geometry {
        /// An axis-aligned coarse representation of the detected item's location on the image.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the detected item.
        public var polygon: [RekognitionClientTypes.Point]?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            polygon: [RekognitionClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension RekognitionClientTypes {
    /// A custom label detected in an image by a call to [DetectCustomLabels].
    public struct CustomLabel {
        /// The confidence that the model has in the detection of the custom label. The range is 0-100. A higher value indicates a higher confidence.
        public var confidence: Swift.Float?
        /// The location of the detected object on the image that corresponds to the custom label. Includes an axis aligned coarse bounding box surrounding the object and a finer grain polygon for more accurate spatial information.
        public var geometry: RekognitionClientTypes.Geometry?
        /// The name of the custom label.
        public var name: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            geometry: RekognitionClientTypes.Geometry? = nil,
            name: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.name = name
        }
    }

}

extension RekognitionClientTypes {
    /// Describes updates or additions to a dataset. A Single update or addition is an entry (JSON Line) that provides information about a single image. To update an existing entry, you match the source-ref field of the update entry with the source-ref filed of the entry that you want to update. If the source-ref field doesn't match an existing entry, the entry is added to dataset as a new entry.
    public struct DatasetChanges {
        /// A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling [UpdateDatasetEntries]. If you are using an AWS SDK to call UpdateDatasetEntries, you don't need to encode Changes as the SDK encodes the data for you. For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the Amazon Rekognition Custom Labels Developer Guide.
        /// This member is required.
        public var groundTruth: Foundation.Data?

        public init(
            groundTruth: Foundation.Data? = nil
        )
        {
            self.groundTruth = groundTruth
        }
    }

}

extension RekognitionClientTypes {
    /// Provides statistics about a dataset. For more information, see [DescribeDataset].
    public struct DatasetStats {
        /// The total number of entries that contain at least one error.
        public var errorEntries: Swift.Int?
        /// The total number of images in the dataset that have labels.
        public var labeledEntries: Swift.Int?
        /// The total number of images in the dataset.
        public var totalEntries: Swift.Int?
        /// The total number of labels declared in the dataset.
        public var totalLabels: Swift.Int?

        public init(
            errorEntries: Swift.Int? = nil,
            labeledEntries: Swift.Int? = nil,
            totalEntries: Swift.Int? = nil,
            totalLabels: Swift.Int? = nil
        )
        {
            self.errorEntries = errorEntries
            self.labeledEntries = labeledEntries
            self.totalEntries = totalEntries
            self.totalLabels = totalLabels
        }
    }

}

extension RekognitionClientTypes {

    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {

    public enum DatasetStatusMessageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clientError
        case serviceError
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatusMessageCode] {
            return [
                .clientError,
                .serviceError,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serviceError: return "SERVICE_ERROR"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// A description for a dataset. For more information, see [DescribeDataset]. The status fields Status, StatusMessage, and StatusMessageCode reflect the last operation on the dataset.
    public struct DatasetDescription {
        /// The Unix timestamp for the time and date that the dataset was created.
        public var creationTimestamp: Foundation.Date?
        /// The status message code for the dataset.
        public var datasetStats: RekognitionClientTypes.DatasetStats?
        /// The Unix timestamp for the date and time that the dataset was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The status of the dataset.
        public var status: RekognitionClientTypes.DatasetStatus?
        /// The status message for the dataset.
        public var statusMessage: Swift.String?
        /// The status message code for the dataset operation. If a service error occurs, try the API call again later. If a client error occurs, check the input parameters to the dataset API call that failed.
        public var statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode?

        public init(
            creationTimestamp: Foundation.Date? = nil,
            datasetStats: RekognitionClientTypes.DatasetStats? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            status: RekognitionClientTypes.DatasetStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.datasetStats = datasetStats
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
            self.statusMessage = statusMessage
            self.statusMessageCode = statusMessageCode
        }
    }

}

extension RekognitionClientTypes {
    /// Statistics about a label used in a dataset. For more information, see [DatasetLabelDescription].
    public struct DatasetLabelStats {
        /// The total number of images that have the label assigned to a bounding box.
        public var boundingBoxCount: Swift.Int?
        /// The total number of images that use the label.
        public var entryCount: Swift.Int?

        public init(
            boundingBoxCount: Swift.Int? = nil,
            entryCount: Swift.Int? = nil
        )
        {
            self.boundingBoxCount = boundingBoxCount
            self.entryCount = entryCount
        }
    }

}

extension RekognitionClientTypes {
    /// Describes a dataset label. For more information, see [ListDatasetLabels].
    public struct DatasetLabelDescription {
        /// The name of the label.
        public var labelName: Swift.String?
        /// Statistics about the label.
        public var labelStats: RekognitionClientTypes.DatasetLabelStats?

        public init(
            labelName: Swift.String? = nil,
            labelStats: RekognitionClientTypes.DatasetLabelStats? = nil
        )
        {
            self.labelName = labelName
            self.labelStats = labelStats
        }
    }

}

extension RekognitionClientTypes {
    /// Summary information for an Amazon Rekognition Custom Labels dataset. For more information, see [ProjectDescription].
    public struct DatasetMetadata {
        /// The Unix timestamp for the date and time that the dataset was created.
        public var creationTimestamp: Foundation.Date?
        /// The Amazon Resource Name (ARN) for the dataset.
        public var datasetArn: Swift.String?
        /// The type of the dataset.
        public var datasetType: RekognitionClientTypes.DatasetType?
        /// The status for the dataset.
        public var status: RekognitionClientTypes.DatasetStatus?
        /// The status message for the dataset.
        public var statusMessage: Swift.String?
        /// The status message code for the dataset operation. If a service error occurs, try the API call again later. If a client error occurs, check the input parameters to the dataset API call that failed.
        public var statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode?

        public init(
            creationTimestamp: Foundation.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetType: RekognitionClientTypes.DatasetType? = nil,
            status: RekognitionClientTypes.DatasetStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.datasetArn = datasetArn
            self.datasetType = datasetType
            self.status = status
            self.statusMessage = statusMessage
            self.statusMessageCode = statusMessageCode
        }
    }

}

public struct DeleteCollectionInput {
    /// ID of the collection to delete.
    /// This member is required.
    public var collectionId: Swift.String?

    public init(
        collectionId: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
    }
}

public struct DeleteCollectionOutput {
    /// HTTP status code that indicates the result of the operation.
    public var statusCode: Swift.Int?

    public init(
        statusCode: Swift.Int? = nil
    )
    {
        self.statusCode = statusCode
    }
}

public struct DeleteDatasetInput {
    /// The ARN of the Amazon Rekognition Custom Labels dataset that you want to delete.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init(
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

public struct DeleteDatasetOutput {

    public init() { }
}

public struct DeleteFacesInput {
    /// Collection from which to remove the specific faces.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of face IDs to delete.
    /// This member is required.
    public var faceIds: [Swift.String]?

    public init(
        collectionId: Swift.String? = nil,
        faceIds: [Swift.String]? = nil
    )
    {
        self.collectionId = collectionId
        self.faceIds = faceIds
    }
}

extension RekognitionClientTypes {

    public enum UnsuccessfulFaceDeletionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case associatedToAnExistingUser
        case faceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [UnsuccessfulFaceDeletionReason] {
            return [
                .associatedToAnExistingUser,
                .faceNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .associatedToAnExistingUser: return "ASSOCIATED_TO_AN_EXISTING_USER"
            case .faceNotFound: return "FACE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains metadata like FaceId, UserID, and Reasons, for a face that was unsuccessfully deleted.
    public struct UnsuccessfulFaceDeletion {
        /// A unique identifier assigned to the face.
        public var faceId: Swift.String?
        /// The reason why the deletion was unsuccessful.
        public var reasons: [RekognitionClientTypes.UnsuccessfulFaceDeletionReason]?
        /// A provided ID for the UserID. Unique within the collection.
        public var userId: Swift.String?

        public init(
            faceId: Swift.String? = nil,
            reasons: [RekognitionClientTypes.UnsuccessfulFaceDeletionReason]? = nil,
            userId: Swift.String? = nil
        )
        {
            self.faceId = faceId
            self.reasons = reasons
            self.userId = userId
        }
    }

}

public struct DeleteFacesOutput {
    /// An array of strings (face IDs) of the faces that were deleted.
    public var deletedFaces: [Swift.String]?
    /// An array of any faces that weren't deleted.
    public var unsuccessfulFaceDeletions: [RekognitionClientTypes.UnsuccessfulFaceDeletion]?

    public init(
        deletedFaces: [Swift.String]? = nil,
        unsuccessfulFaceDeletions: [RekognitionClientTypes.UnsuccessfulFaceDeletion]? = nil
    )
    {
        self.deletedFaces = deletedFaces
        self.unsuccessfulFaceDeletions = unsuccessfulFaceDeletions
    }
}

public struct DeleteProjectInput {
    /// The Amazon Resource Name (ARN) of the project that you want to delete.
    /// This member is required.
    public var projectArn: Swift.String?

    public init(
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

extension RekognitionClientTypes {

    public enum ProjectStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectStatus] {
            return [
                .created,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteProjectOutput {
    /// The current status of the delete project operation.
    public var status: RekognitionClientTypes.ProjectStatus?

    public init(
        status: RekognitionClientTypes.ProjectStatus? = nil
    )
    {
        self.status = status
    }
}

/// The supplied revision id for the project policy is invalid.
public struct InvalidPolicyRevisionIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicyRevisionIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct DeleteProjectPolicyInput {
    /// The name of the policy that you want to delete.
    /// This member is required.
    public var policyName: Swift.String?
    /// The ID of the project policy revision that you want to delete.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that the project policy you want to delete is attached to.
    /// This member is required.
    public var projectArn: Swift.String?

    public init(
        policyName: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.policyRevisionId = policyRevisionId
        self.projectArn = projectArn
    }
}

public struct DeleteProjectPolicyOutput {

    public init() { }
}

public struct DeleteProjectVersionInput {
    /// The Amazon Resource Name (ARN) of the project version that you want to delete.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init(
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

extension RekognitionClientTypes {

    public enum ProjectVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copyingCompleted
        case copyingFailed
        case copyingInProgress
        case deleting
        case deprecated
        case expired
        case failed
        case running
        case starting
        case stopped
        case stopping
        case trainingCompleted
        case trainingFailed
        case trainingInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectVersionStatus] {
            return [
                .copyingCompleted,
                .copyingFailed,
                .copyingInProgress,
                .deleting,
                .deprecated,
                .expired,
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .trainingCompleted,
                .trainingFailed,
                .trainingInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copyingCompleted: return "COPYING_COMPLETED"
            case .copyingFailed: return "COPYING_FAILED"
            case .copyingInProgress: return "COPYING_IN_PROGRESS"
            case .deleting: return "DELETING"
            case .deprecated: return "DEPRECATED"
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .trainingCompleted: return "TRAINING_COMPLETED"
            case .trainingFailed: return "TRAINING_FAILED"
            case .trainingInProgress: return "TRAINING_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteProjectVersionOutput {
    /// The status of the deletion operation.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init(
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

public struct DeleteStreamProcessorInput {
    /// The name of the stream processor you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteStreamProcessorOutput {

    public init() { }
}

public struct DeleteUserInput {
    /// Idempotent token used to identify the request to DeleteUser. If you use the same token with multiple DeleteUser requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.
    public var clientRequestToken: Swift.String?
    /// The ID of an existing collection from which the UserID needs to be deleted.
    /// This member is required.
    public var collectionId: Swift.String?
    /// ID for the UserID to be deleted.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.userId = userId
    }
}

public struct DeleteUserOutput {

    public init() { }
}

public struct DescribeCollectionInput {
    /// The ID of the collection to describe.
    /// This member is required.
    public var collectionId: Swift.String?

    public init(
        collectionId: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
    }
}

public struct DescribeCollectionOutput {
    /// The Amazon Resource Name (ARN) of the collection.
    public var collectionARN: Swift.String?
    /// The number of milliseconds since the Unix epoch time until the creation of the collection. The Unix epoch time is 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970.
    public var creationTimestamp: Foundation.Date?
    /// The number of faces that are indexed into the collection. To index faces into a collection, use [IndexFaces].
    public var faceCount: Swift.Int?
    /// The version of the face model that's used by the collection for face detection. For more information, see Model versioning in the Amazon Rekognition Developer Guide.
    public var faceModelVersion: Swift.String?
    /// The number of UserIDs assigned to the specified colleciton.
    public var userCount: Swift.Int?

    public init(
        collectionARN: Swift.String? = nil,
        creationTimestamp: Foundation.Date? = nil,
        faceCount: Swift.Int? = nil,
        faceModelVersion: Swift.String? = nil,
        userCount: Swift.Int? = nil
    )
    {
        self.collectionARN = collectionARN
        self.creationTimestamp = creationTimestamp
        self.faceCount = faceCount
        self.faceModelVersion = faceModelVersion
        self.userCount = userCount
    }
}

public struct DescribeDatasetInput {
    /// The Amazon Resource Name (ARN) of the dataset that you want to describe.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init(
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

public struct DescribeDatasetOutput {
    /// The description for the dataset.
    public var datasetDescription: RekognitionClientTypes.DatasetDescription?

    public init(
        datasetDescription: RekognitionClientTypes.DatasetDescription? = nil
    )
    {
        self.datasetDescription = datasetDescription
    }
}

/// Pagination token in the request is not valid.
public struct InvalidPaginationTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPaginationTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct DescribeProjectsInput {
    /// Specifies the type of customization to filter projects by. If no value is specified, CUSTOM_LABELS is used as a default.
    public var features: [RekognitionClientTypes.CustomizationFeature]?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of the projects that you want Rekognition to describe. If you don't specify a value, the response includes descriptions for all the projects in your AWS account.
    public var projectNames: [Swift.String]?

    public init(
        features: [RekognitionClientTypes.CustomizationFeature]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectNames: [Swift.String]? = nil
    )
    {
        self.features = features
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectNames = projectNames
    }
}

extension RekognitionClientTypes {
    /// A description of an Amazon Rekognition Custom Labels project. For more information, see [DescribeProjects].
    public struct ProjectDescription {
        /// Indicates whether automatic retraining will be attempted for the versions of the project. Applies only to adapters.
        public var autoUpdate: RekognitionClientTypes.ProjectAutoUpdate?
        /// The Unix timestamp for the date and time that the project was created.
        public var creationTimestamp: Foundation.Date?
        /// Information about the training and test datasets in the project.
        public var datasets: [RekognitionClientTypes.DatasetMetadata]?
        /// Specifies the project that is being customized.
        public var feature: RekognitionClientTypes.CustomizationFeature?
        /// The Amazon Resource Name (ARN) of the project.
        public var projectArn: Swift.String?
        /// The current status of the project.
        public var status: RekognitionClientTypes.ProjectStatus?

        public init(
            autoUpdate: RekognitionClientTypes.ProjectAutoUpdate? = nil,
            creationTimestamp: Foundation.Date? = nil,
            datasets: [RekognitionClientTypes.DatasetMetadata]? = nil,
            feature: RekognitionClientTypes.CustomizationFeature? = nil,
            projectArn: Swift.String? = nil,
            status: RekognitionClientTypes.ProjectStatus? = nil
        )
        {
            self.autoUpdate = autoUpdate
            self.creationTimestamp = creationTimestamp
            self.datasets = datasets
            self.feature = feature
            self.projectArn = projectArn
            self.status = status
        }
    }

}

public struct DescribeProjectsOutput {
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of project descriptions. The list is sorted by the date and time the projects are created.
    public var projectDescriptions: [RekognitionClientTypes.ProjectDescription]?

    public init(
        nextToken: Swift.String? = nil,
        projectDescriptions: [RekognitionClientTypes.ProjectDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectDescriptions = projectDescriptions
    }
}

public struct DescribeProjectVersionsInput {
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that contains the model/adapter you want to describe.
    /// This member is required.
    public var projectArn: Swift.String?
    /// A list of model or project version names that you want to describe. You can add up to 10 model or project version names to the list. If you don't specify a value, all project version descriptions are returned. A version name is part of a project version ARN. For example, my-model.2020-01-21T09.10.15 is the version name in the following ARN. arn:aws:rekognition:us-east-1:123456789012:project/getting-started/version/my-model.2020-01-21T09.10.15/1234567890123.
    public var versionNames: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectArn: Swift.String? = nil,
        versionNames: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectArn = projectArn
        self.versionNames = versionNames
    }
}

extension RekognitionClientTypes {
    /// The S3 bucket that contains the training summary. The training summary includes aggregated evaluation metrics for the entire testing dataset and metrics for each individual label. You get the training summary S3 bucket location by calling [DescribeProjectVersions].
    public struct Summary {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {
    /// The evaluation results for the training of a model.
    public struct EvaluationResult {
        /// The F1 score for the evaluation of all labels. The F1 score metric evaluates the overall precision and recall performance of the model as a single value. A higher value indicates better precision and recall performance. A lower score indicates that precision, recall, or both are performing poorly.
        public var f1Score: Swift.Float?
        /// The S3 bucket that contains the training summary.
        public var summary: RekognitionClientTypes.Summary?

        public init(
            f1Score: Swift.Float? = nil,
            summary: RekognitionClientTypes.Summary? = nil
        )
        {
            self.f1Score = f1Score
            self.summary = summary
        }
    }

}

extension RekognitionClientTypes {
    /// Contains the Amazon S3 bucket location of the validation data for a model training job. The validation data includes error information for individual JSON Lines in the dataset. For more information, see Debugging a Failed Model Training in the Amazon Rekognition Custom Labels Developer Guide. You get the ValidationData object for the training dataset ([TrainingDataResult]) and the test dataset ([TestingDataResult]) by calling [DescribeProjectVersions]. The assets array contains a single [Asset] object. The [GroundTruthManifest] field of the Asset object contains the S3 bucket location of the validation data.
    public struct ValidationData {
        /// The assets that comprise the validation data.
        public var assets: [RekognitionClientTypes.Asset]?

        public init(
            assets: [RekognitionClientTypes.Asset]? = nil
        )
        {
            self.assets = assets
        }
    }

}

extension RekognitionClientTypes {
    /// Sagemaker Groundtruth format manifest files for the input, output and validation datasets that are used and created during testing.
    public struct TestingDataResult {
        /// The testing dataset that was supplied for training.
        public var input: RekognitionClientTypes.TestingData?
        /// The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues.
        public var output: RekognitionClientTypes.TestingData?
        /// The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.
        public var validation: RekognitionClientTypes.ValidationData?

        public init(
            input: RekognitionClientTypes.TestingData? = nil,
            output: RekognitionClientTypes.TestingData? = nil,
            validation: RekognitionClientTypes.ValidationData? = nil
        )
        {
            self.input = input
            self.output = output
            self.validation = validation
        }
    }

}

extension RekognitionClientTypes {
    /// The data validation manifest created for the training dataset during model training.
    public struct TrainingDataResult {
        /// The training data that you supplied.
        public var input: RekognitionClientTypes.TrainingData?
        /// Reference to images (assets) that were actually used during training with trained model predictions.
        public var output: RekognitionClientTypes.TrainingData?
        /// A manifest that you supplied for training, with validation results for each line.
        public var validation: RekognitionClientTypes.ValidationData?

        public init(
            input: RekognitionClientTypes.TrainingData? = nil,
            output: RekognitionClientTypes.TrainingData? = nil,
            validation: RekognitionClientTypes.ValidationData? = nil
        )
        {
            self.input = input
            self.output = output
            self.validation = validation
        }
    }

}

extension RekognitionClientTypes {
    /// A description of a version of a Amazon Rekognition project version.
    public struct ProjectVersionDescription {
        /// The base detection model version used to create the project version.
        public var baseModelVersion: Swift.String?
        /// The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.
        public var billableTrainingTimeInSeconds: Swift.Int?
        /// The Unix datetime for the date and time that training started.
        public var creationTimestamp: Foundation.Date?
        /// The training results. EvaluationResult is only returned if training is successful.
        public var evaluationResult: RekognitionClientTypes.EvaluationResult?
        /// The feature that was customized.
        public var feature: RekognitionClientTypes.CustomizationFeature?
        /// Feature specific configuration that was applied during training.
        public var featureConfig: RekognitionClientTypes.CustomizationFeatureConfig?
        /// The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training.
        public var kmsKeyId: Swift.String?
        /// The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.
        public var manifestSummary: RekognitionClientTypes.GroundTruthManifest?
        /// The maximum number of inference units Amazon Rekognition uses to auto-scale the model. Applies only to Custom Labels projects. For more information, see [StartProjectVersion].
        public var maxInferenceUnits: Swift.Int?
        /// The minimum number of inference units used by the model. Applies only to Custom Labels projects. For more information, see [StartProjectVersion].
        public var minInferenceUnits: Swift.Int?
        /// The location where training results are saved.
        public var outputConfig: RekognitionClientTypes.OutputConfig?
        /// The Amazon Resource Name (ARN) of the project version.
        public var projectVersionArn: Swift.String?
        /// If the model version was copied from a different project, SourceProjectVersionArn contains the ARN of the source model version.
        public var sourceProjectVersionArn: Swift.String?
        /// The current status of the model version.
        public var status: RekognitionClientTypes.ProjectVersionStatus?
        /// A descriptive message for an error or warning that occurred.
        public var statusMessage: Swift.String?
        /// Contains information about the testing results.
        public var testingDataResult: RekognitionClientTypes.TestingDataResult?
        /// Contains information about the training results.
        public var trainingDataResult: RekognitionClientTypes.TrainingDataResult?
        /// The Unix date and time that training of the model ended.
        public var trainingEndTimestamp: Foundation.Date?
        /// A user-provided description of the project version.
        public var versionDescription: Swift.String?

        public init(
            baseModelVersion: Swift.String? = nil,
            billableTrainingTimeInSeconds: Swift.Int? = nil,
            creationTimestamp: Foundation.Date? = nil,
            evaluationResult: RekognitionClientTypes.EvaluationResult? = nil,
            feature: RekognitionClientTypes.CustomizationFeature? = nil,
            featureConfig: RekognitionClientTypes.CustomizationFeatureConfig? = nil,
            kmsKeyId: Swift.String? = nil,
            manifestSummary: RekognitionClientTypes.GroundTruthManifest? = nil,
            maxInferenceUnits: Swift.Int? = nil,
            minInferenceUnits: Swift.Int? = nil,
            outputConfig: RekognitionClientTypes.OutputConfig? = nil,
            projectVersionArn: Swift.String? = nil,
            sourceProjectVersionArn: Swift.String? = nil,
            status: RekognitionClientTypes.ProjectVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            testingDataResult: RekognitionClientTypes.TestingDataResult? = nil,
            trainingDataResult: RekognitionClientTypes.TrainingDataResult? = nil,
            trainingEndTimestamp: Foundation.Date? = nil,
            versionDescription: Swift.String? = nil
        )
        {
            self.baseModelVersion = baseModelVersion
            self.billableTrainingTimeInSeconds = billableTrainingTimeInSeconds
            self.creationTimestamp = creationTimestamp
            self.evaluationResult = evaluationResult
            self.feature = feature
            self.featureConfig = featureConfig
            self.kmsKeyId = kmsKeyId
            self.manifestSummary = manifestSummary
            self.maxInferenceUnits = maxInferenceUnits
            self.minInferenceUnits = minInferenceUnits
            self.outputConfig = outputConfig
            self.projectVersionArn = projectVersionArn
            self.sourceProjectVersionArn = sourceProjectVersionArn
            self.status = status
            self.statusMessage = statusMessage
            self.testingDataResult = testingDataResult
            self.trainingDataResult = trainingDataResult
            self.trainingEndTimestamp = trainingEndTimestamp
            self.versionDescription = versionDescription
        }
    }

}

public struct DescribeProjectVersionsOutput {
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of project version descriptions. The list is sorted by the creation date and time of the project versions, latest to earliest.
    public var projectVersionDescriptions: [RekognitionClientTypes.ProjectVersionDescription]?

    public init(
        nextToken: Swift.String? = nil,
        projectVersionDescriptions: [RekognitionClientTypes.ProjectVersionDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectVersionDescriptions = projectVersionDescriptions
    }
}

public struct DescribeStreamProcessorInput {
    /// Name of the stream processor for which you want information.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension RekognitionClientTypes {

    public enum StreamProcessorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case running
        case starting
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamProcessorStatus] {
            return [
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeStreamProcessorOutput {
    /// Date and time the stream processor was created
    public var creationTimestamp: Foundation.Date?
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream that provides the source streaming video.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors.
    public var kmsKeyId: Swift.String?
    /// The time, in Unix format, the stream processor was last updated. For example, when the stream processor moves from a running state to a failed state, or when the user starts or stops the stream processor.
    public var lastUpdateTimestamp: Foundation.Date?
    /// Name of the stream processor.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream to which Amazon Rekognition Video puts the analysis results.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. This is an optional parameter for label detection stream processors.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// ARN of the IAM role that allows access to the stream processor.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// Current status of the stream processor.
    public var status: RekognitionClientTypes.StreamProcessorStatus?
    /// Detailed status message about the stream processor.
    public var statusMessage: Swift.String?
    /// ARN of the stream processor.
    public var streamProcessorArn: Swift.String?

    public init(
        creationTimestamp: Foundation.Date? = nil,
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        lastUpdateTimestamp: Foundation.Date? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        status: RekognitionClientTypes.StreamProcessorStatus? = nil,
        statusMessage: Swift.String? = nil,
        streamProcessorArn: Swift.String? = nil
    )
    {
        self.creationTimestamp = creationTimestamp
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.lastUpdateTimestamp = lastUpdateTimestamp
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.status = status
        self.statusMessage = statusMessage
        self.streamProcessorArn = streamProcessorArn
    }
}

/// The requested resource isn't ready. For example, this exception occurs when you call DetectCustomLabels with a model version that isn't deployed.
public struct ResourceNotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotReadyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct DetectCustomLabelsInput {
    /// Provides the input image either as bytes or an S3 object. You pass image bytes to an Amazon Rekognition API operation by using the Bytes property. For example, you would use the Bytes property to pass an image loaded from a local file system. Image bytes passed by using the Bytes property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide. You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the S3Object property. Images stored in an S3 bucket do not need to be base64-encoded. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of results you want the service to return in the response. The service returns the specified number of highest confidence labels ranked from highest confidence to lowest.
    public var maxResults: Swift.Int?
    /// Specifies the minimum confidence level for the labels to return. DetectCustomLabels doesn't return any labels with a confidence value that's lower than this specified value. If you specify a value of 0, DetectCustomLabels returns all labels, regardless of the assumed threshold applied to each label. If you don't specify a value for MinConfidence, DetectCustomLabels returns labels based on the assumed threshold of each label.
    public var minConfidence: Swift.Float?
    /// The ARN of the model version that you want to use. Only models associated with Custom Labels projects accepted by the operation. If a provided ARN refers to a model version associated with a project for a different feature type, then an InvalidParameterException is returned.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init(
        image: RekognitionClientTypes.Image? = nil,
        maxResults: Swift.Int? = nil,
        minConfidence: Swift.Float? = nil,
        projectVersionArn: Swift.String? = nil
    )
    {
        self.image = image
        self.maxResults = maxResults
        self.minConfidence = minConfidence
        self.projectVersionArn = projectVersionArn
    }
}

public struct DetectCustomLabelsOutput {
    /// An array of custom labels detected in the input image.
    public var customLabels: [RekognitionClientTypes.CustomLabel]?

    public init(
        customLabels: [RekognitionClientTypes.CustomLabel]? = nil
    )
    {
        self.customLabels = customLabels
    }
}

public struct DetectFacesInput {
    /// An array of facial attributes you want to be returned. A DEFAULT subset of facial attributes - BoundingBox, Confidence, Pose, Quality, and Landmarks - will always be returned. You can request for specific facial attributes (in addition to the default list) - by using ["DEFAULT", "FACE_OCCLUDED"] or just ["FACE_OCCLUDED"]. You can request for all facial attributes by using ["ALL"]. Requesting more attributes may increase response time. If you provide both, ["ALL", "DEFAULT"], the service uses a logical "AND" operator to determine which attributes to return (in this case, all attributes). Note that while the FaceOccluded and EyeDirection attributes are supported when using DetectFaces, they aren't supported when analyzing videos with StartFaceDetection and GetFaceDetection.
    public var attributes: [RekognitionClientTypes.Attribute]?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init(
        attributes: [RekognitionClientTypes.Attribute]? = nil,
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.attributes = attributes
        self.image = image
    }
}

public struct DetectFacesOutput {
    /// Details of each face found in the image.
    public var faceDetails: [RekognitionClientTypes.FaceDetail]?
    /// The value of OrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?

    public init(
        faceDetails: [RekognitionClientTypes.FaceDetail]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil
    )
    {
        self.faceDetails = faceDetails
        self.orientationCorrection = orientationCorrection
    }
}

extension RekognitionClientTypes {
    /// A set of parameters that allow you to filter out certain results from your returned results.
    public struct DetectionFilter {
        /// Sets the minimum height of the word bounding box. Words with bounding box heights lesser than this value will be excluded from the result. Value is relative to the video frame height.
        public var minBoundingBoxHeight: Swift.Float?
        /// Sets the minimum width of the word bounding box. Words with bounding boxes widths lesser than this value will be excluded from the result. Value is relative to the video frame width.
        public var minBoundingBoxWidth: Swift.Float?
        /// Sets the confidence of word detection. Words with detection confidence below this will be excluded from the result. Values should be between 0 and 100. The default MinConfidence is 80.
        public var minConfidence: Swift.Float?

        public init(
            minBoundingBoxHeight: Swift.Float? = nil,
            minBoundingBoxWidth: Swift.Float? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.minBoundingBoxHeight = minBoundingBoxHeight
            self.minBoundingBoxWidth = minBoundingBoxWidth
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes {

    public enum DetectLabelsFeatureName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case generalLabels
        case imageProperties
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectLabelsFeatureName] {
            return [
                .generalLabels,
                .imageProperties
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .generalLabels: return "GENERAL_LABELS"
            case .imageProperties: return "IMAGE_PROPERTIES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see [Detecting Labels](https://docs.aws.amazon.com/rekognition/latest/dg/labels.html).
    public struct GeneralLabelsSettings {
        /// The label categories that should be excluded from the return from DetectLabels.
        public var labelCategoryExclusionFilters: [Swift.String]?
        /// The label categories that should be included in the return from DetectLabels.
        public var labelCategoryInclusionFilters: [Swift.String]?
        /// The labels that should be excluded from the return from DetectLabels.
        public var labelExclusionFilters: [Swift.String]?
        /// The labels that should be included in the return from DetectLabels.
        public var labelInclusionFilters: [Swift.String]?

        public init(
            labelCategoryExclusionFilters: [Swift.String]? = nil,
            labelCategoryInclusionFilters: [Swift.String]? = nil,
            labelExclusionFilters: [Swift.String]? = nil,
            labelInclusionFilters: [Swift.String]? = nil
        )
        {
            self.labelCategoryExclusionFilters = labelCategoryExclusionFilters
            self.labelCategoryInclusionFilters = labelCategoryInclusionFilters
            self.labelExclusionFilters = labelExclusionFilters
            self.labelInclusionFilters = labelInclusionFilters
        }
    }

}

extension RekognitionClientTypes {
    /// Settings for the IMAGE_PROPERTIES feature type.
    public struct DetectLabelsImagePropertiesSettings {
        /// The maximum number of dominant colors to return when detecting labels in an image. The default value is 10.
        public var maxDominantColors: Swift.Int

        public init(
            maxDominantColors: Swift.Int = 0
        )
        {
            self.maxDominantColors = maxDominantColors
        }
    }

}

extension RekognitionClientTypes {
    /// Settings for the DetectLabels request. Settings can include filters for both GENERAL_LABELS and IMAGE_PROPERTIES. GENERAL_LABELS filters can be inclusive or exclusive and applied to individual labels or label categories. IMAGE_PROPERTIES filters allow specification of a maximum number of dominant colors.
    public struct DetectLabelsSettings {
        /// Contains the specified filters for GENERAL_LABELS.
        public var generalLabels: RekognitionClientTypes.GeneralLabelsSettings?
        /// Contains the chosen number of maximum dominant colors in an image.
        public var imageProperties: RekognitionClientTypes.DetectLabelsImagePropertiesSettings?

        public init(
            generalLabels: RekognitionClientTypes.GeneralLabelsSettings? = nil,
            imageProperties: RekognitionClientTypes.DetectLabelsImagePropertiesSettings? = nil
        )
        {
            self.generalLabels = generalLabels
            self.imageProperties = imageProperties
        }
    }

}

public struct DetectLabelsInput {
    /// A list of the types of analysis to perform. Specifying GENERAL_LABELS uses the label detection feature, while specifying IMAGE_PROPERTIES returns information regarding image color and quality. If no option is specified GENERAL_LABELS is used by default.
    public var features: [RekognitionClientTypes.DetectLabelsFeatureName]?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes is not supported. Images stored in an S3 Bucket do not need to be base64-encoded. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels. Only valid when GENERAL_LABELS is specified as a feature type in the Feature input parameter.
    public var maxLabels: Swift.Int?
    /// Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value. If MinConfidence is not specified, the operation returns labels with a confidence values greater than or equal to 55 percent. Only valid when GENERAL_LABELS is specified as a feature type in the Feature input parameter.
    public var minConfidence: Swift.Float?
    /// A list of the filters to be applied to returned detected labels and image properties. Specified filters can be inclusive, exclusive, or a combination of both. Filters can be used for individual labels or label categories. The exact label names or label categories must be supplied. For a full list of labels and label categories, see [Detecting labels](https://docs.aws.amazon.com/rekognition/latest/dg/labels.html).
    public var settings: RekognitionClientTypes.DetectLabelsSettings?

    public init(
        features: [RekognitionClientTypes.DetectLabelsFeatureName]? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxLabels: Swift.Int? = nil,
        minConfidence: Swift.Float? = nil,
        settings: RekognitionClientTypes.DetectLabelsSettings? = nil
    )
    {
        self.features = features
        self.image = image
        self.maxLabels = maxLabels
        self.minConfidence = minConfidence
        self.settings = settings
    }
}

extension RekognitionClientTypes {
    /// A description of the dominant colors in an image.
    public struct DominantColor {
        /// The Blue RGB value for a dominant color.
        public var blue: Swift.Int?
        /// The CSS color name of a dominant color.
        public var cssColor: Swift.String?
        /// The Green RGB value for a dominant color.
        public var green: Swift.Int?
        /// The Hex code equivalent of the RGB values for a dominant color.
        public var hexCode: Swift.String?
        /// The percentage of image pixels that have a given dominant color.
        public var pixelPercent: Swift.Float?
        /// The Red RGB value for a dominant color.
        public var red: Swift.Int?
        /// One of 12 simplified color names applied to a dominant color.
        public var simplifiedColor: Swift.String?

        public init(
            blue: Swift.Int? = nil,
            cssColor: Swift.String? = nil,
            green: Swift.Int? = nil,
            hexCode: Swift.String? = nil,
            pixelPercent: Swift.Float? = nil,
            red: Swift.Int? = nil,
            simplifiedColor: Swift.String? = nil
        )
        {
            self.blue = blue
            self.cssColor = cssColor
            self.green = green
            self.hexCode = hexCode
            self.pixelPercent = pixelPercent
            self.red = red
            self.simplifiedColor = simplifiedColor
        }
    }

}

extension RekognitionClientTypes {
    /// The quality of an image provided for label detection, with regard to brightness, sharpness, and contrast.
    public struct DetectLabelsImageQuality {
        /// The brightness of an image provided for label detection.
        public var brightness: Swift.Float?
        /// The contrast of an image provided for label detection.
        public var contrast: Swift.Float?
        /// The sharpness of an image provided for label detection.
        public var sharpness: Swift.Float?

        public init(
            brightness: Swift.Float? = nil,
            contrast: Swift.Float? = nil,
            sharpness: Swift.Float? = nil
        )
        {
            self.brightness = brightness
            self.contrast = contrast
            self.sharpness = sharpness
        }
    }

}

extension RekognitionClientTypes {
    /// The background of the image with regard to image quality and dominant colors.
    public struct DetectLabelsImageBackground {
        /// The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// The quality of the image background as defined by brightness and sharpness.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init(
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.dominantColors = dominantColors
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes {
    /// The foreground of the image with regard to image quality and dominant colors.
    public struct DetectLabelsImageForeground {
        /// The dominant colors found in the foreground of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// The quality of the image foreground as defined by brightness and sharpness.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init(
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.dominantColors = dominantColors
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes {
    /// Information about the quality and dominant colors of an input image. Quality and color information is returned for the entire image, foreground, and background.
    public struct DetectLabelsImageProperties {
        /// Information about the properties of an image’s background, including the background’s quality and dominant colors, including the quality and dominant colors of the image.
        public var background: RekognitionClientTypes.DetectLabelsImageBackground?
        /// Information about the dominant colors found in an image, described with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// Information about the properties of an image’s foreground, including the foreground’s quality and dominant colors, including the quality and dominant colors of the image.
        public var foreground: RekognitionClientTypes.DetectLabelsImageForeground?
        /// Information about the quality of the image foreground as defined by brightness, sharpness, and contrast. The higher the value the greater the brightness, sharpness, and contrast respectively.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init(
            background: RekognitionClientTypes.DetectLabelsImageBackground? = nil,
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            foreground: RekognitionClientTypes.DetectLabelsImageForeground? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.background = background
            self.dominantColors = dominantColors
            self.foreground = foreground
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes {
    /// A potential alias of for a given label.
    public struct LabelAlias {
        /// The name of an alias for a given label.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes {
    /// The category that applies to a given label.
    public struct LabelCategory {
        /// The name of a category that applies to a given label.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes {
    /// An instance of a label returned by Amazon Rekognition Image ([DetectLabels]) or by Amazon Rekognition Video ([GetLabelDetection]).
    public struct Instance {
        /// The position of the label instance on the image.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has in the accuracy of the bounding box.
        public var confidence: Swift.Float?
        /// The dominant colors found in an individual instance of a label.
        public var dominantColors: [RekognitionClientTypes.DominantColor]?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.dominantColors = dominantColors
        }
    }

}

extension RekognitionClientTypes {
    /// A parent label for a label. A label can have 0, 1, or more parents.
    public struct Parent {
        /// The name of the parent label.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes {
    /// Structure containing details about the detected label, including the name, detected instances, parent labels, and level of confidence.
    public struct Label {
        /// A list of potential aliases for a given label.
        public var aliases: [RekognitionClientTypes.LabelAlias]?
        /// A list of the categories associated with a given label.
        public var categories: [RekognitionClientTypes.LabelCategory]?
        /// Level of confidence.
        public var confidence: Swift.Float?
        /// If Label represents an object, Instances contains the bounding boxes for each instance of the detected object. Bounding boxes are returned for common object labels such as people, cars, furniture, apparel or pets.
        public var instances: [RekognitionClientTypes.Instance]?
        /// The name (label) of the object or scene.
        public var name: Swift.String?
        /// The parent labels for a label. The response includes all ancestor labels.
        public var parents: [RekognitionClientTypes.Parent]?

        public init(
            aliases: [RekognitionClientTypes.LabelAlias]? = nil,
            categories: [RekognitionClientTypes.LabelCategory]? = nil,
            confidence: Swift.Float? = nil,
            instances: [RekognitionClientTypes.Instance]? = nil,
            name: Swift.String? = nil,
            parents: [RekognitionClientTypes.Parent]? = nil
        )
        {
            self.aliases = aliases
            self.categories = categories
            self.confidence = confidence
            self.instances = instances
            self.name = name
            self.parents = parents
        }
    }

}

public struct DetectLabelsOutput {
    /// Information about the properties of the input image, such as brightness, sharpness, contrast, and dominant colors.
    public var imageProperties: RekognitionClientTypes.DetectLabelsImageProperties?
    /// Version number of the label detection model that was used to detect labels.
    public var labelModelVersion: Swift.String?
    /// An array of labels for the real-world objects detected.
    public var labels: [RekognitionClientTypes.Label]?
    /// The value of OrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?

    public init(
        imageProperties: RekognitionClientTypes.DetectLabelsImageProperties? = nil,
        labelModelVersion: Swift.String? = nil,
        labels: [RekognitionClientTypes.Label]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil
    )
    {
        self.imageProperties = imageProperties
        self.labelModelVersion = labelModelVersion
        self.labels = labels
        self.orientationCorrection = orientationCorrection
    }
}

/// The number of in-progress human reviews you have has exceeded the number allowed.
public struct HumanLoopQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        /// The quota code.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The resource type.
        public internal(set) var resourceType: Swift.String? = nil
        /// The service code.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HumanLoopQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

extension RekognitionClientTypes {
    /// Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information.
    public struct HumanLoopDataAttributes {
        /// Sets whether the input image is free of personally identifiable information.
        public var contentClassifiers: [RekognitionClientTypes.ContentClassifier]?

        public init(
            contentClassifiers: [RekognitionClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }

}

extension RekognitionClientTypes {
    /// Sets up the flow definition the image will be sent to if one of the conditions is met. You can also set certain attributes of the image before review.
    public struct HumanLoopConfig {
        /// Sets attributes of the input data.
        public var dataAttributes: RekognitionClientTypes.HumanLoopDataAttributes?
        /// The Amazon Resource Name (ARN) of the flow definition. You can create a flow definition by using the Amazon Sagemaker [CreateFlowDefinition](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateFlowDefinition.html) Operation.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the human review used for this image. This should be kept unique within a region.
        /// This member is required.
        public var humanLoopName: Swift.String?

        public init(
            dataAttributes: RekognitionClientTypes.HumanLoopDataAttributes? = nil,
            flowDefinitionArn: Swift.String? = nil,
            humanLoopName: Swift.String? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopName = humanLoopName
        }
    }

}

public struct DetectModerationLabelsInput {
    /// Sets up the configuration for human evaluation, including the FlowDefinition the image will be sent to.
    public var humanLoopConfig: RekognitionClientTypes.HumanLoopConfig?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. If you don't specify MinConfidence, the operation returns labels with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// Identifier for the custom adapter. Expects the ProjectVersionArn as a value. Use the CreateProject or CreateProjectVersion APIs to create a custom adapter.
    public var projectVersion: Swift.String?

    public init(
        humanLoopConfig: RekognitionClientTypes.HumanLoopConfig? = nil,
        image: RekognitionClientTypes.Image? = nil,
        minConfidence: Swift.Float? = nil,
        projectVersion: Swift.String? = nil
    )
    {
        self.humanLoopConfig = humanLoopConfig
        self.image = image
        self.minConfidence = minConfidence
        self.projectVersion = projectVersion
    }
}

extension RekognitionClientTypes {
    /// Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.
    public struct HumanLoopActivationOutput {
        /// Shows the result of condition evaluations, including those conditions which activated a human review.
        public var humanLoopActivationConditionsEvaluationResults: Swift.String?
        /// Shows if and why human review was needed.
        public var humanLoopActivationReasons: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the HumanLoop created.
        public var humanLoopArn: Swift.String?

        public init(
            humanLoopActivationConditionsEvaluationResults: Swift.String? = nil,
            humanLoopActivationReasons: [Swift.String]? = nil,
            humanLoopArn: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults
            self.humanLoopActivationReasons = humanLoopActivationReasons
            self.humanLoopArn = humanLoopArn
        }
    }

}

public struct DetectModerationLabelsOutput {
    /// A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.
    public var contentTypes: [RekognitionClientTypes.ContentType]?
    /// Shows the results of the human in the loop evaluation.
    public var humanLoopActivationOutput: RekognitionClientTypes.HumanLoopActivationOutput?
    /// Array of detected Moderation labels. For video operations, this includes the time, in milliseconds from the start of the video, they were detected.
    public var moderationLabels: [RekognitionClientTypes.ModerationLabel]?
    /// Version number of the base moderation detection model that was used to detect unsafe content.
    public var moderationModelVersion: Swift.String?
    /// Identifier of the custom adapter that was used during inference. If during inference the adapter was EXPIRED, then the parameter will not be returned, indicating that a base moderation detection project version was used.
    public var projectVersion: Swift.String?

    public init(
        contentTypes: [RekognitionClientTypes.ContentType]? = nil,
        humanLoopActivationOutput: RekognitionClientTypes.HumanLoopActivationOutput? = nil,
        moderationLabels: [RekognitionClientTypes.ModerationLabel]? = nil,
        moderationModelVersion: Swift.String? = nil,
        projectVersion: Swift.String? = nil
    )
    {
        self.contentTypes = contentTypes
        self.humanLoopActivationOutput = humanLoopActivationOutput
        self.moderationLabels = moderationLabels
        self.moderationModelVersion = moderationModelVersion
        self.projectVersion = projectVersion
    }
}

extension RekognitionClientTypes {
    /// Specifies summary attributes to return from a call to [DetectProtectiveEquipment]. You can specify which types of PPE to summarize. You can also specify a minimum confidence value for detections. Summary information is returned in the Summary ([ProtectiveEquipmentSummary]) field of the response from DetectProtectiveEquipment. The summary includes which persons in an image were detected wearing the requested types of person protective equipment (PPE), which persons were detected as not wearing PPE, and the persons in which a determination could not be made. For more information, see [ProtectiveEquipmentSummary].
    public struct ProtectiveEquipmentSummarizationAttributes {
        /// The minimum confidence level for which you want summary information. The confidence level applies to person detection, body part detection, equipment detection, and body part coverage. Amazon Rekognition doesn't return summary information with a confidence than this specified value. There isn't a default value. Specify a MinConfidence value that is between 50-100% as DetectProtectiveEquipment returns predictions only where the detection confidence is between 50% - 100%. If you specify a value that is less than 50%, the results are the same specifying a value of 50%.
        /// This member is required.
        public var minConfidence: Swift.Float?
        /// An array of personal protective equipment types for which you want summary information. If a person is detected wearing a required requipment type, the person's ID is added to the PersonsWithRequiredEquipment array field returned in [ProtectiveEquipmentSummary] by DetectProtectiveEquipment.
        /// This member is required.
        public var requiredEquipmentTypes: [RekognitionClientTypes.ProtectiveEquipmentType]?

        public init(
            minConfidence: Swift.Float? = nil,
            requiredEquipmentTypes: [RekognitionClientTypes.ProtectiveEquipmentType]? = nil
        )
        {
            self.minConfidence = minConfidence
            self.requiredEquipmentTypes = requiredEquipmentTypes
        }
    }

}

public struct DetectProtectiveEquipmentInput {
    /// The image in which you want to detect PPE on detected persons. The image can be passed as image bytes or you can reference an image stored in an Amazon S3 bucket.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// An array of PPE types that you want to summarize.
    public var summarizationAttributes: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes?

    public init(
        image: RekognitionClientTypes.Image? = nil,
        summarizationAttributes: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes? = nil
    )
    {
        self.image = image
        self.summarizationAttributes = summarizationAttributes
    }
}

extension RekognitionClientTypes {
    /// A person detected by a call to [DetectProtectiveEquipment]. The API returns all persons detected in the input image in an array of ProtectiveEquipmentPerson objects.
    public struct ProtectiveEquipmentPerson {
        /// An array of body parts detected on a person's body (including body parts without PPE).
        public var bodyParts: [RekognitionClientTypes.ProtectiveEquipmentBodyPart]?
        /// A bounding box around the detected person.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has that the bounding box contains a person.
        public var confidence: Swift.Float?
        /// The identifier for the detected person. The identifier is only unique for a single call to DetectProtectiveEquipment.
        public var id: Swift.Int?

        public init(
            bodyParts: [RekognitionClientTypes.ProtectiveEquipmentBodyPart]? = nil,
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            id: Swift.Int? = nil
        )
        {
            self.bodyParts = bodyParts
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.id = id
        }
    }

}

extension RekognitionClientTypes {
    /// Summary information for required items of personal protective equipment (PPE) detected on persons by a call to [DetectProtectiveEquipment]. You specify the required type of PPE in the SummarizationAttributes ([ProtectiveEquipmentSummarizationAttributes]) input parameter. The summary includes which persons were detected wearing the required personal protective equipment (PersonsWithRequiredEquipment), which persons were detected as not wearing the required PPE (PersonsWithoutRequiredEquipment), and the persons in which a determination could not be made (PersonsIndeterminate). To get a total for each category, use the size of the field array. For example, to find out how many people were detected as wearing the specified PPE, use the size of the PersonsWithRequiredEquipment array. If you want to find out more about a person, such as the location ([BoundingBox]) of the person on the image, use the person ID in each array element. Each person ID matches the ID field of a [ProtectiveEquipmentPerson] object returned in the Persons array by DetectProtectiveEquipment.
    public struct ProtectiveEquipmentSummary {
        /// An array of IDs for persons where it was not possible to determine if they are wearing personal protective equipment.
        public var personsIndeterminate: [Swift.Int]?
        /// An array of IDs for persons who are wearing detected personal protective equipment.
        public var personsWithRequiredEquipment: [Swift.Int]?
        /// An array of IDs for persons who are not wearing all of the types of PPE specified in the RequiredEquipmentTypes field of the detected personal protective equipment.
        public var personsWithoutRequiredEquipment: [Swift.Int]?

        public init(
            personsIndeterminate: [Swift.Int]? = nil,
            personsWithRequiredEquipment: [Swift.Int]? = nil,
            personsWithoutRequiredEquipment: [Swift.Int]? = nil
        )
        {
            self.personsIndeterminate = personsIndeterminate
            self.personsWithRequiredEquipment = personsWithRequiredEquipment
            self.personsWithoutRequiredEquipment = personsWithoutRequiredEquipment
        }
    }

}

public struct DetectProtectiveEquipmentOutput {
    /// An array of persons detected in the image (including persons not wearing PPE).
    public var persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]?
    /// The version number of the PPE detection model used to detect PPE in the image.
    public var protectiveEquipmentModelVersion: Swift.String?
    /// Summary information for the types of PPE specified in the SummarizationAttributes input parameter.
    public var summary: RekognitionClientTypes.ProtectiveEquipmentSummary?

    public init(
        persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]? = nil,
        protectiveEquipmentModelVersion: Swift.String? = nil,
        summary: RekognitionClientTypes.ProtectiveEquipmentSummary? = nil
    )
    {
        self.persons = persons
        self.protectiveEquipmentModelVersion = protectiveEquipmentModelVersion
        self.summary = summary
    }
}

extension RekognitionClientTypes {
    /// A set of optional parameters that you can use to set the criteria that the text must meet to be included in your response. WordFilter looks at a word’s height, width, and minimum confidence. RegionOfInterest lets you set a specific region of the image to look for text in.
    public struct DetectTextFilters {
        /// A Filter focusing on a certain area of the image. Uses a BoundingBox object to set the region of the image.
        public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
        /// A set of parameters that allow you to filter out certain results from your returned results.
        public var wordFilter: RekognitionClientTypes.DetectionFilter?

        public init(
            regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
            wordFilter: RekognitionClientTypes.DetectionFilter? = nil
        )
        {
            self.regionsOfInterest = regionsOfInterest
            self.wordFilter = wordFilter
        }
    }

}

public struct DetectTextInput {
    /// Optional parameters that let you set the criteria that the text must meet to be included in your response.
    public var filters: RekognitionClientTypes.DetectTextFilters?
    /// The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Rekognition operations, you can't pass image bytes. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init(
        filters: RekognitionClientTypes.DetectTextFilters? = nil,
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.filters = filters
        self.image = image
    }
}

extension RekognitionClientTypes {

    public enum TextTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case line
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTypes] {
            return [
                .line,
                .word
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .line: return "LINE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about a word or line of text detected by [DetectText]. The DetectedText field contains the text that Amazon Rekognition detected in the image. Every word and line has an identifier (Id). Each word belongs to a line and has a parent identifier (ParentId) that identifies the line of text in which the word appears. The word Id is also an index for the word within a line of words. For more information, see Detecting text in the Amazon Rekognition Developer Guide.
    public struct TextDetection {
        /// The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.
        public var confidence: Swift.Float?
        /// The word or line of text recognized by Amazon Rekognition.
        public var detectedText: Swift.String?
        /// The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.
        public var geometry: RekognitionClientTypes.Geometry?
        /// The identifier for the detected text. The identifier is only unique for a single call to DetectText.
        public var id: Swift.Int?
        /// The Parent identifier for the detected text identified by the value of ID. If the type of detected text is LINE, the value of ParentId is Null.
        public var parentId: Swift.Int?
        /// The type of text that was detected.
        public var type: RekognitionClientTypes.TextTypes?

        public init(
            confidence: Swift.Float? = nil,
            detectedText: Swift.String? = nil,
            geometry: RekognitionClientTypes.Geometry? = nil,
            id: Swift.Int? = nil,
            parentId: Swift.Int? = nil,
            type: RekognitionClientTypes.TextTypes? = nil
        )
        {
            self.confidence = confidence
            self.detectedText = detectedText
            self.geometry = geometry
            self.id = id
            self.parentId = parentId
            self.type = type
        }
    }

}

public struct DetectTextOutput {
    /// An array of text that was detected in the input image.
    public var textDetections: [RekognitionClientTypes.TextDetection]?
    /// The model version used to detect text.
    public var textModelVersion: Swift.String?

    public init(
        textDetections: [RekognitionClientTypes.TextDetection]? = nil,
        textModelVersion: Swift.String? = nil
    )
    {
        self.textDetections = textDetections
        self.textModelVersion = textModelVersion
    }
}

extension RekognitionClientTypes {
    /// Provides face metadata for the faces that are disassociated from a specific UserID.
    public struct DisassociatedFace {
        /// Unique identifier assigned to the face.
        public var faceId: Swift.String?

        public init(
            faceId: Swift.String? = nil
        )
        {
            self.faceId = faceId
        }
    }

}

public struct DisassociateFacesInput {
    /// Idempotent token used to identify the request to DisassociateFaces. If you use the same token with multiple DisassociateFaces requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.
    public var clientRequestToken: Swift.String?
    /// The ID of an existing collection containing the UserID.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of face IDs to disassociate from the UserID.
    /// This member is required.
    public var faceIds: [Swift.String]?
    /// ID for the existing UserID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        faceIds: [Swift.String]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.faceIds = faceIds
        self.userId = userId
    }
}

extension RekognitionClientTypes {

    public enum UnsuccessfulFaceDisassociationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case associatedToADifferentUser
        case faceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [UnsuccessfulFaceDisassociationReason] {
            return [
                .associatedToADifferentUser,
                .faceNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .associatedToADifferentUser: return "ASSOCIATED_TO_A_DIFFERENT_USER"
            case .faceNotFound: return "FACE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains metadata like FaceId, UserID, and Reasons, for a face that was unsuccessfully disassociated.
    public struct UnsuccessfulFaceDisassociation {
        /// A unique identifier assigned to the face.
        public var faceId: Swift.String?
        /// The reason why the deletion was unsuccessful.
        public var reasons: [RekognitionClientTypes.UnsuccessfulFaceDisassociationReason]?
        /// A provided ID for the UserID. Unique within the collection.
        public var userId: Swift.String?

        public init(
            faceId: Swift.String? = nil,
            reasons: [RekognitionClientTypes.UnsuccessfulFaceDisassociationReason]? = nil,
            userId: Swift.String? = nil
        )
        {
            self.faceId = faceId
            self.reasons = reasons
            self.userId = userId
        }
    }

}

public struct DisassociateFacesOutput {
    /// An array of DissociatedFace objects containing FaceIds that are successfully disassociated with the UserID is returned. Returned if the DisassociatedFaces action is successful.
    public var disassociatedFaces: [RekognitionClientTypes.DisassociatedFace]?
    /// An array of UnsuccessfulDisassociation objects containing FaceIds that are not successfully associated, along with the reasons for the failure to associate. Returned if the DisassociateFaces action is successful.
    public var unsuccessfulFaceDisassociations: [RekognitionClientTypes.UnsuccessfulFaceDisassociation]?
    /// The status of an update made to a User. Reflects if the User has been updated for every requested change.
    public var userStatus: RekognitionClientTypes.UserStatus?

    public init(
        disassociatedFaces: [RekognitionClientTypes.DisassociatedFace]? = nil,
        unsuccessfulFaceDisassociations: [RekognitionClientTypes.UnsuccessfulFaceDisassociation]? = nil,
        userStatus: RekognitionClientTypes.UserStatus? = nil
    )
    {
        self.disassociatedFaces = disassociatedFaces
        self.unsuccessfulFaceDisassociations = unsuccessfulFaceDisassociations
        self.userStatus = userStatus
    }
}

extension RekognitionClientTypes {
    /// A training dataset or a test dataset used in a dataset distribution operation. For more information, see [DistributeDatasetEntries].
    public struct DistributeDataset {
        /// The Amazon Resource Name (ARN) of the dataset that you want to use.
        /// This member is required.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

public struct DistributeDatasetEntriesInput {
    /// The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty.
    /// This member is required.
    public var datasets: [RekognitionClientTypes.DistributeDataset]?

    public init(
        datasets: [RekognitionClientTypes.DistributeDataset]? = nil
    )
    {
        self.datasets = datasets
    }
}

public struct DistributeDatasetEntriesOutput {

    public init() { }
}

extension RekognitionClientTypes {
    /// Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned.
    public struct Face {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree).
        public var confidence: Swift.Float?
        /// Identifier that you assign to all the faces in the input image.
        public var externalImageId: Swift.String?
        /// Unique identifier that Amazon Rekognition assigns to the face.
        public var faceId: Swift.String?
        /// Unique identifier that Amazon Rekognition assigns to the input image.
        public var imageId: Swift.String?
        /// The version of the face detect and storage model that was used when indexing the face vector.
        public var indexFacesModelVersion: Swift.String?
        /// Unique identifier assigned to the user.
        public var userId: Swift.String?

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            externalImageId: Swift.String? = nil,
            faceId: Swift.String? = nil,
            imageId: Swift.String? = nil,
            indexFacesModelVersion: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.externalImageId = externalImageId
            self.faceId = faceId
            self.imageId = imageId
            self.indexFacesModelVersion = indexFacesModelVersion
            self.userId = userId
        }
    }

}

extension RekognitionClientTypes {

    public enum FaceAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `default`
        case sdkUnknown(Swift.String)

        public static var allCases: [FaceAttributes] {
            return [
                .all,
                .default
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .default: return "DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about a face detected in a video analysis request and the time the face was detected in the video.
    public struct FaceDetection {
        /// The face properties for the detected face.
        public var face: RekognitionClientTypes.FaceDetail?
        /// Time, in milliseconds from the start of the video, that the face was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the face first appears.
        public var timestamp: Swift.Int

        public init(
            face: RekognitionClientTypes.FaceDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.face = face
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    /// Provides face metadata. In addition, it also provides the confidence in the match of this face with the input face.
    public struct FaceMatch {
        /// Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.
        public var face: RekognitionClientTypes.Face?
        /// Confidence in the match of this face with the input face.
        public var similarity: Swift.Float?

        public init(
            face: RekognitionClientTypes.Face? = nil,
            similarity: Swift.Float? = nil
        )
        {
            self.face = face
            self.similarity = similarity
        }
    }

}

extension RekognitionClientTypes {
    /// Object containing both the face metadata (stored in the backend database), and facial attributes that are detected but aren't stored in the database.
    public struct FaceRecord {
        /// Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned.
        public var face: RekognitionClientTypes.Face?
        /// Structure containing attributes of the face that the algorithm detected.
        public var faceDetail: RekognitionClientTypes.FaceDetail?

        public init(
            face: RekognitionClientTypes.Face? = nil,
            faceDetail: RekognitionClientTypes.FaceDetail? = nil
        )
        {
            self.face = face
            self.faceDetail = faceDetail
        }
    }

}

extension RekognitionClientTypes {

    public enum FaceSearchSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case index
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [FaceSearchSortBy] {
            return [
                .index,
                .timestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .index: return "INDEX"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetCelebrityInfoInput {
    /// The ID for the celebrity. You get the celebrity ID from a call to the [RecognizeCelebrities] operation, which recognizes celebrities in an image.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetCelebrityInfoOutput {
    /// Retrieves the known gender for the celebrity.
    public var knownGender: RekognitionClientTypes.KnownGender?
    /// The name of the celebrity.
    public var name: Swift.String?
    /// An array of URLs pointing to additional celebrity information.
    public var urls: [Swift.String]?

    public init(
        knownGender: RekognitionClientTypes.KnownGender? = nil,
        name: Swift.String? = nil,
        urls: [Swift.String]? = nil
    )
    {
        self.knownGender = knownGender
        self.name = name
        self.urls = urls
    }
}

public struct GetCelebrityRecognitionInput {
    /// Job identifier for the required celebrity recognition analysis. You can get the job identifer from a call to StartCelebrityRecognition.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more recognized celebrities to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of celebrities.
    public var nextToken: Swift.String?
    /// Sort to use for celebrities returned in Celebrities field. Specify ID to sort by the celebrity identifier, specify TIMESTAMP to sort by the time the celebrity was recognized.
    public var sortBy: RekognitionClientTypes.CelebrityRecognitionSortBy?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.CelebrityRecognitionSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension RekognitionClientTypes {

    public enum VideoJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoJobStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public struct Video {
        /// The Amazon S3 bucket name and file name for the video.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {

    public enum VideoColorRange: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case full
        case limited
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoColorRange] {
            return [
                .full,
                .limited
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .full: return "FULL"
            case .limited: return "LIMITED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public struct VideoMetadata {
        /// Type of compression used in the analyzed video.
        public var codec: Swift.String?
        /// A description of the range of luminance values in a video, either LIMITED (16 to 235) or FULL (0 to 255).
        public var colorRange: RekognitionClientTypes.VideoColorRange?
        /// Length of the video in milliseconds.
        public var durationMillis: Swift.Int?
        /// Format of the analyzed video. Possible values are MP4, MOV and AVI.
        public var format: Swift.String?
        /// Vertical pixel dimension of the video.
        public var frameHeight: Swift.Int?
        /// Number of frames per second in the video.
        public var frameRate: Swift.Float?
        /// Horizontal pixel dimension of the video.
        public var frameWidth: Swift.Int?

        public init(
            codec: Swift.String? = nil,
            colorRange: RekognitionClientTypes.VideoColorRange? = nil,
            durationMillis: Swift.Int? = nil,
            format: Swift.String? = nil,
            frameHeight: Swift.Int? = nil,
            frameRate: Swift.Float? = nil,
            frameWidth: Swift.Int? = nil
        )
        {
            self.codec = codec
            self.colorRange = colorRange
            self.durationMillis = durationMillis
            self.format = format
            self.frameHeight = frameHeight
            self.frameRate = frameRate
            self.frameWidth = frameWidth
        }
    }

}

public struct GetCelebrityRecognitionOutput {
    /// Array of celebrities recognized in the video.
    public var celebrities: [RekognitionClientTypes.CelebrityRecognition]?
    /// Job identifier for the celebrity recognition operation for which you want to obtain results. The job identifer is returned by an initial call to StartCelebrityRecognition.
    public var jobId: Swift.String?
    /// The current status of the celebrity recognition job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartCelebrityRecognition and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of celebrities.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        celebrities: [RekognitionClientTypes.CelebrityRecognition]? = nil,
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.celebrities = celebrities
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct GetContentModerationInput {
    /// Defines how to aggregate results of the StartContentModeration request. Default aggregation option is TIMESTAMPS. SEGMENTS mode aggregates moderation labels over time.
    public var aggregateBy: RekognitionClientTypes.ContentModerationAggregateBy?
    /// The identifier for the inappropriate, unwanted, or offensive content moderation job. Use JobId to identify the job in a subsequent call to GetContentModeration.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the ModerationLabelDetections array. Use TIMESTAMP to sort array elements by the time labels are detected. Use NAME to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.ContentModerationSortBy?

    public init(
        aggregateBy: RekognitionClientTypes.ContentModerationAggregateBy? = nil,
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.ContentModerationSortBy? = nil
    )
    {
        self.aggregateBy = aggregateBy
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension RekognitionClientTypes {
    /// Contains metadata about a content moderation request, including the SortBy and AggregateBy options.
    public struct GetContentModerationRequestMetadata {
        /// The aggregation method chosen for a GetContentModeration request.
        public var aggregateBy: RekognitionClientTypes.ContentModerationAggregateBy?
        /// The sorting method chosen for a GetContentModeration request.
        public var sortBy: RekognitionClientTypes.ContentModerationSortBy?

        public init(
            aggregateBy: RekognitionClientTypes.ContentModerationAggregateBy? = nil,
            sortBy: RekognitionClientTypes.ContentModerationSortBy? = nil
        )
        {
            self.aggregateBy = aggregateBy
            self.sortBy = sortBy
        }
    }

}

public struct GetContentModerationOutput {
    /// Information about the paramters used when getting a response. Includes information on aggregation and sorting methods.
    public var getRequestMetadata: RekognitionClientTypes.GetContentModerationRequestMetadata?
    /// Job identifier for the content moderation operation for which you want to obtain results. The job identifer is returned by an initial call to StartContentModeration.
    public var jobId: Swift.String?
    /// The current status of the content moderation analysis job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartContentModeration and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// The detected inappropriate, unwanted, or offensive content moderation labels and the time(s) they were detected.
    public var moderationLabels: [RekognitionClientTypes.ContentModerationDetection]?
    /// Version number of the moderation detection model that was used to detect inappropriate, unwanted, or offensive content.
    public var moderationModelVersion: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of content moderation labels.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from GetContentModeration.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        getRequestMetadata: RekognitionClientTypes.GetContentModerationRequestMetadata? = nil,
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        moderationLabels: [RekognitionClientTypes.ContentModerationDetection]? = nil,
        moderationModelVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.getRequestMetadata = getRequestMetadata
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.moderationLabels = moderationLabels
        self.moderationModelVersion = moderationModelVersion
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct GetFaceDetectionInput {
    /// Unique identifier for the face detection job. The JobId is returned from StartFaceDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more faces to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetFaceDetectionOutput {
    /// An array of faces detected in the video. Each element contains a detected face's details and the time, in milliseconds from the start of the video, the face was detected.
    public var faces: [RekognitionClientTypes.FaceDetection]?
    /// Job identifier for the face detection operation for which you want to obtain results. The job identifer is returned by an initial call to StartFaceDetection.
    public var jobId: Swift.String?
    /// The current status of the face detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartFaceDetection and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        faces: [RekognitionClientTypes.FaceDetection]? = nil,
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.faces = faces
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

/// Occurs when a given sessionId is not found.
public struct SessionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SessionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct GetFaceLivenessSessionResultsInput {
    /// A unique 128-bit UUID. This is used to uniquely identify the session and also acts as an idempotency token for all operations associated with the session.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        sessionId: Swift.String? = nil
    )
    {
        self.sessionId = sessionId
    }
}

extension RekognitionClientTypes {

    public enum LivenessSessionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case expired
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [LivenessSessionStatus] {
            return [
                .created,
                .expired,
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetFaceLivenessSessionResultsOutput {
    /// A set of images from the Face Liveness video that can be used for audit purposes. It includes a bounding box of the face and the Base64-encoded bytes that return an image. If the CreateFaceLivenessSession request included an OutputConfig argument, the image will be uploaded to an S3Object specified in the output configuration. If no Amazon S3 bucket is defined, raw bytes are sent instead.
    public var auditImages: [RekognitionClientTypes.AuditImage]?
    /// Probabalistic confidence score for if the person in the given video was live, represented as a float value between 0 to 100.
    public var confidence: Swift.Float?
    /// A high-quality image from the Face Liveness video that can be used for face comparison or search. It includes a bounding box of the face and the Base64-encoded bytes that return an image. If the CreateFaceLivenessSession request included an OutputConfig argument, the image will be uploaded to an S3Object specified in the output configuration. In case the reference image is not returned, it's recommended to retry the Liveness check.
    public var referenceImage: RekognitionClientTypes.AuditImage?
    /// The sessionId for which this request was called.
    /// This member is required.
    public var sessionId: Swift.String?
    /// Represents a status corresponding to the state of the session. Possible statuses are: CREATED, IN_PROGRESS, SUCCEEDED, FAILED, EXPIRED.
    /// This member is required.
    public var status: RekognitionClientTypes.LivenessSessionStatus?

    public init(
        auditImages: [RekognitionClientTypes.AuditImage]? = nil,
        confidence: Swift.Float? = nil,
        referenceImage: RekognitionClientTypes.AuditImage? = nil,
        sessionId: Swift.String? = nil,
        status: RekognitionClientTypes.LivenessSessionStatus? = nil
    )
    {
        self.auditImages = auditImages
        self.confidence = confidence
        self.referenceImage = referenceImage
        self.sessionId = sessionId
        self.status = status
    }
}

public struct GetFaceSearchInput {
    /// The job identifer for the search request. You get the job identifier from an initial call to StartFaceSearch.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more search results to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of search results.
    public var nextToken: Swift.String?
    /// Sort to use for grouping faces in the response. Use TIMESTAMP to group faces by the time that they are recognized. Use INDEX to sort by recognized faces.
    public var sortBy: RekognitionClientTypes.FaceSearchSortBy?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.FaceSearchSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension RekognitionClientTypes {
    /// Details about a person detected in a video analysis request.
    public struct PersonDetail {
        /// Bounding box around the detected person.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Face details for the detected person.
        public var face: RekognitionClientTypes.FaceDetail?
        /// Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.
        public var index: Swift.Int

        public init(
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            face: RekognitionClientTypes.FaceDetail? = nil,
            index: Swift.Int = 0
        )
        {
            self.boundingBox = boundingBox
            self.face = face
            self.index = index
        }
    }

}

extension RekognitionClientTypes {
    /// Information about a person whose face matches a face(s) in an Amazon Rekognition collection. Includes information about the faces in the Amazon Rekognition collection ([FaceMatch]), information about the person ([PersonDetail]), and the time stamp for when the person was detected in a video. An array of PersonMatch objects is returned by [GetFaceSearch].
    public struct PersonMatch {
        /// Information about the faces in the input collection that match the face of a person in the video.
        public var faceMatches: [RekognitionClientTypes.FaceMatch]?
        /// Information about the matched person.
        public var person: RekognitionClientTypes.PersonDetail?
        /// The time, in milliseconds from the beginning of the video, that the person was matched in the video.
        public var timestamp: Swift.Int

        public init(
            faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
            person: RekognitionClientTypes.PersonDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.faceMatches = faceMatches
            self.person = person
            self.timestamp = timestamp
        }
    }

}

public struct GetFaceSearchOutput {
    /// Job identifier for the face search operation for which you want to obtain results. The job identifer is returned by an initial call to StartFaceSearch.
    public var jobId: Swift.String?
    /// The current status of the face search job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartFaceSearch and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of search results.
    public var nextToken: Swift.String?
    /// An array of persons, [PersonMatch], in the video whose face(s) match the face(s) in an Amazon Rekognition collection. It also includes time information for when persons are matched in the video. You specify the input collection in an initial call to StartFaceSearch. Each Persons element includes a time the person was matched, face match details (FaceMatches) for matching faces in the collection, and person information (Person) for the matched person.
    public var persons: [RekognitionClientTypes.PersonMatch]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        persons: [RekognitionClientTypes.PersonMatch]? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.persons = persons
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

extension RekognitionClientTypes {

    public enum LabelDetectionAggregateBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segments
        case timestamps
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionAggregateBy] {
            return [
                .segments,
                .timestamps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segments: return "SEGMENTS"
            case .timestamps: return "TIMESTAMPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {

    public enum LabelDetectionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case name
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionSortBy] {
            return [
                .name,
                .timestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .name: return "NAME"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetLabelDetectionInput {
    /// Defines how to aggregate the returned results. Results can be aggregated by timestamps or segments.
    public var aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy?
    /// Job identifier for the label detection operation for which you want results returned. You get the job identifer from an initial call to StartlabelDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of labels.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the Labels array. Use TIMESTAMP to sort array elements by the time labels are detected. Use NAME to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.LabelDetectionSortBy?

    public init(
        aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy? = nil,
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.LabelDetectionSortBy? = nil
    )
    {
        self.aggregateBy = aggregateBy
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension RekognitionClientTypes {
    /// Contains metadata about a label detection request, including the SortBy and AggregateBy options.
    public struct GetLabelDetectionRequestMetadata {
        /// The aggregation method chosen for a GetLabelDetection request.
        public var aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy?
        /// The sorting method chosen for a GetLabelDetection request.
        public var sortBy: RekognitionClientTypes.LabelDetectionSortBy?

        public init(
            aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy? = nil,
            sortBy: RekognitionClientTypes.LabelDetectionSortBy? = nil
        )
        {
            self.aggregateBy = aggregateBy
            self.sortBy = sortBy
        }
    }

}

extension RekognitionClientTypes {
    /// Information about a label detected in a video analysis request and the time the label was detected in the video.
    public struct LabelDetection {
        /// The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.
        public var durationMillis: Swift.Int?
        /// The time in milliseconds defining the end of the timeline segment containing a continuously detected label.
        public var endTimestampMillis: Swift.Int?
        /// Details about the detected label.
        public var label: RekognitionClientTypes.Label?
        /// The time in milliseconds defining the start of the timeline segment containing a continuously detected label.
        public var startTimestampMillis: Swift.Int?
        /// Time, in milliseconds from the start of the video, that the label was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the label first appears.
        public var timestamp: Swift.Int

        public init(
            durationMillis: Swift.Int? = nil,
            endTimestampMillis: Swift.Int? = nil,
            label: RekognitionClientTypes.Label? = nil,
            startTimestampMillis: Swift.Int? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.durationMillis = durationMillis
            self.endTimestampMillis = endTimestampMillis
            self.label = label
            self.startTimestampMillis = startTimestampMillis
            self.timestamp = timestamp
        }
    }

}

public struct GetLabelDetectionOutput {
    /// Information about the paramters used when getting a response. Includes information on aggregation and sorting methods.
    public var getRequestMetadata: RekognitionClientTypes.GetLabelDetectionRequestMetadata?
    /// Job identifier for the label detection operation for which you want to obtain results. The job identifer is returned by an initial call to StartLabelDetection.
    public var jobId: Swift.String?
    /// The current status of the label detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartLabelDetection and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// Version number of the label detection model that was used to detect labels.
    public var labelModelVersion: Swift.String?
    /// An array of labels detected in the video. Each element contains the detected label and the time, in milliseconds from the start of the video, that the label was detected.
    public var labels: [RekognitionClientTypes.LabelDetection]?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of labels.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        getRequestMetadata: RekognitionClientTypes.GetLabelDetectionRequestMetadata? = nil,
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        labelModelVersion: Swift.String? = nil,
        labels: [RekognitionClientTypes.LabelDetection]? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.getRequestMetadata = getRequestMetadata
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.labelModelVersion = labelModelVersion
        self.labels = labels
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct GetMediaAnalysisJobInput {
    /// Unique identifier for the media analysis job for which you want to retrieve results.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension RekognitionClientTypes {

    public enum MediaAnalysisJobFailureCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case internalError
        case invalidKmsKey
        case invalidManifest
        case invalidOutputConfig
        case invalidS3Object
        case resourceNotFound
        case resourceNotReady
        case throttled
        case sdkUnknown(Swift.String)

        public static var allCases: [MediaAnalysisJobFailureCode] {
            return [
                .accessDenied,
                .internalError,
                .invalidKmsKey,
                .invalidManifest,
                .invalidOutputConfig,
                .invalidS3Object,
                .resourceNotFound,
                .resourceNotReady,
                .throttled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidKmsKey: return "INVALID_KMS_KEY"
            case .invalidManifest: return "INVALID_MANIFEST"
            case .invalidOutputConfig: return "INVALID_OUTPUT_CONFIG"
            case .invalidS3Object: return "INVALID_S3_OBJECT"
            case .resourceNotFound: return "RESOURCE_NOT_FOUND"
            case .resourceNotReady: return "RESOURCE_NOT_READY"
            case .throttled: return "THROTTLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Details about the error that resulted in failure of the job.
    public struct MediaAnalysisJobFailureDetails {
        /// Error code for the failed job.
        public var code: RekognitionClientTypes.MediaAnalysisJobFailureCode?
        /// Human readable error message.
        public var message: Swift.String?

        public init(
            code: RekognitionClientTypes.MediaAnalysisJobFailureCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension RekognitionClientTypes {
    /// Contains input information for a media analysis job.
    public struct MediaAnalysisInput {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        /// This member is required.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {
    /// Summary that provides statistics on input manifest and errors identified in the input manifest.
    public struct MediaAnalysisManifestSummary {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {
    /// Configuration for Moderation Labels Detection.
    public struct MediaAnalysisDetectModerationLabelsConfig {
        /// Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value.
        public var minConfidence: Swift.Float?
        /// Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.
        public var projectVersion: Swift.String?

        public init(
            minConfidence: Swift.Float? = nil,
            projectVersion: Swift.String? = nil
        )
        {
            self.minConfidence = minConfidence
            self.projectVersion = projectVersion
        }
    }

}

extension RekognitionClientTypes {
    /// Configuration options for a media analysis job. Configuration is operation-specific.
    public struct MediaAnalysisOperationsConfig {
        /// Contains configuration options for a DetectModerationLabels job.
        public var detectModerationLabels: RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig?

        public init(
            detectModerationLabels: RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig? = nil
        )
        {
            self.detectModerationLabels = detectModerationLabels
        }
    }

}

extension RekognitionClientTypes {
    /// Output configuration provided in the job creation request.
    public struct MediaAnalysisOutputConfig {
        /// Specifies the Amazon S3 bucket to contain the output of the media analysis job.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for storage.
        public var s3KeyPrefix: Swift.String?

        public init(
            s3Bucket: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

extension RekognitionClientTypes {
    /// Object containing information about the model versions of selected features in a given job.
    public struct MediaAnalysisModelVersions {
        /// The Moderation base model version.
        public var moderation: Swift.String?

        public init(
            moderation: Swift.String? = nil
        )
        {
            self.moderation = moderation
        }
    }

}

extension RekognitionClientTypes {
    /// Contains the results for a media analysis job created with StartMediaAnalysisJob.
    public struct MediaAnalysisResults {
        /// Information about the model versions for the features selected in a given job.
        public var modelVersions: RekognitionClientTypes.MediaAnalysisModelVersions?
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init(
            modelVersions: RekognitionClientTypes.MediaAnalysisModelVersions? = nil,
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.modelVersions = modelVersions
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {

    public enum MediaAnalysisJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case failed
        case inProgress
        case queued
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [MediaAnalysisJobStatus] {
            return [
                .created,
                .failed,
                .inProgress,
                .queued,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetMediaAnalysisJobOutput {
    /// The Unix date and time when the job finished.
    public var completionTimestamp: Foundation.Date?
    /// The Unix date and time when the job was started.
    /// This member is required.
    public var creationTimestamp: Foundation.Date?
    /// Details about the error that resulted in failure of the job.
    public var failureDetails: RekognitionClientTypes.MediaAnalysisJobFailureDetails?
    /// Reference to the input manifest that was provided in the job creation request.
    /// This member is required.
    public var input: RekognitionClientTypes.MediaAnalysisInput?
    /// The identifier for the media analysis job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The name of the media analysis job.
    public var jobName: Swift.String?
    /// KMS Key that was provided in the creation request.
    public var kmsKeyId: Swift.String?
    /// The summary manifest provides statistics on input manifest and errors identified in the input manifest.
    public var manifestSummary: RekognitionClientTypes.MediaAnalysisManifestSummary?
    /// Operation configurations that were provided during job creation.
    /// This member is required.
    public var operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig?
    /// Output configuration that was provided in the creation request.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig?
    /// Output manifest that contains prediction results.
    public var results: RekognitionClientTypes.MediaAnalysisResults?
    /// The current status of the media analysis job.
    /// This member is required.
    public var status: RekognitionClientTypes.MediaAnalysisJobStatus?

    public init(
        completionTimestamp: Foundation.Date? = nil,
        creationTimestamp: Foundation.Date? = nil,
        failureDetails: RekognitionClientTypes.MediaAnalysisJobFailureDetails? = nil,
        input: RekognitionClientTypes.MediaAnalysisInput? = nil,
        jobId: Swift.String? = nil,
        jobName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        manifestSummary: RekognitionClientTypes.MediaAnalysisManifestSummary? = nil,
        operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig? = nil,
        outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig? = nil,
        results: RekognitionClientTypes.MediaAnalysisResults? = nil,
        status: RekognitionClientTypes.MediaAnalysisJobStatus? = nil
    )
    {
        self.completionTimestamp = completionTimestamp
        self.creationTimestamp = creationTimestamp
        self.failureDetails = failureDetails
        self.input = input
        self.jobId = jobId
        self.jobName = jobName
        self.kmsKeyId = kmsKeyId
        self.manifestSummary = manifestSummary
        self.operationsConfig = operationsConfig
        self.outputConfig = outputConfig
        self.results = results
        self.status = status
    }
}

extension RekognitionClientTypes {

    public enum PersonTrackingSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case index
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [PersonTrackingSortBy] {
            return [
                .index,
                .timestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .index: return "INDEX"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetPersonTrackingInput {
    /// The identifier for a job that tracks persons in a video. You get the JobId from a call to StartPersonTracking.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more persons to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of persons.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the Persons array. Use TIMESTAMP to sort array elements by the time persons are detected. Use INDEX to sort by the tracked persons. If you sort by INDEX, the array elements for each person are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.PersonTrackingSortBy?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.PersonTrackingSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension RekognitionClientTypes {
    /// Details and path tracking information for a single time a person's path is tracked in a video. Amazon Rekognition operations that track people's paths return an array of PersonDetection objects with elements for each time a person's path is tracked in a video. For more information, see GetPersonTracking in the Amazon Rekognition Developer Guide.
    public struct PersonDetection {
        /// Details about a person whose path was tracked in a video.
        public var person: RekognitionClientTypes.PersonDetail?
        /// The time, in milliseconds from the start of the video, that the person's path was tracked. Note that Timestamp is not guaranteed to be accurate to the individual frame where the person's path first appears.
        public var timestamp: Swift.Int

        public init(
            person: RekognitionClientTypes.PersonDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.person = person
            self.timestamp = timestamp
        }
    }

}

public struct GetPersonTrackingOutput {
    /// Job identifier for the person tracking operation for which you want to obtain results. The job identifer is returned by an initial call to StartPersonTracking.
    public var jobId: Swift.String?
    /// The current status of the person tracking job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartCelebrityRecognition and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of persons.
    public var nextToken: Swift.String?
    /// An array of the persons detected in the video and the time(s) their path was tracked throughout the video. An array element will exist for each time a person's path is tracked.
    public var persons: [RekognitionClientTypes.PersonDetection]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        persons: [RekognitionClientTypes.PersonDetection]? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.persons = persons
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct GetSegmentDetectionInput {
    /// Job identifier for the text detection operation for which you want results returned. You get the job identifer from an initial call to StartSegmentDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000.
    public var maxResults: Swift.Int?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of text.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RekognitionClientTypes {
    /// Information about a shot detection segment detected in a video. For more information, see [SegmentDetection].
    public struct ShotSegment {
        /// The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.
        public var confidence: Swift.Float?
        /// An Identifier for a shot detection segment detected in a video.
        public var index: Swift.Int?

        public init(
            confidence: Swift.Float? = nil,
            index: Swift.Int? = nil
        )
        {
            self.confidence = confidence
            self.index = index
        }
    }

}

extension RekognitionClientTypes {

    public enum TechnicalCueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blackFrames
        case colorBars
        case content
        case endCredits
        case openingCredits
        case slate
        case studioLogo
        case sdkUnknown(Swift.String)

        public static var allCases: [TechnicalCueType] {
            return [
                .blackFrames,
                .colorBars,
                .content,
                .endCredits,
                .openingCredits,
                .slate,
                .studioLogo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blackFrames: return "BlackFrames"
            case .colorBars: return "ColorBars"
            case .content: return "Content"
            case .endCredits: return "EndCredits"
            case .openingCredits: return "OpeningCredits"
            case .slate: return "Slate"
            case .studioLogo: return "StudioLogo"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Information about a technical cue segment. For more information, see [SegmentDetection].
    public struct TechnicalCueSegment {
        /// The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.
        public var confidence: Swift.Float?
        /// The type of the technical cue.
        public var type: RekognitionClientTypes.TechnicalCueType?

        public init(
            confidence: Swift.Float? = nil,
            type: RekognitionClientTypes.TechnicalCueType? = nil
        )
        {
            self.confidence = confidence
            self.type = type
        }
    }

}

extension RekognitionClientTypes {

    public enum SegmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case shot
        case technicalCue
        case sdkUnknown(Swift.String)

        public static var allCases: [SegmentType] {
            return [
                .shot,
                .technicalCue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .shot: return "SHOT"
            case .technicalCue: return "TECHNICAL_CUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// A technical cue or shot detection segment detected in a video. An array of SegmentDetection objects containing all segments detected in a stored video is returned by [GetSegmentDetection].
    public struct SegmentDetection {
        /// The duration of a video segment, expressed in frames.
        public var durationFrames: Swift.Int?
        /// The duration of the detected segment in milliseconds.
        public var durationMillis: Swift.Int?
        /// The duration of the timecode for the detected segment in SMPTE format.
        public var durationSMPTE: Swift.String?
        /// The frame number at the end of a video segment, using a frame index that starts with 0.
        public var endFrameNumber: Swift.Int?
        /// The frame-accurate SMPTE timecode, from the start of a video, for the end of a detected segment. EndTimecode is in HH:MM:SS:fr format (and ;fr for drop frame-rates).
        public var endTimecodeSMPTE: Swift.String?
        /// The end time of the detected segment, in milliseconds, from the start of the video. This value is rounded down.
        public var endTimestampMillis: Swift.Int
        /// If the segment is a shot detection, contains information about the shot detection.
        public var shotSegment: RekognitionClientTypes.ShotSegment?
        /// The frame number of the start of a video segment, using a frame index that starts with 0.
        public var startFrameNumber: Swift.Int?
        /// The frame-accurate SMPTE timecode, from the start of a video, for the start of a detected segment. StartTimecode is in HH:MM:SS:fr format (and ;fr for drop frame-rates).
        public var startTimecodeSMPTE: Swift.String?
        /// The start time of the detected segment in milliseconds from the start of the video. This value is rounded down. For example, if the actual timestamp is 100.6667 milliseconds, Amazon Rekognition Video returns a value of 100 millis.
        public var startTimestampMillis: Swift.Int
        /// If the segment is a technical cue, contains information about the technical cue.
        public var technicalCueSegment: RekognitionClientTypes.TechnicalCueSegment?
        /// The type of the segment. Valid values are TECHNICAL_CUE and SHOT.
        public var type: RekognitionClientTypes.SegmentType?

        public init(
            durationFrames: Swift.Int? = nil,
            durationMillis: Swift.Int? = nil,
            durationSMPTE: Swift.String? = nil,
            endFrameNumber: Swift.Int? = nil,
            endTimecodeSMPTE: Swift.String? = nil,
            endTimestampMillis: Swift.Int = 0,
            shotSegment: RekognitionClientTypes.ShotSegment? = nil,
            startFrameNumber: Swift.Int? = nil,
            startTimecodeSMPTE: Swift.String? = nil,
            startTimestampMillis: Swift.Int = 0,
            technicalCueSegment: RekognitionClientTypes.TechnicalCueSegment? = nil,
            type: RekognitionClientTypes.SegmentType? = nil
        )
        {
            self.durationFrames = durationFrames
            self.durationMillis = durationMillis
            self.durationSMPTE = durationSMPTE
            self.endFrameNumber = endFrameNumber
            self.endTimecodeSMPTE = endTimecodeSMPTE
            self.endTimestampMillis = endTimestampMillis
            self.shotSegment = shotSegment
            self.startFrameNumber = startFrameNumber
            self.startTimecodeSMPTE = startTimecodeSMPTE
            self.startTimestampMillis = startTimestampMillis
            self.technicalCueSegment = technicalCueSegment
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    /// Information about the type of a segment requested in a call to [StartSegmentDetection]. An array of SegmentTypeInfo objects is returned by the response from [GetSegmentDetection].
    public struct SegmentTypeInfo {
        /// The version of the model used to detect segments.
        public var modelVersion: Swift.String?
        /// The type of a segment (technical cue or shot detection).
        public var type: RekognitionClientTypes.SegmentType?

        public init(
            modelVersion: Swift.String? = nil,
            type: RekognitionClientTypes.SegmentType? = nil
        )
        {
            self.modelVersion = modelVersion
            self.type = type
        }
    }

}

public struct GetSegmentDetectionOutput {
    /// An array of objects. There can be multiple audio streams. Each AudioMetadata object contains metadata for a single audio stream. Audio information in an AudioMetadata objects includes the audio codec, the number of audio channels, the duration of the audio stream, and the sample rate. Audio metadata is returned in each page of information returned by GetSegmentDetection.
    public var audioMetadata: [RekognitionClientTypes.AudioMetadata]?
    /// Job identifier for the segment detection operation for which you want to obtain results. The job identifer is returned by an initial call to StartSegmentDetection.
    public var jobId: Swift.String?
    /// Current status of the segment detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartSegmentDetection and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of text.
    public var nextToken: Swift.String?
    /// An array of segments detected in a video. The array is sorted by the segment types (TECHNICAL_CUE or SHOT) specified in the SegmentTypes input parameter of StartSegmentDetection. Within each segment type the array is sorted by timestamp values.
    public var segments: [RekognitionClientTypes.SegmentDetection]?
    /// An array containing the segment types requested in the call to StartSegmentDetection.
    public var selectedSegmentTypes: [RekognitionClientTypes.SegmentTypeInfo]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Currently, Amazon Rekognition Video returns a single object in the VideoMetadata array. The object contains information about the video stream in the input file that Amazon Rekognition Video chose to analyze. The VideoMetadata object includes the video codec, video format and other information. Video metadata is returned in each page of information returned by GetSegmentDetection.
    public var videoMetadata: [RekognitionClientTypes.VideoMetadata]?

    public init(
        audioMetadata: [RekognitionClientTypes.AudioMetadata]? = nil,
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        segments: [RekognitionClientTypes.SegmentDetection]? = nil,
        selectedSegmentTypes: [RekognitionClientTypes.SegmentTypeInfo]? = nil,
        statusMessage: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: [RekognitionClientTypes.VideoMetadata]? = nil
    )
    {
        self.audioMetadata = audioMetadata
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.segments = segments
        self.selectedSegmentTypes = selectedSegmentTypes
        self.statusMessage = statusMessage
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct GetTextDetectionInput {
    /// Job identifier for the text detection operation for which you want results returned. You get the job identifer from an initial call to StartTextDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of text.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RekognitionClientTypes {
    /// Information about text detected in a video. Incudes the detected text, the time in milliseconds from the start of the video that the text was detected, and where it was detected on the screen.
    public struct TextDetectionResult {
        /// Details about text detected in a video.
        public var textDetection: RekognitionClientTypes.TextDetection?
        /// The time, in milliseconds from the start of the video, that the text was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the text first appears.
        public var timestamp: Swift.Int

        public init(
            textDetection: RekognitionClientTypes.TextDetection? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.textDetection = textDetection
            self.timestamp = timestamp
        }
    }

}

public struct GetTextDetectionOutput {
    /// Job identifier for the text detection operation for which you want to obtain results. The job identifer is returned by an initial call to StartTextDetection.
    public var jobId: Swift.String?
    /// Current status of the text detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// A job identifier specified in the call to StartTextDetection and returned in the job completion notification sent to your Amazon Simple Notification Service topic.
    public var jobTag: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of text.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// An array of text detected in the video. Each element contains the detected text, the time in milliseconds from the start of the video that the text was detected, and where it was detected on the screen.
    public var textDetections: [RekognitionClientTypes.TextDetectionResult]?
    /// Version number of the text detection model that was used to detect text.
    public var textModelVersion: Swift.String?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public var video: RekognitionClientTypes.Video?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        jobTag: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        textDetections: [RekognitionClientTypes.TextDetectionResult]? = nil,
        textModelVersion: Swift.String? = nil,
        video: RekognitionClientTypes.Video? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobTag = jobTag
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.textDetections = textDetections
        self.textModelVersion = textModelVersion
        self.video = video
        self.videoMetadata = videoMetadata
    }
}

public struct IndexFacesInput {
    /// The ID of an existing collection to which you want to add the faces that are detected in the input images.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of facial attributes you want to be returned. A DEFAULT subset of facial attributes - BoundingBox, Confidence, Pose, Quality, and Landmarks - will always be returned. You can request for specific facial attributes (in addition to the default list) - by using ["DEFAULT", "FACE_OCCLUDED"] or just ["FACE_OCCLUDED"]. You can request for all facial attributes by using ["ALL"]. Requesting more attributes may increase response time. If you provide both, ["ALL", "DEFAULT"], the service uses a logical AND operator to determine which attributes to return (in this case, all attributes).
    public var detectionAttributes: [RekognitionClientTypes.Attribute]?
    /// The ID you want to assign to all the faces detected in the image.
    public var externalImageId: Swift.String?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes isn't supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// The maximum number of faces to index. The value of MaxFaces must be greater than or equal to 1. IndexFaces returns no more than 100 detected faces in an image, even if you specify a larger value for MaxFaces. If IndexFaces detects more faces than the value of MaxFaces, the faces with the lowest quality are filtered out first. If there are still more faces than the value of MaxFaces, the faces with the smallest bounding boxes are filtered out (up to the number that's needed to satisfy the value of MaxFaces). Information about the unindexed faces is available in the UnindexedFaces array. The faces that are returned by IndexFaces are sorted by the largest face bounding box size to the smallest size, in descending order. MaxFaces can be used with a collection associated with any version of the face model.
    public var maxFaces: Swift.Int?
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't indexed. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The default value is AUTO. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?

    public init(
        collectionId: Swift.String? = nil,
        detectionAttributes: [RekognitionClientTypes.Attribute]? = nil,
        externalImageId: Swift.String? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxFaces: Swift.Int? = nil,
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil
    )
    {
        self.collectionId = collectionId
        self.detectionAttributes = detectionAttributes
        self.externalImageId = externalImageId
        self.image = image
        self.maxFaces = maxFaces
        self.qualityFilter = qualityFilter
    }
}

extension RekognitionClientTypes {

    public enum Reason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exceedsMaxFaces
        case extremePose
        case lowBrightness
        case lowConfidence
        case lowFaceQuality
        case lowSharpness
        case smallBoundingBox
        case sdkUnknown(Swift.String)

        public static var allCases: [Reason] {
            return [
                .exceedsMaxFaces,
                .extremePose,
                .lowBrightness,
                .lowConfidence,
                .lowFaceQuality,
                .lowSharpness,
                .smallBoundingBox
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exceedsMaxFaces: return "EXCEEDS_MAX_FACES"
            case .extremePose: return "EXTREME_POSE"
            case .lowBrightness: return "LOW_BRIGHTNESS"
            case .lowConfidence: return "LOW_CONFIDENCE"
            case .lowFaceQuality: return "LOW_FACE_QUALITY"
            case .lowSharpness: return "LOW_SHARPNESS"
            case .smallBoundingBox: return "SMALL_BOUNDING_BOX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// A face that [IndexFaces] detected, but didn't index. Use the Reasons response attribute to determine why a face wasn't indexed.
    public struct UnindexedFace {
        /// The structure that contains attributes of a face that IndexFacesdetected, but didn't index.
        public var faceDetail: RekognitionClientTypes.FaceDetail?
        /// An array of reasons that specify why a face wasn't indexed.
        ///
        /// * EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.
        ///
        /// * EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the MaxFaces input parameter for IndexFaces.
        ///
        /// * LOW_BRIGHTNESS - The image is too dark.
        ///
        /// * LOW_SHARPNESS - The image is too blurry.
        ///
        /// * LOW_CONFIDENCE - The face was detected with a low confidence.
        ///
        /// * SMALL_BOUNDING_BOX - The bounding box around the face is too small.
        public var reasons: [RekognitionClientTypes.Reason]?

        public init(
            faceDetail: RekognitionClientTypes.FaceDetail? = nil,
            reasons: [RekognitionClientTypes.Reason]? = nil
        )
        {
            self.faceDetail = faceDetail
            self.reasons = reasons
        }
    }

}

public struct IndexFacesOutput {
    /// The version number of the face detection model that's associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// An array of faces detected and added to the collection. For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide.
    public var faceRecords: [RekognitionClientTypes.FaceRecord]?
    /// If your collection is associated with a face detection model that's later than version 3.0, the value of OrientationCorrection is always null and no orientation information is returned. If your collection is associated with a face detection model that's version 3.0 or earlier, the following applies:
    ///
    /// * If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction - the bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. The value of OrientationCorrection is null.
    ///
    /// * If the image doesn't contain orientation information in its Exif metadata, Amazon Rekognition returns an estimated orientation (ROTATE_0, ROTATE_90, ROTATE_180, ROTATE_270). Amazon Rekognition doesn’t perform image correction for images. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    ///
    ///
    /// Bounding box information is returned in the FaceRecords array. You can get the version of the face detection model by calling [DescribeCollection].
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// An array of faces that were detected in the image but weren't indexed. They weren't indexed because the quality filter identified them as low quality, or the MaxFaces request parameter filtered them out. To use the quality filter, you specify the QualityFilter request parameter.
    public var unindexedFaces: [RekognitionClientTypes.UnindexedFace]?

    public init(
        faceModelVersion: Swift.String? = nil,
        faceRecords: [RekognitionClientTypes.FaceRecord]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unindexedFaces: [RekognitionClientTypes.UnindexedFace]? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.faceRecords = faceRecords
        self.orientationCorrection = orientationCorrection
        self.unindexedFaces = unindexedFaces
    }
}

/// Indicates that a provided manifest file is empty or larger than the allowed limit.
public struct InvalidManifestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidManifestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

extension RekognitionClientTypes {
    /// Specifies the starting point in a Kinesis stream to start processing. You can use the producer timestamp or the fragment number. One of either producer timestamp or fragment number is required. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see [Fragment](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html).
    public struct KinesisVideoStreamStartSelector {
        /// The unique identifier of the fragment. This value monotonically increases based on the ingestion order.
        public var fragmentNumber: Swift.String?
        /// The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format.
        public var producerTimestamp: Swift.Int?

        public init(
            fragmentNumber: Swift.String? = nil,
            producerTimestamp: Swift.Int? = nil
        )
        {
            self.fragmentNumber = fragmentNumber
            self.producerTimestamp = producerTimestamp
        }
    }

}

extension RekognitionClientTypes {

    public enum LabelDetectionFeatureName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case generalLabels
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionFeatureName] {
            return [
                .generalLabels
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .generalLabels: return "GENERAL_LABELS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Contains the specified filters that should be applied to a list of returned GENERAL_LABELS.
    public struct LabelDetectionSettings {
        /// Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see [Detecting Labels](https://docs.aws.amazon.com/rekognition/latest/dg/labels.html).
        public var generalLabels: RekognitionClientTypes.GeneralLabelsSettings?

        public init(
            generalLabels: RekognitionClientTypes.GeneralLabelsSettings? = nil
        )
        {
            self.generalLabels = generalLabels
        }
    }

}

public struct ListCollectionsInput {
    /// Maximum number of collection IDs to return.
    public var maxResults: Swift.Int?
    /// Pagination token from the previous response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListCollectionsOutput {
    /// An array of collection IDs.
    public var collectionIds: [Swift.String]?
    /// Version numbers of the face detection models associated with the collections in the array CollectionIds. For example, the value of FaceModelVersions[2] is the version number for the face detection model used by the collection in CollectionId[2].
    public var faceModelVersions: [Swift.String]?
    /// If the result is truncated, the response provides a NextToken that you can use in the subsequent request to fetch the next set of collection IDs.
    public var nextToken: Swift.String?

    public init(
        collectionIds: [Swift.String]? = nil,
        faceModelVersions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collectionIds = collectionIds
        self.faceModelVersions = faceModelVersions
        self.nextToken = nextToken
    }
}

public struct ListDatasetEntriesInput {
    /// Specifies a label filter for the response. The response includes an entry only if one or more of the labels in ContainsLabels exist in the entry.
    public var containsLabels: [Swift.String]?
    /// The Amazon Resource Name (ARN) for the dataset that you want to use.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// Specifies an error filter for the response. Specify True to only include entries that have errors.
    public var hasErrors: Swift.Bool?
    /// Specify true to get only the JSON Lines where the image is labeled. Specify false to get only the JSON Lines where the image isn't labeled. If you don't specify Labeled, ListDatasetEntries returns JSON Lines for labeled and unlabeled images.
    public var labeled: Swift.Bool?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// If specified, ListDatasetEntries only returns JSON Lines where the value of SourceRefContains is part of the source-ref field. The source-ref field contains the Amazon S3 location of the image. You can use SouceRefContains for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.
    public var sourceRefContains: Swift.String?

    public init(
        containsLabels: [Swift.String]? = nil,
        datasetArn: Swift.String? = nil,
        hasErrors: Swift.Bool? = nil,
        labeled: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sourceRefContains: Swift.String? = nil
    )
    {
        self.containsLabels = containsLabels
        self.datasetArn = datasetArn
        self.hasErrors = hasErrors
        self.labeled = labeled
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sourceRefContains = sourceRefContains
    }
}

public struct ListDatasetEntriesOutput {
    /// A list of entries (images) in the dataset.
    public var datasetEntries: [Swift.String]?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        datasetEntries: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetEntries = datasetEntries
        self.nextToken = nextToken
    }
}

public struct ListDatasetLabelsInput {
    /// The Amazon Resource Name (ARN) of the dataset that you want to use.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        datasetArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDatasetLabelsOutput {
    /// A list of the labels in the dataset.
    public var datasetLabelDescriptions: [RekognitionClientTypes.DatasetLabelDescription]?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        datasetLabelDescriptions: [RekognitionClientTypes.DatasetLabelDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetLabelDescriptions = datasetLabelDescriptions
        self.nextToken = nextToken
    }
}

public struct ListFacesInput {
    /// ID of the collection from which to list the faces.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of face IDs to filter results with when listing faces in a collection.
    public var faceIds: [Swift.String]?
    /// Maximum number of faces to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
    public var nextToken: Swift.String?
    /// An array of user IDs to filter results with when listing faces in a collection.
    public var userId: Swift.String?

    public init(
        collectionId: Swift.String? = nil,
        faceIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
        self.faceIds = faceIds
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userId = userId
    }
}

public struct ListFacesOutput {
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// An array of Face objects.
    public var faces: [RekognitionClientTypes.Face]?
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
    public var nextToken: Swift.String?

    public init(
        faceModelVersion: Swift.String? = nil,
        faces: [RekognitionClientTypes.Face]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.faces = faces
        self.nextToken = nextToken
    }
}

public struct ListMediaAnalysisJobsInput {
    /// The maximum number of results to return per paginated call. The largest value user can specify is 100. If user specifies a value greater than 100, an InvalidParameterException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// Pagination token, if the previous response was incomplete.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RekognitionClientTypes {
    /// Description for a media analysis job.
    public struct MediaAnalysisJobDescription {
        /// The Unix date and time when the job finished.
        public var completionTimestamp: Foundation.Date?
        /// The Unix date and time when the job was started.
        /// This member is required.
        public var creationTimestamp: Foundation.Date?
        /// Details about the error that resulted in failure of the job.
        public var failureDetails: RekognitionClientTypes.MediaAnalysisJobFailureDetails?
        /// Reference to the input manifest that was provided in the job creation request.
        /// This member is required.
        public var input: RekognitionClientTypes.MediaAnalysisInput?
        /// The identifier for a media analysis job.
        /// This member is required.
        public var jobId: Swift.String?
        /// The name of a media analysis job.
        public var jobName: Swift.String?
        /// KMS Key that was provided in the creation request.
        public var kmsKeyId: Swift.String?
        /// Provides statistics on input manifest and errors identified in the input manifest.
        public var manifestSummary: RekognitionClientTypes.MediaAnalysisManifestSummary?
        /// Operation configurations that were provided during job creation.
        /// This member is required.
        public var operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig?
        /// Output configuration that was provided in the creation request.
        /// This member is required.
        public var outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig?
        /// Output manifest that contains prediction results.
        public var results: RekognitionClientTypes.MediaAnalysisResults?
        /// The status of the media analysis job being retrieved.
        /// This member is required.
        public var status: RekognitionClientTypes.MediaAnalysisJobStatus?

        public init(
            completionTimestamp: Foundation.Date? = nil,
            creationTimestamp: Foundation.Date? = nil,
            failureDetails: RekognitionClientTypes.MediaAnalysisJobFailureDetails? = nil,
            input: RekognitionClientTypes.MediaAnalysisInput? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            manifestSummary: RekognitionClientTypes.MediaAnalysisManifestSummary? = nil,
            operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig? = nil,
            outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig? = nil,
            results: RekognitionClientTypes.MediaAnalysisResults? = nil,
            status: RekognitionClientTypes.MediaAnalysisJobStatus? = nil
        )
        {
            self.completionTimestamp = completionTimestamp
            self.creationTimestamp = creationTimestamp
            self.failureDetails = failureDetails
            self.input = input
            self.jobId = jobId
            self.jobName = jobName
            self.kmsKeyId = kmsKeyId
            self.manifestSummary = manifestSummary
            self.operationsConfig = operationsConfig
            self.outputConfig = outputConfig
            self.results = results
            self.status = status
        }
    }

}

public struct ListMediaAnalysisJobsOutput {
    /// Contains a list of all media analysis jobs.
    /// This member is required.
    public var mediaAnalysisJobs: [RekognitionClientTypes.MediaAnalysisJobDescription]?
    /// Pagination token, if the previous response was incomplete.
    public var nextToken: Swift.String?

    public init(
        mediaAnalysisJobs: [RekognitionClientTypes.MediaAnalysisJobDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.mediaAnalysisJobs = mediaAnalysisJobs
        self.nextToken = nextToken
    }
}

public struct ListProjectPoliciesInput {
    /// The maximum number of results to return per paginated call. The largest value you can specify is 5. If you specify a value greater than 5, a ValidationException error occurs. The default value is 5.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ARN of the project for which you want to list the project policies.
    /// This member is required.
    public var projectArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectArn = projectArn
    }
}

extension RekognitionClientTypes {
    /// Describes a project policy in the response from [ListProjectPolicies].
    public struct ProjectPolicy {
        /// The Unix datetime for the creation of the project policy.
        public var creationTimestamp: Foundation.Date?
        /// The Unix datetime for when the project policy was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The JSON document for the project policy.
        public var policyDocument: Swift.String?
        /// The name of the project policy.
        public var policyName: Swift.String?
        /// The revision ID of the project policy.
        public var policyRevisionId: Swift.String?
        /// The Amazon Resource Name (ARN) of the project to which the project policy is attached.
        public var projectArn: Swift.String?

        public init(
            creationTimestamp: Foundation.Date? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyRevisionId: Swift.String? = nil,
            projectArn: Swift.String? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.policyDocument = policyDocument
            self.policyName = policyName
            self.policyRevisionId = policyRevisionId
            self.projectArn = projectArn
        }
    }

}

public struct ListProjectPoliciesOutput {
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of project policies.
    public var nextToken: Swift.String?
    /// A list of project policies attached to the project.
    public var projectPolicies: [RekognitionClientTypes.ProjectPolicy]?

    public init(
        nextToken: Swift.String? = nil,
        projectPolicies: [RekognitionClientTypes.ProjectPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectPolicies = projectPolicies
    }
}

public struct ListStreamProcessorsInput {
    /// Maximum number of stream processors you want Amazon Rekognition Video to return in the response. The default is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more stream processors to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of stream processors.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RekognitionClientTypes {
    /// An object that recognizes faces or labels in a streaming video. An Amazon Rekognition stream processor is created by a call to [CreateStreamProcessor]. The request parameters for CreateStreamProcessor describe the Kinesis video stream source for the streaming video, face recognition parameters, and where to stream the analysis resullts.
    public struct StreamProcessor {
        /// Name of the Amazon Rekognition stream processor.
        public var name: Swift.String?
        /// Current status of the Amazon Rekognition stream processor.
        public var status: RekognitionClientTypes.StreamProcessorStatus?

        public init(
            name: Swift.String? = nil,
            status: RekognitionClientTypes.StreamProcessorStatus? = nil
        )
        {
            self.name = name
            self.status = status
        }
    }

}

public struct ListStreamProcessorsOutput {
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of stream processors.
    public var nextToken: Swift.String?
    /// List of stream processors that you have created.
    public var streamProcessors: [RekognitionClientTypes.StreamProcessor]?

    public init(
        nextToken: Swift.String? = nil,
        streamProcessors: [RekognitionClientTypes.StreamProcessor]? = nil
    )
    {
        self.nextToken = nextToken
        self.streamProcessors = streamProcessors
    }
}

public struct ListTagsForResourceInput {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that contains the tags that you want a list of.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// A list of key-value tags assigned to the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListUsersInput {
    /// The ID of an existing collection.
    /// This member is required.
    public var collectionId: Swift.String?
    /// Maximum number of UsersID to return.
    public var maxResults: Swift.Int?
    /// Pagingation token to receive the next set of UsersID.
    public var nextToken: Swift.String?

    public init(
        collectionId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RekognitionClientTypes {
    /// Metadata of the user stored in a collection.
    public struct User {
        /// A provided ID for the User. Unique within the collection.
        public var userId: Swift.String?
        /// Communicates if the UserID has been updated with latest set of faces to be associated with the UserID.
        public var userStatus: RekognitionClientTypes.UserStatus?

        public init(
            userId: Swift.String? = nil,
            userStatus: RekognitionClientTypes.UserStatus? = nil
        )
        {
            self.userId = userId
            self.userStatus = userStatus
        }
    }

}

public struct ListUsersOutput {
    /// A pagination token to be used with the subsequent request if the response is truncated.
    public var nextToken: Swift.String?
    /// List of UsersID associated with the specified collection.
    public var users: [RekognitionClientTypes.User]?

    public init(
        nextToken: Swift.String? = nil,
        users: [RekognitionClientTypes.User]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

/// The format of the project policy document that you supplied to PutProjectPolicy is incorrect.
public struct MalformedPolicyDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedPolicyDocumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

extension RekognitionClientTypes {
    /// Contains metadata for a UserID matched with a given face.
    public struct MatchedUser {
        /// A provided ID for the UserID. Unique within the collection.
        public var userId: Swift.String?
        /// The status of the user matched to a provided FaceID.
        public var userStatus: RekognitionClientTypes.UserStatus?

        public init(
            userId: Swift.String? = nil,
            userStatus: RekognitionClientTypes.UserStatus? = nil
        )
        {
            self.userId = userId
            self.userStatus = userStatus
        }
    }

}

extension RekognitionClientTypes {
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see [Calling Amazon Rekognition Video operations](https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html). Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see [Giving access to multiple Amazon SNS topics](https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics).
    public struct NotificationChannel {
        /// The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The Amazon SNS topic to which Amazon Rekognition posts the completion status.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init(
            roleArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.snsTopicArn = snsTopicArn
        }
    }

}

public struct PutProjectPolicyInput {
    /// A resource policy to add to the model. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see [IAM JSON policy reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).
    /// This member is required.
    public var policyDocument: Swift.String?
    /// A name for the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The revision ID for the Project Policy. Each time you modify a policy, Amazon Rekognition Custom Labels generates and assigns a new PolicyRevisionId and then deletes the previous version of the policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that the project policy is attached to.
    /// This member is required.
    public var projectArn: Swift.String?

    public init(
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyRevisionId = policyRevisionId
        self.projectArn = projectArn
    }
}

public struct PutProjectPolicyOutput {
    /// The ID of the project policy.
    public var policyRevisionId: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
    }
}

public struct RecognizeCelebritiesInput {
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init(
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.image = image
    }
}

public struct RecognizeCelebritiesOutput {
    /// Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 64 celebrities in an image. Each celebrity object includes the following attributes: Face, Confidence, Emotions, Landmarks, Pose, Quality, Smile, Id, KnownGender, MatchConfidence, Name, Urls.
    public var celebrityFaces: [RekognitionClientTypes.Celebrity]?
    /// Support for estimating image orientation using the the OrientationCorrection field has ceased as of August 2021. Any returned values for this field included in an API response will always be NULL. The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in CelebrityFaces and UnrecognizedFaces represent face locations before the image orientation is corrected. If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of OrientationCorrection is null. The CelebrityFaces and UnrecognizedFaces bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// Details about each unrecognized face in the image.
    public var unrecognizedFaces: [RekognitionClientTypes.ComparedFace]?

    public init(
        celebrityFaces: [RekognitionClientTypes.Celebrity]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unrecognizedFaces: [RekognitionClientTypes.ComparedFace]? = nil
    )
    {
        self.celebrityFaces = celebrityFaces
        self.orientationCorrection = orientationCorrection
        self.unrecognizedFaces = unrecognizedFaces
    }
}

public struct SearchFacesInput {
    /// ID of the collection the face belongs to.
    /// This member is required.
    public var collectionId: Swift.String?
    /// ID of a face to find matches for in the collection.
    /// This member is required.
    public var faceId: Swift.String?
    /// Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    public var maxFaces: Swift.Int?

    public init(
        collectionId: Swift.String? = nil,
        faceId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        maxFaces: Swift.Int? = nil
    )
    {
        self.collectionId = collectionId
        self.faceId = faceId
        self.faceMatchThreshold = faceMatchThreshold
        self.maxFaces = maxFaces
    }
}

public struct SearchFacesOutput {
    /// An array of faces that matched the input face, along with the confidence in the match.
    public var faceMatches: [RekognitionClientTypes.FaceMatch]?
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// ID of the face that was searched for matches in a collection.
    public var searchedFaceId: Swift.String?

    public init(
        faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
        faceModelVersion: Swift.String? = nil,
        searchedFaceId: Swift.String? = nil
    )
    {
        self.faceMatches = faceMatches
        self.faceModelVersion = faceModelVersion
        self.searchedFaceId = searchedFaceId
    }
}

public struct SearchFacesByImageInput {
    /// ID of the collection to search.
    /// This member is required.
    public var collectionId: Swift.String?
    /// (Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    public var maxFaces: Swift.Int?
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't searched for in the collection. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. The default value is NONE. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?

    public init(
        collectionId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxFaces: Swift.Int? = nil,
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil
    )
    {
        self.collectionId = collectionId
        self.faceMatchThreshold = faceMatchThreshold
        self.image = image
        self.maxFaces = maxFaces
        self.qualityFilter = qualityFilter
    }
}

public struct SearchFacesByImageOutput {
    /// An array of faces that match the input face, along with the confidence in the match.
    public var faceMatches: [RekognitionClientTypes.FaceMatch]?
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// The bounding box around the face in the input image that Amazon Rekognition used for the search.
    public var searchedFaceBoundingBox: RekognitionClientTypes.BoundingBox?
    /// The level of confidence that the searchedFaceBoundingBox, contains a face.
    public var searchedFaceConfidence: Swift.Float?

    public init(
        faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
        faceModelVersion: Swift.String? = nil,
        searchedFaceBoundingBox: RekognitionClientTypes.BoundingBox? = nil,
        searchedFaceConfidence: Swift.Float? = nil
    )
    {
        self.faceMatches = faceMatches
        self.faceModelVersion = faceModelVersion
        self.searchedFaceBoundingBox = searchedFaceBoundingBox
        self.searchedFaceConfidence = searchedFaceConfidence
    }
}

public struct SearchUsersInput {
    /// The ID of an existing collection containing the UserID, used with a UserId or FaceId. If a FaceId is provided, UserId isn’t required to be present in the Collection.
    /// This member is required.
    public var collectionId: Swift.String?
    /// ID for the existing face.
    public var faceId: Swift.String?
    /// Maximum number of identities to return.
    public var maxUsers: Swift.Int?
    /// ID for the existing User.
    public var userId: Swift.String?
    /// Optional value that specifies the minimum confidence in the matched UserID to return. Default value of 80.
    public var userMatchThreshold: Swift.Float?

    public init(
        collectionId: Swift.String? = nil,
        faceId: Swift.String? = nil,
        maxUsers: Swift.Int? = nil,
        userId: Swift.String? = nil,
        userMatchThreshold: Swift.Float? = nil
    )
    {
        self.collectionId = collectionId
        self.faceId = faceId
        self.maxUsers = maxUsers
        self.userId = userId
        self.userMatchThreshold = userMatchThreshold
    }
}

extension RekognitionClientTypes {
    /// Provides face metadata such as FaceId, BoundingBox, Confidence of the input face used for search.
    public struct SearchedFace {
        /// Unique identifier assigned to the face.
        public var faceId: Swift.String?

        public init(
            faceId: Swift.String? = nil
        )
        {
            self.faceId = faceId
        }
    }

}

extension RekognitionClientTypes {
    /// Contains metadata about a User searched for within a collection.
    public struct SearchedUser {
        /// A provided ID for the UserID. Unique within the collection.
        public var userId: Swift.String?

        public init(
            userId: Swift.String? = nil
        )
        {
            self.userId = userId
        }
    }

}

extension RekognitionClientTypes {
    /// Provides UserID metadata along with the confidence in the match of this UserID with the input face.
    public struct UserMatch {
        /// Describes the UserID metadata.
        public var similarity: Swift.Float?
        /// Confidence in the match of this UserID with the input face.
        public var user: RekognitionClientTypes.MatchedUser?

        public init(
            similarity: Swift.Float? = nil,
            user: RekognitionClientTypes.MatchedUser? = nil
        )
        {
            self.similarity = similarity
            self.user = user
        }
    }

}

public struct SearchUsersOutput {
    /// Version number of the face detection model associated with the input CollectionId.
    public var faceModelVersion: Swift.String?
    /// Contains the ID of a face that was used to search for matches in a collection.
    public var searchedFace: RekognitionClientTypes.SearchedFace?
    /// Contains the ID of the UserID that was used to search for matches in a collection.
    public var searchedUser: RekognitionClientTypes.SearchedUser?
    /// An array of UserMatch objects that matched the input face along with the confidence in the match. Array will be empty if there are no matches.
    public var userMatches: [RekognitionClientTypes.UserMatch]?

    public init(
        faceModelVersion: Swift.String? = nil,
        searchedFace: RekognitionClientTypes.SearchedFace? = nil,
        searchedUser: RekognitionClientTypes.SearchedUser? = nil,
        userMatches: [RekognitionClientTypes.UserMatch]? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.searchedFace = searchedFace
        self.searchedUser = searchedUser
        self.userMatches = userMatches
    }
}

public struct SearchUsersByImageInput {
    /// The ID of an existing collection containing the UserID.
    /// This member is required.
    public var collectionId: Swift.String?
    /// Provides the input image either as bytes or an S3 object. You pass image bytes to an Amazon Rekognition API operation by using the Bytes property. For example, you would use the Bytes property to pass an image loaded from a local file system. Image bytes passed by using the Bytes property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide. You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the S3Object property. Images stored in an S3 bucket do not need to be base64-encoded. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of UserIDs to return.
    public var maxUsers: Swift.Int?
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't searched for in the collection. The default value is NONE.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?
    /// Specifies the minimum confidence in the UserID match to return. Default value is 80.
    public var userMatchThreshold: Swift.Float?

    public init(
        collectionId: Swift.String? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxUsers: Swift.Int? = nil,
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil,
        userMatchThreshold: Swift.Float? = nil
    )
    {
        self.collectionId = collectionId
        self.image = image
        self.maxUsers = maxUsers
        self.qualityFilter = qualityFilter
        self.userMatchThreshold = userMatchThreshold
    }
}

extension RekognitionClientTypes {
    /// Contains data regarding the input face used for a search.
    public struct SearchedFaceDetails {
        /// Structure containing attributes of the face that the algorithm detected. A FaceDetail object contains either the default facial attributes or all facial attributes. The default attributes are BoundingBox, Confidence, Landmarks, Pose, and Quality. [GetFaceDetection] is the only Amazon Rekognition Video stored video operation that can return a FaceDetail object with all attributes. To specify which attributes to return, use the FaceAttributes input parameter for [StartFaceDetection]. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a FaceAttributes input parameter:
        ///
        /// * GetCelebrityRecognition
        ///
        /// * GetPersonTracking
        ///
        /// * GetFaceSearch
        ///
        ///
        /// The Amazon Rekognition Image [DetectFaces] and [IndexFaces] operations can return all facial attributes. To specify which attributes to return, use the Attributes input parameter for DetectFaces. For IndexFaces, use the DetectAttributes input parameter.
        public var faceDetail: RekognitionClientTypes.FaceDetail?

        public init(
            faceDetail: RekognitionClientTypes.FaceDetail? = nil
        )
        {
            self.faceDetail = faceDetail
        }
    }

}

extension RekognitionClientTypes {

    public enum UnsearchedFaceReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exceedsMaxFaces
        case extremePose
        case faceNotLargest
        case lowBrightness
        case lowConfidence
        case lowFaceQuality
        case lowSharpness
        case smallBoundingBox
        case sdkUnknown(Swift.String)

        public static var allCases: [UnsearchedFaceReason] {
            return [
                .exceedsMaxFaces,
                .extremePose,
                .faceNotLargest,
                .lowBrightness,
                .lowConfidence,
                .lowFaceQuality,
                .lowSharpness,
                .smallBoundingBox
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exceedsMaxFaces: return "EXCEEDS_MAX_FACES"
            case .extremePose: return "EXTREME_POSE"
            case .faceNotLargest: return "FACE_NOT_LARGEST"
            case .lowBrightness: return "LOW_BRIGHTNESS"
            case .lowConfidence: return "LOW_CONFIDENCE"
            case .lowFaceQuality: return "LOW_FACE_QUALITY"
            case .lowSharpness: return "LOW_SHARPNESS"
            case .smallBoundingBox: return "SMALL_BOUNDING_BOX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// Face details inferred from the image but not used for search. The response attribute contains reasons for why a face wasn't used for Search.
    public struct UnsearchedFace {
        /// Structure containing attributes of the face that the algorithm detected. A FaceDetail object contains either the default facial attributes or all facial attributes. The default attributes are BoundingBox, Confidence, Landmarks, Pose, and Quality. [GetFaceDetection] is the only Amazon Rekognition Video stored video operation that can return a FaceDetail object with all attributes. To specify which attributes to return, use the FaceAttributes input parameter for [StartFaceDetection]. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a FaceAttributes input parameter:
        ///
        /// * GetCelebrityRecognition
        ///
        /// * GetPersonTracking
        ///
        /// * GetFaceSearch
        ///
        ///
        /// The Amazon Rekognition Image [DetectFaces] and [IndexFaces] operations can return all facial attributes. To specify which attributes to return, use the Attributes input parameter for DetectFaces. For IndexFaces, use the DetectAttributes input parameter.
        public var faceDetails: RekognitionClientTypes.FaceDetail?
        /// Reasons why a face wasn't used for Search.
        public var reasons: [RekognitionClientTypes.UnsearchedFaceReason]?

        public init(
            faceDetails: RekognitionClientTypes.FaceDetail? = nil,
            reasons: [RekognitionClientTypes.UnsearchedFaceReason]? = nil
        )
        {
            self.faceDetails = faceDetails
            self.reasons = reasons
        }
    }

}

public struct SearchUsersByImageOutput {
    /// Version number of the face detection model associated with the input collection CollectionId.
    public var faceModelVersion: Swift.String?
    /// A list of FaceDetail objects containing the BoundingBox for the largest face in image, as well as the confidence in the bounding box, that was searched for matches. If no valid face is detected in the image the response will contain no SearchedFace object.
    public var searchedFace: RekognitionClientTypes.SearchedFaceDetails?
    /// List of UnsearchedFace objects. Contains the face details infered from the specified image but not used for search. Contains reasons that describe why a face wasn't used for Search.
    public var unsearchedFaces: [RekognitionClientTypes.UnsearchedFace]?
    /// An array of UserID objects that matched the input face, along with the confidence in the match. The returned structure will be empty if there are no matches. Returned if the SearchUsersByImageResponse action is successful.
    public var userMatches: [RekognitionClientTypes.UserMatch]?

    public init(
        faceModelVersion: Swift.String? = nil,
        searchedFace: RekognitionClientTypes.SearchedFaceDetails? = nil,
        unsearchedFaces: [RekognitionClientTypes.UnsearchedFace]? = nil,
        userMatches: [RekognitionClientTypes.UserMatch]? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.searchedFace = searchedFace
        self.unsearchedFaces = unsearchedFaces
        self.userMatches = userMatches
    }
}

/// The file size or duration of the supplied media is too large. The maximum file size is 10GB. The maximum duration is 6 hours.
public struct VideoTooLargeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        /// A universally unique identifier (UUID) for the request.
        public internal(set) var logref: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "VideoTooLargeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.logref = logref
        self.properties.message = message
    }
}

public struct StartCelebrityRecognitionInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartCelebrityRecognition requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the celebrity recognition analysis to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to recognize celebrities. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartCelebrityRecognitionOutput {
    /// The identifier for the celebrity recognition analysis job. Use JobId to identify the job in a subsequent call to GetCelebrityRecognition.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartContentModerationInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartContentModeration requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition doesn't return any moderated content labels with a confidence level lower than this specified value. If you don't specify MinConfidence, GetContentModeration returns labels with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the content analysis to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect inappropriate, unwanted, or offensive content. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        minConfidence: Swift.Float? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartContentModerationOutput {
    /// The identifier for the content analysis job. Use JobId to identify the job in a subsequent call to GetContentModeration.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartFaceDetectionInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartFaceDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// The face attributes you want returned. DEFAULT - The following subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality and Landmarks. ALL - All facial attributes are returned.
    public var faceAttributes: RekognitionClientTypes.FaceAttributes?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the face detection operation. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect faces. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        faceAttributes: RekognitionClientTypes.FaceAttributes? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.faceAttributes = faceAttributes
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartFaceDetectionOutput {
    /// The identifier for the face detection job. Use JobId to identify the job in a subsequent call to GetFaceDetection.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartFaceSearchInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartFaceSearch requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// ID of the collection that contains the faces you want to search for.
    /// This member is required.
    public var collectionId: Swift.String?
    /// The minimum confidence in the person match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the search. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video you want to search. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.faceMatchThreshold = faceMatchThreshold
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartFaceSearchOutput {
    /// The identifier for the search job. Use JobId to identify the job in a subsequent call to GetFaceSearch.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartLabelDetectionInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartLabelDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// The features to return after video analysis. You can specify that GENERAL_LABELS are returned.
    public var features: [RekognitionClientTypes.LabelDetectionFeatureName]?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected label. Confidence represents how certain Amazon Rekognition is that a label is correctly identified.0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any labels with a confidence level lower than this specified value. If you don't specify MinConfidence, the operation returns labels and bounding boxes (if detected) with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the label detection operation to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The settings for a StartLabelDetection request.Contains the specified parameters for the label detection request of an asynchronous label analysis operation. Settings can include filters for GENERAL_LABELS.
    public var settings: RekognitionClientTypes.LabelDetectionSettings?
    /// The video in which you want to detect labels. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        features: [RekognitionClientTypes.LabelDetectionFeatureName]? = nil,
        jobTag: Swift.String? = nil,
        minConfidence: Swift.Float? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        settings: RekognitionClientTypes.LabelDetectionSettings? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.features = features
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.settings = settings
        self.video = video
    }
}

public struct StartLabelDetectionOutput {
    /// The identifier for the label detection job. Use JobId to identify the job in a subsequent call to GetLabelDetection.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartMediaAnalysisJobInput {
    /// Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple StartMediaAnalysisJobRequest requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.
    public var clientRequestToken: Swift.String?
    /// Input data to be analyzed by the job.
    /// This member is required.
    public var input: RekognitionClientTypes.MediaAnalysisInput?
    /// The name of the job. Does not have to be unique.
    public var jobName: Swift.String?
    /// The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.
    public var kmsKeyId: Swift.String?
    /// Configuration options for the media analysis job to be created.
    /// This member is required.
    public var operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig?
    /// The Amazon S3 bucket location to store the results.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        input: RekognitionClientTypes.MediaAnalysisInput? = nil,
        jobName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        operationsConfig: RekognitionClientTypes.MediaAnalysisOperationsConfig? = nil,
        outputConfig: RekognitionClientTypes.MediaAnalysisOutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.input = input
        self.jobName = jobName
        self.kmsKeyId = kmsKeyId
        self.operationsConfig = operationsConfig
        self.outputConfig = outputConfig
    }
}

public struct StartMediaAnalysisJobOutput {
    /// Identifier for the created job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartPersonTrackingInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartPersonTracking requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the people detection operation to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect people. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartPersonTrackingOutput {
    /// The identifier for the person detection job. Use JobId to identify the job in a subsequent call to GetPersonTracking.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartProjectVersionInput {
    /// The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Rekognition Custom Labels doesn't auto-scale the model.
    public var maxInferenceUnits: Swift.Int?
    /// The minimum number of inference units to use. A single inference unit represents 1 hour of processing. Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use.
    /// This member is required.
    public var minInferenceUnits: Swift.Int?
    /// The Amazon Resource Name(ARN) of the model version that you want to start.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init(
        maxInferenceUnits: Swift.Int? = nil,
        minInferenceUnits: Swift.Int? = nil,
        projectVersionArn: Swift.String? = nil
    )
    {
        self.maxInferenceUnits = maxInferenceUnits
        self.minInferenceUnits = minInferenceUnits
        self.projectVersionArn = projectVersionArn
    }
}

public struct StartProjectVersionOutput {
    /// The current running status of the model.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init(
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

extension RekognitionClientTypes {
    /// Filters for the shot detection segments returned by GetSegmentDetection. For more information, see [StartSegmentDetectionFilters].
    public struct StartShotDetectionFilter {
        /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected segment. Confidence represents how certain Amazon Rekognition is that a segment is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any segments with a confidence level lower than this specified value. If you don't specify MinSegmentConfidence, the GetSegmentDetection returns segments with confidence values greater than or equal to 50 percent.
        public var minSegmentConfidence: Swift.Float?

        public init(
            minSegmentConfidence: Swift.Float? = nil
        )
        {
            self.minSegmentConfidence = minSegmentConfidence
        }
    }

}

extension RekognitionClientTypes {
    /// Filters for the technical segments returned by [GetSegmentDetection]. For more information, see [StartSegmentDetectionFilters].
    public struct StartTechnicalCueDetectionFilter {
        /// A filter that allows you to control the black frame detection by specifying the black levels and pixel coverage of black pixels in a frame. Videos can come from multiple sources, formats, and time periods, with different standards and varying noise levels for black frames that need to be accounted for.
        public var blackFrame: RekognitionClientTypes.BlackFrame?
        /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected segment. Confidence represents how certain Amazon Rekognition is that a segment is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any segments with a confidence level lower than this specified value. If you don't specify MinSegmentConfidence, GetSegmentDetection returns segments with confidence values greater than or equal to 50 percent.
        public var minSegmentConfidence: Swift.Float?

        public init(
            blackFrame: RekognitionClientTypes.BlackFrame? = nil,
            minSegmentConfidence: Swift.Float? = nil
        )
        {
            self.blackFrame = blackFrame
            self.minSegmentConfidence = minSegmentConfidence
        }
    }

}

extension RekognitionClientTypes {
    /// Filters applied to the technical cue or shot detection segments. For more information, see [StartSegmentDetection].
    public struct StartSegmentDetectionFilters {
        /// Filters that are specific to shot detections.
        public var shotFilter: RekognitionClientTypes.StartShotDetectionFilter?
        /// Filters that are specific to technical cues.
        public var technicalCueFilter: RekognitionClientTypes.StartTechnicalCueDetectionFilter?

        public init(
            shotFilter: RekognitionClientTypes.StartShotDetectionFilter? = nil,
            technicalCueFilter: RekognitionClientTypes.StartTechnicalCueDetectionFilter? = nil
        )
        {
            self.shotFilter = shotFilter
            self.technicalCueFilter = technicalCueFilter
        }
    }

}

public struct StartSegmentDetectionInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartSegmentDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// Filters for technical cue or shot detection.
    public var filters: RekognitionClientTypes.StartSegmentDetectionFilters?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.
    /// This member is required.
    public var segmentTypes: [RekognitionClientTypes.SegmentType]?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartSegmentDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        segmentTypes: [RekognitionClientTypes.SegmentType]? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.segmentTypes = segmentTypes
        self.video = video
    }
}

public struct StartSegmentDetectionOutput {
    /// Unique identifier for the segment detection job. The JobId is returned from StartSegmentDetection.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension RekognitionClientTypes {
    /// This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public struct StreamProcessingStartSelector {
        /// Specifies the starting point in the stream to start processing. This can be done with a producer timestamp or a fragment number in a Kinesis stream.
        public var kvsStreamStartSelector: RekognitionClientTypes.KinesisVideoStreamStartSelector?

        public init(
            kvsStreamStartSelector: RekognitionClientTypes.KinesisVideoStreamStartSelector? = nil
        )
        {
            self.kvsStreamStartSelector = kvsStreamStartSelector
        }
    }

}

extension RekognitionClientTypes {
    /// Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video.
    public struct StreamProcessingStopSelector {
        /// Specifies the maximum amount of time in seconds that you want the stream to be processed. The largest amount of time is 2 minutes. The default is 10 seconds.
        public var maxDurationInSeconds: Swift.Int?

        public init(
            maxDurationInSeconds: Swift.Int? = nil
        )
        {
            self.maxDurationInSeconds = maxDurationInSeconds
        }
    }

}

public struct StartStreamProcessorInput {
    /// The name of the stream processor to start processing.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see [Fragment](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html). This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public var startSelector: RekognitionClientTypes.StreamProcessingStartSelector?
    /// Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public var stopSelector: RekognitionClientTypes.StreamProcessingStopSelector?

    public init(
        name: Swift.String? = nil,
        startSelector: RekognitionClientTypes.StreamProcessingStartSelector? = nil,
        stopSelector: RekognitionClientTypes.StreamProcessingStopSelector? = nil
    )
    {
        self.name = name
        self.startSelector = startSelector
        self.stopSelector = stopSelector
    }
}

public struct StartStreamProcessorOutput {
    /// A unique identifier for the stream processing session.
    public var sessionId: Swift.String?

    public init(
        sessionId: Swift.String? = nil
    )
    {
        self.sessionId = sessionId
    }
}

extension RekognitionClientTypes {
    /// Set of optional parameters that let you set the criteria text must meet to be included in your response. WordFilter looks at a word's height, width and minimum confidence. RegionOfInterest lets you set a specific region of the screen to look for text in.
    public struct StartTextDetectionFilters {
        /// Filter focusing on a certain area of the frame. Uses a BoundingBox object to set the region of the screen.
        public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
        /// Filters focusing on qualities of the text, such as confidence or size.
        public var wordFilter: RekognitionClientTypes.DetectionFilter?

        public init(
            regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
            wordFilter: RekognitionClientTypes.DetectionFilter? = nil
        )
        {
            self.regionsOfInterest = regionsOfInterest
            self.wordFilter = wordFilter
        }
    }

}

public struct StartTextDetectionInput {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentaly started more than once.
    public var clientRequestToken: Swift.String?
    /// Optional parameters that let you set criteria the text must meet to be included in your response.
    public var filters: RekognitionClientTypes.StartTextDetectionFilters?
    /// An identifier returned in the completion status published by your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see [Calling Amazon Rekognition Video operations](https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html). Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see [Giving access to multiple Amazon SNS topics](https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics).
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init(
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartTextDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

public struct StartTextDetectionOutput {
    /// Identifier for the text detection job. Use JobId to identify the job in a subsequent call to GetTextDetection.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopProjectVersionInput {
    /// The Amazon Resource Name (ARN) of the model version that you want to stop. This operation requires permissions to perform the rekognition:StopProjectVersion action.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init(
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

public struct StopProjectVersionOutput {
    /// The current status of the stop operation.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init(
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

public struct StopStreamProcessorInput {
    /// The name of a stream processor created by [CreateStreamProcessor].
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct StopStreamProcessorOutput {

    public init() { }
}

public struct TagResourceInput {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that you want to assign the tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key-value tags to assign to the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that you want to remove the tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateDatasetEntriesInput {
    /// The changes that you want to make to the dataset.
    /// This member is required.
    public var changes: RekognitionClientTypes.DatasetChanges?
    /// The Amazon Resource Name (ARN) of the dataset that you want to update.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init(
        changes: RekognitionClientTypes.DatasetChanges? = nil,
        datasetArn: Swift.String? = nil
    )
    {
        self.changes = changes
        self.datasetArn = datasetArn
    }
}

public struct UpdateDatasetEntriesOutput {

    public init() { }
}

extension RekognitionClientTypes {

    public enum StreamProcessorParameterToDelete: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connectedhomeminconfidence
        case regionsofinterest
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamProcessorParameterToDelete] {
            return [
                .connectedhomeminconfidence,
                .regionsofinterest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connectedhomeminconfidence: return "ConnectedHomeMinConfidence"
            case .regionsofinterest: return "RegionsOfInterest"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RekognitionClientTypes {
    /// The stream processor settings that you want to update. ConnectedHome settings can be updated to detect different labels with a different minimum confidence.
    public struct StreamProcessorSettingsForUpdate {
        /// The label detection settings you want to use for your stream processor.
        public var connectedHomeForUpdate: RekognitionClientTypes.ConnectedHomeSettingsForUpdate?

        public init(
            connectedHomeForUpdate: RekognitionClientTypes.ConnectedHomeSettingsForUpdate? = nil
        )
        {
            self.connectedHomeForUpdate = connectedHomeForUpdate
        }
    }

}

public struct UpdateStreamProcessorInput {
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Name of the stream processor that you want to update.
    /// This member is required.
    public var name: Swift.String?
    /// A list of parameters you want to delete from the stream processor.
    public var parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. This is an optional parameter for label detection stream processors.
    public var regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]?
    /// The stream processor settings that you want to update. Label detection settings can be updated to detect different labels with a different minimum confidence.
    public var settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate?

    public init(
        dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        name: Swift.String? = nil,
        parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]? = nil,
        regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]? = nil,
        settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate? = nil
    )
    {
        self.dataSharingPreferenceForUpdate = dataSharingPreferenceForUpdate
        self.name = name
        self.parametersToDelete = parametersToDelete
        self.regionsOfInterestForUpdate = regionsOfInterestForUpdate
        self.settingsForUpdate = settingsForUpdate
    }
}

public struct UpdateStreamProcessorOutput {

    public init() { }
}

extension AssociateFacesInput {

    static func urlPathProvider(_ value: AssociateFacesInput) -> Swift.String? {
        return "/"
    }
}

extension CompareFacesInput {

    static func urlPathProvider(_ value: CompareFacesInput) -> Swift.String? {
        return "/"
    }
}

extension CopyProjectVersionInput {

    static func urlPathProvider(_ value: CopyProjectVersionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCollectionInput {

    static func urlPathProvider(_ value: CreateCollectionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDatasetInput {

    static func urlPathProvider(_ value: CreateDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFaceLivenessSessionInput {

    static func urlPathProvider(_ value: CreateFaceLivenessSessionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProjectInput {

    static func urlPathProvider(_ value: CreateProjectInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProjectVersionInput {

    static func urlPathProvider(_ value: CreateProjectVersionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStreamProcessorInput {

    static func urlPathProvider(_ value: CreateStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserInput {

    static func urlPathProvider(_ value: CreateUserInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCollectionInput {

    static func urlPathProvider(_ value: DeleteCollectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDatasetInput {

    static func urlPathProvider(_ value: DeleteDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFacesInput {

    static func urlPathProvider(_ value: DeleteFacesInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProjectInput {

    static func urlPathProvider(_ value: DeleteProjectInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProjectPolicyInput {

    static func urlPathProvider(_ value: DeleteProjectPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProjectVersionInput {

    static func urlPathProvider(_ value: DeleteProjectVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStreamProcessorInput {

    static func urlPathProvider(_ value: DeleteStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserInput {

    static func urlPathProvider(_ value: DeleteUserInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCollectionInput {

    static func urlPathProvider(_ value: DescribeCollectionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDatasetInput {

    static func urlPathProvider(_ value: DescribeDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeProjectsInput {

    static func urlPathProvider(_ value: DescribeProjectsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeProjectVersionsInput {

    static func urlPathProvider(_ value: DescribeProjectVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStreamProcessorInput {

    static func urlPathProvider(_ value: DescribeStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension DetectCustomLabelsInput {

    static func urlPathProvider(_ value: DetectCustomLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension DetectFacesInput {

    static func urlPathProvider(_ value: DetectFacesInput) -> Swift.String? {
        return "/"
    }
}

extension DetectLabelsInput {

    static func urlPathProvider(_ value: DetectLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension DetectModerationLabelsInput {

    static func urlPathProvider(_ value: DetectModerationLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension DetectProtectiveEquipmentInput {

    static func urlPathProvider(_ value: DetectProtectiveEquipmentInput) -> Swift.String? {
        return "/"
    }
}

extension DetectTextInput {

    static func urlPathProvider(_ value: DetectTextInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateFacesInput {

    static func urlPathProvider(_ value: DisassociateFacesInput) -> Swift.String? {
        return "/"
    }
}

extension DistributeDatasetEntriesInput {

    static func urlPathProvider(_ value: DistributeDatasetEntriesInput) -> Swift.String? {
        return "/"
    }
}

extension GetCelebrityInfoInput {

    static func urlPathProvider(_ value: GetCelebrityInfoInput) -> Swift.String? {
        return "/"
    }
}

extension GetCelebrityRecognitionInput {

    static func urlPathProvider(_ value: GetCelebrityRecognitionInput) -> Swift.String? {
        return "/"
    }
}

extension GetContentModerationInput {

    static func urlPathProvider(_ value: GetContentModerationInput) -> Swift.String? {
        return "/"
    }
}

extension GetFaceDetectionInput {

    static func urlPathProvider(_ value: GetFaceDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension GetFaceLivenessSessionResultsInput {

    static func urlPathProvider(_ value: GetFaceLivenessSessionResultsInput) -> Swift.String? {
        return "/"
    }
}

extension GetFaceSearchInput {

    static func urlPathProvider(_ value: GetFaceSearchInput) -> Swift.String? {
        return "/"
    }
}

extension GetLabelDetectionInput {

    static func urlPathProvider(_ value: GetLabelDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension GetMediaAnalysisJobInput {

    static func urlPathProvider(_ value: GetMediaAnalysisJobInput) -> Swift.String? {
        return "/"
    }
}

extension GetPersonTrackingInput {

    static func urlPathProvider(_ value: GetPersonTrackingInput) -> Swift.String? {
        return "/"
    }
}

extension GetSegmentDetectionInput {

    static func urlPathProvider(_ value: GetSegmentDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension GetTextDetectionInput {

    static func urlPathProvider(_ value: GetTextDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension IndexFacesInput {

    static func urlPathProvider(_ value: IndexFacesInput) -> Swift.String? {
        return "/"
    }
}

extension ListCollectionsInput {

    static func urlPathProvider(_ value: ListCollectionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDatasetEntriesInput {

    static func urlPathProvider(_ value: ListDatasetEntriesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDatasetLabelsInput {

    static func urlPathProvider(_ value: ListDatasetLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFacesInput {

    static func urlPathProvider(_ value: ListFacesInput) -> Swift.String? {
        return "/"
    }
}

extension ListMediaAnalysisJobsInput {

    static func urlPathProvider(_ value: ListMediaAnalysisJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListProjectPoliciesInput {

    static func urlPathProvider(_ value: ListProjectPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension ListStreamProcessorsInput {

    static func urlPathProvider(_ value: ListStreamProcessorsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListUsersInput {

    static func urlPathProvider(_ value: ListUsersInput) -> Swift.String? {
        return "/"
    }
}

extension PutProjectPolicyInput {

    static func urlPathProvider(_ value: PutProjectPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RecognizeCelebritiesInput {

    static func urlPathProvider(_ value: RecognizeCelebritiesInput) -> Swift.String? {
        return "/"
    }
}

extension SearchFacesInput {

    static func urlPathProvider(_ value: SearchFacesInput) -> Swift.String? {
        return "/"
    }
}

extension SearchFacesByImageInput {

    static func urlPathProvider(_ value: SearchFacesByImageInput) -> Swift.String? {
        return "/"
    }
}

extension SearchUsersInput {

    static func urlPathProvider(_ value: SearchUsersInput) -> Swift.String? {
        return "/"
    }
}

extension SearchUsersByImageInput {

    static func urlPathProvider(_ value: SearchUsersByImageInput) -> Swift.String? {
        return "/"
    }
}

extension StartCelebrityRecognitionInput {

    static func urlPathProvider(_ value: StartCelebrityRecognitionInput) -> Swift.String? {
        return "/"
    }
}

extension StartContentModerationInput {

    static func urlPathProvider(_ value: StartContentModerationInput) -> Swift.String? {
        return "/"
    }
}

extension StartFaceDetectionInput {

    static func urlPathProvider(_ value: StartFaceDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension StartFaceSearchInput {

    static func urlPathProvider(_ value: StartFaceSearchInput) -> Swift.String? {
        return "/"
    }
}

extension StartLabelDetectionInput {

    static func urlPathProvider(_ value: StartLabelDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension StartMediaAnalysisJobInput {

    static func urlPathProvider(_ value: StartMediaAnalysisJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartPersonTrackingInput {

    static func urlPathProvider(_ value: StartPersonTrackingInput) -> Swift.String? {
        return "/"
    }
}

extension StartProjectVersionInput {

    static func urlPathProvider(_ value: StartProjectVersionInput) -> Swift.String? {
        return "/"
    }
}

extension StartSegmentDetectionInput {

    static func urlPathProvider(_ value: StartSegmentDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension StartStreamProcessorInput {

    static func urlPathProvider(_ value: StartStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension StartTextDetectionInput {

    static func urlPathProvider(_ value: StartTextDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension StopProjectVersionInput {

    static func urlPathProvider(_ value: StopProjectVersionInput) -> Swift.String? {
        return "/"
    }
}

extension StopStreamProcessorInput {

    static func urlPathProvider(_ value: StopStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDatasetEntriesInput {

    static func urlPathProvider(_ value: UpdateDatasetEntriesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateStreamProcessorInput {

    static func urlPathProvider(_ value: UpdateStreamProcessorInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateFacesInput {

    static func write(value: AssociateFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceIds"].writeList(value.faceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserId"].write(value.userId)
        try writer["UserMatchThreshold"].write(value.userMatchThreshold)
    }
}

extension CompareFacesInput {

    static func write(value: CompareFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualityFilter"].write(value.qualityFilter)
        try writer["SimilarityThreshold"].write(value.similarityThreshold)
        try writer["SourceImage"].write(value.sourceImage, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["TargetImage"].write(value.targetImage, with: RekognitionClientTypes.Image.write(value:to:))
    }
}

extension CopyProjectVersionInput {

    static func write(value: CopyProjectVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationProjectArn"].write(value.destinationProjectArn)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OutputConfig"].write(value.outputConfig, with: RekognitionClientTypes.OutputConfig.write(value:to:))
        try writer["SourceProjectArn"].write(value.sourceProjectArn)
        try writer["SourceProjectVersionArn"].write(value.sourceProjectVersionArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VersionName"].write(value.versionName)
    }
}

extension CreateCollectionInput {

    static func write(value: CreateCollectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateDatasetInput {

    static func write(value: CreateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetSource"].write(value.datasetSource, with: RekognitionClientTypes.DatasetSource.write(value:to:))
        try writer["DatasetType"].write(value.datasetType)
        try writer["ProjectArn"].write(value.projectArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateFaceLivenessSessionInput {

    static func write(value: CreateFaceLivenessSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Settings"].write(value.settings, with: RekognitionClientTypes.CreateFaceLivenessSessionRequestSettings.write(value:to:))
    }
}

extension CreateProjectInput {

    static func write(value: CreateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoUpdate"].write(value.autoUpdate)
        try writer["Feature"].write(value.feature)
        try writer["ProjectName"].write(value.projectName)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateProjectVersionInput {

    static func write(value: CreateProjectVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureConfig"].write(value.featureConfig, with: RekognitionClientTypes.CustomizationFeatureConfig.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OutputConfig"].write(value.outputConfig, with: RekognitionClientTypes.OutputConfig.write(value:to:))
        try writer["ProjectArn"].write(value.projectArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["TestingData"].write(value.testingData, with: RekognitionClientTypes.TestingData.write(value:to:))
        try writer["TrainingData"].write(value.trainingData, with: RekognitionClientTypes.TrainingData.write(value:to:))
        try writer["VersionDescription"].write(value.versionDescription)
        try writer["VersionName"].write(value.versionName)
    }
}

extension CreateStreamProcessorInput {

    static func write(value: CreateStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSharingPreference"].write(value.dataSharingPreference, with: RekognitionClientTypes.StreamProcessorDataSharingPreference.write(value:to:))
        try writer["Input"].write(value.input, with: RekognitionClientTypes.StreamProcessorInput.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Name"].write(value.name)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.StreamProcessorNotificationChannel.write(value:to:))
        try writer["Output"].write(value.output, with: RekognitionClientTypes.StreamProcessorOutput.write(value:to:))
        try writer["RegionsOfInterest"].writeList(value.regionsOfInterest, memberWritingClosure: RekognitionClientTypes.RegionOfInterest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Settings"].write(value.settings, with: RekognitionClientTypes.StreamProcessorSettings.write(value:to:))
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateUserInput {

    static func write(value: CreateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CollectionId"].write(value.collectionId)
        try writer["UserId"].write(value.userId)
    }
}

extension DeleteCollectionInput {

    static func write(value: DeleteCollectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
    }
}

extension DeleteDatasetInput {

    static func write(value: DeleteDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetArn"].write(value.datasetArn)
    }
}

extension DeleteFacesInput {

    static func write(value: DeleteFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceIds"].writeList(value.faceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteProjectInput {

    static func write(value: DeleteProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectArn"].write(value.projectArn)
    }
}

extension DeleteProjectPolicyInput {

    static func write(value: DeleteProjectPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyName"].write(value.policyName)
        try writer["PolicyRevisionId"].write(value.policyRevisionId)
        try writer["ProjectArn"].write(value.projectArn)
    }
}

extension DeleteProjectVersionInput {

    static func write(value: DeleteProjectVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectVersionArn"].write(value.projectVersionArn)
    }
}

extension DeleteStreamProcessorInput {

    static func write(value: DeleteStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteUserInput {

    static func write(value: DeleteUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CollectionId"].write(value.collectionId)
        try writer["UserId"].write(value.userId)
    }
}

extension DescribeCollectionInput {

    static func write(value: DescribeCollectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
    }
}

extension DescribeDatasetInput {

    static func write(value: DescribeDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetArn"].write(value.datasetArn)
    }
}

extension DescribeProjectsInput {

    static func write(value: DescribeProjectsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Features"].writeList(value.features, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.CustomizationFeature>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ProjectNames"].writeList(value.projectNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeProjectVersionsInput {

    static func write(value: DescribeProjectVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ProjectArn"].write(value.projectArn)
        try writer["VersionNames"].writeList(value.versionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeStreamProcessorInput {

    static func write(value: DescribeStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DetectCustomLabelsInput {

    static func write(value: DetectCustomLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["ProjectVersionArn"].write(value.projectVersionArn)
    }
}

extension DetectFacesInput {

    static func write(value: DetectFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.Attribute>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
    }
}

extension DetectLabelsInput {

    static func write(value: DetectLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Features"].writeList(value.features, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.DetectLabelsFeatureName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MaxLabels"].write(value.maxLabels)
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["Settings"].write(value.settings, with: RekognitionClientTypes.DetectLabelsSettings.write(value:to:))
    }
}

extension DetectModerationLabelsInput {

    static func write(value: DetectModerationLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanLoopConfig"].write(value.humanLoopConfig, with: RekognitionClientTypes.HumanLoopConfig.write(value:to:))
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["ProjectVersion"].write(value.projectVersion)
    }
}

extension DetectProtectiveEquipmentInput {

    static func write(value: DetectProtectiveEquipmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["SummarizationAttributes"].write(value.summarizationAttributes, with: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes.write(value:to:))
    }
}

extension DetectTextInput {

    static func write(value: DetectTextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].write(value.filters, with: RekognitionClientTypes.DetectTextFilters.write(value:to:))
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
    }
}

extension DisassociateFacesInput {

    static func write(value: DisassociateFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceIds"].writeList(value.faceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserId"].write(value.userId)
    }
}

extension DistributeDatasetEntriesInput {

    static func write(value: DistributeDatasetEntriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Datasets"].writeList(value.datasets, memberWritingClosure: RekognitionClientTypes.DistributeDataset.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetCelebrityInfoInput {

    static func write(value: GetCelebrityInfoInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
    }
}

extension GetCelebrityRecognitionInput {

    static func write(value: GetCelebrityRecognitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
    }
}

extension GetContentModerationInput {

    static func write(value: GetContentModerationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AggregateBy"].write(value.aggregateBy)
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
    }
}

extension GetFaceDetectionInput {

    static func write(value: GetFaceDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetFaceLivenessSessionResultsInput {

    static func write(value: GetFaceLivenessSessionResultsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SessionId"].write(value.sessionId)
    }
}

extension GetFaceSearchInput {

    static func write(value: GetFaceSearchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
    }
}

extension GetLabelDetectionInput {

    static func write(value: GetLabelDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AggregateBy"].write(value.aggregateBy)
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
    }
}

extension GetMediaAnalysisJobInput {

    static func write(value: GetMediaAnalysisJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension GetPersonTrackingInput {

    static func write(value: GetPersonTrackingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
    }
}

extension GetSegmentDetectionInput {

    static func write(value: GetSegmentDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetTextDetectionInput {

    static func write(value: GetTextDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension IndexFacesInput {

    static func write(value: IndexFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["DetectionAttributes"].writeList(value.detectionAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.Attribute>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExternalImageId"].write(value.externalImageId)
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MaxFaces"].write(value.maxFaces)
        try writer["QualityFilter"].write(value.qualityFilter)
    }
}

extension ListCollectionsInput {

    static func write(value: ListCollectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDatasetEntriesInput {

    static func write(value: ListDatasetEntriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainsLabels"].writeList(value.containsLabels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DatasetArn"].write(value.datasetArn)
        try writer["HasErrors"].write(value.hasErrors)
        try writer["Labeled"].write(value.labeled)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SourceRefContains"].write(value.sourceRefContains)
    }
}

extension ListDatasetLabelsInput {

    static func write(value: ListDatasetLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetArn"].write(value.datasetArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFacesInput {

    static func write(value: ListFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceIds"].writeList(value.faceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserId"].write(value.userId)
    }
}

extension ListMediaAnalysisJobsInput {

    static func write(value: ListMediaAnalysisJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListProjectPoliciesInput {

    static func write(value: ListProjectPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ProjectArn"].write(value.projectArn)
    }
}

extension ListStreamProcessorsInput {

    static func write(value: ListStreamProcessorsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListUsersInput {

    static func write(value: ListUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutProjectPolicyInput {

    static func write(value: PutProjectPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyDocument"].write(value.policyDocument)
        try writer["PolicyName"].write(value.policyName)
        try writer["PolicyRevisionId"].write(value.policyRevisionId)
        try writer["ProjectArn"].write(value.projectArn)
    }
}

extension RecognizeCelebritiesInput {

    static func write(value: RecognizeCelebritiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
    }
}

extension SearchFacesInput {

    static func write(value: SearchFacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceId"].write(value.faceId)
        try writer["FaceMatchThreshold"].write(value.faceMatchThreshold)
        try writer["MaxFaces"].write(value.maxFaces)
    }
}

extension SearchFacesByImageInput {

    static func write(value: SearchFacesByImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceMatchThreshold"].write(value.faceMatchThreshold)
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MaxFaces"].write(value.maxFaces)
        try writer["QualityFilter"].write(value.qualityFilter)
    }
}

extension SearchUsersInput {

    static func write(value: SearchUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceId"].write(value.faceId)
        try writer["MaxUsers"].write(value.maxUsers)
        try writer["UserId"].write(value.userId)
        try writer["UserMatchThreshold"].write(value.userMatchThreshold)
    }
}

extension SearchUsersByImageInput {

    static func write(value: SearchUsersByImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["Image"].write(value.image, with: RekognitionClientTypes.Image.write(value:to:))
        try writer["MaxUsers"].write(value.maxUsers)
        try writer["QualityFilter"].write(value.qualityFilter)
        try writer["UserMatchThreshold"].write(value.userMatchThreshold)
    }
}

extension StartCelebrityRecognitionInput {

    static func write(value: StartCelebrityRecognitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartContentModerationInput {

    static func write(value: StartContentModerationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["JobTag"].write(value.jobTag)
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartFaceDetectionInput {

    static func write(value: StartFaceDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FaceAttributes"].write(value.faceAttributes)
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartFaceSearchInput {

    static func write(value: StartFaceSearchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceMatchThreshold"].write(value.faceMatchThreshold)
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartLabelDetectionInput {

    static func write(value: StartLabelDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Features"].writeList(value.features, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.LabelDetectionFeatureName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JobTag"].write(value.jobTag)
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Settings"].write(value.settings, with: RekognitionClientTypes.LabelDetectionSettings.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartMediaAnalysisJobInput {

    static func write(value: StartMediaAnalysisJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Input"].write(value.input, with: RekognitionClientTypes.MediaAnalysisInput.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OperationsConfig"].write(value.operationsConfig, with: RekognitionClientTypes.MediaAnalysisOperationsConfig.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: RekognitionClientTypes.MediaAnalysisOutputConfig.write(value:to:))
    }
}

extension StartPersonTrackingInput {

    static func write(value: StartPersonTrackingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartProjectVersionInput {

    static func write(value: StartProjectVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxInferenceUnits"].write(value.maxInferenceUnits)
        try writer["MinInferenceUnits"].write(value.minInferenceUnits)
        try writer["ProjectVersionArn"].write(value.projectVersionArn)
    }
}

extension StartSegmentDetectionInput {

    static func write(value: StartSegmentDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Filters"].write(value.filters, with: RekognitionClientTypes.StartSegmentDetectionFilters.write(value:to:))
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["SegmentTypes"].writeList(value.segmentTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.SegmentType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StartStreamProcessorInput {

    static func write(value: StartStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["StartSelector"].write(value.startSelector, with: RekognitionClientTypes.StreamProcessingStartSelector.write(value:to:))
        try writer["StopSelector"].write(value.stopSelector, with: RekognitionClientTypes.StreamProcessingStopSelector.write(value:to:))
    }
}

extension StartTextDetectionInput {

    static func write(value: StartTextDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Filters"].write(value.filters, with: RekognitionClientTypes.StartTextDetectionFilters.write(value:to:))
        try writer["JobTag"].write(value.jobTag)
        try writer["NotificationChannel"].write(value.notificationChannel, with: RekognitionClientTypes.NotificationChannel.write(value:to:))
        try writer["Video"].write(value.video, with: RekognitionClientTypes.Video.write(value:to:))
    }
}

extension StopProjectVersionInput {

    static func write(value: StopProjectVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectVersionArn"].write(value.projectVersionArn)
    }
}

extension StopStreamProcessorInput {

    static func write(value: StopStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDatasetEntriesInput {

    static func write(value: UpdateDatasetEntriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Changes"].write(value.changes, with: RekognitionClientTypes.DatasetChanges.write(value:to:))
        try writer["DatasetArn"].write(value.datasetArn)
    }
}

extension UpdateStreamProcessorInput {

    static func write(value: UpdateStreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSharingPreferenceForUpdate"].write(value.dataSharingPreferenceForUpdate, with: RekognitionClientTypes.StreamProcessorDataSharingPreference.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["ParametersToDelete"].writeList(value.parametersToDelete, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.StreamProcessorParameterToDelete>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RegionsOfInterestForUpdate"].writeList(value.regionsOfInterestForUpdate, memberWritingClosure: RekognitionClientTypes.RegionOfInterest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SettingsForUpdate"].write(value.settingsForUpdate, with: RekognitionClientTypes.StreamProcessorSettingsForUpdate.write(value:to:))
    }
}

extension AssociateFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateFacesOutput()
        value.associatedFaces = try reader["AssociatedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.AssociatedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unsuccessfulFaceAssociations = try reader["UnsuccessfulFaceAssociations"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UnsuccessfulFaceAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userStatus = try reader["UserStatus"].readIfPresent()
        return value
    }
}

extension CompareFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompareFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CompareFacesOutput()
        value.faceMatches = try reader["FaceMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.CompareFacesMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceImageFace = try reader["SourceImageFace"].readIfPresent(with: RekognitionClientTypes.ComparedSourceImageFace.read(from:))
        value.sourceImageOrientationCorrection = try reader["SourceImageOrientationCorrection"].readIfPresent()
        value.targetImageOrientationCorrection = try reader["TargetImageOrientationCorrection"].readIfPresent()
        value.unmatchedFaces = try reader["UnmatchedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ComparedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CopyProjectVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyProjectVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CopyProjectVersionOutput()
        value.projectVersionArn = try reader["ProjectVersionArn"].readIfPresent()
        return value
    }
}

extension CreateCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCollectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCollectionOutput()
        value.collectionArn = try reader["CollectionArn"].readIfPresent()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.statusCode = try reader["StatusCode"].readIfPresent()
        return value
    }
}

extension CreateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetOutput()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        return value
    }
}

extension CreateFaceLivenessSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFaceLivenessSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFaceLivenessSessionOutput()
        value.sessionId = try reader["SessionId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProjectOutput()
        value.projectArn = try reader["ProjectArn"].readIfPresent()
        return value
    }
}

extension CreateProjectVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProjectVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProjectVersionOutput()
        value.projectVersionArn = try reader["ProjectVersionArn"].readIfPresent()
        return value
    }
}

extension CreateStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStreamProcessorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateStreamProcessorOutput()
        value.streamProcessorArn = try reader["StreamProcessorArn"].readIfPresent()
        return value
    }
}

extension CreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserOutput {
        return CreateUserOutput()
    }
}

extension DeleteCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCollectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteCollectionOutput()
        value.statusCode = try reader["StatusCode"].readIfPresent()
        return value
    }
}

extension DeleteDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatasetOutput {
        return DeleteDatasetOutput()
    }
}

extension DeleteFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFacesOutput()
        value.deletedFaces = try reader["DeletedFaces"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.unsuccessfulFaceDeletions = try reader["UnsuccessfulFaceDeletions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UnsuccessfulFaceDeletion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteProjectOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteProjectPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectPolicyOutput {
        return DeleteProjectPolicyOutput()
    }
}

extension DeleteProjectVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteProjectVersionOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStreamProcessorOutput {
        return DeleteStreamProcessorOutput()
    }
}

extension DeleteUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserOutput {
        return DeleteUserOutput()
    }
}

extension DescribeCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCollectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCollectionOutput()
        value.collectionARN = try reader["CollectionARN"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.faceCount = try reader["FaceCount"].readIfPresent()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.userCount = try reader["UserCount"].readIfPresent()
        return value
    }
}

extension DescribeDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDatasetOutput()
        value.datasetDescription = try reader["DatasetDescription"].readIfPresent(with: RekognitionClientTypes.DatasetDescription.read(from:))
        return value
    }
}

extension DescribeProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeProjectsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.projectDescriptions = try reader["ProjectDescriptions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ProjectDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeProjectVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeProjectVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeProjectVersionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.projectVersionDescriptions = try reader["ProjectVersionDescriptions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ProjectVersionDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStreamProcessorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStreamProcessorOutput()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataSharingPreference = try reader["DataSharingPreference"].readIfPresent(with: RekognitionClientTypes.StreamProcessorDataSharingPreference.read(from:))
        value.input = try reader["Input"].readIfPresent(with: RekognitionClientTypes.StreamProcessorInput.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.lastUpdateTimestamp = try reader["LastUpdateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.notificationChannel = try reader["NotificationChannel"].readIfPresent(with: RekognitionClientTypes.StreamProcessorNotificationChannel.read(from:))
        value.output = try reader["Output"].readIfPresent(with: RekognitionClientTypes.StreamProcessorOutput.read(from:))
        value.regionsOfInterest = try reader["RegionsOfInterest"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.RegionOfInterest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.settings = try reader["Settings"].readIfPresent(with: RekognitionClientTypes.StreamProcessorSettings.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.streamProcessorArn = try reader["StreamProcessorArn"].readIfPresent()
        return value
    }
}

extension DetectCustomLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectCustomLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectCustomLabelsOutput()
        value.customLabels = try reader["CustomLabels"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.CustomLabel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectFacesOutput()
        value.faceDetails = try reader["FaceDetails"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.orientationCorrection = try reader["OrientationCorrection"].readIfPresent()
        return value
    }
}

extension DetectLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectLabelsOutput()
        value.imageProperties = try reader["ImageProperties"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageProperties.read(from:))
        value.labelModelVersion = try reader["LabelModelVersion"].readIfPresent()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Label.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.orientationCorrection = try reader["OrientationCorrection"].readIfPresent()
        return value
    }
}

extension DetectModerationLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectModerationLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectModerationLabelsOutput()
        value.contentTypes = try reader["ContentTypes"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ContentType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.humanLoopActivationOutput = try reader["HumanLoopActivationOutput"].readIfPresent(with: RekognitionClientTypes.HumanLoopActivationOutput.read(from:))
        value.moderationLabels = try reader["ModerationLabels"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ModerationLabel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.moderationModelVersion = try reader["ModerationModelVersion"].readIfPresent()
        value.projectVersion = try reader["ProjectVersion"].readIfPresent()
        return value
    }
}

extension DetectProtectiveEquipmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectProtectiveEquipmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectProtectiveEquipmentOutput()
        value.persons = try reader["Persons"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ProtectiveEquipmentPerson.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.protectiveEquipmentModelVersion = try reader["ProtectiveEquipmentModelVersion"].readIfPresent()
        value.summary = try reader["Summary"].readIfPresent(with: RekognitionClientTypes.ProtectiveEquipmentSummary.read(from:))
        return value
    }
}

extension DetectTextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectTextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectTextOutput()
        value.textDetections = try reader["TextDetections"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.TextDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.textModelVersion = try reader["TextModelVersion"].readIfPresent()
        return value
    }
}

extension DisassociateFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateFacesOutput()
        value.disassociatedFaces = try reader["DisassociatedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DisassociatedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unsuccessfulFaceDisassociations = try reader["UnsuccessfulFaceDisassociations"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UnsuccessfulFaceDisassociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userStatus = try reader["UserStatus"].readIfPresent()
        return value
    }
}

extension DistributeDatasetEntriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DistributeDatasetEntriesOutput {
        return DistributeDatasetEntriesOutput()
    }
}

extension GetCelebrityInfoOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCelebrityInfoOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCelebrityInfoOutput()
        value.knownGender = try reader["KnownGender"].readIfPresent(with: RekognitionClientTypes.KnownGender.read(from:))
        value.name = try reader["Name"].readIfPresent()
        value.urls = try reader["Urls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetCelebrityRecognitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCelebrityRecognitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCelebrityRecognitionOutput()
        value.celebrities = try reader["Celebrities"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.CelebrityRecognition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetContentModerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContentModerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContentModerationOutput()
        value.getRequestMetadata = try reader["GetRequestMetadata"].readIfPresent(with: RekognitionClientTypes.GetContentModerationRequestMetadata.read(from:))
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.moderationLabels = try reader["ModerationLabels"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ContentModerationDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.moderationModelVersion = try reader["ModerationModelVersion"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetFaceDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFaceDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFaceDetectionOutput()
        value.faces = try reader["Faces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetFaceLivenessSessionResultsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFaceLivenessSessionResultsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFaceLivenessSessionResultsOutput()
        value.auditImages = try reader["AuditImages"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.AuditImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.confidence = try reader["Confidence"].readIfPresent()
        value.referenceImage = try reader["ReferenceImage"].readIfPresent(with: RekognitionClientTypes.AuditImage.read(from:))
        value.sessionId = try reader["SessionId"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GetFaceSearchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFaceSearchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFaceSearchOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.persons = try reader["Persons"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.PersonMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetLabelDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLabelDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLabelDetectionOutput()
        value.getRequestMetadata = try reader["GetRequestMetadata"].readIfPresent(with: RekognitionClientTypes.GetLabelDetectionRequestMetadata.read(from:))
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.labelModelVersion = try reader["LabelModelVersion"].readIfPresent()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.LabelDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetMediaAnalysisJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMediaAnalysisJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMediaAnalysisJobOutput()
        value.completionTimestamp = try reader["CompletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisJobFailureDetails.read(from:))
        value.input = try reader["Input"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisInput.read(from:))
        value.jobId = try reader["JobId"].readIfPresent() ?? ""
        value.jobName = try reader["JobName"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.manifestSummary = try reader["ManifestSummary"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisManifestSummary.read(from:))
        value.operationsConfig = try reader["OperationsConfig"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisOperationsConfig.read(from:))
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisOutputConfig.read(from:))
        value.results = try reader["Results"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisResults.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GetPersonTrackingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPersonTrackingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPersonTrackingOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.persons = try reader["Persons"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.PersonDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension GetSegmentDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSegmentDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSegmentDetectionOutput()
        value.audioMetadata = try reader["AudioMetadata"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.AudioMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.segments = try reader["Segments"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.SegmentDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.selectedSegmentTypes = try reader["SelectedSegmentTypes"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.SegmentTypeInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.VideoMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetTextDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTextDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTextDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobTag = try reader["JobTag"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.textDetections = try reader["TextDetections"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.TextDetectionResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.textModelVersion = try reader["TextModelVersion"].readIfPresent()
        value.video = try reader["Video"].readIfPresent(with: RekognitionClientTypes.Video.read(from:))
        value.videoMetadata = try reader["VideoMetadata"].readIfPresent(with: RekognitionClientTypes.VideoMetadata.read(from:))
        return value
    }
}

extension IndexFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IndexFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = IndexFacesOutput()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.faceRecords = try reader["FaceRecords"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.orientationCorrection = try reader["OrientationCorrection"].readIfPresent()
        value.unindexedFaces = try reader["UnindexedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UnindexedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListCollectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCollectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCollectionsOutput()
        value.collectionIds = try reader["CollectionIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.faceModelVersions = try reader["FaceModelVersions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetEntriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetEntriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetEntriesOutput()
        value.datasetEntries = try reader["DatasetEntries"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetLabelsOutput()
        value.datasetLabelDescriptions = try reader["DatasetLabelDescriptions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DatasetLabelDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFacesOutput()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.faces = try reader["Faces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Face.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMediaAnalysisJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMediaAnalysisJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMediaAnalysisJobsOutput()
        value.mediaAnalysisJobs = try reader["MediaAnalysisJobs"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.MediaAnalysisJobDescription.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListProjectPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProjectPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProjectPoliciesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.projectPolicies = try reader["ProjectPolicies"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ProjectPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStreamProcessorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStreamProcessorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStreamProcessorsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.streamProcessors = try reader["StreamProcessors"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.StreamProcessor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.User.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutProjectPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutProjectPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutProjectPolicyOutput()
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        return value
    }
}

extension RecognizeCelebritiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RecognizeCelebritiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RecognizeCelebritiesOutput()
        value.celebrityFaces = try reader["CelebrityFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Celebrity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.orientationCorrection = try reader["OrientationCorrection"].readIfPresent()
        value.unrecognizedFaces = try reader["UnrecognizedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ComparedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SearchFacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchFacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchFacesOutput()
        value.faceMatches = try reader["FaceMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.searchedFaceId = try reader["SearchedFaceId"].readIfPresent()
        return value
    }
}

extension SearchFacesByImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchFacesByImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchFacesByImageOutput()
        value.faceMatches = try reader["FaceMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.searchedFaceBoundingBox = try reader["SearchedFaceBoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.searchedFaceConfidence = try reader["SearchedFaceConfidence"].readIfPresent()
        return value
    }
}

extension SearchUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchUsersOutput()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.searchedFace = try reader["SearchedFace"].readIfPresent(with: RekognitionClientTypes.SearchedFace.read(from:))
        value.searchedUser = try reader["SearchedUser"].readIfPresent(with: RekognitionClientTypes.SearchedUser.read(from:))
        value.userMatches = try reader["UserMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UserMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SearchUsersByImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchUsersByImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchUsersByImageOutput()
        value.faceModelVersion = try reader["FaceModelVersion"].readIfPresent()
        value.searchedFace = try reader["SearchedFace"].readIfPresent(with: RekognitionClientTypes.SearchedFaceDetails.read(from:))
        value.unsearchedFaces = try reader["UnsearchedFaces"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UnsearchedFace.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userMatches = try reader["UserMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.UserMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartCelebrityRecognitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartCelebrityRecognitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartCelebrityRecognitionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartContentModerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartContentModerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartContentModerationOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartFaceDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartFaceDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartFaceDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartFaceSearchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartFaceSearchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartFaceSearchOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartLabelDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartLabelDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartLabelDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartMediaAnalysisJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMediaAnalysisJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMediaAnalysisJobOutput()
        value.jobId = try reader["JobId"].readIfPresent() ?? ""
        return value
    }
}

extension StartPersonTrackingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPersonTrackingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPersonTrackingOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartProjectVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartProjectVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartProjectVersionOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StartSegmentDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartSegmentDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartSegmentDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartStreamProcessorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartStreamProcessorOutput()
        value.sessionId = try reader["SessionId"].readIfPresent()
        return value
    }
}

extension StartTextDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTextDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTextDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StopProjectVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopProjectVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopProjectVersionOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StopStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopStreamProcessorOutput {
        return StopStreamProcessorOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateDatasetEntriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDatasetEntriesOutput {
        return UpdateDatasetEntriesOutput()
    }
}

extension UpdateStreamProcessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateStreamProcessorOutput {
        return UpdateStreamProcessorOutput()
    }
}

enum AssociateFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompareFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyProjectVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFaceLivenessSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProjectVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPolicyRevisionIdException": return try InvalidPolicyRevisionIdException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeProjectVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectCustomLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectModerationLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HumanLoopQuotaExceededException": return try HumanLoopQuotaExceededException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectProtectiveEquipmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectTextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DistributeDatasetEntriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCelebrityInfoOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCelebrityRecognitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContentModerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFaceDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFaceLivenessSessionResultsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "SessionNotFoundException": return try SessionNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFaceSearchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLabelDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMediaAnalysisJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPersonTrackingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSegmentDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTextDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IndexFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCollectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetEntriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMediaAnalysisJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProjectPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStreamProcessorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutProjectPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPolicyRevisionIdException": return try InvalidPolicyRevisionIdException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RecognizeCelebritiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchFacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchFacesByImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchUsersByImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ImageTooLargeException": return try ImageTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidImageFormatException": return try InvalidImageFormatException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartCelebrityRecognitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartContentModerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartFaceDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartFaceSearchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartLabelDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMediaAnalysisJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidManifestException": return try InvalidManifestException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPersonTrackingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartProjectVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartSegmentDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTextDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "VideoTooLargeException": return try VideoTooLargeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopProjectVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDatasetEntriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateStreamProcessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProvisionedThroughputExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ProvisionedThroughputExceededException {
        let reader = baseError.errorBodyReader
        var value = ProvisionedThroughputExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidS3ObjectException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidS3ObjectException {
        let reader = baseError.errorBodyReader
        var value = InvalidS3ObjectException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ImageTooLargeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ImageTooLargeException {
        let reader = baseError.errorBodyReader
        var value = ImageTooLargeException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidImageFormatException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidImageFormatException {
        let reader = baseError.errorBodyReader
        var value = InvalidImageFormatException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPolicyRevisionIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidPolicyRevisionIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidPolicyRevisionIdException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPaginationTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidPaginationTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidPaginationTokenException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotReadyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotReadyException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotReadyException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HumanLoopQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HumanLoopQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = HumanLoopQuotaExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SessionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> SessionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = SessionNotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedPolicyDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedPolicyDocumentException {
        let reader = baseError.errorBodyReader
        var value = MalformedPolicyDocumentException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension VideoTooLargeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> VideoTooLargeException {
        let reader = baseError.errorBodyReader
        var value = VideoTooLargeException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidManifestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidManifestException {
        let reader = baseError.errorBodyReader
        var value = InvalidManifestException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.logref = try reader["Logref"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RekognitionClientTypes.AssociatedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.AssociatedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.AssociatedFace()
        value.faceId = try reader["FaceId"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.UnsuccessfulFaceAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UnsuccessfulFaceAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UnsuccessfulFaceAssociation()
        value.faceId = try reader["FaceId"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.reasons = try reader["Reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RekognitionClientTypes.UnsuccessfulFaceAssociationReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.ComparedSourceImageFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ComparedSourceImageFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ComparedSourceImageFace()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.BoundingBox {

    static func write(value: RekognitionClientTypes.BoundingBox?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Height"].write(value.height)
        try writer["Left"].write(value.`left`)
        try writer["Top"].write(value.top)
        try writer["Width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.BoundingBox {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.BoundingBox()
        value.width = try reader["Width"].readIfPresent()
        value.height = try reader["Height"].readIfPresent()
        value.`left` = try reader["Left"].readIfPresent()
        value.top = try reader["Top"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.CompareFacesMatch {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CompareFacesMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CompareFacesMatch()
        value.similarity = try reader["Similarity"].readIfPresent()
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.ComparedFace.read(from:))
        return value
    }
}

extension RekognitionClientTypes.ComparedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ComparedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ComparedFace()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        value.landmarks = try reader["Landmarks"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Landmark.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pose = try reader["Pose"].readIfPresent(with: RekognitionClientTypes.Pose.read(from:))
        value.quality = try reader["Quality"].readIfPresent(with: RekognitionClientTypes.ImageQuality.read(from:))
        value.emotions = try reader["Emotions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Emotion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.smile = try reader["Smile"].readIfPresent(with: RekognitionClientTypes.Smile.read(from:))
        return value
    }
}

extension RekognitionClientTypes.Smile {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Smile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Smile()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Emotion {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Emotion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Emotion()
        value.type = try reader["Type"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ImageQuality {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ImageQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ImageQuality()
        value.brightness = try reader["Brightness"].readIfPresent()
        value.sharpness = try reader["Sharpness"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Pose {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Pose {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Pose()
        value.roll = try reader["Roll"].readIfPresent()
        value.yaw = try reader["Yaw"].readIfPresent()
        value.pitch = try reader["Pitch"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Landmark {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Landmark {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Landmark()
        value.type = try reader["Type"].readIfPresent()
        value.x = try reader["X"].readIfPresent()
        value.y = try reader["Y"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.UnsuccessfulFaceDeletion {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UnsuccessfulFaceDeletion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UnsuccessfulFaceDeletion()
        value.faceId = try reader["FaceId"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent()
        value.reasons = try reader["Reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RekognitionClientTypes.UnsuccessfulFaceDeletionReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.DatasetDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DatasetDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DatasetDescription()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.statusMessageCode = try reader["StatusMessageCode"].readIfPresent()
        value.datasetStats = try reader["DatasetStats"].readIfPresent(with: RekognitionClientTypes.DatasetStats.read(from:))
        return value
    }
}

extension RekognitionClientTypes.DatasetStats {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DatasetStats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DatasetStats()
        value.labeledEntries = try reader["LabeledEntries"].readIfPresent()
        value.totalEntries = try reader["TotalEntries"].readIfPresent()
        value.totalLabels = try reader["TotalLabels"].readIfPresent()
        value.errorEntries = try reader["ErrorEntries"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ProjectDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProjectDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProjectDescription()
        value.projectArn = try reader["ProjectArn"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.datasets = try reader["Datasets"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DatasetMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.feature = try reader["Feature"].readIfPresent()
        value.autoUpdate = try reader["AutoUpdate"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.DatasetMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DatasetMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DatasetMetadata()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.datasetType = try reader["DatasetType"].readIfPresent()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.statusMessageCode = try reader["StatusMessageCode"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ProjectVersionDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProjectVersionDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProjectVersionDescription()
        value.projectVersionArn = try reader["ProjectVersionArn"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.minInferenceUnits = try reader["MinInferenceUnits"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.billableTrainingTimeInSeconds = try reader["BillableTrainingTimeInSeconds"].readIfPresent()
        value.trainingEndTimestamp = try reader["TrainingEndTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: RekognitionClientTypes.OutputConfig.read(from:))
        value.trainingDataResult = try reader["TrainingDataResult"].readIfPresent(with: RekognitionClientTypes.TrainingDataResult.read(from:))
        value.testingDataResult = try reader["TestingDataResult"].readIfPresent(with: RekognitionClientTypes.TestingDataResult.read(from:))
        value.evaluationResult = try reader["EvaluationResult"].readIfPresent(with: RekognitionClientTypes.EvaluationResult.read(from:))
        value.manifestSummary = try reader["ManifestSummary"].readIfPresent(with: RekognitionClientTypes.GroundTruthManifest.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.maxInferenceUnits = try reader["MaxInferenceUnits"].readIfPresent()
        value.sourceProjectVersionArn = try reader["SourceProjectVersionArn"].readIfPresent()
        value.versionDescription = try reader["VersionDescription"].readIfPresent()
        value.feature = try reader["Feature"].readIfPresent()
        value.baseModelVersion = try reader["BaseModelVersion"].readIfPresent()
        value.featureConfig = try reader["FeatureConfig"].readIfPresent(with: RekognitionClientTypes.CustomizationFeatureConfig.read(from:))
        return value
    }
}

extension RekognitionClientTypes.CustomizationFeatureConfig {

    static func write(value: RekognitionClientTypes.CustomizationFeatureConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentModeration"].write(value.contentModeration, with: RekognitionClientTypes.CustomizationFeatureContentModerationConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CustomizationFeatureConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CustomizationFeatureConfig()
        value.contentModeration = try reader["ContentModeration"].readIfPresent(with: RekognitionClientTypes.CustomizationFeatureContentModerationConfig.read(from:))
        return value
    }
}

extension RekognitionClientTypes.CustomizationFeatureContentModerationConfig {

    static func write(value: RekognitionClientTypes.CustomizationFeatureContentModerationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfidenceThreshold"].write(value.confidenceThreshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CustomizationFeatureContentModerationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CustomizationFeatureContentModerationConfig()
        value.confidenceThreshold = try reader["ConfidenceThreshold"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.GroundTruthManifest {

    static func write(value: RekognitionClientTypes.GroundTruthManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Object"].write(value.s3Object, with: RekognitionClientTypes.S3Object.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.GroundTruthManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.GroundTruthManifest()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        return value
    }
}

extension RekognitionClientTypes.S3Object {

    static func write(value: RekognitionClientTypes.S3Object?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Name"].write(value.name)
        try writer["Version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.S3Object {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.S3Object()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.EvaluationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.EvaluationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.EvaluationResult()
        value.f1Score = try reader["F1Score"].readIfPresent()
        value.summary = try reader["Summary"].readIfPresent(with: RekognitionClientTypes.Summary.read(from:))
        return value
    }
}

extension RekognitionClientTypes.Summary {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Summary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Summary()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        return value
    }
}

extension RekognitionClientTypes.TestingDataResult {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TestingDataResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TestingDataResult()
        value.input = try reader["Input"].readIfPresent(with: RekognitionClientTypes.TestingData.read(from:))
        value.output = try reader["Output"].readIfPresent(with: RekognitionClientTypes.TestingData.read(from:))
        value.validation = try reader["Validation"].readIfPresent(with: RekognitionClientTypes.ValidationData.read(from:))
        return value
    }
}

extension RekognitionClientTypes.ValidationData {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ValidationData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ValidationData()
        value.assets = try reader["Assets"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Asset.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.Asset {

    static func write(value: RekognitionClientTypes.Asset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroundTruthManifest"].write(value.groundTruthManifest, with: RekognitionClientTypes.GroundTruthManifest.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Asset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Asset()
        value.groundTruthManifest = try reader["GroundTruthManifest"].readIfPresent(with: RekognitionClientTypes.GroundTruthManifest.read(from:))
        return value
    }
}

extension RekognitionClientTypes.TestingData {

    static func write(value: RekognitionClientTypes.TestingData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Assets"].writeList(value.assets, memberWritingClosure: RekognitionClientTypes.Asset.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutoCreate"].write(value.autoCreate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TestingData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TestingData()
        value.assets = try reader["Assets"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Asset.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoCreate = try reader["AutoCreate"].readIfPresent() ?? false
        return value
    }
}

extension RekognitionClientTypes.TrainingDataResult {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TrainingDataResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TrainingDataResult()
        value.input = try reader["Input"].readIfPresent(with: RekognitionClientTypes.TrainingData.read(from:))
        value.output = try reader["Output"].readIfPresent(with: RekognitionClientTypes.TrainingData.read(from:))
        value.validation = try reader["Validation"].readIfPresent(with: RekognitionClientTypes.ValidationData.read(from:))
        return value
    }
}

extension RekognitionClientTypes.TrainingData {

    static func write(value: RekognitionClientTypes.TrainingData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Assets"].writeList(value.assets, memberWritingClosure: RekognitionClientTypes.Asset.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TrainingData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TrainingData()
        value.assets = try reader["Assets"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Asset.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.OutputConfig {

    static func write(value: RekognitionClientTypes.OutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3KeyPrefix"].write(value.s3KeyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.OutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.OutputConfig()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent()
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.StreamProcessorInput {

    static func write(value: RekognitionClientTypes.StreamProcessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KinesisVideoStream"].write(value.kinesisVideoStream, with: RekognitionClientTypes.KinesisVideoStream.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessorInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessorInput()
        value.kinesisVideoStream = try reader["KinesisVideoStream"].readIfPresent(with: RekognitionClientTypes.KinesisVideoStream.read(from:))
        return value
    }
}

extension RekognitionClientTypes.KinesisVideoStream {

    static func write(value: RekognitionClientTypes.KinesisVideoStream?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.KinesisVideoStream {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.KinesisVideoStream()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.StreamProcessorOutput {

    static func write(value: RekognitionClientTypes.StreamProcessorOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KinesisDataStream"].write(value.kinesisDataStream, with: RekognitionClientTypes.KinesisDataStream.write(value:to:))
        try writer["S3Destination"].write(value.s3Destination, with: RekognitionClientTypes.S3Destination.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessorOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessorOutput()
        value.kinesisDataStream = try reader["KinesisDataStream"].readIfPresent(with: RekognitionClientTypes.KinesisDataStream.read(from:))
        value.s3Destination = try reader["S3Destination"].readIfPresent(with: RekognitionClientTypes.S3Destination.read(from:))
        return value
    }
}

extension RekognitionClientTypes.S3Destination {

    static func write(value: RekognitionClientTypes.S3Destination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["KeyPrefix"].write(value.keyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.S3Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.S3Destination()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.keyPrefix = try reader["KeyPrefix"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.KinesisDataStream {

    static func write(value: RekognitionClientTypes.KinesisDataStream?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.KinesisDataStream {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.KinesisDataStream()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.StreamProcessorSettings {

    static func write(value: RekognitionClientTypes.StreamProcessorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectedHome"].write(value.connectedHome, with: RekognitionClientTypes.ConnectedHomeSettings.write(value:to:))
        try writer["FaceSearch"].write(value.faceSearch, with: RekognitionClientTypes.FaceSearchSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessorSettings()
        value.faceSearch = try reader["FaceSearch"].readIfPresent(with: RekognitionClientTypes.FaceSearchSettings.read(from:))
        value.connectedHome = try reader["ConnectedHome"].readIfPresent(with: RekognitionClientTypes.ConnectedHomeSettings.read(from:))
        return value
    }
}

extension RekognitionClientTypes.ConnectedHomeSettings {

    static func write(value: RekognitionClientTypes.ConnectedHomeSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Labels"].writeList(value.labels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MinConfidence"].write(value.minConfidence)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ConnectedHomeSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ConnectedHomeSettings()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.minConfidence = try reader["MinConfidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.FaceSearchSettings {

    static func write(value: RekognitionClientTypes.FaceSearchSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionId"].write(value.collectionId)
        try writer["FaceMatchThreshold"].write(value.faceMatchThreshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceSearchSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceSearchSettings()
        value.collectionId = try reader["CollectionId"].readIfPresent()
        value.faceMatchThreshold = try reader["FaceMatchThreshold"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.StreamProcessorNotificationChannel {

    static func write(value: RekognitionClientTypes.StreamProcessorNotificationChannel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SNSTopicArn"].write(value.snsTopicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessorNotificationChannel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessorNotificationChannel()
        value.snsTopicArn = try reader["SNSTopicArn"].readIfPresent() ?? ""
        return value
    }
}

extension RekognitionClientTypes.RegionOfInterest {

    static func write(value: RekognitionClientTypes.RegionOfInterest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BoundingBox"].write(value.boundingBox, with: RekognitionClientTypes.BoundingBox.write(value:to:))
        try writer["Polygon"].writeList(value.polygon, memberWritingClosure: RekognitionClientTypes.Point.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.RegionOfInterest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.RegionOfInterest()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.polygon = try reader["Polygon"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Point.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.Point {

    static func write(value: RekognitionClientTypes.Point?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["X"].write(value.x)
        try writer["Y"].write(value.y)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Point {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Point()
        value.x = try reader["X"].readIfPresent()
        value.y = try reader["Y"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.StreamProcessorDataSharingPreference {

    static func write(value: RekognitionClientTypes.StreamProcessorDataSharingPreference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptIn"].write(value.optIn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessorDataSharingPreference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessorDataSharingPreference()
        value.optIn = try reader["OptIn"].readIfPresent() ?? false
        return value
    }
}

extension RekognitionClientTypes.CustomLabel {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CustomLabel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CustomLabel()
        value.name = try reader["Name"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: RekognitionClientTypes.Geometry.read(from:))
        return value
    }
}

extension RekognitionClientTypes.Geometry {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Geometry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Geometry()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.polygon = try reader["Polygon"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Point.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.FaceDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceDetail()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.ageRange = try reader["AgeRange"].readIfPresent(with: RekognitionClientTypes.AgeRange.read(from:))
        value.smile = try reader["Smile"].readIfPresent(with: RekognitionClientTypes.Smile.read(from:))
        value.eyeglasses = try reader["Eyeglasses"].readIfPresent(with: RekognitionClientTypes.Eyeglasses.read(from:))
        value.sunglasses = try reader["Sunglasses"].readIfPresent(with: RekognitionClientTypes.Sunglasses.read(from:))
        value.gender = try reader["Gender"].readIfPresent(with: RekognitionClientTypes.Gender.read(from:))
        value.beard = try reader["Beard"].readIfPresent(with: RekognitionClientTypes.Beard.read(from:))
        value.mustache = try reader["Mustache"].readIfPresent(with: RekognitionClientTypes.Mustache.read(from:))
        value.eyesOpen = try reader["EyesOpen"].readIfPresent(with: RekognitionClientTypes.EyeOpen.read(from:))
        value.mouthOpen = try reader["MouthOpen"].readIfPresent(with: RekognitionClientTypes.MouthOpen.read(from:))
        value.emotions = try reader["Emotions"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Emotion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.landmarks = try reader["Landmarks"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Landmark.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pose = try reader["Pose"].readIfPresent(with: RekognitionClientTypes.Pose.read(from:))
        value.quality = try reader["Quality"].readIfPresent(with: RekognitionClientTypes.ImageQuality.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        value.faceOccluded = try reader["FaceOccluded"].readIfPresent(with: RekognitionClientTypes.FaceOccluded.read(from:))
        value.eyeDirection = try reader["EyeDirection"].readIfPresent(with: RekognitionClientTypes.EyeDirection.read(from:))
        return value
    }
}

extension RekognitionClientTypes.EyeDirection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.EyeDirection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.EyeDirection()
        value.yaw = try reader["Yaw"].readIfPresent()
        value.pitch = try reader["Pitch"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.FaceOccluded {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceOccluded {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceOccluded()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MouthOpen {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MouthOpen {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MouthOpen()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.EyeOpen {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.EyeOpen {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.EyeOpen()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Mustache {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Mustache {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Mustache()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Beard {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Beard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Beard()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Gender {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Gender {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Gender()
        value.value = try reader["Value"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Sunglasses {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Sunglasses {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Sunglasses()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Eyeglasses {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Eyeglasses {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Eyeglasses()
        value.value = try reader["Value"].readIfPresent() ?? false
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.AgeRange {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.AgeRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.AgeRange()
        value.low = try reader["Low"].readIfPresent()
        value.high = try reader["High"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Label {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Label {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Label()
        value.name = try reader["Name"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.instances = try reader["Instances"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parents = try reader["Parents"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.Parent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.LabelAlias.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.categories = try reader["Categories"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.LabelCategory.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.LabelCategory {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.LabelCategory {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.LabelCategory()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.LabelAlias {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.LabelAlias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.LabelAlias()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Parent {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Parent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Parent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Instance {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Instance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Instance()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        value.dominantColors = try reader["DominantColors"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DominantColor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.DominantColor {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DominantColor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DominantColor()
        value.red = try reader["Red"].readIfPresent()
        value.blue = try reader["Blue"].readIfPresent()
        value.green = try reader["Green"].readIfPresent()
        value.hexCode = try reader["HexCode"].readIfPresent()
        value.cssColor = try reader["CSSColor"].readIfPresent()
        value.simplifiedColor = try reader["SimplifiedColor"].readIfPresent()
        value.pixelPercent = try reader["PixelPercent"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.DetectLabelsImageProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DetectLabelsImageProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DetectLabelsImageProperties()
        value.quality = try reader["Quality"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageQuality.read(from:))
        value.dominantColors = try reader["DominantColors"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DominantColor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.foreground = try reader["Foreground"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageForeground.read(from:))
        value.background = try reader["Background"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageBackground.read(from:))
        return value
    }
}

extension RekognitionClientTypes.DetectLabelsImageBackground {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DetectLabelsImageBackground {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DetectLabelsImageBackground()
        value.quality = try reader["Quality"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageQuality.read(from:))
        value.dominantColors = try reader["DominantColors"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DominantColor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.DetectLabelsImageQuality {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DetectLabelsImageQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DetectLabelsImageQuality()
        value.brightness = try reader["Brightness"].readIfPresent()
        value.sharpness = try reader["Sharpness"].readIfPresent()
        value.contrast = try reader["Contrast"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.DetectLabelsImageForeground {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DetectLabelsImageForeground {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DetectLabelsImageForeground()
        value.quality = try reader["Quality"].readIfPresent(with: RekognitionClientTypes.DetectLabelsImageQuality.read(from:))
        value.dominantColors = try reader["DominantColors"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.DominantColor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.ModerationLabel {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ModerationLabel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ModerationLabel()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.parentName = try reader["ParentName"].readIfPresent()
        value.taxonomyLevel = try reader["TaxonomyLevel"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.HumanLoopActivationOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.HumanLoopActivationOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.HumanLoopActivationOutput()
        value.humanLoopArn = try reader["HumanLoopArn"].readIfPresent()
        value.humanLoopActivationReasons = try reader["HumanLoopActivationReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.humanLoopActivationConditionsEvaluationResults = try reader["HumanLoopActivationConditionsEvaluationResults"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ContentType {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ContentType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ContentType()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ProtectiveEquipmentPerson {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProtectiveEquipmentPerson {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProtectiveEquipmentPerson()
        value.bodyParts = try reader["BodyParts"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ProtectiveEquipmentBodyPart.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ProtectiveEquipmentBodyPart {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProtectiveEquipmentBodyPart {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProtectiveEquipmentBodyPart()
        value.name = try reader["Name"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.equipmentDetections = try reader["EquipmentDetections"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.EquipmentDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.EquipmentDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.EquipmentDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.EquipmentDetection()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.coversBodyPart = try reader["CoversBodyPart"].readIfPresent(with: RekognitionClientTypes.CoversBodyPart.read(from:))
        return value
    }
}

extension RekognitionClientTypes.CoversBodyPart {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CoversBodyPart {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CoversBodyPart()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.value = try reader["Value"].readIfPresent() ?? false
        return value
    }
}

extension RekognitionClientTypes.ProtectiveEquipmentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProtectiveEquipmentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProtectiveEquipmentSummary()
        value.personsWithRequiredEquipment = try reader["PersonsWithRequiredEquipment"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.personsWithoutRequiredEquipment = try reader["PersonsWithoutRequiredEquipment"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.personsIndeterminate = try reader["PersonsIndeterminate"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.TextDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TextDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TextDetection()
        value.detectedText = try reader["DetectedText"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.parentId = try reader["ParentId"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: RekognitionClientTypes.Geometry.read(from:))
        return value
    }
}

extension RekognitionClientTypes.DisassociatedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DisassociatedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DisassociatedFace()
        value.faceId = try reader["FaceId"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.UnsuccessfulFaceDisassociation {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UnsuccessfulFaceDisassociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UnsuccessfulFaceDisassociation()
        value.faceId = try reader["FaceId"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent()
        value.reasons = try reader["Reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RekognitionClientTypes.UnsuccessfulFaceDisassociationReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.KnownGender {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.KnownGender {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.KnownGender()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.VideoMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.VideoMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.VideoMetadata()
        value.codec = try reader["Codec"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        value.frameRate = try reader["FrameRate"].readIfPresent()
        value.frameHeight = try reader["FrameHeight"].readIfPresent()
        value.frameWidth = try reader["FrameWidth"].readIfPresent()
        value.colorRange = try reader["ColorRange"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.CelebrityRecognition {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CelebrityRecognition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CelebrityRecognition()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.celebrity = try reader["Celebrity"].readIfPresent(with: RekognitionClientTypes.CelebrityDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.CelebrityDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.CelebrityDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.CelebrityDetail()
        value.urls = try reader["Urls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        value.knownGender = try reader["KnownGender"].readIfPresent(with: RekognitionClientTypes.KnownGender.read(from:))
        return value
    }
}

extension RekognitionClientTypes.Video {

    static func write(value: RekognitionClientTypes.Video?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Object"].write(value.s3Object, with: RekognitionClientTypes.S3Object.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Video {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Video()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        return value
    }
}

extension RekognitionClientTypes.ContentModerationDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ContentModerationDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ContentModerationDetection()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.moderationLabel = try reader["ModerationLabel"].readIfPresent(with: RekognitionClientTypes.ModerationLabel.read(from:))
        value.startTimestampMillis = try reader["StartTimestampMillis"].readIfPresent()
        value.endTimestampMillis = try reader["EndTimestampMillis"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        value.contentTypes = try reader["ContentTypes"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.ContentType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.GetContentModerationRequestMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.GetContentModerationRequestMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.GetContentModerationRequestMetadata()
        value.sortBy = try reader["SortBy"].readIfPresent()
        value.aggregateBy = try reader["AggregateBy"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.FaceDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceDetection()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.AuditImage {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.AuditImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.AuditImage()
        value.bytes = try reader["Bytes"].readIfPresent()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        return value
    }
}

extension RekognitionClientTypes.PersonMatch {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.PersonMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.PersonMatch()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.person = try reader["Person"].readIfPresent(with: RekognitionClientTypes.PersonDetail.read(from:))
        value.faceMatches = try reader["FaceMatches"].readListIfPresent(memberReadingClosure: RekognitionClientTypes.FaceMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.FaceMatch {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceMatch()
        value.similarity = try reader["Similarity"].readIfPresent()
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.Face.read(from:))
        return value
    }
}

extension RekognitionClientTypes.Face {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Face {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Face()
        value.faceId = try reader["FaceId"].readIfPresent()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.imageId = try reader["ImageId"].readIfPresent()
        value.externalImageId = try reader["ExternalImageId"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.indexFacesModelVersion = try reader["IndexFacesModelVersion"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.PersonDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.PersonDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.PersonDetail()
        value.index = try reader["Index"].readIfPresent() ?? 0
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: RekognitionClientTypes.BoundingBox.read(from:))
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.LabelDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.LabelDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.LabelDetection()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.label = try reader["Label"].readIfPresent(with: RekognitionClientTypes.Label.read(from:))
        value.startTimestampMillis = try reader["StartTimestampMillis"].readIfPresent()
        value.endTimestampMillis = try reader["EndTimestampMillis"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.GetLabelDetectionRequestMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.GetLabelDetectionRequestMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.GetLabelDetectionRequestMetadata()
        value.sortBy = try reader["SortBy"].readIfPresent()
        value.aggregateBy = try reader["AggregateBy"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisOperationsConfig {

    static func write(value: RekognitionClientTypes.MediaAnalysisOperationsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DetectModerationLabels"].write(value.detectModerationLabels, with: RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisOperationsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisOperationsConfig()
        value.detectModerationLabels = try reader["DetectModerationLabels"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig.read(from:))
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig {

    static func write(value: RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["ProjectVersion"].write(value.projectVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisDetectModerationLabelsConfig()
        value.minConfidence = try reader["MinConfidence"].readIfPresent()
        value.projectVersion = try reader["ProjectVersion"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisJobFailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisJobFailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisJobFailureDetails()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisInput {

    static func write(value: RekognitionClientTypes.MediaAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Object"].write(value.s3Object, with: RekognitionClientTypes.S3Object.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisInput()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisOutputConfig {

    static func write(value: RekognitionClientTypes.MediaAnalysisOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3KeyPrefix"].write(value.s3KeyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisOutputConfig()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent() ?? ""
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisResults {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisResults()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        value.modelVersions = try reader["ModelVersions"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisModelVersions.read(from:))
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisModelVersions {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisModelVersions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisModelVersions()
        value.moderation = try reader["Moderation"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisManifestSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisManifestSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisManifestSummary()
        value.s3Object = try reader["S3Object"].readIfPresent(with: RekognitionClientTypes.S3Object.read(from:))
        return value
    }
}

extension RekognitionClientTypes.PersonDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.PersonDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.PersonDetection()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.person = try reader["Person"].readIfPresent(with: RekognitionClientTypes.PersonDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.AudioMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.AudioMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.AudioMetadata()
        value.codec = try reader["Codec"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        value.sampleRate = try reader["SampleRate"].readIfPresent()
        value.numberOfChannels = try reader["NumberOfChannels"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.SegmentDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.SegmentDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.SegmentDetection()
        value.type = try reader["Type"].readIfPresent()
        value.startTimestampMillis = try reader["StartTimestampMillis"].readIfPresent() ?? 0
        value.endTimestampMillis = try reader["EndTimestampMillis"].readIfPresent() ?? 0
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        value.startTimecodeSMPTE = try reader["StartTimecodeSMPTE"].readIfPresent()
        value.endTimecodeSMPTE = try reader["EndTimecodeSMPTE"].readIfPresent()
        value.durationSMPTE = try reader["DurationSMPTE"].readIfPresent()
        value.technicalCueSegment = try reader["TechnicalCueSegment"].readIfPresent(with: RekognitionClientTypes.TechnicalCueSegment.read(from:))
        value.shotSegment = try reader["ShotSegment"].readIfPresent(with: RekognitionClientTypes.ShotSegment.read(from:))
        value.startFrameNumber = try reader["StartFrameNumber"].readIfPresent()
        value.endFrameNumber = try reader["EndFrameNumber"].readIfPresent()
        value.durationFrames = try reader["DurationFrames"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.ShotSegment {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ShotSegment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ShotSegment()
        value.index = try reader["Index"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.TechnicalCueSegment {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TechnicalCueSegment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TechnicalCueSegment()
        value.type = try reader["Type"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.SegmentTypeInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.SegmentTypeInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.SegmentTypeInfo()
        value.type = try reader["Type"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.TextDetectionResult {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.TextDetectionResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.TextDetectionResult()
        value.timestamp = try reader["Timestamp"].readIfPresent() ?? 0
        value.textDetection = try reader["TextDetection"].readIfPresent(with: RekognitionClientTypes.TextDetection.read(from:))
        return value
    }
}

extension RekognitionClientTypes.FaceRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.FaceRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.FaceRecord()
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.Face.read(from:))
        value.faceDetail = try reader["FaceDetail"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.UnindexedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UnindexedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UnindexedFace()
        value.reasons = try reader["Reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RekognitionClientTypes.Reason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.faceDetail = try reader["FaceDetail"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.DatasetLabelDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DatasetLabelDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DatasetLabelDescription()
        value.labelName = try reader["LabelName"].readIfPresent()
        value.labelStats = try reader["LabelStats"].readIfPresent(with: RekognitionClientTypes.DatasetLabelStats.read(from:))
        return value
    }
}

extension RekognitionClientTypes.DatasetLabelStats {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.DatasetLabelStats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.DatasetLabelStats()
        value.entryCount = try reader["EntryCount"].readIfPresent()
        value.boundingBoxCount = try reader["BoundingBoxCount"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.MediaAnalysisJobDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MediaAnalysisJobDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MediaAnalysisJobDescription()
        value.jobId = try reader["JobId"].readIfPresent() ?? ""
        value.jobName = try reader["JobName"].readIfPresent()
        value.operationsConfig = try reader["OperationsConfig"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisOperationsConfig.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisJobFailureDetails.read(from:))
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.completionTimestamp = try reader["CompletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.input = try reader["Input"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisInput.read(from:))
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisOutputConfig.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.results = try reader["Results"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisResults.read(from:))
        value.manifestSummary = try reader["ManifestSummary"].readIfPresent(with: RekognitionClientTypes.MediaAnalysisManifestSummary.read(from:))
        return value
    }
}

extension RekognitionClientTypes.ProjectPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.ProjectPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.ProjectPolicy()
        value.projectArn = try reader["ProjectArn"].readIfPresent()
        value.policyName = try reader["PolicyName"].readIfPresent()
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        value.policyDocument = try reader["PolicyDocument"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension RekognitionClientTypes.StreamProcessor {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.StreamProcessor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.StreamProcessor()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.User {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.User {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.User()
        value.userId = try reader["UserId"].readIfPresent()
        value.userStatus = try reader["UserStatus"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.Celebrity {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.Celebrity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.Celebrity()
        value.urls = try reader["Urls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.face = try reader["Face"].readIfPresent(with: RekognitionClientTypes.ComparedFace.read(from:))
        value.matchConfidence = try reader["MatchConfidence"].readIfPresent()
        value.knownGender = try reader["KnownGender"].readIfPresent(with: RekognitionClientTypes.KnownGender.read(from:))
        return value
    }
}

extension RekognitionClientTypes.UserMatch {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UserMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UserMatch()
        value.similarity = try reader["Similarity"].readIfPresent()
        value.user = try reader["User"].readIfPresent(with: RekognitionClientTypes.MatchedUser.read(from:))
        return value
    }
}

extension RekognitionClientTypes.MatchedUser {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.MatchedUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.MatchedUser()
        value.userId = try reader["UserId"].readIfPresent()
        value.userStatus = try reader["UserStatus"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.SearchedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.SearchedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.SearchedFace()
        value.faceId = try reader["FaceId"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.SearchedUser {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.SearchedUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.SearchedUser()
        value.userId = try reader["UserId"].readIfPresent()
        return value
    }
}

extension RekognitionClientTypes.SearchedFaceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.SearchedFaceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.SearchedFaceDetails()
        value.faceDetail = try reader["FaceDetail"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        return value
    }
}

extension RekognitionClientTypes.UnsearchedFace {

    static func read(from reader: SmithyJSON.Reader) throws -> RekognitionClientTypes.UnsearchedFace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RekognitionClientTypes.UnsearchedFace()
        value.faceDetails = try reader["FaceDetails"].readIfPresent(with: RekognitionClientTypes.FaceDetail.read(from:))
        value.reasons = try reader["Reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RekognitionClientTypes.UnsearchedFaceReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RekognitionClientTypes.Image {

    static func write(value: RekognitionClientTypes.Image?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bytes"].write(value.bytes)
        try writer["S3Object"].write(value.s3Object, with: RekognitionClientTypes.S3Object.write(value:to:))
    }
}

extension RekognitionClientTypes.DatasetSource {

    static func write(value: RekognitionClientTypes.DatasetSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetArn"].write(value.datasetArn)
        try writer["GroundTruthManifest"].write(value.groundTruthManifest, with: RekognitionClientTypes.GroundTruthManifest.write(value:to:))
    }
}

extension RekognitionClientTypes.CreateFaceLivenessSessionRequestSettings {

    static func write(value: RekognitionClientTypes.CreateFaceLivenessSessionRequestSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditImagesLimit"].write(value.auditImagesLimit)
        try writer["OutputConfig"].write(value.outputConfig, with: RekognitionClientTypes.LivenessOutputConfig.write(value:to:))
    }
}

extension RekognitionClientTypes.LivenessOutputConfig {

    static func write(value: RekognitionClientTypes.LivenessOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3KeyPrefix"].write(value.s3KeyPrefix)
    }
}

extension RekognitionClientTypes.DetectLabelsSettings {

    static func write(value: RekognitionClientTypes.DetectLabelsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GeneralLabels"].write(value.generalLabels, with: RekognitionClientTypes.GeneralLabelsSettings.write(value:to:))
        try writer["ImageProperties"].write(value.imageProperties, with: RekognitionClientTypes.DetectLabelsImagePropertiesSettings.write(value:to:))
    }
}

extension RekognitionClientTypes.DetectLabelsImagePropertiesSettings {

    static func write(value: RekognitionClientTypes.DetectLabelsImagePropertiesSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxDominantColors"].write(value.maxDominantColors)
    }
}

extension RekognitionClientTypes.GeneralLabelsSettings {

    static func write(value: RekognitionClientTypes.GeneralLabelsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelCategoryExclusionFilters"].writeList(value.labelCategoryExclusionFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelCategoryInclusionFilters"].writeList(value.labelCategoryInclusionFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelExclusionFilters"].writeList(value.labelExclusionFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelInclusionFilters"].writeList(value.labelInclusionFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RekognitionClientTypes.HumanLoopConfig {

    static func write(value: RekognitionClientTypes.HumanLoopConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataAttributes"].write(value.dataAttributes, with: RekognitionClientTypes.HumanLoopDataAttributes.write(value:to:))
        try writer["FlowDefinitionArn"].write(value.flowDefinitionArn)
        try writer["HumanLoopName"].write(value.humanLoopName)
    }
}

extension RekognitionClientTypes.HumanLoopDataAttributes {

    static func write(value: RekognitionClientTypes.HumanLoopDataAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentClassifiers"].writeList(value.contentClassifiers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.ContentClassifier>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes {

    static func write(value: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinConfidence"].write(value.minConfidence)
        try writer["RequiredEquipmentTypes"].writeList(value.requiredEquipmentTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<RekognitionClientTypes.ProtectiveEquipmentType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RekognitionClientTypes.DetectTextFilters {

    static func write(value: RekognitionClientTypes.DetectTextFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionsOfInterest"].writeList(value.regionsOfInterest, memberWritingClosure: RekognitionClientTypes.RegionOfInterest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WordFilter"].write(value.wordFilter, with: RekognitionClientTypes.DetectionFilter.write(value:to:))
    }
}

extension RekognitionClientTypes.DetectionFilter {

    static func write(value: RekognitionClientTypes.DetectionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinBoundingBoxHeight"].write(value.minBoundingBoxHeight)
        try writer["MinBoundingBoxWidth"].write(value.minBoundingBoxWidth)
        try writer["MinConfidence"].write(value.minConfidence)
    }
}

extension RekognitionClientTypes.DistributeDataset {

    static func write(value: RekognitionClientTypes.DistributeDataset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }
}

extension RekognitionClientTypes.NotificationChannel {

    static func write(value: RekognitionClientTypes.NotificationChannel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RoleArn"].write(value.roleArn)
        try writer["SNSTopicArn"].write(value.snsTopicArn)
    }
}

extension RekognitionClientTypes.LabelDetectionSettings {

    static func write(value: RekognitionClientTypes.LabelDetectionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GeneralLabels"].write(value.generalLabels, with: RekognitionClientTypes.GeneralLabelsSettings.write(value:to:))
    }
}

extension RekognitionClientTypes.StartSegmentDetectionFilters {

    static func write(value: RekognitionClientTypes.StartSegmentDetectionFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShotFilter"].write(value.shotFilter, with: RekognitionClientTypes.StartShotDetectionFilter.write(value:to:))
        try writer["TechnicalCueFilter"].write(value.technicalCueFilter, with: RekognitionClientTypes.StartTechnicalCueDetectionFilter.write(value:to:))
    }
}

extension RekognitionClientTypes.StartShotDetectionFilter {

    static func write(value: RekognitionClientTypes.StartShotDetectionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinSegmentConfidence"].write(value.minSegmentConfidence)
    }
}

extension RekognitionClientTypes.StartTechnicalCueDetectionFilter {

    static func write(value: RekognitionClientTypes.StartTechnicalCueDetectionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlackFrame"].write(value.blackFrame, with: RekognitionClientTypes.BlackFrame.write(value:to:))
        try writer["MinSegmentConfidence"].write(value.minSegmentConfidence)
    }
}

extension RekognitionClientTypes.BlackFrame {

    static func write(value: RekognitionClientTypes.BlackFrame?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxPixelThreshold"].write(value.maxPixelThreshold)
        try writer["MinCoveragePercentage"].write(value.minCoveragePercentage)
    }
}

extension RekognitionClientTypes.StreamProcessingStartSelector {

    static func write(value: RekognitionClientTypes.StreamProcessingStartSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KVSStreamStartSelector"].write(value.kvsStreamStartSelector, with: RekognitionClientTypes.KinesisVideoStreamStartSelector.write(value:to:))
    }
}

extension RekognitionClientTypes.KinesisVideoStreamStartSelector {

    static func write(value: RekognitionClientTypes.KinesisVideoStreamStartSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentNumber"].write(value.fragmentNumber)
        try writer["ProducerTimestamp"].write(value.producerTimestamp)
    }
}

extension RekognitionClientTypes.StreamProcessingStopSelector {

    static func write(value: RekognitionClientTypes.StreamProcessingStopSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxDurationInSeconds"].write(value.maxDurationInSeconds)
    }
}

extension RekognitionClientTypes.StartTextDetectionFilters {

    static func write(value: RekognitionClientTypes.StartTextDetectionFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionsOfInterest"].writeList(value.regionsOfInterest, memberWritingClosure: RekognitionClientTypes.RegionOfInterest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WordFilter"].write(value.wordFilter, with: RekognitionClientTypes.DetectionFilter.write(value:to:))
    }
}

extension RekognitionClientTypes.DatasetChanges {

    static func write(value: RekognitionClientTypes.DatasetChanges?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroundTruth"].write(value.groundTruth)
    }
}

extension RekognitionClientTypes.StreamProcessorSettingsForUpdate {

    static func write(value: RekognitionClientTypes.StreamProcessorSettingsForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectedHomeForUpdate"].write(value.connectedHomeForUpdate, with: RekognitionClientTypes.ConnectedHomeSettingsForUpdate.write(value:to:))
    }
}

extension RekognitionClientTypes.ConnectedHomeSettingsForUpdate {

    static func write(value: RekognitionClientTypes.ConnectedHomeSettingsForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Labels"].writeList(value.labels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MinConfidence"].write(value.minConfidence)
    }
}

public enum RekognitionClientTypes {}
