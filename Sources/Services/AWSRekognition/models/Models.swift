// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You are not authorized to perform the action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.AgeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case high = "High"
        case low = "Low"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let high = self.high {
            try encodeContainer.encode(high, forKey: .high)
        }
        if let low = self.low {
            try encodeContainer.encode(low, forKey: .low)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .low)
        low = lowDecoded
        let highDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .high)
        high = highDecoded
    }
}

extension RekognitionClientTypes {
    /// Structure containing the estimated age range, in years, for a face. Amazon Rekognition estimates an age range for faces detected in the input image. Estimated age ranges can overlap. A face of a 5-year-old might have an estimated range of 4-6, while the face of a 6-year-old might have an estimated range of 4-8.
    public struct AgeRange: Swift.Equatable {
        /// The highest estimated age.
        public var high: Swift.Int?
        /// The lowest estimated age.
        public var low: Swift.Int?

        public init (
            high: Swift.Int? = nil,
            low: Swift.Int? = nil
        )
        {
            self.high = high
            self.low = low
        }
    }

}

extension RekognitionClientTypes.Asset: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groundTruthManifest = "GroundTruthManifest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groundTruthManifest = self.groundTruthManifest {
            try encodeContainer.encode(groundTruthManifest, forKey: .groundTruthManifest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groundTruthManifestDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GroundTruthManifest.self, forKey: .groundTruthManifest)
        groundTruthManifest = groundTruthManifestDecoded
    }
}

extension RekognitionClientTypes {
    /// Assets are the images that you use to train and evaluate a model version. Assets can also contain validation information that you use to debug a failed model training.
    public struct Asset: Swift.Equatable {
        /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
        public var groundTruthManifest: RekognitionClientTypes.GroundTruthManifest?

        public init (
            groundTruthManifest: RekognitionClientTypes.GroundTruthManifest? = nil
        )
        {
            self.groundTruthManifest = groundTruthManifest
        }
    }

}

extension RekognitionClientTypes {
    public enum Attribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case `default`
        case sdkUnknown(Swift.String)

        public static var allCases: [Attribute] {
            return [
                .all,
                .default,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .default: return "DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Attribute(rawValue: rawValue) ?? Attribute.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.AudioMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codec = "Codec"
        case durationMillis = "DurationMillis"
        case numberOfChannels = "NumberOfChannels"
        case sampleRate = "SampleRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codec = self.codec {
            try encodeContainer.encode(codec, forKey: .codec)
        }
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let numberOfChannels = self.numberOfChannels {
            try encodeContainer.encode(numberOfChannels, forKey: .numberOfChannels)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codec)
        codec = codecDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let numberOfChannelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfChannels)
        numberOfChannels = numberOfChannelsDecoded
    }
}

extension RekognitionClientTypes {
    /// Metadata information about an audio stream. An array of AudioMetadata objects for the audio streams found in a stored video is returned by [GetSegmentDetection].
    public struct AudioMetadata: Swift.Equatable {
        /// The audio codec used to encode or decode the audio stream.
        public var codec: Swift.String?
        /// The duration of the audio stream in milliseconds.
        public var durationMillis: Swift.Int?
        /// The number of audio channels in the segment.
        public var numberOfChannels: Swift.Int?
        /// The sample rate for the audio stream.
        public var sampleRate: Swift.Int?

        public init (
            codec: Swift.String? = nil,
            durationMillis: Swift.Int? = nil,
            numberOfChannels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.codec = codec
            self.durationMillis = durationMillis
            self.numberOfChannels = numberOfChannels
            self.sampleRate = sampleRate
        }
    }

}

extension RekognitionClientTypes.Beard: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face has a beard, and the confidence level in the determination.
    public struct Beard: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face has beard or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes.BlackFrame: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxPixelThreshold = "MaxPixelThreshold"
        case minCoveragePercentage = "MinCoveragePercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxPixelThreshold = self.maxPixelThreshold {
            try encodeContainer.encode(maxPixelThreshold, forKey: .maxPixelThreshold)
        }
        if let minCoveragePercentage = self.minCoveragePercentage {
            try encodeContainer.encode(minCoveragePercentage, forKey: .minCoveragePercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxPixelThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .maxPixelThreshold)
        maxPixelThreshold = maxPixelThresholdDecoded
        let minCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minCoveragePercentage)
        minCoveragePercentage = minCoveragePercentageDecoded
    }
}

extension RekognitionClientTypes {
    /// A filter that allows you to control the black frame detection by specifying the black levels and pixel coverage of black pixels in a frame. As videos can come from multiple sources, formats, and time periods, they may contain different standards and varying noise levels for black frames that need to be accounted for. For more information, see [StartSegmentDetection].
    public struct BlackFrame: Swift.Equatable {
        /// A threshold used to determine the maximum luminance value for a pixel to be considered black. In a full color range video, luminance values range from 0-255. A pixel value of 0 is pure black, and the most strict filter. The maximum black pixel value is computed as follows: max_black_pixel_value = minimum_luminance + MaxPixelThreshold *luminance_range. For example, for a full range video with BlackPixelThreshold = 0.1, max_black_pixel_value is 0 + 0.1 * (255-0) = 25.5. The default value of MaxPixelThreshold is 0.2, which maps to a max_black_pixel_value of 51 for a full range video. You can lower this threshold to be more strict on black levels.
        public var maxPixelThreshold: Swift.Float?
        /// The minimum percentage of pixels in a frame that need to have a luminance below the max_black_pixel_value for a frame to be considered a black frame. Luminance is calculated using the BT.709 matrix. The default value is 99, which means at least 99% of all pixels in the frame are black pixels as per the MaxPixelThreshold set. You can reduce this value to allow more noise on the black frame.
        public var minCoveragePercentage: Swift.Float?

        public init (
            maxPixelThreshold: Swift.Float? = nil,
            minCoveragePercentage: Swift.Float? = nil
        )
        {
            self.maxPixelThreshold = maxPixelThreshold
            self.minCoveragePercentage = minCoveragePercentage
        }
    }

}

extension RekognitionClientTypes {
    public enum BodyPart: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case face
        case head
        case leftHand
        case rightHand
        case sdkUnknown(Swift.String)

        public static var allCases: [BodyPart] {
            return [
                .face,
                .head,
                .leftHand,
                .rightHand,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .face: return "FACE"
            case .head: return "HEAD"
            case .leftHand: return "LEFT_HAND"
            case .rightHand: return "RIGHT_HAND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BodyPart(rawValue: rawValue) ?? BodyPart.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.BoundingBox: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case height = "Height"
        case `left` = "Left"
        case top = "Top"
        case width = "Width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let `left` = self.`left` {
            try encodeContainer.encode(`left`, forKey: .`left`)
        }
        if let top = self.top {
            try encodeContainer.encode(top, forKey: .top)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .width)
        width = widthDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .height)
        height = heightDecoded
        let leftDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .left)
        `left` = leftDecoded
        let topDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .top)
        top = topDecoded
    }
}

extension RekognitionClientTypes {
    /// Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The left (x-coordinate) and top (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). The top and left values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a left value of 0.5 (350/700) and a top value of 0.25 (50/200). The width and height values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the left or top values.
    public struct BoundingBox: Swift.Equatable {
        /// Height of the bounding box as a ratio of the overall image height.
        public var height: Swift.Float?
        /// Left coordinate of the bounding box as a ratio of overall image width.
        public var `left`: Swift.Float?
        /// Top coordinate of the bounding box as a ratio of overall image height.
        public var top: Swift.Float?
        /// Width of the bounding box as a ratio of the overall image width.
        public var width: Swift.Float?

        public init (
            height: Swift.Float? = nil,
            `left`: Swift.Float? = nil,
            top: Swift.Float? = nil,
            width: Swift.Float? = nil
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }

}

extension RekognitionClientTypes.Celebrity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case id = "Id"
        case knownGender = "KnownGender"
        case matchConfidence = "MatchConfidence"
        case name = "Name"
        case urls = "Urls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let knownGender = self.knownGender {
            try encodeContainer.encode(knownGender, forKey: .knownGender)
        }
        if let matchConfidence = self.matchConfidence {
            try encodeContainer.encode(matchConfidence, forKey: .matchConfidence)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let urls = urls {
            var urlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urls)
            for url0 in urls {
                try urlsContainer.encode(url0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ComparedFace.self, forKey: .face)
        face = faceDecoded
        let matchConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .matchConfidence)
        matchConfidence = matchConfidenceDecoded
        let knownGenderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KnownGender.self, forKey: .knownGender)
        knownGender = knownGenderDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides information about a celebrity recognized by the [RecognizeCelebrities] operation.
    public struct Celebrity: Swift.Equatable {
        /// Provides information about the celebrity's face, such as its location on the image.
        public var face: RekognitionClientTypes.ComparedFace?
        /// A unique identifier for the celebrity.
        public var id: Swift.String?
        /// The known gender identity for the celebrity that matches the provided ID. The known gender identity can be Male, Female, Nonbinary, or Unlisted.
        public var knownGender: RekognitionClientTypes.KnownGender?
        /// The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity.
        public var matchConfidence: Swift.Float?
        /// The name of the celebrity.
        public var name: Swift.String?
        /// An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty.
        public var urls: [Swift.String]?

        public init (
            face: RekognitionClientTypes.ComparedFace? = nil,
            id: Swift.String? = nil,
            knownGender: RekognitionClientTypes.KnownGender? = nil,
            matchConfidence: Swift.Float? = nil,
            name: Swift.String? = nil,
            urls: [Swift.String]? = nil
        )
        {
            self.face = face
            self.id = id
            self.knownGender = knownGender
            self.matchConfidence = matchConfidence
            self.name = name
            self.urls = urls
        }
    }

}

extension RekognitionClientTypes.CelebrityDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case face = "Face"
        case id = "Id"
        case knownGender = "KnownGender"
        case name = "Name"
        case urls = "Urls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let knownGender = self.knownGender {
            try encodeContainer.encode(knownGender, forKey: .knownGender)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let urls = urls {
            var urlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urls)
            for url0 in urls {
                try urlsContainer.encode(url0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceDetail.self, forKey: .face)
        face = faceDecoded
        let knownGenderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KnownGender.self, forKey: .knownGender)
        knownGender = knownGenderDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a recognized celebrity.
    public struct CelebrityDetail: Swift.Equatable {
        /// Bounding box around the body of a celebrity.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity.
        public var confidence: Swift.Float?
        /// Face details for the recognized celebrity.
        public var face: RekognitionClientTypes.FaceDetail?
        /// The unique identifier for the celebrity.
        public var id: Swift.String?
        /// Retrieves the known gender for the celebrity.
        public var knownGender: RekognitionClientTypes.KnownGender?
        /// The name of the celebrity.
        public var name: Swift.String?
        /// An array of URLs pointing to additional celebrity information.
        public var urls: [Swift.String]?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            face: RekognitionClientTypes.FaceDetail? = nil,
            id: Swift.String? = nil,
            knownGender: RekognitionClientTypes.KnownGender? = nil,
            name: Swift.String? = nil,
            urls: [Swift.String]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.face = face
            self.id = id
            self.knownGender = knownGender
            self.name = name
            self.urls = urls
        }
    }

}

extension RekognitionClientTypes.CelebrityRecognition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case celebrity = "Celebrity"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let celebrity = self.celebrity {
            try encodeContainer.encode(celebrity, forKey: .celebrity)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let celebrityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.CelebrityDetail.self, forKey: .celebrity)
        celebrity = celebrityDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a detected celebrity and the time the celebrity was detected in a stored video. For more information, see GetCelebrityRecognition in the Amazon Rekognition Developer Guide.
    public struct CelebrityRecognition: Swift.Equatable {
        /// Information about a recognized celebrity.
        public var celebrity: RekognitionClientTypes.CelebrityDetail?
        /// The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that Timestamp is not guaranteed to be accurate to the individual frame where the celebrity first appears.
        public var timestamp: Swift.Int

        public init (
            celebrity: RekognitionClientTypes.CelebrityDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.celebrity = celebrity
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum CelebrityRecognitionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case id
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [CelebrityRecognitionSortBy] {
            return [
                .id,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .id: return "ID"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CelebrityRecognitionSortBy(rawValue: rawValue) ?? CelebrityRecognitionSortBy.sdkUnknown(rawValue)
        }
    }
}

extension CompareFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualityFilter = "QualityFilter"
        case similarityThreshold = "SimilarityThreshold"
        case sourceImage = "SourceImage"
        case targetImage = "TargetImage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualityFilter = self.qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
        if let similarityThreshold = self.similarityThreshold {
            try encodeContainer.encode(similarityThreshold, forKey: .similarityThreshold)
        }
        if let sourceImage = self.sourceImage {
            try encodeContainer.encode(sourceImage, forKey: .sourceImage)
        }
        if let targetImage = self.targetImage {
            try encodeContainer.encode(targetImage, forKey: .targetImage)
        }
    }
}

extension CompareFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CompareFacesInput: Swift.Equatable {
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't compared. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. The default value is NONE. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?
    /// The minimum level of confidence in the face matches that a match must meet to be included in the FaceMatches array.
    public var similarityThreshold: Swift.Float?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var sourceImage: RekognitionClientTypes.Image?
    /// The target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var targetImage: RekognitionClientTypes.Image?

    public init (
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil,
        similarityThreshold: Swift.Float? = nil,
        sourceImage: RekognitionClientTypes.Image? = nil,
        targetImage: RekognitionClientTypes.Image? = nil
    )
    {
        self.qualityFilter = qualityFilter
        self.similarityThreshold = similarityThreshold
        self.sourceImage = sourceImage
        self.targetImage = targetImage
    }
}

struct CompareFacesInputBody: Swift.Equatable {
    let sourceImage: RekognitionClientTypes.Image?
    let targetImage: RekognitionClientTypes.Image?
    let similarityThreshold: Swift.Float?
    let qualityFilter: RekognitionClientTypes.QualityFilter?
}

extension CompareFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualityFilter = "QualityFilter"
        case similarityThreshold = "SimilarityThreshold"
        case sourceImage = "SourceImage"
        case targetImage = "TargetImage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceImageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .sourceImage)
        sourceImage = sourceImageDecoded
        let targetImageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .targetImage)
        targetImage = targetImageDecoded
        let similarityThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .similarityThreshold)
        similarityThreshold = similarityThresholdDecoded
        let qualityFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.QualityFilter.self, forKey: .qualityFilter)
        qualityFilter = qualityFilterDecoded
    }
}

extension RekognitionClientTypes.CompareFacesMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case similarity = "Similarity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let similarity = self.similarity {
            try encodeContainer.encode(similarity, forKey: .similarity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let similarityDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .similarity)
        similarity = similarityDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ComparedFace.self, forKey: .face)
        face = faceDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides information about a face in a target image that matches the source image face analyzed by CompareFaces. The Face property contains the bounding box of the face in the target image. The Similarity property is the confidence that the source image face matches the face in the bounding box.
    public struct CompareFacesMatch: Swift.Equatable {
        /// Provides face metadata (bounding box and confidence that the bounding box actually contains a face).
        public var face: RekognitionClientTypes.ComparedFace?
        /// Level of confidence that the faces match.
        public var similarity: Swift.Float?

        public init (
            face: RekognitionClientTypes.ComparedFace? = nil,
            similarity: Swift.Float? = nil
        )
        {
            self.face = face
            self.similarity = similarity
        }
    }

}

extension CompareFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CompareFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CompareFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompareFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CompareFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceMatches = output.faceMatches
            self.sourceImageFace = output.sourceImageFace
            self.sourceImageOrientationCorrection = output.sourceImageOrientationCorrection
            self.targetImageOrientationCorrection = output.targetImageOrientationCorrection
            self.unmatchedFaces = output.unmatchedFaces
        } else {
            self.faceMatches = nil
            self.sourceImageFace = nil
            self.sourceImageOrientationCorrection = nil
            self.targetImageOrientationCorrection = nil
            self.unmatchedFaces = nil
        }
    }
}

public struct CompareFacesOutputResponse: Swift.Equatable {
    /// An array of faces in the target image that match the source image face. Each CompareFacesMatch object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image.
    public var faceMatches: [RekognitionClientTypes.CompareFacesMatch]?
    /// The face in the source image that was used for comparison.
    public var sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace?
    /// The value of SourceImageOrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// The value of TargetImageOrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// An array of faces in the target image that did not match the source image face.
    public var unmatchedFaces: [RekognitionClientTypes.ComparedFace]?

    public init (
        faceMatches: [RekognitionClientTypes.CompareFacesMatch]? = nil,
        sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace? = nil,
        sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unmatchedFaces: [RekognitionClientTypes.ComparedFace]? = nil
    )
    {
        self.faceMatches = faceMatches
        self.sourceImageFace = sourceImageFace
        self.sourceImageOrientationCorrection = sourceImageOrientationCorrection
        self.targetImageOrientationCorrection = targetImageOrientationCorrection
        self.unmatchedFaces = unmatchedFaces
    }
}

struct CompareFacesOutputResponseBody: Swift.Equatable {
    let sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace?
    let faceMatches: [RekognitionClientTypes.CompareFacesMatch]?
    let unmatchedFaces: [RekognitionClientTypes.ComparedFace]?
    let sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
}

extension CompareFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceMatches = "FaceMatches"
        case sourceImageFace = "SourceImageFace"
        case sourceImageOrientationCorrection = "SourceImageOrientationCorrection"
        case targetImageOrientationCorrection = "TargetImageOrientationCorrection"
        case unmatchedFaces = "UnmatchedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceImageFaceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ComparedSourceImageFace.self, forKey: .sourceImageFace)
        sourceImageFace = sourceImageFaceDecoded
        let faceMatchesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.CompareFacesMatch?].self, forKey: .faceMatches)
        var faceMatchesDecoded0:[RekognitionClientTypes.CompareFacesMatch]? = nil
        if let faceMatchesContainer = faceMatchesContainer {
            faceMatchesDecoded0 = [RekognitionClientTypes.CompareFacesMatch]()
            for structure0 in faceMatchesContainer {
                if let structure0 = structure0 {
                    faceMatchesDecoded0?.append(structure0)
                }
            }
        }
        faceMatches = faceMatchesDecoded0
        let unmatchedFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ComparedFace?].self, forKey: .unmatchedFaces)
        var unmatchedFacesDecoded0:[RekognitionClientTypes.ComparedFace]? = nil
        if let unmatchedFacesContainer = unmatchedFacesContainer {
            unmatchedFacesDecoded0 = [RekognitionClientTypes.ComparedFace]()
            for structure0 in unmatchedFacesContainer {
                if let structure0 = structure0 {
                    unmatchedFacesDecoded0?.append(structure0)
                }
            }
        }
        unmatchedFaces = unmatchedFacesDecoded0
        let sourceImageOrientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .sourceImageOrientationCorrection)
        sourceImageOrientationCorrection = sourceImageOrientationCorrectionDecoded
        let targetImageOrientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .targetImageOrientationCorrection)
        targetImageOrientationCorrection = targetImageOrientationCorrectionDecoded
    }
}

extension RekognitionClientTypes.ComparedFace: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case emotions = "Emotions"
        case landmarks = "Landmarks"
        case pose = "Pose"
        case quality = "Quality"
        case smile = "Smile"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let emotions = emotions {
            var emotionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emotions)
            for emotion0 in emotions {
                try emotionsContainer.encode(emotion0)
            }
        }
        if let landmarks = landmarks {
            var landmarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .landmarks)
            for landmark0 in landmarks {
                try landmarksContainer.encode(landmark0)
            }
        }
        if let pose = self.pose {
            try encodeContainer.encode(pose, forKey: .pose)
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
        if let smile = self.smile {
            try encodeContainer.encode(smile, forKey: .smile)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let landmarksContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Landmark?].self, forKey: .landmarks)
        var landmarksDecoded0:[RekognitionClientTypes.Landmark]? = nil
        if let landmarksContainer = landmarksContainer {
            landmarksDecoded0 = [RekognitionClientTypes.Landmark]()
            for structure0 in landmarksContainer {
                if let structure0 = structure0 {
                    landmarksDecoded0?.append(structure0)
                }
            }
        }
        landmarks = landmarksDecoded0
        let poseDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Pose.self, forKey: .pose)
        pose = poseDecoded
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let emotionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Emotion?].self, forKey: .emotions)
        var emotionsDecoded0:[RekognitionClientTypes.Emotion]? = nil
        if let emotionsContainer = emotionsContainer {
            emotionsDecoded0 = [RekognitionClientTypes.Emotion]()
            for structure0 in emotionsContainer {
                if let structure0 = structure0 {
                    emotionsDecoded0?.append(structure0)
                }
            }
        }
        emotions = emotionsDecoded0
        let smileDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Smile.self, forKey: .smile)
        smile = smileDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides face metadata for target image faces that are analyzed by CompareFaces and RecognizeCelebrities.
    public struct ComparedFace: Swift.Equatable {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Level of confidence that what the bounding box contains is a face.
        public var confidence: Swift.Float?
        /// The emotions that appear to be expressed on the face, and the confidence level in the determination. Valid values include "Happy", "Sad", "Angry", "Confused", "Disgusted", "Surprised", "Calm", "Unknown", and "Fear".
        public var emotions: [RekognitionClientTypes.Emotion]?
        /// An array of facial landmarks.
        public var landmarks: [RekognitionClientTypes.Landmark]?
        /// Indicates the pose of the face as determined by its pitch, roll, and yaw.
        public var pose: RekognitionClientTypes.Pose?
        /// Identifies face image brightness and sharpness.
        public var quality: RekognitionClientTypes.ImageQuality?
        /// Indicates whether or not the face is smiling, and the confidence level in the determination.
        public var smile: RekognitionClientTypes.Smile?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            emotions: [RekognitionClientTypes.Emotion]? = nil,
            landmarks: [RekognitionClientTypes.Landmark]? = nil,
            pose: RekognitionClientTypes.Pose? = nil,
            quality: RekognitionClientTypes.ImageQuality? = nil,
            smile: RekognitionClientTypes.Smile? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.emotions = emotions
            self.landmarks = landmarks
            self.pose = pose
            self.quality = quality
            self.smile = smile
        }
    }

}

extension RekognitionClientTypes.ComparedSourceImageFace: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Type that describes the face Amazon Rekognition chose to compare with the faces in the target. This contains a bounding box for the selected face and confidence level that the bounding box contains a face. Note that Amazon Rekognition selects the largest face in the source image for this comparison.
    public struct ComparedSourceImageFace: Swift.Equatable {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the selected bounding box contains a face.
        public var confidence: Swift.Float?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
        }
    }

}

extension RekognitionClientTypes.ConnectedHomeSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels = "Labels"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for connectedhomelabel0 in labels {
                try labelsContainer.encode(connectedhomelabel0)
            }
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Label detection settings to use on a streaming video. Defining the settings is required in the request parameter for [CreateStreamProcessor]. Including this setting in the CreateStreamProcessor request enables you to use the stream processor for label detection. You can then select what you want the stream processor to detect, such as people or pets. When the stream processor has started, one notification is sent for each object class specified. For example, if packages and pets are selected, one SNS notification is published the first time a package is detected and one SNS notification is published the first time a pet is detected, as well as an end-of-session summary.
    public struct ConnectedHomeSettings: Swift.Equatable {
        /// Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: "PERSON", "PET", "PACKAGE", and "ALL".
        /// This member is required.
        public var labels: [Swift.String]?
        /// The minimum confidence required to label an object in the video.
        public var minConfidence: Swift.Float?

        public init (
            labels: [Swift.String]? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.labels = labels
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes.ConnectedHomeSettingsForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels = "Labels"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for connectedhomelabel0 in labels {
                try labelsContainer.encode(connectedhomelabel0)
            }
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// The label detection settings you want to use in your stream processor. This includes the labels you want the stream processor to detect and the minimum confidence level allowed to label objects.
    public struct ConnectedHomeSettingsForUpdate: Swift.Equatable {
        /// Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: "PERSON", "PET", "PACKAGE", and "ALL".
        public var labels: [Swift.String]?
        /// The minimum confidence required to label an object in the video.
        public var minConfidence: Swift.Float?

        public init (
            labels: [Swift.String]? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.labels = labels
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes {
    public enum ContentClassifier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentClassifier(rawValue: rawValue) ?? ContentClassifier.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.ContentModerationDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case moderationLabel = "ModerationLabel"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let moderationLabel = self.moderationLabel {
            try encodeContainer.encode(moderationLabel, forKey: .moderationLabel)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let moderationLabelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ModerationLabel.self, forKey: .moderationLabel)
        moderationLabel = moderationLabelDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about an inappropriate, unwanted, or offensive content label detection in a stored video.
    public struct ContentModerationDetection: Swift.Equatable {
        /// The content moderation label detected by in the stored video.
        public var moderationLabel: RekognitionClientTypes.ModerationLabel?
        /// Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the moderated content first appears.
        public var timestamp: Swift.Int

        public init (
            moderationLabel: RekognitionClientTypes.ModerationLabel? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.moderationLabel = moderationLabel
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum ContentModerationSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case name
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentModerationSortBy] {
            return [
                .name,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .name: return "NAME"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentModerationSortBy(rawValue: rawValue) ?? ContentModerationSortBy.sdkUnknown(rawValue)
        }
    }
}

extension CopyProjectVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationProjectArn = "DestinationProjectArn"
        case kmsKeyId = "KmsKeyId"
        case outputConfig = "OutputConfig"
        case sourceProjectArn = "SourceProjectArn"
        case sourceProjectVersionArn = "SourceProjectVersionArn"
        case tags = "Tags"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationProjectArn = self.destinationProjectArn {
            try encodeContainer.encode(destinationProjectArn, forKey: .destinationProjectArn)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let sourceProjectArn = self.sourceProjectArn {
            try encodeContainer.encode(sourceProjectArn, forKey: .sourceProjectArn)
        }
        if let sourceProjectVersionArn = self.sourceProjectVersionArn {
            try encodeContainer.encode(sourceProjectVersionArn, forKey: .sourceProjectVersionArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }
}

extension CopyProjectVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CopyProjectVersionInput: Swift.Equatable {
    /// The ARN of the project in the trusted AWS account that you want to copy the model version to.
    /// This member is required.
    public var destinationProjectArn: Swift.String?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training results and manifest files written to the output Amazon S3 bucket (OutputConfig). If you choose to use your own KMS key, you need the following permissions on the KMS key.
    ///
    /// * kms:CreateGrant
    ///
    /// * kms:DescribeKey
    ///
    /// * kms:GenerateDataKey
    ///
    /// * kms:Decrypt
    ///
    ///
    /// If you don't specify a value for KmsKeyId, images copied into the service are encrypted using a key that AWS owns and manages.
    public var kmsKeyId: Swift.String?
    /// The S3 bucket and folder location where the training output for the source model version is placed.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.OutputConfig?
    /// The ARN of the source project in the trusting AWS account.
    /// This member is required.
    public var sourceProjectArn: Swift.String?
    /// The ARN of the model version in the source project that you want to copy to a destination project.
    /// This member is required.
    public var sourceProjectVersionArn: Swift.String?
    /// The key-value tags to assign to the model version.
    public var tags: [Swift.String:Swift.String]?
    /// A name for the version of the model that's copied to the destination project.
    /// This member is required.
    public var versionName: Swift.String?

    public init (
        destinationProjectArn: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        outputConfig: RekognitionClientTypes.OutputConfig? = nil,
        sourceProjectArn: Swift.String? = nil,
        sourceProjectVersionArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.destinationProjectArn = destinationProjectArn
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.sourceProjectArn = sourceProjectArn
        self.sourceProjectVersionArn = sourceProjectVersionArn
        self.tags = tags
        self.versionName = versionName
    }
}

struct CopyProjectVersionInputBody: Swift.Equatable {
    let sourceProjectArn: Swift.String?
    let sourceProjectVersionArn: Swift.String?
    let destinationProjectArn: Swift.String?
    let versionName: Swift.String?
    let outputConfig: RekognitionClientTypes.OutputConfig?
    let tags: [Swift.String:Swift.String]?
    let kmsKeyId: Swift.String?
}

extension CopyProjectVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationProjectArn = "DestinationProjectArn"
        case kmsKeyId = "KmsKeyId"
        case outputConfig = "OutputConfig"
        case sourceProjectArn = "SourceProjectArn"
        case sourceProjectVersionArn = "SourceProjectVersionArn"
        case tags = "Tags"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceProjectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceProjectArn)
        sourceProjectArn = sourceProjectArnDecoded
        let sourceProjectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceProjectVersionArn)
        sourceProjectVersionArn = sourceProjectVersionArnDecoded
        let destinationProjectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationProjectArn)
        destinationProjectArn = destinationProjectArnDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension CopyProjectVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CopyProjectVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CopyProjectVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopyProjectVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CopyProjectVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projectVersionArn = output.projectVersionArn
        } else {
            self.projectVersionArn = nil
        }
    }
}

public struct CopyProjectVersionOutputResponse: Swift.Equatable {
    /// The ARN of the copied model version in the destination project.
    public var projectVersionArn: Swift.String?

    public init (
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

struct CopyProjectVersionOutputResponseBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
}

extension CopyProjectVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
    }
}

extension RekognitionClientTypes.CoversBodyPart: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about an item of Personal Protective Equipment covering a corresponding body part. For more information, see [DetectProtectiveEquipment].
    public struct CoversBodyPart: Swift.Equatable {
        /// The confidence that Amazon Rekognition has in the value of Value.
        public var confidence: Swift.Float?
        /// True if the PPE covers the corresponding body part, otherwise false.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension CreateCollectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateCollectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCollectionInput: Swift.Equatable {
    /// ID for the collection that you are creating.
    /// This member is required.
    public var collectionId: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the collection.
    public var tags: [Swift.String:Swift.String]?

    public init (
        collectionId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.collectionId = collectionId
        self.tags = tags
    }
}

struct CreateCollectionInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCollectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCollectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collectionArn = output.collectionArn
            self.faceModelVersion = output.faceModelVersion
            self.statusCode = output.statusCode
        } else {
            self.collectionArn = nil
            self.faceModelVersion = nil
            self.statusCode = nil
        }
    }
}

public struct CreateCollectionOutputResponse: Swift.Equatable {
    /// Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources.
    public var collectionArn: Swift.String?
    /// Version number of the face detection model associated with the collection you are creating.
    public var faceModelVersion: Swift.String?
    /// HTTP status code indicating the result of the operation.
    public var statusCode: Swift.Int?

    public init (
        collectionArn: Swift.String? = nil,
        faceModelVersion: Swift.String? = nil,
        statusCode: Swift.Int? = nil
    )
    {
        self.collectionArn = collectionArn
        self.faceModelVersion = faceModelVersion
        self.statusCode = statusCode
    }
}

struct CreateCollectionOutputResponseBody: Swift.Equatable {
    let statusCode: Swift.Int?
    let collectionArn: Swift.String?
    let faceModelVersion: Swift.String?
}

extension CreateCollectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionArn = "CollectionArn"
        case faceModelVersion = "FaceModelVersion"
        case statusCode = "StatusCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let collectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionArn)
        collectionArn = collectionArnDecoded
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
    }
}

extension CreateDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSource = "DatasetSource"
        case datasetType = "DatasetType"
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetSource = self.datasetSource {
            try encodeContainer.encode(datasetSource, forKey: .datasetSource)
        }
        if let datasetType = self.datasetType {
            try encodeContainer.encode(datasetType.rawValue, forKey: .datasetType)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }
}

extension CreateDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDatasetInput: Swift.Equatable {
    /// The source files for the dataset. You can specify the ARN of an existing dataset or specify the Amazon S3 bucket location of an Amazon Sagemaker format manifest file. If you don't specify datasetSource, an empty dataset is created. To add labeled images to the dataset, You can use the console or call [UpdateDatasetEntries].
    public var datasetSource: RekognitionClientTypes.DatasetSource?
    /// The type of the dataset. Specify train to create a training dataset. Specify test to create a test dataset.
    /// This member is required.
    public var datasetType: RekognitionClientTypes.DatasetType?
    /// The ARN of the Amazon Rekognition Custom Labels project to which you want to asssign the dataset.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        datasetSource: RekognitionClientTypes.DatasetSource? = nil,
        datasetType: RekognitionClientTypes.DatasetType? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.datasetSource = datasetSource
        self.datasetType = datasetType
        self.projectArn = projectArn
    }
}

struct CreateDatasetInputBody: Swift.Equatable {
    let datasetSource: RekognitionClientTypes.DatasetSource?
    let datasetType: RekognitionClientTypes.DatasetType?
    let projectArn: Swift.String?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSource = "DatasetSource"
        case datasetType = "DatasetType"
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetSourceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetSource.self, forKey: .datasetSource)
        datasetSource = datasetSourceDecoded
        let datasetTypeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetType.self, forKey: .datasetType)
        datasetType = datasetTypeDecoded
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
    }
}

extension CreateDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
        } else {
            self.datasetArn = nil
        }
    }
}

public struct CreateDatasetOutputResponse: Swift.Equatable {
    /// The ARN of the created Amazon Rekognition Custom Labels dataset.
    public var datasetArn: Swift.String?

    public init (
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

struct CreateDatasetOutputResponseBody: Swift.Equatable {
    let datasetArn: Swift.String?
}

extension CreateDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
    }
}

extension CreateProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

extension CreateProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateProjectInput: Swift.Equatable {
    /// The name of the project to create.
    /// This member is required.
    public var projectName: Swift.String?

    public init (
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

struct CreateProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
}

extension CreateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
    }
}

extension CreateProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateProjectOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projectArn = output.projectArn
        } else {
            self.projectArn = nil
        }
    }
}

public struct CreateProjectOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new project. You can use the ARN to configure IAM access to the project.
    public var projectArn: Swift.String?

    public init (
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

struct CreateProjectOutputResponseBody: Swift.Equatable {
    let projectArn: Swift.String?
}

extension CreateProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
    }
}

extension CreateProjectVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case outputConfig = "OutputConfig"
        case projectArn = "ProjectArn"
        case tags = "Tags"
        case testingData = "TestingData"
        case trainingData = "TrainingData"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let testingData = self.testingData {
            try encodeContainer.encode(testingData, forKey: .testingData)
        }
        if let trainingData = self.trainingData {
            try encodeContainer.encode(trainingData, forKey: .trainingData)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }
}

extension CreateProjectVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateProjectVersionInput: Swift.Equatable {
    /// The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. The key is also used to encrypt training results and manifest files written to the output Amazon S3 bucket (OutputConfig). If you choose to use your own KMS key, you need the following permissions on the KMS key.
    ///
    /// * kms:CreateGrant
    ///
    /// * kms:DescribeKey
    ///
    /// * kms:GenerateDataKey
    ///
    /// * kms:Decrypt
    ///
    ///
    /// If you don't specify a value for KmsKeyId, images copied into the service are encrypted using a key that AWS owns and manages.
    public var kmsKeyId: Swift.String?
    /// The Amazon S3 bucket location to store the results of training. The S3 bucket can be in any AWS account as long as the caller has s3:PutObject permissions on the S3 bucket.
    /// This member is required.
    public var outputConfig: RekognitionClientTypes.OutputConfig?
    /// The ARN of the Amazon Rekognition Custom Labels project that manages the model that you want to train.
    /// This member is required.
    public var projectArn: Swift.String?
    /// A set of tags (key-value pairs) that you want to attach to the model.
    public var tags: [Swift.String:Swift.String]?
    /// Specifies an external manifest that the service uses to test the model. If you specify TestingData you must also specify TrainingData. The project must not have any associated datasets.
    public var testingData: RekognitionClientTypes.TestingData?
    /// Specifies an external manifest that the services uses to train the model. If you specify TrainingData you must also specify TestingData. The project must not have any associated datasets.
    public var trainingData: RekognitionClientTypes.TrainingData?
    /// A name for the version of the model. This value must be unique.
    /// This member is required.
    public var versionName: Swift.String?

    public init (
        kmsKeyId: Swift.String? = nil,
        outputConfig: RekognitionClientTypes.OutputConfig? = nil,
        projectArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        testingData: RekognitionClientTypes.TestingData? = nil,
        trainingData: RekognitionClientTypes.TrainingData? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.projectArn = projectArn
        self.tags = tags
        self.testingData = testingData
        self.trainingData = trainingData
        self.versionName = versionName
    }
}

struct CreateProjectVersionInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let versionName: Swift.String?
    let outputConfig: RekognitionClientTypes.OutputConfig?
    let trainingData: RekognitionClientTypes.TrainingData?
    let testingData: RekognitionClientTypes.TestingData?
    let tags: [Swift.String:Swift.String]?
    let kmsKeyId: Swift.String?
}

extension CreateProjectVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case outputConfig = "OutputConfig"
        case projectArn = "ProjectArn"
        case tags = "Tags"
        case testingData = "TestingData"
        case trainingData = "TrainingData"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let trainingDataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TrainingData.self, forKey: .trainingData)
        trainingData = trainingDataDecoded
        let testingDataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TestingData.self, forKey: .testingData)
        testingData = testingDataDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension CreateProjectVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProjectVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateProjectVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProjectVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateProjectVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projectVersionArn = output.projectVersionArn
        } else {
            self.projectVersionArn = nil
        }
    }
}

public struct CreateProjectVersionOutputResponse: Swift.Equatable {
    /// The ARN of the model version that was created. Use DescribeProjectVersion to get the current status of the training operation.
    public var projectVersionArn: Swift.String?

    public init (
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

struct CreateProjectVersionOutputResponseBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
}

extension CreateProjectVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
    }
}

extension CreateStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreference = "DataSharingPreference"
        case input = "Input"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case notificationChannel = "NotificationChannel"
        case output = "Output"
        case regionsOfInterest = "RegionsOfInterest"
        case roleArn = "RoleArn"
        case settings = "Settings"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSharingPreference = self.dataSharingPreference {
            try encodeContainer.encode(dataSharingPreference, forKey: .dataSharingPreference)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let regionsOfInterest = regionsOfInterest {
            var regionsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterest)
            for regionofinterest0 in regionsOfInterest {
                try regionsOfInterestContainer.encode(regionofinterest0)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStreamProcessorInput: Swift.Equatable {
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is StreamProcessorInput. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor. You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt results and data published to your Amazon S3 bucket, which includes image frames and hero images. Your source images are unaffected.
    public var kmsKeyId: Swift.String?
    /// An identifier you assign to the stream processor. You can use Name to manage the stream processor. For example, you can get the current status of the stream processor by calling [DescribeStreamProcessor]. Name is idempotent. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is StreamProcessorOutput. This must be a [S3Destination] of an Amazon S3 bucket that you own for a label detection stream processor or a Kinesis data stream ARN for a face search stream processor.
    /// This member is required.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. You can specify up to 10 regions of interest, and each region has either a polygon or a bounding box. This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    /// This member is required.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// A set of tags (key-value pairs) that you want to attach to the stream processor.
    public var tags: [Swift.String:Swift.String]?

    public init (
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.tags = tags
    }
}

struct CreateStreamProcessorInputBody: Swift.Equatable {
    let input: RekognitionClientTypes.StreamProcessorInput?
    let output: RekognitionClientTypes.StreamProcessorOutput?
    let name: Swift.String?
    let settings: RekognitionClientTypes.StreamProcessorSettings?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    let kmsKeyId: Swift.String?
    let regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    let dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
}

extension CreateStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreference = "DataSharingPreference"
        case input = "Input"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case notificationChannel = "NotificationChannel"
        case output = "Output"
        case regionsOfInterest = "RegionsOfInterest"
        case roleArn = "RoleArn"
        case settings = "Settings"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorInput.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorOutput.self, forKey: .output)
        output = outputDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorSettings.self, forKey: .settings)
        settings = settingsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorNotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let regionsOfInterestContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterest)
        var regionsOfInterestDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestContainer = regionsOfInterestContainer {
            regionsOfInterestDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestContainer {
                if let structure0 = structure0 {
                    regionsOfInterestDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterest = regionsOfInterestDecoded0
        let dataSharingPreferenceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorDataSharingPreference.self, forKey: .dataSharingPreference)
        dataSharingPreference = dataSharingPreferenceDecoded
    }
}

extension CreateStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStreamProcessorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.streamProcessorArn = output.streamProcessorArn
        } else {
            self.streamProcessorArn = nil
        }
    }
}

public struct CreateStreamProcessorOutputResponse: Swift.Equatable {
    /// Amazon Resource Number for the newly created stream processor.
    public var streamProcessorArn: Swift.String?

    public init (
        streamProcessorArn: Swift.String? = nil
    )
    {
        self.streamProcessorArn = streamProcessorArn
    }
}

struct CreateStreamProcessorOutputResponseBody: Swift.Equatable {
    let streamProcessorArn: Swift.String?
}

extension CreateStreamProcessorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamProcessorArn = "StreamProcessorArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamProcessorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamProcessorArn)
        streamProcessorArn = streamProcessorArnDecoded
    }
}

extension RekognitionClientTypes.CustomLabel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case geometry = "Geometry"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
    }
}

extension RekognitionClientTypes {
    /// A custom label detected in an image by a call to [DetectCustomLabels].
    public struct CustomLabel: Swift.Equatable {
        /// The confidence that the model has in the detection of the custom label. The range is 0-100. A higher value indicates a higher confidence.
        public var confidence: Swift.Float?
        /// The location of the detected object on the image that corresponds to the custom label. Includes an axis aligned coarse bounding box surrounding the object and a finer grain polygon for more accurate spatial information.
        public var geometry: RekognitionClientTypes.Geometry?
        /// The name of the custom label.
        public var name: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            geometry: RekognitionClientTypes.Geometry? = nil,
            name: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.name = name
        }
    }

}

extension RekognitionClientTypes.DatasetChanges: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groundTruth = "GroundTruth"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groundTruth = self.groundTruth {
            try encodeContainer.encode(groundTruth.base64EncodedString(), forKey: .groundTruth)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groundTruthDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .groundTruth)
        groundTruth = groundTruthDecoded
    }
}

extension RekognitionClientTypes {
    /// Describes updates or additions to a dataset. A Single update or addition is an entry (JSON Line) that provides information about a single image. To update an existing entry, you match the source-ref field of the update entry with the source-ref filed of the entry that you want to update. If the source-ref field doesn't match an existing entry, the entry is added to dataset as a new entry.
    public struct DatasetChanges: Swift.Equatable {
        /// A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling [UpdateDatasetEntries]. If you are using an AWS SDK to call UpdateDatasetEntries, you don't need to encode Changes as the SDK encodes the data for you. For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the Amazon Rekognition Custom Labels Developer Guide.
        /// This member is required.
        public var groundTruth: ClientRuntime.Data?

        public init (
            groundTruth: ClientRuntime.Data? = nil
        )
        {
            self.groundTruth = groundTruth
        }
    }

}

extension RekognitionClientTypes.DatasetDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case datasetStats = "DatasetStats"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case statusMessageCode = "StatusMessageCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let datasetStats = self.datasetStats {
            try encodeContainer.encode(datasetStats, forKey: .datasetStats)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusMessageCode = self.statusMessageCode {
            try encodeContainer.encode(statusMessageCode.rawValue, forKey: .statusMessageCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let statusMessageCodeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatusMessageCode.self, forKey: .statusMessageCode)
        statusMessageCode = statusMessageCodeDecoded
        let datasetStatsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStats.self, forKey: .datasetStats)
        datasetStats = datasetStatsDecoded
    }
}

extension RekognitionClientTypes {
    /// A description for a dataset. For more information, see [DescribeDataset]. The status fields Status, StatusMessage, and StatusMessageCode reflect the last operation on the dataset.
    public struct DatasetDescription: Swift.Equatable {
        /// The Unix timestamp for the time and date that the dataset was created.
        public var creationTimestamp: ClientRuntime.Date?
        /// The status message code for the dataset.
        public var datasetStats: RekognitionClientTypes.DatasetStats?
        /// The Unix timestamp for the date and time that the dataset was last updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The status of the dataset.
        public var status: RekognitionClientTypes.DatasetStatus?
        /// The status message for the dataset.
        public var statusMessage: Swift.String?
        /// The status message code for the dataset operation. If a service error occurs, try the API call again later. If a client error occurs, check the input parameters to the dataset API call that failed.
        public var statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            datasetStats: RekognitionClientTypes.DatasetStats? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            status: RekognitionClientTypes.DatasetStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.datasetStats = datasetStats
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
            self.statusMessage = statusMessage
            self.statusMessageCode = statusMessageCode
        }
    }

}

extension RekognitionClientTypes.DatasetLabelDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelName = "LabelName"
        case labelStats = "LabelStats"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelName = self.labelName {
            try encodeContainer.encode(labelName, forKey: .labelName)
        }
        if let labelStats = self.labelStats {
            try encodeContainer.encode(labelStats, forKey: .labelStats)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelName)
        labelName = labelNameDecoded
        let labelStatsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetLabelStats.self, forKey: .labelStats)
        labelStats = labelStatsDecoded
    }
}

extension RekognitionClientTypes {
    /// Describes a dataset label. For more information, see [ListDatasetLabels].
    public struct DatasetLabelDescription: Swift.Equatable {
        /// The name of the label.
        public var labelName: Swift.String?
        /// Statistics about the label.
        public var labelStats: RekognitionClientTypes.DatasetLabelStats?

        public init (
            labelName: Swift.String? = nil,
            labelStats: RekognitionClientTypes.DatasetLabelStats? = nil
        )
        {
            self.labelName = labelName
            self.labelStats = labelStats
        }
    }

}

extension RekognitionClientTypes.DatasetLabelStats: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBoxCount = "BoundingBoxCount"
        case entryCount = "EntryCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBoxCount = self.boundingBoxCount {
            try encodeContainer.encode(boundingBoxCount, forKey: .boundingBoxCount)
        }
        if let entryCount = self.entryCount {
            try encodeContainer.encode(entryCount, forKey: .entryCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entryCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .entryCount)
        entryCount = entryCountDecoded
        let boundingBoxCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .boundingBoxCount)
        boundingBoxCount = boundingBoxCountDecoded
    }
}

extension RekognitionClientTypes {
    /// Statistics about a label used in a dataset. For more information, see [DatasetLabelDescription].
    public struct DatasetLabelStats: Swift.Equatable {
        /// The total number of images that have the label assigned to a bounding box.
        public var boundingBoxCount: Swift.Int?
        /// The total number of images that use the label.
        public var entryCount: Swift.Int?

        public init (
            boundingBoxCount: Swift.Int? = nil,
            entryCount: Swift.Int? = nil
        )
        {
            self.boundingBoxCount = boundingBoxCount
            self.entryCount = entryCount
        }
    }

}

extension RekognitionClientTypes.DatasetMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case datasetArn = "DatasetArn"
        case datasetType = "DatasetType"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case statusMessageCode = "StatusMessageCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetType = self.datasetType {
            try encodeContainer.encode(datasetType.rawValue, forKey: .datasetType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusMessageCode = self.statusMessageCode {
            try encodeContainer.encode(statusMessageCode.rawValue, forKey: .statusMessageCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let datasetTypeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetType.self, forKey: .datasetType)
        datasetType = datasetTypeDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let statusMessageCodeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatusMessageCode.self, forKey: .statusMessageCode)
        statusMessageCode = statusMessageCodeDecoded
    }
}

extension RekognitionClientTypes {
    /// Summary information for an Amazon Rekognition Custom Labels dataset. For more information, see [ProjectDescription].
    public struct DatasetMetadata: Swift.Equatable {
        /// The Unix timestamp for the date and time that the dataset was created.
        public var creationTimestamp: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the dataset.
        public var datasetArn: Swift.String?
        /// The type of the dataset.
        public var datasetType: RekognitionClientTypes.DatasetType?
        /// The status for the dataset.
        public var status: RekognitionClientTypes.DatasetStatus?
        /// The status message for the dataset.
        public var statusMessage: Swift.String?
        /// The status message code for the dataset operation. If a service error occurs, try the API call again later. If a client error occurs, check the input parameters to the dataset API call that failed.
        public var statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetType: RekognitionClientTypes.DatasetType? = nil,
            status: RekognitionClientTypes.DatasetStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusMessageCode: RekognitionClientTypes.DatasetStatusMessageCode? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.datasetArn = datasetArn
            self.datasetType = datasetType
            self.status = status
            self.statusMessage = statusMessage
            self.statusMessageCode = statusMessageCode
        }
    }

}

extension RekognitionClientTypes.DatasetSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case groundTruthManifest = "GroundTruthManifest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let groundTruthManifest = self.groundTruthManifest {
            try encodeContainer.encode(groundTruthManifest, forKey: .groundTruthManifest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groundTruthManifestDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GroundTruthManifest.self, forKey: .groundTruthManifest)
        groundTruthManifest = groundTruthManifestDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
    }
}

extension RekognitionClientTypes {
    /// The source that Amazon Rekognition Custom Labels uses to create a dataset. To use an Amazon Sagemaker format manifest file, specify the S3 bucket location in the GroundTruthManifest field. The S3 bucket must be in your AWS account. To create a copy of an existing dataset, specify the Amazon Resource Name (ARN) of an existing dataset in DatasetArn. You need to specify a value for DatasetArn or GroundTruthManifest, but not both. if you supply both values, or if you don't specify any values, an InvalidParameterException exception occurs. For more information, see [CreateDataset].
    public struct DatasetSource: Swift.Equatable {
        /// The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy.
        public var datasetArn: Swift.String?
        /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
        public var groundTruthManifest: RekognitionClientTypes.GroundTruthManifest?

        public init (
            datasetArn: Swift.String? = nil,
            groundTruthManifest: RekognitionClientTypes.GroundTruthManifest? = nil
        )
        {
            self.datasetArn = datasetArn
            self.groundTruthManifest = groundTruthManifest
        }
    }

}

extension RekognitionClientTypes.DatasetStats: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries = "ErrorEntries"
        case labeledEntries = "LabeledEntries"
        case totalEntries = "TotalEntries"
        case totalLabels = "TotalLabels"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorEntries = self.errorEntries {
            try encodeContainer.encode(errorEntries, forKey: .errorEntries)
        }
        if let labeledEntries = self.labeledEntries {
            try encodeContainer.encode(labeledEntries, forKey: .labeledEntries)
        }
        if let totalEntries = self.totalEntries {
            try encodeContainer.encode(totalEntries, forKey: .totalEntries)
        }
        if let totalLabels = self.totalLabels {
            try encodeContainer.encode(totalLabels, forKey: .totalLabels)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labeledEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .labeledEntries)
        labeledEntries = labeledEntriesDecoded
        let totalEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalEntries)
        totalEntries = totalEntriesDecoded
        let totalLabelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalLabels)
        totalLabels = totalLabelsDecoded
        let errorEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorEntries)
        errorEntries = errorEntriesDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides statistics about a dataset. For more information, see [DescribeDataset].
    public struct DatasetStats: Swift.Equatable {
        /// The total number of entries that contain at least one error.
        public var errorEntries: Swift.Int?
        /// The total number of images in the dataset that have labels.
        public var labeledEntries: Swift.Int?
        /// The total number of images in the dataset.
        public var totalEntries: Swift.Int?
        /// The total number of labels declared in the dataset.
        public var totalLabels: Swift.Int?

        public init (
            errorEntries: Swift.Int? = nil,
            labeledEntries: Swift.Int? = nil,
            totalEntries: Swift.Int? = nil,
            totalLabels: Swift.Int? = nil
        )
        {
            self.errorEntries = errorEntries
            self.labeledEntries = labeledEntries
            self.totalEntries = totalEntries
            self.totalLabels = totalLabels
        }
    }

}

extension RekognitionClientTypes {
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatus(rawValue: rawValue) ?? DatasetStatus.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes {
    public enum DatasetStatusMessageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clientError
        case serviceError
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatusMessageCode] {
            return [
                .clientError,
                .serviceError,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serviceError: return "SERVICE_ERROR"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatusMessageCode(rawValue: rawValue) ?? DatasetStatusMessageCode.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes {
    public enum DatasetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case test
        case train
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetType] {
            return [
                .test,
                .train,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .test: return "TEST"
            case .train: return "TRAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetType(rawValue: rawValue) ?? DatasetType.sdkUnknown(rawValue)
        }
    }
}

extension DeleteCollectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
    }
}

extension DeleteCollectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCollectionInput: Swift.Equatable {
    /// ID of the collection to delete.
    /// This member is required.
    public var collectionId: Swift.String?

    public init (
        collectionId: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
    }
}

struct DeleteCollectionInputBody: Swift.Equatable {
    let collectionId: Swift.String?
}

extension DeleteCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
    }
}

extension DeleteCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCollectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteCollectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.statusCode = output.statusCode
        } else {
            self.statusCode = nil
        }
    }
}

public struct DeleteCollectionOutputResponse: Swift.Equatable {
    /// HTTP status code that indicates the result of the operation.
    public var statusCode: Swift.Int?

    public init (
        statusCode: Swift.Int? = nil
    )
    {
        self.statusCode = statusCode
    }
}

struct DeleteCollectionOutputResponseBody: Swift.Equatable {
    let statusCode: Swift.Int?
}

extension DeleteCollectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statusCode = "StatusCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
    }
}

extension DeleteDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
    }
}

extension DeleteDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDatasetInput: Swift.Equatable {
    /// The ARN of the Amazon Rekognition Custom Labels dataset that you want to delete.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init (
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

struct DeleteDatasetInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
}

extension DeleteDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
    }
}

extension DeleteDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatasetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceIds = "FaceIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceIds = faceIds {
            var faceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faceIds)
            for faceid0 in faceIds {
                try faceIdsContainer.encode(faceid0)
            }
        }
    }
}

extension DeleteFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFacesInput: Swift.Equatable {
    /// Collection from which to remove the specific faces.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of face IDs to delete.
    /// This member is required.
    public var faceIds: [Swift.String]?

    public init (
        collectionId: Swift.String? = nil,
        faceIds: [Swift.String]? = nil
    )
    {
        self.collectionId = collectionId
        self.faceIds = faceIds
    }
}

struct DeleteFacesInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let faceIds: [Swift.String]?
}

extension DeleteFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceIds = "FaceIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let faceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faceIds)
        var faceIdsDecoded0:[Swift.String]? = nil
        if let faceIdsContainer = faceIdsContainer {
            faceIdsDecoded0 = [Swift.String]()
            for string0 in faceIdsContainer {
                if let string0 = string0 {
                    faceIdsDecoded0?.append(string0)
                }
            }
        }
        faceIds = faceIdsDecoded0
    }
}

extension DeleteFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deletedFaces = output.deletedFaces
        } else {
            self.deletedFaces = nil
        }
    }
}

public struct DeleteFacesOutputResponse: Swift.Equatable {
    /// An array of strings (face IDs) of the faces that were deleted.
    public var deletedFaces: [Swift.String]?

    public init (
        deletedFaces: [Swift.String]? = nil
    )
    {
        self.deletedFaces = deletedFaces
    }
}

struct DeleteFacesOutputResponseBody: Swift.Equatable {
    let deletedFaces: [Swift.String]?
}

extension DeleteFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletedFaces = "DeletedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deletedFacesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deletedFaces)
        var deletedFacesDecoded0:[Swift.String]? = nil
        if let deletedFacesContainer = deletedFacesContainer {
            deletedFacesDecoded0 = [Swift.String]()
            for string0 in deletedFacesContainer {
                if let string0 = string0 {
                    deletedFacesDecoded0?.append(string0)
                }
            }
        }
        deletedFaces = deletedFacesDecoded0
    }
}

extension DeleteProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }
}

extension DeleteProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteProjectInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the project that you want to delete.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

struct DeleteProjectInputBody: Swift.Equatable {
    let projectArn: Swift.String?
}

extension DeleteProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
    }
}

extension DeleteProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteProjectOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct DeleteProjectOutputResponse: Swift.Equatable {
    /// The current status of the delete project operation.
    public var status: RekognitionClientTypes.ProjectStatus?

    public init (
        status: RekognitionClientTypes.ProjectStatus? = nil
    )
    {
        self.status = status
    }
}

struct DeleteProjectOutputResponseBody: Swift.Equatable {
    let status: RekognitionClientTypes.ProjectStatus?
}

extension DeleteProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DeleteProjectPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case policyRevisionId = "PolicyRevisionId"
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }
}

extension DeleteProjectPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteProjectPolicyInput: Swift.Equatable {
    /// The name of the policy that you want to delete.
    /// This member is required.
    public var policyName: Swift.String?
    /// The ID of the project policy revision that you want to delete.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that the project policy you want to delete is attached to.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.policyRevisionId = policyRevisionId
        self.projectArn = projectArn
    }
}

struct DeleteProjectPolicyInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let policyName: Swift.String?
    let policyRevisionId: Swift.String?
}

extension DeleteProjectPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case policyRevisionId = "PolicyRevisionId"
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension DeleteProjectPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProjectPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPolicyRevisionIdException" : self = .invalidPolicyRevisionIdException(try InvalidPolicyRevisionIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteProjectPolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidPolicyRevisionIdException(InvalidPolicyRevisionIdException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProjectPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteProjectPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteProjectVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
    }
}

extension DeleteProjectVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteProjectVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model version that you want to delete.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init (
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

struct DeleteProjectVersionInputBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
}

extension DeleteProjectVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
    }
}

extension DeleteProjectVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProjectVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteProjectVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProjectVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteProjectVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct DeleteProjectVersionOutputResponse: Swift.Equatable {
    /// The status of the deletion operation.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init (
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

struct DeleteProjectVersionOutputResponseBody: Swift.Equatable {
    let status: RekognitionClientTypes.ProjectVersionStatus?
}

extension DeleteProjectVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DeleteStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStreamProcessorInput: Swift.Equatable {
    /// The name of the stream processor you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStreamProcessorOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeCollectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
    }
}

extension DescribeCollectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCollectionInput: Swift.Equatable {
    /// The ID of the collection to describe.
    /// This member is required.
    public var collectionId: Swift.String?

    public init (
        collectionId: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
    }
}

struct DescribeCollectionInputBody: Swift.Equatable {
    let collectionId: Swift.String?
}

extension DescribeCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
    }
}

extension DescribeCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeCollectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeCollectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collectionARN = output.collectionARN
            self.creationTimestamp = output.creationTimestamp
            self.faceCount = output.faceCount
            self.faceModelVersion = output.faceModelVersion
        } else {
            self.collectionARN = nil
            self.creationTimestamp = nil
            self.faceCount = nil
            self.faceModelVersion = nil
        }
    }
}

public struct DescribeCollectionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the collection.
    public var collectionARN: Swift.String?
    /// The number of milliseconds since the Unix epoch time until the creation of the collection. The Unix epoch time is 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970.
    public var creationTimestamp: ClientRuntime.Date?
    /// The number of faces that are indexed into the collection. To index faces into a collection, use [IndexFaces].
    public var faceCount: Swift.Int?
    /// The version of the face model that's used by the collection for face detection. For more information, see Model versioning in the Amazon Rekognition Developer Guide.
    public var faceModelVersion: Swift.String?

    public init (
        collectionARN: Swift.String? = nil,
        creationTimestamp: ClientRuntime.Date? = nil,
        faceCount: Swift.Int? = nil,
        faceModelVersion: Swift.String? = nil
    )
    {
        self.collectionARN = collectionARN
        self.creationTimestamp = creationTimestamp
        self.faceCount = faceCount
        self.faceModelVersion = faceModelVersion
    }
}

struct DescribeCollectionOutputResponseBody: Swift.Equatable {
    let faceCount: Swift.Int?
    let faceModelVersion: Swift.String?
    let collectionARN: Swift.String?
    let creationTimestamp: ClientRuntime.Date?
}

extension DescribeCollectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionARN = "CollectionARN"
        case creationTimestamp = "CreationTimestamp"
        case faceCount = "FaceCount"
        case faceModelVersion = "FaceModelVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .faceCount)
        faceCount = faceCountDecoded
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
        let collectionARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionARN)
        collectionARN = collectionARNDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
    }
}

extension DescribeDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
    }
}

extension DescribeDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDatasetInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dataset that you want to describe.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init (
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

struct DescribeDatasetInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
}

extension DescribeDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
    }
}

extension DescribeDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetDescription = output.datasetDescription
        } else {
            self.datasetDescription = nil
        }
    }
}

public struct DescribeDatasetOutputResponse: Swift.Equatable {
    /// The description for the dataset.
    public var datasetDescription: RekognitionClientTypes.DatasetDescription?

    public init (
        datasetDescription: RekognitionClientTypes.DatasetDescription? = nil
    )
    {
        self.datasetDescription = datasetDescription
    }
}

struct DescribeDatasetOutputResponseBody: Swift.Equatable {
    let datasetDescription: RekognitionClientTypes.DatasetDescription?
}

extension DescribeDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetDescription = "DatasetDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetDescriptionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetDescription.self, forKey: .datasetDescription)
        datasetDescription = datasetDescriptionDecoded
    }
}

extension DescribeProjectVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectArn = "ProjectArn"
        case versionNames = "VersionNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let versionNames = versionNames {
            var versionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versionNames)
            for versionname0 in versionNames {
                try versionNamesContainer.encode(versionname0)
            }
        }
    }
}

extension DescribeProjectVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeProjectVersionsInput: Swift.Equatable {
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that contains the models you want to describe.
    /// This member is required.
    public var projectArn: Swift.String?
    /// A list of model version names that you want to describe. You can add up to 10 model version names to the list. If you don't specify a value, all model descriptions are returned. A version name is part of a model (ProjectVersion) ARN. For example, my-model.2020-01-21T09.10.15 is the version name in the following ARN. arn:aws:rekognition:us-east-1:123456789012:project/getting-started/version/my-model.2020-01-21T09.10.15/1234567890123.
    public var versionNames: [Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectArn: Swift.String? = nil,
        versionNames: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectArn = projectArn
        self.versionNames = versionNames
    }
}

struct DescribeProjectVersionsInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let versionNames: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeProjectVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectArn = "ProjectArn"
        case versionNames = "VersionNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let versionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versionNames)
        var versionNamesDecoded0:[Swift.String]? = nil
        if let versionNamesContainer = versionNamesContainer {
            versionNamesDecoded0 = [Swift.String]()
            for string0 in versionNamesContainer {
                if let string0 = string0 {
                    versionNamesDecoded0?.append(string0)
                }
            }
        }
        versionNames = versionNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeProjectVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProjectVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeProjectVersionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProjectVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeProjectVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projectVersionDescriptions = output.projectVersionDescriptions
        } else {
            self.nextToken = nil
            self.projectVersionDescriptions = nil
        }
    }
}

public struct DescribeProjectVersionsOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of model descriptions. The list is sorted by the creation date and time of the model versions, latest to earliest.
    public var projectVersionDescriptions: [RekognitionClientTypes.ProjectVersionDescription]?

    public init (
        nextToken: Swift.String? = nil,
        projectVersionDescriptions: [RekognitionClientTypes.ProjectVersionDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectVersionDescriptions = projectVersionDescriptions
    }
}

struct DescribeProjectVersionsOutputResponseBody: Swift.Equatable {
    let projectVersionDescriptions: [RekognitionClientTypes.ProjectVersionDescription]?
    let nextToken: Swift.String?
}

extension DescribeProjectVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case projectVersionDescriptions = "ProjectVersionDescriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionDescriptionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProjectVersionDescription?].self, forKey: .projectVersionDescriptions)
        var projectVersionDescriptionsDecoded0:[RekognitionClientTypes.ProjectVersionDescription]? = nil
        if let projectVersionDescriptionsContainer = projectVersionDescriptionsContainer {
            projectVersionDescriptionsDecoded0 = [RekognitionClientTypes.ProjectVersionDescription]()
            for structure0 in projectVersionDescriptionsContainer {
                if let structure0 = structure0 {
                    projectVersionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        projectVersionDescriptions = projectVersionDescriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeProjectsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectNames = "ProjectNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectNames = projectNames {
            var projectNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectNames)
            for projectname0 in projectNames {
                try projectNamesContainer.encode(projectname0)
            }
        }
    }
}

extension DescribeProjectsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeProjectsInput: Swift.Equatable {
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of the projects that you want Amazon Rekognition Custom Labels to describe. If you don't specify a value, the response includes descriptions for all the projects in your AWS account.
    public var projectNames: [Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectNames: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectNames = projectNames
    }
}

struct DescribeProjectsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let projectNames: [Swift.String]?
}

extension DescribeProjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectNames = "ProjectNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let projectNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .projectNames)
        var projectNamesDecoded0:[Swift.String]? = nil
        if let projectNamesContainer = projectNamesContainer {
            projectNamesDecoded0 = [Swift.String]()
            for string0 in projectNamesContainer {
                if let string0 = string0 {
                    projectNamesDecoded0?.append(string0)
                }
            }
        }
        projectNames = projectNamesDecoded0
    }
}

extension DescribeProjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeProjectsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeProjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projectDescriptions = output.projectDescriptions
        } else {
            self.nextToken = nil
            self.projectDescriptions = nil
        }
    }
}

public struct DescribeProjectsOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A list of project descriptions. The list is sorted by the date and time the projects are created.
    public var projectDescriptions: [RekognitionClientTypes.ProjectDescription]?

    public init (
        nextToken: Swift.String? = nil,
        projectDescriptions: [RekognitionClientTypes.ProjectDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectDescriptions = projectDescriptions
    }
}

struct DescribeProjectsOutputResponseBody: Swift.Equatable {
    let projectDescriptions: [RekognitionClientTypes.ProjectDescription]?
    let nextToken: Swift.String?
}

extension DescribeProjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case projectDescriptions = "ProjectDescriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectDescriptionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProjectDescription?].self, forKey: .projectDescriptions)
        var projectDescriptionsDecoded0:[RekognitionClientTypes.ProjectDescription]? = nil
        if let projectDescriptionsContainer = projectDescriptionsContainer {
            projectDescriptionsDecoded0 = [RekognitionClientTypes.ProjectDescription]()
            for structure0 in projectDescriptionsContainer {
                if let structure0 = structure0 {
                    projectDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        projectDescriptions = projectDescriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DescribeStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStreamProcessorInput: Swift.Equatable {
    /// Name of the stream processor for which you want information.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DescribeStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DescribeStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStreamProcessorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTimestamp = output.creationTimestamp
            self.dataSharingPreference = output.dataSharingPreference
            self.input = output.input
            self.kmsKeyId = output.kmsKeyId
            self.lastUpdateTimestamp = output.lastUpdateTimestamp
            self.name = output.name
            self.notificationChannel = output.notificationChannel
            self.output = output.output
            self.regionsOfInterest = output.regionsOfInterest
            self.roleArn = output.roleArn
            self.settings = output.settings
            self.status = output.status
            self.statusMessage = output.statusMessage
            self.streamProcessorArn = output.streamProcessorArn
        } else {
            self.creationTimestamp = nil
            self.dataSharingPreference = nil
            self.input = nil
            self.kmsKeyId = nil
            self.lastUpdateTimestamp = nil
            self.name = nil
            self.notificationChannel = nil
            self.output = nil
            self.regionsOfInterest = nil
            self.roleArn = nil
            self.settings = nil
            self.status = nil
            self.statusMessage = nil
            self.streamProcessorArn = nil
        }
    }
}

public struct DescribeStreamProcessorOutputResponse: Swift.Equatable {
    /// Date and time the stream processor was created
    public var creationTimestamp: ClientRuntime.Date?
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream that provides the source streaming video.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors.
    public var kmsKeyId: Swift.String?
    /// The time, in Unix format, the stream processor was last updated. For example, when the stream processor moves from a running state to a failed state, or when the user starts or stops the stream processor.
    public var lastUpdateTimestamp: ClientRuntime.Date?
    /// Name of the stream processor.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream to which Amazon Rekognition Video puts the analysis results.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. This is an optional parameter for label detection stream processors.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// ARN of the IAM role that allows access to the stream processor.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// Current status of the stream processor.
    public var status: RekognitionClientTypes.StreamProcessorStatus?
    /// Detailed status message about the stream processor.
    public var statusMessage: Swift.String?
    /// ARN of the stream processor.
    public var streamProcessorArn: Swift.String?

    public init (
        creationTimestamp: ClientRuntime.Date? = nil,
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        lastUpdateTimestamp: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        status: RekognitionClientTypes.StreamProcessorStatus? = nil,
        statusMessage: Swift.String? = nil,
        streamProcessorArn: Swift.String? = nil
    )
    {
        self.creationTimestamp = creationTimestamp
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.lastUpdateTimestamp = lastUpdateTimestamp
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.status = status
        self.statusMessage = statusMessage
        self.streamProcessorArn = streamProcessorArn
    }
}

struct DescribeStreamProcessorOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let streamProcessorArn: Swift.String?
    let status: RekognitionClientTypes.StreamProcessorStatus?
    let statusMessage: Swift.String?
    let creationTimestamp: ClientRuntime.Date?
    let lastUpdateTimestamp: ClientRuntime.Date?
    let input: RekognitionClientTypes.StreamProcessorInput?
    let output: RekognitionClientTypes.StreamProcessorOutput?
    let roleArn: Swift.String?
    let settings: RekognitionClientTypes.StreamProcessorSettings?
    let notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    let kmsKeyId: Swift.String?
    let regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    let dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
}

extension DescribeStreamProcessorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case dataSharingPreference = "DataSharingPreference"
        case input = "Input"
        case kmsKeyId = "KmsKeyId"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case name = "Name"
        case notificationChannel = "NotificationChannel"
        case output = "Output"
        case regionsOfInterest = "RegionsOfInterest"
        case roleArn = "RoleArn"
        case settings = "Settings"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case streamProcessorArn = "StreamProcessorArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let streamProcessorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamProcessorArn)
        streamProcessorArn = streamProcessorArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let inputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorInput.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorOutput.self, forKey: .output)
        output = outputDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorSettings.self, forKey: .settings)
        settings = settingsDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorNotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let regionsOfInterestContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterest)
        var regionsOfInterestDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestContainer = regionsOfInterestContainer {
            regionsOfInterestDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestContainer {
                if let structure0 = structure0 {
                    regionsOfInterestDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterest = regionsOfInterestDecoded0
        let dataSharingPreferenceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorDataSharingPreference.self, forKey: .dataSharingPreference)
        dataSharingPreference = dataSharingPreferenceDecoded
    }
}

extension DetectCustomLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
        case maxResults = "MaxResults"
        case minConfidence = "MinConfidence"
        case projectVersionArn = "ProjectVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
    }
}

extension DetectCustomLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectCustomLabelsInput: Swift.Equatable {
    /// Provides the input image either as bytes or an S3 object. You pass image bytes to an Amazon Rekognition API operation by using the Bytes property. For example, you would use the Bytes property to pass an image loaded from a local file system. Image bytes passed by using the Bytes property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide. You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the S3Object property. Images stored in an S3 bucket do not need to be base64-encoded. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of results you want the service to return in the response. The service returns the specified number of highest confidence labels ranked from highest confidence to lowest.
    public var maxResults: Swift.Int?
    /// Specifies the minimum confidence level for the labels to return. DetectCustomLabels doesn't return any labels with a confidence value that's lower than this specified value. If you specify a value of 0, DetectCustomLabels returns all labels, regardless of the assumed threshold applied to each label. If you don't specify a value for MinConfidence, DetectCustomLabels returns labels based on the assumed threshold of each label.
    public var minConfidence: Swift.Float?
    /// The ARN of the model version that you want to use.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init (
        image: RekognitionClientTypes.Image? = nil,
        maxResults: Swift.Int? = nil,
        minConfidence: Swift.Float? = nil,
        projectVersionArn: Swift.String? = nil
    )
    {
        self.image = image
        self.maxResults = maxResults
        self.minConfidence = minConfidence
        self.projectVersionArn = projectVersionArn
    }
}

struct DetectCustomLabelsInputBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
    let image: RekognitionClientTypes.Image?
    let maxResults: Swift.Int?
    let minConfidence: Swift.Float?
}

extension DetectCustomLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
        case maxResults = "MaxResults"
        case minConfidence = "MinConfidence"
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
    }
}

extension DetectCustomLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectCustomLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectCustomLabelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectCustomLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectCustomLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customLabels = output.customLabels
        } else {
            self.customLabels = nil
        }
    }
}

public struct DetectCustomLabelsOutputResponse: Swift.Equatable {
    /// An array of custom labels detected in the input image.
    public var customLabels: [RekognitionClientTypes.CustomLabel]?

    public init (
        customLabels: [RekognitionClientTypes.CustomLabel]? = nil
    )
    {
        self.customLabels = customLabels
    }
}

struct DetectCustomLabelsOutputResponseBody: Swift.Equatable {
    let customLabels: [RekognitionClientTypes.CustomLabel]?
}

extension DetectCustomLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customLabels = "CustomLabels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customLabelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.CustomLabel?].self, forKey: .customLabels)
        var customLabelsDecoded0:[RekognitionClientTypes.CustomLabel]? = nil
        if let customLabelsContainer = customLabelsContainer {
            customLabelsDecoded0 = [RekognitionClientTypes.CustomLabel]()
            for structure0 in customLabelsContainer {
                if let structure0 = structure0 {
                    customLabelsDecoded0?.append(structure0)
                }
            }
        }
        customLabels = customLabelsDecoded0
    }
}

extension DetectFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case image = "Image"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attribute0 in attributes {
                try attributesContainer.encode(attribute0.rawValue)
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }
}

extension DetectFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectFacesInput: Swift.Equatable {
    /// An array of facial attributes you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for Attributes or if you specify ["DEFAULT"], the API returns the following subset of facial attributes: BoundingBox, Confidence, Pose, Quality, and Landmarks. If you provide ["ALL"], all facial attributes are returned, but the operation takes longer to complete. If you provide both, ["ALL", "DEFAULT"], the service uses a logical AND operator to determine which attributes to return (in this case, all attributes).
    public var attributes: [RekognitionClientTypes.Attribute]?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init (
        attributes: [RekognitionClientTypes.Attribute]? = nil,
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.attributes = attributes
        self.image = image
    }
}

struct DetectFacesInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
    let attributes: [RekognitionClientTypes.Attribute]?
}

extension DetectFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case image = "Image"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let attributesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Attribute?].self, forKey: .attributes)
        var attributesDecoded0:[RekognitionClientTypes.Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [RekognitionClientTypes.Attribute]()
            for enum0 in attributesContainer {
                if let enum0 = enum0 {
                    attributesDecoded0?.append(enum0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension DetectFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceDetails = output.faceDetails
            self.orientationCorrection = output.orientationCorrection
        } else {
            self.faceDetails = nil
            self.orientationCorrection = nil
        }
    }
}

public struct DetectFacesOutputResponse: Swift.Equatable {
    /// Details of each face found in the image.
    public var faceDetails: [RekognitionClientTypes.FaceDetail]?
    /// The value of OrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?

    public init (
        faceDetails: [RekognitionClientTypes.FaceDetail]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil
    )
    {
        self.faceDetails = faceDetails
        self.orientationCorrection = orientationCorrection
    }
}

struct DetectFacesOutputResponseBody: Swift.Equatable {
    let faceDetails: [RekognitionClientTypes.FaceDetail]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
}

extension DetectFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceDetails = "FaceDetails"
        case orientationCorrection = "OrientationCorrection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceDetailsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceDetail?].self, forKey: .faceDetails)
        var faceDetailsDecoded0:[RekognitionClientTypes.FaceDetail]? = nil
        if let faceDetailsContainer = faceDetailsContainer {
            faceDetailsDecoded0 = [RekognitionClientTypes.FaceDetail]()
            for structure0 in faceDetailsContainer {
                if let structure0 = structure0 {
                    faceDetailsDecoded0?.append(structure0)
                }
            }
        }
        faceDetails = faceDetailsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
    }
}

extension RekognitionClientTypes {
    public enum DetectLabelsFeatureName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case generalLabels
        case imageProperties
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectLabelsFeatureName] {
            return [
                .generalLabels,
                .imageProperties,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .generalLabels: return "GENERAL_LABELS"
            case .imageProperties: return "IMAGE_PROPERTIES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetectLabelsFeatureName(rawValue: rawValue) ?? DetectLabelsFeatureName.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.DetectLabelsImageBackground: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dominantColors = "DominantColors"
        case quality = "Quality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dominantColors = dominantColors {
            var dominantColorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dominantColors)
            for dominantcolor0 in dominantColors {
                try dominantColorsContainer.encode(dominantcolor0)
            }
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let dominantColorsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DominantColor?].self, forKey: .dominantColors)
        var dominantColorsDecoded0:[RekognitionClientTypes.DominantColor]? = nil
        if let dominantColorsContainer = dominantColorsContainer {
            dominantColorsDecoded0 = [RekognitionClientTypes.DominantColor]()
            for structure0 in dominantColorsContainer {
                if let structure0 = structure0 {
                    dominantColorsDecoded0?.append(structure0)
                }
            }
        }
        dominantColors = dominantColorsDecoded0
    }
}

extension RekognitionClientTypes {
    /// The background of the image with regard to image quality and dominant colors.
    public struct DetectLabelsImageBackground: Swift.Equatable {
        /// The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// The quality of the image background as defined by brightness and sharpness.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init (
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.dominantColors = dominantColors
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes.DetectLabelsImageForeground: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dominantColors = "DominantColors"
        case quality = "Quality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dominantColors = dominantColors {
            var dominantColorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dominantColors)
            for dominantcolor0 in dominantColors {
                try dominantColorsContainer.encode(dominantcolor0)
            }
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let dominantColorsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DominantColor?].self, forKey: .dominantColors)
        var dominantColorsDecoded0:[RekognitionClientTypes.DominantColor]? = nil
        if let dominantColorsContainer = dominantColorsContainer {
            dominantColorsDecoded0 = [RekognitionClientTypes.DominantColor]()
            for structure0 in dominantColorsContainer {
                if let structure0 = structure0 {
                    dominantColorsDecoded0?.append(structure0)
                }
            }
        }
        dominantColors = dominantColorsDecoded0
    }
}

extension RekognitionClientTypes {
    /// The foreground of the image with regard to image quality and dominant colors.
    public struct DetectLabelsImageForeground: Swift.Equatable {
        /// The dominant colors found in the foreground of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// The quality of the image foreground as defined by brightness and sharpness.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init (
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.dominantColors = dominantColors
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes.DetectLabelsImageProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case background = "Background"
        case dominantColors = "DominantColors"
        case foreground = "Foreground"
        case quality = "Quality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let background = self.background {
            try encodeContainer.encode(background, forKey: .background)
        }
        if let dominantColors = dominantColors {
            var dominantColorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dominantColors)
            for dominantcolor0 in dominantColors {
                try dominantColorsContainer.encode(dominantcolor0)
            }
        }
        if let foreground = self.foreground {
            try encodeContainer.encode(foreground, forKey: .foreground)
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let dominantColorsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DominantColor?].self, forKey: .dominantColors)
        var dominantColorsDecoded0:[RekognitionClientTypes.DominantColor]? = nil
        if let dominantColorsContainer = dominantColorsContainer {
            dominantColorsDecoded0 = [RekognitionClientTypes.DominantColor]()
            for structure0 in dominantColorsContainer {
                if let structure0 = structure0 {
                    dominantColorsDecoded0?.append(structure0)
                }
            }
        }
        dominantColors = dominantColorsDecoded0
        let foregroundDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageForeground.self, forKey: .foreground)
        foreground = foregroundDecoded
        let backgroundDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageBackground.self, forKey: .background)
        background = backgroundDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about the quality and dominant colors of an input image. Quality and color information is returned for the entire image, foreground, and background.
    public struct DetectLabelsImageProperties: Swift.Equatable {
        /// Information about the properties of an image’s background, including the background’s quality and dominant colors, including the quality and dominant colors of the image.
        public var background: RekognitionClientTypes.DetectLabelsImageBackground?
        /// Information about the dominant colors found in an image, described with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).
        public var dominantColors: [RekognitionClientTypes.DominantColor]?
        /// Information about the properties of an image’s foreground, including the foreground’s quality and dominant colors, including the quality and dominant colors of the image.
        public var foreground: RekognitionClientTypes.DetectLabelsImageForeground?
        /// Information about the quality of the image foreground as defined by brightness, sharpness, and contrast. The higher the value the greater the brightness, sharpness, and contrast respectively.
        public var quality: RekognitionClientTypes.DetectLabelsImageQuality?

        public init (
            background: RekognitionClientTypes.DetectLabelsImageBackground? = nil,
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil,
            foreground: RekognitionClientTypes.DetectLabelsImageForeground? = nil,
            quality: RekognitionClientTypes.DetectLabelsImageQuality? = nil
        )
        {
            self.background = background
            self.dominantColors = dominantColors
            self.foreground = foreground
            self.quality = quality
        }
    }

}

extension RekognitionClientTypes.DetectLabelsImagePropertiesSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxDominantColors = "MaxDominantColors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxDominantColors != 0 {
            try encodeContainer.encode(maxDominantColors, forKey: .maxDominantColors)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxDominantColorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDominantColors) ?? 0
        maxDominantColors = maxDominantColorsDecoded
    }
}

extension RekognitionClientTypes {
    /// Settings for the IMAGE_PROPERTIES feature type.
    public struct DetectLabelsImagePropertiesSettings: Swift.Equatable {
        /// The maximum number of dominant colors to return when detecting labels in an image. The default value is 10.
        public var maxDominantColors: Swift.Int

        public init (
            maxDominantColors: Swift.Int = 0
        )
        {
            self.maxDominantColors = maxDominantColors
        }
    }

}

extension RekognitionClientTypes.DetectLabelsImageQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brightness = "Brightness"
        case contrast = "Contrast"
        case sharpness = "Sharpness"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brightness = self.brightness {
            try encodeContainer.encode(brightness, forKey: .brightness)
        }
        if let contrast = self.contrast {
            try encodeContainer.encode(contrast, forKey: .contrast)
        }
        if let sharpness = self.sharpness {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brightnessDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .brightness)
        brightness = brightnessDecoded
        let sharpnessDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let contrastDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .contrast)
        contrast = contrastDecoded
    }
}

extension RekognitionClientTypes {
    /// The quality of an image provided for label detection, with regard to brightness, sharpness, and contrast.
    public struct DetectLabelsImageQuality: Swift.Equatable {
        /// The brightness of an image provided for label detection.
        public var brightness: Swift.Float?
        /// The contrast of an image provided for label detection.
        public var contrast: Swift.Float?
        /// The sharpness of an image provided for label detection.
        public var sharpness: Swift.Float?

        public init (
            brightness: Swift.Float? = nil,
            contrast: Swift.Float? = nil,
            sharpness: Swift.Float? = nil
        )
        {
            self.brightness = brightness
            self.contrast = contrast
            self.sharpness = sharpness
        }
    }

}

extension DetectLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case features = "Features"
        case image = "Image"
        case maxLabels = "MaxLabels"
        case minConfidence = "MinConfidence"
        case settings = "Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let features = features {
            var featuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .features)
            for detectlabelsfeaturename0 in features {
                try featuresContainer.encode(detectlabelsfeaturename0.rawValue)
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxLabels = self.maxLabels {
            try encodeContainer.encode(maxLabels, forKey: .maxLabels)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }
}

extension DetectLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectLabelsInput: Swift.Equatable {
    /// A list of the types of analysis to perform. Specifying GENERAL_LABELS uses the label detection feature, while specifying IMAGE_PROPERTIES returns information regarding image color and quality. If no option is specified GENERAL_LABELS is used by default.
    public var features: [RekognitionClientTypes.DetectLabelsFeatureName]?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes is not supported. Images stored in an S3 Bucket do not need to be base64-encoded. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels.
    public var maxLabels: Swift.Int?
    /// Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value. If MinConfidence is not specified, the operation returns labels with a confidence values greater than or equal to 55 percent.
    public var minConfidence: Swift.Float?
    /// A list of the filters to be applied to returned detected labels and image properties. Specified filters can be inclusive, exclusive, or a combination of both. Filters can be used for individual labels or label categories. The exact label names or label categories must be supplied. For a full list of labels and label categories, see LINK HERE.
    public var settings: RekognitionClientTypes.DetectLabelsSettings?

    public init (
        features: [RekognitionClientTypes.DetectLabelsFeatureName]? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxLabels: Swift.Int? = nil,
        minConfidence: Swift.Float? = nil,
        settings: RekognitionClientTypes.DetectLabelsSettings? = nil
    )
    {
        self.features = features
        self.image = image
        self.maxLabels = maxLabels
        self.minConfidence = minConfidence
        self.settings = settings
    }
}

struct DetectLabelsInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
    let maxLabels: Swift.Int?
    let minConfidence: Swift.Float?
    let features: [RekognitionClientTypes.DetectLabelsFeatureName]?
    let settings: RekognitionClientTypes.DetectLabelsSettings?
}

extension DetectLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case features = "Features"
        case image = "Image"
        case maxLabels = "MaxLabels"
        case minConfidence = "MinConfidence"
        case settings = "Settings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let maxLabelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLabels)
        maxLabels = maxLabelsDecoded
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let featuresContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DetectLabelsFeatureName?].self, forKey: .features)
        var featuresDecoded0:[RekognitionClientTypes.DetectLabelsFeatureName]? = nil
        if let featuresContainer = featuresContainer {
            featuresDecoded0 = [RekognitionClientTypes.DetectLabelsFeatureName]()
            for enum0 in featuresContainer {
                if let enum0 = enum0 {
                    featuresDecoded0?.append(enum0)
                }
            }
        }
        features = featuresDecoded0
        let settingsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsSettings.self, forKey: .settings)
        settings = settingsDecoded
    }
}

extension DetectLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectLabelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imageProperties = output.imageProperties
            self.labelModelVersion = output.labelModelVersion
            self.labels = output.labels
            self.orientationCorrection = output.orientationCorrection
        } else {
            self.imageProperties = nil
            self.labelModelVersion = nil
            self.labels = nil
            self.orientationCorrection = nil
        }
    }
}

public struct DetectLabelsOutputResponse: Swift.Equatable {
    /// Information about the properties of the input image, such as brightness, sharpness, contrast, and dominant colors.
    public var imageProperties: RekognitionClientTypes.DetectLabelsImageProperties?
    /// Version number of the label detection model that was used to detect labels.
    public var labelModelVersion: Swift.String?
    /// An array of labels for the real-world objects detected.
    public var labels: [RekognitionClientTypes.Label]?
    /// The value of OrientationCorrection is always null. If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction. The bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. Amazon Rekognition doesn’t perform image correction for images in .png format and .jpeg images without orientation information in the image Exif metadata. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?

    public init (
        imageProperties: RekognitionClientTypes.DetectLabelsImageProperties? = nil,
        labelModelVersion: Swift.String? = nil,
        labels: [RekognitionClientTypes.Label]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil
    )
    {
        self.imageProperties = imageProperties
        self.labelModelVersion = labelModelVersion
        self.labels = labels
        self.orientationCorrection = orientationCorrection
    }
}

struct DetectLabelsOutputResponseBody: Swift.Equatable {
    let labels: [RekognitionClientTypes.Label]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let labelModelVersion: Swift.String?
    let imageProperties: RekognitionClientTypes.DetectLabelsImageProperties?
}

extension DetectLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageProperties = "ImageProperties"
        case labelModelVersion = "LabelModelVersion"
        case labels = "Labels"
        case orientationCorrection = "OrientationCorrection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Label?].self, forKey: .labels)
        var labelsDecoded0:[RekognitionClientTypes.Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [RekognitionClientTypes.Label]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
        let labelModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelModelVersion)
        labelModelVersion = labelModelVersionDecoded
        let imagePropertiesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImageProperties.self, forKey: .imageProperties)
        imageProperties = imagePropertiesDecoded
    }
}

extension RekognitionClientTypes.DetectLabelsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generalLabels = "GeneralLabels"
        case imageProperties = "ImageProperties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let generalLabels = self.generalLabels {
            try encodeContainer.encode(generalLabels, forKey: .generalLabels)
        }
        if let imageProperties = self.imageProperties {
            try encodeContainer.encode(imageProperties, forKey: .imageProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let generalLabelsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GeneralLabelsSettings.self, forKey: .generalLabels)
        generalLabels = generalLabelsDecoded
        let imagePropertiesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectLabelsImagePropertiesSettings.self, forKey: .imageProperties)
        imageProperties = imagePropertiesDecoded
    }
}

extension RekognitionClientTypes {
    /// Settings for the DetectLabels request. Settings can include filters for both GENERAL_LABELS and IMAGE_PROPERTIES. GENERAL_LABELS filters can be inclusive or exclusive and applied to individual labels or label categories. IMAGE_PROPERTIES filters allow specification of a maximum number of dominant colors.
    public struct DetectLabelsSettings: Swift.Equatable {
        /// Contains the specified filters for GENERAL_LABELS.
        public var generalLabels: RekognitionClientTypes.GeneralLabelsSettings?
        /// Contains the chosen number of maximum dominant colors in an image.
        public var imageProperties: RekognitionClientTypes.DetectLabelsImagePropertiesSettings?

        public init (
            generalLabels: RekognitionClientTypes.GeneralLabelsSettings? = nil,
            imageProperties: RekognitionClientTypes.DetectLabelsImagePropertiesSettings? = nil
        )
        {
            self.generalLabels = generalLabels
            self.imageProperties = imageProperties
        }
    }

}

extension DetectModerationLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopConfig = "HumanLoopConfig"
        case image = "Image"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopConfig = self.humanLoopConfig {
            try encodeContainer.encode(humanLoopConfig, forKey: .humanLoopConfig)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }
}

extension DetectModerationLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectModerationLabelsInput: Swift.Equatable {
    /// Sets up the configuration for human evaluation, including the FlowDefinition the image will be sent to.
    public var humanLoopConfig: RekognitionClientTypes.HumanLoopConfig?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. If you don't specify MinConfidence, the operation returns labels with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?

    public init (
        humanLoopConfig: RekognitionClientTypes.HumanLoopConfig? = nil,
        image: RekognitionClientTypes.Image? = nil,
        minConfidence: Swift.Float? = nil
    )
    {
        self.humanLoopConfig = humanLoopConfig
        self.image = image
        self.minConfidence = minConfidence
    }
}

struct DetectModerationLabelsInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
    let minConfidence: Swift.Float?
    let humanLoopConfig: RekognitionClientTypes.HumanLoopConfig?
}

extension DetectModerationLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopConfig = "HumanLoopConfig"
        case image = "Image"
        case minConfidence = "MinConfidence"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let humanLoopConfigDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.HumanLoopConfig.self, forKey: .humanLoopConfig)
        humanLoopConfig = humanLoopConfigDecoded
    }
}

extension DetectModerationLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectModerationLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HumanLoopQuotaExceededException" : self = .humanLoopQuotaExceededException(try HumanLoopQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectModerationLabelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case humanLoopQuotaExceededException(HumanLoopQuotaExceededException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectModerationLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectModerationLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.humanLoopActivationOutput = output.humanLoopActivationOutput
            self.moderationLabels = output.moderationLabels
            self.moderationModelVersion = output.moderationModelVersion
        } else {
            self.humanLoopActivationOutput = nil
            self.moderationLabels = nil
            self.moderationModelVersion = nil
        }
    }
}

public struct DetectModerationLabelsOutputResponse: Swift.Equatable {
    /// Shows the results of the human in the loop evaluation.
    public var humanLoopActivationOutput: RekognitionClientTypes.HumanLoopActivationOutput?
    /// Array of detected Moderation labels and the time, in milliseconds from the start of the video, they were detected.
    public var moderationLabels: [RekognitionClientTypes.ModerationLabel]?
    /// Version number of the moderation detection model that was used to detect unsafe content.
    public var moderationModelVersion: Swift.String?

    public init (
        humanLoopActivationOutput: RekognitionClientTypes.HumanLoopActivationOutput? = nil,
        moderationLabels: [RekognitionClientTypes.ModerationLabel]? = nil,
        moderationModelVersion: Swift.String? = nil
    )
    {
        self.humanLoopActivationOutput = humanLoopActivationOutput
        self.moderationLabels = moderationLabels
        self.moderationModelVersion = moderationModelVersion
    }
}

struct DetectModerationLabelsOutputResponseBody: Swift.Equatable {
    let moderationLabels: [RekognitionClientTypes.ModerationLabel]?
    let moderationModelVersion: Swift.String?
    let humanLoopActivationOutput: RekognitionClientTypes.HumanLoopActivationOutput?
}

extension DetectModerationLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopActivationOutput = "HumanLoopActivationOutput"
        case moderationLabels = "ModerationLabels"
        case moderationModelVersion = "ModerationModelVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let moderationLabelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ModerationLabel?].self, forKey: .moderationLabels)
        var moderationLabelsDecoded0:[RekognitionClientTypes.ModerationLabel]? = nil
        if let moderationLabelsContainer = moderationLabelsContainer {
            moderationLabelsDecoded0 = [RekognitionClientTypes.ModerationLabel]()
            for structure0 in moderationLabelsContainer {
                if let structure0 = structure0 {
                    moderationLabelsDecoded0?.append(structure0)
                }
            }
        }
        moderationLabels = moderationLabelsDecoded0
        let moderationModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .moderationModelVersion)
        moderationModelVersion = moderationModelVersionDecoded
        let humanLoopActivationOutputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.HumanLoopActivationOutput.self, forKey: .humanLoopActivationOutput)
        humanLoopActivationOutput = humanLoopActivationOutputDecoded
    }
}

extension DetectProtectiveEquipmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
        case summarizationAttributes = "SummarizationAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let summarizationAttributes = self.summarizationAttributes {
            try encodeContainer.encode(summarizationAttributes, forKey: .summarizationAttributes)
        }
    }
}

extension DetectProtectiveEquipmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectProtectiveEquipmentInput: Swift.Equatable {
    /// The image in which you want to detect PPE on detected persons. The image can be passed as image bytes or you can reference an image stored in an Amazon S3 bucket.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// An array of PPE types that you want to summarize.
    public var summarizationAttributes: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes?

    public init (
        image: RekognitionClientTypes.Image? = nil,
        summarizationAttributes: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes? = nil
    )
    {
        self.image = image
        self.summarizationAttributes = summarizationAttributes
    }
}

struct DetectProtectiveEquipmentInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
    let summarizationAttributes: RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes?
}

extension DetectProtectiveEquipmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
        case summarizationAttributes = "SummarizationAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let summarizationAttributesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes.self, forKey: .summarizationAttributes)
        summarizationAttributes = summarizationAttributesDecoded
    }
}

extension DetectProtectiveEquipmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectProtectiveEquipmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectProtectiveEquipmentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectProtectiveEquipmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectProtectiveEquipmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.persons = output.persons
            self.protectiveEquipmentModelVersion = output.protectiveEquipmentModelVersion
            self.summary = output.summary
        } else {
            self.persons = nil
            self.protectiveEquipmentModelVersion = nil
            self.summary = nil
        }
    }
}

public struct DetectProtectiveEquipmentOutputResponse: Swift.Equatable {
    /// An array of persons detected in the image (including persons not wearing PPE).
    public var persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]?
    /// The version number of the PPE detection model used to detect PPE in the image.
    public var protectiveEquipmentModelVersion: Swift.String?
    /// Summary information for the types of PPE specified in the SummarizationAttributes input parameter.
    public var summary: RekognitionClientTypes.ProtectiveEquipmentSummary?

    public init (
        persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]? = nil,
        protectiveEquipmentModelVersion: Swift.String? = nil,
        summary: RekognitionClientTypes.ProtectiveEquipmentSummary? = nil
    )
    {
        self.persons = persons
        self.protectiveEquipmentModelVersion = protectiveEquipmentModelVersion
        self.summary = summary
    }
}

struct DetectProtectiveEquipmentOutputResponseBody: Swift.Equatable {
    let protectiveEquipmentModelVersion: Swift.String?
    let persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]?
    let summary: RekognitionClientTypes.ProtectiveEquipmentSummary?
}

extension DetectProtectiveEquipmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case persons = "Persons"
        case protectiveEquipmentModelVersion = "ProtectiveEquipmentModelVersion"
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectiveEquipmentModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protectiveEquipmentModelVersion)
        protectiveEquipmentModelVersion = protectiveEquipmentModelVersionDecoded
        let personsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProtectiveEquipmentPerson?].self, forKey: .persons)
        var personsDecoded0:[RekognitionClientTypes.ProtectiveEquipmentPerson]? = nil
        if let personsContainer = personsContainer {
            personsDecoded0 = [RekognitionClientTypes.ProtectiveEquipmentPerson]()
            for structure0 in personsContainer {
                if let structure0 = structure0 {
                    personsDecoded0?.append(structure0)
                }
            }
        }
        persons = personsDecoded0
        let summaryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProtectiveEquipmentSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension RekognitionClientTypes.DetectTextFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionsOfInterest = "RegionsOfInterest"
        case wordFilter = "WordFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionsOfInterest = regionsOfInterest {
            var regionsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterest)
            for regionofinterest0 in regionsOfInterest {
                try regionsOfInterestContainer.encode(regionofinterest0)
            }
        }
        if let wordFilter = self.wordFilter {
            try encodeContainer.encode(wordFilter, forKey: .wordFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wordFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectionFilter.self, forKey: .wordFilter)
        wordFilter = wordFilterDecoded
        let regionsOfInterestContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterest)
        var regionsOfInterestDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestContainer = regionsOfInterestContainer {
            regionsOfInterestDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestContainer {
                if let structure0 = structure0 {
                    regionsOfInterestDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterest = regionsOfInterestDecoded0
    }
}

extension RekognitionClientTypes {
    /// A set of optional parameters that you can use to set the criteria that the text must meet to be included in your response. WordFilter looks at a word’s height, width, and minimum confidence. RegionOfInterest lets you set a specific region of the image to look for text in.
    public struct DetectTextFilters: Swift.Equatable {
        /// A Filter focusing on a certain area of the image. Uses a BoundingBox object to set the region of the image.
        public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
        /// A set of parameters that allow you to filter out certain results from your returned results.
        public var wordFilter: RekognitionClientTypes.DetectionFilter?

        public init (
            regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
            wordFilter: RekognitionClientTypes.DetectionFilter? = nil
        )
        {
            self.regionsOfInterest = regionsOfInterest
            self.wordFilter = wordFilter
        }
    }

}

extension DetectTextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case image = "Image"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }
}

extension DetectTextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectTextInput: Swift.Equatable {
    /// Optional parameters that let you set the criteria that the text must meet to be included in your response.
    public var filters: RekognitionClientTypes.DetectTextFilters?
    /// The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Rekognition operations, you can't pass image bytes. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init (
        filters: RekognitionClientTypes.DetectTextFilters? = nil,
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.filters = filters
        self.image = image
    }
}

struct DetectTextInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
    let filters: RekognitionClientTypes.DetectTextFilters?
}

extension DetectTextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case image = "Image"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectTextFilters.self, forKey: .filters)
        filters = filtersDecoded
    }
}

extension DetectTextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectTextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectTextOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectTextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectTextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.textDetections = output.textDetections
            self.textModelVersion = output.textModelVersion
        } else {
            self.textDetections = nil
            self.textModelVersion = nil
        }
    }
}

public struct DetectTextOutputResponse: Swift.Equatable {
    /// An array of text that was detected in the input image.
    public var textDetections: [RekognitionClientTypes.TextDetection]?
    /// The model version used to detect text.
    public var textModelVersion: Swift.String?

    public init (
        textDetections: [RekognitionClientTypes.TextDetection]? = nil,
        textModelVersion: Swift.String? = nil
    )
    {
        self.textDetections = textDetections
        self.textModelVersion = textModelVersion
    }
}

struct DetectTextOutputResponseBody: Swift.Equatable {
    let textDetections: [RekognitionClientTypes.TextDetection]?
    let textModelVersion: Swift.String?
}

extension DetectTextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textDetections = "TextDetections"
        case textModelVersion = "TextModelVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDetectionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.TextDetection?].self, forKey: .textDetections)
        var textDetectionsDecoded0:[RekognitionClientTypes.TextDetection]? = nil
        if let textDetectionsContainer = textDetectionsContainer {
            textDetectionsDecoded0 = [RekognitionClientTypes.TextDetection]()
            for structure0 in textDetectionsContainer {
                if let structure0 = structure0 {
                    textDetectionsDecoded0?.append(structure0)
                }
            }
        }
        textDetections = textDetectionsDecoded0
        let textModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textModelVersion)
        textModelVersion = textModelVersionDecoded
    }
}

extension RekognitionClientTypes.DetectionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minBoundingBoxHeight = "MinBoundingBoxHeight"
        case minBoundingBoxWidth = "MinBoundingBoxWidth"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minBoundingBoxHeight = self.minBoundingBoxHeight {
            try encodeContainer.encode(minBoundingBoxHeight, forKey: .minBoundingBoxHeight)
        }
        if let minBoundingBoxWidth = self.minBoundingBoxWidth {
            try encodeContainer.encode(minBoundingBoxWidth, forKey: .minBoundingBoxWidth)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let minBoundingBoxHeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minBoundingBoxHeight)
        minBoundingBoxHeight = minBoundingBoxHeightDecoded
        let minBoundingBoxWidthDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minBoundingBoxWidth)
        minBoundingBoxWidth = minBoundingBoxWidthDecoded
    }
}

extension RekognitionClientTypes {
    /// A set of parameters that allow you to filter out certain results from your returned results.
    public struct DetectionFilter: Swift.Equatable {
        /// Sets the minimum height of the word bounding box. Words with bounding box heights lesser than this value will be excluded from the result. Value is relative to the video frame height.
        public var minBoundingBoxHeight: Swift.Float?
        /// Sets the minimum width of the word bounding box. Words with bounding boxes widths lesser than this value will be excluded from the result. Value is relative to the video frame width.
        public var minBoundingBoxWidth: Swift.Float?
        /// Sets the confidence of word detection. Words with detection confidence below this will be excluded from the result. Values should be between 0 and 100. The default MinConfidence is 80.
        public var minConfidence: Swift.Float?

        public init (
            minBoundingBoxHeight: Swift.Float? = nil,
            minBoundingBoxWidth: Swift.Float? = nil,
            minConfidence: Swift.Float? = nil
        )
        {
            self.minBoundingBoxHeight = minBoundingBoxHeight
            self.minBoundingBoxWidth = minBoundingBoxWidth
            self.minConfidence = minConfidence
        }
    }

}

extension RekognitionClientTypes.DistributeDataset: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension RekognitionClientTypes {
    /// A training dataset or a test dataset used in a dataset distribution operation. For more information, see [DistributeDatasetEntries].
    public struct DistributeDataset: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the dataset that you want to use.
        /// This member is required.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension DistributeDatasetEntriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasets = "Datasets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasets = datasets {
            var datasetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .datasets)
            for distributedataset0 in datasets {
                try datasetsContainer.encode(distributedataset0)
            }
        }
    }
}

extension DistributeDatasetEntriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DistributeDatasetEntriesInput: Swift.Equatable {
    /// The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty.
    /// This member is required.
    public var datasets: [RekognitionClientTypes.DistributeDataset]?

    public init (
        datasets: [RekognitionClientTypes.DistributeDataset]? = nil
    )
    {
        self.datasets = datasets
    }
}

struct DistributeDatasetEntriesInputBody: Swift.Equatable {
    let datasets: [RekognitionClientTypes.DistributeDataset]?
}

extension DistributeDatasetEntriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasets = "Datasets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DistributeDataset?].self, forKey: .datasets)
        var datasetsDecoded0:[RekognitionClientTypes.DistributeDataset]? = nil
        if let datasetsContainer = datasetsContainer {
            datasetsDecoded0 = [RekognitionClientTypes.DistributeDataset]()
            for structure0 in datasetsContainer {
                if let structure0 = structure0 {
                    datasetsDecoded0?.append(structure0)
                }
            }
        }
        datasets = datasetsDecoded0
    }
}

extension DistributeDatasetEntriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DistributeDatasetEntriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DistributeDatasetEntriesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DistributeDatasetEntriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DistributeDatasetEntriesOutputResponse: Swift.Equatable {

    public init () { }
}

extension RekognitionClientTypes.DominantColor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blue = "Blue"
        case cssColor = "CSSColor"
        case green = "Green"
        case hexCode = "HexCode"
        case pixelPercent = "PixelPercent"
        case red = "Red"
        case simplifiedColor = "SimplifiedColor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blue = self.blue {
            try encodeContainer.encode(blue, forKey: .blue)
        }
        if let cssColor = self.cssColor {
            try encodeContainer.encode(cssColor, forKey: .cssColor)
        }
        if let green = self.green {
            try encodeContainer.encode(green, forKey: .green)
        }
        if let hexCode = self.hexCode {
            try encodeContainer.encode(hexCode, forKey: .hexCode)
        }
        if let pixelPercent = self.pixelPercent {
            try encodeContainer.encode(pixelPercent, forKey: .pixelPercent)
        }
        if let red = self.red {
            try encodeContainer.encode(red, forKey: .red)
        }
        if let simplifiedColor = self.simplifiedColor {
            try encodeContainer.encode(simplifiedColor, forKey: .simplifiedColor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .red)
        red = redDecoded
        let blueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blue)
        blue = blueDecoded
        let greenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .green)
        green = greenDecoded
        let hexCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hexCode)
        hexCode = hexCodeDecoded
        let cssColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cssColor)
        cssColor = cssColorDecoded
        let simplifiedColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simplifiedColor)
        simplifiedColor = simplifiedColorDecoded
        let pixelPercentDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .pixelPercent)
        pixelPercent = pixelPercentDecoded
    }
}

extension RekognitionClientTypes {
    /// A description of the dominant colors in an image.
    public struct DominantColor: Swift.Equatable {
        /// The Blue RGB value for a dominant color.
        public var blue: Swift.Int?
        /// The CSS color name of a dominant color.
        public var cssColor: Swift.String?
        /// The Green RGB value for a dominant color.
        public var green: Swift.Int?
        /// The Hex code equivalent of the RGB values for a dominant color.
        public var hexCode: Swift.String?
        /// The percentage of image pixels that have a given dominant color.
        public var pixelPercent: Swift.Float?
        /// The Red RGB value for a dominant color.
        public var red: Swift.Int?
        /// One of 12 simplified color names applied to a dominant color.
        public var simplifiedColor: Swift.String?

        public init (
            blue: Swift.Int? = nil,
            cssColor: Swift.String? = nil,
            green: Swift.Int? = nil,
            hexCode: Swift.String? = nil,
            pixelPercent: Swift.Float? = nil,
            red: Swift.Int? = nil,
            simplifiedColor: Swift.String? = nil
        )
        {
            self.blue = blue
            self.cssColor = cssColor
            self.green = green
            self.hexCode = hexCode
            self.pixelPercent = pixelPercent
            self.red = red
            self.simplifiedColor = simplifiedColor
        }
    }

}

extension RekognitionClientTypes.Emotion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.EmotionName.self, forKey: .type)
        type = typeDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// The emotions that appear to be expressed on the face, and the confidence level in the determination. The API is only making a determination of the physical appearance of a person's face. It is not a determination of the person’s internal emotional state and should not be used in such a way. For example, a person pretending to have a sad face might not be sad emotionally.
    public struct Emotion: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Type of emotion detected.
        public var type: RekognitionClientTypes.EmotionName?

        public init (
            confidence: Swift.Float? = nil,
            type: RekognitionClientTypes.EmotionName? = nil
        )
        {
            self.confidence = confidence
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    public enum EmotionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case angry
        case calm
        case confused
        case disgusted
        case fear
        case happy
        case sad
        case surprised
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [EmotionName] {
            return [
                .angry,
                .calm,
                .confused,
                .disgusted,
                .fear,
                .happy,
                .sad,
                .surprised,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .angry: return "ANGRY"
            case .calm: return "CALM"
            case .confused: return "CONFUSED"
            case .disgusted: return "DISGUSTED"
            case .fear: return "FEAR"
            case .happy: return "HAPPY"
            case .sad: return "SAD"
            case .surprised: return "SURPRISED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EmotionName(rawValue: rawValue) ?? EmotionName.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.EquipmentDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case coversBodyPart = "CoversBodyPart"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let coversBodyPart = self.coversBodyPart {
            try encodeContainer.encode(coversBodyPart, forKey: .coversBodyPart)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProtectiveEquipmentType.self, forKey: .type)
        type = typeDecoded
        let coversBodyPartDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.CoversBodyPart.self, forKey: .coversBodyPart)
        coversBodyPart = coversBodyPartDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about an item of Personal Protective Equipment (PPE) detected by [DetectProtectiveEquipment]. For more information, see [DetectProtectiveEquipment].
    public struct EquipmentDetection: Swift.Equatable {
        /// A bounding box surrounding the item of detected PPE.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has that the bounding box (BoundingBox) contains an item of PPE.
        public var confidence: Swift.Float?
        /// Information about the body part covered by the detected PPE.
        public var coversBodyPart: RekognitionClientTypes.CoversBodyPart?
        /// The type of detected PPE.
        public var type: RekognitionClientTypes.ProtectiveEquipmentType?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            coversBodyPart: RekognitionClientTypes.CoversBodyPart? = nil,
            type: RekognitionClientTypes.ProtectiveEquipmentType? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.coversBodyPart = coversBodyPart
            self.type = type
        }
    }

}

extension RekognitionClientTypes.EvaluationResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case f1Score = "F1Score"
        case summary = "Summary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let f1Score = self.f1Score {
            try encodeContainer.encode(f1Score, forKey: .f1Score)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let f1ScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .f1Score)
        f1Score = f1ScoreDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Summary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension RekognitionClientTypes {
    /// The evaluation results for the training of a model.
    public struct EvaluationResult: Swift.Equatable {
        /// The F1 score for the evaluation of all labels. The F1 score metric evaluates the overall precision and recall performance of the model as a single value. A higher value indicates better precision and recall performance. A lower score indicates that precision, recall, or both are performing poorly.
        public var f1Score: Swift.Float?
        /// The S3 bucket that contains the training summary.
        public var summary: RekognitionClientTypes.Summary?

        public init (
            f1Score: Swift.Float? = nil,
            summary: RekognitionClientTypes.Summary? = nil
        )
        {
            self.f1Score = f1Score
            self.summary = summary
        }
    }

}

extension RekognitionClientTypes.EyeOpen: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
    public struct EyeOpen: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the eyes on the face are open.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes.Eyeglasses: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
    public struct Eyeglasses: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is wearing eye glasses or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes.Face: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case externalImageId = "ExternalImageId"
        case faceId = "FaceId"
        case imageId = "ImageId"
        case indexFacesModelVersion = "IndexFacesModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let externalImageId = self.externalImageId {
            try encodeContainer.encode(externalImageId, forKey: .externalImageId)
        }
        if let faceId = self.faceId {
            try encodeContainer.encode(faceId, forKey: .faceId)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let indexFacesModelVersion = self.indexFacesModelVersion {
            try encodeContainer.encode(indexFacesModelVersion, forKey: .indexFacesModelVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceId)
        faceId = faceIdDecoded
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let externalImageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalImageId)
        externalImageId = externalImageIdDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let indexFacesModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFacesModelVersion)
        indexFacesModelVersion = indexFacesModelVersionDecoded
    }
}

extension RekognitionClientTypes {
    /// Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned.
    public struct Face: Swift.Equatable {
        /// Bounding box of the face.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree).
        public var confidence: Swift.Float?
        /// Identifier that you assign to all the faces in the input image.
        public var externalImageId: Swift.String?
        /// Unique identifier that Amazon Rekognition assigns to the face.
        public var faceId: Swift.String?
        /// Unique identifier that Amazon Rekognition assigns to the input image.
        public var imageId: Swift.String?
        /// The version of the face detect and storage model that was used when indexing the face vector.
        public var indexFacesModelVersion: Swift.String?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            externalImageId: Swift.String? = nil,
            faceId: Swift.String? = nil,
            imageId: Swift.String? = nil,
            indexFacesModelVersion: Swift.String? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.externalImageId = externalImageId
            self.faceId = faceId
            self.imageId = imageId
            self.indexFacesModelVersion = indexFacesModelVersion
        }
    }

}

extension RekognitionClientTypes {
    public enum FaceAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case `default`
        case sdkUnknown(Swift.String)

        public static var allCases: [FaceAttributes] {
            return [
                .all,
                .default,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .default: return "DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FaceAttributes(rawValue: rawValue) ?? FaceAttributes.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.FaceDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ageRange = "AgeRange"
        case beard = "Beard"
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case emotions = "Emotions"
        case eyeglasses = "Eyeglasses"
        case eyesOpen = "EyesOpen"
        case gender = "Gender"
        case landmarks = "Landmarks"
        case mouthOpen = "MouthOpen"
        case mustache = "Mustache"
        case pose = "Pose"
        case quality = "Quality"
        case smile = "Smile"
        case sunglasses = "Sunglasses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ageRange = self.ageRange {
            try encodeContainer.encode(ageRange, forKey: .ageRange)
        }
        if let beard = self.beard {
            try encodeContainer.encode(beard, forKey: .beard)
        }
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let emotions = emotions {
            var emotionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emotions)
            for emotion0 in emotions {
                try emotionsContainer.encode(emotion0)
            }
        }
        if let eyeglasses = self.eyeglasses {
            try encodeContainer.encode(eyeglasses, forKey: .eyeglasses)
        }
        if let eyesOpen = self.eyesOpen {
            try encodeContainer.encode(eyesOpen, forKey: .eyesOpen)
        }
        if let gender = self.gender {
            try encodeContainer.encode(gender, forKey: .gender)
        }
        if let landmarks = landmarks {
            var landmarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .landmarks)
            for landmark0 in landmarks {
                try landmarksContainer.encode(landmark0)
            }
        }
        if let mouthOpen = self.mouthOpen {
            try encodeContainer.encode(mouthOpen, forKey: .mouthOpen)
        }
        if let mustache = self.mustache {
            try encodeContainer.encode(mustache, forKey: .mustache)
        }
        if let pose = self.pose {
            try encodeContainer.encode(pose, forKey: .pose)
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
        if let smile = self.smile {
            try encodeContainer.encode(smile, forKey: .smile)
        }
        if let sunglasses = self.sunglasses {
            try encodeContainer.encode(sunglasses, forKey: .sunglasses)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let ageRangeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.AgeRange.self, forKey: .ageRange)
        ageRange = ageRangeDecoded
        let smileDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Smile.self, forKey: .smile)
        smile = smileDecoded
        let eyeglassesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Eyeglasses.self, forKey: .eyeglasses)
        eyeglasses = eyeglassesDecoded
        let sunglassesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Sunglasses.self, forKey: .sunglasses)
        sunglasses = sunglassesDecoded
        let genderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let beardDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Beard.self, forKey: .beard)
        beard = beardDecoded
        let mustacheDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Mustache.self, forKey: .mustache)
        mustache = mustacheDecoded
        let eyesOpenDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.EyeOpen.self, forKey: .eyesOpen)
        eyesOpen = eyesOpenDecoded
        let mouthOpenDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.MouthOpen.self, forKey: .mouthOpen)
        mouthOpen = mouthOpenDecoded
        let emotionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Emotion?].self, forKey: .emotions)
        var emotionsDecoded0:[RekognitionClientTypes.Emotion]? = nil
        if let emotionsContainer = emotionsContainer {
            emotionsDecoded0 = [RekognitionClientTypes.Emotion]()
            for structure0 in emotionsContainer {
                if let structure0 = structure0 {
                    emotionsDecoded0?.append(structure0)
                }
            }
        }
        emotions = emotionsDecoded0
        let landmarksContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Landmark?].self, forKey: .landmarks)
        var landmarksDecoded0:[RekognitionClientTypes.Landmark]? = nil
        if let landmarksContainer = landmarksContainer {
            landmarksDecoded0 = [RekognitionClientTypes.Landmark]()
            for structure0 in landmarksContainer {
                if let structure0 = structure0 {
                    landmarksDecoded0?.append(structure0)
                }
            }
        }
        landmarks = landmarksDecoded0
        let poseDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Pose.self, forKey: .pose)
        pose = poseDecoded
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Structure containing attributes of the face that the algorithm detected. A FaceDetail object contains either the default facial attributes or all facial attributes. The default attributes are BoundingBox, Confidence, Landmarks, Pose, and Quality. [GetFaceDetection] is the only Amazon Rekognition Video stored video operation that can return a FaceDetail object with all attributes. To specify which attributes to return, use the FaceAttributes input parameter for [StartFaceDetection]. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a FaceAttributes input parameter:
    ///
    /// * GetCelebrityRecognition
    ///
    /// * GetPersonTracking
    ///
    /// * GetFaceSearch
    ///
    ///
    /// The Amazon Rekognition Image [DetectFaces] and [IndexFaces] operations can return all facial attributes. To specify which attributes to return, use the Attributes input parameter for DetectFaces. For IndexFaces, use the DetectAttributes input parameter.
    public struct FaceDetail: Swift.Equatable {
        /// The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.
        public var ageRange: RekognitionClientTypes.AgeRange?
        /// Indicates whether or not the face has a beard, and the confidence level in the determination.
        public var beard: RekognitionClientTypes.Beard?
        /// Bounding box of the face. Default attribute.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree). Default attribute.
        public var confidence: Swift.Float?
        /// The emotions that appear to be expressed on the face, and the confidence level in the determination. The API is only making a determination of the physical appearance of a person's face. It is not a determination of the person’s internal emotional state and should not be used in such a way. For example, a person pretending to have a sad face might not be sad emotionally.
        public var emotions: [RekognitionClientTypes.Emotion]?
        /// Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
        public var eyeglasses: RekognitionClientTypes.Eyeglasses?
        /// Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
        public var eyesOpen: RekognitionClientTypes.EyeOpen?
        /// The predicted gender of a detected face.
        public var gender: RekognitionClientTypes.Gender?
        /// Indicates the location of landmarks on the face. Default attribute.
        public var landmarks: [RekognitionClientTypes.Landmark]?
        /// Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
        public var mouthOpen: RekognitionClientTypes.MouthOpen?
        /// Indicates whether or not the face has a mustache, and the confidence level in the determination.
        public var mustache: RekognitionClientTypes.Mustache?
        /// Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.
        public var pose: RekognitionClientTypes.Pose?
        /// Identifies image brightness and sharpness. Default attribute.
        public var quality: RekognitionClientTypes.ImageQuality?
        /// Indicates whether or not the face is smiling, and the confidence level in the determination.
        public var smile: RekognitionClientTypes.Smile?
        /// Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
        public var sunglasses: RekognitionClientTypes.Sunglasses?

        public init (
            ageRange: RekognitionClientTypes.AgeRange? = nil,
            beard: RekognitionClientTypes.Beard? = nil,
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            emotions: [RekognitionClientTypes.Emotion]? = nil,
            eyeglasses: RekognitionClientTypes.Eyeglasses? = nil,
            eyesOpen: RekognitionClientTypes.EyeOpen? = nil,
            gender: RekognitionClientTypes.Gender? = nil,
            landmarks: [RekognitionClientTypes.Landmark]? = nil,
            mouthOpen: RekognitionClientTypes.MouthOpen? = nil,
            mustache: RekognitionClientTypes.Mustache? = nil,
            pose: RekognitionClientTypes.Pose? = nil,
            quality: RekognitionClientTypes.ImageQuality? = nil,
            smile: RekognitionClientTypes.Smile? = nil,
            sunglasses: RekognitionClientTypes.Sunglasses? = nil
        )
        {
            self.ageRange = ageRange
            self.beard = beard
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.emotions = emotions
            self.eyeglasses = eyeglasses
            self.eyesOpen = eyesOpen
            self.gender = gender
            self.landmarks = landmarks
            self.mouthOpen = mouthOpen
            self.mustache = mustache
            self.pose = pose
            self.quality = quality
            self.smile = smile
            self.sunglasses = sunglasses
        }
    }

}

extension RekognitionClientTypes.FaceDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceDetail.self, forKey: .face)
        face = faceDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a face detected in a video analysis request and the time the face was detected in the video.
    public struct FaceDetection: Swift.Equatable {
        /// The face properties for the detected face.
        public var face: RekognitionClientTypes.FaceDetail?
        /// Time, in milliseconds from the start of the video, that the face was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the face first appears.
        public var timestamp: Swift.Int

        public init (
            face: RekognitionClientTypes.FaceDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.face = face
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes.FaceMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case similarity = "Similarity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let similarity = self.similarity {
            try encodeContainer.encode(similarity, forKey: .similarity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let similarityDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .similarity)
        similarity = similarityDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Face.self, forKey: .face)
        face = faceDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides face metadata. In addition, it also provides the confidence in the match of this face with the input face.
    public struct FaceMatch: Swift.Equatable {
        /// Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.
        public var face: RekognitionClientTypes.Face?
        /// Confidence in the match of this face with the input face.
        public var similarity: Swift.Float?

        public init (
            face: RekognitionClientTypes.Face? = nil,
            similarity: Swift.Float? = nil
        )
        {
            self.face = face
            self.similarity = similarity
        }
    }

}

extension RekognitionClientTypes.FaceRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case faceDetail = "FaceDetail"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let faceDetail = self.faceDetail {
            try encodeContainer.encode(faceDetail, forKey: .faceDetail)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Face.self, forKey: .face)
        face = faceDecoded
        let faceDetailDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceDetail.self, forKey: .faceDetail)
        faceDetail = faceDetailDecoded
    }
}

extension RekognitionClientTypes {
    /// Object containing both the face metadata (stored in the backend database), and facial attributes that are detected but aren't stored in the database.
    public struct FaceRecord: Swift.Equatable {
        /// Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned.
        public var face: RekognitionClientTypes.Face?
        /// Structure containing attributes of the face that the algorithm detected.
        public var faceDetail: RekognitionClientTypes.FaceDetail?

        public init (
            face: RekognitionClientTypes.Face? = nil,
            faceDetail: RekognitionClientTypes.FaceDetail? = nil
        )
        {
            self.face = face
            self.faceDetail = faceDetail
        }
    }

}

extension RekognitionClientTypes.FaceSearchSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceMatchThreshold = self.faceMatchThreshold {
            try encodeContainer.encode(faceMatchThreshold, forKey: .faceMatchThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let faceMatchThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .faceMatchThreshold)
        faceMatchThreshold = faceMatchThresholdDecoded
    }
}

extension RekognitionClientTypes {
    /// Input face recognition parameters for an Amazon Rekognition stream processor. Includes the collection to use for face recognition and the face attributes to detect. Defining the settings is required in the request parameter for [CreateStreamProcessor].
    public struct FaceSearchSettings: Swift.Equatable {
        /// The ID of a collection that contains faces that you want to search for.
        public var collectionId: Swift.String?
        /// Minimum face match confidence score that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted, and values lower than 80 are set to 80.
        public var faceMatchThreshold: Swift.Float?

        public init (
            collectionId: Swift.String? = nil,
            faceMatchThreshold: Swift.Float? = nil
        )
        {
            self.collectionId = collectionId
            self.faceMatchThreshold = faceMatchThreshold
        }
    }

}

extension RekognitionClientTypes {
    public enum FaceSearchSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case index
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [FaceSearchSortBy] {
            return [
                .index,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .index: return "INDEX"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FaceSearchSortBy(rawValue: rawValue) ?? FaceSearchSortBy.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.Gender: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let value = self.value {
            try encodeContainer.encode(value.rawValue, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GenderType.self, forKey: .value)
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// The predicted gender of a detected face. Amazon Rekognition makes gender binary (male/female) predictions based on the physical appearance of a face in a particular image. This kind of prediction is not designed to categorize a person’s gender identity, and you shouldn't use Amazon Rekognition to make such a determination. For example, a male actor wearing a long-haired wig and earrings for a role might be predicted as female. Using Amazon Rekognition to make gender binary predictions is best suited for use cases where aggregate gender distribution statistics need to be analyzed without identifying specific users. For example, the percentage of female users compared to male users on a social media platform. We don't recommend using gender binary predictions to make decisions that impact an individual's rights, privacy, or access to services.
    public struct Gender: Swift.Equatable {
        /// Level of confidence in the prediction.
        public var confidence: Swift.Float?
        /// The predicted gender of the face.
        public var value: RekognitionClientTypes.GenderType?

        public init (
            confidence: Swift.Float? = nil,
            value: RekognitionClientTypes.GenderType? = nil
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes {
    public enum GenderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case female
        case male
        case sdkUnknown(Swift.String)

        public static var allCases: [GenderType] {
            return [
                .female,
                .male,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .female: return "Female"
            case .male: return "Male"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GenderType(rawValue: rawValue) ?? GenderType.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.GeneralLabelsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelCategoryExclusionFilters = "LabelCategoryExclusionFilters"
        case labelCategoryInclusionFilters = "LabelCategoryInclusionFilters"
        case labelExclusionFilters = "LabelExclusionFilters"
        case labelInclusionFilters = "LabelInclusionFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelCategoryExclusionFilters = labelCategoryExclusionFilters {
            var labelCategoryExclusionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labelCategoryExclusionFilters)
            for generallabelsfiltervalue0 in labelCategoryExclusionFilters {
                try labelCategoryExclusionFiltersContainer.encode(generallabelsfiltervalue0)
            }
        }
        if let labelCategoryInclusionFilters = labelCategoryInclusionFilters {
            var labelCategoryInclusionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labelCategoryInclusionFilters)
            for generallabelsfiltervalue0 in labelCategoryInclusionFilters {
                try labelCategoryInclusionFiltersContainer.encode(generallabelsfiltervalue0)
            }
        }
        if let labelExclusionFilters = labelExclusionFilters {
            var labelExclusionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labelExclusionFilters)
            for generallabelsfiltervalue0 in labelExclusionFilters {
                try labelExclusionFiltersContainer.encode(generallabelsfiltervalue0)
            }
        }
        if let labelInclusionFilters = labelInclusionFilters {
            var labelInclusionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labelInclusionFilters)
            for generallabelsfiltervalue0 in labelInclusionFilters {
                try labelInclusionFiltersContainer.encode(generallabelsfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelInclusionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labelInclusionFilters)
        var labelInclusionFiltersDecoded0:[Swift.String]? = nil
        if let labelInclusionFiltersContainer = labelInclusionFiltersContainer {
            labelInclusionFiltersDecoded0 = [Swift.String]()
            for string0 in labelInclusionFiltersContainer {
                if let string0 = string0 {
                    labelInclusionFiltersDecoded0?.append(string0)
                }
            }
        }
        labelInclusionFilters = labelInclusionFiltersDecoded0
        let labelExclusionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labelExclusionFilters)
        var labelExclusionFiltersDecoded0:[Swift.String]? = nil
        if let labelExclusionFiltersContainer = labelExclusionFiltersContainer {
            labelExclusionFiltersDecoded0 = [Swift.String]()
            for string0 in labelExclusionFiltersContainer {
                if let string0 = string0 {
                    labelExclusionFiltersDecoded0?.append(string0)
                }
            }
        }
        labelExclusionFilters = labelExclusionFiltersDecoded0
        let labelCategoryInclusionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labelCategoryInclusionFilters)
        var labelCategoryInclusionFiltersDecoded0:[Swift.String]? = nil
        if let labelCategoryInclusionFiltersContainer = labelCategoryInclusionFiltersContainer {
            labelCategoryInclusionFiltersDecoded0 = [Swift.String]()
            for string0 in labelCategoryInclusionFiltersContainer {
                if let string0 = string0 {
                    labelCategoryInclusionFiltersDecoded0?.append(string0)
                }
            }
        }
        labelCategoryInclusionFilters = labelCategoryInclusionFiltersDecoded0
        let labelCategoryExclusionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labelCategoryExclusionFilters)
        var labelCategoryExclusionFiltersDecoded0:[Swift.String]? = nil
        if let labelCategoryExclusionFiltersContainer = labelCategoryExclusionFiltersContainer {
            labelCategoryExclusionFiltersDecoded0 = [Swift.String]()
            for string0 in labelCategoryExclusionFiltersContainer {
                if let string0 = string0 {
                    labelCategoryExclusionFiltersDecoded0?.append(string0)
                }
            }
        }
        labelCategoryExclusionFilters = labelCategoryExclusionFiltersDecoded0
    }
}

extension RekognitionClientTypes {
    /// Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual l abels or entire label categories.
    public struct GeneralLabelsSettings: Swift.Equatable {
        /// The label categories that should be excluded from the return from DetectLabels.
        public var labelCategoryExclusionFilters: [Swift.String]?
        /// The label categories that should be included in the return from DetectLabels.
        public var labelCategoryInclusionFilters: [Swift.String]?
        /// The labels that should be excluded from the return from DetectLabels.
        public var labelExclusionFilters: [Swift.String]?
        /// The labels that should be included in the return from DetectLabels.
        public var labelInclusionFilters: [Swift.String]?

        public init (
            labelCategoryExclusionFilters: [Swift.String]? = nil,
            labelCategoryInclusionFilters: [Swift.String]? = nil,
            labelExclusionFilters: [Swift.String]? = nil,
            labelInclusionFilters: [Swift.String]? = nil
        )
        {
            self.labelCategoryExclusionFilters = labelCategoryExclusionFilters
            self.labelCategoryInclusionFilters = labelCategoryInclusionFilters
            self.labelExclusionFilters = labelExclusionFilters
            self.labelInclusionFilters = labelInclusionFilters
        }
    }

}

extension RekognitionClientTypes.Geometry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case polygon = "Polygon"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let polygon = polygon {
            var polygonContainer = encodeContainer.nestedUnkeyedContainer(forKey: .polygon)
            for point0 in polygon {
                try polygonContainer.encode(point0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let polygonContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Point?].self, forKey: .polygon)
        var polygonDecoded0:[RekognitionClientTypes.Point]? = nil
        if let polygonContainer = polygonContainer {
            polygonDecoded0 = [RekognitionClientTypes.Point]()
            for structure0 in polygonContainer {
                if let structure0 = structure0 {
                    polygonDecoded0?.append(structure0)
                }
            }
        }
        polygon = polygonDecoded0
    }
}

extension RekognitionClientTypes {
    /// Information about where an object ([DetectCustomLabels]) or text ([DetectText]) is located on an image.
    public struct Geometry: Swift.Equatable {
        /// An axis-aligned coarse representation of the detected item's location on the image.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the detected item.
        public var polygon: [RekognitionClientTypes.Point]?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            polygon: [RekognitionClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension GetCelebrityInfoInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension GetCelebrityInfoInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCelebrityInfoInput: Swift.Equatable {
    /// The ID for the celebrity. You get the celebrity ID from a call to the [RecognizeCelebrities] operation, which recognizes celebrities in an image.
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetCelebrityInfoInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension GetCelebrityInfoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetCelebrityInfoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCelebrityInfoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCelebrityInfoOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCelebrityInfoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCelebrityInfoOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.knownGender = output.knownGender
            self.name = output.name
            self.urls = output.urls
        } else {
            self.knownGender = nil
            self.name = nil
            self.urls = nil
        }
    }
}

public struct GetCelebrityInfoOutputResponse: Swift.Equatable {
    /// Retrieves the known gender for the celebrity.
    public var knownGender: RekognitionClientTypes.KnownGender?
    /// The name of the celebrity.
    public var name: Swift.String?
    /// An array of URLs pointing to additional celebrity information.
    public var urls: [Swift.String]?

    public init (
        knownGender: RekognitionClientTypes.KnownGender? = nil,
        name: Swift.String? = nil,
        urls: [Swift.String]? = nil
    )
    {
        self.knownGender = knownGender
        self.name = name
        self.urls = urls
    }
}

struct GetCelebrityInfoOutputResponseBody: Swift.Equatable {
    let urls: [Swift.String]?
    let name: Swift.String?
    let knownGender: RekognitionClientTypes.KnownGender?
}

extension GetCelebrityInfoOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case knownGender = "KnownGender"
        case name = "Name"
        case urls = "Urls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let knownGenderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KnownGender.self, forKey: .knownGender)
        knownGender = knownGenderDecoded
    }
}

extension GetCelebrityRecognitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
    }
}

extension GetCelebrityRecognitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCelebrityRecognitionInput: Swift.Equatable {
    /// Job identifier for the required celebrity recognition analysis. You can get the job identifer from a call to StartCelebrityRecognition.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more recognized celebrities to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of celebrities.
    public var nextToken: Swift.String?
    /// Sort to use for celebrities returned in Celebrities field. Specify ID to sort by the celebrity identifier, specify TIMESTAMP to sort by the time the celebrity was recognized.
    public var sortBy: RekognitionClientTypes.CelebrityRecognitionSortBy?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.CelebrityRecognitionSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

struct GetCelebrityRecognitionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: RekognitionClientTypes.CelebrityRecognitionSortBy?
}

extension GetCelebrityRecognitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.CelebrityRecognitionSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}

extension GetCelebrityRecognitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCelebrityRecognitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCelebrityRecognitionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCelebrityRecognitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCelebrityRecognitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.celebrities = output.celebrities
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.celebrities = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetCelebrityRecognitionOutputResponse: Swift.Equatable {
    /// Array of celebrities recognized in the video.
    public var celebrities: [RekognitionClientTypes.CelebrityRecognition]?
    /// The current status of the celebrity recognition job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of celebrities.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        celebrities: [RekognitionClientTypes.CelebrityRecognition]? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.celebrities = celebrities
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetCelebrityRecognitionOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let nextToken: Swift.String?
    let celebrities: [RekognitionClientTypes.CelebrityRecognition]?
}

extension GetCelebrityRecognitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case celebrities = "Celebrities"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let celebritiesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.CelebrityRecognition?].self, forKey: .celebrities)
        var celebritiesDecoded0:[RekognitionClientTypes.CelebrityRecognition]? = nil
        if let celebritiesContainer = celebritiesContainer {
            celebritiesDecoded0 = [RekognitionClientTypes.CelebrityRecognition]()
            for structure0 in celebritiesContainer {
                if let structure0 = structure0 {
                    celebritiesDecoded0?.append(structure0)
                }
            }
        }
        celebrities = celebritiesDecoded0
    }
}

extension GetContentModerationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
    }
}

extension GetContentModerationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContentModerationInput: Swift.Equatable {
    /// The identifier for the inappropriate, unwanted, or offensive content moderation job. Use JobId to identify the job in a subsequent call to GetContentModeration.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the ModerationLabelDetections array. Use TIMESTAMP to sort array elements by the time labels are detected. Use NAME to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.ContentModerationSortBy?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.ContentModerationSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

struct GetContentModerationInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: RekognitionClientTypes.ContentModerationSortBy?
}

extension GetContentModerationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ContentModerationSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}

extension GetContentModerationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContentModerationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContentModerationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContentModerationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContentModerationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobStatus = output.jobStatus
            self.moderationLabels = output.moderationLabels
            self.moderationModelVersion = output.moderationModelVersion
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.jobStatus = nil
            self.moderationLabels = nil
            self.moderationModelVersion = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetContentModerationOutputResponse: Swift.Equatable {
    /// The current status of the content moderation analysis job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// The detected inappropriate, unwanted, or offensive content moderation labels and the time(s) they were detected.
    public var moderationLabels: [RekognitionClientTypes.ContentModerationDetection]?
    /// Version number of the moderation detection model that was used to detect inappropriate, unwanted, or offensive content.
    public var moderationModelVersion: Swift.String?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of content moderation labels.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from GetContentModeration.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        moderationLabels: [RekognitionClientTypes.ContentModerationDetection]? = nil,
        moderationModelVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobStatus = jobStatus
        self.moderationLabels = moderationLabels
        self.moderationModelVersion = moderationModelVersion
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetContentModerationOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let moderationLabels: [RekognitionClientTypes.ContentModerationDetection]?
    let nextToken: Swift.String?
    let moderationModelVersion: Swift.String?
}

extension GetContentModerationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobStatus = "JobStatus"
        case moderationLabels = "ModerationLabels"
        case moderationModelVersion = "ModerationModelVersion"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let moderationLabelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ContentModerationDetection?].self, forKey: .moderationLabels)
        var moderationLabelsDecoded0:[RekognitionClientTypes.ContentModerationDetection]? = nil
        if let moderationLabelsContainer = moderationLabelsContainer {
            moderationLabelsDecoded0 = [RekognitionClientTypes.ContentModerationDetection]()
            for structure0 in moderationLabelsContainer {
                if let structure0 = structure0 {
                    moderationLabelsDecoded0?.append(structure0)
                }
            }
        }
        moderationLabels = moderationLabelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let moderationModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .moderationModelVersion)
        moderationModelVersion = moderationModelVersionDecoded
    }
}

extension GetFaceDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetFaceDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetFaceDetectionInput: Swift.Equatable {
    /// Unique identifier for the face detection job. The JobId is returned from StartFaceDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more faces to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetFaceDetectionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetFaceDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetFaceDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetFaceDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetFaceDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetFaceDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetFaceDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faces = output.faces
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.faces = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetFaceDetectionOutputResponse: Swift.Equatable {
    /// An array of faces detected in the video. Each element contains a detected face's details and the time, in milliseconds from the start of the video, the face was detected.
    public var faces: [RekognitionClientTypes.FaceDetection]?
    /// The current status of the face detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        faces: [RekognitionClientTypes.FaceDetection]? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.faces = faces
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetFaceDetectionOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let nextToken: Swift.String?
    let faces: [RekognitionClientTypes.FaceDetection]?
}

extension GetFaceDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faces = "Faces"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let facesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceDetection?].self, forKey: .faces)
        var facesDecoded0:[RekognitionClientTypes.FaceDetection]? = nil
        if let facesContainer = facesContainer {
            facesDecoded0 = [RekognitionClientTypes.FaceDetection]()
            for structure0 in facesContainer {
                if let structure0 = structure0 {
                    facesDecoded0?.append(structure0)
                }
            }
        }
        faces = facesDecoded0
    }
}

extension GetFaceSearchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
    }
}

extension GetFaceSearchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetFaceSearchInput: Swift.Equatable {
    /// The job identifer for the search request. You get the job identifier from an initial call to StartFaceSearch.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more search results to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of search results.
    public var nextToken: Swift.String?
    /// Sort to use for grouping faces in the response. Use TIMESTAMP to group faces by the time that they are recognized. Use INDEX to sort by recognized faces.
    public var sortBy: RekognitionClientTypes.FaceSearchSortBy?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.FaceSearchSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

struct GetFaceSearchInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: RekognitionClientTypes.FaceSearchSortBy?
}

extension GetFaceSearchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceSearchSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}

extension GetFaceSearchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetFaceSearchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetFaceSearchOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetFaceSearchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetFaceSearchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.persons = output.persons
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.jobStatus = nil
            self.nextToken = nil
            self.persons = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetFaceSearchOutputResponse: Swift.Equatable {
    /// The current status of the face search job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of search results.
    public var nextToken: Swift.String?
    /// An array of persons, [PersonMatch], in the video whose face(s) match the face(s) in an Amazon Rekognition collection. It also includes time information for when persons are matched in the video. You specify the input collection in an initial call to StartFaceSearch. Each Persons element includes a time the person was matched, face match details (FaceMatches) for matching faces in the collection, and person information (Person) for the matched person.
    public var persons: [RekognitionClientTypes.PersonMatch]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        persons: [RekognitionClientTypes.PersonMatch]? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.persons = persons
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetFaceSearchOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let nextToken: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let persons: [RekognitionClientTypes.PersonMatch]?
}

extension GetFaceSearchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case persons = "Persons"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let personsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.PersonMatch?].self, forKey: .persons)
        var personsDecoded0:[RekognitionClientTypes.PersonMatch]? = nil
        if let personsContainer = personsContainer {
            personsDecoded0 = [RekognitionClientTypes.PersonMatch]()
            for structure0 in personsContainer {
                if let structure0 = structure0 {
                    personsDecoded0?.append(structure0)
                }
            }
        }
        persons = personsDecoded0
    }
}

extension GetLabelDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateBy = "AggregateBy"
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateBy = self.aggregateBy {
            try encodeContainer.encode(aggregateBy.rawValue, forKey: .aggregateBy)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
    }
}

extension GetLabelDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLabelDetectionInput: Swift.Equatable {
    /// Defines how to aggregate the returned results. Results can be aggregated by timestamps or segments.
    public var aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy?
    /// Job identifier for the label detection operation for which you want results returned. You get the job identifer from an initial call to StartlabelDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of labels.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the Labels array. Use TIMESTAMP to sort array elements by the time labels are detected. Use NAME to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.LabelDetectionSortBy?

    public init (
        aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy? = nil,
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.LabelDetectionSortBy? = nil
    )
    {
        self.aggregateBy = aggregateBy
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

struct GetLabelDetectionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: RekognitionClientTypes.LabelDetectionSortBy?
    let aggregateBy: RekognitionClientTypes.LabelDetectionAggregateBy?
}

extension GetLabelDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateBy = "AggregateBy"
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.LabelDetectionSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let aggregateByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.LabelDetectionAggregateBy.self, forKey: .aggregateBy)
        aggregateBy = aggregateByDecoded
    }
}

extension GetLabelDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLabelDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLabelDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLabelDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLabelDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobStatus = output.jobStatus
            self.labelModelVersion = output.labelModelVersion
            self.labels = output.labels
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.jobStatus = nil
            self.labelModelVersion = nil
            self.labels = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetLabelDetectionOutputResponse: Swift.Equatable {
    /// The current status of the label detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// Version number of the label detection model that was used to detect labels.
    public var labelModelVersion: Swift.String?
    /// An array of labels detected in the video. Each element contains the detected label and the time, in milliseconds from the start of the video, that the label was detected.
    public var labels: [RekognitionClientTypes.LabelDetection]?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of labels.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        labelModelVersion: Swift.String? = nil,
        labels: [RekognitionClientTypes.LabelDetection]? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobStatus = jobStatus
        self.labelModelVersion = labelModelVersion
        self.labels = labels
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetLabelDetectionOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let nextToken: Swift.String?
    let labels: [RekognitionClientTypes.LabelDetection]?
    let labelModelVersion: Swift.String?
}

extension GetLabelDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobStatus = "JobStatus"
        case labelModelVersion = "LabelModelVersion"
        case labels = "Labels"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.LabelDetection?].self, forKey: .labels)
        var labelsDecoded0:[RekognitionClientTypes.LabelDetection]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [RekognitionClientTypes.LabelDetection]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let labelModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelModelVersion)
        labelModelVersion = labelModelVersionDecoded
    }
}

extension GetPersonTrackingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
    }
}

extension GetPersonTrackingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPersonTrackingInput: Swift.Equatable {
    /// The identifier for a job that tracks persons in a video. You get the JobId from a call to StartPersonTracking.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more persons to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of persons.
    public var nextToken: Swift.String?
    /// Sort to use for elements in the Persons array. Use TIMESTAMP to sort array elements by the time persons are detected. Use INDEX to sort by the tracked persons. If you sort by INDEX, the array elements for each person are sorted by detection confidence. The default sort is by TIMESTAMP.
    public var sortBy: RekognitionClientTypes.PersonTrackingSortBy?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: RekognitionClientTypes.PersonTrackingSortBy? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

struct GetPersonTrackingInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: RekognitionClientTypes.PersonTrackingSortBy?
}

extension GetPersonTrackingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.PersonTrackingSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}

extension GetPersonTrackingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPersonTrackingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPersonTrackingOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPersonTrackingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPersonTrackingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.persons = output.persons
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.jobStatus = nil
            self.nextToken = nil
            self.persons = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetPersonTrackingOutputResponse: Swift.Equatable {
    /// The current status of the person tracking job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of persons.
    public var nextToken: Swift.String?
    /// An array of the persons detected in the video and the time(s) their path was tracked throughout the video. An array element will exist for each time a person's path is tracked.
    public var persons: [RekognitionClientTypes.PersonDetection]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Information about a video that Amazon Rekognition Video analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition Video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        persons: [RekognitionClientTypes.PersonDetection]? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.persons = persons
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetPersonTrackingOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let nextToken: Swift.String?
    let persons: [RekognitionClientTypes.PersonDetection]?
}

extension GetPersonTrackingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case persons = "Persons"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let personsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.PersonDetection?].self, forKey: .persons)
        var personsDecoded0:[RekognitionClientTypes.PersonDetection]? = nil
        if let personsContainer = personsContainer {
            personsDecoded0 = [RekognitionClientTypes.PersonDetection]()
            for structure0 in personsContainer {
                if let structure0 = structure0 {
                    personsDecoded0?.append(structure0)
                }
            }
        }
        persons = personsDecoded0
    }
}

extension GetSegmentDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetSegmentDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSegmentDetectionInput: Swift.Equatable {
    /// Job identifier for the text detection operation for which you want results returned. You get the job identifer from an initial call to StartSegmentDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000.
    public var maxResults: Swift.Int?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of text.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetSegmentDetectionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetSegmentDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetSegmentDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSegmentDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.audioMetadata = output.audioMetadata
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.segments = output.segments
            self.selectedSegmentTypes = output.selectedSegmentTypes
            self.statusMessage = output.statusMessage
            self.videoMetadata = output.videoMetadata
        } else {
            self.audioMetadata = nil
            self.jobStatus = nil
            self.nextToken = nil
            self.segments = nil
            self.selectedSegmentTypes = nil
            self.statusMessage = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetSegmentDetectionOutputResponse: Swift.Equatable {
    /// An array of objects. There can be multiple audio streams. Each AudioMetadata object contains metadata for a single audio stream. Audio information in an AudioMetadata objects includes the audio codec, the number of audio channels, the duration of the audio stream, and the sample rate. Audio metadata is returned in each page of information returned by GetSegmentDetection.
    public var audioMetadata: [RekognitionClientTypes.AudioMetadata]?
    /// Current status of the segment detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of text.
    public var nextToken: Swift.String?
    /// An array of segments detected in a video. The array is sorted by the segment types (TECHNICAL_CUE or SHOT) specified in the SegmentTypes input parameter of StartSegmentDetection. Within each segment type the array is sorted by timestamp values.
    public var segments: [RekognitionClientTypes.SegmentDetection]?
    /// An array containing the segment types requested in the call to StartSegmentDetection.
    public var selectedSegmentTypes: [RekognitionClientTypes.SegmentTypeInfo]?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// Currently, Amazon Rekognition Video returns a single object in the VideoMetadata array. The object contains information about the video stream in the input file that Amazon Rekognition Video chose to analyze. The VideoMetadata object includes the video codec, video format and other information. Video metadata is returned in each page of information returned by GetSegmentDetection.
    public var videoMetadata: [RekognitionClientTypes.VideoMetadata]?

    public init (
        audioMetadata: [RekognitionClientTypes.AudioMetadata]? = nil,
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        segments: [RekognitionClientTypes.SegmentDetection]? = nil,
        selectedSegmentTypes: [RekognitionClientTypes.SegmentTypeInfo]? = nil,
        statusMessage: Swift.String? = nil,
        videoMetadata: [RekognitionClientTypes.VideoMetadata]? = nil
    )
    {
        self.audioMetadata = audioMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.segments = segments
        self.selectedSegmentTypes = selectedSegmentTypes
        self.statusMessage = statusMessage
        self.videoMetadata = videoMetadata
    }
}

struct GetSegmentDetectionOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: [RekognitionClientTypes.VideoMetadata]?
    let audioMetadata: [RekognitionClientTypes.AudioMetadata]?
    let nextToken: Swift.String?
    let segments: [RekognitionClientTypes.SegmentDetection]?
    let selectedSegmentTypes: [RekognitionClientTypes.SegmentTypeInfo]?
}

extension GetSegmentDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioMetadata = "AudioMetadata"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case segments = "Segments"
        case selectedSegmentTypes = "SelectedSegmentTypes"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.VideoMetadata?].self, forKey: .videoMetadata)
        var videoMetadataDecoded0:[RekognitionClientTypes.VideoMetadata]? = nil
        if let videoMetadataContainer = videoMetadataContainer {
            videoMetadataDecoded0 = [RekognitionClientTypes.VideoMetadata]()
            for structure0 in videoMetadataContainer {
                if let structure0 = structure0 {
                    videoMetadataDecoded0?.append(structure0)
                }
            }
        }
        videoMetadata = videoMetadataDecoded0
        let audioMetadataContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.AudioMetadata?].self, forKey: .audioMetadata)
        var audioMetadataDecoded0:[RekognitionClientTypes.AudioMetadata]? = nil
        if let audioMetadataContainer = audioMetadataContainer {
            audioMetadataDecoded0 = [RekognitionClientTypes.AudioMetadata]()
            for structure0 in audioMetadataContainer {
                if let structure0 = structure0 {
                    audioMetadataDecoded0?.append(structure0)
                }
            }
        }
        audioMetadata = audioMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let segmentsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.SegmentDetection?].self, forKey: .segments)
        var segmentsDecoded0:[RekognitionClientTypes.SegmentDetection]? = nil
        if let segmentsContainer = segmentsContainer {
            segmentsDecoded0 = [RekognitionClientTypes.SegmentDetection]()
            for structure0 in segmentsContainer {
                if let structure0 = structure0 {
                    segmentsDecoded0?.append(structure0)
                }
            }
        }
        segments = segmentsDecoded0
        let selectedSegmentTypesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.SegmentTypeInfo?].self, forKey: .selectedSegmentTypes)
        var selectedSegmentTypesDecoded0:[RekognitionClientTypes.SegmentTypeInfo]? = nil
        if let selectedSegmentTypesContainer = selectedSegmentTypesContainer {
            selectedSegmentTypesDecoded0 = [RekognitionClientTypes.SegmentTypeInfo]()
            for structure0 in selectedSegmentTypesContainer {
                if let structure0 = structure0 {
                    selectedSegmentTypesDecoded0?.append(structure0)
                }
            }
        }
        selectedSegmentTypes = selectedSegmentTypesDecoded0
    }
}

extension GetTextDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetTextDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTextDetectionInput: Swift.Equatable {
    /// Job identifier for the text detection operation for which you want results returned. You get the job identifer from an initial call to StartTextDetection.
    /// This member is required.
    public var jobId: Swift.String?
    /// Maximum number of results to return per paginated call. The largest value you can specify is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of text.
    public var nextToken: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetTextDetectionInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetTextDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetTextDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTextDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTextDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTextDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTextDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobStatus = output.jobStatus
            self.nextToken = output.nextToken
            self.statusMessage = output.statusMessage
            self.textDetections = output.textDetections
            self.textModelVersion = output.textModelVersion
            self.videoMetadata = output.videoMetadata
        } else {
            self.jobStatus = nil
            self.nextToken = nil
            self.statusMessage = nil
            self.textDetections = nil
            self.textModelVersion = nil
            self.videoMetadata = nil
        }
    }
}

public struct GetTextDetectionOutputResponse: Swift.Equatable {
    /// Current status of the text detection job.
    public var jobStatus: RekognitionClientTypes.VideoJobStatus?
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of text.
    public var nextToken: Swift.String?
    /// If the job fails, StatusMessage provides a descriptive error message.
    public var statusMessage: Swift.String?
    /// An array of text detected in the video. Each element contains the detected text, the time in milliseconds from the start of the video that the text was detected, and where it was detected on the screen.
    public var textDetections: [RekognitionClientTypes.TextDetectionResult]?
    /// Version number of the text detection model that was used to detect text.
    public var textModelVersion: Swift.String?
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public var videoMetadata: RekognitionClientTypes.VideoMetadata?

    public init (
        jobStatus: RekognitionClientTypes.VideoJobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        textDetections: [RekognitionClientTypes.TextDetectionResult]? = nil,
        textModelVersion: Swift.String? = nil,
        videoMetadata: RekognitionClientTypes.VideoMetadata? = nil
    )
    {
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.textDetections = textDetections
        self.textModelVersion = textModelVersion
        self.videoMetadata = videoMetadata
    }
}

struct GetTextDetectionOutputResponseBody: Swift.Equatable {
    let jobStatus: RekognitionClientTypes.VideoJobStatus?
    let statusMessage: Swift.String?
    let videoMetadata: RekognitionClientTypes.VideoMetadata?
    let textDetections: [RekognitionClientTypes.TextDetectionResult]?
    let nextToken: Swift.String?
    let textModelVersion: Swift.String?
}

extension GetTextDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case textDetections = "TextDetections"
        case textModelVersion = "TextModelVersion"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoMetadata.self, forKey: .videoMetadata)
        videoMetadata = videoMetadataDecoded
        let textDetectionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.TextDetectionResult?].self, forKey: .textDetections)
        var textDetectionsDecoded0:[RekognitionClientTypes.TextDetectionResult]? = nil
        if let textDetectionsContainer = textDetectionsContainer {
            textDetectionsDecoded0 = [RekognitionClientTypes.TextDetectionResult]()
            for structure0 in textDetectionsContainer {
                if let structure0 = structure0 {
                    textDetectionsDecoded0?.append(structure0)
                }
            }
        }
        textDetections = textDetectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let textModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textModelVersion)
        textModelVersion = textModelVersionDecoded
    }
}

extension RekognitionClientTypes.GroundTruthManifest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ObjectDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension RekognitionClientTypes {
    /// The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file.
    public struct GroundTruthManifest: Swift.Equatable {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init (
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes.HumanLoopActivationOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopActivationConditionsEvaluationResults = "HumanLoopActivationConditionsEvaluationResults"
        case humanLoopActivationReasons = "HumanLoopActivationReasons"
        case humanLoopArn = "HumanLoopArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopActivationConditionsEvaluationResults = self.humanLoopActivationConditionsEvaluationResults {
            try encodeContainer.encode(humanLoopActivationConditionsEvaluationResults, forKey: .humanLoopActivationConditionsEvaluationResults)
        }
        if let humanLoopActivationReasons = humanLoopActivationReasons {
            var humanLoopActivationReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .humanLoopActivationReasons)
            for humanloopactivationreason0 in humanLoopActivationReasons {
                try humanLoopActivationReasonsContainer.encode(humanloopactivationreason0)
            }
        }
        if let humanLoopArn = self.humanLoopArn {
            try encodeContainer.encode(humanLoopArn, forKey: .humanLoopArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopArn)
        humanLoopArn = humanLoopArnDecoded
        let humanLoopActivationReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .humanLoopActivationReasons)
        var humanLoopActivationReasonsDecoded0:[Swift.String]? = nil
        if let humanLoopActivationReasonsContainer = humanLoopActivationReasonsContainer {
            humanLoopActivationReasonsDecoded0 = [Swift.String]()
            for string0 in humanLoopActivationReasonsContainer {
                if let string0 = string0 {
                    humanLoopActivationReasonsDecoded0?.append(string0)
                }
            }
        }
        humanLoopActivationReasons = humanLoopActivationReasonsDecoded0
        let humanLoopActivationConditionsEvaluationResultsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopActivationConditionsEvaluationResults)
        humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResultsDecoded
    }
}

extension RekognitionClientTypes {
    /// Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.
    public struct HumanLoopActivationOutput: Swift.Equatable {
        /// Shows the result of condition evaluations, including those conditions which activated a human review.
        public var humanLoopActivationConditionsEvaluationResults: Swift.String?
        /// Shows if and why human review was needed.
        public var humanLoopActivationReasons: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the HumanLoop created.
        public var humanLoopArn: Swift.String?

        public init (
            humanLoopActivationConditionsEvaluationResults: Swift.String? = nil,
            humanLoopActivationReasons: [Swift.String]? = nil,
            humanLoopArn: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults
            self.humanLoopActivationReasons = humanLoopActivationReasons
            self.humanLoopArn = humanLoopArn
        }
    }

}

extension RekognitionClientTypes.HumanLoopConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAttributes = "DataAttributes"
        case flowDefinitionArn = "FlowDefinitionArn"
        case humanLoopName = "HumanLoopName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAttributes = self.dataAttributes {
            try encodeContainer.encode(dataAttributes, forKey: .dataAttributes)
        }
        if let flowDefinitionArn = self.flowDefinitionArn {
            try encodeContainer.encode(flowDefinitionArn, forKey: .flowDefinitionArn)
        }
        if let humanLoopName = self.humanLoopName {
            try encodeContainer.encode(humanLoopName, forKey: .humanLoopName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopName)
        humanLoopName = humanLoopNameDecoded
        let flowDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionArn)
        flowDefinitionArn = flowDefinitionArnDecoded
        let dataAttributesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.HumanLoopDataAttributes.self, forKey: .dataAttributes)
        dataAttributes = dataAttributesDecoded
    }
}

extension RekognitionClientTypes {
    /// Sets up the flow definition the image will be sent to if one of the conditions is met. You can also set certain attributes of the image before review.
    public struct HumanLoopConfig: Swift.Equatable {
        /// Sets attributes of the input data.
        public var dataAttributes: RekognitionClientTypes.HumanLoopDataAttributes?
        /// The Amazon Resource Name (ARN) of the flow definition. You can create a flow definition by using the Amazon Sagemaker [CreateFlowDefinition](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateFlowDefinition.html) Operation.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the human review used for this image. This should be kept unique within a region.
        /// This member is required.
        public var humanLoopName: Swift.String?

        public init (
            dataAttributes: RekognitionClientTypes.HumanLoopDataAttributes? = nil,
            flowDefinitionArn: Swift.String? = nil,
            humanLoopName: Swift.String? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopName = humanLoopName
        }
    }

}

extension RekognitionClientTypes.HumanLoopDataAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentClassifiers = "ContentClassifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentClassifiers = contentClassifiers {
            var contentClassifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentClassifiers)
            for contentclassifier0 in contentClassifiers {
                try contentClassifiersContainer.encode(contentclassifier0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentClassifiersContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ContentClassifier?].self, forKey: .contentClassifiers)
        var contentClassifiersDecoded0:[RekognitionClientTypes.ContentClassifier]? = nil
        if let contentClassifiersContainer = contentClassifiersContainer {
            contentClassifiersDecoded0 = [RekognitionClientTypes.ContentClassifier]()
            for enum0 in contentClassifiersContainer {
                if let enum0 = enum0 {
                    contentClassifiersDecoded0?.append(enum0)
                }
            }
        }
        contentClassifiers = contentClassifiersDecoded0
    }
}

extension RekognitionClientTypes {
    /// Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information.
    public struct HumanLoopDataAttributes: Swift.Equatable {
        /// Sets whether the input image is free of personally identifiable information.
        public var contentClassifiers: [RekognitionClientTypes.ContentClassifier]?

        public init (
            contentClassifiers: [RekognitionClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }

}

extension HumanLoopQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: HumanLoopQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.resourceType = output.resourceType
            self.serviceCode = output.serviceCode
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
            self.quotaCode = nil
            self.resourceType = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of in-progress human reviews you have has exceeded the number allowed.
public struct HumanLoopQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?
    /// The quota code.
    public var quotaCode: Swift.String?
    /// The resource type.
    public var resourceType: Swift.String?
    /// The service code.
    public var serviceCode: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
        self.quotaCode = quotaCode
        self.resourceType = resourceType
        self.serviceCode = serviceCode
    }
}

struct HumanLoopQuotaExceededExceptionBody: Swift.Equatable {
    let resourceType: Swift.String?
    let quotaCode: Swift.String?
    let serviceCode: Swift.String?
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension HumanLoopQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
        case quotaCode = "QuotaCode"
        case resourceType = "ResourceType"
        case serviceCode = "ServiceCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A ClientRequestToken input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.Image: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bytes = self.bytes {
            try encodeContainer.encode(bytes.base64EncodedString(), forKey: .bytes)
        }
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .bytes)
        bytes = bytesDecoded
        let s3ObjectDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides the input image either as bytes or an S3 object. You pass image bytes to an Amazon Rekognition API operation by using the Bytes property. For example, you would use the Bytes property to pass an image loaded from a local file system. Image bytes passed by using the Bytes property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide. You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the S3Object property. Images stored in an S3 bucket do not need to be base64-encoded. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    public struct Image: Swift.Equatable {
        /// Blob of image bytes up to 5 MBs.
        public var bytes: ClientRuntime.Data?
        /// Identifies an S3 object as the image source.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init (
            bytes: ClientRuntime.Data? = nil,
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.bytes = bytes
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes.ImageQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brightness = "Brightness"
        case sharpness = "Sharpness"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brightness = self.brightness {
            try encodeContainer.encode(brightness, forKey: .brightness)
        }
        if let sharpness = self.sharpness {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brightnessDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .brightness)
        brightness = brightnessDecoded
        let sharpnessDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
    }
}

extension RekognitionClientTypes {
    /// Identifies face image brightness and sharpness.
    public struct ImageQuality: Swift.Equatable {
        /// Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.
        public var brightness: Swift.Float?
        /// Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.
        public var sharpness: Swift.Float?

        public init (
            brightness: Swift.Float? = nil,
            sharpness: Swift.Float? = nil
        )
        {
            self.brightness = brightness
            self.sharpness = sharpness
        }
    }

}

extension ImageTooLargeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImageTooLargeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input image size exceeds the allowed limit. If you are calling DetectProtectiveEquipment, the image size or resolution exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide.
public struct ImageTooLargeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ImageTooLargeExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ImageTooLargeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension IndexFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case detectionAttributes = "DetectionAttributes"
        case externalImageId = "ExternalImageId"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let detectionAttributes = detectionAttributes {
            var detectionAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectionAttributes)
            for attribute0 in detectionAttributes {
                try detectionAttributesContainer.encode(attribute0.rawValue)
            }
        }
        if let externalImageId = self.externalImageId {
            try encodeContainer.encode(externalImageId, forKey: .externalImageId)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = self.maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = self.qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}

extension IndexFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct IndexFacesInput: Swift.Equatable {
    /// The ID of an existing collection to which you want to add the faces that are detected in the input images.
    /// This member is required.
    public var collectionId: Swift.String?
    /// An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for Attributes or if you specify ["DEFAULT"], the API returns the following subset of facial attributes: BoundingBox, Confidence, Pose, Quality, and Landmarks. If you provide ["ALL"], all facial attributes are returned, but the operation takes longer to complete. If you provide both, ["ALL", "DEFAULT"], the service uses a logical AND operator to determine which attributes to return (in this case, all attributes).
    public var detectionAttributes: [RekognitionClientTypes.Attribute]?
    /// The ID you want to assign to all the faces detected in the image.
    public var externalImageId: Swift.String?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes isn't supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// The maximum number of faces to index. The value of MaxFaces must be greater than or equal to 1. IndexFaces returns no more than 100 detected faces in an image, even if you specify a larger value for MaxFaces. If IndexFaces detects more faces than the value of MaxFaces, the faces with the lowest quality are filtered out first. If there are still more faces than the value of MaxFaces, the faces with the smallest bounding boxes are filtered out (up to the number that's needed to satisfy the value of MaxFaces). Information about the unindexed faces is available in the UnindexedFaces array. The faces that are returned by IndexFaces are sorted by the largest face bounding box size to the smallest size, in descending order. MaxFaces can be used with a collection associated with any version of the face model.
    public var maxFaces: Swift.Int?
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't indexed. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The default value is AUTO. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?

    public init (
        collectionId: Swift.String? = nil,
        detectionAttributes: [RekognitionClientTypes.Attribute]? = nil,
        externalImageId: Swift.String? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxFaces: Swift.Int? = nil,
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil
    )
    {
        self.collectionId = collectionId
        self.detectionAttributes = detectionAttributes
        self.externalImageId = externalImageId
        self.image = image
        self.maxFaces = maxFaces
        self.qualityFilter = qualityFilter
    }
}

struct IndexFacesInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let image: RekognitionClientTypes.Image?
    let externalImageId: Swift.String?
    let detectionAttributes: [RekognitionClientTypes.Attribute]?
    let maxFaces: Swift.Int?
    let qualityFilter: RekognitionClientTypes.QualityFilter?
}

extension IndexFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case detectionAttributes = "DetectionAttributes"
        case externalImageId = "ExternalImageId"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let externalImageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalImageId)
        externalImageId = externalImageIdDecoded
        let detectionAttributesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Attribute?].self, forKey: .detectionAttributes)
        var detectionAttributesDecoded0:[RekognitionClientTypes.Attribute]? = nil
        if let detectionAttributesContainer = detectionAttributesContainer {
            detectionAttributesDecoded0 = [RekognitionClientTypes.Attribute]()
            for enum0 in detectionAttributesContainer {
                if let enum0 = enum0 {
                    detectionAttributesDecoded0?.append(enum0)
                }
            }
        }
        detectionAttributes = detectionAttributesDecoded0
        let maxFacesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFaces)
        maxFaces = maxFacesDecoded
        let qualityFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.QualityFilter.self, forKey: .qualityFilter)
        qualityFilter = qualityFilterDecoded
    }
}

extension IndexFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension IndexFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum IndexFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension IndexFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IndexFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceModelVersion = output.faceModelVersion
            self.faceRecords = output.faceRecords
            self.orientationCorrection = output.orientationCorrection
            self.unindexedFaces = output.unindexedFaces
        } else {
            self.faceModelVersion = nil
            self.faceRecords = nil
            self.orientationCorrection = nil
            self.unindexedFaces = nil
        }
    }
}

public struct IndexFacesOutputResponse: Swift.Equatable {
    /// The version number of the face detection model that's associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// An array of faces detected and added to the collection. For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide.
    public var faceRecords: [RekognitionClientTypes.FaceRecord]?
    /// If your collection is associated with a face detection model that's later than version 3.0, the value of OrientationCorrection is always null and no orientation information is returned. If your collection is associated with a face detection model that's version 3.0 or earlier, the following applies:
    ///
    /// * If the input image is in .jpeg format, it might contain exchangeable image file format (Exif) metadata that includes the image's orientation. Amazon Rekognition uses this orientation information to perform image correction - the bounding box coordinates are translated to represent object locations after the orientation information in the Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. The value of OrientationCorrection is null.
    ///
    /// * If the image doesn't contain orientation information in its Exif metadata, Amazon Rekognition returns an estimated orientation (ROTATE_0, ROTATE_90, ROTATE_180, ROTATE_270). Amazon Rekognition doesn’t perform image correction for images. The bounding box coordinates aren't translated and represent the object locations before the image is rotated.
    ///
    ///
    /// Bounding box information is returned in the FaceRecords array. You can get the version of the face detection model by calling [DescribeCollection].
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// An array of faces that were detected in the image but weren't indexed. They weren't indexed because the quality filter identified them as low quality, or the MaxFaces request parameter filtered them out. To use the quality filter, you specify the QualityFilter request parameter.
    public var unindexedFaces: [RekognitionClientTypes.UnindexedFace]?

    public init (
        faceModelVersion: Swift.String? = nil,
        faceRecords: [RekognitionClientTypes.FaceRecord]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unindexedFaces: [RekognitionClientTypes.UnindexedFace]? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.faceRecords = faceRecords
        self.orientationCorrection = orientationCorrection
        self.unindexedFaces = unindexedFaces
    }
}

struct IndexFacesOutputResponseBody: Swift.Equatable {
    let faceRecords: [RekognitionClientTypes.FaceRecord]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let faceModelVersion: Swift.String?
    let unindexedFaces: [RekognitionClientTypes.UnindexedFace]?
}

extension IndexFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceModelVersion = "FaceModelVersion"
        case faceRecords = "FaceRecords"
        case orientationCorrection = "OrientationCorrection"
        case unindexedFaces = "UnindexedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceRecordsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceRecord?].self, forKey: .faceRecords)
        var faceRecordsDecoded0:[RekognitionClientTypes.FaceRecord]? = nil
        if let faceRecordsContainer = faceRecordsContainer {
            faceRecordsDecoded0 = [RekognitionClientTypes.FaceRecord]()
            for structure0 in faceRecordsContainer {
                if let structure0 = structure0 {
                    faceRecordsDecoded0?.append(structure0)
                }
            }
        }
        faceRecords = faceRecordsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
        let unindexedFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.UnindexedFace?].self, forKey: .unindexedFaces)
        var unindexedFacesDecoded0:[RekognitionClientTypes.UnindexedFace]? = nil
        if let unindexedFacesContainer = unindexedFacesContainer {
            unindexedFacesDecoded0 = [RekognitionClientTypes.UnindexedFace]()
            for structure0 in unindexedFacesContainer {
                if let structure0 = structure0 {
                    unindexedFacesDecoded0?.append(structure0)
                }
            }
        }
        unindexedFaces = unindexedFacesDecoded0
    }
}

extension RekognitionClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case dominantColors = "DominantColors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let dominantColors = dominantColors {
            var dominantColorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dominantColors)
            for dominantcolor0 in dominantColors {
                try dominantColorsContainer.encode(dominantcolor0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let dominantColorsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DominantColor?].self, forKey: .dominantColors)
        var dominantColorsDecoded0:[RekognitionClientTypes.DominantColor]? = nil
        if let dominantColorsContainer = dominantColorsContainer {
            dominantColorsDecoded0 = [RekognitionClientTypes.DominantColor]()
            for structure0 in dominantColorsContainer {
                if let structure0 = structure0 {
                    dominantColorsDecoded0?.append(structure0)
                }
            }
        }
        dominantColors = dominantColorsDecoded0
    }
}

extension RekognitionClientTypes {
    /// An instance of a label returned by Amazon Rekognition Image ([DetectLabels]) or by Amazon Rekognition Video ([GetLabelDetection]).
    public struct Instance: Swift.Equatable {
        /// The position of the label instance on the image.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has in the accuracy of the bounding box.
        public var confidence: Swift.Float?
        /// The dominant colors found in an individual instance of a label.
        public var dominantColors: [RekognitionClientTypes.DominantColor]?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            dominantColors: [RekognitionClientTypes.DominantColor]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.dominantColors = dominantColors
        }
    }

}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Rekognition experienced a service issue. Try your call again.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension InvalidImageFormatException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidImageFormatExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided image format is not supported.
public struct InvalidImageFormatException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InvalidImageFormatExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InvalidImageFormatExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension InvalidPaginationTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPaginationTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Pagination token in the request is not valid.
public struct InvalidPaginationTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InvalidPaginationTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InvalidPaginationTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Input parameter violated a constraint. Validate your parameter before calling the API operation again.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension InvalidPolicyRevisionIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPolicyRevisionIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The supplied revision id for the project policy is invalid.
public struct InvalidPolicyRevisionIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InvalidPolicyRevisionIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InvalidPolicyRevisionIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension InvalidS3ObjectException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidS3ObjectExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Rekognition is unable to access the S3 object specified in the request.
public struct InvalidS3ObjectException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct InvalidS3ObjectExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension InvalidS3ObjectExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.KinesisDataStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension RekognitionClientTypes {
    /// The Kinesis data stream Amazon Rekognition to which the analysis results of a Amazon Rekognition stream processor are streamed. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct KinesisDataStream: Swift.Equatable {
        /// ARN of the output Amazon Kinesis Data Streams stream.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RekognitionClientTypes.KinesisVideoStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension RekognitionClientTypes {
    /// Kinesis video stream stream that provides the source streaming video for a Amazon Rekognition Video stream processor. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct KinesisVideoStream: Swift.Equatable {
        /// ARN of the Kinesis video stream stream that streams the source video.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RekognitionClientTypes.KinesisVideoStreamStartSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fragmentNumber = "FragmentNumber"
        case producerTimestamp = "ProducerTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fragmentNumber = self.fragmentNumber {
            try encodeContainer.encode(fragmentNumber, forKey: .fragmentNumber)
        }
        if let producerTimestamp = self.producerTimestamp {
            try encodeContainer.encode(producerTimestamp, forKey: .producerTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let producerTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .producerTimestamp)
        producerTimestamp = producerTimestampDecoded
        let fragmentNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fragmentNumber)
        fragmentNumber = fragmentNumberDecoded
    }
}

extension RekognitionClientTypes {
    /// Specifies the starting point in a Kinesis stream to start processing. You can use the producer timestamp or the fragment number. One of either producer timestamp or fragment number is required. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see [Fragment](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html).
    public struct KinesisVideoStreamStartSelector: Swift.Equatable {
        /// The unique identifier of the fragment. This value monotonically increases based on the ingestion order.
        public var fragmentNumber: Swift.String?
        /// The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format.
        public var producerTimestamp: Swift.Int?

        public init (
            fragmentNumber: Swift.String? = nil,
            producerTimestamp: Swift.Int? = nil
        )
        {
            self.fragmentNumber = fragmentNumber
            self.producerTimestamp = producerTimestamp
        }
    }

}

extension RekognitionClientTypes.KnownGender: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KnownGenderType.self, forKey: .type)
        type = typeDecoded
    }
}

extension RekognitionClientTypes {
    /// The known gender identity for the celebrity that matches the provided ID. The known gender identity can be Male, Female, Nonbinary, or Unlisted.
    public struct KnownGender: Swift.Equatable {
        /// A string value of the KnownGender info about the Celebrity.
        public var type: RekognitionClientTypes.KnownGenderType?

        public init (
            type: RekognitionClientTypes.KnownGenderType? = nil
        )
        {
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    /// A list of enum string of possible gender values that Celebrity returns.
    public enum KnownGenderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case female
        case male
        case nonbinary
        case unlisted
        case sdkUnknown(Swift.String)

        public static var allCases: [KnownGenderType] {
            return [
                .female,
                .male,
                .nonbinary,
                .unlisted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .female: return "Female"
            case .male: return "Male"
            case .nonbinary: return "Nonbinary"
            case .unlisted: return "Unlisted"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KnownGenderType(rawValue: rawValue) ?? KnownGenderType.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.Label: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case categories = "Categories"
        case confidence = "Confidence"
        case instances = "Instances"
        case name = "Name"
        case parents = "Parents"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for labelalias0 in aliases {
                try aliasesContainer.encode(labelalias0)
            }
        }
        if let categories = categories {
            var categoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categories)
            for labelcategory0 in categories {
                try categoriesContainer.encode(labelcategory0)
            }
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for instance0 in instances {
                try instancesContainer.encode(instance0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parents = parents {
            var parentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parents)
            for parent0 in parents {
                try parentsContainer.encode(parent0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let instancesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Instance?].self, forKey: .instances)
        var instancesDecoded0:[RekognitionClientTypes.Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [RekognitionClientTypes.Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let parentsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Parent?].self, forKey: .parents)
        var parentsDecoded0:[RekognitionClientTypes.Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [RekognitionClientTypes.Parent]()
            for structure0 in parentsContainer {
                if let structure0 = structure0 {
                    parentsDecoded0?.append(structure0)
                }
            }
        }
        parents = parentsDecoded0
        let aliasesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.LabelAlias?].self, forKey: .aliases)
        var aliasesDecoded0:[RekognitionClientTypes.LabelAlias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [RekognitionClientTypes.LabelAlias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let categoriesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.LabelCategory?].self, forKey: .categories)
        var categoriesDecoded0:[RekognitionClientTypes.LabelCategory]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [RekognitionClientTypes.LabelCategory]()
            for structure0 in categoriesContainer {
                if let structure0 = structure0 {
                    categoriesDecoded0?.append(structure0)
                }
            }
        }
        categories = categoriesDecoded0
    }
}

extension RekognitionClientTypes {
    /// Structure containing details about the detected label, including the name, detected instances, parent labels, and level of confidence.
    public struct Label: Swift.Equatable {
        /// A list of potential aliases for a given label.
        public var aliases: [RekognitionClientTypes.LabelAlias]?
        /// A list of the categories associated with a given label.
        public var categories: [RekognitionClientTypes.LabelCategory]?
        /// Level of confidence.
        public var confidence: Swift.Float?
        /// If Label represents an object, Instances contains the bounding boxes for each instance of the detected object. Bounding boxes are returned for common object labels such as people, cars, furniture, apparel or pets.
        public var instances: [RekognitionClientTypes.Instance]?
        /// The name (label) of the object or scene.
        public var name: Swift.String?
        /// The parent labels for a label. The response includes all ancestor labels.
        public var parents: [RekognitionClientTypes.Parent]?

        public init (
            aliases: [RekognitionClientTypes.LabelAlias]? = nil,
            categories: [RekognitionClientTypes.LabelCategory]? = nil,
            confidence: Swift.Float? = nil,
            instances: [RekognitionClientTypes.Instance]? = nil,
            name: Swift.String? = nil,
            parents: [RekognitionClientTypes.Parent]? = nil
        )
        {
            self.aliases = aliases
            self.categories = categories
            self.confidence = confidence
            self.instances = instances
            self.name = name
            self.parents = parents
        }
    }

}

extension RekognitionClientTypes.LabelAlias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension RekognitionClientTypes {
    /// A potential alias of for a given label.
    public struct LabelAlias: Swift.Equatable {
        /// The name of an alias for a given label.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes.LabelCategory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension RekognitionClientTypes {
    /// The category that applies to a given label.
    public struct LabelCategory: Swift.Equatable {
        /// The name of a category that applies to a given label.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes.LabelDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationMillis = "DurationMillis"
        case endTimestampMillis = "EndTimestampMillis"
        case label = "Label"
        case startTimestampMillis = "StartTimestampMillis"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let endTimestampMillis = self.endTimestampMillis {
            try encodeContainer.encode(endTimestampMillis, forKey: .endTimestampMillis)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let startTimestampMillis = self.startTimestampMillis {
            try encodeContainer.encode(startTimestampMillis, forKey: .startTimestampMillis)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let labelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Label.self, forKey: .label)
        label = labelDecoded
        let startTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTimestampMillis)
        startTimestampMillis = startTimestampMillisDecoded
        let endTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTimestampMillis)
        endTimestampMillis = endTimestampMillisDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a label detected in a video analysis request and the time the label was detected in the video.
    public struct LabelDetection: Swift.Equatable {
        /// The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.
        public var durationMillis: Swift.Int?
        /// The time in milliseconds defining the end of the timeline segment containing a continuously detected label.
        public var endTimestampMillis: Swift.Int?
        /// Details about the detected label.
        public var label: RekognitionClientTypes.Label?
        /// The time in milliseconds defining the start of the timeline segment containing a continuously detected label.
        public var startTimestampMillis: Swift.Int?
        /// Time, in milliseconds from the start of the video, that the label was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the label first appears.
        public var timestamp: Swift.Int

        public init (
            durationMillis: Swift.Int? = nil,
            endTimestampMillis: Swift.Int? = nil,
            label: RekognitionClientTypes.Label? = nil,
            startTimestampMillis: Swift.Int? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.durationMillis = durationMillis
            self.endTimestampMillis = endTimestampMillis
            self.label = label
            self.startTimestampMillis = startTimestampMillis
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum LabelDetectionAggregateBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case segments
        case timestamps
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionAggregateBy] {
            return [
                .segments,
                .timestamps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .segments: return "SEGMENTS"
            case .timestamps: return "TIMESTAMPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelDetectionAggregateBy(rawValue: rawValue) ?? LabelDetectionAggregateBy.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes {
    public enum LabelDetectionFeatureName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case generalLabels
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionFeatureName] {
            return [
                .generalLabels,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .generalLabels: return "GENERAL_LABELS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelDetectionFeatureName(rawValue: rawValue) ?? LabelDetectionFeatureName.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.LabelDetectionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generalLabels = "GeneralLabels"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let generalLabels = self.generalLabels {
            try encodeContainer.encode(generalLabels, forKey: .generalLabels)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let generalLabelsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GeneralLabelsSettings.self, forKey: .generalLabels)
        generalLabels = generalLabelsDecoded
    }
}

extension RekognitionClientTypes {
    /// Contains the specified filters that should be applied to a list of returned GENERAL_LABELS.
    public struct LabelDetectionSettings: Swift.Equatable {
        /// Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual l abels or entire label categories.
        public var generalLabels: RekognitionClientTypes.GeneralLabelsSettings?

        public init (
            generalLabels: RekognitionClientTypes.GeneralLabelsSettings? = nil
        )
        {
            self.generalLabels = generalLabels
        }
    }

}

extension RekognitionClientTypes {
    public enum LabelDetectionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case name
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDetectionSortBy] {
            return [
                .name,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .name: return "NAME"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelDetectionSortBy(rawValue: rawValue) ?? LabelDetectionSortBy.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.Landmark: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case x = "X"
        case y = "Y"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let x = self.x {
            try encodeContainer.encode(x, forKey: .x)
        }
        if let y = self.y {
            try encodeContainer.encode(y, forKey: .y)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.LandmarkType.self, forKey: .type)
        type = typeDecoded
        let xDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .x)
        x = xDecoded
        let yDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .y)
        y = yDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates the location of the landmark on the face.
    public struct Landmark: Swift.Equatable {
        /// Type of landmark.
        public var type: RekognitionClientTypes.LandmarkType?
        /// The x-coordinate of the landmark expressed as a ratio of the width of the image. The x-coordinate is measured from the left-side of the image. For example, if the image is 700 pixels wide and the x-coordinate of the landmark is at 350 pixels, this value is 0.5.
        public var x: Swift.Float?
        /// The y-coordinate of the landmark expressed as a ratio of the height of the image. The y-coordinate is measured from the top of the image. For example, if the image height is 200 pixels and the y-coordinate of the landmark is at 50 pixels, this value is 0.25.
        public var y: Swift.Float?

        public init (
            type: RekognitionClientTypes.LandmarkType? = nil,
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.type = type
            self.x = x
            self.y = y
        }
    }

}

extension RekognitionClientTypes {
    public enum LandmarkType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case chinbottom
        case eyeleft
        case eyeright
        case lefteyebrowleft
        case lefteyebrowright
        case lefteyebrowup
        case lefteyedown
        case lefteyeleft
        case lefteyeright
        case lefteyeup
        case leftpupil
        case midjawlineleft
        case midjawlineright
        case mouthdown
        case mouthleft
        case mouthright
        case mouthup
        case nose
        case noseleft
        case noseright
        case righteyebrowleft
        case righteyebrowright
        case righteyebrowup
        case righteyedown
        case righteyeleft
        case righteyeright
        case righteyeup
        case rightpupil
        case upperjawlineleft
        case upperjawlineright
        case sdkUnknown(Swift.String)

        public static var allCases: [LandmarkType] {
            return [
                .chinbottom,
                .eyeleft,
                .eyeright,
                .lefteyebrowleft,
                .lefteyebrowright,
                .lefteyebrowup,
                .lefteyedown,
                .lefteyeleft,
                .lefteyeright,
                .lefteyeup,
                .leftpupil,
                .midjawlineleft,
                .midjawlineright,
                .mouthdown,
                .mouthleft,
                .mouthright,
                .mouthup,
                .nose,
                .noseleft,
                .noseright,
                .righteyebrowleft,
                .righteyebrowright,
                .righteyebrowup,
                .righteyedown,
                .righteyeleft,
                .righteyeright,
                .righteyeup,
                .rightpupil,
                .upperjawlineleft,
                .upperjawlineright,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .chinbottom: return "chinBottom"
            case .eyeleft: return "eyeLeft"
            case .eyeright: return "eyeRight"
            case .lefteyebrowleft: return "leftEyeBrowLeft"
            case .lefteyebrowright: return "leftEyeBrowRight"
            case .lefteyebrowup: return "leftEyeBrowUp"
            case .lefteyedown: return "leftEyeDown"
            case .lefteyeleft: return "leftEyeLeft"
            case .lefteyeright: return "leftEyeRight"
            case .lefteyeup: return "leftEyeUp"
            case .leftpupil: return "leftPupil"
            case .midjawlineleft: return "midJawlineLeft"
            case .midjawlineright: return "midJawlineRight"
            case .mouthdown: return "mouthDown"
            case .mouthleft: return "mouthLeft"
            case .mouthright: return "mouthRight"
            case .mouthup: return "mouthUp"
            case .nose: return "nose"
            case .noseleft: return "noseLeft"
            case .noseright: return "noseRight"
            case .righteyebrowleft: return "rightEyeBrowLeft"
            case .righteyebrowright: return "rightEyeBrowRight"
            case .righteyebrowup: return "rightEyeBrowUp"
            case .righteyedown: return "rightEyeDown"
            case .righteyeleft: return "rightEyeLeft"
            case .righteyeright: return "rightEyeRight"
            case .righteyeup: return "rightEyeUp"
            case .rightpupil: return "rightPupil"
            case .upperjawlineleft: return "upperJawlineLeft"
            case .upperjawlineright: return "upperJawlineRight"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LandmarkType(rawValue: rawValue) ?? LandmarkType.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations (StartLabelDetection, for example) will raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Rekognition service limit.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension ListCollectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListCollectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCollectionsInput: Swift.Equatable {
    /// Maximum number of collection IDs to return.
    public var maxResults: Swift.Int?
    /// Pagination token from the previous response.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListCollectionsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListCollectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListCollectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCollectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCollectionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCollectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCollectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collectionIds = output.collectionIds
            self.faceModelVersions = output.faceModelVersions
            self.nextToken = output.nextToken
        } else {
            self.collectionIds = nil
            self.faceModelVersions = nil
            self.nextToken = nil
        }
    }
}

public struct ListCollectionsOutputResponse: Swift.Equatable {
    /// An array of collection IDs.
    public var collectionIds: [Swift.String]?
    /// Version numbers of the face detection models associated with the collections in the array CollectionIds. For example, the value of FaceModelVersions[2] is the version number for the face detection model used by the collection in CollectionId[2].
    public var faceModelVersions: [Swift.String]?
    /// If the result is truncated, the response provides a NextToken that you can use in the subsequent request to fetch the next set of collection IDs.
    public var nextToken: Swift.String?

    public init (
        collectionIds: [Swift.String]? = nil,
        faceModelVersions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collectionIds = collectionIds
        self.faceModelVersions = faceModelVersions
        self.nextToken = nextToken
    }
}

struct ListCollectionsOutputResponseBody: Swift.Equatable {
    let collectionIds: [Swift.String]?
    let nextToken: Swift.String?
    let faceModelVersions: [Swift.String]?
}

extension ListCollectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionIds = "CollectionIds"
        case faceModelVersions = "FaceModelVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .collectionIds)
        var collectionIdsDecoded0:[Swift.String]? = nil
        if let collectionIdsContainer = collectionIdsContainer {
            collectionIdsDecoded0 = [Swift.String]()
            for string0 in collectionIdsContainer {
                if let string0 = string0 {
                    collectionIdsDecoded0?.append(string0)
                }
            }
        }
        collectionIds = collectionIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let faceModelVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faceModelVersions)
        var faceModelVersionsDecoded0:[Swift.String]? = nil
        if let faceModelVersionsContainer = faceModelVersionsContainer {
            faceModelVersionsDecoded0 = [Swift.String]()
            for string0 in faceModelVersionsContainer {
                if let string0 = string0 {
                    faceModelVersionsDecoded0?.append(string0)
                }
            }
        }
        faceModelVersions = faceModelVersionsDecoded0
    }
}

extension ListDatasetEntriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsLabels = "ContainsLabels"
        case datasetArn = "DatasetArn"
        case hasErrors = "HasErrors"
        case labeled = "Labeled"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sourceRefContains = "SourceRefContains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containsLabels = containsLabels {
            var containsLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containsLabels)
            for datasetlabel0 in containsLabels {
                try containsLabelsContainer.encode(datasetlabel0)
            }
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let hasErrors = self.hasErrors {
            try encodeContainer.encode(hasErrors, forKey: .hasErrors)
        }
        if let labeled = self.labeled {
            try encodeContainer.encode(labeled, forKey: .labeled)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sourceRefContains = self.sourceRefContains {
            try encodeContainer.encode(sourceRefContains, forKey: .sourceRefContains)
        }
    }
}

extension ListDatasetEntriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDatasetEntriesInput: Swift.Equatable {
    /// Specifies a label filter for the response. The response includes an entry only if one or more of the labels in ContainsLabels exist in the entry.
    public var containsLabels: [Swift.String]?
    /// The Amazon Resource Name (ARN) for the dataset that you want to use.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// Specifies an error filter for the response. Specify True to only include entries that have errors.
    public var hasErrors: Swift.Bool?
    /// Specify true to get only the JSON Lines where the image is labeled. Specify false to get only the JSON Lines where the image isn't labeled. If you don't specify Labeled, ListDatasetEntries returns JSON Lines for labeled and unlabeled images.
    public var labeled: Swift.Bool?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// If specified, ListDatasetEntries only returns JSON Lines where the value of SourceRefContains is part of the source-ref field. The source-ref field contains the Amazon S3 location of the image. You can use SouceRefContains for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.
    public var sourceRefContains: Swift.String?

    public init (
        containsLabels: [Swift.String]? = nil,
        datasetArn: Swift.String? = nil,
        hasErrors: Swift.Bool? = nil,
        labeled: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sourceRefContains: Swift.String? = nil
    )
    {
        self.containsLabels = containsLabels
        self.datasetArn = datasetArn
        self.hasErrors = hasErrors
        self.labeled = labeled
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sourceRefContains = sourceRefContains
    }
}

struct ListDatasetEntriesInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
    let containsLabels: [Swift.String]?
    let labeled: Swift.Bool?
    let sourceRefContains: Swift.String?
    let hasErrors: Swift.Bool?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDatasetEntriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsLabels = "ContainsLabels"
        case datasetArn = "DatasetArn"
        case hasErrors = "HasErrors"
        case labeled = "Labeled"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sourceRefContains = "SourceRefContains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let containsLabelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containsLabels)
        var containsLabelsDecoded0:[Swift.String]? = nil
        if let containsLabelsContainer = containsLabelsContainer {
            containsLabelsDecoded0 = [Swift.String]()
            for string0 in containsLabelsContainer {
                if let string0 = string0 {
                    containsLabelsDecoded0?.append(string0)
                }
            }
        }
        containsLabels = containsLabelsDecoded0
        let labeledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .labeled)
        labeled = labeledDecoded
        let sourceRefContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRefContains)
        sourceRefContains = sourceRefContainsDecoded
        let hasErrorsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasErrors)
        hasErrors = hasErrorsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDatasetEntriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetEntriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatasetEntriesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetEntriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatasetEntriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetEntries = output.datasetEntries
            self.nextToken = output.nextToken
        } else {
            self.datasetEntries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetEntriesOutputResponse: Swift.Equatable {
    /// A list of entries (images) in the dataset.
    public var datasetEntries: [Swift.String]?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        datasetEntries: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetEntries = datasetEntries
        self.nextToken = nextToken
    }
}

struct ListDatasetEntriesOutputResponseBody: Swift.Equatable {
    let datasetEntries: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDatasetEntriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetEntries = "DatasetEntries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetEntriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .datasetEntries)
        var datasetEntriesDecoded0:[Swift.String]? = nil
        if let datasetEntriesContainer = datasetEntriesContainer {
            datasetEntriesDecoded0 = [Swift.String]()
            for string0 in datasetEntriesContainer {
                if let string0 = string0 {
                    datasetEntriesDecoded0?.append(string0)
                }
            }
        }
        datasetEntries = datasetEntriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDatasetLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDatasetLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDatasetLabelsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dataset that you want to use.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        datasetArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatasetLabelsInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDatasetLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDatasetLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatasetLabelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatasetLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetLabelDescriptions = output.datasetLabelDescriptions
            self.nextToken = output.nextToken
        } else {
            self.datasetLabelDescriptions = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetLabelsOutputResponse: Swift.Equatable {
    /// A list of the labels in the dataset.
    public var datasetLabelDescriptions: [RekognitionClientTypes.DatasetLabelDescription]?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        datasetLabelDescriptions: [RekognitionClientTypes.DatasetLabelDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetLabelDescriptions = datasetLabelDescriptions
        self.nextToken = nextToken
    }
}

struct ListDatasetLabelsOutputResponseBody: Swift.Equatable {
    let datasetLabelDescriptions: [RekognitionClientTypes.DatasetLabelDescription]?
    let nextToken: Swift.String?
}

extension ListDatasetLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetLabelDescriptions = "DatasetLabelDescriptions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetLabelDescriptionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DatasetLabelDescription?].self, forKey: .datasetLabelDescriptions)
        var datasetLabelDescriptionsDecoded0:[RekognitionClientTypes.DatasetLabelDescription]? = nil
        if let datasetLabelDescriptionsContainer = datasetLabelDescriptionsContainer {
            datasetLabelDescriptionsDecoded0 = [RekognitionClientTypes.DatasetLabelDescription]()
            for structure0 in datasetLabelDescriptionsContainer {
                if let structure0 = structure0 {
                    datasetLabelDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        datasetLabelDescriptions = datasetLabelDescriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFacesInput: Swift.Equatable {
    /// ID of the collection from which to list the faces.
    /// This member is required.
    public var collectionId: Swift.String?
    /// Maximum number of faces to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
    public var nextToken: Swift.String?

    public init (
        collectionId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collectionId = collectionId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListFacesInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceModelVersion = output.faceModelVersion
            self.faces = output.faces
            self.nextToken = output.nextToken
        } else {
            self.faceModelVersion = nil
            self.faces = nil
            self.nextToken = nil
        }
    }
}

public struct ListFacesOutputResponse: Swift.Equatable {
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// An array of Face objects.
    public var faces: [RekognitionClientTypes.Face]?
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
    public var nextToken: Swift.String?

    public init (
        faceModelVersion: Swift.String? = nil,
        faces: [RekognitionClientTypes.Face]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.faceModelVersion = faceModelVersion
        self.faces = faces
        self.nextToken = nextToken
    }
}

struct ListFacesOutputResponseBody: Swift.Equatable {
    let faces: [RekognitionClientTypes.Face]?
    let nextToken: Swift.String?
    let faceModelVersion: Swift.String?
}

extension ListFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceModelVersion = "FaceModelVersion"
        case faces = "Faces"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let facesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Face?].self, forKey: .faces)
        var facesDecoded0:[RekognitionClientTypes.Face]? = nil
        if let facesContainer = facesContainer {
            facesDecoded0 = [RekognitionClientTypes.Face]()
            for structure0 in facesContainer {
                if let structure0 = structure0 {
                    facesDecoded0?.append(structure0)
                }
            }
        }
        faces = facesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
    }
}

extension ListProjectPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }
}

extension ListProjectPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListProjectPoliciesInput: Swift.Equatable {
    /// The maximum number of results to return per paginated call. The largest value you can specify is 5. If you specify a value greater than 5, a ValidationException error occurs. The default value is 5.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ARN of the project for which you want to list the project policies.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectArn = projectArn
    }
}

struct ListProjectPoliciesInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListProjectPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListProjectPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProjectPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListProjectPoliciesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProjectPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListProjectPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projectPolicies = output.projectPolicies
        } else {
            self.nextToken = nil
            self.projectPolicies = nil
        }
    }
}

public struct ListProjectPoliciesOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of project policies.
    public var nextToken: Swift.String?
    /// A list of project policies attached to the project.
    public var projectPolicies: [RekognitionClientTypes.ProjectPolicy]?

    public init (
        nextToken: Swift.String? = nil,
        projectPolicies: [RekognitionClientTypes.ProjectPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectPolicies = projectPolicies
    }
}

struct ListProjectPoliciesOutputResponseBody: Swift.Equatable {
    let projectPolicies: [RekognitionClientTypes.ProjectPolicy]?
    let nextToken: Swift.String?
}

extension ListProjectPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case projectPolicies = "ProjectPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectPoliciesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProjectPolicy?].self, forKey: .projectPolicies)
        var projectPoliciesDecoded0:[RekognitionClientTypes.ProjectPolicy]? = nil
        if let projectPoliciesContainer = projectPoliciesContainer {
            projectPoliciesDecoded0 = [RekognitionClientTypes.ProjectPolicy]()
            for structure0 in projectPoliciesContainer {
                if let structure0 = structure0 {
                    projectPoliciesDecoded0?.append(structure0)
                }
            }
        }
        projectPolicies = projectPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStreamProcessorsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListStreamProcessorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStreamProcessorsInput: Swift.Equatable {
    /// Maximum number of stream processors you want Amazon Rekognition Video to return in the response. The default is 1000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more stream processors to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of stream processors.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListStreamProcessorsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListStreamProcessorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListStreamProcessorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStreamProcessorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStreamProcessorsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStreamProcessorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStreamProcessorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.streamProcessors = output.streamProcessors
        } else {
            self.nextToken = nil
            self.streamProcessors = nil
        }
    }
}

public struct ListStreamProcessorsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of stream processors.
    public var nextToken: Swift.String?
    /// List of stream processors that you have created.
    public var streamProcessors: [RekognitionClientTypes.StreamProcessor]?

    public init (
        nextToken: Swift.String? = nil,
        streamProcessors: [RekognitionClientTypes.StreamProcessor]? = nil
    )
    {
        self.nextToken = nextToken
        self.streamProcessors = streamProcessors
    }
}

struct ListStreamProcessorsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let streamProcessors: [RekognitionClientTypes.StreamProcessor]?
}

extension ListStreamProcessorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case streamProcessors = "StreamProcessors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let streamProcessorsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.StreamProcessor?].self, forKey: .streamProcessors)
        var streamProcessorsDecoded0:[RekognitionClientTypes.StreamProcessor]? = nil
        if let streamProcessorsContainer = streamProcessorsContainer {
            streamProcessorsDecoded0 = [RekognitionClientTypes.StreamProcessor]()
            for structure0 in streamProcessorsContainer {
                if let structure0 = structure0 {
                    streamProcessorsDecoded0?.append(structure0)
                }
            }
        }
        streamProcessors = streamProcessorsDecoded0
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that contains the tags that you want a list of.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// A list of key-value tags assigned to the resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MalformedPolicyDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MalformedPolicyDocumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The format of the project policy document that you supplied to PutProjectPolicy is incorrect.
public struct MalformedPolicyDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct MalformedPolicyDocumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension MalformedPolicyDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.ModerationLabel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case name = "Name"
        case parentName = "ParentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentName = self.parentName {
            try encodeContainer.encode(parentName, forKey: .parentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let parentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentName)
        parentName = parentNameDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides information about a single type of inappropriate, unwanted, or offensive content found in an image or video. Each type of moderated content has a label within a hierarchical taxonomy. For more information, see Content moderation in the Amazon Rekognition Developer Guide.
    public struct ModerationLabel: Swift.Equatable {
        /// Specifies the confidence that Amazon Rekognition has that the label has been correctly identified. If you don't specify the MinConfidence parameter in the call to DetectModerationLabels, the operation returns labels with a confidence value greater than or equal to 50 percent.
        public var confidence: Swift.Float?
        /// The label name for the type of unsafe content detected in the image.
        public var name: Swift.String?
        /// The name for the parent label. Labels at the top level of the hierarchy have the parent label "".
        public var parentName: Swift.String?

        public init (
            confidence: Swift.Float? = nil,
            name: Swift.String? = nil,
            parentName: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.name = name
            self.parentName = parentName
        }
    }

}

extension RekognitionClientTypes.MouthOpen: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
    public struct MouthOpen: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the mouth on the face is open or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes.Mustache: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face has a mustache, and the confidence level in the determination.
    public struct Mustache: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face has mustache or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension RekognitionClientTypes.NotificationChannel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn = "RoleArn"
        case snsTopicArn = "SNSTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let snsTopicArn = self.snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension RekognitionClientTypes {
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see [Calling Amazon Rekognition Video operations](https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html). Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see [Giving access to multiple Amazon SNS topics](https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics).
    public struct NotificationChannel: Swift.Equatable {
        /// The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The Amazon SNS topic to which Amazon Rekognition posts the completion status.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension RekognitionClientTypes {
    public enum OrientationCorrection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rotate0
        case rotate180
        case rotate270
        case rotate90
        case sdkUnknown(Swift.String)

        public static var allCases: [OrientationCorrection] {
            return [
                .rotate0,
                .rotate180,
                .rotate270,
                .rotate90,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rotate0: return "ROTATE_0"
            case .rotate180: return "ROTATE_180"
            case .rotate270: return "ROTATE_270"
            case .rotate90: return "ROTATE_90"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrientationCorrection(rawValue: rawValue) ?? OrientationCorrection.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.OutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3KeyPrefix = self.s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
    }
}

extension RekognitionClientTypes {
    /// The S3 bucket and folder location where training output is placed.
    public struct OutputConfig: Swift.Equatable {
        /// The S3 bucket where training output is placed.
        public var s3Bucket: Swift.String?
        /// The prefix applied to the training output files.
        public var s3KeyPrefix: Swift.String?

        public init (
            s3Bucket: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

extension RekognitionClientTypes.Parent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension RekognitionClientTypes {
    /// A parent label for a label. A label can have 0, 1, or more parents.
    public struct Parent: Swift.Equatable {
        /// The name of the parent label.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RekognitionClientTypes.PersonDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case face = "Face"
        case index = "Index"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index) ?? 0
        index = indexDecoded
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceDetail.self, forKey: .face)
        face = faceDecoded
    }
}

extension RekognitionClientTypes {
    /// Details about a person detected in a video analysis request.
    public struct PersonDetail: Swift.Equatable {
        /// Bounding box around the detected person.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Face details for the detected person.
        public var face: RekognitionClientTypes.FaceDetail?
        /// Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.
        public var index: Swift.Int

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            face: RekognitionClientTypes.FaceDetail? = nil,
            index: Swift.Int = 0
        )
        {
            self.boundingBox = boundingBox
            self.face = face
            self.index = index
        }
    }

}

extension RekognitionClientTypes.PersonDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case person = "Person"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let person = self.person {
            try encodeContainer.encode(person, forKey: .person)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let personDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.PersonDetail.self, forKey: .person)
        person = personDecoded
    }
}

extension RekognitionClientTypes {
    /// Details and path tracking information for a single time a person's path is tracked in a video. Amazon Rekognition operations that track people's paths return an array of PersonDetection objects with elements for each time a person's path is tracked in a video. For more information, see GetPersonTracking in the Amazon Rekognition Developer Guide.
    public struct PersonDetection: Swift.Equatable {
        /// Details about a person whose path was tracked in a video.
        public var person: RekognitionClientTypes.PersonDetail?
        /// The time, in milliseconds from the start of the video, that the person's path was tracked. Note that Timestamp is not guaranteed to be accurate to the individual frame where the person's path first appears.
        public var timestamp: Swift.Int

        public init (
            person: RekognitionClientTypes.PersonDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.person = person
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes.PersonMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceMatches = "FaceMatches"
        case person = "Person"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let faceMatches = faceMatches {
            var faceMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faceMatches)
            for facematch0 in faceMatches {
                try faceMatchesContainer.encode(facematch0)
            }
        }
        if let person = self.person {
            try encodeContainer.encode(person, forKey: .person)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let personDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.PersonDetail.self, forKey: .person)
        person = personDecoded
        let faceMatchesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceMatch?].self, forKey: .faceMatches)
        var faceMatchesDecoded0:[RekognitionClientTypes.FaceMatch]? = nil
        if let faceMatchesContainer = faceMatchesContainer {
            faceMatchesDecoded0 = [RekognitionClientTypes.FaceMatch]()
            for structure0 in faceMatchesContainer {
                if let structure0 = structure0 {
                    faceMatchesDecoded0?.append(structure0)
                }
            }
        }
        faceMatches = faceMatchesDecoded0
    }
}

extension RekognitionClientTypes {
    /// Information about a person whose face matches a face(s) in an Amazon Rekognition collection. Includes information about the faces in the Amazon Rekognition collection ([FaceMatch]), information about the person ([PersonDetail]), and the time stamp for when the person was detected in a video. An array of PersonMatch objects is returned by [GetFaceSearch].
    public struct PersonMatch: Swift.Equatable {
        /// Information about the faces in the input collection that match the face of a person in the video.
        public var faceMatches: [RekognitionClientTypes.FaceMatch]?
        /// Information about the matched person.
        public var person: RekognitionClientTypes.PersonDetail?
        /// The time, in milliseconds from the beginning of the video, that the person was matched in the video.
        public var timestamp: Swift.Int

        public init (
            faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
            person: RekognitionClientTypes.PersonDetail? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.faceMatches = faceMatches
            self.person = person
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum PersonTrackingSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case index
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [PersonTrackingSortBy] {
            return [
                .index,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .index: return "INDEX"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PersonTrackingSortBy(rawValue: rawValue) ?? PersonTrackingSortBy.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.Point: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case x = "X"
        case y = "Y"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let x = self.x {
            try encodeContainer.encode(x, forKey: .x)
        }
        if let y = self.y {
            try encodeContainer.encode(y, forKey: .y)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .x)
        x = xDecoded
        let yDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .y)
        y = yDecoded
    }
}

extension RekognitionClientTypes {
    /// The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image. An array of Point objects makes up a Polygon. A Polygon is returned by [DetectText] and by [DetectCustomLabels]Polygon represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide.
    public struct Point: Swift.Equatable {
        /// The value of the X coordinate for a point on a Polygon.
        public var x: Swift.Float?
        /// The value of the Y coordinate for a point on a Polygon.
        public var y: Swift.Float?

        public init (
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.x = x
            self.y = y
        }
    }

}

extension RekognitionClientTypes.Pose: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pitch = "Pitch"
        case roll = "Roll"
        case yaw = "Yaw"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pitch = self.pitch {
            try encodeContainer.encode(pitch, forKey: .pitch)
        }
        if let roll = self.roll {
            try encodeContainer.encode(roll, forKey: .roll)
        }
        if let yaw = self.yaw {
            try encodeContainer.encode(yaw, forKey: .yaw)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rollDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .roll)
        roll = rollDecoded
        let yawDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .yaw)
        yaw = yawDecoded
        let pitchDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .pitch)
        pitch = pitchDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates the pose of the face as determined by its pitch, roll, and yaw.
    public struct Pose: Swift.Equatable {
        /// Value representing the face rotation on the pitch axis.
        public var pitch: Swift.Float?
        /// Value representing the face rotation on the roll axis.
        public var roll: Swift.Float?
        /// Value representing the face rotation on the yaw axis.
        public var yaw: Swift.Float?

        public init (
            pitch: Swift.Float? = nil,
            roll: Swift.Float? = nil,
            yaw: Swift.Float? = nil
        )
        {
            self.pitch = pitch
            self.roll = roll
            self.yaw = yaw
        }
    }

}

extension RekognitionClientTypes.ProjectDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case datasets = "Datasets"
        case projectArn = "ProjectArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let datasets = datasets {
            var datasetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .datasets)
            for datasetmetadata0 in datasets {
                try datasetsContainer.encode(datasetmetadata0)
            }
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectStatus.self, forKey: .status)
        status = statusDecoded
        let datasetsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.DatasetMetadata?].self, forKey: .datasets)
        var datasetsDecoded0:[RekognitionClientTypes.DatasetMetadata]? = nil
        if let datasetsContainer = datasetsContainer {
            datasetsDecoded0 = [RekognitionClientTypes.DatasetMetadata]()
            for structure0 in datasetsContainer {
                if let structure0 = structure0 {
                    datasetsDecoded0?.append(structure0)
                }
            }
        }
        datasets = datasetsDecoded0
    }
}

extension RekognitionClientTypes {
    /// A description of an Amazon Rekognition Custom Labels project. For more information, see [DescribeProjects].
    public struct ProjectDescription: Swift.Equatable {
        /// The Unix timestamp for the date and time that the project was created.
        public var creationTimestamp: ClientRuntime.Date?
        /// Information about the training and test datasets in the project.
        public var datasets: [RekognitionClientTypes.DatasetMetadata]?
        /// The Amazon Resource Name (ARN) of the project.
        public var projectArn: Swift.String?
        /// The current status of the project.
        public var status: RekognitionClientTypes.ProjectStatus?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            datasets: [RekognitionClientTypes.DatasetMetadata]? = nil,
            projectArn: Swift.String? = nil,
            status: RekognitionClientTypes.ProjectStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.datasets = datasets
            self.projectArn = projectArn
            self.status = status
        }
    }

}

extension RekognitionClientTypes.ProjectPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
        case policyRevisionId = "PolicyRevisionId"
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension RekognitionClientTypes {
    /// Describes a project policy in the response from [ListProjectPolicies].
    public struct ProjectPolicy: Swift.Equatable {
        /// The Unix datetime for the creation of the project policy.
        public var creationTimestamp: ClientRuntime.Date?
        /// The Unix datetime for when the project policy was last updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The JSON document for the project policy.
        public var policyDocument: Swift.String?
        /// The name of the project policy.
        public var policyName: Swift.String?
        /// The revision ID of the project policy.
        public var policyRevisionId: Swift.String?
        /// The Amazon Resource Name (ARN) of the project to which the project policy is attached.
        public var projectArn: Swift.String?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyRevisionId: Swift.String? = nil,
            projectArn: Swift.String? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.policyDocument = policyDocument
            self.policyName = policyName
            self.policyRevisionId = policyRevisionId
            self.projectArn = projectArn
        }
    }

}

extension RekognitionClientTypes {
    public enum ProjectStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectStatus] {
            return [
                .created,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectStatus(rawValue: rawValue) ?? ProjectStatus.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.ProjectVersionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billableTrainingTimeInSeconds = "BillableTrainingTimeInSeconds"
        case creationTimestamp = "CreationTimestamp"
        case evaluationResult = "EvaluationResult"
        case kmsKeyId = "KmsKeyId"
        case manifestSummary = "ManifestSummary"
        case maxInferenceUnits = "MaxInferenceUnits"
        case minInferenceUnits = "MinInferenceUnits"
        case outputConfig = "OutputConfig"
        case projectVersionArn = "ProjectVersionArn"
        case sourceProjectVersionArn = "SourceProjectVersionArn"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case testingDataResult = "TestingDataResult"
        case trainingDataResult = "TrainingDataResult"
        case trainingEndTimestamp = "TrainingEndTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billableTrainingTimeInSeconds = self.billableTrainingTimeInSeconds {
            try encodeContainer.encode(billableTrainingTimeInSeconds, forKey: .billableTrainingTimeInSeconds)
        }
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encodeTimestamp(creationTimestamp, format: .epochSeconds, forKey: .creationTimestamp)
        }
        if let evaluationResult = self.evaluationResult {
            try encodeContainer.encode(evaluationResult, forKey: .evaluationResult)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let manifestSummary = self.manifestSummary {
            try encodeContainer.encode(manifestSummary, forKey: .manifestSummary)
        }
        if let maxInferenceUnits = self.maxInferenceUnits {
            try encodeContainer.encode(maxInferenceUnits, forKey: .maxInferenceUnits)
        }
        if let minInferenceUnits = self.minInferenceUnits {
            try encodeContainer.encode(minInferenceUnits, forKey: .minInferenceUnits)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
        if let sourceProjectVersionArn = self.sourceProjectVersionArn {
            try encodeContainer.encode(sourceProjectVersionArn, forKey: .sourceProjectVersionArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let testingDataResult = self.testingDataResult {
            try encodeContainer.encode(testingDataResult, forKey: .testingDataResult)
        }
        if let trainingDataResult = self.trainingDataResult {
            try encodeContainer.encode(trainingDataResult, forKey: .trainingDataResult)
        }
        if let trainingEndTimestamp = self.trainingEndTimestamp {
            try encodeContainer.encodeTimestamp(trainingEndTimestamp, format: .epochSeconds, forKey: .trainingEndTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let minInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minInferenceUnits)
        minInferenceUnits = minInferenceUnitsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectVersionStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let billableTrainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableTrainingTimeInSeconds)
        billableTrainingTimeInSeconds = billableTrainingTimeInSecondsDecoded
        let trainingEndTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingEndTimestamp)
        trainingEndTimestamp = trainingEndTimestampDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let trainingDataResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TrainingDataResult.self, forKey: .trainingDataResult)
        trainingDataResult = trainingDataResultDecoded
        let testingDataResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TestingDataResult.self, forKey: .testingDataResult)
        testingDataResult = testingDataResultDecoded
        let evaluationResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.EvaluationResult.self, forKey: .evaluationResult)
        evaluationResult = evaluationResultDecoded
        let manifestSummaryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GroundTruthManifest.self, forKey: .manifestSummary)
        manifestSummary = manifestSummaryDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let maxInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInferenceUnits)
        maxInferenceUnits = maxInferenceUnitsDecoded
        let sourceProjectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceProjectVersionArn)
        sourceProjectVersionArn = sourceProjectVersionArnDecoded
    }
}

extension RekognitionClientTypes {
    /// A description of a version of an Amazon Rekognition Custom Labels model.
    public struct ProjectVersionDescription: Swift.Equatable {
        /// The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.
        public var billableTrainingTimeInSeconds: Swift.Int?
        /// The Unix datetime for the date and time that training started.
        public var creationTimestamp: ClientRuntime.Date?
        /// The training results. EvaluationResult is only returned if training is successful.
        public var evaluationResult: RekognitionClientTypes.EvaluationResult?
        /// The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training.
        public var kmsKeyId: Swift.String?
        /// The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.
        public var manifestSummary: RekognitionClientTypes.GroundTruthManifest?
        /// The maximum number of inference units Amazon Rekognition Custom Labels uses to auto-scale the model. For more information, see [StartProjectVersion].
        public var maxInferenceUnits: Swift.Int?
        /// The minimum number of inference units used by the model. For more information, see [StartProjectVersion].
        public var minInferenceUnits: Swift.Int?
        /// The location where training results are saved.
        public var outputConfig: RekognitionClientTypes.OutputConfig?
        /// The Amazon Resource Name (ARN) of the model version.
        public var projectVersionArn: Swift.String?
        /// If the model version was copied from a different project, SourceProjectVersionArn contains the ARN of the source model version.
        public var sourceProjectVersionArn: Swift.String?
        /// The current status of the model version.
        public var status: RekognitionClientTypes.ProjectVersionStatus?
        /// A descriptive message for an error or warning that occurred.
        public var statusMessage: Swift.String?
        /// Contains information about the testing results.
        public var testingDataResult: RekognitionClientTypes.TestingDataResult?
        /// Contains information about the training results.
        public var trainingDataResult: RekognitionClientTypes.TrainingDataResult?
        /// The Unix date and time that training of the model ended.
        public var trainingEndTimestamp: ClientRuntime.Date?

        public init (
            billableTrainingTimeInSeconds: Swift.Int? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            evaluationResult: RekognitionClientTypes.EvaluationResult? = nil,
            kmsKeyId: Swift.String? = nil,
            manifestSummary: RekognitionClientTypes.GroundTruthManifest? = nil,
            maxInferenceUnits: Swift.Int? = nil,
            minInferenceUnits: Swift.Int? = nil,
            outputConfig: RekognitionClientTypes.OutputConfig? = nil,
            projectVersionArn: Swift.String? = nil,
            sourceProjectVersionArn: Swift.String? = nil,
            status: RekognitionClientTypes.ProjectVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            testingDataResult: RekognitionClientTypes.TestingDataResult? = nil,
            trainingDataResult: RekognitionClientTypes.TrainingDataResult? = nil,
            trainingEndTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.billableTrainingTimeInSeconds = billableTrainingTimeInSeconds
            self.creationTimestamp = creationTimestamp
            self.evaluationResult = evaluationResult
            self.kmsKeyId = kmsKeyId
            self.manifestSummary = manifestSummary
            self.maxInferenceUnits = maxInferenceUnits
            self.minInferenceUnits = minInferenceUnits
            self.outputConfig = outputConfig
            self.projectVersionArn = projectVersionArn
            self.sourceProjectVersionArn = sourceProjectVersionArn
            self.status = status
            self.statusMessage = statusMessage
            self.testingDataResult = testingDataResult
            self.trainingDataResult = trainingDataResult
            self.trainingEndTimestamp = trainingEndTimestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum ProjectVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copyingCompleted
        case copyingFailed
        case copyingInProgress
        case deleting
        case failed
        case running
        case starting
        case stopped
        case stopping
        case trainingCompleted
        case trainingFailed
        case trainingInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectVersionStatus] {
            return [
                .copyingCompleted,
                .copyingFailed,
                .copyingInProgress,
                .deleting,
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .trainingCompleted,
                .trainingFailed,
                .trainingInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copyingCompleted: return "COPYING_COMPLETED"
            case .copyingFailed: return "COPYING_FAILED"
            case .copyingInProgress: return "COPYING_IN_PROGRESS"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .trainingCompleted: return "TRAINING_COMPLETED"
            case .trainingFailed: return "TRAINING_FAILED"
            case .trainingInProgress: return "TRAINING_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectVersionStatus(rawValue: rawValue) ?? ProjectVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.ProtectiveEquipmentBodyPart: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case equipmentDetections = "EquipmentDetections"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let equipmentDetections = equipmentDetections {
            var equipmentDetectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .equipmentDetections)
            for equipmentdetection0 in equipmentDetections {
                try equipmentDetectionsContainer.encode(equipmentdetection0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BodyPart.self, forKey: .name)
        name = nameDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let equipmentDetectionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.EquipmentDetection?].self, forKey: .equipmentDetections)
        var equipmentDetectionsDecoded0:[RekognitionClientTypes.EquipmentDetection]? = nil
        if let equipmentDetectionsContainer = equipmentDetectionsContainer {
            equipmentDetectionsDecoded0 = [RekognitionClientTypes.EquipmentDetection]()
            for structure0 in equipmentDetectionsContainer {
                if let structure0 = structure0 {
                    equipmentDetectionsDecoded0?.append(structure0)
                }
            }
        }
        equipmentDetections = equipmentDetectionsDecoded0
    }
}

extension RekognitionClientTypes {
    /// Information about a body part detected by [DetectProtectiveEquipment] that contains PPE. An array of ProtectiveEquipmentBodyPart objects is returned for each person detected by DetectProtectiveEquipment.
    public struct ProtectiveEquipmentBodyPart: Swift.Equatable {
        /// The confidence that Amazon Rekognition has in the detection accuracy of the detected body part.
        public var confidence: Swift.Float?
        /// An array of Personal Protective Equipment items detected around a body part.
        public var equipmentDetections: [RekognitionClientTypes.EquipmentDetection]?
        /// The detected body part.
        public var name: RekognitionClientTypes.BodyPart?

        public init (
            confidence: Swift.Float? = nil,
            equipmentDetections: [RekognitionClientTypes.EquipmentDetection]? = nil,
            name: RekognitionClientTypes.BodyPart? = nil
        )
        {
            self.confidence = confidence
            self.equipmentDetections = equipmentDetections
            self.name = name
        }
    }

}

extension RekognitionClientTypes.ProtectiveEquipmentPerson: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bodyParts = "BodyParts"
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bodyParts = bodyParts {
            var bodyPartsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bodyParts)
            for protectiveequipmentbodypart0 in bodyParts {
                try bodyPartsContainer.encode(protectiveequipmentbodypart0)
            }
        }
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyPartsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProtectiveEquipmentBodyPart?].self, forKey: .bodyParts)
        var bodyPartsDecoded0:[RekognitionClientTypes.ProtectiveEquipmentBodyPart]? = nil
        if let bodyPartsContainer = bodyPartsContainer {
            bodyPartsDecoded0 = [RekognitionClientTypes.ProtectiveEquipmentBodyPart]()
            for structure0 in bodyPartsContainer {
                if let structure0 = structure0 {
                    bodyPartsDecoded0?.append(structure0)
                }
            }
        }
        bodyParts = bodyPartsDecoded0
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .id)
        id = idDecoded
    }
}

extension RekognitionClientTypes {
    /// A person detected by a call to [DetectProtectiveEquipment]. The API returns all persons detected in the input image in an array of ProtectiveEquipmentPerson objects.
    public struct ProtectiveEquipmentPerson: Swift.Equatable {
        /// An array of body parts detected on a person's body (including body parts without PPE).
        public var bodyParts: [RekognitionClientTypes.ProtectiveEquipmentBodyPart]?
        /// A bounding box around the detected person.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// The confidence that Amazon Rekognition has that the bounding box contains a person.
        public var confidence: Swift.Float?
        /// The identifier for the detected person. The identifier is only unique for a single call to DetectProtectiveEquipment.
        public var id: Swift.Int?

        public init (
            bodyParts: [RekognitionClientTypes.ProtectiveEquipmentBodyPart]? = nil,
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            confidence: Swift.Float? = nil,
            id: Swift.Int? = nil
        )
        {
            self.bodyParts = bodyParts
            self.boundingBox = boundingBox
            self.confidence = confidence
            self.id = id
        }
    }

}

extension RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minConfidence = "MinConfidence"
        case requiredEquipmentTypes = "RequiredEquipmentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let requiredEquipmentTypes = requiredEquipmentTypes {
            var requiredEquipmentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiredEquipmentTypes)
            for protectiveequipmenttype0 in requiredEquipmentTypes {
                try requiredEquipmentTypesContainer.encode(protectiveequipmenttype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let requiredEquipmentTypesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProtectiveEquipmentType?].self, forKey: .requiredEquipmentTypes)
        var requiredEquipmentTypesDecoded0:[RekognitionClientTypes.ProtectiveEquipmentType]? = nil
        if let requiredEquipmentTypesContainer = requiredEquipmentTypesContainer {
            requiredEquipmentTypesDecoded0 = [RekognitionClientTypes.ProtectiveEquipmentType]()
            for enum0 in requiredEquipmentTypesContainer {
                if let enum0 = enum0 {
                    requiredEquipmentTypesDecoded0?.append(enum0)
                }
            }
        }
        requiredEquipmentTypes = requiredEquipmentTypesDecoded0
    }
}

extension RekognitionClientTypes {
    /// Specifies summary attributes to return from a call to [DetectProtectiveEquipment]. You can specify which types of PPE to summarize. You can also specify a minimum confidence value for detections. Summary information is returned in the Summary ([ProtectiveEquipmentSummary]) field of the response from DetectProtectiveEquipment. The summary includes which persons in an image were detected wearing the requested types of person protective equipment (PPE), which persons were detected as not wearing PPE, and the persons in which a determination could not be made. For more information, see [ProtectiveEquipmentSummary].
    public struct ProtectiveEquipmentSummarizationAttributes: Swift.Equatable {
        /// The minimum confidence level for which you want summary information. The confidence level applies to person detection, body part detection, equipment detection, and body part coverage. Amazon Rekognition doesn't return summary information with a confidence than this specified value. There isn't a default value. Specify a MinConfidence value that is between 50-100% as DetectProtectiveEquipment returns predictions only where the detection confidence is between 50% - 100%. If you specify a value that is less than 50%, the results are the same specifying a value of 50%.
        /// This member is required.
        public var minConfidence: Swift.Float?
        /// An array of personal protective equipment types for which you want summary information. If a person is detected wearing a required requipment type, the person's ID is added to the PersonsWithRequiredEquipment array field returned in [ProtectiveEquipmentSummary] by DetectProtectiveEquipment.
        /// This member is required.
        public var requiredEquipmentTypes: [RekognitionClientTypes.ProtectiveEquipmentType]?

        public init (
            minConfidence: Swift.Float? = nil,
            requiredEquipmentTypes: [RekognitionClientTypes.ProtectiveEquipmentType]? = nil
        )
        {
            self.minConfidence = minConfidence
            self.requiredEquipmentTypes = requiredEquipmentTypes
        }
    }

}

extension RekognitionClientTypes.ProtectiveEquipmentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case personsIndeterminate = "PersonsIndeterminate"
        case personsWithRequiredEquipment = "PersonsWithRequiredEquipment"
        case personsWithoutRequiredEquipment = "PersonsWithoutRequiredEquipment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let personsIndeterminate = personsIndeterminate {
            var personsIndeterminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsIndeterminate)
            for uinteger0 in personsIndeterminate {
                try personsIndeterminateContainer.encode(uinteger0)
            }
        }
        if let personsWithRequiredEquipment = personsWithRequiredEquipment {
            var personsWithRequiredEquipmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsWithRequiredEquipment)
            for uinteger0 in personsWithRequiredEquipment {
                try personsWithRequiredEquipmentContainer.encode(uinteger0)
            }
        }
        if let personsWithoutRequiredEquipment = personsWithoutRequiredEquipment {
            var personsWithoutRequiredEquipmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsWithoutRequiredEquipment)
            for uinteger0 in personsWithoutRequiredEquipment {
                try personsWithoutRequiredEquipmentContainer.encode(uinteger0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let personsWithRequiredEquipmentContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .personsWithRequiredEquipment)
        var personsWithRequiredEquipmentDecoded0:[Swift.Int]? = nil
        if let personsWithRequiredEquipmentContainer = personsWithRequiredEquipmentContainer {
            personsWithRequiredEquipmentDecoded0 = [Swift.Int]()
            for integer0 in personsWithRequiredEquipmentContainer {
                if let integer0 = integer0 {
                    personsWithRequiredEquipmentDecoded0?.append(integer0)
                }
            }
        }
        personsWithRequiredEquipment = personsWithRequiredEquipmentDecoded0
        let personsWithoutRequiredEquipmentContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .personsWithoutRequiredEquipment)
        var personsWithoutRequiredEquipmentDecoded0:[Swift.Int]? = nil
        if let personsWithoutRequiredEquipmentContainer = personsWithoutRequiredEquipmentContainer {
            personsWithoutRequiredEquipmentDecoded0 = [Swift.Int]()
            for integer0 in personsWithoutRequiredEquipmentContainer {
                if let integer0 = integer0 {
                    personsWithoutRequiredEquipmentDecoded0?.append(integer0)
                }
            }
        }
        personsWithoutRequiredEquipment = personsWithoutRequiredEquipmentDecoded0
        let personsIndeterminateContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .personsIndeterminate)
        var personsIndeterminateDecoded0:[Swift.Int]? = nil
        if let personsIndeterminateContainer = personsIndeterminateContainer {
            personsIndeterminateDecoded0 = [Swift.Int]()
            for integer0 in personsIndeterminateContainer {
                if let integer0 = integer0 {
                    personsIndeterminateDecoded0?.append(integer0)
                }
            }
        }
        personsIndeterminate = personsIndeterminateDecoded0
    }
}

extension RekognitionClientTypes {
    /// Summary information for required items of personal protective equipment (PPE) detected on persons by a call to [DetectProtectiveEquipment]. You specify the required type of PPE in the SummarizationAttributes ([ProtectiveEquipmentSummarizationAttributes]) input parameter. The summary includes which persons were detected wearing the required personal protective equipment (PersonsWithRequiredEquipment), which persons were detected as not wearing the required PPE (PersonsWithoutRequiredEquipment), and the persons in which a determination could not be made (PersonsIndeterminate). To get a total for each category, use the size of the field array. For example, to find out how many people were detected as wearing the specified PPE, use the size of the PersonsWithRequiredEquipment array. If you want to find out more about a person, such as the location ([BoundingBox]) of the person on the image, use the person ID in each array element. Each person ID matches the ID field of a [ProtectiveEquipmentPerson] object returned in the Persons array by DetectProtectiveEquipment.
    public struct ProtectiveEquipmentSummary: Swift.Equatable {
        /// An array of IDs for persons where it was not possible to determine if they are wearing personal protective equipment.
        public var personsIndeterminate: [Swift.Int]?
        /// An array of IDs for persons who are wearing detected personal protective equipment.
        public var personsWithRequiredEquipment: [Swift.Int]?
        /// An array of IDs for persons who are not wearing all of the types of PPE specified in the RequiredEquipmentTypes field of the detected personal protective equipment.
        public var personsWithoutRequiredEquipment: [Swift.Int]?

        public init (
            personsIndeterminate: [Swift.Int]? = nil,
            personsWithRequiredEquipment: [Swift.Int]? = nil,
            personsWithoutRequiredEquipment: [Swift.Int]? = nil
        )
        {
            self.personsIndeterminate = personsIndeterminate
            self.personsWithRequiredEquipment = personsWithRequiredEquipment
            self.personsWithoutRequiredEquipment = personsWithoutRequiredEquipment
        }
    }

}

extension RekognitionClientTypes {
    public enum ProtectiveEquipmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case faceCover
        case handCover
        case headCover
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectiveEquipmentType] {
            return [
                .faceCover,
                .handCover,
                .headCover,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .faceCover: return "FACE_COVER"
            case .handCover: return "HAND_COVER"
            case .headCover: return "HEAD_COVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProtectiveEquipmentType(rawValue: rawValue) ?? ProtectiveEquipmentType.sdkUnknown(rawValue)
        }
    }
}

extension ProvisionedThroughputExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ProvisionedThroughputExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Rekognition.
public struct ProvisionedThroughputExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ProvisionedThroughputExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ProvisionedThroughputExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension PutProjectPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
        case policyRevisionId = "PolicyRevisionId"
        case projectArn = "ProjectArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
    }
}

extension PutProjectPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutProjectPolicyInput: Swift.Equatable {
    /// A resource policy to add to the model. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see [IAM JSON policy reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).
    /// This member is required.
    public var policyDocument: Swift.String?
    /// A name for the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The revision ID for the Project Policy. Each time you modify a policy, Amazon Rekognition Custom Labels generates and assigns a new PolicyRevisionId and then deletes the previous version of the policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the project that the project policy is attached to.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        projectArn: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyRevisionId = policyRevisionId
        self.projectArn = projectArn
    }
}

struct PutProjectPolicyInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let policyName: Swift.String?
    let policyRevisionId: Swift.String?
    let policyDocument: Swift.String?
}

extension PutProjectPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
        case policyRevisionId = "PolicyRevisionId"
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutProjectPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutProjectPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPolicyRevisionIdException" : self = .invalidPolicyRevisionIdException(try InvalidPolicyRevisionIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocumentException" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutProjectPolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidPolicyRevisionIdException(InvalidPolicyRevisionIdException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutProjectPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutProjectPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyRevisionId = output.policyRevisionId
        } else {
            self.policyRevisionId = nil
        }
    }
}

public struct PutProjectPolicyOutputResponse: Swift.Equatable {
    /// The ID of the project policy.
    public var policyRevisionId: Swift.String?

    public init (
        policyRevisionId: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
    }
}

struct PutProjectPolicyOutputResponseBody: Swift.Equatable {
    let policyRevisionId: Swift.String?
}

extension PutProjectPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension RekognitionClientTypes {
    public enum QualityFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case high
        case low
        case medium
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [QualityFilter] {
            return [
                .auto,
                .high,
                .low,
                .medium,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QualityFilter(rawValue: rawValue) ?? QualityFilter.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes {
    public enum Reason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exceedsMaxFaces
        case extremePose
        case lowBrightness
        case lowConfidence
        case lowFaceQuality
        case lowSharpness
        case smallBoundingBox
        case sdkUnknown(Swift.String)

        public static var allCases: [Reason] {
            return [
                .exceedsMaxFaces,
                .extremePose,
                .lowBrightness,
                .lowConfidence,
                .lowFaceQuality,
                .lowSharpness,
                .smallBoundingBox,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exceedsMaxFaces: return "EXCEEDS_MAX_FACES"
            case .extremePose: return "EXTREME_POSE"
            case .lowBrightness: return "LOW_BRIGHTNESS"
            case .lowConfidence: return "LOW_CONFIDENCE"
            case .lowFaceQuality: return "LOW_FACE_QUALITY"
            case .lowSharpness: return "LOW_SHARPNESS"
            case .smallBoundingBox: return "SMALL_BOUNDING_BOX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Reason(rawValue: rawValue) ?? Reason.sdkUnknown(rawValue)
        }
    }
}

extension RecognizeCelebritiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }
}

extension RecognizeCelebritiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RecognizeCelebritiesInput: Swift.Equatable {
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?

    public init (
        image: RekognitionClientTypes.Image? = nil
    )
    {
        self.image = image
    }
}

struct RecognizeCelebritiesInputBody: Swift.Equatable {
    let image: RekognitionClientTypes.Image?
}

extension RecognizeCelebritiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
    }
}

extension RecognizeCelebritiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RecognizeCelebritiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RecognizeCelebritiesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecognizeCelebritiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RecognizeCelebritiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.celebrityFaces = output.celebrityFaces
            self.orientationCorrection = output.orientationCorrection
            self.unrecognizedFaces = output.unrecognizedFaces
        } else {
            self.celebrityFaces = nil
            self.orientationCorrection = nil
            self.unrecognizedFaces = nil
        }
    }
}

public struct RecognizeCelebritiesOutputResponse: Swift.Equatable {
    /// Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 64 celebrities in an image. Each celebrity object includes the following attributes: Face, Confidence, Emotions, Landmarks, Pose, Quality, Smile, Id, KnownGender, MatchConfidence, Name, Urls.
    public var celebrityFaces: [RekognitionClientTypes.Celebrity]?
    /// Support for estimating image orientation using the the OrientationCorrection field has ceased as of August 2021. Any returned values for this field included in an API response will always be NULL. The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in CelebrityFaces and UnrecognizedFaces represent face locations before the image orientation is corrected. If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of OrientationCorrection is null. The CelebrityFaces and UnrecognizedFaces bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.
    public var orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    /// Details about each unrecognized face in the image.
    public var unrecognizedFaces: [RekognitionClientTypes.ComparedFace]?

    public init (
        celebrityFaces: [RekognitionClientTypes.Celebrity]? = nil,
        orientationCorrection: RekognitionClientTypes.OrientationCorrection? = nil,
        unrecognizedFaces: [RekognitionClientTypes.ComparedFace]? = nil
    )
    {
        self.celebrityFaces = celebrityFaces
        self.orientationCorrection = orientationCorrection
        self.unrecognizedFaces = unrecognizedFaces
    }
}

struct RecognizeCelebritiesOutputResponseBody: Swift.Equatable {
    let celebrityFaces: [RekognitionClientTypes.Celebrity]?
    let unrecognizedFaces: [RekognitionClientTypes.ComparedFace]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
}

extension RecognizeCelebritiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case celebrityFaces = "CelebrityFaces"
        case orientationCorrection = "OrientationCorrection"
        case unrecognizedFaces = "UnrecognizedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let celebrityFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Celebrity?].self, forKey: .celebrityFaces)
        var celebrityFacesDecoded0:[RekognitionClientTypes.Celebrity]? = nil
        if let celebrityFacesContainer = celebrityFacesContainer {
            celebrityFacesDecoded0 = [RekognitionClientTypes.Celebrity]()
            for structure0 in celebrityFacesContainer {
                if let structure0 = structure0 {
                    celebrityFacesDecoded0?.append(structure0)
                }
            }
        }
        celebrityFaces = celebrityFacesDecoded0
        let unrecognizedFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ComparedFace?].self, forKey: .unrecognizedFaces)
        var unrecognizedFacesDecoded0:[RekognitionClientTypes.ComparedFace]? = nil
        if let unrecognizedFacesContainer = unrecognizedFacesContainer {
            unrecognizedFacesDecoded0 = [RekognitionClientTypes.ComparedFace]()
            for structure0 in unrecognizedFacesContainer {
                if let structure0 = structure0 {
                    unrecognizedFacesDecoded0?.append(structure0)
                }
            }
        }
        unrecognizedFaces = unrecognizedFacesDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
    }
}

extension RekognitionClientTypes.RegionOfInterest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case polygon = "Polygon"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let polygon = polygon {
            var polygonContainer = encodeContainer.nestedUnkeyedContainer(forKey: .polygon)
            for point0 in polygon {
                try polygonContainer.encode(point0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let polygonContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Point?].self, forKey: .polygon)
        var polygonDecoded0:[RekognitionClientTypes.Point]? = nil
        if let polygonContainer = polygonContainer {
            polygonDecoded0 = [RekognitionClientTypes.Point]()
            for structure0 in polygonContainer {
                if let structure0 = structure0 {
                    polygonDecoded0?.append(structure0)
                }
            }
        }
        polygon = polygonDecoded0
    }
}

extension RekognitionClientTypes {
    /// Specifies a location within the frame that Rekognition checks for objects of interest such as text, labels, or faces. It uses a BoundingBox or Polygon to set a region of the screen. A word, face, or label is included in the region if it is more than half in that region. If there is more than one region, the word, face, or label is compared with all regions of the screen. Any object of interest that is more than half in a region is kept in the results.
    public struct RegionOfInterest: Swift.Equatable {
        /// The box representing a region of interest on screen.
        public var boundingBox: RekognitionClientTypes.BoundingBox?
        /// Specifies a shape made up of up to 10 Point objects to define a region of interest.
        public var polygon: [RekognitionClientTypes.Point]?

        public init (
            boundingBox: RekognitionClientTypes.BoundingBox? = nil,
            polygon: [RekognitionClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource with the specified ID already exists.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource is already being used.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in the request cannot be found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension ResourceNotReadyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotReadyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested resource isn't ready. For example, this exception occurs when you call DetectCustomLabels with a model version that isn't deployed.
public struct ResourceNotReadyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ResourceNotReadyExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ResourceNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.S3Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case keyPrefix = "KeyPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension RekognitionClientTypes {
    /// The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation. These results include the name of the stream processor resource, the session ID of the stream processing session, and labeled timestamps and bounding boxes for detected labels.
    public struct S3Destination: Swift.Equatable {
        /// The name of the Amazon S3 bucket you want to associate with the streaming video project. You must be the owner of the Amazon S3 bucket.
        public var bucket: Swift.String?
        /// The prefix value of the location within the bucket that you want the information to be published to. For more information, see [Using prefixes](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html).
        public var keyPrefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension RekognitionClientTypes.S3Object: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension RekognitionClientTypes {
    /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
    public struct S3Object: Swift.Equatable {
        /// Name of the S3 bucket.
        public var bucket: Swift.String?
        /// S3 object key name.
        public var name: Swift.String?
        /// If the bucket is versioning enabled, you can specify the object version.
        public var version: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.name = name
            self.version = version
        }
    }

}

extension SearchFacesByImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceMatchThreshold = self.faceMatchThreshold {
            try encodeContainer.encode(faceMatchThreshold, forKey: .faceMatchThreshold)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = self.maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = self.qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}

extension SearchFacesByImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SearchFacesByImageInput: Swift.Equatable {
    /// ID of the collection to search.
    /// This member is required.
    public var collectionId: Swift.String?
    /// (Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the Bytes field. For more information, see Images in the Amazon Rekognition developer guide.
    /// This member is required.
    public var image: RekognitionClientTypes.Image?
    /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    public var maxFaces: Swift.Int?
    /// A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't searched for in the collection. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don’t meet the chosen quality bar. The quality bar is based on a variety of common use cases. Low-quality detections can occur for a number of reasons. Some examples are an object that's misidentified as a face, a face that's too blurry, or a face with a pose that's too extreme to use. If you specify NONE, no filtering is performed. The default value is NONE. To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.
    public var qualityFilter: RekognitionClientTypes.QualityFilter?

    public init (
        collectionId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        image: RekognitionClientTypes.Image? = nil,
        maxFaces: Swift.Int? = nil,
        qualityFilter: RekognitionClientTypes.QualityFilter? = nil
    )
    {
        self.collectionId = collectionId
        self.faceMatchThreshold = faceMatchThreshold
        self.image = image
        self.maxFaces = maxFaces
        self.qualityFilter = qualityFilter
    }
}

struct SearchFacesByImageInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let image: RekognitionClientTypes.Image?
    let maxFaces: Swift.Int?
    let faceMatchThreshold: Swift.Float?
    let qualityFilter: RekognitionClientTypes.QualityFilter?
}

extension SearchFacesByImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let imageDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Image.self, forKey: .image)
        image = imageDecoded
        let maxFacesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFaces)
        maxFaces = maxFacesDecoded
        let faceMatchThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .faceMatchThreshold)
        faceMatchThreshold = faceMatchThresholdDecoded
        let qualityFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.QualityFilter.self, forKey: .qualityFilter)
        qualityFilter = qualityFilterDecoded
    }
}

extension SearchFacesByImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchFacesByImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ImageTooLargeException" : self = .imageTooLargeException(try ImageTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImageFormatException" : self = .invalidImageFormatException(try InvalidImageFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SearchFacesByImageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case imageTooLargeException(ImageTooLargeException)
    case internalServerError(InternalServerError)
    case invalidImageFormatException(InvalidImageFormatException)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchFacesByImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchFacesByImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceMatches = output.faceMatches
            self.faceModelVersion = output.faceModelVersion
            self.searchedFaceBoundingBox = output.searchedFaceBoundingBox
            self.searchedFaceConfidence = output.searchedFaceConfidence
        } else {
            self.faceMatches = nil
            self.faceModelVersion = nil
            self.searchedFaceBoundingBox = nil
            self.searchedFaceConfidence = nil
        }
    }
}

public struct SearchFacesByImageOutputResponse: Swift.Equatable {
    /// An array of faces that match the input face, along with the confidence in the match.
    public var faceMatches: [RekognitionClientTypes.FaceMatch]?
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// The bounding box around the face in the input image that Amazon Rekognition used for the search.
    public var searchedFaceBoundingBox: RekognitionClientTypes.BoundingBox?
    /// The level of confidence that the searchedFaceBoundingBox, contains a face.
    public var searchedFaceConfidence: Swift.Float?

    public init (
        faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
        faceModelVersion: Swift.String? = nil,
        searchedFaceBoundingBox: RekognitionClientTypes.BoundingBox? = nil,
        searchedFaceConfidence: Swift.Float? = nil
    )
    {
        self.faceMatches = faceMatches
        self.faceModelVersion = faceModelVersion
        self.searchedFaceBoundingBox = searchedFaceBoundingBox
        self.searchedFaceConfidence = searchedFaceConfidence
    }
}

struct SearchFacesByImageOutputResponseBody: Swift.Equatable {
    let searchedFaceBoundingBox: RekognitionClientTypes.BoundingBox?
    let searchedFaceConfidence: Swift.Float?
    let faceMatches: [RekognitionClientTypes.FaceMatch]?
    let faceModelVersion: Swift.String?
}

extension SearchFacesByImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceMatches = "FaceMatches"
        case faceModelVersion = "FaceModelVersion"
        case searchedFaceBoundingBox = "SearchedFaceBoundingBox"
        case searchedFaceConfidence = "SearchedFaceConfidence"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchedFaceBoundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .searchedFaceBoundingBox)
        searchedFaceBoundingBox = searchedFaceBoundingBoxDecoded
        let searchedFaceConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .searchedFaceConfidence)
        searchedFaceConfidence = searchedFaceConfidenceDecoded
        let faceMatchesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceMatch?].self, forKey: .faceMatches)
        var faceMatchesDecoded0:[RekognitionClientTypes.FaceMatch]? = nil
        if let faceMatchesContainer = faceMatchesContainer {
            faceMatchesDecoded0 = [RekognitionClientTypes.FaceMatch]()
            for structure0 in faceMatchesContainer {
                if let structure0 = structure0 {
                    faceMatchesDecoded0?.append(structure0)
                }
            }
        }
        faceMatches = faceMatchesDecoded0
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
    }
}

extension SearchFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceId = "FaceId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case maxFaces = "MaxFaces"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceId = self.faceId {
            try encodeContainer.encode(faceId, forKey: .faceId)
        }
        if let faceMatchThreshold = self.faceMatchThreshold {
            try encodeContainer.encode(faceMatchThreshold, forKey: .faceMatchThreshold)
        }
        if let maxFaces = self.maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
    }
}

extension SearchFacesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SearchFacesInput: Swift.Equatable {
    /// ID of the collection the face belongs to.
    /// This member is required.
    public var collectionId: Swift.String?
    /// ID of a face to find matches for in the collection.
    /// This member is required.
    public var faceId: Swift.String?
    /// Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    public var maxFaces: Swift.Int?

    public init (
        collectionId: Swift.String? = nil,
        faceId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        maxFaces: Swift.Int? = nil
    )
    {
        self.collectionId = collectionId
        self.faceId = faceId
        self.faceMatchThreshold = faceMatchThreshold
        self.maxFaces = maxFaces
    }
}

struct SearchFacesInputBody: Swift.Equatable {
    let collectionId: Swift.String?
    let faceId: Swift.String?
    let maxFaces: Swift.Int?
    let faceMatchThreshold: Swift.Float?
}

extension SearchFacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case faceId = "FaceId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case maxFaces = "MaxFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let faceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceId)
        faceId = faceIdDecoded
        let maxFacesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFaces)
        maxFaces = maxFacesDecoded
        let faceMatchThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .faceMatchThreshold)
        faceMatchThreshold = faceMatchThresholdDecoded
    }
}

extension SearchFacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchFacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SearchFacesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchFacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchFacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faceMatches = output.faceMatches
            self.faceModelVersion = output.faceModelVersion
            self.searchedFaceId = output.searchedFaceId
        } else {
            self.faceMatches = nil
            self.faceModelVersion = nil
            self.searchedFaceId = nil
        }
    }
}

public struct SearchFacesOutputResponse: Swift.Equatable {
    /// An array of faces that matched the input face, along with the confidence in the match.
    public var faceMatches: [RekognitionClientTypes.FaceMatch]?
    /// Version number of the face detection model associated with the input collection (CollectionId).
    public var faceModelVersion: Swift.String?
    /// ID of the face that was searched for matches in a collection.
    public var searchedFaceId: Swift.String?

    public init (
        faceMatches: [RekognitionClientTypes.FaceMatch]? = nil,
        faceModelVersion: Swift.String? = nil,
        searchedFaceId: Swift.String? = nil
    )
    {
        self.faceMatches = faceMatches
        self.faceModelVersion = faceModelVersion
        self.searchedFaceId = searchedFaceId
    }
}

struct SearchFacesOutputResponseBody: Swift.Equatable {
    let searchedFaceId: Swift.String?
    let faceMatches: [RekognitionClientTypes.FaceMatch]?
    let faceModelVersion: Swift.String?
}

extension SearchFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceMatches = "FaceMatches"
        case faceModelVersion = "FaceModelVersion"
        case searchedFaceId = "SearchedFaceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchedFaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchedFaceId)
        searchedFaceId = searchedFaceIdDecoded
        let faceMatchesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceMatch?].self, forKey: .faceMatches)
        var faceMatchesDecoded0:[RekognitionClientTypes.FaceMatch]? = nil
        if let faceMatchesContainer = faceMatchesContainer {
            faceMatchesDecoded0 = [RekognitionClientTypes.FaceMatch]()
            for structure0 in faceMatchesContainer {
                if let structure0 = structure0 {
                    faceMatchesDecoded0?.append(structure0)
                }
            }
        }
        faceMatches = faceMatchesDecoded0
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
    }
}

extension RekognitionClientTypes.SegmentDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationFrames = "DurationFrames"
        case durationMillis = "DurationMillis"
        case durationSMPTE = "DurationSMPTE"
        case endFrameNumber = "EndFrameNumber"
        case endTimecodeSMPTE = "EndTimecodeSMPTE"
        case endTimestampMillis = "EndTimestampMillis"
        case shotSegment = "ShotSegment"
        case startFrameNumber = "StartFrameNumber"
        case startTimecodeSMPTE = "StartTimecodeSMPTE"
        case startTimestampMillis = "StartTimestampMillis"
        case technicalCueSegment = "TechnicalCueSegment"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationFrames = self.durationFrames {
            try encodeContainer.encode(durationFrames, forKey: .durationFrames)
        }
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let durationSMPTE = self.durationSMPTE {
            try encodeContainer.encode(durationSMPTE, forKey: .durationSMPTE)
        }
        if let endFrameNumber = self.endFrameNumber {
            try encodeContainer.encode(endFrameNumber, forKey: .endFrameNumber)
        }
        if let endTimecodeSMPTE = self.endTimecodeSMPTE {
            try encodeContainer.encode(endTimecodeSMPTE, forKey: .endTimecodeSMPTE)
        }
        if endTimestampMillis != 0 {
            try encodeContainer.encode(endTimestampMillis, forKey: .endTimestampMillis)
        }
        if let shotSegment = self.shotSegment {
            try encodeContainer.encode(shotSegment, forKey: .shotSegment)
        }
        if let startFrameNumber = self.startFrameNumber {
            try encodeContainer.encode(startFrameNumber, forKey: .startFrameNumber)
        }
        if let startTimecodeSMPTE = self.startTimecodeSMPTE {
            try encodeContainer.encode(startTimecodeSMPTE, forKey: .startTimecodeSMPTE)
        }
        if startTimestampMillis != 0 {
            try encodeContainer.encode(startTimestampMillis, forKey: .startTimestampMillis)
        }
        if let technicalCueSegment = self.technicalCueSegment {
            try encodeContainer.encode(technicalCueSegment, forKey: .technicalCueSegment)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.SegmentType.self, forKey: .type)
        type = typeDecoded
        let startTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTimestampMillis) ?? 0
        startTimestampMillis = startTimestampMillisDecoded
        let endTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTimestampMillis) ?? 0
        endTimestampMillis = endTimestampMillisDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
        let startTimecodeSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTimecodeSMPTE)
        startTimecodeSMPTE = startTimecodeSMPTEDecoded
        let endTimecodeSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimecodeSMPTE)
        endTimecodeSMPTE = endTimecodeSMPTEDecoded
        let durationSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .durationSMPTE)
        durationSMPTE = durationSMPTEDecoded
        let technicalCueSegmentDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TechnicalCueSegment.self, forKey: .technicalCueSegment)
        technicalCueSegment = technicalCueSegmentDecoded
        let shotSegmentDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ShotSegment.self, forKey: .shotSegment)
        shotSegment = shotSegmentDecoded
        let startFrameNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startFrameNumber)
        startFrameNumber = startFrameNumberDecoded
        let endFrameNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endFrameNumber)
        endFrameNumber = endFrameNumberDecoded
        let durationFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationFrames)
        durationFrames = durationFramesDecoded
    }
}

extension RekognitionClientTypes {
    /// A technical cue or shot detection segment detected in a video. An array of SegmentDetection objects containing all segments detected in a stored video is returned by [GetSegmentDetection].
    public struct SegmentDetection: Swift.Equatable {
        /// The duration of a video segment, expressed in frames.
        public var durationFrames: Swift.Int?
        /// The duration of the detected segment in milliseconds.
        public var durationMillis: Swift.Int?
        /// The duration of the timecode for the detected segment in SMPTE format.
        public var durationSMPTE: Swift.String?
        /// The frame number at the end of a video segment, using a frame index that starts with 0.
        public var endFrameNumber: Swift.Int?
        /// The frame-accurate SMPTE timecode, from the start of a video, for the end of a detected segment. EndTimecode is in HH:MM:SS:fr format (and ;fr for drop frame-rates).
        public var endTimecodeSMPTE: Swift.String?
        /// The end time of the detected segment, in milliseconds, from the start of the video. This value is rounded down.
        public var endTimestampMillis: Swift.Int
        /// If the segment is a shot detection, contains information about the shot detection.
        public var shotSegment: RekognitionClientTypes.ShotSegment?
        /// The frame number of the start of a video segment, using a frame index that starts with 0.
        public var startFrameNumber: Swift.Int?
        /// The frame-accurate SMPTE timecode, from the start of a video, for the start of a detected segment. StartTimecode is in HH:MM:SS:fr format (and ;fr for drop frame-rates).
        public var startTimecodeSMPTE: Swift.String?
        /// The start time of the detected segment in milliseconds from the start of the video. This value is rounded down. For example, if the actual timestamp is 100.6667 milliseconds, Amazon Rekognition Video returns a value of 100 millis.
        public var startTimestampMillis: Swift.Int
        /// If the segment is a technical cue, contains information about the technical cue.
        public var technicalCueSegment: RekognitionClientTypes.TechnicalCueSegment?
        /// The type of the segment. Valid values are TECHNICAL_CUE and SHOT.
        public var type: RekognitionClientTypes.SegmentType?

        public init (
            durationFrames: Swift.Int? = nil,
            durationMillis: Swift.Int? = nil,
            durationSMPTE: Swift.String? = nil,
            endFrameNumber: Swift.Int? = nil,
            endTimecodeSMPTE: Swift.String? = nil,
            endTimestampMillis: Swift.Int = 0,
            shotSegment: RekognitionClientTypes.ShotSegment? = nil,
            startFrameNumber: Swift.Int? = nil,
            startTimecodeSMPTE: Swift.String? = nil,
            startTimestampMillis: Swift.Int = 0,
            technicalCueSegment: RekognitionClientTypes.TechnicalCueSegment? = nil,
            type: RekognitionClientTypes.SegmentType? = nil
        )
        {
            self.durationFrames = durationFrames
            self.durationMillis = durationMillis
            self.durationSMPTE = durationSMPTE
            self.endFrameNumber = endFrameNumber
            self.endTimecodeSMPTE = endTimecodeSMPTE
            self.endTimestampMillis = endTimestampMillis
            self.shotSegment = shotSegment
            self.startFrameNumber = startFrameNumber
            self.startTimecodeSMPTE = startTimecodeSMPTE
            self.startTimestampMillis = startTimestampMillis
            self.technicalCueSegment = technicalCueSegment
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    public enum SegmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case shot
        case technicalCue
        case sdkUnknown(Swift.String)

        public static var allCases: [SegmentType] {
            return [
                .shot,
                .technicalCue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .shot: return "SHOT"
            case .technicalCue: return "TECHNICAL_CUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SegmentType(rawValue: rawValue) ?? SegmentType.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.SegmentTypeInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelVersion = "ModelVersion"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.SegmentType.self, forKey: .type)
        type = typeDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about the type of a segment requested in a call to [StartSegmentDetection]. An array of SegmentTypeInfo objects is returned by the response from [GetSegmentDetection].
    public struct SegmentTypeInfo: Swift.Equatable {
        /// The version of the model used to detect segments.
        public var modelVersion: Swift.String?
        /// The type of a segment (technical cue or shot detection).
        public var type: RekognitionClientTypes.SegmentType?

        public init (
            modelVersion: Swift.String? = nil,
            type: RekognitionClientTypes.SegmentType? = nil
        )
        {
            self.modelVersion = modelVersion
            self.type = type
        }
    }

}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The size of the collection exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.ShotSegment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case index = "Index"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a shot detection segment detected in a video. For more information, see [SegmentDetection].
    public struct ShotSegment: Swift.Equatable {
        /// The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.
        public var confidence: Swift.Float?
        /// An Identifier for a shot detection segment detected in a video.
        public var index: Swift.Int?

        public init (
            confidence: Swift.Float? = nil,
            index: Swift.Int? = nil
        )
        {
            self.confidence = confidence
            self.index = index
        }
    }

}

extension RekognitionClientTypes.Smile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is smiling, and the confidence level in the determination.
    public struct Smile: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is smiling or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension StartCelebrityRecognitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartCelebrityRecognitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartCelebrityRecognitionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartCelebrityRecognition requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the celebrity recognition analysis to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to recognize celebrities. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartCelebrityRecognitionInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
}

extension StartCelebrityRecognitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
    }
}

extension StartCelebrityRecognitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartCelebrityRecognitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartCelebrityRecognitionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartCelebrityRecognitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartCelebrityRecognitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartCelebrityRecognitionOutputResponse: Swift.Equatable {
    /// The identifier for the celebrity recognition analysis job. Use JobId to identify the job in a subsequent call to GetCelebrityRecognition.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartCelebrityRecognitionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartCelebrityRecognitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartContentModerationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case minConfidence = "MinConfidence"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartContentModerationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartContentModerationInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartContentModeration requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition doesn't return any moderated content labels with a confidence level lower than this specified value. If you don't specify MinConfidence, GetContentModeration returns labels with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the content analysis to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect inappropriate, unwanted, or offensive content. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        minConfidence: Swift.Float? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartContentModerationInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let minConfidence: Swift.Float?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
}

extension StartContentModerationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case minConfidence = "MinConfidence"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
    }
}

extension StartContentModerationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartContentModerationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartContentModerationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartContentModerationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartContentModerationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartContentModerationOutputResponse: Swift.Equatable {
    /// The identifier for the content analysis job. Use JobId to identify the job in a subsequent call to GetContentModeration.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartContentModerationOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartContentModerationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartFaceDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case faceAttributes = "FaceAttributes"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let faceAttributes = self.faceAttributes {
            try encodeContainer.encode(faceAttributes.rawValue, forKey: .faceAttributes)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartFaceDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartFaceDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartFaceDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// The face attributes you want returned. DEFAULT - The following subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality and Landmarks. ALL - All facial attributes are returned.
    public var faceAttributes: RekognitionClientTypes.FaceAttributes?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the face detection operation. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect faces. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        faceAttributes: RekognitionClientTypes.FaceAttributes? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.faceAttributes = faceAttributes
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartFaceDetectionInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let faceAttributes: RekognitionClientTypes.FaceAttributes?
    let jobTag: Swift.String?
}

extension StartFaceDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case faceAttributes = "FaceAttributes"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let faceAttributesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceAttributes.self, forKey: .faceAttributes)
        faceAttributes = faceAttributesDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
    }
}

extension StartFaceDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartFaceDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartFaceDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartFaceDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartFaceDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartFaceDetectionOutputResponse: Swift.Equatable {
    /// The identifier for the face detection job. Use JobId to identify the job in a subsequent call to GetFaceDetection.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartFaceDetectionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartFaceDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartFaceSearchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceMatchThreshold = self.faceMatchThreshold {
            try encodeContainer.encode(faceMatchThreshold, forKey: .faceMatchThreshold)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartFaceSearchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartFaceSearchInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartFaceSearch requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// ID of the collection that contains the faces you want to search for.
    /// This member is required.
    public var collectionId: Swift.String?
    /// The minimum confidence in the person match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%.
    public var faceMatchThreshold: Swift.Float?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the search. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video you want to search. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        collectionId: Swift.String? = nil,
        faceMatchThreshold: Swift.Float? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.collectionId = collectionId
        self.faceMatchThreshold = faceMatchThreshold
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartFaceSearchInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let faceMatchThreshold: Swift.Float?
    let collectionId: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
}

extension StartFaceSearchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let faceMatchThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .faceMatchThreshold)
        faceMatchThreshold = faceMatchThresholdDecoded
        let collectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionId)
        collectionId = collectionIdDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
    }
}

extension StartFaceSearchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartFaceSearchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartFaceSearchOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartFaceSearchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartFaceSearchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartFaceSearchOutputResponse: Swift.Equatable {
    /// The identifier for the search job. Use JobId to identify the job in a subsequent call to GetFaceSearch.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartFaceSearchOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartFaceSearchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartLabelDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case features = "Features"
        case jobTag = "JobTag"
        case minConfidence = "MinConfidence"
        case notificationChannel = "NotificationChannel"
        case settings = "Settings"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let features = features {
            var featuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .features)
            for labeldetectionfeaturename0 in features {
                try featuresContainer.encode(labeldetectionfeaturename0.rawValue)
            }
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartLabelDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartLabelDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartLabelDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// The features to return after video analysis. You can specify that GENERAL_LABELS are returned.
    public var features: [RekognitionClientTypes.LabelDetectionFeatureName]?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected label. Confidence represents how certain Amazon Rekognition is that a label is correctly identified.0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any labels with a confidence level lower than this specified value. If you don't specify MinConfidence, the operation returns labels and bounding boxes (if detected) with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the label detection operation to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The settings for a StartLabelDetection request.Contains the specified parameters for the label detection request of an asynchronous label analysis operation. Settings can include filters for GENERAL_LABELS.
    public var settings: RekognitionClientTypes.LabelDetectionSettings?
    /// The video in which you want to detect labels. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        features: [RekognitionClientTypes.LabelDetectionFeatureName]? = nil,
        jobTag: Swift.String? = nil,
        minConfidence: Swift.Float? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        settings: RekognitionClientTypes.LabelDetectionSettings? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.features = features
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.settings = settings
        self.video = video
    }
}

struct StartLabelDetectionInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let minConfidence: Swift.Float?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
    let features: [RekognitionClientTypes.LabelDetectionFeatureName]?
    let settings: RekognitionClientTypes.LabelDetectionSettings?
}

extension StartLabelDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case features = "Features"
        case jobTag = "JobTag"
        case minConfidence = "MinConfidence"
        case notificationChannel = "NotificationChannel"
        case settings = "Settings"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let featuresContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.LabelDetectionFeatureName?].self, forKey: .features)
        var featuresDecoded0:[RekognitionClientTypes.LabelDetectionFeatureName]? = nil
        if let featuresContainer = featuresContainer {
            featuresDecoded0 = [RekognitionClientTypes.LabelDetectionFeatureName]()
            for enum0 in featuresContainer {
                if let enum0 = enum0 {
                    featuresDecoded0?.append(enum0)
                }
            }
        }
        features = featuresDecoded0
        let settingsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.LabelDetectionSettings.self, forKey: .settings)
        settings = settingsDecoded
    }
}

extension StartLabelDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartLabelDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartLabelDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartLabelDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartLabelDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartLabelDetectionOutputResponse: Swift.Equatable {
    /// The identifier for the label detection job. Use JobId to identify the job in a subsequent call to GetLabelDetection.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartLabelDetectionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartLabelDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartPersonTrackingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartPersonTrackingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartPersonTrackingInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartPersonTracking requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the people detection operation to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect people. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartPersonTrackingInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
}

extension StartPersonTrackingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
    }
}

extension StartPersonTrackingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPersonTrackingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartPersonTrackingOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPersonTrackingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartPersonTrackingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartPersonTrackingOutputResponse: Swift.Equatable {
    /// The identifier for the person detection job. Use JobId to identify the job in a subsequent call to GetPersonTracking.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartPersonTrackingOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartPersonTrackingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartProjectVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxInferenceUnits = "MaxInferenceUnits"
        case minInferenceUnits = "MinInferenceUnits"
        case projectVersionArn = "ProjectVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxInferenceUnits = self.maxInferenceUnits {
            try encodeContainer.encode(maxInferenceUnits, forKey: .maxInferenceUnits)
        }
        if let minInferenceUnits = self.minInferenceUnits {
            try encodeContainer.encode(minInferenceUnits, forKey: .minInferenceUnits)
        }
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
    }
}

extension StartProjectVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartProjectVersionInput: Swift.Equatable {
    /// The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Rekognition Custom Labels doesn't auto-scale the model.
    public var maxInferenceUnits: Swift.Int?
    /// The minimum number of inference units to use. A single inference unit represents 1 hour of processing. For information about the number of transactions per second (TPS) that an inference unit can support, see Running a trained Amazon Rekognition Custom Labels model in the Amazon Rekognition Custom Labels Guide. Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use.
    /// This member is required.
    public var minInferenceUnits: Swift.Int?
    /// The Amazon Resource Name(ARN) of the model version that you want to start.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init (
        maxInferenceUnits: Swift.Int? = nil,
        minInferenceUnits: Swift.Int? = nil,
        projectVersionArn: Swift.String? = nil
    )
    {
        self.maxInferenceUnits = maxInferenceUnits
        self.minInferenceUnits = minInferenceUnits
        self.projectVersionArn = projectVersionArn
    }
}

struct StartProjectVersionInputBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
    let minInferenceUnits: Swift.Int?
    let maxInferenceUnits: Swift.Int?
}

extension StartProjectVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxInferenceUnits = "MaxInferenceUnits"
        case minInferenceUnits = "MinInferenceUnits"
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
        let minInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minInferenceUnits)
        minInferenceUnits = minInferenceUnitsDecoded
        let maxInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInferenceUnits)
        maxInferenceUnits = maxInferenceUnitsDecoded
    }
}

extension StartProjectVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartProjectVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartProjectVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartProjectVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartProjectVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct StartProjectVersionOutputResponse: Swift.Equatable {
    /// The current running status of the model.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init (
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

struct StartProjectVersionOutputResponseBody: Swift.Equatable {
    let status: RekognitionClientTypes.ProjectVersionStatus?
}

extension StartProjectVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension RekognitionClientTypes.StartSegmentDetectionFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shotFilter = "ShotFilter"
        case technicalCueFilter = "TechnicalCueFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shotFilter = self.shotFilter {
            try encodeContainer.encode(shotFilter, forKey: .shotFilter)
        }
        if let technicalCueFilter = self.technicalCueFilter {
            try encodeContainer.encode(technicalCueFilter, forKey: .technicalCueFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let technicalCueFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StartTechnicalCueDetectionFilter.self, forKey: .technicalCueFilter)
        technicalCueFilter = technicalCueFilterDecoded
        let shotFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StartShotDetectionFilter.self, forKey: .shotFilter)
        shotFilter = shotFilterDecoded
    }
}

extension RekognitionClientTypes {
    /// Filters applied to the technical cue or shot detection segments. For more information, see [StartSegmentDetection].
    public struct StartSegmentDetectionFilters: Swift.Equatable {
        /// Filters that are specific to shot detections.
        public var shotFilter: RekognitionClientTypes.StartShotDetectionFilter?
        /// Filters that are specific to technical cues.
        public var technicalCueFilter: RekognitionClientTypes.StartTechnicalCueDetectionFilter?

        public init (
            shotFilter: RekognitionClientTypes.StartShotDetectionFilter? = nil,
            technicalCueFilter: RekognitionClientTypes.StartTechnicalCueDetectionFilter? = nil
        )
        {
            self.shotFilter = shotFilter
            self.technicalCueFilter = technicalCueFilter
        }
    }

}

extension StartSegmentDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case filters = "Filters"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case segmentTypes = "SegmentTypes"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let segmentTypes = segmentTypes {
            var segmentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .segmentTypes)
            for segmenttype0 in segmentTypes {
                try segmentTypesContainer.encode(segmenttype0.rawValue)
            }
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartSegmentDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartSegmentDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartSegmentDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// Filters for technical cue or shot detection.
    public var filters: RekognitionClientTypes.StartSegmentDetectionFilters?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.
    /// This member is required.
    public var segmentTypes: [RekognitionClientTypes.SegmentType]?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartSegmentDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        segmentTypes: [RekognitionClientTypes.SegmentType]? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.segmentTypes = segmentTypes
        self.video = video
    }
}

struct StartSegmentDetectionInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
    let filters: RekognitionClientTypes.StartSegmentDetectionFilters?
    let segmentTypes: [RekognitionClientTypes.SegmentType]?
}

extension StartSegmentDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case filters = "Filters"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case segmentTypes = "SegmentTypes"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StartSegmentDetectionFilters.self, forKey: .filters)
        filters = filtersDecoded
        let segmentTypesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.SegmentType?].self, forKey: .segmentTypes)
        var segmentTypesDecoded0:[RekognitionClientTypes.SegmentType]? = nil
        if let segmentTypesContainer = segmentTypesContainer {
            segmentTypesDecoded0 = [RekognitionClientTypes.SegmentType]()
            for enum0 in segmentTypesContainer {
                if let enum0 = enum0 {
                    segmentTypesDecoded0?.append(enum0)
                }
            }
        }
        segmentTypes = segmentTypesDecoded0
    }
}

extension StartSegmentDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartSegmentDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartSegmentDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartSegmentDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartSegmentDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartSegmentDetectionOutputResponse: Swift.Equatable {
    /// Unique identifier for the segment detection job. The JobId is returned from StartSegmentDetection.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartSegmentDetectionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartSegmentDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension RekognitionClientTypes.StartShotDetectionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minSegmentConfidence = "MinSegmentConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minSegmentConfidence = self.minSegmentConfidence {
            try encodeContainer.encode(minSegmentConfidence, forKey: .minSegmentConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minSegmentConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minSegmentConfidence)
        minSegmentConfidence = minSegmentConfidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Filters for the shot detection segments returned by GetSegmentDetection. For more information, see [StartSegmentDetectionFilters].
    public struct StartShotDetectionFilter: Swift.Equatable {
        /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected segment. Confidence represents how certain Amazon Rekognition is that a segment is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any segments with a confidence level lower than this specified value. If you don't specify MinSegmentConfidence, the GetSegmentDetection returns segments with confidence values greater than or equal to 50 percent.
        public var minSegmentConfidence: Swift.Float?

        public init (
            minSegmentConfidence: Swift.Float? = nil
        )
        {
            self.minSegmentConfidence = minSegmentConfidence
        }
    }

}

extension StartStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case startSelector = "StartSelector"
        case stopSelector = "StopSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startSelector = self.startSelector {
            try encodeContainer.encode(startSelector, forKey: .startSelector)
        }
        if let stopSelector = self.stopSelector {
            try encodeContainer.encode(stopSelector, forKey: .stopSelector)
        }
    }
}

extension StartStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartStreamProcessorInput: Swift.Equatable {
    /// The name of the stream processor to start processing.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see [Fragment](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html). This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public var startSelector: RekognitionClientTypes.StreamProcessingStartSelector?
    /// Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public var stopSelector: RekognitionClientTypes.StreamProcessingStopSelector?

    public init (
        name: Swift.String? = nil,
        startSelector: RekognitionClientTypes.StreamProcessingStartSelector? = nil,
        stopSelector: RekognitionClientTypes.StreamProcessingStopSelector? = nil
    )
    {
        self.name = name
        self.startSelector = startSelector
        self.stopSelector = stopSelector
    }
}

struct StartStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
    let startSelector: RekognitionClientTypes.StreamProcessingStartSelector?
    let stopSelector: RekognitionClientTypes.StreamProcessingStopSelector?
}

extension StartStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case startSelector = "StartSelector"
        case stopSelector = "StopSelector"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let startSelectorDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessingStartSelector.self, forKey: .startSelector)
        startSelector = startSelectorDecoded
        let stopSelectorDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessingStopSelector.self, forKey: .stopSelector)
        stopSelector = stopSelectorDecoded
    }
}

extension StartStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartStreamProcessorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sessionId = output.sessionId
        } else {
            self.sessionId = nil
        }
    }
}

public struct StartStreamProcessorOutputResponse: Swift.Equatable {
    /// A unique identifier for the stream processing session.
    public var sessionId: Swift.String?

    public init (
        sessionId: Swift.String? = nil
    )
    {
        self.sessionId = sessionId
    }
}

struct StartStreamProcessorOutputResponseBody: Swift.Equatable {
    let sessionId: Swift.String?
}

extension StartStreamProcessorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sessionId = "SessionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
    }
}

extension RekognitionClientTypes.StartTechnicalCueDetectionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blackFrame = "BlackFrame"
        case minSegmentConfidence = "MinSegmentConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackFrame = self.blackFrame {
            try encodeContainer.encode(blackFrame, forKey: .blackFrame)
        }
        if let minSegmentConfidence = self.minSegmentConfidence {
            try encodeContainer.encode(minSegmentConfidence, forKey: .minSegmentConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minSegmentConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minSegmentConfidence)
        minSegmentConfidence = minSegmentConfidenceDecoded
        let blackFrameDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BlackFrame.self, forKey: .blackFrame)
        blackFrame = blackFrameDecoded
    }
}

extension RekognitionClientTypes {
    /// Filters for the technical segments returned by [GetSegmentDetection]. For more information, see [StartSegmentDetectionFilters].
    public struct StartTechnicalCueDetectionFilter: Swift.Equatable {
        /// A filter that allows you to control the black frame detection by specifying the black levels and pixel coverage of black pixels in a frame. Videos can come from multiple sources, formats, and time periods, with different standards and varying noise levels for black frames that need to be accounted for.
        public var blackFrame: RekognitionClientTypes.BlackFrame?
        /// Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected segment. Confidence represents how certain Amazon Rekognition is that a segment is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn't return any segments with a confidence level lower than this specified value. If you don't specify MinSegmentConfidence, GetSegmentDetection returns segments with confidence values greater than or equal to 50 percent.
        public var minSegmentConfidence: Swift.Float?

        public init (
            blackFrame: RekognitionClientTypes.BlackFrame? = nil,
            minSegmentConfidence: Swift.Float? = nil
        )
        {
            self.blackFrame = blackFrame
            self.minSegmentConfidence = minSegmentConfidence
        }
    }

}

extension RekognitionClientTypes.StartTextDetectionFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionsOfInterest = "RegionsOfInterest"
        case wordFilter = "WordFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionsOfInterest = regionsOfInterest {
            var regionsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterest)
            for regionofinterest0 in regionsOfInterest {
                try regionsOfInterestContainer.encode(regionofinterest0)
            }
        }
        if let wordFilter = self.wordFilter {
            try encodeContainer.encode(wordFilter, forKey: .wordFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wordFilterDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DetectionFilter.self, forKey: .wordFilter)
        wordFilter = wordFilterDecoded
        let regionsOfInterestContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterest)
        var regionsOfInterestDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestContainer = regionsOfInterestContainer {
            regionsOfInterestDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestContainer {
                if let structure0 = structure0 {
                    regionsOfInterestDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterest = regionsOfInterestDecoded0
    }
}

extension RekognitionClientTypes {
    /// Set of optional parameters that let you set the criteria text must meet to be included in your response. WordFilter looks at a word's height, width and minimum confidence. RegionOfInterest lets you set a specific region of the screen to look for text in.
    public struct StartTextDetectionFilters: Swift.Equatable {
        /// Filter focusing on a certain area of the frame. Uses a BoundingBox object to set the region of the screen.
        public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
        /// Filters focusing on qualities of the text, such as confidence or size.
        public var wordFilter: RekognitionClientTypes.DetectionFilter?

        public init (
            regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
            wordFilter: RekognitionClientTypes.DetectionFilter? = nil
        )
        {
            self.regionsOfInterest = regionsOfInterest
            self.wordFilter = wordFilter
        }
    }

}

extension StartTextDetectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case filters = "Filters"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let jobTag = self.jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let video = self.video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}

extension StartTextDetectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartTextDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentaly started more than once.
    public var clientRequestToken: Swift.String?
    /// Optional parameters that let you set criteria the text must meet to be included in your response.
    public var filters: RekognitionClientTypes.StartTextDetectionFilters?
    /// An identifier returned in the completion status published by your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see [Calling Amazon Rekognition Video operations](https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html). Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see [Giving access to multiple Amazon SNS topics](https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics).
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartTextDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}

struct StartTextDetectionInputBody: Swift.Equatable {
    let video: RekognitionClientTypes.Video?
    let clientRequestToken: Swift.String?
    let notificationChannel: RekognitionClientTypes.NotificationChannel?
    let jobTag: Swift.String?
    let filters: RekognitionClientTypes.StartTextDetectionFilters?
}

extension StartTextDetectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case filters = "Filters"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case video = "Video"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Video.self, forKey: .video)
        video = videoDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StartTextDetectionFilters.self, forKey: .filters)
        filters = filtersDecoded
    }
}

extension StartTextDetectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTextDetectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ObjectException" : self = .invalidS3ObjectException(try InvalidS3ObjectException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VideoTooLargeException" : self = .videoTooLargeException(try VideoTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartTextDetectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case invalidS3ObjectException(InvalidS3ObjectException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case throttlingException(ThrottlingException)
    case videoTooLargeException(VideoTooLargeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTextDetectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartTextDetectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct StartTextDetectionOutputResponse: Swift.Equatable {
    /// Identifier for the text detection job. Use JobId to identify the job in a subsequent call to GetTextDetection.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StartTextDetectionOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StartTextDetectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopProjectVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
    }
}

extension StopProjectVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopProjectVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model version that you want to delete. This operation requires permissions to perform the rekognition:StopProjectVersion action.
    /// This member is required.
    public var projectVersionArn: Swift.String?

    public init (
        projectVersionArn: Swift.String? = nil
    )
    {
        self.projectVersionArn = projectVersionArn
    }
}

struct StopProjectVersionInputBody: Swift.Equatable {
    let projectVersionArn: Swift.String?
}

extension StopProjectVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectVersionArn = "ProjectVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
    }
}

extension StopProjectVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopProjectVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopProjectVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopProjectVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopProjectVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct StopProjectVersionOutputResponse: Swift.Equatable {
    /// The current status of the stop operation.
    public var status: RekognitionClientTypes.ProjectVersionStatus?

    public init (
        status: RekognitionClientTypes.ProjectVersionStatus? = nil
    )
    {
        self.status = status
    }
}

struct StopProjectVersionOutputResponseBody: Swift.Equatable {
    let status: RekognitionClientTypes.ProjectVersionStatus?
}

extension StopProjectVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension StopStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StopStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopStreamProcessorInput: Swift.Equatable {
    /// The name of a stream processor created by [CreateStreamProcessor].
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StopStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StopStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StopStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopStreamProcessorOutputResponse: Swift.Equatable {

    public init () { }
}

extension RekognitionClientTypes.StreamProcessingStartSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kvsStreamStartSelector = "KVSStreamStartSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kvsStreamStartSelector = self.kvsStreamStartSelector {
            try encodeContainer.encode(kvsStreamStartSelector, forKey: .kvsStreamStartSelector)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kvsStreamStartSelectorDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KinesisVideoStreamStartSelector.self, forKey: .kvsStreamStartSelector)
        kvsStreamStartSelector = kvsStreamStartSelectorDecoded
    }
}

extension RekognitionClientTypes {
    /// This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.
    public struct StreamProcessingStartSelector: Swift.Equatable {
        /// Specifies the starting point in the stream to start processing. This can be done with a producer timestamp or a fragment number in a Kinesis stream.
        public var kvsStreamStartSelector: RekognitionClientTypes.KinesisVideoStreamStartSelector?

        public init (
            kvsStreamStartSelector: RekognitionClientTypes.KinesisVideoStreamStartSelector? = nil
        )
        {
            self.kvsStreamStartSelector = kvsStreamStartSelector
        }
    }

}

extension RekognitionClientTypes.StreamProcessingStopSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxDurationInSeconds = "MaxDurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxDurationInSeconds = self.maxDurationInSeconds {
            try encodeContainer.encode(maxDurationInSeconds, forKey: .maxDurationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDurationInSeconds)
        maxDurationInSeconds = maxDurationInSecondsDecoded
    }
}

extension RekognitionClientTypes {
    /// Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video.
    public struct StreamProcessingStopSelector: Swift.Equatable {
        /// Specifies the maximum amount of time in seconds that you want the stream to be processed. The largest amount of time is 2 minutes. The default is 10 seconds.
        public var maxDurationInSeconds: Swift.Int?

        public init (
            maxDurationInSeconds: Swift.Int? = nil
        )
        {
            self.maxDurationInSeconds = maxDurationInSeconds
        }
    }

}

extension RekognitionClientTypes.StreamProcessor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension RekognitionClientTypes {
    /// An object that recognizes faces or labels in a streaming video. An Amazon Rekognition stream processor is created by a call to [CreateStreamProcessor]. The request parameters for CreateStreamProcessor describe the Kinesis video stream source for the streaming video, face recognition parameters, and where to stream the analysis resullts.
    public struct StreamProcessor: Swift.Equatable {
        /// Name of the Amazon Rekognition stream processor.
        public var name: Swift.String?
        /// Current status of the Amazon Rekognition stream processor.
        public var status: RekognitionClientTypes.StreamProcessorStatus?

        public init (
            name: Swift.String? = nil,
            status: RekognitionClientTypes.StreamProcessorStatus? = nil
        )
        {
            self.name = name
            self.status = status
        }
    }

}

extension RekognitionClientTypes.StreamProcessorDataSharingPreference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optIn = "OptIn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if optIn != false {
            try encodeContainer.encode(optIn, forKey: .optIn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optIn) ?? false
        optIn = optInDecoded
    }
}

extension RekognitionClientTypes {
    /// Allows you to opt in or opt out to share data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public struct StreamProcessorDataSharingPreference: Swift.Equatable {
        /// If this option is set to true, you choose to share data with Rekognition to improve model performance.
        /// This member is required.
        public var optIn: Swift.Bool

        public init (
            optIn: Swift.Bool = false
        )
        {
            self.optIn = optIn
        }
    }

}

extension RekognitionClientTypes.StreamProcessorInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kinesisVideoStream = "KinesisVideoStream"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kinesisVideoStream = self.kinesisVideoStream {
            try encodeContainer.encode(kinesisVideoStream, forKey: .kinesisVideoStream)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kinesisVideoStreamDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KinesisVideoStream.self, forKey: .kinesisVideoStream)
        kinesisVideoStream = kinesisVideoStreamDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about the source streaming video.
    public struct StreamProcessorInput: Swift.Equatable {
        /// The Kinesis video stream input stream for the source streaming video.
        public var kinesisVideoStream: RekognitionClientTypes.KinesisVideoStream?

        public init (
            kinesisVideoStream: RekognitionClientTypes.KinesisVideoStream? = nil
        )
        {
            self.kinesisVideoStream = kinesisVideoStream
        }
    }

}

extension RekognitionClientTypes.StreamProcessorNotificationChannel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snsTopicArn = "SNSTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snsTopicArn = self.snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
    }
}

extension RekognitionClientTypes {
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public struct StreamProcessorNotificationChannel: Swift.Equatable {
        /// The Amazon Resource Number (ARN) of the Amazon Amazon Simple Notification Service topic to which Amazon Rekognition posts the completion status.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init (
            snsTopicArn: Swift.String? = nil
        )
        {
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension RekognitionClientTypes.StreamProcessorOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kinesisDataStream = "KinesisDataStream"
        case s3Destination = "S3Destination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kinesisDataStream = self.kinesisDataStream {
            try encodeContainer.encode(kinesisDataStream, forKey: .kinesisDataStream)
        }
        if let s3Destination = self.s3Destination {
            try encodeContainer.encode(s3Destination, forKey: .s3Destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kinesisDataStreamDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KinesisDataStream.self, forKey: .kinesisDataStream)
        kinesisDataStream = kinesisDataStreamDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about the Amazon Kinesis Data Streams stream to which a Amazon Rekognition Video stream processor streams the results of a video analysis. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.
    public struct StreamProcessorOutput: Swift.Equatable {
        /// The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.
        public var kinesisDataStream: RekognitionClientTypes.KinesisDataStream?
        /// The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation.
        public var s3Destination: RekognitionClientTypes.S3Destination?

        public init (
            kinesisDataStream: RekognitionClientTypes.KinesisDataStream? = nil,
            s3Destination: RekognitionClientTypes.S3Destination? = nil
        )
        {
            self.kinesisDataStream = kinesisDataStream
            self.s3Destination = s3Destination
        }
    }

}

extension RekognitionClientTypes {
    public enum StreamProcessorParameterToDelete: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connectedhomeminconfidence
        case regionsofinterest
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamProcessorParameterToDelete] {
            return [
                .connectedhomeminconfidence,
                .regionsofinterest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connectedhomeminconfidence: return "ConnectedHomeMinConfidence"
            case .regionsofinterest: return "RegionsOfInterest"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamProcessorParameterToDelete(rawValue: rawValue) ?? StreamProcessorParameterToDelete.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.StreamProcessorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectedHome = "ConnectedHome"
        case faceSearch = "FaceSearch"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectedHome = self.connectedHome {
            try encodeContainer.encode(connectedHome, forKey: .connectedHome)
        }
        if let faceSearch = self.faceSearch {
            try encodeContainer.encode(faceSearch, forKey: .faceSearch)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceSearchDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceSearchSettings.self, forKey: .faceSearch)
        faceSearch = faceSearchDecoded
        let connectedHomeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ConnectedHomeSettings.self, forKey: .connectedHome)
        connectedHome = connectedHomeDecoded
    }
}

extension RekognitionClientTypes {
    /// Input parameters used in a streaming video analyzed by a Amazon Rekognition stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    public struct StreamProcessorSettings: Swift.Equatable {
        /// Label detection settings to use on a streaming video. Defining the settings is required in the request parameter for [CreateStreamProcessor]. Including this setting in the CreateStreamProcessor request enables you to use the stream processor for label detection. You can then select what you want the stream processor to detect, such as people or pets. When the stream processor has started, one notification is sent for each object class specified. For example, if packages and pets are selected, one SNS notification is published the first time a package is detected and one SNS notification is published the first time a pet is detected, as well as an end-of-session summary.
        public var connectedHome: RekognitionClientTypes.ConnectedHomeSettings?
        /// Face search settings to use on a streaming video.
        public var faceSearch: RekognitionClientTypes.FaceSearchSettings?

        public init (
            connectedHome: RekognitionClientTypes.ConnectedHomeSettings? = nil,
            faceSearch: RekognitionClientTypes.FaceSearchSettings? = nil
        )
        {
            self.connectedHome = connectedHome
            self.faceSearch = faceSearch
        }
    }

}

extension RekognitionClientTypes.StreamProcessorSettingsForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectedHomeForUpdate = "ConnectedHomeForUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectedHomeForUpdate = self.connectedHomeForUpdate {
            try encodeContainer.encode(connectedHomeForUpdate, forKey: .connectedHomeForUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectedHomeForUpdateDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ConnectedHomeSettingsForUpdate.self, forKey: .connectedHomeForUpdate)
        connectedHomeForUpdate = connectedHomeForUpdateDecoded
    }
}

extension RekognitionClientTypes {
    /// The stream processor settings that you want to update. ConnectedHome settings can be updated to detect different labels with a different minimum confidence.
    public struct StreamProcessorSettingsForUpdate: Swift.Equatable {
        /// The label detection settings you want to use for your stream processor.
        public var connectedHomeForUpdate: RekognitionClientTypes.ConnectedHomeSettingsForUpdate?

        public init (
            connectedHomeForUpdate: RekognitionClientTypes.ConnectedHomeSettingsForUpdate? = nil
        )
        {
            self.connectedHomeForUpdate = connectedHomeForUpdate
        }
    }

}

extension RekognitionClientTypes {
    public enum StreamProcessorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case running
        case starting
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamProcessorStatus] {
            return [
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamProcessorStatus(rawValue: rawValue) ?? StreamProcessorStatus.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.Summary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ObjectDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension RekognitionClientTypes {
    /// The S3 bucket that contains the training summary. The training summary includes aggregated evaluation metrics for the entire testing dataset and metrics for each individual label. You get the training summary S3 bucket location by calling [DescribeProjectVersions].
    public struct Summary: Swift.Equatable {
        /// Provides the S3 bucket name and object name. The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations. For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init (
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes.Sunglasses: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if value != false {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .value) ?? false
        value = valueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
    public struct Sunglasses: Swift.Equatable {
        /// Level of confidence in the determination.
        public var confidence: Swift.Float?
        /// Boolean value that indicates whether the face is wearing sunglasses or not.
        public var value: Swift.Bool

        public init (
            confidence: Swift.Float? = nil,
            value: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that you want to assign the tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key-value tags to assign to the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension RekognitionClientTypes.TechnicalCueSegment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TechnicalCueType.self, forKey: .type)
        type = typeDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a technical cue segment. For more information, see [SegmentDetection].
    public struct TechnicalCueSegment: Swift.Equatable {
        /// The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.
        public var confidence: Swift.Float?
        /// The type of the technical cue.
        public var type: RekognitionClientTypes.TechnicalCueType?

        public init (
            confidence: Swift.Float? = nil,
            type: RekognitionClientTypes.TechnicalCueType? = nil
        )
        {
            self.confidence = confidence
            self.type = type
        }
    }

}

extension RekognitionClientTypes {
    public enum TechnicalCueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blackFrames
        case colorBars
        case content
        case endCredits
        case openingCredits
        case slate
        case studioLogo
        case sdkUnknown(Swift.String)

        public static var allCases: [TechnicalCueType] {
            return [
                .blackFrames,
                .colorBars,
                .content,
                .endCredits,
                .openingCredits,
                .slate,
                .studioLogo,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blackFrames: return "BlackFrames"
            case .colorBars: return "ColorBars"
            case .content: return "Content"
            case .endCredits: return "EndCredits"
            case .openingCredits: return "OpeningCredits"
            case .slate: return "Slate"
            case .studioLogo: return "StudioLogo"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TechnicalCueType(rawValue: rawValue) ?? TechnicalCueType.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.TestingData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assets = "Assets"
        case autoCreate = "AutoCreate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assets = assets {
            var assetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assets)
            for asset0 in assets {
                try assetsContainer.encode(asset0)
            }
        }
        if autoCreate != false {
            try encodeContainer.encode(autoCreate, forKey: .autoCreate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Asset?].self, forKey: .assets)
        var assetsDecoded0:[RekognitionClientTypes.Asset]? = nil
        if let assetsContainer = assetsContainer {
            assetsDecoded0 = [RekognitionClientTypes.Asset]()
            for structure0 in assetsContainer {
                if let structure0 = structure0 {
                    assetsDecoded0?.append(structure0)
                }
            }
        }
        assets = assetsDecoded0
        let autoCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoCreate) ?? false
        autoCreate = autoCreateDecoded
    }
}

extension RekognitionClientTypes {
    /// The dataset used for testing. Optionally, if AutoCreate is set, Amazon Rekognition Custom Labels uses the training dataset to create a test dataset with a temporary split of the training dataset.
    public struct TestingData: Swift.Equatable {
        /// The assets used for testing.
        public var assets: [RekognitionClientTypes.Asset]?
        /// If specified, Amazon Rekognition Custom Labels temporarily splits the training dataset (80%) to create a test dataset (20%) for the training job. After training completes, the test dataset is not stored and the training dataset reverts to its previous size.
        public var autoCreate: Swift.Bool

        public init (
            assets: [RekognitionClientTypes.Asset]? = nil,
            autoCreate: Swift.Bool = false
        )
        {
            self.assets = assets
            self.autoCreate = autoCreate
        }
    }

}

extension RekognitionClientTypes.TestingDataResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
        case output = "Output"
        case validation = "Validation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let validation = self.validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TestingData.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TestingData.self, forKey: .output)
        output = outputDecoded
        let validationDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ValidationData.self, forKey: .validation)
        validation = validationDecoded
    }
}

extension RekognitionClientTypes {
    /// Sagemaker Groundtruth format manifest files for the input, output and validation datasets that are used and created during testing.
    public struct TestingDataResult: Swift.Equatable {
        /// The testing dataset that was supplied for training.
        public var input: RekognitionClientTypes.TestingData?
        /// The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues.
        public var output: RekognitionClientTypes.TestingData?
        /// The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.
        public var validation: RekognitionClientTypes.ValidationData?

        public init (
            input: RekognitionClientTypes.TestingData? = nil,
            output: RekognitionClientTypes.TestingData? = nil,
            validation: RekognitionClientTypes.ValidationData? = nil
        )
        {
            self.input = input
            self.output = output
            self.validation = validation
        }
    }

}

extension RekognitionClientTypes.TextDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case detectedText = "DetectedText"
        case geometry = "Geometry"
        case id = "Id"
        case parentId = "ParentId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let detectedText = self.detectedText {
            try encodeContainer.encode(detectedText, forKey: .detectedText)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectedTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectedText)
        detectedText = detectedTextDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TextTypes.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .id)
        id = idDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parentId)
        parentId = parentIdDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a word or line of text detected by [DetectText]. The DetectedText field contains the text that Amazon Rekognition detected in the image. Every word and line has an identifier (Id). Each word belongs to a line and has a parent identifier (ParentId) that identifies the line of text in which the word appears. The word Id is also an index for the word within a line of words. For more information, see Detecting text in the Amazon Rekognition Developer Guide.
    public struct TextDetection: Swift.Equatable {
        /// The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.
        public var confidence: Swift.Float?
        /// The word or line of text recognized by Amazon Rekognition.
        public var detectedText: Swift.String?
        /// The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.
        public var geometry: RekognitionClientTypes.Geometry?
        /// The identifier for the detected text. The identifier is only unique for a single call to DetectText.
        public var id: Swift.Int?
        /// The Parent identifier for the detected text identified by the value of ID. If the type of detected text is LINE, the value of ParentId is Null.
        public var parentId: Swift.Int?
        /// The type of text that was detected.
        public var type: RekognitionClientTypes.TextTypes?

        public init (
            confidence: Swift.Float? = nil,
            detectedText: Swift.String? = nil,
            geometry: RekognitionClientTypes.Geometry? = nil,
            id: Swift.Int? = nil,
            parentId: Swift.Int? = nil,
            type: RekognitionClientTypes.TextTypes? = nil
        )
        {
            self.confidence = confidence
            self.detectedText = detectedText
            self.geometry = geometry
            self.id = id
            self.parentId = parentId
            self.type = type
        }
    }

}

extension RekognitionClientTypes.TextDetectionResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textDetection = "TextDetection"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let textDetection = self.textDetection {
            try encodeContainer.encode(textDetection, forKey: .textDetection)
        }
        if timestamp != 0 {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp) ?? 0
        timestamp = timestampDecoded
        let textDetectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TextDetection.self, forKey: .textDetection)
        textDetection = textDetectionDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about text detected in a video. Incudes the detected text, the time in milliseconds from the start of the video that the text was detected, and where it was detected on the screen.
    public struct TextDetectionResult: Swift.Equatable {
        /// Details about text detected in a video.
        public var textDetection: RekognitionClientTypes.TextDetection?
        /// The time, in milliseconds from the start of the video, that the text was detected. Note that Timestamp is not guaranteed to be accurate to the individual frame where the text first appears.
        public var timestamp: Swift.Int

        public init (
            textDetection: RekognitionClientTypes.TextDetection? = nil,
            timestamp: Swift.Int = 0
        )
        {
            self.textDetection = textDetection
            self.timestamp = timestamp
        }
    }

}

extension RekognitionClientTypes {
    public enum TextTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case line
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTypes] {
            return [
                .line,
                .word,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .line: return "LINE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextTypes(rawValue: rawValue) ?? TextTypes.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Rekognition is temporarily unable to process the request. Try your call again.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}

extension RekognitionClientTypes.TrainingData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assets = "Assets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assets = assets {
            var assetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assets)
            for asset0 in assets {
                try assetsContainer.encode(asset0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Asset?].self, forKey: .assets)
        var assetsDecoded0:[RekognitionClientTypes.Asset]? = nil
        if let assetsContainer = assetsContainer {
            assetsDecoded0 = [RekognitionClientTypes.Asset]()
            for structure0 in assetsContainer {
                if let structure0 = structure0 {
                    assetsDecoded0?.append(structure0)
                }
            }
        }
        assets = assetsDecoded0
    }
}

extension RekognitionClientTypes {
    /// The dataset used for training.
    public struct TrainingData: Swift.Equatable {
        /// A Sagemaker GroundTruth manifest file that contains the training images (assets).
        public var assets: [RekognitionClientTypes.Asset]?

        public init (
            assets: [RekognitionClientTypes.Asset]? = nil
        )
        {
            self.assets = assets
        }
    }

}

extension RekognitionClientTypes.TrainingDataResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
        case output = "Output"
        case validation = "Validation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let validation = self.validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TrainingData.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TrainingData.self, forKey: .output)
        output = outputDecoded
        let validationDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ValidationData.self, forKey: .validation)
        validation = validationDecoded
    }
}

extension RekognitionClientTypes {
    /// Sagemaker Groundtruth format manifest files for the input, output and validation datasets that are used and created during testing.
    public struct TrainingDataResult: Swift.Equatable {
        /// The training assets that you supplied for training.
        public var input: RekognitionClientTypes.TrainingData?
        /// The images (assets) that were actually trained by Amazon Rekognition Custom Labels.
        public var output: RekognitionClientTypes.TrainingData?
        /// The location of the data validation manifest. The data validation manifest is created for the training dataset during model training.
        public var validation: RekognitionClientTypes.ValidationData?

        public init (
            input: RekognitionClientTypes.TrainingData? = nil,
            output: RekognitionClientTypes.TrainingData? = nil,
            validation: RekognitionClientTypes.ValidationData? = nil
        )
        {
            self.input = input
            self.output = output
            self.validation = validation
        }
    }

}

extension RekognitionClientTypes.UnindexedFace: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceDetail = "FaceDetail"
        case reasons = "Reasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let faceDetail = self.faceDetail {
            try encodeContainer.encode(faceDetail, forKey: .faceDetail)
        }
        if let reasons = reasons {
            var reasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reasons)
            for reason0 in reasons {
                try reasonsContainer.encode(reason0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Reason?].self, forKey: .reasons)
        var reasonsDecoded0:[RekognitionClientTypes.Reason]? = nil
        if let reasonsContainer = reasonsContainer {
            reasonsDecoded0 = [RekognitionClientTypes.Reason]()
            for enum0 in reasonsContainer {
                if let enum0 = enum0 {
                    reasonsDecoded0?.append(enum0)
                }
            }
        }
        reasons = reasonsDecoded0
        let faceDetailDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.FaceDetail.self, forKey: .faceDetail)
        faceDetail = faceDetailDecoded
    }
}

extension RekognitionClientTypes {
    /// A face that [IndexFaces] detected, but didn't index. Use the Reasons response attribute to determine why a face wasn't indexed.
    public struct UnindexedFace: Swift.Equatable {
        /// The structure that contains attributes of a face that IndexFacesdetected, but didn't index.
        public var faceDetail: RekognitionClientTypes.FaceDetail?
        /// An array of reasons that specify why a face wasn't indexed.
        ///
        /// * EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.
        ///
        /// * EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the MaxFaces input parameter for IndexFaces.
        ///
        /// * LOW_BRIGHTNESS - The image is too dark.
        ///
        /// * LOW_SHARPNESS - The image is too blurry.
        ///
        /// * LOW_CONFIDENCE - The face was detected with a low confidence.
        ///
        /// * SMALL_BOUNDING_BOX - The bounding box around the face is too small.
        public var reasons: [RekognitionClientTypes.Reason]?

        public init (
            faceDetail: RekognitionClientTypes.FaceDetail? = nil,
            reasons: [RekognitionClientTypes.Reason]? = nil
        )
        {
            self.faceDetail = faceDetail
            self.reasons = reasons
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// Amazon Resource Name (ARN) of the model, collection, or stream processor that you want to remove the tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDatasetEntriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changes = "Changes"
        case datasetArn = "DatasetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changes = self.changes {
            try encodeContainer.encode(changes, forKey: .changes)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
    }
}

extension UpdateDatasetEntriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDatasetEntriesInput: Swift.Equatable {
    /// The changes that you want to make to the dataset.
    /// This member is required.
    public var changes: RekognitionClientTypes.DatasetChanges?
    /// The Amazon Resource Name (ARN) of the dataset that you want to update.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init (
        changes: RekognitionClientTypes.DatasetChanges? = nil,
        datasetArn: Swift.String? = nil
    )
    {
        self.changes = changes
        self.datasetArn = datasetArn
    }
}

struct UpdateDatasetEntriesInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
    let changes: RekognitionClientTypes.DatasetChanges?
}

extension UpdateDatasetEntriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changes = "Changes"
        case datasetArn = "DatasetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let changesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetChanges.self, forKey: .changes)
        changes = changesDecoded
    }
}

extension UpdateDatasetEntriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDatasetEntriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDatasetEntriesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDatasetEntriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDatasetEntriesOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreferenceForUpdate = "DataSharingPreferenceForUpdate"
        case name = "Name"
        case parametersToDelete = "ParametersToDelete"
        case regionsOfInterestForUpdate = "RegionsOfInterestForUpdate"
        case settingsForUpdate = "SettingsForUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSharingPreferenceForUpdate = self.dataSharingPreferenceForUpdate {
            try encodeContainer.encode(dataSharingPreferenceForUpdate, forKey: .dataSharingPreferenceForUpdate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parametersToDelete = parametersToDelete {
            var parametersToDeleteContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parametersToDelete)
            for streamprocessorparametertodelete0 in parametersToDelete {
                try parametersToDeleteContainer.encode(streamprocessorparametertodelete0.rawValue)
            }
        }
        if let regionsOfInterestForUpdate = regionsOfInterestForUpdate {
            var regionsOfInterestForUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterestForUpdate)
            for regionofinterest0 in regionsOfInterestForUpdate {
                try regionsOfInterestForUpdateContainer.encode(regionofinterest0)
            }
        }
        if let settingsForUpdate = self.settingsForUpdate {
            try encodeContainer.encode(settingsForUpdate, forKey: .settingsForUpdate)
        }
    }
}

extension UpdateStreamProcessorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStreamProcessorInput: Swift.Equatable {
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Name of the stream processor that you want to update.
    /// This member is required.
    public var name: Swift.String?
    /// A list of parameters you want to delete from the stream processor.
    public var parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. This is an optional parameter for label detection stream processors.
    public var regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]?
    /// The stream processor settings that you want to update. Label detection settings can be updated to detect different labels with a different minimum confidence.
    public var settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate?

    public init (
        dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        name: Swift.String? = nil,
        parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]? = nil,
        regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]? = nil,
        settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate? = nil
    )
    {
        self.dataSharingPreferenceForUpdate = dataSharingPreferenceForUpdate
        self.name = name
        self.parametersToDelete = parametersToDelete
        self.regionsOfInterestForUpdate = regionsOfInterestForUpdate
        self.settingsForUpdate = settingsForUpdate
    }
}

struct UpdateStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
    let settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate?
    let regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]?
    let dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    let parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]?
}

extension UpdateStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreferenceForUpdate = "DataSharingPreferenceForUpdate"
        case name = "Name"
        case parametersToDelete = "ParametersToDelete"
        case regionsOfInterestForUpdate = "RegionsOfInterestForUpdate"
        case settingsForUpdate = "SettingsForUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let settingsForUpdateDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorSettingsForUpdate.self, forKey: .settingsForUpdate)
        settingsForUpdate = settingsForUpdateDecoded
        let regionsOfInterestForUpdateContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterestForUpdate)
        var regionsOfInterestForUpdateDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestForUpdateContainer = regionsOfInterestForUpdateContainer {
            regionsOfInterestForUpdateDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestForUpdateContainer {
                if let structure0 = structure0 {
                    regionsOfInterestForUpdateDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterestForUpdate = regionsOfInterestForUpdateDecoded0
        let dataSharingPreferenceForUpdateDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorDataSharingPreference.self, forKey: .dataSharingPreferenceForUpdate)
        dataSharingPreferenceForUpdate = dataSharingPreferenceForUpdateDecoded
        let parametersToDeleteContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.StreamProcessorParameterToDelete?].self, forKey: .parametersToDelete)
        var parametersToDeleteDecoded0:[RekognitionClientTypes.StreamProcessorParameterToDelete]? = nil
        if let parametersToDeleteContainer = parametersToDeleteContainer {
            parametersToDeleteDecoded0 = [RekognitionClientTypes.StreamProcessorParameterToDelete]()
            for enum0 in parametersToDeleteContainer {
                if let enum0 = enum0 {
                    parametersToDeleteDecoded0?.append(enum0)
                }
            }
        }
        parametersToDelete = parametersToDeleteDecoded0
    }
}

extension UpdateStreamProcessorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStreamProcessorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStreamProcessorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerError(InternalServerError)
    case invalidParameterException(InvalidParameterException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStreamProcessorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStreamProcessorOutputResponse: Swift.Equatable {

    public init () { }
}

extension RekognitionClientTypes.ValidationData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assets = "Assets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assets = assets {
            var assetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assets)
            for asset0 in assets {
                try assetsContainer.encode(asset0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Asset?].self, forKey: .assets)
        var assetsDecoded0:[RekognitionClientTypes.Asset]? = nil
        if let assetsContainer = assetsContainer {
            assetsDecoded0 = [RekognitionClientTypes.Asset]()
            for structure0 in assetsContainer {
                if let structure0 = structure0 {
                    assetsDecoded0?.append(structure0)
                }
            }
        }
        assets = assetsDecoded0
    }
}

extension RekognitionClientTypes {
    /// Contains the Amazon S3 bucket location of the validation data for a model training job. The validation data includes error information for individual JSON Lines in the dataset. For more information, see Debugging a Failed Model Training in the Amazon Rekognition Custom Labels Developer Guide. You get the ValidationData object for the training dataset ([TrainingDataResult]) and the test dataset ([TestingDataResult]) by calling [DescribeProjectVersions]. The assets array contains a single [Asset] object. The [GroundTruthManifest] field of the Asset object contains the S3 bucket location of the validation data.
    public struct ValidationData: Swift.Equatable {
        /// The assets that comprise the validation data.
        public var assets: [RekognitionClientTypes.Asset]?

        public init (
            assets: [RekognitionClientTypes.Asset]? = nil
        )
        {
            self.assets = assets
        }
    }

}

extension RekognitionClientTypes.Video: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Object = "S3Object"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Object = self.s3Object {
            try encodeContainer.encode(s3Object, forKey: .s3Object)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ObjectDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.S3Object.self, forKey: .s3Object)
        s3Object = s3ObjectDecoded
    }
}

extension RekognitionClientTypes {
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    public struct Video: Swift.Equatable {
        /// The Amazon S3 bucket name and file name for the video.
        public var s3Object: RekognitionClientTypes.S3Object?

        public init (
            s3Object: RekognitionClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }

}

extension RekognitionClientTypes {
    public enum VideoColorRange: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case full
        case limited
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoColorRange] {
            return [
                .full,
                .limited,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .full: return "FULL"
            case .limited: return "LIMITED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoColorRange(rawValue: rawValue) ?? VideoColorRange.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes {
    public enum VideoJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoJobStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoJobStatus(rawValue: rawValue) ?? VideoJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension RekognitionClientTypes.VideoMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codec = "Codec"
        case colorRange = "ColorRange"
        case durationMillis = "DurationMillis"
        case format = "Format"
        case frameHeight = "FrameHeight"
        case frameRate = "FrameRate"
        case frameWidth = "FrameWidth"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codec = self.codec {
            try encodeContainer.encode(codec, forKey: .codec)
        }
        if let colorRange = self.colorRange {
            try encodeContainer.encode(colorRange.rawValue, forKey: .colorRange)
        }
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let format = self.format {
            try encodeContainer.encode(format, forKey: .format)
        }
        if let frameHeight = self.frameHeight {
            try encodeContainer.encode(frameHeight, forKey: .frameHeight)
        }
        if let frameRate = self.frameRate {
            try encodeContainer.encode(frameRate, forKey: .frameRate)
        }
        if let frameWidth = self.frameWidth {
            try encodeContainer.encode(frameWidth, forKey: .frameWidth)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codec)
        codec = codecDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let frameRateDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .frameRate)
        frameRate = frameRateDecoded
        let frameHeightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .frameHeight)
        frameHeight = frameHeightDecoded
        let frameWidthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .frameWidth)
        frameWidth = frameWidthDecoded
        let colorRangeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.VideoColorRange.self, forKey: .colorRange)
        colorRange = colorRangeDecoded
    }
}

extension RekognitionClientTypes {
    /// Information about a video that Amazon Rekognition analyzed. Videometadata is returned in every page of paginated responses from a Amazon Rekognition video operation.
    public struct VideoMetadata: Swift.Equatable {
        /// Type of compression used in the analyzed video.
        public var codec: Swift.String?
        /// A description of the range of luminance values in a video, either LIMITED (16 to 235) or FULL (0 to 255).
        public var colorRange: RekognitionClientTypes.VideoColorRange?
        /// Length of the video in milliseconds.
        public var durationMillis: Swift.Int?
        /// Format of the analyzed video. Possible values are MP4, MOV and AVI.
        public var format: Swift.String?
        /// Vertical pixel dimension of the video.
        public var frameHeight: Swift.Int?
        /// Number of frames per second in the video.
        public var frameRate: Swift.Float?
        /// Horizontal pixel dimension of the video.
        public var frameWidth: Swift.Int?

        public init (
            codec: Swift.String? = nil,
            colorRange: RekognitionClientTypes.VideoColorRange? = nil,
            durationMillis: Swift.Int? = nil,
            format: Swift.String? = nil,
            frameHeight: Swift.Int? = nil,
            frameRate: Swift.Float? = nil,
            frameWidth: Swift.Int? = nil
        )
        {
            self.codec = codec
            self.colorRange = colorRange
            self.durationMillis = durationMillis
            self.format = format
            self.frameHeight = frameHeight
            self.frameRate = frameRate
            self.frameWidth = frameWidth
        }
    }

}

extension VideoTooLargeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VideoTooLargeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.logref = output.logref
            self.message = output.message
        } else {
            self.code = nil
            self.logref = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The file size or duration of the supplied media is too large. The maximum file size is 10GB. The maximum duration is 6 hours.
public struct VideoTooLargeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    /// A universally unique identifier (UUID) for the request.
    public var logref: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        logref: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.logref = logref
        self.message = message
    }
}

struct VideoTooLargeExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.String?
    let logref: Swift.String?
}

extension VideoTooLargeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case logref = "Logref"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let logrefDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logref)
        logref = logrefDecoded
    }
}
