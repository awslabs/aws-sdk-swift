//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// The resource specified in your request already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that defines a message that contains text formatted using Amazon Pinpoint Voice Instructions markup.
    public struct CallInstructionsMessageType: Swift.Sendable {
        /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
        public var text: Swift.String?

        public init(
            text: Swift.String? = nil
        )
        {
            self.text = text
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that contains information about an event destination that sends data to Amazon CloudWatch Logs.
    public struct CloudWatchLogsDestination: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an Amazon Identity and Access Management (IAM) role that is able to write event data to an Amazon CloudWatch destination.
        public var iamRoleArn: Swift.String?
        /// The name of the Amazon CloudWatch Log Group that you want to record events in.
        public var logGroupArn: Swift.String?

        public init(
            iamRoleArn: Swift.String? = nil,
            logGroupArn: Swift.String? = nil
        )
        {
            self.iamRoleArn = iamRoleArn
            self.logGroupArn = logGroupArn
        }
    }
}

/// The API encountered an unexpected error and couldn't complete the request. You might be able to successfully issue the request again in the future.
public struct InternalServiceErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've issued too many requests to the resource. Wait a few minutes, and then try again.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A request to create a new configuration set.
public struct CreateConfigurationSetInput: Swift.Sendable {
    /// The name that you want to give the configuration set.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// An empty object that indicates that the configuration set was successfully created.
public struct CreateConfigurationSetOutput: Swift.Sendable {

    public init() { }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that contains information about an event destination that sends data to Amazon Kinesis Data Firehose.
    public struct KinesisFirehoseDestination: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an IAM role that can write data to an Amazon Kinesis Data Firehose stream.
        public var deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose destination that you want to use in the event destination.
        public var iamRoleArn: Swift.String?

        public init(
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// The types of events that are sent to the event destination.
    public enum EventType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case answered
        case busy
        case completedCall
        case failed
        case initiatedCall
        case noAnswer
        case ringing
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .answered,
                .busy,
                .completedCall,
                .failed,
                .initiatedCall,
                .noAnswer,
                .ringing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .answered: return "ANSWERED"
            case .busy: return "BUSY"
            case .completedCall: return "COMPLETED_CALL"
            case .failed: return "FAILED"
            case .initiatedCall: return "INITIATED_CALL"
            case .noAnswer: return "NO_ANSWER"
            case .ringing: return "RINGING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that contains information about an event destination that sends data to Amazon SNS.
    public struct SnsDestination: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        public var topicArn: Swift.String?

        public init(
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that defines a single event destination.
    public struct EventDestinationDefinition: Swift.Sendable {
        /// An object that contains information about an event destination that sends data to Amazon CloudWatch Logs.
        public var cloudWatchLogsDestination: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination?
        /// Indicates whether or not the event destination is enabled. If the event destination is enabled, then Amazon Pinpoint sends response data to the specified event destination.
        public var enabled: Swift.Bool?
        /// An object that contains information about an event destination that sends data to Amazon Kinesis Data Firehose.
        public var kinesisFirehoseDestination: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination?
        /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
        public var matchingEventTypes: [PinpointSMSVoiceClientTypes.EventType]?
        /// An object that contains information about an event destination that sends data to Amazon SNS.
        public var snsDestination: PinpointSMSVoiceClientTypes.SnsDestination?

        public init(
            cloudWatchLogsDestination: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination? = nil,
            enabled: Swift.Bool? = nil,
            kinesisFirehoseDestination: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointSMSVoiceClientTypes.EventType]? = nil,
            snsDestination: PinpointSMSVoiceClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchLogsDestination = cloudWatchLogsDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.snsDestination = snsDestination
        }
    }
}

/// Create a new event destination in a configuration set.
public struct CreateConfigurationSetEventDestinationInput: Swift.Sendable {
    /// ConfigurationSetName
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines a single event destination.
    public var eventDestination: PinpointSMSVoiceClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointSMSVoiceClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An empty object that indicates that the event destination was created successfully.
public struct CreateConfigurationSetEventDestinationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteConfigurationSetInput: Swift.Sendable {
    /// ConfigurationSetName
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// An empty object that indicates that the configuration set was deleted successfully.
public struct DeleteConfigurationSetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteConfigurationSetEventDestinationInput: Swift.Sendable {
    /// ConfigurationSetName
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// EventDestinationName
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

/// An empty object that indicates that the event destination was deleted successfully.
public struct DeleteConfigurationSetEventDestinationOutput: Swift.Sendable {

    public init() { }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that defines an event destination.
    public struct EventDestination: Swift.Sendable {
        /// An object that contains information about an event destination that sends data to Amazon CloudWatch Logs.
        public var cloudWatchLogsDestination: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination?
        /// Indicates whether or not the event destination is enabled. If the event destination is enabled, then Amazon Pinpoint sends response data to the specified event destination.
        public var enabled: Swift.Bool?
        /// An object that contains information about an event destination that sends data to Amazon Kinesis Data Firehose.
        public var kinesisFirehoseDestination: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination?
        /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
        public var matchingEventTypes: [PinpointSMSVoiceClientTypes.EventType]?
        /// A name that identifies the event destination configuration.
        public var name: Swift.String?
        /// An object that contains information about an event destination that sends data to Amazon SNS.
        public var snsDestination: PinpointSMSVoiceClientTypes.SnsDestination?

        public init(
            cloudWatchLogsDestination: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination? = nil,
            enabled: Swift.Bool? = nil,
            kinesisFirehoseDestination: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [PinpointSMSVoiceClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            snsDestination: PinpointSMSVoiceClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchLogsDestination = cloudWatchLogsDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.snsDestination = snsDestination
        }
    }
}

public struct GetConfigurationSetEventDestinationsInput: Swift.Sendable {
    /// ConfigurationSetName
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// An object that contains information about an event destination.
public struct GetConfigurationSetEventDestinationsOutput: Swift.Sendable {
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    public var eventDestinations: [PinpointSMSVoiceClientTypes.EventDestination]?

    public init(
        eventDestinations: [PinpointSMSVoiceClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

public struct ListConfigurationSetsInput: Swift.Sendable {
    /// A token returned from a previous call to the API that indicates the position in the list of results.
    public var nextToken: Swift.String?
    /// Used to specify the number of items that should be returned in the response.
    public var pageSize: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// An object that contains information about the configuration sets for your account in the current region.
public struct ListConfigurationSetsOutput: Swift.Sendable {
    /// An object that contains a list of configuration sets for your account in the current region.
    public var configurationSets: [Swift.String]?
    /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
    public var nextToken: Swift.String?

    public init(
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that defines a message that contains unformatted text.
    public struct PlainTextMessageType: Swift.Sendable {
        /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
        public var languageCode: Swift.String?
        /// The plain (not SSML-formatted) text to deliver to the recipient.
        public var text: Swift.String?
        /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
        public var voiceId: Swift.String?

        public init(
            languageCode: Swift.String? = nil,
            text: Swift.String? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.languageCode = languageCode
            self.text = text
            self.voiceId = voiceId
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that defines a message that contains SSML-formatted text.
    public struct SSMLMessageType: Swift.Sendable {
        /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
        public var languageCode: Swift.String?
        /// The SSML-formatted text to deliver to the recipient.
        public var text: Swift.String?
        /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
        public var voiceId: Swift.String?

        public init(
            languageCode: Swift.String? = nil,
            text: Swift.String? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.languageCode = languageCode
            self.text = text
            self.voiceId = voiceId
        }
    }
}

extension PinpointSMSVoiceClientTypes {

    /// An object that contains a voice message and information about the recipient that you want to send it to.
    public struct VoiceMessageContent: Swift.Sendable {
        /// An object that defines a message that contains text formatted using Amazon Pinpoint Voice Instructions markup.
        public var callInstructionsMessage: PinpointSMSVoiceClientTypes.CallInstructionsMessageType?
        /// An object that defines a message that contains unformatted text.
        public var plainTextMessage: PinpointSMSVoiceClientTypes.PlainTextMessageType?
        /// An object that defines a message that contains SSML-formatted text.
        public var ssmlMessage: PinpointSMSVoiceClientTypes.SSMLMessageType?

        public init(
            callInstructionsMessage: PinpointSMSVoiceClientTypes.CallInstructionsMessageType? = nil,
            plainTextMessage: PinpointSMSVoiceClientTypes.PlainTextMessageType? = nil,
            ssmlMessage: PinpointSMSVoiceClientTypes.SSMLMessageType? = nil
        )
        {
            self.callInstructionsMessage = callInstructionsMessage
            self.plainTextMessage = plainTextMessage
            self.ssmlMessage = ssmlMessage
        }
    }
}

/// SendVoiceMessageRequest
public struct SendVoiceMessageInput: Swift.Sendable {
    /// The phone number that appears on recipients' devices when they receive the message.
    public var callerId: Swift.String?
    /// The name of the configuration set that you want to use to send the message.
    public var configurationSetName: Swift.String?
    /// An object that contains a voice message and information about the recipient that you want to send it to.
    public var content: PinpointSMSVoiceClientTypes.VoiceMessageContent?
    /// The phone number that you want to send the voice message to.
    public var destinationPhoneNumber: Swift.String?
    /// The phone number that Amazon Pinpoint should use to send the voice message. This isn't necessarily the phone number that appears on recipients' devices when they receive the message, because you can specify a CallerId parameter in the request.
    public var originationPhoneNumber: Swift.String?

    public init(
        callerId: Swift.String? = nil,
        configurationSetName: Swift.String? = nil,
        content: PinpointSMSVoiceClientTypes.VoiceMessageContent? = nil,
        destinationPhoneNumber: Swift.String? = nil,
        originationPhoneNumber: Swift.String? = nil
    )
    {
        self.callerId = callerId
        self.configurationSetName = configurationSetName
        self.content = content
        self.destinationPhoneNumber = destinationPhoneNumber
        self.originationPhoneNumber = originationPhoneNumber
    }
}

/// An object that that contains the Message ID of a Voice message that was sent successfully.
public struct SendVoiceMessageOutput: Swift.Sendable {
    /// A unique identifier for the voice message.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

/// UpdateConfigurationSetEventDestinationRequest
public struct UpdateConfigurationSetEventDestinationInput: Swift.Sendable {
    /// ConfigurationSetName
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines a single event destination.
    public var eventDestination: PinpointSMSVoiceClientTypes.EventDestinationDefinition?
    /// EventDestinationName
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: PinpointSMSVoiceClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An empty object that indicates that the event destination was updated successfully.
public struct UpdateConfigurationSetEventDestinationOutput: Swift.Sendable {

    public init() { }
}

extension CreateConfigurationSetInput {

    static func urlPathProvider(_ value: CreateConfigurationSetInput) -> Swift.String? {
        return "/v1/sms-voice/configuration-sets"
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: CreateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/sms-voice/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension DeleteConfigurationSetInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/sms-voice/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

extension DeleteConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v1/sms-voice/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension GetConfigurationSetEventDestinationsInput {

    static func urlPathProvider(_ value: GetConfigurationSetEventDestinationsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v1/sms-voice/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension ListConfigurationSetsInput {

    static func urlPathProvider(_ value: ListConfigurationSetsInput) -> Swift.String? {
        return "/v1/sms-voice/configuration-sets"
    }
}

extension ListConfigurationSetsInput {

    static func queryItemProvider(_ value: ListConfigurationSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension SendVoiceMessageInput {

    static func urlPathProvider(_ value: SendVoiceMessageInput) -> Swift.String? {
        return "/v1/sms-voice/voice/message"
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v1/sms-voice/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension CreateConfigurationSetInput {

    static func write(value: CreateConfigurationSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func write(value: CreateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: PinpointSMSVoiceClientTypes.EventDestinationDefinition.write(value:to:))
        try writer["EventDestinationName"].write(value.eventDestinationName)
    }
}

extension SendVoiceMessageInput {

    static func write(value: SendVoiceMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallerId"].write(value.callerId)
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["Content"].write(value.content, with: PinpointSMSVoiceClientTypes.VoiceMessageContent.write(value:to:))
        try writer["DestinationPhoneNumber"].write(value.destinationPhoneNumber)
        try writer["OriginationPhoneNumber"].write(value.originationPhoneNumber)
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func write(value: UpdateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: PinpointSMSVoiceClientTypes.EventDestinationDefinition.write(value:to:))
    }
}

extension CreateConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetOutput {
        return CreateConfigurationSetOutput()
    }
}

extension CreateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetEventDestinationOutput {
        return CreateConfigurationSetEventDestinationOutput()
    }
}

extension DeleteConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetOutput {
        return DeleteConfigurationSetOutput()
    }
}

extension DeleteConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetEventDestinationOutput {
        return DeleteConfigurationSetEventDestinationOutput()
    }
}

extension GetConfigurationSetEventDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationSetEventDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationSetEventDestinationsOutput()
        value.eventDestinations = try reader["EventDestinations"].readListIfPresent(memberReadingClosure: PinpointSMSVoiceClientTypes.EventDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListConfigurationSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfigurationSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfigurationSetsOutput()
        value.configurationSets = try reader["ConfigurationSets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension SendVoiceMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendVoiceMessageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendVoiceMessageOutput()
        value.messageId = try reader["MessageId"].readIfPresent()
        return value
    }
}

extension UpdateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationSetEventDestinationOutput {
        return UpdateConfigurationSetEventDestinationOutput()
    }
}

enum CreateConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationSetEventDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfigurationSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendVoiceMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PinpointSMSVoiceClientTypes.EventDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointSMSVoiceClientTypes.EventDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointSMSVoiceClientTypes.EventDestination()
        value.cloudWatchLogsDestination = try reader["CloudWatchLogsDestination"].readIfPresent(with: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination.read(from:))
        value.enabled = try reader["Enabled"].readIfPresent()
        value.kinesisFirehoseDestination = try reader["KinesisFirehoseDestination"].readIfPresent(with: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination.read(from:))
        value.matchingEventTypes = try reader["MatchingEventTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<PinpointSMSVoiceClientTypes.EventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.snsDestination = try reader["SnsDestination"].readIfPresent(with: PinpointSMSVoiceClientTypes.SnsDestination.read(from:))
        return value
    }
}

extension PinpointSMSVoiceClientTypes.SnsDestination {

    static func write(value: PinpointSMSVoiceClientTypes.SnsDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TopicArn"].write(value.topicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointSMSVoiceClientTypes.SnsDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointSMSVoiceClientTypes.SnsDestination()
        value.topicArn = try reader["TopicArn"].readIfPresent()
        return value
    }
}

extension PinpointSMSVoiceClientTypes.KinesisFirehoseDestination {

    static func write(value: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamArn"].write(value.deliveryStreamArn)
        try writer["IamRoleArn"].write(value.iamRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointSMSVoiceClientTypes.KinesisFirehoseDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointSMSVoiceClientTypes.KinesisFirehoseDestination()
        value.deliveryStreamArn = try reader["DeliveryStreamArn"].readIfPresent()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
        return value
    }
}

extension PinpointSMSVoiceClientTypes.CloudWatchLogsDestination {

    static func write(value: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LogGroupArn"].write(value.logGroupArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PinpointSMSVoiceClientTypes.CloudWatchLogsDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PinpointSMSVoiceClientTypes.CloudWatchLogsDestination()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
        value.logGroupArn = try reader["LogGroupArn"].readIfPresent()
        return value
    }
}

extension PinpointSMSVoiceClientTypes.EventDestinationDefinition {

    static func write(value: PinpointSMSVoiceClientTypes.EventDestinationDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLogsDestination"].write(value.cloudWatchLogsDestination, with: PinpointSMSVoiceClientTypes.CloudWatchLogsDestination.write(value:to:))
        try writer["Enabled"].write(value.enabled)
        try writer["KinesisFirehoseDestination"].write(value.kinesisFirehoseDestination, with: PinpointSMSVoiceClientTypes.KinesisFirehoseDestination.write(value:to:))
        try writer["MatchingEventTypes"].writeList(value.matchingEventTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<PinpointSMSVoiceClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SnsDestination"].write(value.snsDestination, with: PinpointSMSVoiceClientTypes.SnsDestination.write(value:to:))
    }
}

extension PinpointSMSVoiceClientTypes.VoiceMessageContent {

    static func write(value: PinpointSMSVoiceClientTypes.VoiceMessageContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallInstructionsMessage"].write(value.callInstructionsMessage, with: PinpointSMSVoiceClientTypes.CallInstructionsMessageType.write(value:to:))
        try writer["PlainTextMessage"].write(value.plainTextMessage, with: PinpointSMSVoiceClientTypes.PlainTextMessageType.write(value:to:))
        try writer["SSMLMessage"].write(value.ssmlMessage, with: PinpointSMSVoiceClientTypes.SSMLMessageType.write(value:to:))
    }
}

extension PinpointSMSVoiceClientTypes.SSMLMessageType {

    static func write(value: PinpointSMSVoiceClientTypes.SSMLMessageType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
        try writer["VoiceId"].write(value.voiceId)
    }
}

extension PinpointSMSVoiceClientTypes.PlainTextMessageType {

    static func write(value: PinpointSMSVoiceClientTypes.PlainTextMessageType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
        try writer["VoiceId"].write(value.voiceId)
    }
}

extension PinpointSMSVoiceClientTypes.CallInstructionsMessageType {

    static func write(value: PinpointSMSVoiceClientTypes.CallInstructionsMessageType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Text"].write(value.text)
    }
}

public enum PinpointSMSVoiceClientTypes {}
