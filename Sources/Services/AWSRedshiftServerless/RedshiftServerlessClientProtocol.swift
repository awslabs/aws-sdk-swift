// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// This is an interface reference for Amazon Redshift Serverless. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift Serverless. Amazon Redshift Serverless automatically provisions data warehouse capacity and intelligently scales the underlying resources based on workload demands. Amazon Redshift Serverless adjusts capacity in seconds to deliver consistently high performance and simplified operations for even the most demanding and volatile workloads. Amazon Redshift Serverless lets you focus on using your data to acquire new insights for your business and customers. To learn more about Amazon Redshift Serverless, see [What is Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-whatis.html).
public protocol RedshiftServerlessClientProtocol {
    /// Converts a recovery point to a snapshot. For more information about recovery points and snapshots, see [Working with snapshots and recovery points](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html).
    func convertRecoveryPointToSnapshot(input: ConvertRecoveryPointToSnapshotInput) async throws -> ConvertRecoveryPointToSnapshotOutputResponse
    /// Creates an Amazon Redshift Serverless managed VPC endpoint.
    func createEndpointAccess(input: CreateEndpointAccessInput) async throws -> CreateEndpointAccessOutputResponse
    /// Creates a namespace in Amazon Redshift Serverless.
    func createNamespace(input: CreateNamespaceInput) async throws -> CreateNamespaceOutputResponse
    /// Creates a snapshot of all databases in a namespace. For more information about snapshots, see [ Working with snapshots and recovery points](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html).
    func createSnapshot(input: CreateSnapshotInput) async throws -> CreateSnapshotOutputResponse
    /// Creates a usage limit for a specified Amazon Redshift Serverless usage type. The usage limit is identified by the returned usage limit identifier.
    func createUsageLimit(input: CreateUsageLimitInput) async throws -> CreateUsageLimitOutputResponse
    /// Creates an workgroup in Amazon Redshift Serverless.
    func createWorkgroup(input: CreateWorkgroupInput) async throws -> CreateWorkgroupOutputResponse
    /// Deletes an Amazon Redshift Serverless managed VPC endpoint.
    func deleteEndpointAccess(input: DeleteEndpointAccessInput) async throws -> DeleteEndpointAccessOutputResponse
    /// Deletes a namespace from Amazon Redshift Serverless. Before you delete the namespace, you can create a final snapshot that has all of the data within the namespace.
    func deleteNamespace(input: DeleteNamespaceInput) async throws -> DeleteNamespaceOutputResponse
    /// Deletes the specified resource policy.
    func deleteResourcePolicy(input: DeleteResourcePolicyInput) async throws -> DeleteResourcePolicyOutputResponse
    /// Deletes a snapshot from Amazon Redshift Serverless.
    func deleteSnapshot(input: DeleteSnapshotInput) async throws -> DeleteSnapshotOutputResponse
    /// Deletes a usage limit from Amazon Redshift Serverless.
    func deleteUsageLimit(input: DeleteUsageLimitInput) async throws -> DeleteUsageLimitOutputResponse
    /// Deletes a workgroup.
    func deleteWorkgroup(input: DeleteWorkgroupInput) async throws -> DeleteWorkgroupOutputResponse
    /// Returns a database user name and temporary password with temporary authorization to log in to Amazon Redshift Serverless. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). The Identity and Access Management (IAM) user or role that runs GetCredentials must have an IAM policy attached that allows access to all necessary actions and resources. If the DbName parameter is specified, the IAM policy must allow access to the resource dbname for the specified database name.
    func getCredentials(input: GetCredentialsInput) async throws -> GetCredentialsOutputResponse
    /// Returns information, such as the name, about a VPC endpoint.
    func getEndpointAccess(input: GetEndpointAccessInput) async throws -> GetEndpointAccessOutputResponse
    /// Returns information about a namespace in Amazon Redshift Serverless.
    func getNamespace(input: GetNamespaceInput) async throws -> GetNamespaceOutputResponse
    /// Returns information about a recovery point.
    func getRecoveryPoint(input: GetRecoveryPointInput) async throws -> GetRecoveryPointOutputResponse
    /// Returns a resource policy.
    func getResourcePolicy(input: GetResourcePolicyInput) async throws -> GetResourcePolicyOutputResponse
    /// Returns information about a specific snapshot.
    func getSnapshot(input: GetSnapshotInput) async throws -> GetSnapshotOutputResponse
    /// Returns information about a TableRestoreStatus object.
    func getTableRestoreStatus(input: GetTableRestoreStatusInput) async throws -> GetTableRestoreStatusOutputResponse
    /// Returns information about a usage limit.
    func getUsageLimit(input: GetUsageLimitInput) async throws -> GetUsageLimitOutputResponse
    /// Returns information about a specific workgroup.
    func getWorkgroup(input: GetWorkgroupInput) async throws -> GetWorkgroupOutputResponse
    /// Returns an array of EndpointAccess objects and relevant information.
    func listEndpointAccess(input: ListEndpointAccessInput) async throws -> ListEndpointAccessOutputResponse
    /// Returns information about a list of specified namespaces.
    func listNamespaces(input: ListNamespacesInput) async throws -> ListNamespacesOutputResponse
    /// Returns an array of recovery points.
    func listRecoveryPoints(input: ListRecoveryPointsInput) async throws -> ListRecoveryPointsOutputResponse
    /// Returns a list of snapshots.
    func listSnapshots(input: ListSnapshotsInput) async throws -> ListSnapshotsOutputResponse
    /// Returns information about an array of TableRestoreStatus objects.
    func listTableRestoreStatus(input: ListTableRestoreStatusInput) async throws -> ListTableRestoreStatusOutputResponse
    /// Lists the tags assigned to a resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists all usage limits within Amazon Redshift Serverless.
    func listUsageLimits(input: ListUsageLimitsInput) async throws -> ListUsageLimitsOutputResponse
    /// Returns information about a list of specified workgroups.
    func listWorkgroups(input: ListWorkgroupsInput) async throws -> ListWorkgroupsOutputResponse
    /// Creates or updates a resource policy. Currently, you can use policies to share snapshots across Amazon Web Services accounts.
    func putResourcePolicy(input: PutResourcePolicyInput) async throws -> PutResourcePolicyOutputResponse
    /// Restore the data from a recovery point.
    func restoreFromRecoveryPoint(input: RestoreFromRecoveryPointInput) async throws -> RestoreFromRecoveryPointOutputResponse
    /// Restores a namespace from a snapshot.
    func restoreFromSnapshot(input: RestoreFromSnapshotInput) async throws -> RestoreFromSnapshotOutputResponse
    /// Restores a table from a snapshot to your Amazon Redshift Serverless instance. You can't use this operation to restore tables with [interleaved sort keys](https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved).
    func restoreTableFromSnapshot(input: RestoreTableFromSnapshotInput) async throws -> RestoreTableFromSnapshotOutputResponse
    /// Assigns one or more tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes a tag or set of tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates an Amazon Redshift Serverless managed endpoint.
    func updateEndpointAccess(input: UpdateEndpointAccessInput) async throws -> UpdateEndpointAccessOutputResponse
    /// Updates a namespace with the specified settings. Unless required, you can't update multiple parameters in one request. For example, you must specify both adminUsername and adminUserPassword to update either field, but you can't update both kmsKeyId and logExports in a single request.
    func updateNamespace(input: UpdateNamespaceInput) async throws -> UpdateNamespaceOutputResponse
    /// Updates a snapshot.
    func updateSnapshot(input: UpdateSnapshotInput) async throws -> UpdateSnapshotOutputResponse
    /// Update a usage limit in Amazon Redshift Serverless. You can't update the usage type or period of a usage limit.
    func updateUsageLimit(input: UpdateUsageLimitInput) async throws -> UpdateUsageLimitOutputResponse
    /// Updates a workgroup with the specified configuration settings. You can't update multiple parameters in one request. For example, you can update baseCapacity or port in a single request, but you can't update both in the same request.
    func updateWorkgroup(input: UpdateWorkgroupInput) async throws -> UpdateWorkgroupOutputResponse
}

public protocol RedshiftServerlessClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum RedshiftServerlessClientTypes {}
