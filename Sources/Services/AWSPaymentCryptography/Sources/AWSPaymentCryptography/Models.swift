//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PaymentCryptographyClientTypes {

    /// Contains information about an alias.
    public struct Alias: Swift.Sendable {
        /// A friendly name that you can use to refer to a key. The value must begin with alias/. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        /// This member is required.
        public var aliasName: Swift.String?
        /// The KeyARN of the key associated with the alias.
        public var keyArn: Swift.String?

        public init(
            aliasName: Swift.String? = nil,
            keyArn: Swift.String? = nil
        )
        {
            self.aliasName = aliasName
            self.keyArn = keyArn
        }
    }
}

/// This request can cause an inconsistent state for the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request processing has failed because of an unknown error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to an invalid resource error.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The string for the exception.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        resourceId: Swift.String? = nil
    )
    {
        self.properties.resourceId = resourceId
    }
}

/// This request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to an invalid request error.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateAliasInput: Swift.Sendable {
    /// A friendly name that you can use to refer to a key. An alias must begin with alias/ followed by a name, for example alias/ExampleAlias. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN of the key to associate with the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

public struct CreateAliasOutput: Swift.Sendable {
    /// The alias for the key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

public struct DeleteAliasInput: Swift.Sendable {
    /// A friendly name that you can use to refer Amazon Web Services Payment Cryptography key. This value must begin with alias/ followed by a name, such as alias/ExampleAlias.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

public struct DeleteAliasOutput: Swift.Sendable {

    public init() { }
}

public struct GetAliasInput: Swift.Sendable {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

public struct GetAliasOutput: Swift.Sendable {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

public struct ListAliasesInput: Swift.Sendable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAliasesOutput: Swift.Sendable {
    /// The list of aliases. Each alias describes the KeyArn contained within.
    /// This member is required.
    public var aliases: [PaymentCryptographyClientTypes.Alias]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        aliases: [PaymentCryptographyClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

public struct UpdateAliasInput: Swift.Sendable {
    /// The alias whose associated key is changing.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN for the key that you are updating or removing from the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

public struct UpdateAliasOutput: Swift.Sendable {
    /// The alias name.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

extension PaymentCryptographyClientTypes {

    public enum KeyAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case aes192
        case aes256
        case eccNistP256
        case eccNistP384
        case rsa2048
        case rsa3072
        case rsa4096
        case tdes2key
        case tdes3key
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .aes128,
                .aes192,
                .aes256,
                .eccNistP256,
                .eccNistP384,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .tdes2key,
                .tdes3key
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .aes192: return "AES_192"
            case .aes256: return "AES_256"
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .tdes2key: return "TDES_2KEY"
            case .tdes3key: return "TDES_3KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    public enum KeyClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asymmetricKeyPair
        case privateKey
        case publicKey
        case symmetricKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyClass] {
            return [
                .asymmetricKeyPair,
                .privateKey,
                .publicKey,
                .symmetricKey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asymmetricKeyPair: return "ASYMMETRIC_KEY_PAIR"
            case .privateKey: return "PRIVATE_KEY"
            case .publicKey: return "PUBLIC_KEY"
            case .symmetricKey: return "SYMMETRIC_KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.
    public struct KeyModesOfUse: Swift.Sendable {
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.
        public var decrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.
        public var deriveKey: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.
        public var encrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
        public var generate: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
        public var noRestrictions: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.
        public var sign: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.
        public var unwrap: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.
        public var verify: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.
        public var wrap: Swift.Bool

        public init(
            decrypt: Swift.Bool = false,
            deriveKey: Swift.Bool = false,
            encrypt: Swift.Bool = false,
            generate: Swift.Bool = false,
            noRestrictions: Swift.Bool = false,
            sign: Swift.Bool = false,
            unwrap: Swift.Bool = false,
            verify: Swift.Bool = false,
            wrap: Swift.Bool = false
        )
        {
            self.decrypt = decrypt
            self.deriveKey = deriveKey
            self.encrypt = encrypt
            self.generate = generate
            self.noRestrictions = noRestrictions
            self.sign = sign
            self.unwrap = unwrap
            self.verify = verify
            self.wrap = wrap
        }
    }
}

extension PaymentCryptographyClientTypes {

    public enum KeyUsage: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tr31B0BaseDerivationKey
        case tr31C0CardVerificationKey
        case tr31D0SymmetricDataEncryptionKey
        case tr31D1AsymmetricKeyForDataEncryption
        case tr31E0EmvMkeyAppCryptograms
        case tr31E1EmvMkeyConfidentiality
        case tr31E2EmvMkeyIntegrity
        case tr31E4EmvMkeyDynamicNumbers
        case tr31E5EmvMkeyCardPersonalization
        case tr31E6EmvMkeyOther
        case tr31K0KeyEncryptionKey
        case tr31K1KeyBlockProtectionKey
        case tr31K2Tr34AsymmetricKey
        case tr31K3AsymmetricKeyForKeyAgreement
        case tr31M1Iso97971MacKey
        case tr31M3Iso97973MacKey
        case tr31M6Iso97975CmacKey
        case tr31M7HmacKey
        case tr31P0PinEncryptionKey
        case tr31P1PinGenerationKey
        case tr31S0AsymmetricKeyForDigitalSignature
        case tr31V1Ibm3624PinVerificationKey
        case tr31V2VisaPinVerificationKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsage] {
            return [
                .tr31B0BaseDerivationKey,
                .tr31C0CardVerificationKey,
                .tr31D0SymmetricDataEncryptionKey,
                .tr31D1AsymmetricKeyForDataEncryption,
                .tr31E0EmvMkeyAppCryptograms,
                .tr31E1EmvMkeyConfidentiality,
                .tr31E2EmvMkeyIntegrity,
                .tr31E4EmvMkeyDynamicNumbers,
                .tr31E5EmvMkeyCardPersonalization,
                .tr31E6EmvMkeyOther,
                .tr31K0KeyEncryptionKey,
                .tr31K1KeyBlockProtectionKey,
                .tr31K2Tr34AsymmetricKey,
                .tr31K3AsymmetricKeyForKeyAgreement,
                .tr31M1Iso97971MacKey,
                .tr31M3Iso97973MacKey,
                .tr31M6Iso97975CmacKey,
                .tr31M7HmacKey,
                .tr31P0PinEncryptionKey,
                .tr31P1PinGenerationKey,
                .tr31S0AsymmetricKeyForDigitalSignature,
                .tr31V1Ibm3624PinVerificationKey,
                .tr31V2VisaPinVerificationKey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tr31B0BaseDerivationKey: return "TR31_B0_BASE_DERIVATION_KEY"
            case .tr31C0CardVerificationKey: return "TR31_C0_CARD_VERIFICATION_KEY"
            case .tr31D0SymmetricDataEncryptionKey: return "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"
            case .tr31D1AsymmetricKeyForDataEncryption: return "TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION"
            case .tr31E0EmvMkeyAppCryptograms: return "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"
            case .tr31E1EmvMkeyConfidentiality: return "TR31_E1_EMV_MKEY_CONFIDENTIALITY"
            case .tr31E2EmvMkeyIntegrity: return "TR31_E2_EMV_MKEY_INTEGRITY"
            case .tr31E4EmvMkeyDynamicNumbers: return "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"
            case .tr31E5EmvMkeyCardPersonalization: return "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"
            case .tr31E6EmvMkeyOther: return "TR31_E6_EMV_MKEY_OTHER"
            case .tr31K0KeyEncryptionKey: return "TR31_K0_KEY_ENCRYPTION_KEY"
            case .tr31K1KeyBlockProtectionKey: return "TR31_K1_KEY_BLOCK_PROTECTION_KEY"
            case .tr31K2Tr34AsymmetricKey: return "TR31_K2_TR34_ASYMMETRIC_KEY"
            case .tr31K3AsymmetricKeyForKeyAgreement: return "TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT"
            case .tr31M1Iso97971MacKey: return "TR31_M1_ISO_9797_1_MAC_KEY"
            case .tr31M3Iso97973MacKey: return "TR31_M3_ISO_9797_3_MAC_KEY"
            case .tr31M6Iso97975CmacKey: return "TR31_M6_ISO_9797_5_CMAC_KEY"
            case .tr31M7HmacKey: return "TR31_M7_HMAC_KEY"
            case .tr31P0PinEncryptionKey: return "TR31_P0_PIN_ENCRYPTION_KEY"
            case .tr31P1PinGenerationKey: return "TR31_P1_PIN_GENERATION_KEY"
            case .tr31S0AsymmetricKeyForDigitalSignature: return "TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE"
            case .tr31V1Ibm3624PinVerificationKey: return "TR31_V1_IBM3624_PIN_VERIFICATION_KEY"
            case .tr31V2VisaPinVerificationKey: return "TR31_V2_VISA_PIN_VERIFICATION_KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    public struct KeyAttributes: Swift.Sendable {
        /// The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key. For symmetric keys, Amazon Web Services Payment Cryptography supports AES and TDES algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports RSA and ECC_NIST algorithms.
        /// This member is required.
        public var keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
        /// The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.
        /// This member is required.
        public var keyClass: PaymentCryptographyClientTypes.KeyClass?
        /// The list of cryptographic operations that you can perform using the key.
        /// This member is required.
        public var keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse?
        /// The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.
        /// This member is required.
        public var keyUsage: PaymentCryptographyClientTypes.KeyUsage?

        public init(
            keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
            keyClass: PaymentCryptographyClientTypes.KeyClass? = nil,
            keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse? = nil,
            keyUsage: PaymentCryptographyClientTypes.KeyUsage? = nil
        )
        {
            self.keyAlgorithm = keyAlgorithm
            self.keyClass = keyClass
            self.keyModesOfUse = keyModesOfUse
            self.keyUsage = keyUsage
        }
    }
}

extension PaymentCryptographyClientTypes {

    public enum KeyCheckValueAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ansiX924
        case cmac
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyCheckValueAlgorithm] {
            return [
                .ansiX924,
                .cmac
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ansiX924: return "ANSI_X9_24"
            case .cmac: return "CMAC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// A structure that contains information about a tag.
    public struct Tag: Swift.Sendable {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateKeyInput: Swift.Sendable {
    /// Specifies whether to enable the key. If the key is enabled, it is activated for use within the service. If the key is not enabled, then it is created but not activated. The default value is enabled.
    public var enabled: Swift.Bool?
    /// Specifies whether the key is exportable from the service.
    /// This member is required.
    public var exportable: Swift.Bool?
    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    /// This member is required.
    public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// Assigns one or more tags to the Amazon Web Services Payment Cryptography key. Use this parameter to tag a key when it is created. To tag an existing Amazon Web Services Payment Cryptography key, use the [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) operation. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        exportable: Swift.Bool? = nil,
        keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.exportable = exportable
        self.keyAttributes = keyAttributes
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.tags = tags
    }
}

extension PaymentCryptographyClientTypes {

    /// Defines the source of a key
    public enum KeyOrigin: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsPaymentCryptography
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyOrigin] {
            return [
                .awsPaymentCryptography,
                .external
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsPaymentCryptography: return "AWS_PAYMENT_CRYPTOGRAPHY"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Defines the state of a key
    public enum KeyState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createComplete
        case createInProgress
        case deleteComplete
        case deletePending
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyState] {
            return [
                .createComplete,
                .createInProgress,
                .deleteComplete,
                .deletePending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deletePending: return "DELETE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct Key: Swift.Sendable {
        /// The date and time when the key was created.
        /// This member is required.
        public var createTimestamp: Foundation.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when KeyState is DELETE_PENDING and the key is scheduled for deletion.
        public var deletePendingTimestamp: Foundation.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the KeyState is DELETE_COMPLETE and the Amazon Web Services Payment Cryptography key is deleted.
        public var deleteTimestamp: Foundation.Date?
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        /// This member is required.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
        /// The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is AWS_PAYMENT_CRYPTOGRAPHY. For keys imported into Amazon Web Services Payment Cryptography, the value is EXTERNAL.
        /// This member is required.
        public var keyOrigin: PaymentCryptographyClientTypes.KeyOrigin?
        /// The state of key that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?
        /// The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.
        public var usageStartTimestamp: Foundation.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.
        public var usageStopTimestamp: Foundation.Date?

        public init(
            createTimestamp: Foundation.Date? = nil,
            deletePendingTimestamp: Foundation.Date? = nil,
            deleteTimestamp: Foundation.Date? = nil,
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
            keyOrigin: PaymentCryptographyClientTypes.KeyOrigin? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil,
            usageStartTimestamp: Foundation.Date? = nil,
            usageStopTimestamp: Foundation.Date? = nil
        )
        {
            self.createTimestamp = createTimestamp
            self.deletePendingTimestamp = deletePendingTimestamp
            self.deleteTimestamp = deleteTimestamp
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
            self.keyOrigin = keyOrigin
            self.keyState = keyState
            self.usageStartTimestamp = usageStartTimestamp
            self.usageStopTimestamp = usageStopTimestamp
        }
    }
}

public struct CreateKeyOutput: Swift.Sendable {
    /// The key material that contains all the key attributes.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

public struct DeleteKeyInput: Swift.Sendable {
    /// The waiting period for key deletion. The default value is seven days.
    public var deleteKeyInDays: Swift.Int?
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        deleteKeyInDays: Swift.Int? = nil,
        keyIdentifier: Swift.String? = nil
    )
    {
        self.deleteKeyInDays = deleteKeyInDays
        self.keyIdentifier = keyIdentifier
    }
}

public struct DeleteKeyOutput: Swift.Sendable {
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for IPEK generation during export.
    public struct ExportDukptInitialKey: Swift.Sendable {
        /// The KSN for IPEK generation using DUKPT. KSN must be padded before sending to Amazon Web Services Payment Cryptography. KSN hex length should be 20 for a TDES_2KEY key or 24 for an AES key.
        /// This member is required.
        public var keySerialNumber: Swift.String?

        public init(
            keySerialNumber: Swift.String? = nil
        )
        {
            self.keySerialNumber = keySerialNumber
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// The attributes for IPEK generation during export.
    public struct ExportAttributes: Swift.Sendable {
        /// Parameter information for IPEK export.
        public var exportDukptInitialKey: PaymentCryptographyClientTypes.ExportDukptInitialKey?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?

        public init(
            exportDukptInitialKey: PaymentCryptographyClientTypes.ExportDukptInitialKey? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil
        )
        {
            self.exportDukptInitialKey = exportDukptInitialKey
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        }
    }
}

extension PaymentCryptographyClientTypes {

    public enum WrappingKeySpec: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsaOaepSha256
        case rsaOaepSha512
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappingKeySpec] {
            return [
                .rsaOaepSha256,
                .rsaOaepSha512
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsaOaepSha256: return "RSA_OAEP_SHA_256"
            case .rsaOaepSha512: return "RSA_OAEP_SHA_512"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material export using asymmetric RSA wrap and unwrap key exchange method.
    public struct ExportKeyCryptogram: Swift.Sendable {
        /// The KeyARN of the certificate chain that signs the wrapping key certificate during RSA wrap and unwrap key export.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The wrapping key certificate in PEM format (base64 encoded). Amazon Web Services Payment Cryptography uses this certificate to wrap the key under export.
        /// This member is required.
        public var wrappingKeyCertificate: Swift.String?
        /// The wrapping spec for the key under export.
        public var wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            wrappingKeyCertificate: Swift.String? = nil,
            wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.wrappingKeyCertificate = wrappingKeyCertificate
            self.wrappingSpec = wrappingSpec
        }
    }
}

extension PaymentCryptographyClientTypes.ExportKeyCryptogram: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportKeyCryptogram(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), wrappingSpec: \(Swift.String(describing: wrappingSpec)), wrappingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    public enum KeyExportability: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exportable
        case nonExportable
        case sensitive
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyExportability] {
            return [
                .exportable,
                .nonExportable,
                .sensitive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exportable: return "EXPORTABLE"
            case .nonExportable: return "NON_EXPORTABLE"
            case .sensitive: return "SENSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
    public struct KeyBlockHeaders: Swift.Sendable {
        /// Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography. When set to EXPORTABLE, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to NON_EXPORTABLE, the key cannot be subsequently exported by the receiver. When set to SENSITIVE, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to [ANSI X9.143-2022](https://webstore.ansi.org/standards/ascx9/ansix91432022).
        public var keyExportability: PaymentCryptographyClientTypes.KeyExportability?
        /// The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.
        public var keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse?
        /// Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.
        public var keyVersion: Swift.String?
        /// Parameter used to indicate the type of optional data in key block headers. Refer to [ANSI X9.143-2022](https://webstore.ansi.org/standards/ascx9/ansix91432022) for information on allowed data type for optional blocks. Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.
        public var optionalBlocks: [Swift.String: Swift.String]?

        public init(
            keyExportability: PaymentCryptographyClientTypes.KeyExportability? = nil,
            keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse? = nil,
            keyVersion: Swift.String? = nil,
            optionalBlocks: [Swift.String: Swift.String]? = nil
        )
        {
            self.keyExportability = keyExportability
            self.keyModesOfUse = keyModesOfUse
            self.keyVersion = keyVersion
            self.optionalBlocks = optionalBlocks
        }
    }
}

extension PaymentCryptographyClientTypes.KeyBlockHeaders: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyBlockHeaders(keyExportability: \(Swift.String(describing: keyExportability)), keyModesOfUse: \(Swift.String(describing: keyModesOfUse)), keyVersion: \(Swift.String(describing: keyVersion)), optionalBlocks: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material export using symmetric TR-31 key exchange method.
    public struct ExportTr31KeyBlock: Swift.Sendable {
        /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
        public var keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders?
        /// The KeyARN of the the wrapping key. This key encrypts or wraps the key under export for TR-31 key block generation.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders? = nil,
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.keyBlockHeaders = keyBlockHeaders
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }
}

extension PaymentCryptographyClientTypes {

    public enum Tr34KeyBlockFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case x9Tr342012
        case sdkUnknown(Swift.String)

        public static var allCases: [Tr34KeyBlockFormat] {
            return [
                .x9Tr342012
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .x9Tr342012: return "X9_TR34_2012"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material export using the asymmetric TR-34 key exchange method.
    public struct ExportTr34KeyBlock: Swift.Sendable {
        /// The KeyARN of the certificate chain that signs the wrapping key certificate during TR-34 key export.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The export token to initiate key export from Amazon Web Services Payment Cryptography. It also contains the signing key certificate that will sign the wrapped key during TR-34 key block generation. Call [GetParametersForExport](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_GetParametersForExport.html) to receive an export token. It expires after 7 days. You can use the same export token to export multiple keys from the same service account.
        /// This member is required.
        public var exportToken: Swift.String?
        /// The format of key block that Amazon Web Services Payment Cryptography will use during key export.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
        public var keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The KeyARN of the wrapping key certificate. Amazon Web Services Payment Cryptography uses this certificate to wrap the key under export.
        /// This member is required.
        public var wrappingKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            exportToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders? = nil,
            randomNonce: Swift.String? = nil,
            wrappingKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.exportToken = exportToken
            self.keyBlockFormat = keyBlockFormat
            self.keyBlockHeaders = keyBlockHeaders
            self.randomNonce = randomNonce
            self.wrappingKeyCertificate = wrappingKeyCertificate
        }
    }
}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), exportToken: \(Swift.String(describing: exportToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), keyBlockHeaders: \(Swift.String(describing: keyBlockHeaders)), randomNonce: \(Swift.String(describing: randomNonce)), wrappingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material export from Amazon Web Services Payment Cryptography using TR-31 or TR-34 or RSA wrap and unwrap key exchange method.
    public enum ExportKeyMaterial: Swift.Sendable {
        /// Parameter information for key material export using symmetric TR-31 key exchange method.
        case tr31keyblock(PaymentCryptographyClientTypes.ExportTr31KeyBlock)
        /// Parameter information for key material export using the asymmetric TR-34 key exchange method.
        case tr34keyblock(PaymentCryptographyClientTypes.ExportTr34KeyBlock)
        /// Parameter information for key material export using asymmetric RSA wrap and unwrap key exchange method
        case keycryptogram(PaymentCryptographyClientTypes.ExportKeyCryptogram)
        case sdkUnknown(Swift.String)
    }
}

public struct ExportKeyInput: Swift.Sendable {
    /// The attributes for IPEK generation during export.
    public var exportAttributes: PaymentCryptographyClientTypes.ExportAttributes?
    /// The KeyARN of the key under export from Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var exportKeyIdentifier: Swift.String?
    /// The key block format type, for example, TR-34 or TR-31, to use during key material export.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial?

    public init(
        exportAttributes: PaymentCryptographyClientTypes.ExportAttributes? = nil,
        exportKeyIdentifier: Swift.String? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial? = nil
    )
    {
        self.exportAttributes = exportAttributes
        self.exportKeyIdentifier = exportKeyIdentifier
        self.keyMaterial = keyMaterial
    }
}

extension PaymentCryptographyClientTypes {

    public enum WrappedKeyMaterialFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyCryptogram
        case tr31KeyBlock
        case tr34KeyBlock
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappedKeyMaterialFormat] {
            return [
                .keyCryptogram,
                .tr31KeyBlock,
                .tr34KeyBlock
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyCryptogram: return "KEY_CRYPTOGRAM"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for generating a WrappedKeyBlock for key exchange.
    public struct WrappedKey: Swift.Sendable {
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        public var keyCheckValue: Swift.String?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
        /// Parameter information for generating a wrapped key using TR-31 or TR-34 skey exchange method.
        /// This member is required.
        public var keyMaterial: Swift.String?
        /// The key block format of a wrapped key.
        /// This member is required.
        public var wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat?
        /// The KeyARN of the wrapped key.
        /// This member is required.
        public var wrappingKeyArn: Swift.String?

        public init(
            keyCheckValue: Swift.String? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
            keyMaterial: Swift.String? = nil,
            wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat? = nil,
            wrappingKeyArn: Swift.String? = nil
        )
        {
            self.keyCheckValue = keyCheckValue
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
            self.keyMaterial = keyMaterial
            self.wrappedKeyMaterialFormat = wrappedKeyMaterialFormat
            self.wrappingKeyArn = wrappingKeyArn
        }
    }
}

extension PaymentCryptographyClientTypes.WrappedKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WrappedKey(keyCheckValue: \(Swift.String(describing: keyCheckValue)), keyCheckValueAlgorithm: \(Swift.String(describing: keyCheckValueAlgorithm)), wrappedKeyMaterialFormat: \(Swift.String(describing: wrappedKeyMaterialFormat)), wrappingKeyArn: \(Swift.String(describing: wrappingKeyArn)), keyMaterial: \"CONTENT_REDACTED\")"}
}

public struct ExportKeyOutput: Swift.Sendable {
    /// The key material under export as a TR-34 WrappedKeyBlock or a TR-31 WrappedKeyBlock. or a RSA WrappedKeyCryptogram.
    public var wrappedKey: PaymentCryptographyClientTypes.WrappedKey?

    public init(
        wrappedKey: PaymentCryptographyClientTypes.WrappedKey? = nil
    )
    {
        self.wrappedKey = wrappedKey
    }
}

public struct GetKeyInput: Swift.Sendable {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

public struct GetKeyOutput: Swift.Sendable {
    /// The key material, including the immutable and mutable data for the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

extension PaymentCryptographyClientTypes {

    public enum KeyMaterialType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyCryptogram
        case rootPublicKeyCertificate
        case tr31KeyBlock
        case tr34KeyBlock
        case trustedPublicKeyCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyMaterialType] {
            return [
                .keyCryptogram,
                .rootPublicKeyCertificate,
                .tr31KeyBlock,
                .tr34KeyBlock,
                .trustedPublicKeyCertificate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyCryptogram: return "KEY_CRYPTOGRAM"
            case .rootPublicKeyCertificate: return "ROOT_PUBLIC_KEY_CERTIFICATE"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case .trustedPublicKeyCertificate: return "TRUSTED_PUBLIC_KEY_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetParametersForExportInput: Swift.Sendable {
    /// The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, TR34_KEY_BLOCK. Export token is not required for TR-31 key export.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.signingKeyAlgorithm = signingKeyAlgorithm
    }
}

public struct GetParametersForExportOutput: Swift.Sendable {
    /// The export token to initiate key export from Amazon Web Services Payment Cryptography. The export token expires after 7 days. You can use the same export token to export multiple keys from the same service account.
    /// This member is required.
    public var exportToken: Swift.String?
    /// The validity period of the export token.
    /// This member is required.
    public var parametersValidUntilTimestamp: Foundation.Date?
    /// The algorithm of the signing key certificate for use in TR-34 key block generation. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The signing key certificate in PEM format (base64 encoded) of the public key for signature within the TR-34 key block. The certificate expires after 7 days.
    /// This member is required.
    public var signingKeyCertificate: Swift.String?
    /// The root certificate authority (CA) that signed the signing key certificate in PEM format (base64 encoded).
    /// This member is required.
    public var signingKeyCertificateChain: Swift.String?

    public init(
        exportToken: Swift.String? = nil,
        parametersValidUntilTimestamp: Foundation.Date? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        signingKeyCertificate: Swift.String? = nil,
        signingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.exportToken = exportToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.signingKeyAlgorithm = signingKeyAlgorithm
        self.signingKeyCertificate = signingKeyCertificate
        self.signingKeyCertificateChain = signingKeyCertificateChain
    }
}

extension GetParametersForExportOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForExportOutput(exportToken: \(Swift.String(describing: exportToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), signingKeyAlgorithm: \(Swift.String(describing: signingKeyAlgorithm)), signingKeyCertificate: \"CONTENT_REDACTED\", signingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

public struct GetParametersForImportInput: Swift.Sendable {
    /// The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (TR34_KEY_BLOCK) and RSA WrappedKeyCryptogram (KEY_CRYPTOGRAM). Import token is not required for TR-31, root public key cerificate or trusted public key certificate.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import. At this time, RSA_2048 is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, RSA_2048, RSA_3072, RSA_4096 are the allowed algorithms for RSA WrappedKeyCryptogram import.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
    }
}

public struct GetParametersForImportOutput: Swift.Sendable {
    /// The import token to initiate key import into Amazon Web Services Payment Cryptography. The import token expires after 7 days. You can use the same import token to import multiple keys to the same service account.
    /// This member is required.
    public var importToken: Swift.String?
    /// The validity period of the import token.
    /// This member is required.
    public var parametersValidUntilTimestamp: Foundation.Date?
    /// The algorithm of the wrapping key for use within TR-34 WrappedKeyBlock or RSA WrappedKeyCryptogram.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The wrapping key certificate in PEM format (base64 encoded) of the wrapping key for use within the TR-34 key block. The certificate expires in 7 days.
    /// This member is required.
    public var wrappingKeyCertificate: Swift.String?
    /// The Amazon Web Services Payment Cryptography root certificate authority (CA) that signed the wrapping key certificate in PEM format (base64 encoded).
    /// This member is required.
    public var wrappingKeyCertificateChain: Swift.String?

    public init(
        importToken: Swift.String? = nil,
        parametersValidUntilTimestamp: Foundation.Date? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        wrappingKeyCertificate: Swift.String? = nil,
        wrappingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.importToken = importToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
        self.wrappingKeyCertificate = wrappingKeyCertificate
        self.wrappingKeyCertificateChain = wrappingKeyCertificateChain
    }
}

extension GetParametersForImportOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForImportOutput(importToken: \(Swift.String(describing: importToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), wrappingKeyAlgorithm: \(Swift.String(describing: wrappingKeyAlgorithm)), wrappingKeyCertificate: \"CONTENT_REDACTED\", wrappingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

public struct GetPublicKeyCertificateInput: Swift.Sendable {
    /// The KeyARN of the asymmetric key pair.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

public struct GetPublicKeyCertificateOutput: Swift.Sendable {
    /// The public key component of the asymmetric key pair in a certificate PEM format (base64 encoded). It is signed by the root certificate authority (CA). The certificate expires in 90 days.
    /// This member is required.
    public var keyCertificate: Swift.String?
    /// The root certificate authority (CA) that signed the public key certificate in PEM format (base64 encoded) of the asymmetric key pair.
    /// This member is required.
    public var keyCertificateChain: Swift.String?

    public init(
        keyCertificate: Swift.String? = nil,
        keyCertificateChain: Swift.String? = nil
    )
    {
        self.keyCertificate = keyCertificate
        self.keyCertificateChain = keyCertificateChain
    }
}

extension GetPublicKeyCertificateOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPublicKeyCertificateOutput(keyCertificate: \"CONTENT_REDACTED\", keyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material import using asymmetric RSA wrap and unwrap key exchange method.
    public struct ImportKeyCryptogram: Swift.Sendable {
        /// Specifies whether the key is exportable from the service.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.
        /// This member is required.
        public var importToken: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The RSA wrapped key cryptogram under import.
        /// This member is required.
        public var wrappedKeyCryptogram: Swift.String?
        /// The wrapping spec for the wrapped key cryptogram.
        public var wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec?

        public init(
            exportable: Swift.Bool? = nil,
            importToken: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            wrappedKeyCryptogram: Swift.String? = nil,
            wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec? = nil
        )
        {
            self.exportable = exportable
            self.importToken = importToken
            self.keyAttributes = keyAttributes
            self.wrappedKeyCryptogram = wrappedKeyCryptogram
            self.wrappingSpec = wrappingSpec
        }
    }
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for root public key certificate import.
    public struct RootCertificatePublicKey: Swift.Sendable {
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the root public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for root public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RootCertificatePublicKey(keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material import using symmetric TR-31 key exchange method.
    public struct ImportTr31KeyBlock: Swift.Sendable {
        /// The TR-31 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?
        /// The KeyARN of the key that will decrypt or unwrap a TR-31 key block during import.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            wrappedKeyBlock: Swift.String? = nil,
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.wrappedKeyBlock = wrappedKeyBlock
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }
}

extension PaymentCryptographyClientTypes.ImportTr31KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportTr31KeyBlock(wrappingKeyIdentifier: \(Swift.String(describing: wrappingKeyIdentifier)), wrappedKeyBlock: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material import using the asymmetric TR-34 key exchange method.
    public struct ImportTr34KeyBlock: Swift.Sendable {
        /// The KeyARN of the certificate chain that signs the signing key certificate during TR-34 key import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The import token that initiates key import using the asymmetric TR-34 key exchange method into Amazon Web Services Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.
        /// This member is required.
        public var importToken: Swift.String?
        /// The key block format to use during key import. The only value allowed is X9_TR34_2012.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The public key component in PEM certificate format of the private key that signs the KDH TR-34 WrappedKeyBlock.
        /// This member is required.
        public var signingKeyCertificate: Swift.String?
        /// The TR-34 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            importToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            randomNonce: Swift.String? = nil,
            signingKeyCertificate: Swift.String? = nil,
            wrappedKeyBlock: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.importToken = importToken
            self.keyBlockFormat = keyBlockFormat
            self.randomNonce = randomNonce
            self.signingKeyCertificate = signingKeyCertificate
            self.wrappedKeyBlock = wrappedKeyBlock
        }
    }
}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), importToken: \(Swift.String(describing: importToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), randomNonce: \(Swift.String(describing: randomNonce)), wrappedKeyBlock: \(Swift.String(describing: wrappedKeyBlock)), signingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for trusted public key certificate import.
    public struct TrustedCertificatePublicKey: Swift.Sendable {
        /// The KeyARN of the root public key certificate or certificate chain that signs the trusted public key certificate import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for trusted public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrustedCertificatePublicKey(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {

    /// Parameter information for key material import into Amazon Web Services Payment Cryptography using TR-31 or TR-34 or RSA wrap and unwrap key exchange method.
    public enum ImportKeyMaterial: Swift.Sendable {
        /// Parameter information for root public key certificate import.
        case rootcertificatepublickey(PaymentCryptographyClientTypes.RootCertificatePublicKey)
        /// Parameter information for trusted public key certificate import.
        case trustedcertificatepublickey(PaymentCryptographyClientTypes.TrustedCertificatePublicKey)
        /// Parameter information for key material import using symmetric TR-31 key exchange method.
        case tr31keyblock(PaymentCryptographyClientTypes.ImportTr31KeyBlock)
        /// Parameter information for key material import using the asymmetric TR-34 key exchange method.
        case tr34keyblock(PaymentCryptographyClientTypes.ImportTr34KeyBlock)
        /// Parameter information for key material import using asymmetric RSA wrap and unwrap key exchange method.
        case keycryptogram(PaymentCryptographyClientTypes.ImportKeyCryptogram)
        case sdkUnknown(Swift.String)
    }
}

public struct ImportKeyInput: Swift.Sendable {
    /// Specifies whether import key is enabled.
    public var enabled: Swift.Bool?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// The key or public key certificate type to use during key material import, for example TR-34 or RootCertificatePublicKey.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial?
    /// Assigns one or more tags to the Amazon Web Services Payment Cryptography key. Use this parameter to tag a key when it is imported. To tag an existing Amazon Web Services Payment Cryptography key, use the [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) operation. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the specified one. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.keyMaterial = keyMaterial
        self.tags = tags
    }
}

public struct ImportKeyOutput: Swift.Sendable {
    /// The KeyARN of the key material imported within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

public struct ListKeysInput: Swift.Sendable {
    /// The key state of the keys you want to list.
    public var keyState: PaymentCryptographyClientTypes.KeyState?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        keyState: PaymentCryptographyClientTypes.KeyState? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keyState = keyState
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PaymentCryptographyClientTypes {

    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct KeySummary: Swift.Sendable {
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The state of an Amazon Web Services Payment Cryptography that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?

        public init(
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil
        )
        {
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyState = keyState
        }
    }
}

public struct ListKeysOutput: Swift.Sendable {
    /// The list of keys created within the caller's Amazon Web Services account and Amazon Web Services Region.
    /// This member is required.
    public var keys: [PaymentCryptographyClientTypes.KeySummary]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        keys: [PaymentCryptographyClientTypes.KeySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keys = keys
        self.nextToken = nextToken
    }
}

public struct RestoreKeyInput: Swift.Sendable {
    /// The KeyARN of the key to be restored within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

public struct RestoreKeyOutput: Swift.Sendable {
    /// The key material of the restored key. The KeyState will change to CREATE_COMPLETE and value for DeletePendingTimestamp gets removed.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

public struct StartKeyUsageInput: Swift.Sendable {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

public struct StartKeyUsageOutput: Swift.Sendable {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key activated for use.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

public struct StopKeyUsageInput: Swift.Sendable {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

public struct StopKeyUsageOutput: Swift.Sendable {
    /// The KeyARN of the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?
    /// The KeyARN of the key whose tags you are getting.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?
    /// The list of tags associated with a ResourceArn. Each tag will list the key-value pair contained within that tag.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The KeyARN of the key whose tags are being updated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the new one. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. To use this parameter, you must have [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) permission in an IAM policy. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The KeyARN of the key whose tags are being removed.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tag keys. Don't include the tag values. If the Amazon Web Services Payment Cryptography key doesn't have the specified tag key, Amazon Web Services Payment Cryptography doesn't throw an exception or return a response. To confirm that the operation succeeded, use the [ListTagsForResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ListTagsForResource.html) operation.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension CreateAliasInput {

    static func urlPathProvider(_ value: CreateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension CreateKeyInput {

    static func urlPathProvider(_ value: CreateKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAliasInput {

    static func urlPathProvider(_ value: DeleteAliasInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteKeyInput {

    static func urlPathProvider(_ value: DeleteKeyInput) -> Swift.String? {
        return "/"
    }
}

extension ExportKeyInput {

    static func urlPathProvider(_ value: ExportKeyInput) -> Swift.String? {
        return "/"
    }
}

extension GetAliasInput {

    static func urlPathProvider(_ value: GetAliasInput) -> Swift.String? {
        return "/"
    }
}

extension GetKeyInput {

    static func urlPathProvider(_ value: GetKeyInput) -> Swift.String? {
        return "/"
    }
}

extension GetParametersForExportInput {

    static func urlPathProvider(_ value: GetParametersForExportInput) -> Swift.String? {
        return "/"
    }
}

extension GetParametersForImportInput {

    static func urlPathProvider(_ value: GetParametersForImportInput) -> Swift.String? {
        return "/"
    }
}

extension GetPublicKeyCertificateInput {

    static func urlPathProvider(_ value: GetPublicKeyCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ImportKeyInput {

    static func urlPathProvider(_ value: ImportKeyInput) -> Swift.String? {
        return "/"
    }
}

extension ListAliasesInput {

    static func urlPathProvider(_ value: ListAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListKeysInput {

    static func urlPathProvider(_ value: ListKeysInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreKeyInput {

    static func urlPathProvider(_ value: RestoreKeyInput) -> Swift.String? {
        return "/"
    }
}

extension StartKeyUsageInput {

    static func urlPathProvider(_ value: StartKeyUsageInput) -> Swift.String? {
        return "/"
    }
}

extension StopKeyUsageInput {

    static func urlPathProvider(_ value: StopKeyUsageInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAliasInput {

    static func urlPathProvider(_ value: UpdateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAliasInput {

    static func write(value: CreateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
        try writer["KeyArn"].write(value.keyArn)
    }
}

extension CreateKeyInput {

    static func write(value: CreateKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["Exportable"].write(value.exportable)
        try writer["KeyAttributes"].write(value.keyAttributes, with: PaymentCryptographyClientTypes.KeyAttributes.write(value:to:))
        try writer["KeyCheckValueAlgorithm"].write(value.keyCheckValueAlgorithm)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PaymentCryptographyClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteAliasInput {

    static func write(value: DeleteAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
    }
}

extension DeleteKeyInput {

    static func write(value: DeleteKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteKeyInDays"].write(value.deleteKeyInDays)
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension ExportKeyInput {

    static func write(value: ExportKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportAttributes"].write(value.exportAttributes, with: PaymentCryptographyClientTypes.ExportAttributes.write(value:to:))
        try writer["ExportKeyIdentifier"].write(value.exportKeyIdentifier)
        try writer["KeyMaterial"].write(value.keyMaterial, with: PaymentCryptographyClientTypes.ExportKeyMaterial.write(value:to:))
    }
}

extension GetAliasInput {

    static func write(value: GetAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
    }
}

extension GetKeyInput {

    static func write(value: GetKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension GetParametersForExportInput {

    static func write(value: GetParametersForExportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyMaterialType"].write(value.keyMaterialType)
        try writer["SigningKeyAlgorithm"].write(value.signingKeyAlgorithm)
    }
}

extension GetParametersForImportInput {

    static func write(value: GetParametersForImportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyMaterialType"].write(value.keyMaterialType)
        try writer["WrappingKeyAlgorithm"].write(value.wrappingKeyAlgorithm)
    }
}

extension GetPublicKeyCertificateInput {

    static func write(value: GetPublicKeyCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension ImportKeyInput {

    static func write(value: ImportKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["KeyCheckValueAlgorithm"].write(value.keyCheckValueAlgorithm)
        try writer["KeyMaterial"].write(value.keyMaterial, with: PaymentCryptographyClientTypes.ImportKeyMaterial.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PaymentCryptographyClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListAliasesInput {

    static func write(value: ListAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListKeysInput {

    static func write(value: ListKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyState"].write(value.keyState)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension RestoreKeyInput {

    static func write(value: RestoreKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension StartKeyUsageInput {

    static func write(value: StartKeyUsageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension StopKeyUsageInput {

    static func write(value: StopKeyUsageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyIdentifier"].write(value.keyIdentifier)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: PaymentCryptographyClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAliasInput {

    static func write(value: UpdateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
        try writer["KeyArn"].write(value.keyArn)
    }
}

extension CreateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: PaymentCryptographyClientTypes.Alias.read(from:))
        return value
    }
}

extension CreateKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateKeyOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension DeleteAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAliasOutput {
        return DeleteAliasOutput()
    }
}

extension DeleteKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteKeyOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension ExportKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportKeyOutput()
        value.wrappedKey = try reader["WrappedKey"].readIfPresent(with: PaymentCryptographyClientTypes.WrappedKey.read(from:))
        return value
    }
}

extension GetAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: PaymentCryptographyClientTypes.Alias.read(from:))
        return value
    }
}

extension GetKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetKeyOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension GetParametersForExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetParametersForExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetParametersForExportOutput()
        value.exportToken = try reader["ExportToken"].readIfPresent() ?? ""
        value.parametersValidUntilTimestamp = try reader["ParametersValidUntilTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.signingKeyAlgorithm = try reader["SigningKeyAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.signingKeyCertificate = try reader["SigningKeyCertificate"].readIfPresent() ?? ""
        value.signingKeyCertificateChain = try reader["SigningKeyCertificateChain"].readIfPresent() ?? ""
        return value
    }
}

extension GetParametersForImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetParametersForImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetParametersForImportOutput()
        value.importToken = try reader["ImportToken"].readIfPresent() ?? ""
        value.parametersValidUntilTimestamp = try reader["ParametersValidUntilTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.wrappingKeyAlgorithm = try reader["WrappingKeyAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.wrappingKeyCertificate = try reader["WrappingKeyCertificate"].readIfPresent() ?? ""
        value.wrappingKeyCertificateChain = try reader["WrappingKeyCertificateChain"].readIfPresent() ?? ""
        return value
    }
}

extension GetPublicKeyCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPublicKeyCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPublicKeyCertificateOutput()
        value.keyCertificate = try reader["KeyCertificate"].readIfPresent() ?? ""
        value.keyCertificateChain = try reader["KeyCertificateChain"].readIfPresent() ?? ""
        return value
    }
}

extension ImportKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportKeyOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension ListAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: PaymentCryptographyClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListKeysOutput()
        value.keys = try reader["Keys"].readListIfPresent(memberReadingClosure: PaymentCryptographyClientTypes.KeySummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: PaymentCryptographyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension RestoreKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestoreKeyOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension StartKeyUsageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartKeyUsageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartKeyUsageOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension StopKeyUsageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopKeyUsageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopKeyUsageOutput()
        value.key = try reader["Key"].readIfPresent(with: PaymentCryptographyClientTypes.Key.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: PaymentCryptographyClientTypes.Alias.read(from:))
        return value
    }
}

enum CreateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetParametersForExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetParametersForImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPublicKeyCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartKeyUsageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopKeyUsageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PaymentCryptographyClientTypes.Alias {

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.Alias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.Alias()
        value.aliasName = try reader["AliasName"].readIfPresent() ?? ""
        value.keyArn = try reader["KeyArn"].readIfPresent()
        return value
    }
}

extension PaymentCryptographyClientTypes.Key {

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.Key {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.Key()
        value.keyArn = try reader["KeyArn"].readIfPresent() ?? ""
        value.keyAttributes = try reader["KeyAttributes"].readIfPresent(with: PaymentCryptographyClientTypes.KeyAttributes.read(from:))
        value.keyCheckValue = try reader["KeyCheckValue"].readIfPresent() ?? ""
        value.keyCheckValueAlgorithm = try reader["KeyCheckValueAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.exportable = try reader["Exportable"].readIfPresent() ?? false
        value.keyState = try reader["KeyState"].readIfPresent() ?? .sdkUnknown("")
        value.keyOrigin = try reader["KeyOrigin"].readIfPresent() ?? .sdkUnknown("")
        value.createTimestamp = try reader["CreateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.usageStartTimestamp = try reader["UsageStartTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.usageStopTimestamp = try reader["UsageStopTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deletePendingTimestamp = try reader["DeletePendingTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deleteTimestamp = try reader["DeleteTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PaymentCryptographyClientTypes.KeyAttributes {

    static func write(value: PaymentCryptographyClientTypes.KeyAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyAlgorithm"].write(value.keyAlgorithm)
        try writer["KeyClass"].write(value.keyClass)
        try writer["KeyModesOfUse"].write(value.keyModesOfUse, with: PaymentCryptographyClientTypes.KeyModesOfUse.write(value:to:))
        try writer["KeyUsage"].write(value.keyUsage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.KeyAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.KeyAttributes()
        value.keyUsage = try reader["KeyUsage"].readIfPresent() ?? .sdkUnknown("")
        value.keyClass = try reader["KeyClass"].readIfPresent() ?? .sdkUnknown("")
        value.keyAlgorithm = try reader["KeyAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.keyModesOfUse = try reader["KeyModesOfUse"].readIfPresent(with: PaymentCryptographyClientTypes.KeyModesOfUse.read(from:))
        return value
    }
}

extension PaymentCryptographyClientTypes.KeyModesOfUse {

    static func write(value: PaymentCryptographyClientTypes.KeyModesOfUse?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Decrypt"].write(value.decrypt)
        try writer["DeriveKey"].write(value.deriveKey)
        try writer["Encrypt"].write(value.encrypt)
        try writer["Generate"].write(value.generate)
        try writer["NoRestrictions"].write(value.noRestrictions)
        try writer["Sign"].write(value.sign)
        try writer["Unwrap"].write(value.unwrap)
        try writer["Verify"].write(value.verify)
        try writer["Wrap"].write(value.wrap)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.KeyModesOfUse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.KeyModesOfUse()
        value.encrypt = try reader["Encrypt"].readIfPresent() ?? false
        value.decrypt = try reader["Decrypt"].readIfPresent() ?? false
        value.wrap = try reader["Wrap"].readIfPresent() ?? false
        value.unwrap = try reader["Unwrap"].readIfPresent() ?? false
        value.generate = try reader["Generate"].readIfPresent() ?? false
        value.sign = try reader["Sign"].readIfPresent() ?? false
        value.verify = try reader["Verify"].readIfPresent() ?? false
        value.deriveKey = try reader["DeriveKey"].readIfPresent() ?? false
        value.noRestrictions = try reader["NoRestrictions"].readIfPresent() ?? false
        return value
    }
}

extension PaymentCryptographyClientTypes.WrappedKey {

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.WrappedKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.WrappedKey()
        value.wrappingKeyArn = try reader["WrappingKeyArn"].readIfPresent() ?? ""
        value.wrappedKeyMaterialFormat = try reader["WrappedKeyMaterialFormat"].readIfPresent() ?? .sdkUnknown("")
        value.keyMaterial = try reader["KeyMaterial"].readIfPresent() ?? ""
        value.keyCheckValue = try reader["KeyCheckValue"].readIfPresent()
        value.keyCheckValueAlgorithm = try reader["KeyCheckValueAlgorithm"].readIfPresent()
        return value
    }
}

extension PaymentCryptographyClientTypes.KeySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.KeySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.KeySummary()
        value.keyArn = try reader["KeyArn"].readIfPresent() ?? ""
        value.keyState = try reader["KeyState"].readIfPresent() ?? .sdkUnknown("")
        value.keyAttributes = try reader["KeyAttributes"].readIfPresent(with: PaymentCryptographyClientTypes.KeyAttributes.read(from:))
        value.keyCheckValue = try reader["KeyCheckValue"].readIfPresent() ?? ""
        value.exportable = try reader["Exportable"].readIfPresent() ?? false
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        return value
    }
}

extension PaymentCryptographyClientTypes.Tag {

    static func write(value: PaymentCryptographyClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PaymentCryptographyClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PaymentCryptographyClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension PaymentCryptographyClientTypes.ExportKeyMaterial {

    static func write(value: PaymentCryptographyClientTypes.ExportKeyMaterial?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .keycryptogram(keycryptogram):
                try writer["KeyCryptogram"].write(keycryptogram, with: PaymentCryptographyClientTypes.ExportKeyCryptogram.write(value:to:))
            case let .tr31keyblock(tr31keyblock):
                try writer["Tr31KeyBlock"].write(tr31keyblock, with: PaymentCryptographyClientTypes.ExportTr31KeyBlock.write(value:to:))
            case let .tr34keyblock(tr34keyblock):
                try writer["Tr34KeyBlock"].write(tr34keyblock, with: PaymentCryptographyClientTypes.ExportTr34KeyBlock.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

extension PaymentCryptographyClientTypes.ExportKeyCryptogram {

    static func write(value: PaymentCryptographyClientTypes.ExportKeyCryptogram?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityPublicKeyIdentifier"].write(value.certificateAuthorityPublicKeyIdentifier)
        try writer["WrappingKeyCertificate"].write(value.wrappingKeyCertificate)
        try writer["WrappingSpec"].write(value.wrappingSpec)
    }
}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock {

    static func write(value: PaymentCryptographyClientTypes.ExportTr34KeyBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityPublicKeyIdentifier"].write(value.certificateAuthorityPublicKeyIdentifier)
        try writer["ExportToken"].write(value.exportToken)
        try writer["KeyBlockFormat"].write(value.keyBlockFormat)
        try writer["KeyBlockHeaders"].write(value.keyBlockHeaders, with: PaymentCryptographyClientTypes.KeyBlockHeaders.write(value:to:))
        try writer["RandomNonce"].write(value.randomNonce)
        try writer["WrappingKeyCertificate"].write(value.wrappingKeyCertificate)
    }
}

extension PaymentCryptographyClientTypes.KeyBlockHeaders {

    static func write(value: PaymentCryptographyClientTypes.KeyBlockHeaders?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyExportability"].write(value.keyExportability)
        try writer["KeyModesOfUse"].write(value.keyModesOfUse, with: PaymentCryptographyClientTypes.KeyModesOfUse.write(value:to:))
        try writer["KeyVersion"].write(value.keyVersion)
        try writer["OptionalBlocks"].writeMap(value.optionalBlocks, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PaymentCryptographyClientTypes.ExportTr31KeyBlock {

    static func write(value: PaymentCryptographyClientTypes.ExportTr31KeyBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyBlockHeaders"].write(value.keyBlockHeaders, with: PaymentCryptographyClientTypes.KeyBlockHeaders.write(value:to:))
        try writer["WrappingKeyIdentifier"].write(value.wrappingKeyIdentifier)
    }
}

extension PaymentCryptographyClientTypes.ExportAttributes {

    static func write(value: PaymentCryptographyClientTypes.ExportAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportDukptInitialKey"].write(value.exportDukptInitialKey, with: PaymentCryptographyClientTypes.ExportDukptInitialKey.write(value:to:))
        try writer["KeyCheckValueAlgorithm"].write(value.keyCheckValueAlgorithm)
    }
}

extension PaymentCryptographyClientTypes.ExportDukptInitialKey {

    static func write(value: PaymentCryptographyClientTypes.ExportDukptInitialKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeySerialNumber"].write(value.keySerialNumber)
    }
}

extension PaymentCryptographyClientTypes.ImportKeyMaterial {

    static func write(value: PaymentCryptographyClientTypes.ImportKeyMaterial?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .keycryptogram(keycryptogram):
                try writer["KeyCryptogram"].write(keycryptogram, with: PaymentCryptographyClientTypes.ImportKeyCryptogram.write(value:to:))
            case let .rootcertificatepublickey(rootcertificatepublickey):
                try writer["RootCertificatePublicKey"].write(rootcertificatepublickey, with: PaymentCryptographyClientTypes.RootCertificatePublicKey.write(value:to:))
            case let .tr31keyblock(tr31keyblock):
                try writer["Tr31KeyBlock"].write(tr31keyblock, with: PaymentCryptographyClientTypes.ImportTr31KeyBlock.write(value:to:))
            case let .tr34keyblock(tr34keyblock):
                try writer["Tr34KeyBlock"].write(tr34keyblock, with: PaymentCryptographyClientTypes.ImportTr34KeyBlock.write(value:to:))
            case let .trustedcertificatepublickey(trustedcertificatepublickey):
                try writer["TrustedCertificatePublicKey"].write(trustedcertificatepublickey, with: PaymentCryptographyClientTypes.TrustedCertificatePublicKey.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

extension PaymentCryptographyClientTypes.ImportKeyCryptogram {

    static func write(value: PaymentCryptographyClientTypes.ImportKeyCryptogram?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Exportable"].write(value.exportable)
        try writer["ImportToken"].write(value.importToken)
        try writer["KeyAttributes"].write(value.keyAttributes, with: PaymentCryptographyClientTypes.KeyAttributes.write(value:to:))
        try writer["WrappedKeyCryptogram"].write(value.wrappedKeyCryptogram)
        try writer["WrappingSpec"].write(value.wrappingSpec)
    }
}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock {

    static func write(value: PaymentCryptographyClientTypes.ImportTr34KeyBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityPublicKeyIdentifier"].write(value.certificateAuthorityPublicKeyIdentifier)
        try writer["ImportToken"].write(value.importToken)
        try writer["KeyBlockFormat"].write(value.keyBlockFormat)
        try writer["RandomNonce"].write(value.randomNonce)
        try writer["SigningKeyCertificate"].write(value.signingKeyCertificate)
        try writer["WrappedKeyBlock"].write(value.wrappedKeyBlock)
    }
}

extension PaymentCryptographyClientTypes.ImportTr31KeyBlock {

    static func write(value: PaymentCryptographyClientTypes.ImportTr31KeyBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WrappedKeyBlock"].write(value.wrappedKeyBlock)
        try writer["WrappingKeyIdentifier"].write(value.wrappingKeyIdentifier)
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey {

    static func write(value: PaymentCryptographyClientTypes.TrustedCertificatePublicKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityPublicKeyIdentifier"].write(value.certificateAuthorityPublicKeyIdentifier)
        try writer["KeyAttributes"].write(value.keyAttributes, with: PaymentCryptographyClientTypes.KeyAttributes.write(value:to:))
        try writer["PublicKeyCertificate"].write(value.publicKeyCertificate)
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey {

    static func write(value: PaymentCryptographyClientTypes.RootCertificatePublicKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyAttributes"].write(value.keyAttributes, with: PaymentCryptographyClientTypes.KeyAttributes.write(value:to:))
        try writer["PublicKeyCertificate"].write(value.publicKeyCertificate)
    }
}

public enum PaymentCryptographyClientTypes {}
