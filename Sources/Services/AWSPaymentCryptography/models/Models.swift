// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.Alias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Contains information about an alias.
    public struct Alias: Swift.Equatable {
        /// A friendly name that you can use to refer to a key. The value must begin with alias/. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        /// This member is required.
        public var aliasName: Swift.String?
        /// The KeyARN of the key associated with the alias.
        public var keyArn: Swift.String?

        public init(
            aliasName: Swift.String? = nil,
            keyArn: Swift.String? = nil
        )
        {
            self.aliasName = aliasName
            self.keyArn = keyArn
        }
    }

}

extension ConflictException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request can cause an inconsistent state for the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }
}

extension CreateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAliasInput: Swift.Equatable {
    /// A friendly name that you can use to refer a key. An alias must begin with alias/ followed by a name, for example alias/ExampleAlias. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN of the key to associate with the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

struct CreateAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
    let keyArn: Swift.String?
}

extension CreateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

public enum CreateAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct CreateAliasOutputResponse: Swift.Equatable {
    /// The alias for the key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct CreateAliasOutputResponseBody: Swift.Equatable {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension CreateAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension CreateKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyAttributes = "KeyAttributes"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateKeyInput: Swift.Equatable {
    /// Specifies whether to enable the key. If the key is enabled, it is activated for use within the service. If the key not enabled, then it is created but not activated. The default value is enabled.
    public var enabled: Swift.Bool?
    /// Specifies whether the key is exportable from the service.
    /// This member is required.
    public var exportable: Swift.Bool?
    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    /// This member is required.
    public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV) for DES and AES keys. For DES key, the KCV is computed by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is computed by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// The tags to attach to the key. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. To use this parameter, you must have TagResource permission. Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        exportable: Swift.Bool? = nil,
        keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.exportable = exportable
        self.keyAttributes = keyAttributes
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.tags = tags
    }
}

struct CreateKeyInputBody: Swift.Equatable {
    let keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
    let keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    let exportable: Swift.Bool?
    let enabled: Swift.Bool?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension CreateKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyAttributes = "KeyAttributes"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct CreateKeyOutputResponse: Swift.Equatable {
    /// The key material that contains all the key attributes.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct CreateKeyOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension CreateKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension DeleteAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
    }
}

extension DeleteAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAliasInput: Swift.Equatable {
    /// A friendly name that you can use to refer Amazon Web Services Payment Cryptography key. This value must begin with alias/ followed by a name, such as alias/ExampleAlias.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

struct DeleteAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
}

extension DeleteAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
    }
}

public enum DeleteAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteAliasOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteKeyInDays = "DeleteKeyInDays"
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteKeyInDays = self.deleteKeyInDays {
            try encodeContainer.encode(deleteKeyInDays, forKey: .deleteKeyInDays)
        }
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension DeleteKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteKeyInput: Swift.Equatable {
    /// The waiting period for key deletion. The default value is seven days.
    public var deleteKeyInDays: Swift.Int?
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        deleteKeyInDays: Swift.Int? = nil,
        keyIdentifier: Swift.String? = nil
    )
    {
        self.deleteKeyInDays = deleteKeyInDays
        self.keyIdentifier = keyIdentifier
    }
}

struct DeleteKeyInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
    let deleteKeyInDays: Swift.Int?
}

extension DeleteKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteKeyInDays = "DeleteKeyInDays"
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
        let deleteKeyInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deleteKeyInDays)
        deleteKeyInDays = deleteKeyInDaysDecoded
    }
}

public enum DeleteKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct DeleteKeyOutputResponse: Swift.Equatable {
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct DeleteKeyOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension DeleteKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension ExportKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportKeyIdentifier = "ExportKeyIdentifier"
        case keyMaterial = "KeyMaterial"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportKeyIdentifier = self.exportKeyIdentifier {
            try encodeContainer.encode(exportKeyIdentifier, forKey: .exportKeyIdentifier)
        }
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
    }
}

extension ExportKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportKeyInput: Swift.Equatable {
    /// The KeyARN of the key under export from Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var exportKeyIdentifier: Swift.String?
    /// The key block format type, for example, TR-34 or TR-31, to use during key material export.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial?

    public init(
        exportKeyIdentifier: Swift.String? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial? = nil
    )
    {
        self.exportKeyIdentifier = exportKeyIdentifier
        self.keyMaterial = keyMaterial
    }
}

struct ExportKeyInputBody: Swift.Equatable {
    let keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial?
    let exportKeyIdentifier: Swift.String?
}

extension ExportKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportKeyIdentifier = "ExportKeyIdentifier"
        case keyMaterial = "KeyMaterial"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ExportKeyMaterial.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
        let exportKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportKeyIdentifier)
        exportKeyIdentifier = exportKeyIdentifierDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportKeyMaterial: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tr31keyblock = "Tr31KeyBlock"
        case tr34keyblock = "Tr34KeyBlock"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .tr31keyblock(tr31keyblock):
                try container.encode(tr31keyblock, forKey: .tr31keyblock)
            case let .tr34keyblock(tr34keyblock):
                try container.encode(tr34keyblock, forKey: .tr34keyblock)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let tr31keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ExportTr31KeyBlock.self, forKey: .tr31keyblock)
        if let tr31keyblock = tr31keyblockDecoded {
            self = .tr31keyblock(tr31keyblock)
            return
        }
        let tr34keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ExportTr34KeyBlock.self, forKey: .tr34keyblock)
        if let tr34keyblock = tr34keyblockDecoded {
            self = .tr34keyblock(tr34keyblock)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export from Amazon Web Services Payment Cryptography.
    public enum ExportKeyMaterial: Swift.Equatable {
        /// Parameter information for key material export using TR-31 standard.
        case tr31keyblock(PaymentCryptographyClientTypes.ExportTr31KeyBlock)
        /// Parameter information for key material export using TR-34 standard.
        case tr34keyblock(PaymentCryptographyClientTypes.ExportTr34KeyBlock)
        case sdkUnknown(Swift.String)
    }

}

public enum ExportKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ExportKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ExportKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.wrappedKey = output.wrappedKey
        } else {
            self.wrappedKey = nil
        }
    }
}

public struct ExportKeyOutputResponse: Swift.Equatable {
    /// The key material under export as a TR-34 or TR-31 wrapped key block.
    public var wrappedKey: PaymentCryptographyClientTypes.WrappedKey?

    public init(
        wrappedKey: PaymentCryptographyClientTypes.WrappedKey? = nil
    )
    {
        self.wrappedKey = wrappedKey
    }
}

struct ExportKeyOutputResponseBody: Swift.Equatable {
    let wrappedKey: PaymentCryptographyClientTypes.WrappedKey?
}

extension ExportKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case wrappedKey = "WrappedKey"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappedKeyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappedKey.self, forKey: .wrappedKey)
        wrappedKey = wrappedKeyDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportTr31KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case wrappingKeyIdentifier = "WrappingKeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let wrappingKeyIdentifier = self.wrappingKeyIdentifier {
            try encodeContainer.encode(wrappingKeyIdentifier, forKey: .wrappingKeyIdentifier)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyIdentifier)
        wrappingKeyIdentifier = wrappingKeyIdentifierDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export using TR-31 standard.
    public struct ExportTr31KeyBlock: Swift.Equatable {
        /// The KeyARN of the the wrapping key. This key encrypts or wraps the key under export for TR-31 key block generation.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }

}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case exportToken = "ExportToken"
        case keyBlockFormat = "KeyBlockFormat"
        case randomNonce = "RandomNonce"
        case wrappingKeyCertificate = "WrappingKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let exportToken = self.exportToken {
            try encodeContainer.encode(exportToken, forKey: .exportToken)
        }
        if let keyBlockFormat = self.keyBlockFormat {
            try encodeContainer.encode(keyBlockFormat.rawValue, forKey: .keyBlockFormat)
        }
        if let randomNonce = self.randomNonce {
            try encodeContainer.encode(randomNonce, forKey: .randomNonce)
        }
        if let wrappingKeyCertificate = self.wrappingKeyCertificate {
            try encodeContainer.encode(wrappingKeyCertificate, forKey: .wrappingKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
        let wrappingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificate)
        wrappingKeyCertificate = wrappingKeyCertificateDecoded
        let exportTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportToken)
        exportToken = exportTokenDecoded
        let keyBlockFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Tr34KeyBlockFormat.self, forKey: .keyBlockFormat)
        keyBlockFormat = keyBlockFormatDecoded
        let randomNonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomNonce)
        randomNonce = randomNonceDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), exportToken: \(Swift.String(describing: exportToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), randomNonce: \(Swift.String(describing: randomNonce)), wrappingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export using TR-34 standard.
    public struct ExportTr34KeyBlock: Swift.Equatable {
        /// The KeyARN of the certificate chain that signs the wrapping key certificate during TR-34 key export.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The export token to initiate key export from Amazon Web Services Payment Cryptography. It also contains the signing key certificate that will sign the wrapped key during TR-34 key block generation. Call [GetParametersForExport] to receive an export token. It expires after 7 days. You can use the same export token to export multiple keys from the same service account.
        /// This member is required.
        public var exportToken: Swift.String?
        /// The format of key block that Amazon Web Services Payment Cryptography will use during key export.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The KeyARN of the wrapping key certificate. Amazon Web Services Payment Cryptography uses this certificate to wrap the key under export.
        /// This member is required.
        public var wrappingKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            exportToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            randomNonce: Swift.String? = nil,
            wrappingKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.exportToken = exportToken
            self.keyBlockFormat = keyBlockFormat
            self.randomNonce = randomNonce
            self.wrappingKeyCertificate = wrappingKeyCertificate
        }
    }

}

extension GetAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
    }
}

extension GetAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAliasInput: Swift.Equatable {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

struct GetAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
}

extension GetAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
    }
}

public enum GetAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct GetAliasOutputResponse: Swift.Equatable {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct GetAliasOutputResponseBody: Swift.Equatable {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension GetAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension GetKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension GetKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetKeyInput: Swift.Equatable {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct GetKeyInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
}

extension GetKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

public enum GetKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct GetKeyOutputResponse: Swift.Equatable {
    /// The key material, including the immutable and mutable data for the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct GetKeyOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension GetKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension GetParametersForExportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyMaterialType = self.keyMaterialType {
            try encodeContainer.encode(keyMaterialType.rawValue, forKey: .keyMaterialType)
        }
        if let signingKeyAlgorithm = self.signingKeyAlgorithm {
            try encodeContainer.encode(signingKeyAlgorithm.rawValue, forKey: .signingKeyAlgorithm)
        }
    }
}

extension GetParametersForExportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetParametersForExportInput: Swift.Equatable {
    /// The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, TR34_KEY_BLOCK. Export token is not required for TR-31 key export.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block cryptogram. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.signingKeyAlgorithm = signingKeyAlgorithm
    }
}

struct GetParametersForExportInputBody: Swift.Equatable {
    let keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    let signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
}

extension GetParametersForExportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialTypeDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyMaterialType.self, forKey: .keyMaterialType)
        keyMaterialType = keyMaterialTypeDecoded
        let signingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .signingKeyAlgorithm)
        signingKeyAlgorithm = signingKeyAlgorithmDecoded
    }
}

public enum GetParametersForExportOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetParametersForExportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForExportOutputResponse(exportToken: \(Swift.String(describing: exportToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), signingKeyAlgorithm: \(Swift.String(describing: signingKeyAlgorithm)), signingKeyCertificate: \"CONTENT_REDACTED\", signingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetParametersForExportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetParametersForExportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportToken = output.exportToken
            self.parametersValidUntilTimestamp = output.parametersValidUntilTimestamp
            self.signingKeyAlgorithm = output.signingKeyAlgorithm
            self.signingKeyCertificate = output.signingKeyCertificate
            self.signingKeyCertificateChain = output.signingKeyCertificateChain
        } else {
            self.exportToken = nil
            self.parametersValidUntilTimestamp = nil
            self.signingKeyAlgorithm = nil
            self.signingKeyCertificate = nil
            self.signingKeyCertificateChain = nil
        }
    }
}

public struct GetParametersForExportOutputResponse: Swift.Equatable {
    /// The export token to initiate key export from Amazon Web Services Payment Cryptography. The export token expires after 7 days. You can use the same export token to export multiple keys from the same service account.
    /// This member is required.
    public var exportToken: Swift.String?
    /// The validity period of the export token.
    /// This member is required.
    public var parametersValidUntilTimestamp: ClientRuntime.Date?
    /// The algorithm of the signing key certificate for use in TR-34 key block generation. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The signing key certificate of the public key for signature within the TR-34 key block cryptogram. The certificate expires after 7 days.
    /// This member is required.
    public var signingKeyCertificate: Swift.String?
    /// The certificate chain that signed the signing key certificate. This is the root certificate authority (CA) within your service account.
    /// This member is required.
    public var signingKeyCertificateChain: Swift.String?

    public init(
        exportToken: Swift.String? = nil,
        parametersValidUntilTimestamp: ClientRuntime.Date? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        signingKeyCertificate: Swift.String? = nil,
        signingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.exportToken = exportToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.signingKeyAlgorithm = signingKeyAlgorithm
        self.signingKeyCertificate = signingKeyCertificate
        self.signingKeyCertificateChain = signingKeyCertificateChain
    }
}

struct GetParametersForExportOutputResponseBody: Swift.Equatable {
    let signingKeyCertificate: Swift.String?
    let signingKeyCertificateChain: Swift.String?
    let signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    let exportToken: Swift.String?
    let parametersValidUntilTimestamp: ClientRuntime.Date?
}

extension GetParametersForExportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportToken = "ExportToken"
        case parametersValidUntilTimestamp = "ParametersValidUntilTimestamp"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
        case signingKeyCertificate = "SigningKeyCertificate"
        case signingKeyCertificateChain = "SigningKeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificate)
        signingKeyCertificate = signingKeyCertificateDecoded
        let signingKeyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificateChain)
        signingKeyCertificateChain = signingKeyCertificateChainDecoded
        let signingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .signingKeyAlgorithm)
        signingKeyAlgorithm = signingKeyAlgorithmDecoded
        let exportTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportToken)
        exportToken = exportTokenDecoded
        let parametersValidUntilTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .parametersValidUntilTimestamp)
        parametersValidUntilTimestamp = parametersValidUntilTimestampDecoded
    }
}

extension GetParametersForImportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyMaterialType = self.keyMaterialType {
            try encodeContainer.encode(keyMaterialType.rawValue, forKey: .keyMaterialType)
        }
        if let wrappingKeyAlgorithm = self.wrappingKeyAlgorithm {
            try encodeContainer.encode(wrappingKeyAlgorithm.rawValue, forKey: .wrappingKeyAlgorithm)
        }
    }
}

extension GetParametersForImportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetParametersForImportInput: Swift.Equatable {
    /// The key block format type such as TR-34 or TR-31 to use during key material import. Import token is only required for TR-34 key import TR34_KEY_BLOCK. Import token is not required for TR-31 key import.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import within the TR-34 key block cryptogram. RSA_2048 is the only wrapping key algorithm allowed.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
    }
}

struct GetParametersForImportInputBody: Swift.Equatable {
    let keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    let wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
}

extension GetParametersForImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialTypeDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyMaterialType.self, forKey: .keyMaterialType)
        keyMaterialType = keyMaterialTypeDecoded
        let wrappingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .wrappingKeyAlgorithm)
        wrappingKeyAlgorithm = wrappingKeyAlgorithmDecoded
    }
}

public enum GetParametersForImportOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetParametersForImportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForImportOutputResponse(importToken: \(Swift.String(describing: importToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), wrappingKeyAlgorithm: \(Swift.String(describing: wrappingKeyAlgorithm)), wrappingKeyCertificate: \"CONTENT_REDACTED\", wrappingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetParametersForImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetParametersForImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importToken = output.importToken
            self.parametersValidUntilTimestamp = output.parametersValidUntilTimestamp
            self.wrappingKeyAlgorithm = output.wrappingKeyAlgorithm
            self.wrappingKeyCertificate = output.wrappingKeyCertificate
            self.wrappingKeyCertificateChain = output.wrappingKeyCertificateChain
        } else {
            self.importToken = nil
            self.parametersValidUntilTimestamp = nil
            self.wrappingKeyAlgorithm = nil
            self.wrappingKeyCertificate = nil
            self.wrappingKeyCertificateChain = nil
        }
    }
}

public struct GetParametersForImportOutputResponse: Swift.Equatable {
    /// The import token to initiate key import into Amazon Web Services Payment Cryptography. The import token expires after 7 days. You can use the same import token to import multiple keys to the same service account.
    /// This member is required.
    public var importToken: Swift.String?
    /// The validity period of the import token.
    /// This member is required.
    public var parametersValidUntilTimestamp: ClientRuntime.Date?
    /// The algorithm of the wrapping key for use within TR-34 key block. RSA_2048 is the only wrapping key algorithm allowed.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The wrapping key certificate of the wrapping key for use within the TR-34 key block. The certificate expires in 7 days.
    /// This member is required.
    public var wrappingKeyCertificate: Swift.String?
    /// The Amazon Web Services Payment Cryptography certificate chain that signed the wrapping key certificate. This is the root certificate authority (CA) within your service account.
    /// This member is required.
    public var wrappingKeyCertificateChain: Swift.String?

    public init(
        importToken: Swift.String? = nil,
        parametersValidUntilTimestamp: ClientRuntime.Date? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        wrappingKeyCertificate: Swift.String? = nil,
        wrappingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.importToken = importToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
        self.wrappingKeyCertificate = wrappingKeyCertificate
        self.wrappingKeyCertificateChain = wrappingKeyCertificateChain
    }
}

struct GetParametersForImportOutputResponseBody: Swift.Equatable {
    let wrappingKeyCertificate: Swift.String?
    let wrappingKeyCertificateChain: Swift.String?
    let wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    let importToken: Swift.String?
    let parametersValidUntilTimestamp: ClientRuntime.Date?
}

extension GetParametersForImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importToken = "ImportToken"
        case parametersValidUntilTimestamp = "ParametersValidUntilTimestamp"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
        case wrappingKeyCertificate = "WrappingKeyCertificate"
        case wrappingKeyCertificateChain = "WrappingKeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificate)
        wrappingKeyCertificate = wrappingKeyCertificateDecoded
        let wrappingKeyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificateChain)
        wrappingKeyCertificateChain = wrappingKeyCertificateChainDecoded
        let wrappingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .wrappingKeyAlgorithm)
        wrappingKeyAlgorithm = wrappingKeyAlgorithmDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importToken)
        importToken = importTokenDecoded
        let parametersValidUntilTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .parametersValidUntilTimestamp)
        parametersValidUntilTimestamp = parametersValidUntilTimestampDecoded
    }
}

extension GetPublicKeyCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension GetPublicKeyCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPublicKeyCertificateInput: Swift.Equatable {
    /// The KeyARN of the asymmetric key pair.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct GetPublicKeyCertificateInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
}

extension GetPublicKeyCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

public enum GetPublicKeyCertificateOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetPublicKeyCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPublicKeyCertificateOutputResponse(keyCertificate: \"CONTENT_REDACTED\", keyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetPublicKeyCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetPublicKeyCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyCertificate = output.keyCertificate
            self.keyCertificateChain = output.keyCertificateChain
        } else {
            self.keyCertificate = nil
            self.keyCertificateChain = nil
        }
    }
}

public struct GetPublicKeyCertificateOutputResponse: Swift.Equatable {
    /// The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.
    /// This member is required.
    public var keyCertificate: Swift.String?
    /// The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.
    /// This member is required.
    public var keyCertificateChain: Swift.String?

    public init(
        keyCertificate: Swift.String? = nil,
        keyCertificateChain: Swift.String? = nil
    )
    {
        self.keyCertificate = keyCertificate
        self.keyCertificateChain = keyCertificateChain
    }
}

struct GetPublicKeyCertificateOutputResponseBody: Swift.Equatable {
    let keyCertificate: Swift.String?
    let keyCertificateChain: Swift.String?
}

extension GetPublicKeyCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyCertificate = "KeyCertificate"
        case keyCertificateChain = "KeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCertificate)
        keyCertificate = keyCertificateDecoded
        let keyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCertificateChain)
        keyCertificateChain = keyCertificateChainDecoded
    }
}

extension ImportKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyMaterial = "KeyMaterial"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension ImportKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportKeyInput: Swift.Equatable {
    /// Specifies whether import key is enabled.
    public var enabled: Swift.Bool?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV) for DES and AES keys. For DES key, the KCV is computed by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is computed by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// The key or public key certificate type to use during key material import, for example TR-34 or RootCertificatePublicKey.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial?
    /// The tags to attach to the key. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the specified one. To use this parameter, you must have TagResource permission. Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.keyMaterial = keyMaterial
        self.tags = tags
    }
}

struct ImportKeyInputBody: Swift.Equatable {
    let keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial?
    let keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    let enabled: Swift.Bool?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension ImportKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyMaterial = "KeyMaterial"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ImportKeyMaterial.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PaymentCryptographyClientTypes.ImportKeyMaterial: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rootcertificatepublickey = "RootCertificatePublicKey"
        case tr31keyblock = "Tr31KeyBlock"
        case tr34keyblock = "Tr34KeyBlock"
        case trustedcertificatepublickey = "TrustedCertificatePublicKey"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .rootcertificatepublickey(rootcertificatepublickey):
                try container.encode(rootcertificatepublickey, forKey: .rootcertificatepublickey)
            case let .tr31keyblock(tr31keyblock):
                try container.encode(tr31keyblock, forKey: .tr31keyblock)
            case let .tr34keyblock(tr34keyblock):
                try container.encode(tr34keyblock, forKey: .tr34keyblock)
            case let .trustedcertificatepublickey(trustedcertificatepublickey):
                try container.encode(trustedcertificatepublickey, forKey: .trustedcertificatepublickey)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let rootcertificatepublickeyDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.RootCertificatePublicKey.self, forKey: .rootcertificatepublickey)
        if let rootcertificatepublickey = rootcertificatepublickeyDecoded {
            self = .rootcertificatepublickey(rootcertificatepublickey)
            return
        }
        let trustedcertificatepublickeyDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.TrustedCertificatePublicKey.self, forKey: .trustedcertificatepublickey)
        if let trustedcertificatepublickey = trustedcertificatepublickeyDecoded {
            self = .trustedcertificatepublickey(trustedcertificatepublickey)
            return
        }
        let tr31keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ImportTr31KeyBlock.self, forKey: .tr31keyblock)
        if let tr31keyblock = tr31keyblockDecoded {
            self = .tr31keyblock(tr31keyblock)
            return
        }
        let tr34keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ImportTr34KeyBlock.self, forKey: .tr34keyblock)
        if let tr34keyblock = tr34keyblockDecoded {
            self = .tr34keyblock(tr34keyblock)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import.
    public enum ImportKeyMaterial: Swift.Equatable {
        /// Parameter information for root public key certificate import.
        case rootcertificatepublickey(PaymentCryptographyClientTypes.RootCertificatePublicKey)
        /// Parameter information for trusted public key certificate import.
        case trustedcertificatepublickey(PaymentCryptographyClientTypes.TrustedCertificatePublicKey)
        /// Parameter information for key material import using TR-31 standard.
        case tr31keyblock(PaymentCryptographyClientTypes.ImportTr31KeyBlock)
        /// Parameter information for key material import using TR-34 standard.
        case tr34keyblock(PaymentCryptographyClientTypes.ImportTr34KeyBlock)
        case sdkUnknown(Swift.String)
    }

}

public enum ImportKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ImportKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ImportKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct ImportKeyOutputResponse: Swift.Equatable {
    /// The KeyARN of the key material imported within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct ImportKeyOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension ImportKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension PaymentCryptographyClientTypes.ImportTr31KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case wrappedKeyBlock = "WrappedKeyBlock"
        case wrappingKeyIdentifier = "WrappingKeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let wrappedKeyBlock = self.wrappedKeyBlock {
            try encodeContainer.encode(wrappedKeyBlock, forKey: .wrappedKeyBlock)
        }
        if let wrappingKeyIdentifier = self.wrappingKeyIdentifier {
            try encodeContainer.encode(wrappingKeyIdentifier, forKey: .wrappingKeyIdentifier)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyIdentifier)
        wrappingKeyIdentifier = wrappingKeyIdentifierDecoded
        let wrappedKeyBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappedKeyBlock)
        wrappedKeyBlock = wrappedKeyBlockDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import using TR-31 standard.
    public struct ImportTr31KeyBlock: Swift.Equatable {
        /// The TR-34 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?
        /// The KeyARN of the key that will decrypt or unwrap a TR-31 key block during import.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            wrappedKeyBlock: Swift.String? = nil,
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.wrappedKeyBlock = wrappedKeyBlock
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }

}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case importToken = "ImportToken"
        case keyBlockFormat = "KeyBlockFormat"
        case randomNonce = "RandomNonce"
        case signingKeyCertificate = "SigningKeyCertificate"
        case wrappedKeyBlock = "WrappedKeyBlock"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let importToken = self.importToken {
            try encodeContainer.encode(importToken, forKey: .importToken)
        }
        if let keyBlockFormat = self.keyBlockFormat {
            try encodeContainer.encode(keyBlockFormat.rawValue, forKey: .keyBlockFormat)
        }
        if let randomNonce = self.randomNonce {
            try encodeContainer.encode(randomNonce, forKey: .randomNonce)
        }
        if let signingKeyCertificate = self.signingKeyCertificate {
            try encodeContainer.encode(signingKeyCertificate, forKey: .signingKeyCertificate)
        }
        if let wrappedKeyBlock = self.wrappedKeyBlock {
            try encodeContainer.encode(wrappedKeyBlock, forKey: .wrappedKeyBlock)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
        let signingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificate)
        signingKeyCertificate = signingKeyCertificateDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importToken)
        importToken = importTokenDecoded
        let wrappedKeyBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappedKeyBlock)
        wrappedKeyBlock = wrappedKeyBlockDecoded
        let keyBlockFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Tr34KeyBlockFormat.self, forKey: .keyBlockFormat)
        keyBlockFormat = keyBlockFormatDecoded
        let randomNonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomNonce)
        randomNonce = randomNonceDecoded
    }
}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), importToken: \(Swift.String(describing: importToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), randomNonce: \(Swift.String(describing: randomNonce)), wrappedKeyBlock: \(Swift.String(describing: wrappedKeyBlock)), signingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import using TR-34 standard.
    public struct ImportTr34KeyBlock: Swift.Equatable {
        /// The KeyARN of the certificate chain that signs the signing key certificate during TR-34 key import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The import token that initiates key import into Amazon Web Services Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.
        /// This member is required.
        public var importToken: Swift.String?
        /// The key block format to use during key import. The only value allowed is X9_TR34_2012.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The public key component in PEM certificate format of the private key that signs the KDH TR-34 wrapped key block.
        /// This member is required.
        public var signingKeyCertificate: Swift.String?
        /// The TR-34 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            importToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            randomNonce: Swift.String? = nil,
            signingKeyCertificate: Swift.String? = nil,
            wrappedKeyBlock: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.importToken = importToken
            self.keyBlockFormat = keyBlockFormat
            self.randomNonce = randomNonce
            self.signingKeyCertificate = signingKeyCertificate
            self.wrappedKeyBlock = wrappedKeyBlock
        }
    }

}

extension InternalServerException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request processing has failed because of an unknown error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.Key: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTimestamp = "CreateTimestamp"
        case deletePendingTimestamp = "DeletePendingTimestamp"
        case deleteTimestamp = "DeleteTimestamp"
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyArn = "KeyArn"
        case keyAttributes = "KeyAttributes"
        case keyCheckValue = "KeyCheckValue"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyOrigin = "KeyOrigin"
        case keyState = "KeyState"
        case usageStartTimestamp = "UsageStartTimestamp"
        case usageStopTimestamp = "UsageStopTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encodeTimestamp(createTimestamp, format: .epochSeconds, forKey: .createTimestamp)
        }
        if let deletePendingTimestamp = self.deletePendingTimestamp {
            try encodeContainer.encodeTimestamp(deletePendingTimestamp, format: .epochSeconds, forKey: .deletePendingTimestamp)
        }
        if let deleteTimestamp = self.deleteTimestamp {
            try encodeContainer.encodeTimestamp(deleteTimestamp, format: .epochSeconds, forKey: .deleteTimestamp)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValue = self.keyCheckValue {
            try encodeContainer.encode(keyCheckValue, forKey: .keyCheckValue)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let keyOrigin = self.keyOrigin {
            try encodeContainer.encode(keyOrigin.rawValue, forKey: .keyOrigin)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let usageStartTimestamp = self.usageStartTimestamp {
            try encodeContainer.encodeTimestamp(usageStartTimestamp, format: .epochSeconds, forKey: .usageStartTimestamp)
        }
        if let usageStopTimestamp = self.usageStopTimestamp {
            try encodeContainer.encodeTimestamp(usageStopTimestamp, format: .epochSeconds, forKey: .usageStopTimestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCheckValue)
        keyCheckValue = keyCheckValueDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let keyOriginDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyOrigin.self, forKey: .keyOrigin)
        keyOrigin = keyOriginDecoded
        let createTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let usageStartTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .usageStartTimestamp)
        usageStartTimestamp = usageStartTimestampDecoded
        let usageStopTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .usageStopTimestamp)
        usageStopTimestamp = usageStopTimestampDecoded
        let deletePendingTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deletePendingTimestamp)
        deletePendingTimestamp = deletePendingTimestampDecoded
        let deleteTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deleteTimestamp)
        deleteTimestamp = deleteTimestampDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct Key: Swift.Equatable {
        /// The date and time when the key was created.
        /// This member is required.
        public var createTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when KeyState is DELETE_PENDING and the key is scheduled for deletion.
        public var deletePendingTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the KeyState is DELETE_COMPLETE and the Amazon Web Services Payment Cryptography key is deleted.
        public var deleteTimestamp: ClientRuntime.Date?
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.
        /// This member is required.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
        /// The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is AWS_PAYMENT_CRYPTOGRAPHY. For keys imported into Amazon Web Services Payment Cryptography, the value is EXTERNAL.
        /// This member is required.
        public var keyOrigin: PaymentCryptographyClientTypes.KeyOrigin?
        /// The state of key that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?
        /// The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.
        public var usageStartTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.
        public var usageStopTimestamp: ClientRuntime.Date?

        public init(
            createTimestamp: ClientRuntime.Date? = nil,
            deletePendingTimestamp: ClientRuntime.Date? = nil,
            deleteTimestamp: ClientRuntime.Date? = nil,
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
            keyOrigin: PaymentCryptographyClientTypes.KeyOrigin? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil,
            usageStartTimestamp: ClientRuntime.Date? = nil,
            usageStopTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.createTimestamp = createTimestamp
            self.deletePendingTimestamp = deletePendingTimestamp
            self.deleteTimestamp = deleteTimestamp
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
            self.keyOrigin = keyOrigin
            self.keyState = keyState
            self.usageStartTimestamp = usageStartTimestamp
            self.usageStopTimestamp = usageStopTimestamp
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes128
        case aes192
        case aes256
        case rsa2048
        case rsa3072
        case rsa4096
        case tdes2key
        case tdes3key
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .aes128,
                .aes192,
                .aes256,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .tdes2key,
                .tdes3key,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .aes192: return "AES_192"
            case .aes256: return "AES_256"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .tdes2key: return "TDES_2KEY"
            case .tdes3key: return "TDES_3KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyAlgorithm(rawValue: rawValue) ?? KeyAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeyAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyAlgorithm = "KeyAlgorithm"
        case keyClass = "KeyClass"
        case keyModesOfUse = "KeyModesOfUse"
        case keyUsage = "KeyUsage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyAlgorithm = self.keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm.rawValue, forKey: .keyAlgorithm)
        }
        if let keyClass = self.keyClass {
            try encodeContainer.encode(keyClass.rawValue, forKey: .keyClass)
        }
        if let keyModesOfUse = self.keyModesOfUse {
            try encodeContainer.encode(keyModesOfUse, forKey: .keyModesOfUse)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyUsageDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let keyClassDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyClass.self, forKey: .keyClass)
        keyClass = keyClassDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let keyModesOfUseDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyModesOfUse.self, forKey: .keyModesOfUse)
        keyModesOfUse = keyModesOfUseDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    public struct KeyAttributes: Swift.Equatable {
        /// The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key. For symmetric keys, Amazon Web Services Payment Cryptography supports AES and TDES algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports RSA and ECC_NIST algorithms.
        /// This member is required.
        public var keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
        /// The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.
        /// This member is required.
        public var keyClass: PaymentCryptographyClientTypes.KeyClass?
        /// The list of cryptographic operations that you can perform using the key.
        /// This member is required.
        public var keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse?
        /// The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.
        /// This member is required.
        public var keyUsage: PaymentCryptographyClientTypes.KeyUsage?

        public init(
            keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
            keyClass: PaymentCryptographyClientTypes.KeyClass? = nil,
            keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse? = nil,
            keyUsage: PaymentCryptographyClientTypes.KeyUsage? = nil
        )
        {
            self.keyAlgorithm = keyAlgorithm
            self.keyClass = keyClass
            self.keyModesOfUse = keyModesOfUse
            self.keyUsage = keyUsage
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyCheckValueAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ansiX924
        case cmac
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyCheckValueAlgorithm] {
            return [
                .ansiX924,
                .cmac,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ansiX924: return "ANSI_X9_24"
            case .cmac: return "CMAC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyCheckValueAlgorithm(rawValue: rawValue) ?? KeyCheckValueAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum KeyClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case asymmetricKeyPair
        case privateKey
        case publicKey
        case symmetricKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyClass] {
            return [
                .asymmetricKeyPair,
                .privateKey,
                .publicKey,
                .symmetricKey,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .asymmetricKeyPair: return "ASYMMETRIC_KEY_PAIR"
            case .privateKey: return "PRIVATE_KEY"
            case .publicKey: return "PUBLIC_KEY"
            case .symmetricKey: return "SYMMETRIC_KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyClass(rawValue: rawValue) ?? KeyClass.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum KeyMaterialType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rootPublicKeyCertificate
        case tr31KeyBlock
        case tr34KeyBlock
        case trustedPublicKeyCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyMaterialType] {
            return [
                .rootPublicKeyCertificate,
                .tr31KeyBlock,
                .tr34KeyBlock,
                .trustedPublicKeyCertificate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rootPublicKeyCertificate: return "ROOT_PUBLIC_KEY_CERTIFICATE"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case .trustedPublicKeyCertificate: return "TRUSTED_PUBLIC_KEY_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyMaterialType(rawValue: rawValue) ?? KeyMaterialType.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeyModesOfUse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decrypt = "Decrypt"
        case deriveKey = "DeriveKey"
        case encrypt = "Encrypt"
        case generate = "Generate"
        case noRestrictions = "NoRestrictions"
        case sign = "Sign"
        case unwrap = "Unwrap"
        case verify = "Verify"
        case wrap = "Wrap"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decrypt != false {
            try encodeContainer.encode(decrypt, forKey: .decrypt)
        }
        if deriveKey != false {
            try encodeContainer.encode(deriveKey, forKey: .deriveKey)
        }
        if encrypt != false {
            try encodeContainer.encode(encrypt, forKey: .encrypt)
        }
        if generate != false {
            try encodeContainer.encode(generate, forKey: .generate)
        }
        if noRestrictions != false {
            try encodeContainer.encode(noRestrictions, forKey: .noRestrictions)
        }
        if sign != false {
            try encodeContainer.encode(sign, forKey: .sign)
        }
        if unwrap != false {
            try encodeContainer.encode(unwrap, forKey: .unwrap)
        }
        if verify != false {
            try encodeContainer.encode(verify, forKey: .verify)
        }
        if wrap != false {
            try encodeContainer.encode(wrap, forKey: .wrap)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypt) ?? false
        encrypt = encryptDecoded
        let decryptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .decrypt) ?? false
        decrypt = decryptDecoded
        let wrapDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .wrap) ?? false
        wrap = wrapDecoded
        let unwrapDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unwrap) ?? false
        unwrap = unwrapDecoded
        let generateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generate) ?? false
        generate = generateDecoded
        let signDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sign) ?? false
        sign = signDecoded
        let verifyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verify) ?? false
        verify = verifyDecoded
        let deriveKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deriveKey) ?? false
        deriveKey = deriveKeyDecoded
        let noRestrictionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noRestrictions) ?? false
        noRestrictions = noRestrictionsDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.
    public struct KeyModesOfUse: Swift.Equatable {
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.
        public var decrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.
        public var deriveKey: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.
        public var encrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
        public var generate: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
        public var noRestrictions: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.
        public var sign: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.
        public var unwrap: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.
        public var verify: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.
        public var wrap: Swift.Bool

        public init(
            decrypt: Swift.Bool = false,
            deriveKey: Swift.Bool = false,
            encrypt: Swift.Bool = false,
            generate: Swift.Bool = false,
            noRestrictions: Swift.Bool = false,
            sign: Swift.Bool = false,
            unwrap: Swift.Bool = false,
            verify: Swift.Bool = false,
            wrap: Swift.Bool = false
        )
        {
            self.decrypt = decrypt
            self.deriveKey = deriveKey
            self.encrypt = encrypt
            self.generate = generate
            self.noRestrictions = noRestrictions
            self.sign = sign
            self.unwrap = unwrap
            self.verify = verify
            self.wrap = wrap
        }
    }

}

extension PaymentCryptographyClientTypes {
    /// Defines the source of a key
    public enum KeyOrigin: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsPaymentCryptography
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyOrigin] {
            return [
                .awsPaymentCryptography,
                .external,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsPaymentCryptography: return "AWS_PAYMENT_CRYPTOGRAPHY"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyOrigin(rawValue: rawValue) ?? KeyOrigin.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    /// Defines the state of a key
    public enum KeyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createInProgress
        case deleteComplete
        case deletePending
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyState] {
            return [
                .createComplete,
                .createInProgress,
                .deleteComplete,
                .deletePending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deletePending: return "DELETE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyState(rawValue: rawValue) ?? KeyState.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyArn = "KeyArn"
        case keyAttributes = "KeyAttributes"
        case keyCheckValue = "KeyCheckValue"
        case keyState = "KeyState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValue = self.keyCheckValue {
            try encodeContainer.encode(keyCheckValue, forKey: .keyCheckValue)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCheckValue)
        keyCheckValue = keyCheckValueDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct KeySummary: Swift.Equatable {
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The state of an Amazon Web Services Payment Cryptography that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?

        public init(
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil
        )
        {
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyState = keyState
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyUsage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case tr31B0BaseDerivationKey
        case tr31C0CardVerificationKey
        case tr31D0SymmetricDataEncryptionKey
        case tr31D1AsymmetricKeyForDataEncryption
        case tr31E0EmvMkeyAppCryptograms
        case tr31E1EmvMkeyConfidentiality
        case tr31E2EmvMkeyIntegrity
        case tr31E4EmvMkeyDynamicNumbers
        case tr31E5EmvMkeyCardPersonalization
        case tr31E6EmvMkeyOther
        case tr31K0KeyEncryptionKey
        case tr31K1KeyBlockProtectionKey
        case tr31K2Tr34AsymmetricKey
        case tr31K3AsymmetricKeyForKeyAgreement
        case tr31M3Iso97973MacKey
        case tr31M6Iso97975CmacKey
        case tr31M7HmacKey
        case tr31P0PinEncryptionKey
        case tr31P1PinGenerationKey
        case tr31S0AsymmetricKeyForDigitalSignature
        case tr31V1Ibm3624PinVerificationKey
        case tr31V2VisaPinVerificationKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsage] {
            return [
                .tr31B0BaseDerivationKey,
                .tr31C0CardVerificationKey,
                .tr31D0SymmetricDataEncryptionKey,
                .tr31D1AsymmetricKeyForDataEncryption,
                .tr31E0EmvMkeyAppCryptograms,
                .tr31E1EmvMkeyConfidentiality,
                .tr31E2EmvMkeyIntegrity,
                .tr31E4EmvMkeyDynamicNumbers,
                .tr31E5EmvMkeyCardPersonalization,
                .tr31E6EmvMkeyOther,
                .tr31K0KeyEncryptionKey,
                .tr31K1KeyBlockProtectionKey,
                .tr31K2Tr34AsymmetricKey,
                .tr31K3AsymmetricKeyForKeyAgreement,
                .tr31M3Iso97973MacKey,
                .tr31M6Iso97975CmacKey,
                .tr31M7HmacKey,
                .tr31P0PinEncryptionKey,
                .tr31P1PinGenerationKey,
                .tr31S0AsymmetricKeyForDigitalSignature,
                .tr31V1Ibm3624PinVerificationKey,
                .tr31V2VisaPinVerificationKey,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .tr31B0BaseDerivationKey: return "TR31_B0_BASE_DERIVATION_KEY"
            case .tr31C0CardVerificationKey: return "TR31_C0_CARD_VERIFICATION_KEY"
            case .tr31D0SymmetricDataEncryptionKey: return "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"
            case .tr31D1AsymmetricKeyForDataEncryption: return "TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION"
            case .tr31E0EmvMkeyAppCryptograms: return "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"
            case .tr31E1EmvMkeyConfidentiality: return "TR31_E1_EMV_MKEY_CONFIDENTIALITY"
            case .tr31E2EmvMkeyIntegrity: return "TR31_E2_EMV_MKEY_INTEGRITY"
            case .tr31E4EmvMkeyDynamicNumbers: return "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"
            case .tr31E5EmvMkeyCardPersonalization: return "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"
            case .tr31E6EmvMkeyOther: return "TR31_E6_EMV_MKEY_OTHER"
            case .tr31K0KeyEncryptionKey: return "TR31_K0_KEY_ENCRYPTION_KEY"
            case .tr31K1KeyBlockProtectionKey: return "TR31_K1_KEY_BLOCK_PROTECTION_KEY"
            case .tr31K2Tr34AsymmetricKey: return "TR31_K2_TR34_ASYMMETRIC_KEY"
            case .tr31K3AsymmetricKeyForKeyAgreement: return "TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT"
            case .tr31M3Iso97973MacKey: return "TR31_M3_ISO_9797_3_MAC_KEY"
            case .tr31M6Iso97975CmacKey: return "TR31_M6_ISO_9797_5_CMAC_KEY"
            case .tr31M7HmacKey: return "TR31_M7_HMAC_KEY"
            case .tr31P0PinEncryptionKey: return "TR31_P0_PIN_ENCRYPTION_KEY"
            case .tr31P1PinGenerationKey: return "TR31_P1_PIN_GENERATION_KEY"
            case .tr31S0AsymmetricKeyForDigitalSignature: return "TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE"
            case .tr31V1Ibm3624PinVerificationKey: return "TR31_V1_IBM3624_PIN_VERIFICATION_KEY"
            case .tr31V2VisaPinVerificationKey: return "TR31_V2_VISA_PIN_VERIFICATION_KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsage(rawValue: rawValue) ?? KeyUsage.sdkUnknown(rawValue)
        }
    }
}

extension ListAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAliasesInput: Swift.Equatable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAliasesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

public enum ListAliasesOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
            self.nextToken = output.nextToken
        } else {
            self.aliases = nil
            self.nextToken = nil
        }
    }
}

public struct ListAliasesOutputResponse: Swift.Equatable {
    /// The list of aliases. Each alias describes the KeyArn contained within.
    /// This member is required.
    public var aliases: [PaymentCryptographyClientTypes.Alias]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        aliases: [PaymentCryptographyClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

struct ListAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [PaymentCryptographyClientTypes.Alias]?
    let nextToken: Swift.String?
}

extension ListAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[PaymentCryptographyClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [PaymentCryptographyClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyState = "KeyState"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListKeysInput: Swift.Equatable {
    /// The key state of the keys you want to list.
    public var keyState: PaymentCryptographyClientTypes.KeyState?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        keyState: PaymentCryptographyClientTypes.KeyState? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keyState = keyState
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListKeysInputBody: Swift.Equatable {
    let keyState: PaymentCryptographyClientTypes.KeyState?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyState = "KeyState"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

public enum ListKeysOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keys = output.keys
            self.nextToken = output.nextToken
        } else {
            self.keys = nil
            self.nextToken = nil
        }
    }
}

public struct ListKeysOutputResponse: Swift.Equatable {
    /// The list of keys created within the caller's Amazon Web Services account and Amazon Web Services Region.
    /// This member is required.
    public var keys: [PaymentCryptographyClientTypes.KeySummary]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        keys: [PaymentCryptographyClientTypes.KeySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keys = keys
        self.nextToken = nextToken
    }
}

struct ListKeysOutputResponseBody: Swift.Equatable {
    let keys: [PaymentCryptographyClientTypes.KeySummary]?
    let nextToken: Swift.String?
}

extension ListKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.KeySummary?].self, forKey: .keys)
        var keysDecoded0:[PaymentCryptographyClientTypes.KeySummary]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [PaymentCryptographyClientTypes.KeySummary]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?
    /// The KeyARN of the key whose tags you are getting.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

public enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?
    /// The list of tags associated with a ResourceArn. Each tag will list the key-value pair contained within that tag.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [PaymentCryptographyClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.resourceId = output.resourceId
        } else {
            self.properties.resourceId = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to an invalid resource error.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The string for the exception.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        resourceId: Swift.String? = nil
    )
    {
        self.properties.resourceId = resourceId
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let resourceId: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension RestoreKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension RestoreKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RestoreKeyInput: Swift.Equatable {
    /// The KeyARN of the key to be restored within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct RestoreKeyInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
}

extension RestoreKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

public enum RestoreKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension RestoreKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RestoreKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct RestoreKeyOutputResponse: Swift.Equatable {
    /// The key material of the restored key. The KeyState will change to CREATE_COMPLETE and value for DeletePendingTimestamp gets removed.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct RestoreKeyOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension RestoreKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyAttributes = "KeyAttributes"
        case publicKeyCertificate = "PublicKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let publicKeyCertificate = self.publicKeyCertificate {
            try encodeContainer.encode(publicKeyCertificate, forKey: .publicKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let publicKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyCertificate)
        publicKeyCertificate = publicKeyCertificateDecoded
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RootCertificatePublicKey(keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for root public key certificate import.
    public struct RootCertificatePublicKey: Swift.Equatable {
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the root public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for root public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }

}

extension ServiceQuotaExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartKeyUsageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension StartKeyUsageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartKeyUsageInput: Swift.Equatable {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct StartKeyUsageInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
}

extension StartKeyUsageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

public enum StartKeyUsageOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartKeyUsageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartKeyUsageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct StartKeyUsageOutputResponse: Swift.Equatable {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key activated for use.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct StartKeyUsageOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension StartKeyUsageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension StopKeyUsageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension StopKeyUsageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopKeyUsageInput: Swift.Equatable {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct StopKeyUsageInputBody: Swift.Equatable {
    let keyIdentifier: Swift.String?
}

extension StopKeyUsageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

public enum StopKeyUsageOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StopKeyUsageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StopKeyUsageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct StopKeyUsageOutputResponse: Swift.Equatable {
    /// The KeyARN of the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct StopKeyUsageOutputResponseBody: Swift.Equatable {
    let key: PaymentCryptographyClientTypes.Key?
}

extension StopKeyUsageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

extension PaymentCryptographyClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// A structure that contains information about a tag.
    public struct Tag: Swift.Equatable {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The KeyARN of the key whose tags are being updated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the new one. Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. To use this parameter, you must have [TagResource] permission in an IAM policy. Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension ThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes {
    public enum Tr34KeyBlockFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case x9Tr342012
        case sdkUnknown(Swift.String)

        public static var allCases: [Tr34KeyBlockFormat] {
            return [
                .x9Tr342012,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .x9Tr342012: return "X9_TR34_2012"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Tr34KeyBlockFormat(rawValue: rawValue) ?? Tr34KeyBlockFormat.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case keyAttributes = "KeyAttributes"
        case publicKeyCertificate = "PublicKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let publicKeyCertificate = self.publicKeyCertificate {
            try encodeContainer.encode(publicKeyCertificate, forKey: .publicKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let publicKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyCertificate)
        publicKeyCertificate = publicKeyCertificateDecoded
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrustedCertificatePublicKey(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for trusted public key certificate import.
    public struct TrustedCertificatePublicKey: Swift.Equatable {
        /// The KeyARN of the root public key certificate or certificate chain that signs the trusted public key certificate import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for trusted public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The KeyARN of the key whose tags are being removed.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tag keys. Don't include the tag values. If the Amazon Web Services Payment Cryptography key doesn't have the specified tag key, Amazon Web Services Payment Cryptography doesn't throw an exception or return a response. To confirm that the operation succeeded, use the [ListTagsForResource] operation.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

public enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }
}

extension UpdateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAliasInput: Swift.Equatable {
    /// The alias whose associated key is changing.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN for the key that you are updating or removing from the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

struct UpdateAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
    let keyArn: Swift.String?
}

extension UpdateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

public enum UpdateAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UpdateAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct UpdateAliasOutputResponse: Swift.Equatable {
    /// The alias name.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct UpdateAliasOutputResponseBody: Swift.Equatable {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension UpdateAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to an invalid request error.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.WrappedKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterial = "KeyMaterial"
        case wrappedKeyMaterialFormat = "WrappedKeyMaterialFormat"
        case wrappingKeyArn = "WrappingKeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
        if let wrappedKeyMaterialFormat = self.wrappedKeyMaterialFormat {
            try encodeContainer.encode(wrappedKeyMaterialFormat.rawValue, forKey: .wrappedKeyMaterialFormat)
        }
        if let wrappingKeyArn = self.wrappingKeyArn {
            try encodeContainer.encode(wrappingKeyArn, forKey: .wrappingKeyArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyArn)
        wrappingKeyArn = wrappingKeyArnDecoded
        let wrappedKeyMaterialFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappedKeyMaterialFormat.self, forKey: .wrappedKeyMaterialFormat)
        wrappedKeyMaterialFormat = wrappedKeyMaterialFormatDecoded
        let keyMaterialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
    }
}

extension PaymentCryptographyClientTypes.WrappedKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WrappedKey(wrappedKeyMaterialFormat: \(Swift.String(describing: wrappedKeyMaterialFormat)), wrappingKeyArn: \(Swift.String(describing: wrappingKeyArn)), keyMaterial: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for generating a wrapped key using TR-31 or TR-34 standard.
    public struct WrappedKey: Swift.Equatable {
        /// Parameter information for generating a wrapped key using TR-31 or TR-34 standard.
        /// This member is required.
        public var keyMaterial: Swift.String?
        /// The key block format of a wrapped key.
        /// This member is required.
        public var wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat?
        /// The KeyARN of the wrapped key.
        /// This member is required.
        public var wrappingKeyArn: Swift.String?

        public init(
            keyMaterial: Swift.String? = nil,
            wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat? = nil,
            wrappingKeyArn: Swift.String? = nil
        )
        {
            self.keyMaterial = keyMaterial
            self.wrappedKeyMaterialFormat = wrappedKeyMaterialFormat
            self.wrappingKeyArn = wrappingKeyArn
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum WrappedKeyMaterialFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyCryptogram
        case tr31KeyBlock
        case tr34KeyBlock
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappedKeyMaterialFormat] {
            return [
                .keyCryptogram,
                .tr31KeyBlock,
                .tr34KeyBlock,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyCryptogram: return "KEY_CRYPTOGRAM"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WrappedKeyMaterialFormat(rawValue: rawValue) ?? WrappedKeyMaterialFormat.sdkUnknown(rawValue)
        }
    }
}
