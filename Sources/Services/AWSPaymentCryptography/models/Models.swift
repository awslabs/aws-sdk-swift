// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.Alias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Contains information about an alias.
    public struct Alias {
        /// A friendly name that you can use to refer to a key. The value must begin with alias/. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        /// This member is required.
        public var aliasName: Swift.String?
        /// The KeyARN of the key associated with the alias.
        public var keyArn: Swift.String?

        public init(
            aliasName: Swift.String? = nil,
            keyArn: Swift.String? = nil
        )
        {
            self.aliasName = aliasName
            self.keyArn = keyArn
        }
    }

}

extension ConflictException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request can cause an inconsistent state for the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ConflictExceptionBody {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }
}

extension CreateAliasInput {

    static func urlPathProvider(_ value: CreateAliasInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateAliasInput {
    /// A friendly name that you can use to refer to a key. An alias must begin with alias/ followed by a name, for example alias/ExampleAlias. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN of the key to associate with the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

struct CreateAliasInputBody {
    let aliasName: Swift.String?
    let keyArn: Swift.String?
}

extension CreateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension CreateAliasOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateAliasOutputBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct CreateAliasOutput {
    /// The alias for the key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct CreateAliasOutputBody {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension CreateAliasOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

enum CreateAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyAttributes = "KeyAttributes"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateKeyInput {

    static func urlPathProvider(_ value: CreateKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateKeyInput {
    /// Specifies whether to enable the key. If the key is enabled, it is activated for use within the service. If the key is not enabled, then it is created but not activated. The default value is enabled.
    public var enabled: Swift.Bool?
    /// Specifies whether the key is exportable from the service.
    /// This member is required.
    public var exportable: Swift.Bool?
    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    /// This member is required.
    public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// Assigns one or more tags to the Amazon Web Services Payment Cryptography key. Use this parameter to tag a key when it is created. To tag an existing Amazon Web Services Payment Cryptography key, use the [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) operation. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        exportable: Swift.Bool? = nil,
        keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.exportable = exportable
        self.keyAttributes = keyAttributes
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.tags = tags
    }
}

struct CreateKeyInputBody {
    let keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
    let keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    let exportable: Swift.Bool?
    let enabled: Swift.Bool?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension CreateKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyAttributes = "KeyAttributes"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct CreateKeyOutput {
    /// The key material that contains all the key attributes.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct CreateKeyOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension CreateKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum CreateKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
    }
}

extension DeleteAliasInput {

    static func urlPathProvider(_ value: DeleteAliasInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteAliasInput {
    /// A friendly name that you can use to refer Amazon Web Services Payment Cryptography key. This value must begin with alias/ followed by a name, such as alias/ExampleAlias.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

struct DeleteAliasInputBody {
    let aliasName: Swift.String?
}

extension DeleteAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
    }
}

extension DeleteAliasOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteAliasOutput {

    public init() { }
}

enum DeleteAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteKeyInDays = "DeleteKeyInDays"
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteKeyInDays = self.deleteKeyInDays {
            try encodeContainer.encode(deleteKeyInDays, forKey: .deleteKeyInDays)
        }
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension DeleteKeyInput {

    static func urlPathProvider(_ value: DeleteKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteKeyInput {
    /// The waiting period for key deletion. The default value is seven days.
    public var deleteKeyInDays: Swift.Int?
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        deleteKeyInDays: Swift.Int? = nil,
        keyIdentifier: Swift.String? = nil
    )
    {
        self.deleteKeyInDays = deleteKeyInDays
        self.keyIdentifier = keyIdentifier
    }
}

struct DeleteKeyInputBody {
    let keyIdentifier: Swift.String?
    let deleteKeyInDays: Swift.Int?
}

extension DeleteKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteKeyInDays = "DeleteKeyInDays"
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
        let deleteKeyInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deleteKeyInDays)
        deleteKeyInDays = deleteKeyInDaysDecoded
    }
}

extension DeleteKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct DeleteKeyOutput {
    /// The KeyARN of the key that is scheduled for deletion.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct DeleteKeyOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension DeleteKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum DeleteKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.ExportAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportDukptInitialKey = "ExportDukptInitialKey"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportDukptInitialKey = self.exportDukptInitialKey {
            try encodeContainer.encode(exportDukptInitialKey, forKey: .exportDukptInitialKey)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDukptInitialKeyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ExportDukptInitialKey.self, forKey: .exportDukptInitialKey)
        exportDukptInitialKey = exportDukptInitialKeyDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// The attributes for IPEK generation during export.
    public struct ExportAttributes {
        /// Parameter information for IPEK export.
        public var exportDukptInitialKey: PaymentCryptographyClientTypes.ExportDukptInitialKey?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?

        public init(
            exportDukptInitialKey: PaymentCryptographyClientTypes.ExportDukptInitialKey? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil
        )
        {
            self.exportDukptInitialKey = exportDukptInitialKey
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        }
    }

}

extension PaymentCryptographyClientTypes.ExportDukptInitialKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keySerialNumber = "KeySerialNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keySerialNumber = self.keySerialNumber {
            try encodeContainer.encode(keySerialNumber, forKey: .keySerialNumber)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keySerialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keySerialNumber)
        keySerialNumber = keySerialNumberDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for IPEK generation during export.
    public struct ExportDukptInitialKey {
        /// The KSN for IPEK generation using DUKPT. KSN must be padded before sending to Amazon Web Services Payment Cryptography. KSN hex length should be 20 for a TDES_2KEY key or 24 for an AES key.
        /// This member is required.
        public var keySerialNumber: Swift.String?

        public init(
            keySerialNumber: Swift.String? = nil
        )
        {
            self.keySerialNumber = keySerialNumber
        }
    }

}

extension PaymentCryptographyClientTypes.ExportKeyCryptogram: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case wrappingKeyCertificate = "WrappingKeyCertificate"
        case wrappingSpec = "WrappingSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let wrappingKeyCertificate = self.wrappingKeyCertificate {
            try encodeContainer.encode(wrappingKeyCertificate, forKey: .wrappingKeyCertificate)
        }
        if let wrappingSpec = self.wrappingSpec {
            try encodeContainer.encode(wrappingSpec.rawValue, forKey: .wrappingSpec)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
        let wrappingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificate)
        wrappingKeyCertificate = wrappingKeyCertificateDecoded
        let wrappingSpecDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappingKeySpec.self, forKey: .wrappingSpec)
        wrappingSpec = wrappingSpecDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportKeyCryptogram: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportKeyCryptogram(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), wrappingSpec: \(Swift.String(describing: wrappingSpec)), wrappingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export using asymmetric RSA wrap and unwrap key exchange method.
    public struct ExportKeyCryptogram {
        /// The KeyARN of the certificate chain that signs the wrapping key certificate during RSA wrap and unwrap key export.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The wrapping key certificate in PEM format (base64 encoded). Amazon Web Services Payment Cryptography uses this certificate to wrap the key under export.
        /// This member is required.
        public var wrappingKeyCertificate: Swift.String?
        /// The wrapping spec for the key under export.
        public var wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            wrappingKeyCertificate: Swift.String? = nil,
            wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.wrappingKeyCertificate = wrappingKeyCertificate
            self.wrappingSpec = wrappingSpec
        }
    }

}

extension ExportKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportAttributes = "ExportAttributes"
        case exportKeyIdentifier = "ExportKeyIdentifier"
        case keyMaterial = "KeyMaterial"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportAttributes = self.exportAttributes {
            try encodeContainer.encode(exportAttributes, forKey: .exportAttributes)
        }
        if let exportKeyIdentifier = self.exportKeyIdentifier {
            try encodeContainer.encode(exportKeyIdentifier, forKey: .exportKeyIdentifier)
        }
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
    }
}

extension ExportKeyInput {

    static func urlPathProvider(_ value: ExportKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct ExportKeyInput {
    /// The attributes for IPEK generation during export.
    public var exportAttributes: PaymentCryptographyClientTypes.ExportAttributes?
    /// The KeyARN of the key under export from Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var exportKeyIdentifier: Swift.String?
    /// The key block format type, for example, TR-34 or TR-31, to use during key material export.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial?

    public init(
        exportAttributes: PaymentCryptographyClientTypes.ExportAttributes? = nil,
        exportKeyIdentifier: Swift.String? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial? = nil
    )
    {
        self.exportAttributes = exportAttributes
        self.exportKeyIdentifier = exportKeyIdentifier
        self.keyMaterial = keyMaterial
    }
}

struct ExportKeyInputBody {
    let keyMaterial: PaymentCryptographyClientTypes.ExportKeyMaterial?
    let exportKeyIdentifier: Swift.String?
    let exportAttributes: PaymentCryptographyClientTypes.ExportAttributes?
}

extension ExportKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportAttributes = "ExportAttributes"
        case exportKeyIdentifier = "ExportKeyIdentifier"
        case keyMaterial = "KeyMaterial"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ExportKeyMaterial.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
        let exportKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportKeyIdentifier)
        exportKeyIdentifier = exportKeyIdentifierDecoded
        let exportAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ExportAttributes.self, forKey: .exportAttributes)
        exportAttributes = exportAttributesDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportKeyMaterial: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keycryptogram = "KeyCryptogram"
        case tr31keyblock = "Tr31KeyBlock"
        case tr34keyblock = "Tr34KeyBlock"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .keycryptogram(keycryptogram):
                try container.encode(keycryptogram, forKey: .keycryptogram)
            case let .tr31keyblock(tr31keyblock):
                try container.encode(tr31keyblock, forKey: .tr31keyblock)
            case let .tr34keyblock(tr34keyblock):
                try container.encode(tr34keyblock, forKey: .tr34keyblock)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let tr31keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ExportTr31KeyBlock.self, forKey: .tr31keyblock)
        if let tr31keyblock = tr31keyblockDecoded {
            self = .tr31keyblock(tr31keyblock)
            return
        }
        let tr34keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ExportTr34KeyBlock.self, forKey: .tr34keyblock)
        if let tr34keyblock = tr34keyblockDecoded {
            self = .tr34keyblock(tr34keyblock)
            return
        }
        let keycryptogramDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ExportKeyCryptogram.self, forKey: .keycryptogram)
        if let keycryptogram = keycryptogramDecoded {
            self = .keycryptogram(keycryptogram)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export from Amazon Web Services Payment Cryptography using TR-31 or TR-34 or RSA wrap and unwrap key exchange method.
    public enum ExportKeyMaterial {
        /// Parameter information for key material export using symmetric TR-31 key exchange method.
        case tr31keyblock(PaymentCryptographyClientTypes.ExportTr31KeyBlock)
        /// Parameter information for key material export using the asymmetric TR-34 key exchange method.
        case tr34keyblock(PaymentCryptographyClientTypes.ExportTr34KeyBlock)
        /// Parameter information for key material export using asymmetric RSA wrap and unwrap key exchange method
        case keycryptogram(PaymentCryptographyClientTypes.ExportKeyCryptogram)
        case sdkUnknown(Swift.String)
    }

}

extension ExportKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ExportKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.wrappedKey = output.wrappedKey
        } else {
            self.wrappedKey = nil
        }
    }
}

public struct ExportKeyOutput {
    /// The key material under export as a TR-34 WrappedKeyBlock or a TR-31 WrappedKeyBlock. or a RSA WrappedKeyCryptogram.
    public var wrappedKey: PaymentCryptographyClientTypes.WrappedKey?

    public init(
        wrappedKey: PaymentCryptographyClientTypes.WrappedKey? = nil
    )
    {
        self.wrappedKey = wrappedKey
    }
}

struct ExportKeyOutputBody {
    let wrappedKey: PaymentCryptographyClientTypes.WrappedKey?
}

extension ExportKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case wrappedKey = "WrappedKey"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappedKeyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappedKey.self, forKey: .wrappedKey)
        wrappedKey = wrappedKeyDecoded
    }
}

enum ExportKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.ExportTr31KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyBlockHeaders = "KeyBlockHeaders"
        case wrappingKeyIdentifier = "WrappingKeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyBlockHeaders = self.keyBlockHeaders {
            try encodeContainer.encode(keyBlockHeaders, forKey: .keyBlockHeaders)
        }
        if let wrappingKeyIdentifier = self.wrappingKeyIdentifier {
            try encodeContainer.encode(wrappingKeyIdentifier, forKey: .wrappingKeyIdentifier)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyIdentifier)
        wrappingKeyIdentifier = wrappingKeyIdentifierDecoded
        let keyBlockHeadersDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyBlockHeaders.self, forKey: .keyBlockHeaders)
        keyBlockHeaders = keyBlockHeadersDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export using symmetric TR-31 key exchange method.
    public struct ExportTr31KeyBlock {
        /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
        public var keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders?
        /// The KeyARN of the the wrapping key. This key encrypts or wraps the key under export for TR-31 key block generation.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders? = nil,
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.keyBlockHeaders = keyBlockHeaders
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }

}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case exportToken = "ExportToken"
        case keyBlockFormat = "KeyBlockFormat"
        case keyBlockHeaders = "KeyBlockHeaders"
        case randomNonce = "RandomNonce"
        case wrappingKeyCertificate = "WrappingKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let exportToken = self.exportToken {
            try encodeContainer.encode(exportToken, forKey: .exportToken)
        }
        if let keyBlockFormat = self.keyBlockFormat {
            try encodeContainer.encode(keyBlockFormat.rawValue, forKey: .keyBlockFormat)
        }
        if let keyBlockHeaders = self.keyBlockHeaders {
            try encodeContainer.encode(keyBlockHeaders, forKey: .keyBlockHeaders)
        }
        if let randomNonce = self.randomNonce {
            try encodeContainer.encode(randomNonce, forKey: .randomNonce)
        }
        if let wrappingKeyCertificate = self.wrappingKeyCertificate {
            try encodeContainer.encode(wrappingKeyCertificate, forKey: .wrappingKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
        let wrappingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificate)
        wrappingKeyCertificate = wrappingKeyCertificateDecoded
        let exportTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportToken)
        exportToken = exportTokenDecoded
        let keyBlockFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Tr34KeyBlockFormat.self, forKey: .keyBlockFormat)
        keyBlockFormat = keyBlockFormatDecoded
        let randomNonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomNonce)
        randomNonce = randomNonceDecoded
        let keyBlockHeadersDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyBlockHeaders.self, forKey: .keyBlockHeaders)
        keyBlockHeaders = keyBlockHeadersDecoded
    }
}

extension PaymentCryptographyClientTypes.ExportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), exportToken: \(Swift.String(describing: exportToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), keyBlockHeaders: \(Swift.String(describing: keyBlockHeaders)), randomNonce: \(Swift.String(describing: randomNonce)), wrappingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material export using the asymmetric TR-34 key exchange method.
    public struct ExportTr34KeyBlock {
        /// The KeyARN of the certificate chain that signs the wrapping key certificate during TR-34 key export.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The export token to initiate key export from Amazon Web Services Payment Cryptography. It also contains the signing key certificate that will sign the wrapped key during TR-34 key block generation. Call [GetParametersForExport](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_GetParametersForExport.html) to receive an export token. It expires after 7 days. You can use the same export token to export multiple keys from the same service account.
        /// This member is required.
        public var exportToken: Swift.String?
        /// The format of key block that Amazon Web Services Payment Cryptography will use during key export.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
        public var keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The KeyARN of the wrapping key certificate. Amazon Web Services Payment Cryptography uses this certificate to wrap the key under export.
        /// This member is required.
        public var wrappingKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            exportToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            keyBlockHeaders: PaymentCryptographyClientTypes.KeyBlockHeaders? = nil,
            randomNonce: Swift.String? = nil,
            wrappingKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.exportToken = exportToken
            self.keyBlockFormat = keyBlockFormat
            self.keyBlockHeaders = keyBlockHeaders
            self.randomNonce = randomNonce
            self.wrappingKeyCertificate = wrappingKeyCertificate
        }
    }

}

extension GetAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
    }
}

extension GetAliasInput {

    static func urlPathProvider(_ value: GetAliasInput) -> Swift.String? {
        return "/"
    }
}

public struct GetAliasInput {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

struct GetAliasInputBody {
    let aliasName: Swift.String?
}

extension GetAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
    }
}

extension GetAliasOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetAliasOutputBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct GetAliasOutput {
    /// The alias of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct GetAliasOutputBody {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension GetAliasOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

enum GetAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension GetKeyInput {

    static func urlPathProvider(_ value: GetKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct GetKeyInput {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct GetKeyInputBody {
    let keyIdentifier: Swift.String?
}

extension GetKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

extension GetKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct GetKeyOutput {
    /// The key material, including the immutable and mutable data for the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct GetKeyOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension GetKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum GetKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetParametersForExportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyMaterialType = self.keyMaterialType {
            try encodeContainer.encode(keyMaterialType.rawValue, forKey: .keyMaterialType)
        }
        if let signingKeyAlgorithm = self.signingKeyAlgorithm {
            try encodeContainer.encode(signingKeyAlgorithm.rawValue, forKey: .signingKeyAlgorithm)
        }
    }
}

extension GetParametersForExportInput {

    static func urlPathProvider(_ value: GetParametersForExportInput) -> Swift.String? {
        return "/"
    }
}

public struct GetParametersForExportInput {
    /// The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, TR34_KEY_BLOCK. Export token is not required for TR-31 key export.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.signingKeyAlgorithm = signingKeyAlgorithm
    }
}

struct GetParametersForExportInputBody {
    let keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    let signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
}

extension GetParametersForExportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialTypeDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyMaterialType.self, forKey: .keyMaterialType)
        keyMaterialType = keyMaterialTypeDecoded
        let signingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .signingKeyAlgorithm)
        signingKeyAlgorithm = signingKeyAlgorithmDecoded
    }
}

extension GetParametersForExportOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForExportOutput(exportToken: \(Swift.String(describing: exportToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), signingKeyAlgorithm: \(Swift.String(describing: signingKeyAlgorithm)), signingKeyCertificate: \"CONTENT_REDACTED\", signingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetParametersForExportOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetParametersForExportOutputBody = try responseDecoder.decode(responseBody: data)
            self.exportToken = output.exportToken
            self.parametersValidUntilTimestamp = output.parametersValidUntilTimestamp
            self.signingKeyAlgorithm = output.signingKeyAlgorithm
            self.signingKeyCertificate = output.signingKeyCertificate
            self.signingKeyCertificateChain = output.signingKeyCertificateChain
        } else {
            self.exportToken = nil
            self.parametersValidUntilTimestamp = nil
            self.signingKeyAlgorithm = nil
            self.signingKeyCertificate = nil
            self.signingKeyCertificateChain = nil
        }
    }
}

public struct GetParametersForExportOutput {
    /// The export token to initiate key export from Amazon Web Services Payment Cryptography. The export token expires after 7 days. You can use the same export token to export multiple keys from the same service account.
    /// This member is required.
    public var exportToken: Swift.String?
    /// The validity period of the export token.
    /// This member is required.
    public var parametersValidUntilTimestamp: ClientRuntime.Date?
    /// The algorithm of the signing key certificate for use in TR-34 key block generation. RSA_2048 is the only signing key algorithm allowed.
    /// This member is required.
    public var signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The signing key certificate in PEM format (base64 encoded) of the public key for signature within the TR-34 key block. The certificate expires after 7 days.
    /// This member is required.
    public var signingKeyCertificate: Swift.String?
    /// The root certificate authority (CA) that signed the signing key certificate in PEM format (base64 encoded).
    /// This member is required.
    public var signingKeyCertificateChain: Swift.String?

    public init(
        exportToken: Swift.String? = nil,
        parametersValidUntilTimestamp: ClientRuntime.Date? = nil,
        signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        signingKeyCertificate: Swift.String? = nil,
        signingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.exportToken = exportToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.signingKeyAlgorithm = signingKeyAlgorithm
        self.signingKeyCertificate = signingKeyCertificate
        self.signingKeyCertificateChain = signingKeyCertificateChain
    }
}

struct GetParametersForExportOutputBody {
    let signingKeyCertificate: Swift.String?
    let signingKeyCertificateChain: Swift.String?
    let signingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    let exportToken: Swift.String?
    let parametersValidUntilTimestamp: ClientRuntime.Date?
}

extension GetParametersForExportOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportToken = "ExportToken"
        case parametersValidUntilTimestamp = "ParametersValidUntilTimestamp"
        case signingKeyAlgorithm = "SigningKeyAlgorithm"
        case signingKeyCertificate = "SigningKeyCertificate"
        case signingKeyCertificateChain = "SigningKeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificate)
        signingKeyCertificate = signingKeyCertificateDecoded
        let signingKeyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificateChain)
        signingKeyCertificateChain = signingKeyCertificateChainDecoded
        let signingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .signingKeyAlgorithm)
        signingKeyAlgorithm = signingKeyAlgorithmDecoded
        let exportTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportToken)
        exportToken = exportTokenDecoded
        let parametersValidUntilTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .parametersValidUntilTimestamp)
        parametersValidUntilTimestamp = parametersValidUntilTimestampDecoded
    }
}

enum GetParametersForExportOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetParametersForImportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyMaterialType = self.keyMaterialType {
            try encodeContainer.encode(keyMaterialType.rawValue, forKey: .keyMaterialType)
        }
        if let wrappingKeyAlgorithm = self.wrappingKeyAlgorithm {
            try encodeContainer.encode(wrappingKeyAlgorithm.rawValue, forKey: .wrappingKeyAlgorithm)
        }
    }
}

extension GetParametersForImportInput {

    static func urlPathProvider(_ value: GetParametersForImportInput) -> Swift.String? {
        return "/"
    }
}

public struct GetParametersForImportInput {
    /// The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (TR34_KEY_BLOCK) and RSA WrappedKeyCryptogram (KEY_CRYPTOGRAM). Import token is not required for TR-31, root public key cerificate or trusted public key certificate.
    /// This member is required.
    public var keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    /// The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import. At this time, RSA_2048 is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, RSA_2048, RSA_3072, RSA_4096 are the allowed algorithms for RSA WrappedKeyCryptogram import.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?

    public init(
        keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil
    )
    {
        self.keyMaterialType = keyMaterialType
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
    }
}

struct GetParametersForImportInputBody {
    let keyMaterialType: PaymentCryptographyClientTypes.KeyMaterialType?
    let wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
}

extension GetParametersForImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMaterialType = "KeyMaterialType"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialTypeDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyMaterialType.self, forKey: .keyMaterialType)
        keyMaterialType = keyMaterialTypeDecoded
        let wrappingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .wrappingKeyAlgorithm)
        wrappingKeyAlgorithm = wrappingKeyAlgorithmDecoded
    }
}

extension GetParametersForImportOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForImportOutput(importToken: \(Swift.String(describing: importToken)), parametersValidUntilTimestamp: \(Swift.String(describing: parametersValidUntilTimestamp)), wrappingKeyAlgorithm: \(Swift.String(describing: wrappingKeyAlgorithm)), wrappingKeyCertificate: \"CONTENT_REDACTED\", wrappingKeyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetParametersForImportOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetParametersForImportOutputBody = try responseDecoder.decode(responseBody: data)
            self.importToken = output.importToken
            self.parametersValidUntilTimestamp = output.parametersValidUntilTimestamp
            self.wrappingKeyAlgorithm = output.wrappingKeyAlgorithm
            self.wrappingKeyCertificate = output.wrappingKeyCertificate
            self.wrappingKeyCertificateChain = output.wrappingKeyCertificateChain
        } else {
            self.importToken = nil
            self.parametersValidUntilTimestamp = nil
            self.wrappingKeyAlgorithm = nil
            self.wrappingKeyCertificate = nil
            self.wrappingKeyCertificateChain = nil
        }
    }
}

public struct GetParametersForImportOutput {
    /// The import token to initiate key import into Amazon Web Services Payment Cryptography. The import token expires after 7 days. You can use the same import token to import multiple keys to the same service account.
    /// This member is required.
    public var importToken: Swift.String?
    /// The validity period of the import token.
    /// This member is required.
    public var parametersValidUntilTimestamp: ClientRuntime.Date?
    /// The algorithm of the wrapping key for use within TR-34 WrappedKeyBlock or RSA WrappedKeyCryptogram.
    /// This member is required.
    public var wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    /// The wrapping key certificate in PEM format (base64 encoded) of the wrapping key for use within the TR-34 key block. The certificate expires in 7 days.
    /// This member is required.
    public var wrappingKeyCertificate: Swift.String?
    /// The Amazon Web Services Payment Cryptography root certificate authority (CA) that signed the wrapping key certificate in PEM format (base64 encoded).
    /// This member is required.
    public var wrappingKeyCertificateChain: Swift.String?

    public init(
        importToken: Swift.String? = nil,
        parametersValidUntilTimestamp: ClientRuntime.Date? = nil,
        wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
        wrappingKeyCertificate: Swift.String? = nil,
        wrappingKeyCertificateChain: Swift.String? = nil
    )
    {
        self.importToken = importToken
        self.parametersValidUntilTimestamp = parametersValidUntilTimestamp
        self.wrappingKeyAlgorithm = wrappingKeyAlgorithm
        self.wrappingKeyCertificate = wrappingKeyCertificate
        self.wrappingKeyCertificateChain = wrappingKeyCertificateChain
    }
}

struct GetParametersForImportOutputBody {
    let wrappingKeyCertificate: Swift.String?
    let wrappingKeyCertificateChain: Swift.String?
    let wrappingKeyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
    let importToken: Swift.String?
    let parametersValidUntilTimestamp: ClientRuntime.Date?
}

extension GetParametersForImportOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importToken = "ImportToken"
        case parametersValidUntilTimestamp = "ParametersValidUntilTimestamp"
        case wrappingKeyAlgorithm = "WrappingKeyAlgorithm"
        case wrappingKeyCertificate = "WrappingKeyCertificate"
        case wrappingKeyCertificateChain = "WrappingKeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificate)
        wrappingKeyCertificate = wrappingKeyCertificateDecoded
        let wrappingKeyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyCertificateChain)
        wrappingKeyCertificateChain = wrappingKeyCertificateChainDecoded
        let wrappingKeyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .wrappingKeyAlgorithm)
        wrappingKeyAlgorithm = wrappingKeyAlgorithmDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importToken)
        importToken = importTokenDecoded
        let parametersValidUntilTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .parametersValidUntilTimestamp)
        parametersValidUntilTimestamp = parametersValidUntilTimestampDecoded
    }
}

enum GetParametersForImportOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetPublicKeyCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension GetPublicKeyCertificateInput {

    static func urlPathProvider(_ value: GetPublicKeyCertificateInput) -> Swift.String? {
        return "/"
    }
}

public struct GetPublicKeyCertificateInput {
    /// The KeyARN of the asymmetric key pair.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct GetPublicKeyCertificateInputBody {
    let keyIdentifier: Swift.String?
}

extension GetPublicKeyCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

extension GetPublicKeyCertificateOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPublicKeyCertificateOutput(keyCertificate: \"CONTENT_REDACTED\", keyCertificateChain: \"CONTENT_REDACTED\")"}
}

extension GetPublicKeyCertificateOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetPublicKeyCertificateOutputBody = try responseDecoder.decode(responseBody: data)
            self.keyCertificate = output.keyCertificate
            self.keyCertificateChain = output.keyCertificateChain
        } else {
            self.keyCertificate = nil
            self.keyCertificateChain = nil
        }
    }
}

public struct GetPublicKeyCertificateOutput {
    /// The public key component of the asymmetric key pair in a certificate PEM format (base64 encoded). It is signed by the root certificate authority (CA). The certificate expires in 90 days.
    /// This member is required.
    public var keyCertificate: Swift.String?
    /// The root certificate authority (CA) that signed the public key certificate in PEM format (base64 encoded) of the asymmetric key pair.
    /// This member is required.
    public var keyCertificateChain: Swift.String?

    public init(
        keyCertificate: Swift.String? = nil,
        keyCertificateChain: Swift.String? = nil
    )
    {
        self.keyCertificate = keyCertificate
        self.keyCertificateChain = keyCertificateChain
    }
}

struct GetPublicKeyCertificateOutputBody {
    let keyCertificate: Swift.String?
    let keyCertificateChain: Swift.String?
}

extension GetPublicKeyCertificateOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyCertificate = "KeyCertificate"
        case keyCertificateChain = "KeyCertificateChain"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCertificate)
        keyCertificate = keyCertificateDecoded
        let keyCertificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCertificateChain)
        keyCertificateChain = keyCertificateChainDecoded
    }
}

enum GetPublicKeyCertificateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.ImportKeyCryptogram: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportable = "Exportable"
        case importToken = "ImportToken"
        case keyAttributes = "KeyAttributes"
        case wrappedKeyCryptogram = "WrappedKeyCryptogram"
        case wrappingSpec = "WrappingSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let importToken = self.importToken {
            try encodeContainer.encode(importToken, forKey: .importToken)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let wrappedKeyCryptogram = self.wrappedKeyCryptogram {
            try encodeContainer.encode(wrappedKeyCryptogram, forKey: .wrappedKeyCryptogram)
        }
        if let wrappingSpec = self.wrappingSpec {
            try encodeContainer.encode(wrappingSpec.rawValue, forKey: .wrappingSpec)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let wrappedKeyCryptogramDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappedKeyCryptogram)
        wrappedKeyCryptogram = wrappedKeyCryptogramDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importToken)
        importToken = importTokenDecoded
        let wrappingSpecDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappingKeySpec.self, forKey: .wrappingSpec)
        wrappingSpec = wrappingSpecDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import using asymmetric RSA wrap and unwrap key exchange method.
    public struct ImportKeyCryptogram {
        /// Specifies whether the key is exportable from the service.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.
        /// This member is required.
        public var importToken: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The RSA wrapped key cryptogram under import.
        /// This member is required.
        public var wrappedKeyCryptogram: Swift.String?
        /// The wrapping spec for the wrapped key cryptogram.
        public var wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec?

        public init(
            exportable: Swift.Bool? = nil,
            importToken: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            wrappedKeyCryptogram: Swift.String? = nil,
            wrappingSpec: PaymentCryptographyClientTypes.WrappingKeySpec? = nil
        )
        {
            self.exportable = exportable
            self.importToken = importToken
            self.keyAttributes = keyAttributes
            self.wrappedKeyCryptogram = wrappedKeyCryptogram
            self.wrappingSpec = wrappingSpec
        }
    }

}

extension ImportKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyMaterial = "KeyMaterial"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension ImportKeyInput {

    static func urlPathProvider(_ value: ImportKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct ImportKeyInput {
    /// Specifies whether import key is enabled.
    public var enabled: Swift.Bool?
    /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
    public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    /// The key or public key certificate type to use during key material import, for example TR-34 or RootCertificatePublicKey.
    /// This member is required.
    public var keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial?
    /// Assigns one or more tags to the Amazon Web Services Payment Cryptography key. Use this parameter to tag a key when it is imported. To tag an existing Amazon Web Services Payment Cryptography key, use the [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) operation. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the specified one. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
        keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
        self.keyMaterial = keyMaterial
        self.tags = tags
    }
}

struct ImportKeyInputBody {
    let keyMaterial: PaymentCryptographyClientTypes.ImportKeyMaterial?
    let keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
    let enabled: Swift.Bool?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension ImportKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyMaterial = "KeyMaterial"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMaterialDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.ImportKeyMaterial.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PaymentCryptographyClientTypes.ImportKeyMaterial: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keycryptogram = "KeyCryptogram"
        case rootcertificatepublickey = "RootCertificatePublicKey"
        case tr31keyblock = "Tr31KeyBlock"
        case tr34keyblock = "Tr34KeyBlock"
        case trustedcertificatepublickey = "TrustedCertificatePublicKey"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .keycryptogram(keycryptogram):
                try container.encode(keycryptogram, forKey: .keycryptogram)
            case let .rootcertificatepublickey(rootcertificatepublickey):
                try container.encode(rootcertificatepublickey, forKey: .rootcertificatepublickey)
            case let .tr31keyblock(tr31keyblock):
                try container.encode(tr31keyblock, forKey: .tr31keyblock)
            case let .tr34keyblock(tr34keyblock):
                try container.encode(tr34keyblock, forKey: .tr34keyblock)
            case let .trustedcertificatepublickey(trustedcertificatepublickey):
                try container.encode(trustedcertificatepublickey, forKey: .trustedcertificatepublickey)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let rootcertificatepublickeyDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.RootCertificatePublicKey.self, forKey: .rootcertificatepublickey)
        if let rootcertificatepublickey = rootcertificatepublickeyDecoded {
            self = .rootcertificatepublickey(rootcertificatepublickey)
            return
        }
        let trustedcertificatepublickeyDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.TrustedCertificatePublicKey.self, forKey: .trustedcertificatepublickey)
        if let trustedcertificatepublickey = trustedcertificatepublickeyDecoded {
            self = .trustedcertificatepublickey(trustedcertificatepublickey)
            return
        }
        let tr31keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ImportTr31KeyBlock.self, forKey: .tr31keyblock)
        if let tr31keyblock = tr31keyblockDecoded {
            self = .tr31keyblock(tr31keyblock)
            return
        }
        let tr34keyblockDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ImportTr34KeyBlock.self, forKey: .tr34keyblock)
        if let tr34keyblock = tr34keyblockDecoded {
            self = .tr34keyblock(tr34keyblock)
            return
        }
        let keycryptogramDecoded = try values.decodeIfPresent(PaymentCryptographyClientTypes.ImportKeyCryptogram.self, forKey: .keycryptogram)
        if let keycryptogram = keycryptogramDecoded {
            self = .keycryptogram(keycryptogram)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import into Amazon Web Services Payment Cryptography using TR-31 or TR-34 or RSA wrap and unwrap key exchange method.
    public enum ImportKeyMaterial {
        /// Parameter information for root public key certificate import.
        case rootcertificatepublickey(PaymentCryptographyClientTypes.RootCertificatePublicKey)
        /// Parameter information for trusted public key certificate import.
        case trustedcertificatepublickey(PaymentCryptographyClientTypes.TrustedCertificatePublicKey)
        /// Parameter information for key material import using symmetric TR-31 key exchange method.
        case tr31keyblock(PaymentCryptographyClientTypes.ImportTr31KeyBlock)
        /// Parameter information for key material import using the asymmetric TR-34 key exchange method.
        case tr34keyblock(PaymentCryptographyClientTypes.ImportTr34KeyBlock)
        /// Parameter information for key material import using asymmetric RSA wrap and unwrap key exchange method.
        case keycryptogram(PaymentCryptographyClientTypes.ImportKeyCryptogram)
        case sdkUnknown(Swift.String)
    }

}

extension ImportKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ImportKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct ImportKeyOutput {
    /// The KeyARN of the key material imported within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct ImportKeyOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension ImportKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum ImportKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.ImportTr31KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case wrappedKeyBlock = "WrappedKeyBlock"
        case wrappingKeyIdentifier = "WrappingKeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let wrappedKeyBlock = self.wrappedKeyBlock {
            try encodeContainer.encode(wrappedKeyBlock, forKey: .wrappedKeyBlock)
        }
        if let wrappingKeyIdentifier = self.wrappingKeyIdentifier {
            try encodeContainer.encode(wrappingKeyIdentifier, forKey: .wrappingKeyIdentifier)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyIdentifier)
        wrappingKeyIdentifier = wrappingKeyIdentifierDecoded
        let wrappedKeyBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappedKeyBlock)
        wrappedKeyBlock = wrappedKeyBlockDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import using symmetric TR-31 key exchange method.
    public struct ImportTr31KeyBlock {
        /// The TR-31 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?
        /// The KeyARN of the key that will decrypt or unwrap a TR-31 key block during import.
        /// This member is required.
        public var wrappingKeyIdentifier: Swift.String?

        public init(
            wrappedKeyBlock: Swift.String? = nil,
            wrappingKeyIdentifier: Swift.String? = nil
        )
        {
            self.wrappedKeyBlock = wrappedKeyBlock
            self.wrappingKeyIdentifier = wrappingKeyIdentifier
        }
    }

}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case importToken = "ImportToken"
        case keyBlockFormat = "KeyBlockFormat"
        case randomNonce = "RandomNonce"
        case signingKeyCertificate = "SigningKeyCertificate"
        case wrappedKeyBlock = "WrappedKeyBlock"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let importToken = self.importToken {
            try encodeContainer.encode(importToken, forKey: .importToken)
        }
        if let keyBlockFormat = self.keyBlockFormat {
            try encodeContainer.encode(keyBlockFormat.rawValue, forKey: .keyBlockFormat)
        }
        if let randomNonce = self.randomNonce {
            try encodeContainer.encode(randomNonce, forKey: .randomNonce)
        }
        if let signingKeyCertificate = self.signingKeyCertificate {
            try encodeContainer.encode(signingKeyCertificate, forKey: .signingKeyCertificate)
        }
        if let wrappedKeyBlock = self.wrappedKeyBlock {
            try encodeContainer.encode(wrappedKeyBlock, forKey: .wrappedKeyBlock)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
        let signingKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingKeyCertificate)
        signingKeyCertificate = signingKeyCertificateDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importToken)
        importToken = importTokenDecoded
        let wrappedKeyBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappedKeyBlock)
        wrappedKeyBlock = wrappedKeyBlockDecoded
        let keyBlockFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Tr34KeyBlockFormat.self, forKey: .keyBlockFormat)
        keyBlockFormat = keyBlockFormatDecoded
        let randomNonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomNonce)
        randomNonce = randomNonceDecoded
    }
}

extension PaymentCryptographyClientTypes.ImportTr34KeyBlock: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportTr34KeyBlock(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), importToken: \(Swift.String(describing: importToken)), keyBlockFormat: \(Swift.String(describing: keyBlockFormat)), randomNonce: \(Swift.String(describing: randomNonce)), wrappedKeyBlock: \(Swift.String(describing: wrappedKeyBlock)), signingKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for key material import using the asymmetric TR-34 key exchange method.
    public struct ImportTr34KeyBlock {
        /// The KeyARN of the certificate chain that signs the signing key certificate during TR-34 key import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The import token that initiates key import using the asymmetric TR-34 key exchange method into Amazon Web Services Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.
        /// This member is required.
        public var importToken: Swift.String?
        /// The key block format to use during key import. The only value allowed is X9_TR34_2012.
        /// This member is required.
        public var keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat?
        /// A random number value that is unique to the TR-34 key block generated using 2 pass. The operation will fail, if a random nonce value is not provided for a TR-34 key block generated using 2 pass.
        public var randomNonce: Swift.String?
        /// The public key component in PEM certificate format of the private key that signs the KDH TR-34 WrappedKeyBlock.
        /// This member is required.
        public var signingKeyCertificate: Swift.String?
        /// The TR-34 wrapped key block to import.
        /// This member is required.
        public var wrappedKeyBlock: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            importToken: Swift.String? = nil,
            keyBlockFormat: PaymentCryptographyClientTypes.Tr34KeyBlockFormat? = nil,
            randomNonce: Swift.String? = nil,
            signingKeyCertificate: Swift.String? = nil,
            wrappedKeyBlock: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.importToken = importToken
            self.keyBlockFormat = keyBlockFormat
            self.randomNonce = randomNonce
            self.signingKeyCertificate = signingKeyCertificate
            self.wrappedKeyBlock = wrappedKeyBlock
        }
    }

}

extension InternalServerException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request processing has failed because of an unknown error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InternalServerExceptionBody {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.Key: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTimestamp = "CreateTimestamp"
        case deletePendingTimestamp = "DeletePendingTimestamp"
        case deleteTimestamp = "DeleteTimestamp"
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyArn = "KeyArn"
        case keyAttributes = "KeyAttributes"
        case keyCheckValue = "KeyCheckValue"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyOrigin = "KeyOrigin"
        case keyState = "KeyState"
        case usageStartTimestamp = "UsageStartTimestamp"
        case usageStopTimestamp = "UsageStopTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encodeTimestamp(createTimestamp, format: .epochSeconds, forKey: .createTimestamp)
        }
        if let deletePendingTimestamp = self.deletePendingTimestamp {
            try encodeContainer.encodeTimestamp(deletePendingTimestamp, format: .epochSeconds, forKey: .deletePendingTimestamp)
        }
        if let deleteTimestamp = self.deleteTimestamp {
            try encodeContainer.encodeTimestamp(deleteTimestamp, format: .epochSeconds, forKey: .deleteTimestamp)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValue = self.keyCheckValue {
            try encodeContainer.encode(keyCheckValue, forKey: .keyCheckValue)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let keyOrigin = self.keyOrigin {
            try encodeContainer.encode(keyOrigin.rawValue, forKey: .keyOrigin)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let usageStartTimestamp = self.usageStartTimestamp {
            try encodeContainer.encodeTimestamp(usageStartTimestamp, format: .epochSeconds, forKey: .usageStartTimestamp)
        }
        if let usageStopTimestamp = self.usageStopTimestamp {
            try encodeContainer.encodeTimestamp(usageStopTimestamp, format: .epochSeconds, forKey: .usageStopTimestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCheckValue)
        keyCheckValue = keyCheckValueDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let keyOriginDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyOrigin.self, forKey: .keyOrigin)
        keyOrigin = keyOriginDecoded
        let createTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let usageStartTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .usageStartTimestamp)
        usageStartTimestamp = usageStartTimestampDecoded
        let usageStopTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .usageStopTimestamp)
        usageStopTimestamp = usageStopTimestampDecoded
        let deletePendingTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deletePendingTimestamp)
        deletePendingTimestamp = deletePendingTimestampDecoded
        let deleteTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deleteTimestamp)
        deleteTimestamp = deleteTimestampDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct Key {
        /// The date and time when the key was created.
        /// This member is required.
        public var createTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when KeyState is DELETE_PENDING and the key is scheduled for deletion.
        public var deletePendingTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the KeyState is DELETE_COMPLETE and the Amazon Web Services Payment Cryptography key is deleted.
        public var deleteTimestamp: ClientRuntime.Date?
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        /// This member is required.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
        /// The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is AWS_PAYMENT_CRYPTOGRAPHY. For keys imported into Amazon Web Services Payment Cryptography, the value is EXTERNAL.
        /// This member is required.
        public var keyOrigin: PaymentCryptographyClientTypes.KeyOrigin?
        /// The state of key that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?
        /// The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.
        public var usageStartTimestamp: ClientRuntime.Date?
        /// The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.
        public var usageStopTimestamp: ClientRuntime.Date?

        public init(
            createTimestamp: ClientRuntime.Date? = nil,
            deletePendingTimestamp: ClientRuntime.Date? = nil,
            deleteTimestamp: ClientRuntime.Date? = nil,
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
            keyOrigin: PaymentCryptographyClientTypes.KeyOrigin? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil,
            usageStartTimestamp: ClientRuntime.Date? = nil,
            usageStopTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.createTimestamp = createTimestamp
            self.deletePendingTimestamp = deletePendingTimestamp
            self.deleteTimestamp = deleteTimestamp
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
            self.keyOrigin = keyOrigin
            self.keyState = keyState
            self.usageStartTimestamp = usageStartTimestamp
            self.usageStopTimestamp = usageStopTimestamp
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes128
        case aes192
        case aes256
        case rsa2048
        case rsa3072
        case rsa4096
        case tdes2key
        case tdes3key
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .aes128,
                .aes192,
                .aes256,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .tdes2key,
                .tdes3key,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .aes192: return "AES_192"
            case .aes256: return "AES_256"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .tdes2key: return "TDES_2KEY"
            case .tdes3key: return "TDES_3KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyAlgorithm(rawValue: rawValue) ?? KeyAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeyAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyAlgorithm = "KeyAlgorithm"
        case keyClass = "KeyClass"
        case keyModesOfUse = "KeyModesOfUse"
        case keyUsage = "KeyUsage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyAlgorithm = self.keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm.rawValue, forKey: .keyAlgorithm)
        }
        if let keyClass = self.keyClass {
            try encodeContainer.encode(keyClass.rawValue, forKey: .keyClass)
        }
        if let keyModesOfUse = self.keyModesOfUse {
            try encodeContainer.encode(keyModesOfUse, forKey: .keyModesOfUse)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyUsageDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let keyClassDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyClass.self, forKey: .keyClass)
        keyClass = keyClassDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAlgorithm.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let keyModesOfUseDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyModesOfUse.self, forKey: .keyModesOfUse)
        keyModesOfUse = keyModesOfUseDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
    public struct KeyAttributes {
        /// The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key. For symmetric keys, Amazon Web Services Payment Cryptography supports AES and TDES algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports RSA and ECC_NIST algorithms.
        /// This member is required.
        public var keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm?
        /// The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.
        /// This member is required.
        public var keyClass: PaymentCryptographyClientTypes.KeyClass?
        /// The list of cryptographic operations that you can perform using the key.
        /// This member is required.
        public var keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse?
        /// The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.
        /// This member is required.
        public var keyUsage: PaymentCryptographyClientTypes.KeyUsage?

        public init(
            keyAlgorithm: PaymentCryptographyClientTypes.KeyAlgorithm? = nil,
            keyClass: PaymentCryptographyClientTypes.KeyClass? = nil,
            keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse? = nil,
            keyUsage: PaymentCryptographyClientTypes.KeyUsage? = nil
        )
        {
            self.keyAlgorithm = keyAlgorithm
            self.keyClass = keyClass
            self.keyModesOfUse = keyModesOfUse
            self.keyUsage = keyUsage
        }
    }

}

extension PaymentCryptographyClientTypes.KeyBlockHeaders: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyExportability = "KeyExportability"
        case keyModesOfUse = "KeyModesOfUse"
        case keyVersion = "KeyVersion"
        case optionalBlocks = "OptionalBlocks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyExportability = self.keyExportability {
            try encodeContainer.encode(keyExportability.rawValue, forKey: .keyExportability)
        }
        if let keyModesOfUse = self.keyModesOfUse {
            try encodeContainer.encode(keyModesOfUse, forKey: .keyModesOfUse)
        }
        if let keyVersion = self.keyVersion {
            try encodeContainer.encode(keyVersion, forKey: .keyVersion)
        }
        if let optionalBlocks = optionalBlocks {
            var optionalBlocksContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .optionalBlocks)
            for (dictKey0, optionalBlocks0) in optionalBlocks {
                try optionalBlocksContainer.encode(optionalBlocks0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyModesOfUseDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyModesOfUse.self, forKey: .keyModesOfUse)
        keyModesOfUse = keyModesOfUseDecoded
        let keyExportabilityDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyExportability.self, forKey: .keyExportability)
        keyExportability = keyExportabilityDecoded
        let keyVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyVersion)
        keyVersion = keyVersionDecoded
        let optionalBlocksContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .optionalBlocks)
        var optionalBlocksDecoded0: [Swift.String:Swift.String]? = nil
        if let optionalBlocksContainer = optionalBlocksContainer {
            optionalBlocksDecoded0 = [Swift.String:Swift.String]()
            for (key0, optionalblockvalue0) in optionalBlocksContainer {
                if let optionalblockvalue0 = optionalblockvalue0 {
                    optionalBlocksDecoded0?[key0] = optionalblockvalue0
                }
            }
        }
        optionalBlocks = optionalBlocksDecoded0
    }
}

extension PaymentCryptographyClientTypes {
    /// Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.
    public struct KeyBlockHeaders {
        /// Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography. When set to EXPORTABLE, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to NON_EXPORTABLE, the key cannot be subsequently exported by the receiver. When set to SENSITIVE, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to [ANSI X9.143-2022](https://webstore.ansi.org/standards/ascx9/ansix91432022).
        public var keyExportability: PaymentCryptographyClientTypes.KeyExportability?
        /// The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.
        public var keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse?
        /// Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.
        public var keyVersion: Swift.String?
        /// Parameter used to indicate the type of optional data in key block headers. Refer to [ANSI X9.143-2022](https://webstore.ansi.org/standards/ascx9/ansix91432022) for information on allowed data type for optional blocks. Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.
        public var optionalBlocks: [Swift.String:Swift.String]?

        public init(
            keyExportability: PaymentCryptographyClientTypes.KeyExportability? = nil,
            keyModesOfUse: PaymentCryptographyClientTypes.KeyModesOfUse? = nil,
            keyVersion: Swift.String? = nil,
            optionalBlocks: [Swift.String:Swift.String]? = nil
        )
        {
            self.keyExportability = keyExportability
            self.keyModesOfUse = keyModesOfUse
            self.keyVersion = keyVersion
            self.optionalBlocks = optionalBlocks
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyCheckValueAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ansiX924
        case cmac
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyCheckValueAlgorithm] {
            return [
                .ansiX924,
                .cmac,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ansiX924: return "ANSI_X9_24"
            case .cmac: return "CMAC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyCheckValueAlgorithm(rawValue: rawValue) ?? KeyCheckValueAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum KeyClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case asymmetricKeyPair
        case privateKey
        case publicKey
        case symmetricKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyClass] {
            return [
                .asymmetricKeyPair,
                .privateKey,
                .publicKey,
                .symmetricKey,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .asymmetricKeyPair: return "ASYMMETRIC_KEY_PAIR"
            case .privateKey: return "PRIVATE_KEY"
            case .publicKey: return "PUBLIC_KEY"
            case .symmetricKey: return "SYMMETRIC_KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyClass(rawValue: rawValue) ?? KeyClass.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum KeyExportability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exportable
        case nonExportable
        case sensitive
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyExportability] {
            return [
                .exportable,
                .nonExportable,
                .sensitive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exportable: return "EXPORTABLE"
            case .nonExportable: return "NON_EXPORTABLE"
            case .sensitive: return "SENSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyExportability(rawValue: rawValue) ?? KeyExportability.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum KeyMaterialType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyCryptogram
        case rootPublicKeyCertificate
        case tr31KeyBlock
        case tr34KeyBlock
        case trustedPublicKeyCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyMaterialType] {
            return [
                .keyCryptogram,
                .rootPublicKeyCertificate,
                .tr31KeyBlock,
                .tr34KeyBlock,
                .trustedPublicKeyCertificate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyCryptogram: return "KEY_CRYPTOGRAM"
            case .rootPublicKeyCertificate: return "ROOT_PUBLIC_KEY_CERTIFICATE"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case .trustedPublicKeyCertificate: return "TRUSTED_PUBLIC_KEY_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyMaterialType(rawValue: rawValue) ?? KeyMaterialType.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeyModesOfUse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decrypt = "Decrypt"
        case deriveKey = "DeriveKey"
        case encrypt = "Encrypt"
        case generate = "Generate"
        case noRestrictions = "NoRestrictions"
        case sign = "Sign"
        case unwrap = "Unwrap"
        case verify = "Verify"
        case wrap = "Wrap"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decrypt != false {
            try encodeContainer.encode(decrypt, forKey: .decrypt)
        }
        if deriveKey != false {
            try encodeContainer.encode(deriveKey, forKey: .deriveKey)
        }
        if encrypt != false {
            try encodeContainer.encode(encrypt, forKey: .encrypt)
        }
        if generate != false {
            try encodeContainer.encode(generate, forKey: .generate)
        }
        if noRestrictions != false {
            try encodeContainer.encode(noRestrictions, forKey: .noRestrictions)
        }
        if sign != false {
            try encodeContainer.encode(sign, forKey: .sign)
        }
        if unwrap != false {
            try encodeContainer.encode(unwrap, forKey: .unwrap)
        }
        if verify != false {
            try encodeContainer.encode(verify, forKey: .verify)
        }
        if wrap != false {
            try encodeContainer.encode(wrap, forKey: .wrap)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypt) ?? false
        encrypt = encryptDecoded
        let decryptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .decrypt) ?? false
        decrypt = decryptDecoded
        let wrapDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .wrap) ?? false
        wrap = wrapDecoded
        let unwrapDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unwrap) ?? false
        unwrap = unwrapDecoded
        let generateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generate) ?? false
        generate = generateDecoded
        let signDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sign) ?? false
        sign = signDecoded
        let verifyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verify) ?? false
        verify = verifyDecoded
        let deriveKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deriveKey) ?? false
        deriveKey = deriveKeyDecoded
        let noRestrictionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noRestrictions) ?? false
        noRestrictions = noRestrictionsDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.
    public struct KeyModesOfUse {
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.
        public var decrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.
        public var deriveKey: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.
        public var encrypt: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
        public var generate: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
        public var noRestrictions: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.
        public var sign: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.
        public var unwrap: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.
        public var verify: Swift.Bool
        /// Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.
        public var wrap: Swift.Bool

        public init(
            decrypt: Swift.Bool = false,
            deriveKey: Swift.Bool = false,
            encrypt: Swift.Bool = false,
            generate: Swift.Bool = false,
            noRestrictions: Swift.Bool = false,
            sign: Swift.Bool = false,
            unwrap: Swift.Bool = false,
            verify: Swift.Bool = false,
            wrap: Swift.Bool = false
        )
        {
            self.decrypt = decrypt
            self.deriveKey = deriveKey
            self.encrypt = encrypt
            self.generate = generate
            self.noRestrictions = noRestrictions
            self.sign = sign
            self.unwrap = unwrap
            self.verify = verify
            self.wrap = wrap
        }
    }

}

extension PaymentCryptographyClientTypes {
    /// Defines the source of a key
    public enum KeyOrigin: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsPaymentCryptography
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyOrigin] {
            return [
                .awsPaymentCryptography,
                .external,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsPaymentCryptography: return "AWS_PAYMENT_CRYPTOGRAPHY"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyOrigin(rawValue: rawValue) ?? KeyOrigin.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    /// Defines the state of a key
    public enum KeyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createInProgress
        case deleteComplete
        case deletePending
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyState] {
            return [
                .createComplete,
                .createInProgress,
                .deleteComplete,
                .deletePending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deletePending: return "DELETE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyState(rawValue: rawValue) ?? KeyState.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.KeySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case exportable = "Exportable"
        case keyArn = "KeyArn"
        case keyAttributes = "KeyAttributes"
        case keyCheckValue = "KeyCheckValue"
        case keyState = "KeyState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let exportable = self.exportable {
            try encodeContainer.encode(exportable, forKey: .exportable)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let keyCheckValue = self.keyCheckValue {
            try encodeContainer.encode(keyCheckValue, forKey: .keyCheckValue)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let keyCheckValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCheckValue)
        keyCheckValue = keyCheckValueDecoded
        let exportableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportable)
        exportable = exportableDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// Metadata about an Amazon Web Services Payment Cryptography key.
    public struct KeySummary {
        /// Specifies whether the key is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether the key is exportable. This data is immutable after the key is created.
        /// This member is required.
        public var exportable: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the key.
        /// This member is required.
        public var keyArn: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        /// This member is required.
        public var keyCheckValue: Swift.String?
        /// The state of an Amazon Web Services Payment Cryptography that is being created or deleted.
        /// This member is required.
        public var keyState: PaymentCryptographyClientTypes.KeyState?

        public init(
            enabled: Swift.Bool? = nil,
            exportable: Swift.Bool? = nil,
            keyArn: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            keyCheckValue: Swift.String? = nil,
            keyState: PaymentCryptographyClientTypes.KeyState? = nil
        )
        {
            self.enabled = enabled
            self.exportable = exportable
            self.keyArn = keyArn
            self.keyAttributes = keyAttributes
            self.keyCheckValue = keyCheckValue
            self.keyState = keyState
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum KeyUsage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case tr31B0BaseDerivationKey
        case tr31C0CardVerificationKey
        case tr31D0SymmetricDataEncryptionKey
        case tr31D1AsymmetricKeyForDataEncryption
        case tr31E0EmvMkeyAppCryptograms
        case tr31E1EmvMkeyConfidentiality
        case tr31E2EmvMkeyIntegrity
        case tr31E4EmvMkeyDynamicNumbers
        case tr31E5EmvMkeyCardPersonalization
        case tr31E6EmvMkeyOther
        case tr31K0KeyEncryptionKey
        case tr31K1KeyBlockProtectionKey
        case tr31K2Tr34AsymmetricKey
        case tr31K3AsymmetricKeyForKeyAgreement
        case tr31M1Iso97971MacKey
        case tr31M3Iso97973MacKey
        case tr31M6Iso97975CmacKey
        case tr31M7HmacKey
        case tr31P0PinEncryptionKey
        case tr31P1PinGenerationKey
        case tr31S0AsymmetricKeyForDigitalSignature
        case tr31V1Ibm3624PinVerificationKey
        case tr31V2VisaPinVerificationKey
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsage] {
            return [
                .tr31B0BaseDerivationKey,
                .tr31C0CardVerificationKey,
                .tr31D0SymmetricDataEncryptionKey,
                .tr31D1AsymmetricKeyForDataEncryption,
                .tr31E0EmvMkeyAppCryptograms,
                .tr31E1EmvMkeyConfidentiality,
                .tr31E2EmvMkeyIntegrity,
                .tr31E4EmvMkeyDynamicNumbers,
                .tr31E5EmvMkeyCardPersonalization,
                .tr31E6EmvMkeyOther,
                .tr31K0KeyEncryptionKey,
                .tr31K1KeyBlockProtectionKey,
                .tr31K2Tr34AsymmetricKey,
                .tr31K3AsymmetricKeyForKeyAgreement,
                .tr31M1Iso97971MacKey,
                .tr31M3Iso97973MacKey,
                .tr31M6Iso97975CmacKey,
                .tr31M7HmacKey,
                .tr31P0PinEncryptionKey,
                .tr31P1PinGenerationKey,
                .tr31S0AsymmetricKeyForDigitalSignature,
                .tr31V1Ibm3624PinVerificationKey,
                .tr31V2VisaPinVerificationKey,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .tr31B0BaseDerivationKey: return "TR31_B0_BASE_DERIVATION_KEY"
            case .tr31C0CardVerificationKey: return "TR31_C0_CARD_VERIFICATION_KEY"
            case .tr31D0SymmetricDataEncryptionKey: return "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"
            case .tr31D1AsymmetricKeyForDataEncryption: return "TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION"
            case .tr31E0EmvMkeyAppCryptograms: return "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"
            case .tr31E1EmvMkeyConfidentiality: return "TR31_E1_EMV_MKEY_CONFIDENTIALITY"
            case .tr31E2EmvMkeyIntegrity: return "TR31_E2_EMV_MKEY_INTEGRITY"
            case .tr31E4EmvMkeyDynamicNumbers: return "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"
            case .tr31E5EmvMkeyCardPersonalization: return "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"
            case .tr31E6EmvMkeyOther: return "TR31_E6_EMV_MKEY_OTHER"
            case .tr31K0KeyEncryptionKey: return "TR31_K0_KEY_ENCRYPTION_KEY"
            case .tr31K1KeyBlockProtectionKey: return "TR31_K1_KEY_BLOCK_PROTECTION_KEY"
            case .tr31K2Tr34AsymmetricKey: return "TR31_K2_TR34_ASYMMETRIC_KEY"
            case .tr31K3AsymmetricKeyForKeyAgreement: return "TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT"
            case .tr31M1Iso97971MacKey: return "TR31_M1_ISO_9797_1_MAC_KEY"
            case .tr31M3Iso97973MacKey: return "TR31_M3_ISO_9797_3_MAC_KEY"
            case .tr31M6Iso97975CmacKey: return "TR31_M6_ISO_9797_5_CMAC_KEY"
            case .tr31M7HmacKey: return "TR31_M7_HMAC_KEY"
            case .tr31P0PinEncryptionKey: return "TR31_P0_PIN_ENCRYPTION_KEY"
            case .tr31P1PinGenerationKey: return "TR31_P1_PIN_GENERATION_KEY"
            case .tr31S0AsymmetricKeyForDigitalSignature: return "TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE"
            case .tr31V1Ibm3624PinVerificationKey: return "TR31_V1_IBM3624_PIN_VERIFICATION_KEY"
            case .tr31V2VisaPinVerificationKey: return "TR31_V2_VISA_PIN_VERIFICATION_KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsage(rawValue: rawValue) ?? KeyUsage.sdkUnknown(rawValue)
        }
    }
}

extension ListAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAliasesInput {

    static func urlPathProvider(_ value: ListAliasesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListAliasesInput {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAliasesInputBody {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAliasesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListAliasesOutputBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
            self.nextToken = output.nextToken
        } else {
            self.aliases = nil
            self.nextToken = nil
        }
    }
}

public struct ListAliasesOutput {
    /// The list of aliases. Each alias describes the KeyArn contained within.
    /// This member is required.
    public var aliases: [PaymentCryptographyClientTypes.Alias]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        aliases: [PaymentCryptographyClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

struct ListAliasesOutputBody {
    let aliases: [PaymentCryptographyClientTypes.Alias]?
    let nextToken: Swift.String?
}

extension ListAliasesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[PaymentCryptographyClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [PaymentCryptographyClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListAliasesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyState = "KeyState"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListKeysInput {

    static func urlPathProvider(_ value: ListKeysInput) -> Swift.String? {
        return "/"
    }
}

public struct ListKeysInput {
    /// The key state of the keys you want to list.
    public var keyState: PaymentCryptographyClientTypes.KeyState?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?

    public init(
        keyState: PaymentCryptographyClientTypes.KeyState? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keyState = keyState
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListKeysInputBody {
    let keyState: PaymentCryptographyClientTypes.KeyState?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyState = "KeyState"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyStateDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListKeysOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListKeysOutputBody = try responseDecoder.decode(responseBody: data)
            self.keys = output.keys
            self.nextToken = output.nextToken
        } else {
            self.keys = nil
            self.nextToken = nil
        }
    }
}

public struct ListKeysOutput {
    /// The list of keys created within the caller's Amazon Web Services account and Amazon Web Services Region.
    /// This member is required.
    public var keys: [PaymentCryptographyClientTypes.KeySummary]?
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?

    public init(
        keys: [PaymentCryptographyClientTypes.KeySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keys = keys
        self.nextToken = nextToken
    }
}

struct ListKeysOutputBody {
    let keys: [PaymentCryptographyClientTypes.KeySummary]?
    let nextToken: Swift.String?
}

extension ListKeysOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.KeySummary?].self, forKey: .keys)
        var keysDecoded0:[PaymentCryptographyClientTypes.KeySummary]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [PaymentCryptographyClientTypes.KeySummary]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListKeysOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, Amazon Web Services Payment Cryptography does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var maxResults: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the truncated response you just received.
    public var nextToken: Swift.String?
    /// The KeyARN of the key whose tags you are getting.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTagsForResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutput {
    /// The token for the next set of results, or an empty or null value if there are no more results.
    public var nextToken: Swift.String?
    /// The list of tags associated with a ResourceArn. Each tag will list the key-value pair contained within that tag.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputBody {
    let tags: [PaymentCryptographyClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

public enum PaymentCryptographyClientTypes {}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.resourceId = output.resourceId
        } else {
            self.properties.resourceId = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to an invalid resource error.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The string for the exception.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        resourceId: Swift.String? = nil
    )
    {
        self.properties.resourceId = resourceId
    }
}

struct ResourceNotFoundExceptionBody {
    let resourceId: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension RestoreKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension RestoreKeyInput {

    static func urlPathProvider(_ value: RestoreKeyInput) -> Swift.String? {
        return "/"
    }
}

public struct RestoreKeyInput {
    /// The KeyARN of the key to be restored within Amazon Web Services Payment Cryptography.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct RestoreKeyInputBody {
    let keyIdentifier: Swift.String?
}

extension RestoreKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

extension RestoreKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RestoreKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct RestoreKeyOutput {
    /// The key material of the restored key. The KeyState will change to CREATE_COMPLETE and value for DeletePendingTimestamp gets removed.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct RestoreKeyOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension RestoreKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum RestoreKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyAttributes = "KeyAttributes"
        case publicKeyCertificate = "PublicKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let publicKeyCertificate = self.publicKeyCertificate {
            try encodeContainer.encode(publicKeyCertificate, forKey: .publicKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let publicKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyCertificate)
        publicKeyCertificate = publicKeyCertificateDecoded
    }
}

extension PaymentCryptographyClientTypes.RootCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RootCertificatePublicKey(keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for root public key certificate import.
    public struct RootCertificatePublicKey {
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the root public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for root public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }

}

extension ServiceQuotaExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceQuotaExceededExceptionBody {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceUnavailableExceptionBody {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartKeyUsageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension StartKeyUsageInput {

    static func urlPathProvider(_ value: StartKeyUsageInput) -> Swift.String? {
        return "/"
    }
}

public struct StartKeyUsageInput {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct StartKeyUsageInputBody {
    let keyIdentifier: Swift.String?
}

extension StartKeyUsageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

extension StartKeyUsageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartKeyUsageOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct StartKeyUsageOutput {
    /// The KeyARN of the Amazon Web Services Payment Cryptography key activated for use.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct StartKeyUsageOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension StartKeyUsageOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum StartKeyUsageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StopKeyUsageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyIdentifier = self.keyIdentifier {
            try encodeContainer.encode(keyIdentifier, forKey: .keyIdentifier)
        }
    }
}

extension StopKeyUsageInput {

    static func urlPathProvider(_ value: StopKeyUsageInput) -> Swift.String? {
        return "/"
    }
}

public struct StopKeyUsageInput {
    /// The KeyArn of the key.
    /// This member is required.
    public var keyIdentifier: Swift.String?

    public init(
        keyIdentifier: Swift.String? = nil
    )
    {
        self.keyIdentifier = keyIdentifier
    }
}

struct StopKeyUsageInputBody {
    let keyIdentifier: Swift.String?
}

extension StopKeyUsageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyIdentifier = "KeyIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyIdentifier)
        keyIdentifier = keyIdentifierDecoded
    }
}

extension StopKeyUsageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StopKeyUsageOutputBody = try responseDecoder.decode(responseBody: data)
            self.key = output.key
        } else {
            self.key = nil
        }
    }
}

public struct StopKeyUsageOutput {
    /// The KeyARN of the key.
    /// This member is required.
    public var key: PaymentCryptographyClientTypes.Key?

    public init(
        key: PaymentCryptographyClientTypes.Key? = nil
    )
    {
        self.key = key
    }
}

struct StopKeyUsageOutputBody {
    let key: PaymentCryptographyClientTypes.Key?
}

extension StopKeyUsageOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Key.self, forKey: .key)
        key = keyDecoded
    }
}

enum StopKeyUsageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PaymentCryptographyClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PaymentCryptographyClientTypes {
    /// A structure that contains information about a tag.
    public struct Tag {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

public struct TagResourceInput {
    /// The KeyARN of the key whose tags are being updated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the new one. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. To use this parameter, you must have [TagResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html) permission in an IAM policy. Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var tags: [PaymentCryptographyClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [PaymentCryptographyClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody {
    let resourceArn: Swift.String?
    let tags: [PaymentCryptographyClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PaymentCryptographyClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PaymentCryptographyClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PaymentCryptographyClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutput {

    public init() { }
}

enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ThrottlingExceptionBody {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes {
    public enum Tr34KeyBlockFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case x9Tr342012
        case sdkUnknown(Swift.String)

        public static var allCases: [Tr34KeyBlockFormat] {
            return [
                .x9Tr342012,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .x9Tr342012: return "X9_TR34_2012"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Tr34KeyBlockFormat(rawValue: rawValue) ?? Tr34KeyBlockFormat.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityPublicKeyIdentifier = "CertificateAuthorityPublicKeyIdentifier"
        case keyAttributes = "KeyAttributes"
        case publicKeyCertificate = "PublicKeyCertificate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityPublicKeyIdentifier = self.certificateAuthorityPublicKeyIdentifier {
            try encodeContainer.encode(certificateAuthorityPublicKeyIdentifier, forKey: .certificateAuthorityPublicKeyIdentifier)
        }
        if let keyAttributes = self.keyAttributes {
            try encodeContainer.encode(keyAttributes, forKey: .keyAttributes)
        }
        if let publicKeyCertificate = self.publicKeyCertificate {
            try encodeContainer.encode(publicKeyCertificate, forKey: .publicKeyCertificate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAttributesDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyAttributes.self, forKey: .keyAttributes)
        keyAttributes = keyAttributesDecoded
        let publicKeyCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyCertificate)
        publicKeyCertificate = publicKeyCertificateDecoded
        let certificateAuthorityPublicKeyIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityPublicKeyIdentifier)
        certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifierDecoded
    }
}

extension PaymentCryptographyClientTypes.TrustedCertificatePublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrustedCertificatePublicKey(certificateAuthorityPublicKeyIdentifier: \(Swift.String(describing: certificateAuthorityPublicKeyIdentifier)), keyAttributes: \(Swift.String(describing: keyAttributes)), publicKeyCertificate: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for trusted public key certificate import.
    public struct TrustedCertificatePublicKey {
        /// The KeyARN of the root public key certificate or certificate chain that signs the trusted public key certificate import.
        /// This member is required.
        public var certificateAuthorityPublicKeyIdentifier: Swift.String?
        /// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.
        /// This member is required.
        public var keyAttributes: PaymentCryptographyClientTypes.KeyAttributes?
        /// Parameter information for trusted public key certificate import.
        /// This member is required.
        public var publicKeyCertificate: Swift.String?

        public init(
            certificateAuthorityPublicKeyIdentifier: Swift.String? = nil,
            keyAttributes: PaymentCryptographyClientTypes.KeyAttributes? = nil,
            publicKeyCertificate: Swift.String? = nil
        )
        {
            self.certificateAuthorityPublicKeyIdentifier = certificateAuthorityPublicKeyIdentifier
            self.keyAttributes = keyAttributes
            self.publicKeyCertificate = publicKeyCertificate
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput {
    /// The KeyARN of the key whose tags are being removed.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tag keys. Don't include the tag values. If the Amazon Web Services Payment Cryptography key doesn't have the specified tag key, Amazon Web Services Payment Cryptography doesn't throw an exception or return a response. To confirm that the operation succeeded, use the [ListTagsForResource](https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ListTagsForResource.html) operation.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutput {

    public init() { }
}

enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }
}

extension UpdateAliasInput {

    static func urlPathProvider(_ value: UpdateAliasInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateAliasInput {
    /// The alias whose associated key is changing.
    /// This member is required.
    public var aliasName: Swift.String?
    /// The KeyARN for the key that you are updating or removing from the alias.
    public var keyArn: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        keyArn: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.keyArn = keyArn
    }
}

struct UpdateAliasInputBody {
    let aliasName: Swift.String?
    let keyArn: Swift.String?
}

extension UpdateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case keyArn = "KeyArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension UpdateAliasOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UpdateAliasOutputBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct UpdateAliasOutput {
    /// The alias name.
    /// This member is required.
    public var alias: PaymentCryptographyClientTypes.Alias?

    public init(
        alias: PaymentCryptographyClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct UpdateAliasOutputBody {
    let alias: PaymentCryptographyClientTypes.Alias?
}

extension UpdateAliasOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

enum UpdateAliasOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to an invalid request error.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ValidationExceptionBody {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaymentCryptographyClientTypes.WrappedKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyCheckValue = "KeyCheckValue"
        case keyCheckValueAlgorithm = "KeyCheckValueAlgorithm"
        case keyMaterial = "KeyMaterial"
        case wrappedKeyMaterialFormat = "WrappedKeyMaterialFormat"
        case wrappingKeyArn = "WrappingKeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyCheckValue = self.keyCheckValue {
            try encodeContainer.encode(keyCheckValue, forKey: .keyCheckValue)
        }
        if let keyCheckValueAlgorithm = self.keyCheckValueAlgorithm {
            try encodeContainer.encode(keyCheckValueAlgorithm.rawValue, forKey: .keyCheckValueAlgorithm)
        }
        if let keyMaterial = self.keyMaterial {
            try encodeContainer.encode(keyMaterial, forKey: .keyMaterial)
        }
        if let wrappedKeyMaterialFormat = self.wrappedKeyMaterialFormat {
            try encodeContainer.encode(wrappedKeyMaterialFormat.rawValue, forKey: .wrappedKeyMaterialFormat)
        }
        if let wrappingKeyArn = self.wrappingKeyArn {
            try encodeContainer.encode(wrappingKeyArn, forKey: .wrappingKeyArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wrappingKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .wrappingKeyArn)
        wrappingKeyArn = wrappingKeyArnDecoded
        let wrappedKeyMaterialFormatDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.WrappedKeyMaterialFormat.self, forKey: .wrappedKeyMaterialFormat)
        wrappedKeyMaterialFormat = wrappedKeyMaterialFormatDecoded
        let keyMaterialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMaterial)
        keyMaterial = keyMaterialDecoded
        let keyCheckValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyCheckValue)
        keyCheckValue = keyCheckValueDecoded
        let keyCheckValueAlgorithmDecoded = try containerValues.decodeIfPresent(PaymentCryptographyClientTypes.KeyCheckValueAlgorithm.self, forKey: .keyCheckValueAlgorithm)
        keyCheckValueAlgorithm = keyCheckValueAlgorithmDecoded
    }
}

extension PaymentCryptographyClientTypes.WrappedKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WrappedKey(keyCheckValue: \(Swift.String(describing: keyCheckValue)), keyCheckValueAlgorithm: \(Swift.String(describing: keyCheckValueAlgorithm)), wrappedKeyMaterialFormat: \(Swift.String(describing: wrappedKeyMaterialFormat)), wrappingKeyArn: \(Swift.String(describing: wrappingKeyArn)), keyMaterial: \"CONTENT_REDACTED\")"}
}

extension PaymentCryptographyClientTypes {
    /// Parameter information for generating a WrappedKeyBlock for key exchange.
    public struct WrappedKey {
        /// The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
        public var keyCheckValue: Swift.String?
        /// The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
        public var keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm?
        /// Parameter information for generating a wrapped key using TR-31 or TR-34 skey exchange method.
        /// This member is required.
        public var keyMaterial: Swift.String?
        /// The key block format of a wrapped key.
        /// This member is required.
        public var wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat?
        /// The KeyARN of the wrapped key.
        /// This member is required.
        public var wrappingKeyArn: Swift.String?

        public init(
            keyCheckValue: Swift.String? = nil,
            keyCheckValueAlgorithm: PaymentCryptographyClientTypes.KeyCheckValueAlgorithm? = nil,
            keyMaterial: Swift.String? = nil,
            wrappedKeyMaterialFormat: PaymentCryptographyClientTypes.WrappedKeyMaterialFormat? = nil,
            wrappingKeyArn: Swift.String? = nil
        )
        {
            self.keyCheckValue = keyCheckValue
            self.keyCheckValueAlgorithm = keyCheckValueAlgorithm
            self.keyMaterial = keyMaterial
            self.wrappedKeyMaterialFormat = wrappedKeyMaterialFormat
            self.wrappingKeyArn = wrappingKeyArn
        }
    }

}

extension PaymentCryptographyClientTypes {
    public enum WrappedKeyMaterialFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyCryptogram
        case tr31KeyBlock
        case tr34KeyBlock
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappedKeyMaterialFormat] {
            return [
                .keyCryptogram,
                .tr31KeyBlock,
                .tr34KeyBlock,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyCryptogram: return "KEY_CRYPTOGRAM"
            case .tr31KeyBlock: return "TR31_KEY_BLOCK"
            case .tr34KeyBlock: return "TR34_KEY_BLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WrappedKeyMaterialFormat(rawValue: rawValue) ?? WrappedKeyMaterialFormat.sdkUnknown(rawValue)
        }
    }
}

extension PaymentCryptographyClientTypes {
    public enum WrappingKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rsaOaepSha256
        case rsaOaepSha512
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappingKeySpec] {
            return [
                .rsaOaepSha256,
                .rsaOaepSha512,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rsaOaepSha256: return "RSA_OAEP_SHA_256"
            case .rsaOaepSha512: return "RSA_OAEP_SHA_512"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WrappingKeySpec(rawValue: rawValue) ?? WrappingKeySpec.sdkUnknown(rawValue)
        }
    }
}
