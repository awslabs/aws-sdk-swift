// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClient {
    /// Paginate over `[ListDataIngestionJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataIngestionJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataIngestionJobsOutput`
    public func listDataIngestionJobsPaginated(input: ListDataIngestionJobsInput) -> ClientRuntime.PaginatorSequence<ListDataIngestionJobsInput, ListDataIngestionJobsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListDataIngestionJobsInput, ListDataIngestionJobsOutput>(input: input, inputKey: \ListDataIngestionJobsInput.nextToken, outputKey: \ListDataIngestionJobsOutput.nextToken, paginationFunction: self.listDataIngestionJobs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListDataIngestionJobsInput, ListDataIngestionJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataIngestionJobs(input:))
>>>>>>> main
    }
}

extension ListDataIngestionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIngestionJobsInput {
        return ListDataIngestionJobsInput(
            datasetName: self.datasetName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListDatasetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDatasetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDatasetsOutput`
    public func listDatasetsPaginated(input: ListDatasetsInput) -> ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutput>(input: input, inputKey: \ListDatasetsInput.nextToken, outputKey: \ListDatasetsOutput.nextToken, paginationFunction: self.listDatasets(input:))
=======
        return ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDatasets(input:))
>>>>>>> main
    }
}

extension ListDatasetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDatasetsInput {
        return ListDatasetsInput(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListInferenceEventsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInferenceEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInferenceEventsOutput`
    public func listInferenceEventsPaginated(input: ListInferenceEventsInput) -> ClientRuntime.PaginatorSequence<ListInferenceEventsInput, ListInferenceEventsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListInferenceEventsInput, ListInferenceEventsOutput>(input: input, inputKey: \ListInferenceEventsInput.nextToken, outputKey: \ListInferenceEventsOutput.nextToken, paginationFunction: self.listInferenceEvents(input:))
=======
        return ClientRuntime.PaginatorSequence<ListInferenceEventsInput, ListInferenceEventsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listInferenceEvents(input:))
>>>>>>> main
    }
}

extension ListInferenceEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInferenceEventsInput {
        return ListInferenceEventsInput(
            inferenceSchedulerName: self.inferenceSchedulerName,
            intervalEndTime: self.intervalEndTime,
            intervalStartTime: self.intervalStartTime,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListInferenceExecutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInferenceExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInferenceExecutionsOutput`
    public func listInferenceExecutionsPaginated(input: ListInferenceExecutionsInput) -> ClientRuntime.PaginatorSequence<ListInferenceExecutionsInput, ListInferenceExecutionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListInferenceExecutionsInput, ListInferenceExecutionsOutput>(input: input, inputKey: \ListInferenceExecutionsInput.nextToken, outputKey: \ListInferenceExecutionsOutput.nextToken, paginationFunction: self.listInferenceExecutions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListInferenceExecutionsInput, ListInferenceExecutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listInferenceExecutions(input:))
>>>>>>> main
    }
}

extension ListInferenceExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInferenceExecutionsInput {
        return ListInferenceExecutionsInput(
            dataEndTimeBefore: self.dataEndTimeBefore,
            dataStartTimeAfter: self.dataStartTimeAfter,
            inferenceSchedulerName: self.inferenceSchedulerName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListInferenceSchedulersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInferenceSchedulersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInferenceSchedulersOutput`
    public func listInferenceSchedulersPaginated(input: ListInferenceSchedulersInput) -> ClientRuntime.PaginatorSequence<ListInferenceSchedulersInput, ListInferenceSchedulersOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListInferenceSchedulersInput, ListInferenceSchedulersOutput>(input: input, inputKey: \ListInferenceSchedulersInput.nextToken, outputKey: \ListInferenceSchedulersOutput.nextToken, paginationFunction: self.listInferenceSchedulers(input:))
=======
        return ClientRuntime.PaginatorSequence<ListInferenceSchedulersInput, ListInferenceSchedulersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listInferenceSchedulers(input:))
>>>>>>> main
    }
}

extension ListInferenceSchedulersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInferenceSchedulersInput {
        return ListInferenceSchedulersInput(
            inferenceSchedulerNameBeginsWith: self.inferenceSchedulerNameBeginsWith,
            maxResults: self.maxResults,
            modelName: self.modelName,
            nextToken: token,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListLabelGroupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLabelGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLabelGroupsOutput`
    public func listLabelGroupsPaginated(input: ListLabelGroupsInput) -> ClientRuntime.PaginatorSequence<ListLabelGroupsInput, ListLabelGroupsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListLabelGroupsInput, ListLabelGroupsOutput>(input: input, inputKey: \ListLabelGroupsInput.nextToken, outputKey: \ListLabelGroupsOutput.nextToken, paginationFunction: self.listLabelGroups(input:))
=======
        return ClientRuntime.PaginatorSequence<ListLabelGroupsInput, ListLabelGroupsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLabelGroups(input:))
>>>>>>> main
    }
}

extension ListLabelGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLabelGroupsInput {
        return ListLabelGroupsInput(
            labelGroupNameBeginsWith: self.labelGroupNameBeginsWith,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListLabelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLabelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLabelsOutput`
    public func listLabelsPaginated(input: ListLabelsInput) -> ClientRuntime.PaginatorSequence<ListLabelsInput, ListLabelsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListLabelsInput, ListLabelsOutput>(input: input, inputKey: \ListLabelsInput.nextToken, outputKey: \ListLabelsOutput.nextToken, paginationFunction: self.listLabels(input:))
=======
        return ClientRuntime.PaginatorSequence<ListLabelsInput, ListLabelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLabels(input:))
>>>>>>> main
    }
}

extension ListLabelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLabelsInput {
        return ListLabelsInput(
            equipment: self.equipment,
            faultCode: self.faultCode,
            intervalEndTime: self.intervalEndTime,
            intervalStartTime: self.intervalStartTime,
            labelGroupName: self.labelGroupName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListModelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListModelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListModelsOutput`
    public func listModelsPaginated(input: ListModelsInput) -> ClientRuntime.PaginatorSequence<ListModelsInput, ListModelsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListModelsInput, ListModelsOutput>(input: input, inputKey: \ListModelsInput.nextToken, outputKey: \ListModelsOutput.nextToken, paginationFunction: self.listModels(input:))
=======
        return ClientRuntime.PaginatorSequence<ListModelsInput, ListModelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listModels(input:))
>>>>>>> main
    }
}

extension ListModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListModelsInput {
        return ListModelsInput(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            modelNameBeginsWith: self.modelNameBeginsWith,
            nextToken: token,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListModelVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListModelVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListModelVersionsOutput`
    public func listModelVersionsPaginated(input: ListModelVersionsInput) -> ClientRuntime.PaginatorSequence<ListModelVersionsInput, ListModelVersionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListModelVersionsInput, ListModelVersionsOutput>(input: input, inputKey: \ListModelVersionsInput.nextToken, outputKey: \ListModelVersionsOutput.nextToken, paginationFunction: self.listModelVersions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListModelVersionsInput, ListModelVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listModelVersions(input:))
>>>>>>> main
    }
}

extension ListModelVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListModelVersionsInput {
        return ListModelVersionsInput(
            createdAtEndTime: self.createdAtEndTime,
            createdAtStartTime: self.createdAtStartTime,
            maxModelVersion: self.maxModelVersion,
            maxResults: self.maxResults,
            minModelVersion: self.minModelVersion,
            modelName: self.modelName,
            nextToken: token,
            sourceType: self.sourceType,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListRetrainingSchedulersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRetrainingSchedulersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRetrainingSchedulersOutput`
    public func listRetrainingSchedulersPaginated(input: ListRetrainingSchedulersInput) -> ClientRuntime.PaginatorSequence<ListRetrainingSchedulersInput, ListRetrainingSchedulersOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRetrainingSchedulersInput, ListRetrainingSchedulersOutput>(input: input, inputKey: \ListRetrainingSchedulersInput.nextToken, outputKey: \ListRetrainingSchedulersOutput.nextToken, paginationFunction: self.listRetrainingSchedulers(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRetrainingSchedulersInput, ListRetrainingSchedulersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRetrainingSchedulers(input:))
>>>>>>> main
    }
}

extension ListRetrainingSchedulersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRetrainingSchedulersInput {
        return ListRetrainingSchedulersInput(
            maxResults: self.maxResults,
            modelNameBeginsWith: self.modelNameBeginsWith,
            nextToken: token,
            status: self.status
        )}
}
extension LookoutEquipmentClient {
    /// Paginate over `[ListSensorStatisticsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSensorStatisticsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSensorStatisticsOutput`
    public func listSensorStatisticsPaginated(input: ListSensorStatisticsInput) -> ClientRuntime.PaginatorSequence<ListSensorStatisticsInput, ListSensorStatisticsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListSensorStatisticsInput, ListSensorStatisticsOutput>(input: input, inputKey: \ListSensorStatisticsInput.nextToken, outputKey: \ListSensorStatisticsOutput.nextToken, paginationFunction: self.listSensorStatistics(input:))
=======
        return ClientRuntime.PaginatorSequence<ListSensorStatisticsInput, ListSensorStatisticsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSensorStatistics(input:))
>>>>>>> main
    }
}

extension ListSensorStatisticsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSensorStatisticsInput {
        return ListSensorStatisticsInput(
            datasetName: self.datasetName,
            ingestionJobId: self.ingestionJobId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
