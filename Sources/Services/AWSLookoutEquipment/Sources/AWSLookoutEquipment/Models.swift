//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct DeleteDatasetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteInferenceSchedulerOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteLabelGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteLabelOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteModelOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRetrainingSchedulerOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateInferenceSchedulerOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateLabelGroupOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateModelOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateRetrainingSchedulerOutput: Swift.Sendable {

    public init() { }
}

/// The request could not be completed because you do not have access to the resource.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LookoutEquipmentClientTypes {

    public enum AutoPromotionResult: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case modelNotPromoted
        case modelPromoted
        case retrainingCancelled
        case retrainingCustomerError
        case retrainingInternalError
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoPromotionResult] {
            return [
                .modelNotPromoted,
                .modelPromoted,
                .retrainingCancelled,
                .retrainingCustomerError,
                .retrainingInternalError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .modelNotPromoted: return "MODEL_NOT_PROMOTED"
            case .modelPromoted: return "MODEL_PROMOTED"
            case .retrainingCancelled: return "RETRAINING_CANCELLED"
            case .retrainingCustomerError: return "RETRAINING_CUSTOMER_ERROR"
            case .retrainingInternalError: return "RETRAINING_INTERNAL_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request could not be completed due to a conflict with the current state of the target resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Processing of the request has failed because of an unknown error, exception or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Resource limitations have been exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related Amazon Web Services service that's being utilized.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LookoutEquipmentClientTypes {

    /// Provides information about the data schema used with the given dataset.
    public struct DatasetSchema: Swift.Sendable {
        /// The data schema used within the given dataset.
        public var inlineDataSchema: Swift.String?

        public init(
            inlineDataSchema: Swift.String? = nil
        )
        {
            self.inlineDataSchema = inlineDataSchema
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// A tag is a key-value pair that can be added to a resource as metadata.
    public struct Tag: Swift.Sendable {
        /// The key for the specified tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateDatasetInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the ingested data described in the dataset.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

extension LookoutEquipmentClientTypes {

    public enum DatasetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case created
        case importInProgress
        case ingestionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .created,
                .importInProgress,
                .ingestionInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .ingestionInProgress: return "INGESTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDatasetOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the dataset being created.
    public var datasetArn: Swift.String?
    /// The name of the dataset being created.
    public var datasetName: Swift.String?
    /// Indicates the status of the CreateDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.status = status
    }
}

/// The resource requested could not be found. Verify the resource ID and retry your request.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
    public struct InferenceInputNameConfiguration: Swift.Sendable {
        /// Indicates the delimiter character used between items in the data.
        public var componentTimestampDelimiter: Swift.String?
        /// The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-).
        public var timestampFormat: Swift.String?

        public init(
            componentTimestampDelimiter: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.componentTimestampDelimiter = componentTimestampDelimiter
            self.timestampFormat = timestampFormat
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the input data for the inference, including input data S3 location.
    public struct InferenceS3InputConfiguration: Swift.Sendable {
        /// The bucket containing the input dataset for the inference.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the input data for the inference.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data..
    public struct InferenceInputConfiguration: Swift.Sendable {
        /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
        public var inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration?
        /// Indicates the difference between your time zone and Coordinated Universal Time (UTC).
        public var inputTimeZoneOffset: Swift.String?
        /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration?

        public init(
            inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration? = nil,
            inputTimeZoneOffset: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration? = nil
        )
        {
            self.inferenceInputNameConfiguration = inferenceInputNameConfiguration
            self.inputTimeZoneOffset = inputTimeZoneOffset
            self.s3InputConfiguration = s3InputConfiguration
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the output results from the inference, including output S3 location.
    public struct InferenceS3OutputConfiguration: Swift.Sendable {
        /// The bucket containing the output results from the inference
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the output results from the inference.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the output results from for the inference, including KMS key ID and output S3 location.
    public struct InferenceOutputConfiguration: Swift.Sendable {
        /// The ID number for the KMS key key used to encrypt the inference output.
        public var kmsKeyId: Swift.String?
        /// Specifies configuration information for the output results from for the inference, output S3 location.
        /// This member is required.
        public var s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputConfiguration = s3OutputConfiguration
        }
    }
}

extension LookoutEquipmentClientTypes {

    public enum DataUploadFrequency: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pt10m
        case pt15m
        case pt1h
        case pt30m
        case pt5m
        case sdkUnknown(Swift.String)

        public static var allCases: [DataUploadFrequency] {
            return [
                .pt10m,
                .pt15m,
                .pt1h,
                .pt30m,
                .pt5m
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt15m: return "PT15M"
            case .pt1h: return "PT1H"
            case .pt30m: return "PT30M"
            case .pt5m: return "PT5M"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateInferenceSchedulerInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The interval (in minutes) of planned delay at the start of each inference segment. For example, if inference is set to run every ten minutes, the delay is set to five minutes and the time is 09:08. The inference scheduler will wake up at the configured interval (which, without a delay configured, would be 09:10) plus the additional five minute delay time (so 09:15) to check your Amazon S3 bucket. The delay provides a buffer for you to upload data at the same frequency, so that you don't have to stop and restart the scheduler when uploading new data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    /// This member is required.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
    /// This member is required.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source Amazon S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment runs inference on your data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    /// This member is required.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler being created.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The name of the previously trained machine learning model being used to create the inference scheduler.
    /// This member is required.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the inference scheduler.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

extension LookoutEquipmentClientTypes {

    public enum ModelQuality: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cannotDetermineQuality
        case poorQualityDetected
        case qualityThresholdMet
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelQuality] {
            return [
                .cannotDetermineQuality,
                .poorQualityDetected,
                .qualityThresholdMet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cannotDetermineQuality: return "CANNOT_DETERMINE_QUALITY"
            case .poorQualityDetected: return "POOR_QUALITY_DETECTED"
            case .qualityThresholdMet: return "QUALITY_THRESHOLD_MET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LookoutEquipmentClientTypes {

    public enum InferenceSchedulerStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateInferenceSchedulerOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being created.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of inference scheduler being created.
    public var inferenceSchedulerName: Swift.String?
    /// Provides a quality assessment for a model that uses labels. If Lookout for Equipment determines that the model quality is poor based on training metrics, the value is POOR_QUALITY_DETECTED. Otherwise, the value is QUALITY_THRESHOLD_MET. If the model is unlabeled, the model quality can't be assessed and the value of ModelQuality is CANNOT_DETERMINE_QUALITY. In this situation, you can get a model quality assessment by adding labels to the input dataset and retraining the model. For information about using labels with your models, see [Understanding labeling](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-labeling.html). For information about improving the quality of a model, see [Best practices with Amazon Lookout for Equipment](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/best-practices.html).
    public var modelQuality: LookoutEquipmentClientTypes.ModelQuality?
    /// Indicates the status of the CreateInferenceScheduler operation.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelQuality: LookoutEquipmentClientTypes.ModelQuality? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelQuality = modelQuality
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    public enum LabelRating: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case anomaly
        case neutral
        case noAnomaly
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelRating] {
            return [
                .anomaly,
                .neutral,
                .noAnomaly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .anomaly: return "ANOMALY"
            case .neutral: return "NEUTRAL"
            case .noAnomaly: return "NO_ANOMALY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateLabelInput: Swift.Sendable {
    /// A unique identifier for the request to create a label. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The end time of the labeled event.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// Indicates that a label pertains to a particular piece of equipment. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var equipment: Swift.String?
    /// Provides additional information about the label. The fault code must be defined in the FaultCodes attribute of the label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The name of a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    /// This member is required.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the labeled event.
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        clientToken: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupName = labelGroupName
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

public struct CreateLabelOutput: Swift.Sendable {
    /// The ID of the label that you have created.
    public var labelId: Swift.String?

    public init(
        labelId: Swift.String? = nil
    )
    {
        self.labelId = labelId
    }
}

public struct CreateLabelGroupInput: Swift.Sendable {
    /// A unique identifier for the request to create a label group. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The acceptable fault codes (indicating the type of anomaly associated with the label) that can be used with this label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// Names a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Tags that provide metadata about the label group you are creating. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
        self.tags = tags
    }
}

public struct CreateLabelGroupOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the label group that you have created.
    public var labelGroupArn: Swift.String?
    /// The name of the label group that you have created. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
    }
}

extension LookoutEquipmentClientTypes {

    public enum TargetSamplingRate: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pt10m
        case pt10s
        case pt15m
        case pt15s
        case pt1h
        case pt1m
        case pt1s
        case pt30m
        case pt30s
        case pt5m
        case pt5s
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetSamplingRate] {
            return [
                .pt10m,
                .pt10s,
                .pt15m,
                .pt15s,
                .pt1h,
                .pt1m,
                .pt1s,
                .pt30m,
                .pt30s,
                .pt5m,
                .pt5s
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt10s: return "PT10S"
            case .pt15m: return "PT15M"
            case .pt15s: return "PT15S"
            case .pt1h: return "PT1H"
            case .pt1m: return "PT1M"
            case .pt1s: return "PT1S"
            case .pt30m: return "PT30M"
            case .pt30s: return "PT30S"
            case .pt5m: return "PT5M"
            case .pt5s: return "PT5S"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public struct DataPreProcessingConfiguration: Swift.Sendable {
        /// The sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
        public var targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate?

        public init(
            targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate? = nil
        )
        {
            self.targetSamplingRate = targetSamplingRate
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// The location information (prefix and bucket name) for the s3 location being used for label data.
    public struct LabelsS3InputConfiguration: Swift.Sendable {
        /// The name of the S3 bucket holding the label data.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the label data.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains the configuration information for the S3 location being used to hold label data.
    public struct LabelsInputConfiguration: Swift.Sendable {
        /// The name of the label group to be used for label data.
        public var labelGroupName: Swift.String?
        /// Contains location information for the S3 location being used for label data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration?

        public init(
            labelGroupName: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration? = nil
        )
        {
            self.labelGroupName = labelGroupName
            self.s3InputConfiguration = s3InputConfiguration
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// The Amazon S3 location for the pointwise model diagnostics for an Amazon Lookout for Equipment model.
    public struct ModelDiagnosticsS3OutputConfiguration: Swift.Sendable {
        /// The name of the Amazon S3 bucket where the pointwise model diagnostics are located. You must be the owner of the Amazon S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The Amazon S3 prefix for the location of the pointwise model diagnostics. The prefix specifies the folder and evaluation result file name. (bucket). When you call CreateModel or UpdateModel, specify the path within the bucket that you want Lookout for Equipment to save the model to. During training, Lookout for Equipment creates the model evaluation model as a compressed JSON file with the name model_diagnostics_results.json.gz. When you call DescribeModel or DescribeModelVersion, prefix contains the file path and filename of the model evaluation file.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Output configuration information for the pointwise model diagnostics for an Amazon Lookout for Equipment model.
    public struct ModelDiagnosticsOutputConfiguration: Swift.Sendable {
        /// The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 location for the pointwise model diagnostics.
        /// This member is required.
        public var s3OutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputConfiguration = s3OutputConfiguration
        }
    }
}

public struct CreateModelInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The name of the dataset for the machine learning model being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The data schema for the machine learning model being created.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Indicates the time reference in the dataset that should be used to end the subset of evaluation data for the machine learning model.
    public var evaluationDataEndTime: Foundation.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of evaluation data for the machine learning model.
    public var evaluationDataStartTime: Foundation.Date?
    /// The input configuration for the labels being used for the machine learning model that's being created.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The Amazon S3 location where you want Amazon Lookout for Equipment to save the pointwise model diagnostics. You must also specify the RoleArn request parameter.
    public var modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?
    /// The name for the machine learning model to be created.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the machine learning model being created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?
    /// Indicates the time reference in the dataset that should be used to end the subset of training data for the machine learning model.
    public var trainingDataEndTime: Foundation.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of training data for the machine learning model.
    public var trainingDataStartTime: Foundation.Date?

    public init(
        clientToken: Swift.String? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        evaluationDataEndTime: Foundation.Date? = nil,
        evaluationDataStartTime: Foundation.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil,
        trainingDataEndTime: Foundation.Date? = nil,
        trainingDataStartTime: Foundation.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelDiagnosticsOutputConfiguration = modelDiagnosticsOutputConfiguration
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
    }
}

extension LookoutEquipmentClientTypes {

    public enum ModelStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .failed,
                .importInProgress,
                .inProgress,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateModelOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// Indicates the status of the CreateModel operation.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init(
        modelArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    public enum ModelPromoteMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case managed
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPromoteMode] {
            return [
                .managed,
                .manual
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateRetrainingSchedulerInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The number of past days of data that will be used for retraining.
    /// This member is required.
    public var lookbackWindow: Swift.String?
    /// The name of the model to add the retraining scheduler to.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates how the service will use new models. In MANAGED mode, new models will automatically be used for inference if they have better performance than the current model. In MANUAL mode, the new models will not be used [until they are manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// This parameter uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) standard to set the frequency at which you want retraining to occur in terms of Years, Months, and/or Days (note: other parameters like Time are not currently supported). The minimum value is 30 days (P30D) and the maximum value is 1 year (P1Y). For example, the following values are valid:
    ///
    /// * P3M15D – Every 3 months and 15 days
    ///
    /// * P2M – Every 2 months
    ///
    /// * P150D – Every 150 days
    /// This member is required.
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: Foundation.Date?

    public init(
        clientToken: Swift.String? = nil,
        lookbackWindow: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: Foundation.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.lookbackWindow = lookbackWindow
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
    }
}

extension LookoutEquipmentClientTypes {

    public enum RetrainingSchedulerStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RetrainingSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateRetrainingSchedulerOutput: Swift.Sendable {
    /// The ARN of the model that you added the retraining scheduler to.
    public var modelArn: Swift.String?
    /// The name of the model that you added the retraining scheduler to.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

public struct DeleteDatasetInput: Swift.Sendable {
    /// The name of the dataset to be deleted.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

public struct DeleteInferenceSchedulerInput: Swift.Sendable {
    /// The name of the inference scheduler to be deleted.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

public struct DeleteLabelInput: Swift.Sendable {
    /// The name of the label group that contains the label that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// The ID of the label that you want to delete.
    /// This member is required.
    public var labelId: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

public struct DeleteLabelGroupInput: Swift.Sendable {
    /// The name of the label group that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

public struct DeleteModelInput: Swift.Sendable {
    /// The name of the machine learning model to be deleted.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct DeleteResourcePolicyInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource for which the resource policy should be deleted.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeleteRetrainingSchedulerInput: Swift.Sendable {
    /// The name of the model whose retraining scheduler you want to delete.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct DescribeDataIngestionJobInput: Swift.Sendable {
    /// The job ID of the data ingestion job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information abount duplicate timestamps in the dataset.
    public struct DuplicateTimestamps: Swift.Sendable {
        /// Indicates the total number of duplicate timestamps.
        /// This member is required.
        public var totalNumberOfDuplicateTimestamps: Swift.Int?

        public init(
            totalNumberOfDuplicateTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfDuplicateTimestamps = totalNumberOfDuplicateTimestamps
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on sensors that have sensor data completely missing.
    public struct MissingCompleteSensorData: Swift.Sendable {
        /// Indicates the number of sensors that have data missing completely.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on sensors that have shorter date range.
    public struct SensorsWithShortDateRange: Swift.Sendable {
        /// Indicates the number of sensors that have less than 14 days of data.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InsufficientSensorData: Swift.Sendable {
        /// Parameter that describes the total number of sensors that have data completely missing for it.
        /// This member is required.
        public var missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData?
        /// Parameter that describes the total number of sensors that have a short date range of less than 14 days of data overall.
        /// This member is required.
        public var sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange?

        public init(
            missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData? = nil,
            sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange? = nil
        )
        {
            self.missingCompleteSensorData = missingCompleteSensorData
            self.sensorsWithShortDateRange = sensorsWithShortDateRange
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InvalidSensorData: Swift.Sendable {
        /// Indicates the number of sensors that have at least some invalid values.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of invalid values across all the sensors.
        /// This member is required.
        public var totalNumberOfInvalidValues: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfInvalidValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfInvalidValues = totalNumberOfInvalidValues
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises aggregated information on sensors having missing data.
    public struct MissingSensorData: Swift.Sendable {
        /// Indicates the number of sensors that have atleast some data missing.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of missing values across all the sensors.
        /// This member is required.
        public var totalNumberOfMissingValues: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfMissingValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfMissingValues = totalNumberOfMissingValues
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information abount unsupported timestamps in the dataset.
    public struct UnsupportedTimestamps: Swift.Sendable {
        /// Indicates the total number of unsupported timestamps across the ingested data.
        /// This member is required.
        public var totalNumberOfUnsupportedTimestamps: Swift.Int?

        public init(
            totalNumberOfUnsupportedTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfUnsupportedTimestamps = totalNumberOfUnsupportedTimestamps
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// DataQualitySummary gives aggregated statistics over all the sensors about a completed ingestion job. It primarily gives more information about statistics over different incorrect data like MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, DuplicateTimeStamps.
    public struct DataQualitySummary: Swift.Sendable {
        /// Parameter that gives information about duplicate timestamps in the input data.
        /// This member is required.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps?
        /// Parameter that gives information about insufficient data for sensors in the dataset. This includes information about those sensors that have complete data missing and those with a short date range.
        /// This member is required.
        public var insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData?
        /// Parameter that gives information about data that is invalid over all the sensors in the input data.
        /// This member is required.
        public var invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData?
        /// Parameter that gives information about data that is missing over all the sensors in the input data.
        /// This member is required.
        public var missingSensorData: LookoutEquipmentClientTypes.MissingSensorData?
        /// Parameter that gives information about unsupported timestamps in the input data.
        /// This member is required.
        public var unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps?

        public init(
            duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps? = nil,
            insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData? = nil,
            invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData? = nil,
            missingSensorData: LookoutEquipmentClientTypes.MissingSensorData? = nil,
            unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps? = nil
        )
        {
            self.duplicateTimestamps = duplicateTimestamps
            self.insufficientSensorData = insufficientSensorData
            self.invalidSensorData = invalidSensorData
            self.missingSensorData = missingSensorData
            self.unsupportedTimestamps = unsupportedTimestamps
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about an S3 bucket.
    public struct S3Object: Swift.Sendable {
        /// The name of the specific S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The Amazon Web Services Key Management Service (KMS key) key being used to encrypt the S3 object. Without this key, data in the bucket is not accessible.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public struct IngestedFilesSummary: Swift.Sendable {
        /// Indicates the number of files that were discarded. A file could be discarded because its format is invalid (for example, a jpg or pdf) or not readable.
        public var discardedFiles: [LookoutEquipmentClientTypes.S3Object]?
        /// Indicates the number of files that were successfully ingested.
        /// This member is required.
        public var ingestedNumberOfFiles: Swift.Int?
        /// Indicates the total number of files that were submitted for ingestion.
        /// This member is required.
        public var totalNumberOfFiles: Swift.Int?

        public init(
            discardedFiles: [LookoutEquipmentClientTypes.S3Object]? = nil,
            ingestedNumberOfFiles: Swift.Int? = nil,
            totalNumberOfFiles: Swift.Int? = nil
        )
        {
            self.discardedFiles = discardedFiles
            self.ingestedNumberOfFiles = ingestedNumberOfFiles
            self.totalNumberOfFiles = totalNumberOfFiles
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies S3 configuration information for the input data for the data ingestion job.
    public struct IngestionS3InputConfiguration: Swift.Sendable {
        /// The name of the S3 bucket used for the input data for the data ingestion.
        /// This member is required.
        public var bucket: Swift.String?
        /// The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time. Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)
        public var keyPattern: Swift.String?
        /// The prefix for the S3 location being used for the input data for the data ingestion.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPattern: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPattern = keyPattern
            self.`prefix` = `prefix`
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Specifies configuration information for the input data for the data ingestion job, including input data S3 location.
    public struct IngestionInputConfiguration: Swift.Sendable {
        /// The location information for the S3 bucket used for input data for the data ingestion.
        /// This member is required.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration?

        public init(
            s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration? = nil
        )
        {
            self.s3InputConfiguration = s3InputConfiguration
        }
    }
}

extension LookoutEquipmentClientTypes {

    public enum IngestionJobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [IngestionJobStatus] {
            return [
                .failed,
                .importInProgress,
                .inProgress,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeDataIngestionJobOutput: Swift.Sendable {
    /// The time at which the data ingestion job was created.
    public var createdAt: Foundation.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataEndTime: Foundation.Date?
    /// Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataStartTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job.
    public var datasetArn: Swift.String?
    /// Specifies the reason for failure when a data ingestion job has failed.
    public var failedReason: Swift.String?
    /// Indicates the size of the ingested dataset.
    public var ingestedDataSize: Swift.Int?
    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested.
    public var roleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the source dataset from which the data used for the data ingestion job was imported from.
    public var sourceDatasetArn: Swift.String?
    /// Indicates the status of the DataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?
    /// Provides details about status of the ingestion job that is currently in progress.
    public var statusDetail: Swift.String?

    public init(
        createdAt: Foundation.Date? = nil,
        dataEndTime: Foundation.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: Foundation.Date? = nil,
        datasetArn: Swift.String? = nil,
        failedReason: Swift.String? = nil,
        ingestedDataSize: Swift.Int? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        jobId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil,
        statusDetail: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.failedReason = failedReason
        self.ingestedDataSize = ingestedDataSize
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.jobId = jobId
        self.roleArn = roleArn
        self.sourceDatasetArn = sourceDatasetArn
        self.status = status
        self.statusDetail = statusDetail
    }
}

public struct DescribeDatasetInput: Swift.Sendable {
    /// The name of the dataset to be described.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

public struct DescribeDatasetOutput: Swift.Sendable {
    /// Specifies the time the dataset was created in Lookout for Equipment.
    public var createdAt: Foundation.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataEndTime: Foundation.Date?
    /// Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataStartTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the dataset being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being described.
    public var datasetName: Swift.String?
    /// IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Specifies the time the dataset was last updated, if it was.
    public var lastUpdatedAt: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the source dataset from which the current data being described was imported from.
    public var sourceDatasetArn: Swift.String?
    /// Indicates the status of the dataset.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        createdAt: Foundation.Date? = nil,
        dataEndTime: Foundation.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: Foundation.Date? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.lastUpdatedAt = lastUpdatedAt
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceDatasetArn = sourceDatasetArn
        self.status = status
    }
}

public struct DescribeInferenceSchedulerInput: Swift.Sendable {
    /// The name of the inference scheduler being described.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

extension LookoutEquipmentClientTypes {

    public enum LatestInferenceResult: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case anomalous
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [LatestInferenceResult] {
            return [
                .anomalous,
                .normal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .anomalous: return "ANOMALOUS"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeInferenceSchedulerOutput: Swift.Sendable {
    /// Specifies the time at which the inference scheduler was created.
    public var createdAt: Foundation.Date?
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results for the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// Specifies how often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The Amazon Resource Name (ARN) of the inference scheduler being described.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being described.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
    public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
    /// The Amazon Resource Name (ARN) of the machine learning model of the inference scheduler being described.
    public var modelArn: Swift.String?
    /// The name of the machine learning model of the inference scheduler being described.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler being described.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    /// Specifies the time at which the inference scheduler was last updated, if it was.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.latestInferenceResult = latestInferenceResult
        self.modelArn = modelArn
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct DescribeLabelInput: Swift.Sendable {
    /// Returns the name of the group containing the label.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Returns the ID of the label.
    /// This member is required.
    public var labelId: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

public struct DescribeLabelOutput: Swift.Sendable {
    /// The time at which the label was created.
    public var createdAt: Foundation.Date?
    /// The end time of the requested label.
    public var endTime: Foundation.Date?
    /// Indicates that a label pertains to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The Amazon Resource Name (ARN) of the requested label group.
    public var labelGroupArn: Swift.String?
    /// The name of the requested label group.
    public var labelGroupName: Swift.String?
    /// The ID of the requested label.
    public var labelId: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the requested label.
    public var startTime: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        endTime: Foundation.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.labelId = labelId
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

public struct DescribeLabelGroupInput: Swift.Sendable {
    /// Returns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

public struct DescribeLabelGroupOutput: Swift.Sendable {
    /// The time at which the label group was created.
    public var createdAt: Foundation.Date?
    /// Codes indicating the type of anomaly associated with the labels in the lagbel group.
    public var faultCodes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the label group.
    public var labelGroupArn: Swift.String?
    /// The name of the label group.
    public var labelGroupName: Swift.String?
    /// The time at which the label group was updated.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.faultCodes = faultCodes
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.updatedAt = updatedAt
    }
}

public struct DescribeModelInput: Swift.Sendable {
    /// The name of the machine learning model to be described.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

extension LookoutEquipmentClientTypes {

    public enum ModelVersionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canceled
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVersionStatus] {
            return [
                .canceled,
                .failed,
                .importInProgress,
                .inProgress,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeModelOutput: Swift.Sendable {
    /// Indicates the end time of the inference data that has been accumulated.
    public var accumulatedInferenceDataEndTime: Foundation.Date?
    /// Indicates the start time of the inference data that has been accumulated.
    public var accumulatedInferenceDataStartTime: Foundation.Date?
    /// The name of the model version used by the inference schedular when running a scheduled inference execution.
    public var activeModelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.
    public var activeModelVersionArn: Swift.String?
    /// Indicates the time and date at which the machine learning model was created.
    public var createdAt: Foundation.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being used by the machine learning being described.
    public var datasetName: Swift.String?
    /// Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model.
    public var evaluationDataEndTime: Foundation.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model.
    public var evaluationDataStartTime: Foundation.Date?
    /// If the training of the machine learning model failed, this indicates the reason for that failure.
    public var failedReason: Swift.String?
    /// The date and time when the import job was completed. This field appears if the active model version was imported.
    public var importJobEndTime: Foundation.Date?
    /// The date and time when the import job was started. This field appears if the active model version was imported.
    public var importJobStartTime: Foundation.Date?
    /// Specifies configuration information about the labels input, including its S3 location.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the machine learning model was updated. The type of update is not specified.
    public var lastUpdatedTime: Foundation.Date?
    /// Indicates the number of days of data used in the most recent scheduled retraining run.
    public var latestScheduledRetrainingAvailableDataInDays: Swift.Int?
    /// If the model version was generated by retraining and the training failed, this indicates the reason for that failure.
    public var latestScheduledRetrainingFailedReason: Swift.String?
    /// Indicates the most recent model version that was generated by retraining.
    public var latestScheduledRetrainingModelVersion: Swift.Int?
    /// Indicates the start time of the most recent scheduled retraining run.
    public var latestScheduledRetrainingStartTime: Foundation.Date?
    /// Indicates the status of the most recent scheduled retraining run.
    public var latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus?
    /// The Amazon Resource Name (ARN) of the machine learning model being described.
    public var modelArn: Swift.String?
    /// Configuration information for the model's pointwise model diagnostics.
    public var modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?
    /// The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the machine learning model being described.
    public var modelName: Swift.String?
    /// Provides a quality assessment for a model that uses labels. If Lookout for Equipment determines that the model quality is poor based on training metrics, the value is POOR_QUALITY_DETECTED. Otherwise, the value is QUALITY_THRESHOLD_MET. If the model is unlabeled, the model quality can't be assessed and the value of ModelQuality is CANNOT_DETERMINE_QUALITY. In this situation, you can get a model quality assessment by adding labels to the input dataset and retraining the model. For information about using labels with your models, see [Understanding labeling](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-labeling.html). For information about improving the quality of a model, see [Best practices with Amazon Lookout for Equipment](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/best-practices.html).
    public var modelQuality: LookoutEquipmentClientTypes.ModelQuality?
    /// The date the active model version was activated.
    public var modelVersionActivatedAt: Foundation.Date?
    /// Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var nextScheduledRetrainingStartDate: Foundation.Date?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The model version that was set as the active model version prior to the current active model version.
    public var previousActiveModelVersion: Swift.Int?
    /// The ARN of the model version that was set as the active model version prior to the current active model version.
    public var previousActiveModelVersionArn: Swift.String?
    /// The date and time when the previous active model version was activated.
    public var previousModelVersionActivatedAt: Foundation.Date?
    /// If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.
    public var priorModelMetrics: Swift.String?
    /// Indicates the status of the retraining scheduler.
    public var retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.
    public var sourceModelVersionArn: Swift.String?
    /// Specifies the current status of the model being described. Status describes the status of the most recent action of the model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?
    /// Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model.
    public var trainingDataEndTime: Foundation.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model.
    public var trainingDataStartTime: Foundation.Date?
    /// Indicates the time at which the training of the machine learning model was completed.
    public var trainingExecutionEndTime: Foundation.Date?
    /// Indicates the time at which the training of the machine learning model began.
    public var trainingExecutionStartTime: Foundation.Date?

    public init(
        accumulatedInferenceDataEndTime: Foundation.Date? = nil,
        accumulatedInferenceDataStartTime: Foundation.Date? = nil,
        activeModelVersion: Swift.Int? = nil,
        activeModelVersionArn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: Foundation.Date? = nil,
        evaluationDataStartTime: Foundation.Date? = nil,
        failedReason: Swift.String? = nil,
        importJobEndTime: Foundation.Date? = nil,
        importJobStartTime: Foundation.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        latestScheduledRetrainingAvailableDataInDays: Swift.Int? = nil,
        latestScheduledRetrainingFailedReason: Swift.String? = nil,
        latestScheduledRetrainingModelVersion: Swift.Int? = nil,
        latestScheduledRetrainingStartTime: Foundation.Date? = nil,
        latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
        modelArn: Swift.String? = nil,
        modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelQuality: LookoutEquipmentClientTypes.ModelQuality? = nil,
        modelVersionActivatedAt: Foundation.Date? = nil,
        nextScheduledRetrainingStartDate: Foundation.Date? = nil,
        offCondition: Swift.String? = nil,
        previousActiveModelVersion: Swift.Int? = nil,
        previousActiveModelVersionArn: Swift.String? = nil,
        previousModelVersionActivatedAt: Foundation.Date? = nil,
        priorModelMetrics: Swift.String? = nil,
        retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil,
        trainingDataEndTime: Foundation.Date? = nil,
        trainingDataStartTime: Foundation.Date? = nil,
        trainingExecutionEndTime: Foundation.Date? = nil,
        trainingExecutionStartTime: Foundation.Date? = nil
    )
    {
        self.accumulatedInferenceDataEndTime = accumulatedInferenceDataEndTime
        self.accumulatedInferenceDataStartTime = accumulatedInferenceDataStartTime
        self.activeModelVersion = activeModelVersion
        self.activeModelVersionArn = activeModelVersionArn
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.importJobEndTime = importJobEndTime
        self.importJobStartTime = importJobStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.latestScheduledRetrainingAvailableDataInDays = latestScheduledRetrainingAvailableDataInDays
        self.latestScheduledRetrainingFailedReason = latestScheduledRetrainingFailedReason
        self.latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersion
        self.latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTime
        self.latestScheduledRetrainingStatus = latestScheduledRetrainingStatus
        self.modelArn = modelArn
        self.modelDiagnosticsOutputConfiguration = modelDiagnosticsOutputConfiguration
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.modelQuality = modelQuality
        self.modelVersionActivatedAt = modelVersionActivatedAt
        self.nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDate
        self.offCondition = offCondition
        self.previousActiveModelVersion = previousActiveModelVersion
        self.previousActiveModelVersionArn = previousActiveModelVersionArn
        self.previousModelVersionActivatedAt = previousModelVersionActivatedAt
        self.priorModelMetrics = priorModelMetrics
        self.retrainingSchedulerStatus = retrainingSchedulerStatus
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

public struct DescribeModelVersionInput: Swift.Sendable {
    /// The name of the machine learning model that this version belongs to.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the machine learning model.
    /// This member is required.
    public var modelVersion: Swift.Int?

    public init(
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil
    )
    {
        self.modelName = modelName
        self.modelVersion = modelVersion
    }
}

extension LookoutEquipmentClientTypes {

    public enum ModelVersionSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `import`
        case retraining
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVersionSourceType] {
            return [
                .import,
                .retraining,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .import: return "IMPORT"
            case .retraining: return "RETRAINING"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeModelVersionOutput: Swift.Sendable {
    /// Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining.
    public var autoPromotionResult: LookoutEquipmentClientTypes.AutoPromotionResult?
    /// Indicates the reason for the AutoPromotionResult. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using MANUAL promote mode. The model will be promoted in MANAGED promote mode if the performance is better than the previous model.
    public var autoPromotionResultReason: Swift.String?
    /// Indicates the time and date at which the machine learning model version was created.
    public var createdAt: Foundation.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resource Name (ARN) of the dataset used to train the model version.
    public var datasetArn: Swift.String?
    /// The name of the dataset used to train the model version.
    public var datasetName: Swift.String?
    /// The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.
    public var evaluationDataEndTime: Foundation.Date?
    /// The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.
    public var evaluationDataStartTime: Foundation.Date?
    /// The failure message if the training of the model version failed.
    public var failedReason: Swift.String?
    /// The date and time when the import job completed. This field appears if the model version was imported.
    public var importJobEndTime: Foundation.Date?
    /// The date and time when the import job began. This field appears if the model version was imported.
    public var importJobStartTime: Foundation.Date?
    /// The size in bytes of the imported data. This field appears if the model version was imported.
    public var importedDataSizeInBytes: Swift.Int?
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the machine learning model version was updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.
    public var modelArn: Swift.String?
    /// The Amazon S3 location where Amazon Lookout for Equipment saves the pointwise model diagnostics for the model version.
    public var modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?
    /// The Amazon S3 output prefix for where Lookout for Equipment saves the pointwise model diagnostics for the model version.
    public var modelDiagnosticsResultsObject: LookoutEquipmentClientTypes.S3Object?
    /// Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the machine learning model that this version belongs to.
    public var modelName: Swift.String?
    /// Provides a quality assessment for a model that uses labels. If Lookout for Equipment determines that the model quality is poor based on training metrics, the value is POOR_QUALITY_DETECTED. Otherwise, the value is QUALITY_THRESHOLD_MET. If the model is unlabeled, the model quality can't be assessed and the value of ModelQuality is CANNOT_DETERMINE_QUALITY. In this situation, you can get a model quality assessment by adding labels to the input dataset and retraining the model. For information about using labels with your models, see [Understanding labeling](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-labeling.html). For information about improving the quality of a model, see [Best practices with Amazon Lookout for Equipment](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/best-practices.html).
    public var modelQuality: LookoutEquipmentClientTypes.ModelQuality?
    /// The version of the machine learning model.
    public var modelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version.
    public var modelVersionArn: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.
    public var priorModelMetrics: Swift.String?
    /// Indicates the number of days of data used in the most recent scheduled retraining run.
    public var retrainingAvailableDataInDays: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role that was used to train the model version.
    public var roleArn: Swift.String?
    /// The schema of the data used to train the model version.
    public var schema: Swift.String?
    /// The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// If model version was imported, then this field is the arn of the source model version.
    public var sourceModelVersionArn: Swift.String?
    /// Indicates whether this model version was created by training or by importing.
    public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    /// The current status of the model version.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?
    /// The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.
    public var trainingDataEndTime: Foundation.Date?
    /// The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.
    public var trainingDataStartTime: Foundation.Date?
    /// The time when the training of the version completed.
    public var trainingExecutionEndTime: Foundation.Date?
    /// The time when the training of the version began.
    public var trainingExecutionStartTime: Foundation.Date?

    public init(
        autoPromotionResult: LookoutEquipmentClientTypes.AutoPromotionResult? = nil,
        autoPromotionResultReason: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: Foundation.Date? = nil,
        evaluationDataStartTime: Foundation.Date? = nil,
        failedReason: Swift.String? = nil,
        importJobEndTime: Foundation.Date? = nil,
        importJobStartTime: Foundation.Date? = nil,
        importedDataSizeInBytes: Swift.Int? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        modelArn: Swift.String? = nil,
        modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration? = nil,
        modelDiagnosticsResultsObject: LookoutEquipmentClientTypes.S3Object? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelQuality: LookoutEquipmentClientTypes.ModelQuality? = nil,
        modelVersion: Swift.Int? = nil,
        modelVersionArn: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        priorModelMetrics: Swift.String? = nil,
        retrainingAvailableDataInDays: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
        trainingDataEndTime: Foundation.Date? = nil,
        trainingDataStartTime: Foundation.Date? = nil,
        trainingExecutionEndTime: Foundation.Date? = nil,
        trainingExecutionStartTime: Foundation.Date? = nil
    )
    {
        self.autoPromotionResult = autoPromotionResult
        self.autoPromotionResultReason = autoPromotionResultReason
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.importJobEndTime = importJobEndTime
        self.importJobStartTime = importJobStartTime
        self.importedDataSizeInBytes = importedDataSizeInBytes
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.modelArn = modelArn
        self.modelDiagnosticsOutputConfiguration = modelDiagnosticsOutputConfiguration
        self.modelDiagnosticsResultsObject = modelDiagnosticsResultsObject
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.modelQuality = modelQuality
        self.modelVersion = modelVersion
        self.modelVersionArn = modelVersionArn
        self.offCondition = offCondition
        self.priorModelMetrics = priorModelMetrics
        self.retrainingAvailableDataInDays = retrainingAvailableDataInDays
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.sourceType = sourceType
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

public struct DescribeResourcePolicyInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource that is associated with the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DescribeResourcePolicyOutput: Swift.Sendable {
    /// The time when the resource policy was created.
    public var creationTime: Foundation.Date?
    /// The time when the resource policy was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The resource policy in a JSON-formatted string.
    public var resourcePolicy: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        policyRevisionId: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.policyRevisionId = policyRevisionId
        self.resourcePolicy = resourcePolicy
    }
}

public struct DescribeRetrainingSchedulerInput: Swift.Sendable {
    /// The name of the model that the retraining scheduler is attached to.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct DescribeRetrainingSchedulerOutput: Swift.Sendable {
    /// Indicates the time and date at which the retraining scheduler was created.
    public var createdAt: Foundation.Date?
    /// The number of past days of data used for retraining.
    public var lookbackWindow: Swift.String?
    /// The ARN of the model that the retraining scheduler is attached to.
    public var modelArn: Swift.String?
    /// The name of the model that the retraining scheduler is attached to.
    public var modelName: Swift.String?
    /// Indicates how the service uses new models. In MANAGED mode, new models are used for inference if they have better performance than the current model. In MANUAL mode, the new models are not used until they are [manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// The frequency at which the model retraining is set. This follows the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) guidelines.
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: Foundation.Date?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    /// Indicates the time and date at which the retraining scheduler was updated.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        lookbackWindow: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: Foundation.Date? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.lookbackWindow = lookbackWindow
        self.modelArn = modelArn
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct ImportDatasetInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the machine learning dataset to be created. If the dataset already exists, Amazon Lookout for Equipment overwrites the existing dataset. If you don't specify this field, it is filled with the name of the source dataset.
    public var datasetName: Swift.String?
    /// Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the dataset to import.
    /// This member is required.
    public var sourceDatasetArn: Swift.String?
    /// Any tags associated with the dataset to be created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceDatasetArn = sourceDatasetArn
        self.tags = tags
    }
}

public struct ImportDatasetOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the dataset that was imported.
    public var datasetArn: Swift.String?
    /// The name of the created machine learning dataset.
    public var datasetName: Swift.String?
    /// A unique identifier for the job of importing the dataset.
    public var jobId: Swift.String?
    /// The status of the ImportDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.jobId = jobId
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    public enum InferenceDataImportStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case addWhenEmpty
        case noImport
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceDataImportStrategy] {
            return [
                .addWhenEmpty,
                .noImport,
                .overwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .addWhenEmpty: return "ADD_WHEN_EMPTY"
            case .noImport: return "NO_IMPORT"
            case .overwrite: return "OVERWRITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ImportModelVersionInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset for the machine learning model being imported.
    /// This member is required.
    public var datasetName: Swift.String?
    /// Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:
    ///
    /// * NO_IMPORT – Don't import the data.
    ///
    /// * ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.
    ///
    /// * OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.
    public var inferenceDataImportStrategy: LookoutEquipmentClientTypes.InferenceDataImportStrategy?
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the model version to import.
    /// This member is required.
    public var sourceModelVersionArn: Swift.String?
    /// The tags associated with the machine learning model to be created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        inferenceDataImportStrategy: LookoutEquipmentClientTypes.InferenceDataImportStrategy? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.inferenceDataImportStrategy = inferenceDataImportStrategy
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.tags = tags
    }
}

public struct ImportModelVersionOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// The name for the machine learning model.
    public var modelName: Swift.String?
    /// The version of the model being created.
    public var modelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version being created.
    public var modelVersionArn: Swift.String?
    /// The status of the ImportModelVersion operation.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil,
        modelVersionArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.modelVersion = modelVersion
        self.modelVersionArn = modelVersionArn
        self.status = status
    }
}

public struct ListDataIngestionJobsInput: Swift.Sendable {
    /// The name of the dataset being used for the data ingestion job.
    public var datasetName: Swift.String?
    /// Specifies the maximum number of data ingestion jobs to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?
    /// Indicates the status of the data ingestion job.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init(
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Provides information about a specified data ingestion job, including dataset information, data ingestion configuration, and status.
    public struct DataIngestionJobSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the dataset used in the data ingestion job.
        public var datasetArn: Swift.String?
        /// The name of the dataset used for the data ingestion job.
        public var datasetName: Swift.String?
        /// Specifies information for the input data for the data inference job, including data Amazon S3 location parameters.
        public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
        /// Indicates the job ID of the data ingestion job.
        public var jobId: Swift.String?
        /// Indicates the status of the data ingestion job.
        public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

        public init(
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
            jobId: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
        )
        {
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.ingestionInputConfiguration = ingestionInputConfiguration
            self.jobId = jobId
            self.status = status
        }
    }
}

public struct ListDataIngestionJobsOutput: Swift.Sendable {
    /// Specifies information about the specific data ingestion job, including dataset name and status.
    public var dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?

    public init(
        dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataIngestionJobSummaries = dataIngestionJobSummaries
        self.nextToken = nextToken
    }
}

public struct ListDatasetsInput: Swift.Sendable {
    /// The beginning of the name of the datasets to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of datasets to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the specific data set, including name, ARN, and status.
    public struct DatasetSummary: Swift.Sendable {
        /// The time at which the dataset was created in Amazon Lookout for Equipment.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the specified dataset.
        public var datasetArn: Swift.String?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// Indicates the status of the dataset.
        public var status: LookoutEquipmentClientTypes.DatasetStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.DatasetStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.status = status
        }
    }
}

public struct ListDatasetsOutput: Swift.Sendable {
    /// Provides information about the specified dataset, including creation time, dataset ARN, and status.
    public var datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

public struct ListInferenceEventsInput: Swift.Sendable {
    /// The name of the inference scheduler for the inference events listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Returns all the inference events with an end start time equal to or greater than less than the end time given.
    /// This member is required.
    public var intervalEndTime: Foundation.Date?
    /// Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.
    /// This member is required.
    public var intervalStartTime: Foundation.Date?
    /// Specifies the maximum number of inference events to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference events.
    public var nextToken: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil,
        intervalEndTime: Foundation.Date? = nil,
        intervalStartTime: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.
    public struct InferenceEventSummary: Swift.Sendable {
        /// An array which specifies the names and values of all sensors contributing to an inference event.
        public var diagnostics: Swift.String?
        /// Indicates the size of an inference event in seconds.
        public var eventDurationInSeconds: Swift.Int?
        /// Indicates the ending time of an inference event.
        public var eventEndTime: Foundation.Date?
        /// Indicates the starting time of an inference event.
        public var eventStartTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference events.
        public var inferenceSchedulerName: Swift.String?

        public init(
            diagnostics: Swift.String? = nil,
            eventDurationInSeconds: Swift.Int? = nil,
            eventEndTime: Foundation.Date? = nil,
            eventStartTime: Foundation.Date? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil
        )
        {
            self.diagnostics = diagnostics
            self.eventDurationInSeconds = eventDurationInSeconds
            self.eventEndTime = eventEndTime
            self.eventStartTime = eventStartTime
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
        }
    }
}

public struct ListInferenceEventsOutput: Swift.Sendable {
    /// Provides an array of information about the individual inference events returned from the ListInferenceEvents operation, including scheduler used, event start time, event end time, diagnostics, and so on.
    public var inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init(
        inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceEventSummaries = inferenceEventSummaries
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    public enum InferenceExecutionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionStatus] {
            return [
                .failed,
                .inProgress,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListInferenceExecutionsInput: Swift.Sendable {
    /// The time reference in the inferenced dataset before which Amazon Lookout for Equipment stopped the inference execution.
    public var dataEndTimeBefore: Foundation.Date?
    /// The time reference in the inferenced dataset after which Amazon Lookout for Equipment started the inference execution.
    public var dataStartTimeAfter: Foundation.Date?
    /// The name of the inference scheduler for the inference execution listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Specifies the maximum number of inference executions to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?
    /// The status of the inference execution.
    public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

    public init(
        dataEndTimeBefore: Foundation.Date? = nil,
        dataStartTimeAfter: Foundation.Date? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
    )
    {
        self.dataEndTimeBefore = dataEndTimeBefore
        self.dataStartTimeAfter = dataStartTimeAfter
        self.inferenceSchedulerName = inferenceSchedulerName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the specific inference execution, including input and output data configuration, inference scheduling information, status, and so on.
    public struct InferenceExecutionSummary: Swift.Sendable {
        /// The S3 object that the inference execution results were uploaded to.
        public var customerResultObject: LookoutEquipmentClientTypes.S3Object?
        /// Indicates the time reference in the dataset at which the inference execution stopped.
        public var dataEndTime: Foundation.Date?
        /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
        public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
        /// Specifies configuration information for the output results from for the inference execution, including the output Amazon S3 location.
        public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
        /// Indicates the time reference in the dataset at which the inference execution began.
        public var dataStartTime: Foundation.Date?
        /// Specifies the reason for failure when an inference execution has failed.
        public var failedReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the machine learning model used for the inference execution.
        public var modelArn: Swift.String?
        /// The name of the machine learning model being used for the inference execution.
        public var modelName: Swift.String?
        /// The model version used for the inference execution.
        public var modelVersion: Swift.Int?
        /// The Amazon Resource Number (ARN) of the model version used for the inference execution.
        public var modelVersionArn: Swift.String?
        /// Indicates the start time at which the inference scheduler began the specific inference execution.
        public var scheduledStartTime: Foundation.Date?
        /// Indicates the status of the inference execution.
        public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

        public init(
            customerResultObject: LookoutEquipmentClientTypes.S3Object? = nil,
            dataEndTime: Foundation.Date? = nil,
            dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
            dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
            dataStartTime: Foundation.Date? = nil,
            failedReason: Swift.String? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.Int? = nil,
            modelVersionArn: Swift.String? = nil,
            scheduledStartTime: Foundation.Date? = nil,
            status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
        )
        {
            self.customerResultObject = customerResultObject
            self.dataEndTime = dataEndTime
            self.dataInputConfiguration = dataInputConfiguration
            self.dataOutputConfiguration = dataOutputConfiguration
            self.dataStartTime = dataStartTime
            self.failedReason = failedReason
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.modelArn = modelArn
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.modelVersionArn = modelVersionArn
            self.scheduledStartTime = scheduledStartTime
            self.status = status
        }
    }
}

public struct ListInferenceExecutionsOutput: Swift.Sendable {
    /// Provides an array of information about the individual inference executions returned from the ListInferenceExecutions operation, including model used, inference scheduler, data configuration, and so on. If you don't supply the InferenceSchedulerName request parameter, or if you supply the name of an inference scheduler that doesn't exist, ListInferenceExecutions returns an empty array in InferenceExecutionSummaries.
    public var inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init(
        inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceExecutionSummaries = inferenceExecutionSummaries
        self.nextToken = nextToken
    }
}

public struct ListInferenceSchedulersInput: Swift.Sendable {
    /// The beginning of the name of the inference schedulers to be listed.
    public var inferenceSchedulerNameBeginsWith: Swift.String?
    /// Specifies the maximum number of inference schedulers to list.
    public var maxResults: Swift.Int?
    /// The name of the machine learning model used by the inference scheduler to be listed.
    public var modelName: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?
    /// Specifies the current status of the inference schedulers.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWith
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the specific inference scheduler, including data delay offset, model name and ARN, status, and so on.
    public struct InferenceSchedulerSummary: Swift.Sendable {
        /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if an offset delay time of five minutes was selected, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        public var dataDelayOffsetInMinutes: Swift.Int?
        /// How often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
        public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
        /// The Amazon Resource Name (ARN) of the inference scheduler.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler.
        public var inferenceSchedulerName: Swift.String?
        /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
        public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
        /// The Amazon Resource Name (ARN) of the machine learning model used by the inference scheduler.
        public var modelArn: Swift.String?
        /// The name of the machine learning model used for the inference scheduler.
        public var modelName: Swift.String?
        /// Indicates the status of the inference scheduler.
        public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

        public init(
            dataDelayOffsetInMinutes: Swift.Int? = nil,
            dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
        )
        {
            self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
            self.dataUploadFrequency = dataUploadFrequency
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.latestInferenceResult = latestInferenceResult
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }
}

public struct ListInferenceSchedulersOutput: Swift.Sendable {
    /// Provides information about the specified inference scheduler, including data upload frequency, model name and ARN, and status.
    public var inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?

    public init(
        inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerSummaries = inferenceSchedulerSummaries
        self.nextToken = nextToken
    }
}

public struct ListLabelGroupsInput: Swift.Sendable {
    /// The beginning of the name of the label groups to be listed.
    public var labelGroupNameBeginsWith: Swift.String?
    /// Specifies the maximum number of label groups to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        labelGroupNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupNameBeginsWith = labelGroupNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the label group.
    public struct LabelGroupSummary: Swift.Sendable {
        /// The time at which the label group was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The time at which the label group was updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.updatedAt = updatedAt
        }
    }
}

public struct ListLabelGroupsOutput: Swift.Sendable {
    /// A summary of the label groups.
    public var labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupSummaries = labelGroupSummaries
        self.nextToken = nextToken
    }
}

public struct ListLabelsInput: Swift.Sendable {
    /// Lists the labels that pertain to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Returns labels with a particular fault code.
    public var faultCode: Swift.String?
    /// Returns all labels with a start time earlier than the end time given.
    public var intervalEndTime: Foundation.Date?
    /// Returns all the labels with a end time equal to or later than the start time given.
    public var intervalStartTime: Foundation.Date?
    /// Returns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Specifies the maximum number of labels to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        intervalEndTime: Foundation.Date? = nil,
        intervalStartTime: Foundation.Date? = nil,
        labelGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.equipment = equipment
        self.faultCode = faultCode
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.labelGroupName = labelGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    /// Information about the label.
    public struct LabelSummary: Swift.Sendable {
        /// The time at which the label was created.
        public var createdAt: Foundation.Date?
        /// The timestamp indicating the end of the label.
        public var endTime: Foundation.Date?
        /// Indicates that a label pertains to a particular piece of equipment.
        public var equipment: Swift.String?
        /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
        public var faultCode: Swift.String?
        /// The Amazon Resource Name (ARN) of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The ID of the label.
        public var labelId: Swift.String?
        /// Indicates whether a labeled event represents an anomaly.
        public var rating: LookoutEquipmentClientTypes.LabelRating?
        /// The timestamp indicating the start of the label.
        public var startTime: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            equipment: Swift.String? = nil,
            faultCode: Swift.String? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            labelId: Swift.String? = nil,
            rating: LookoutEquipmentClientTypes.LabelRating? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.endTime = endTime
            self.equipment = equipment
            self.faultCode = faultCode
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.labelId = labelId
            self.rating = rating
            self.startTime = startTime
        }
    }
}

public struct ListLabelsOutput: Swift.Sendable {
    /// A summary of the items in the label group. If you don't supply the LabelGroupName request parameter, or if you supply the name of a label group that doesn't exist, ListLabels returns an empty array in LabelSummaries.
    public var labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelSummaries = labelSummaries
        self.nextToken = nextToken
    }
}

public struct ListModelsInput: Swift.Sendable {
    /// The beginning of the name of the dataset of the machine learning models to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of machine learning models to list.
    public var maxResults: Swift.Int?
    /// The beginning of the name of the machine learning models being listed.
    public var modelNameBeginsWith: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of machine learning models.
    public var nextToken: Swift.String?
    /// The status of the machine learning model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init(
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Provides information about the specified machine learning model, including dataset and model names and ARNs, as well as status.
    public struct ModelSummary: Swift.Sendable {
        /// The model version that the inference scheduler uses to run an inference execution.
        public var activeModelVersion: Swift.Int?
        /// The Amazon Resource Name (ARN) of the model version that is set as active. The active model version is the model version that the inference scheduler uses to run an inference execution.
        public var activeModelVersionArn: Swift.String?
        /// The time at which the specific model was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the dataset used to create the model.
        public var datasetArn: Swift.String?
        /// The name of the dataset being used for the machine learning model.
        public var datasetName: Swift.String?
        /// Indicates the most recent model version that was generated by retraining.
        public var latestScheduledRetrainingModelVersion: Swift.Int?
        /// Indicates the start time of the most recent scheduled retraining run.
        public var latestScheduledRetrainingStartTime: Foundation.Date?
        /// Indicates the status of the most recent scheduled retraining run.
        public var latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus?
        /// The Amazon Resource Name (ARN) of the machine learning model.
        public var modelArn: Swift.String?
        /// Output configuration information for the pointwise model diagnostics for an Amazon Lookout for Equipment model.
        public var modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?
        /// The name of the machine learning model.
        public var modelName: Swift.String?
        /// Provides a quality assessment for a model that uses labels. If Lookout for Equipment determines that the model quality is poor based on training metrics, the value is POOR_QUALITY_DETECTED. Otherwise, the value is QUALITY_THRESHOLD_MET. If the model is unlabeled, the model quality can't be assessed and the value of ModelQuality is CANNOT_DETERMINE_QUALITY. In this situation, you can get a model quality assessment by adding labels to the input dataset and retraining the model. For information about using labels with your models, see [Understanding labeling](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-labeling.html). For information about improving the quality of a model, see [Best practices with Amazon Lookout for Equipment](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/best-practices.html).
        public var modelQuality: LookoutEquipmentClientTypes.ModelQuality?
        /// Indicates the date that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to [the nearest UTC day](https://docs.aws.amazon.com/https:/docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp).
        public var nextScheduledRetrainingStartDate: Foundation.Date?
        /// Indicates the status of the retraining scheduler.
        public var retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
        /// Indicates the status of the machine learning model.
        public var status: LookoutEquipmentClientTypes.ModelStatus?

        public init(
            activeModelVersion: Swift.Int? = nil,
            activeModelVersionArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            latestScheduledRetrainingModelVersion: Swift.Int? = nil,
            latestScheduledRetrainingStartTime: Foundation.Date? = nil,
            latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
            modelArn: Swift.String? = nil,
            modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration? = nil,
            modelName: Swift.String? = nil,
            modelQuality: LookoutEquipmentClientTypes.ModelQuality? = nil,
            nextScheduledRetrainingStartDate: Foundation.Date? = nil,
            retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
            status: LookoutEquipmentClientTypes.ModelStatus? = nil
        )
        {
            self.activeModelVersion = activeModelVersion
            self.activeModelVersionArn = activeModelVersionArn
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersion
            self.latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTime
            self.latestScheduledRetrainingStatus = latestScheduledRetrainingStatus
            self.modelArn = modelArn
            self.modelDiagnosticsOutputConfiguration = modelDiagnosticsOutputConfiguration
            self.modelName = modelName
            self.modelQuality = modelQuality
            self.nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDate
            self.retrainingSchedulerStatus = retrainingSchedulerStatus
            self.status = status
        }
    }
}

public struct ListModelsOutput: Swift.Sendable {
    /// Provides information on the specified model, including created time, model and dataset ARNs, and status.
    public var modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
    /// An opaque pagination token indicating where to continue the listing of machine learning models.
    public var nextToken: Swift.String?

    public init(
        modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelSummaries = modelSummaries
        self.nextToken = nextToken
    }
}

public struct ListModelVersionsInput: Swift.Sendable {
    /// Filter results to return all the model versions created before this time.
    public var createdAtEndTime: Foundation.Date?
    /// Filter results to return all the model versions created after this time.
    public var createdAtStartTime: Foundation.Date?
    /// Specifies the highest version of the model to return in the list.
    public var maxModelVersion: Swift.Int?
    /// Specifies the maximum number of machine learning model versions to list.
    public var maxResults: Swift.Int?
    /// Specifies the lowest version of the model to return in the list.
    public var minModelVersion: Swift.Int?
    /// Then name of the machine learning model for which the model versions are to be listed.
    /// This member is required.
    public var modelName: Swift.String?
    /// If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the NextToken field in the request to list the next page of results.
    public var nextToken: Swift.String?
    /// Filter the results based on the way the model version was generated.
    public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    /// Filter the results based on the current status of the model version.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

    public init(
        createdAtEndTime: Foundation.Date? = nil,
        createdAtStartTime: Foundation.Date? = nil,
        maxModelVersion: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        minModelVersion: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
    )
    {
        self.createdAtEndTime = createdAtEndTime
        self.createdAtStartTime = createdAtStartTime
        self.maxModelVersion = maxModelVersion
        self.maxResults = maxResults
        self.minModelVersion = minModelVersion
        self.modelName = modelName
        self.nextToken = nextToken
        self.sourceType = sourceType
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Contains information about the specific model version.
    public struct ModelVersionSummary: Swift.Sendable {
        /// The time when this model version was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model that this model version is a version of.
        public var modelArn: Swift.String?
        /// The name of the model that this model version is a version of.
        public var modelName: Swift.String?
        /// Provides a quality assessment for a model that uses labels. If Lookout for Equipment determines that the model quality is poor based on training metrics, the value is POOR_QUALITY_DETECTED. Otherwise, the value is QUALITY_THRESHOLD_MET. If the model is unlabeled, the model quality can't be assessed and the value of ModelQuality is CANNOT_DETERMINE_QUALITY. In this situation, you can get a model quality assessment by adding labels to the input dataset and retraining the model. For information about improving the quality of a model, see [Best practices with Amazon Lookout for Equipment](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/best-practices.html).
        public var modelQuality: LookoutEquipmentClientTypes.ModelQuality?
        /// The version of the model.
        public var modelVersion: Swift.Int?
        /// The Amazon Resource Name (ARN) of the model version.
        public var modelVersionArn: Swift.String?
        /// Indicates how this model version was generated.
        public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
        /// The current status of the model version.
        public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            modelQuality: LookoutEquipmentClientTypes.ModelQuality? = nil,
            modelVersion: Swift.Int? = nil,
            modelVersionArn: Swift.String? = nil,
            sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
            status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.modelArn = modelArn
            self.modelName = modelName
            self.modelQuality = modelQuality
            self.modelVersion = modelVersion
            self.modelVersionArn = modelVersionArn
            self.sourceType = sourceType
            self.status = status
        }
    }
}

public struct ListModelVersionsOutput: Swift.Sendable {
    /// Provides information on the specified model version, including the created time, model and dataset ARNs, and status. If you don't supply the ModelName request parameter, or if you supply the name of a model that doesn't exist, ListModelVersions returns an empty array in ModelVersionSummaries.
    public var modelVersionSummaries: [LookoutEquipmentClientTypes.ModelVersionSummary]?
    /// If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the NextToken field in the request to list the next page of results.
    public var nextToken: Swift.String?

    public init(
        modelVersionSummaries: [LookoutEquipmentClientTypes.ModelVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelVersionSummaries = modelVersionSummaries
        self.nextToken = nextToken
    }
}

public struct ListRetrainingSchedulersInput: Swift.Sendable {
    /// Specifies the maximum number of retraining schedulers to list.
    public var maxResults: Swift.Int?
    /// Specify this field to only list retraining schedulers whose machine learning models begin with the value you specify.
    public var modelNameBeginsWith: Swift.String?
    /// If the number of results exceeds the maximum, a pagination token is returned. Use the token in the request to show the next page of retraining schedulers.
    public var nextToken: Swift.String?
    /// Specify this field to only list retraining schedulers whose status matches the value you specify.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

extension LookoutEquipmentClientTypes {

    /// Provides information about the specified retraining scheduler, including model name, status, start date, frequency, and lookback window.
    public struct RetrainingSchedulerSummary: Swift.Sendable {
        /// The number of past days of data used for retraining.
        public var lookbackWindow: Swift.String?
        /// The ARN of the model that the retraining scheduler is attached to.
        public var modelArn: Swift.String?
        /// The name of the model that the retraining scheduler is attached to.
        public var modelName: Swift.String?
        /// The frequency at which the model retraining is set. This follows the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) guidelines.
        public var retrainingFrequency: Swift.String?
        /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
        public var retrainingStartDate: Foundation.Date?
        /// The status of the retraining scheduler.
        public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

        public init(
            lookbackWindow: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            retrainingFrequency: Swift.String? = nil,
            retrainingStartDate: Foundation.Date? = nil,
            status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
        )
        {
            self.lookbackWindow = lookbackWindow
            self.modelArn = modelArn
            self.modelName = modelName
            self.retrainingFrequency = retrainingFrequency
            self.retrainingStartDate = retrainingStartDate
            self.status = status
        }
    }
}

public struct ListRetrainingSchedulersOutput: Swift.Sendable {
    /// If the number of results exceeds the maximum, this pagination token is returned. Use this token in the request to show the next page of retraining schedulers.
    public var nextToken: Swift.String?
    /// Provides information on the specified retraining scheduler, including the model name, model ARN, status, and start date.
    public var retrainingSchedulerSummaries: [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]?

    public init(
        nextToken: Swift.String? = nil,
        retrainingSchedulerSummaries: [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.retrainingSchedulerSummaries = retrainingSchedulerSummaries
    }
}

public struct ListSensorStatisticsInput: Swift.Sendable {
    /// The name of the dataset associated with the list of Sensor Statistics.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs.
    public var ingestionJobId: Swift.String?
    /// Specifies the maximum number of sensors for which to retrieve statistics.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?

    public init(
        datasetName: Swift.String? = nil,
        ingestionJobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.ingestionJobId = ingestionJobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LookoutEquipmentClientTypes {

    public enum StatisticalIssueStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noIssueDetected
        case potentialIssueDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [StatisticalIssueStatus] {
            return [
                .noIssueDetected,
                .potentialIssueDetected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noIssueDetected: return "NO_ISSUE_DETECTED"
            case .potentialIssueDetected: return "POTENTIAL_ISSUE_DETECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on categorical values in data.
    public struct CategoricalValues: Swift.Sendable {
        /// Indicates the number of categories in the data.
        public var numberOfCategory: Swift.Int?
        /// Indicates whether there is a potential data issue related to categorical values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            numberOfCategory: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.numberOfCategory = numberOfCategory
            self.status = status
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information of count and percentage.
    public struct CountPercent: Swift.Sendable {
        /// Indicates the count of occurences of the given statistic.
        /// This member is required.
        public var count: Swift.Int?
        /// Indicates the percentage of occurances of the given statistic.
        /// This member is required.
        public var percentage: Swift.Float

        public init(
            count: Swift.Int? = nil,
            percentage: Swift.Float = 0.0
        )
        {
            self.count = count
            self.percentage = percentage
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on large gaps between consecutive timestamps in data.
    public struct LargeTimestampGaps: Swift.Sendable {
        /// Indicates the size of the largest timestamp gap, in days.
        public var maxTimestampGapInDays: Swift.Int?
        /// Indicates the number of large timestamp gaps, if there are any.
        public var numberOfLargeTimestampGaps: Swift.Int?
        /// Indicates whether there is a potential data issue related to large gaps in timestamps.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            maxTimestampGapInDays: Swift.Int? = nil,
            numberOfLargeTimestampGaps: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.maxTimestampGapInDays = maxTimestampGapInDays
            self.numberOfLargeTimestampGaps = numberOfLargeTimestampGaps
            self.status = status
        }
    }
}

extension LookoutEquipmentClientTypes {

    public enum Monotonicity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case decreasing
        case increasing
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [Monotonicity] {
            return [
                .decreasing,
                .increasing,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .decreasing: return "DECREASING"
            case .increasing: return "INCREASING"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on monotonic values in the data.
    public struct MonotonicValues: Swift.Sendable {
        /// Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC.
        public var monotonicity: LookoutEquipmentClientTypes.Monotonicity?
        /// Indicates whether there is a potential data issue related to having monotonic values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            monotonicity: LookoutEquipmentClientTypes.Monotonicity? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.monotonicity = monotonicity
            self.status = status
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Entity that comprises information on operating modes in data.
    public struct MultipleOperatingModes: Swift.Sendable {
        /// Indicates whether there is a potential data issue related to having multiple operating modes.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension LookoutEquipmentClientTypes {

    /// Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor.
    public struct SensorStatisticsSummary: Swift.Sendable {
        /// Parameter that describes potential risk about whether data associated with the sensor is categorical.
        public var categoricalValues: LookoutEquipmentClientTypes.CategoricalValues?
        /// Name of the component to which the particular sensor belongs for which the statistics belong to.
        public var componentName: Swift.String?
        /// Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to.
        public var dataEndTime: Foundation.Date?
        /// Parameter that indicates whether data exists for the sensor that the statistics belong to.
        public var dataExists: Swift.Bool
        /// Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to.
        public var dataStartTime: Foundation.Date?
        /// Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to.
        public var invalidDateEntries: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to.
        public var invalidValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps.
        public var largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps?
        /// Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to.
        public var missingValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic.
        public var monotonicValues: LookoutEquipmentClientTypes.MonotonicValues?
        /// Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode.
        public var multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes?
        /// Name of the sensor that the statistics belong to.
        public var sensorName: Swift.String?

        public init(
            categoricalValues: LookoutEquipmentClientTypes.CategoricalValues? = nil,
            componentName: Swift.String? = nil,
            dataEndTime: Foundation.Date? = nil,
            dataExists: Swift.Bool = false,
            dataStartTime: Foundation.Date? = nil,
            duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidDateEntries: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps? = nil,
            missingValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            monotonicValues: LookoutEquipmentClientTypes.MonotonicValues? = nil,
            multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes? = nil,
            sensorName: Swift.String? = nil
        )
        {
            self.categoricalValues = categoricalValues
            self.componentName = componentName
            self.dataEndTime = dataEndTime
            self.dataExists = dataExists
            self.dataStartTime = dataStartTime
            self.duplicateTimestamps = duplicateTimestamps
            self.invalidDateEntries = invalidDateEntries
            self.invalidValues = invalidValues
            self.largeTimestampGaps = largeTimestampGaps
            self.missingValues = missingValues
            self.monotonicValues = monotonicValues
            self.multipleOperatingModes = multipleOperatingModes
            self.sensorName = sensorName
        }
    }
}

public struct ListSensorStatisticsOutput: Swift.Sendable {
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?
    /// Provides ingestion-based statistics regarding the specified sensor with respect to various validation types, such as whether data exists, the number and percentage of missing values, and the number and percentage of duplicate timestamps.
    public var sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]?

    public init(
        nextToken: Swift.String? = nil,
        sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.sensorStatisticsSummaries = sensorStatisticsSummaries
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource (such as the dataset or model) that is the focus of the ListTagsForResource operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// Any tags associated with the resource.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutResourcePolicyInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource for which the policy is being created.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The JSON-formatted resource policy to create.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
        self.resourcePolicy = resourcePolicy
    }
}

public struct PutResourcePolicyOutput: Swift.Sendable {
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource for which the policy was created.
    public var resourceArn: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
    }
}

public struct StartDataIngestionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being used by the data ingestion job.
    /// This member is required.
    public var datasetName: Swift.String?
    /// Specifies information for the input data for the data ingestion job, including dataset S3 location.
    /// This member is required.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.roleArn = roleArn
    }
}

public struct StartDataIngestionJobOutput: Swift.Sendable {
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// Indicates the status of the StartDataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init(
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.jobId = jobId
        self.status = status
    }
}

public struct StartInferenceSchedulerInput: Swift.Sendable {
    /// The name of the inference scheduler to be started.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

public struct StartInferenceSchedulerOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being started.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being started.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model being used by the inference scheduler.
    public var modelArn: Swift.String?
    /// The name of the machine learning model being used by the inference scheduler.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

public struct StartRetrainingSchedulerInput: Swift.Sendable {
    /// The name of the model whose retraining scheduler you want to start.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct StartRetrainingSchedulerOutput: Swift.Sendable {
    /// The ARN of the model whose retraining scheduler is being started.
    public var modelArn: Swift.String?
    /// The name of the model whose retraining scheduler is being started.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

public struct StopInferenceSchedulerInput: Swift.Sendable {
    /// The name of the inference scheduler to be stopped.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

public struct StopInferenceSchedulerOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the inference schedule being stopped.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being stopped.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model used by the inference scheduler being stopped.
    public var modelArn: Swift.String?
    /// The name of the machine learning model used by the inference scheduler being stopped.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

public struct StopRetrainingSchedulerInput: Swift.Sendable {
    /// The name of the model whose retraining scheduler you want to stop.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct StopRetrainingSchedulerOutput: Swift.Sendable {
    /// The ARN of the model whose retraining scheduler is being stopped.
    public var modelArn: Swift.String?
    /// The name of the model whose retraining scheduler is being stopped.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the specific resource to which the tag should be associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag or tags to be associated with a specific resource. Both the tag key and value are specified.
    /// This member is required.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to which the tag is currently associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the key of the tag to be removed from a specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateActiveModelVersionInput: Swift.Sendable {
    /// The name of the machine learning model for which the active model version is being set.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the machine learning model for which the active model version is being set.
    /// This member is required.
    public var modelVersion: Swift.Int?

    public init(
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil
    )
    {
        self.modelName = modelName
        self.modelVersion = modelVersion
    }
}

public struct UpdateActiveModelVersionOutput: Swift.Sendable {
    /// The version that is currently active of the machine learning model for which the active model version was set.
    public var currentActiveVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the machine learning model version that is the current active model version.
    public var currentActiveVersionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model for which the active model version was set.
    public var modelArn: Swift.String?
    /// The name of the machine learning model for which the active model version was set.
    public var modelName: Swift.String?
    /// The previous version that was active of the machine learning model for which the active model version was set.
    public var previousActiveVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the machine learning model version that was the previous active model version.
    public var previousActiveVersionArn: Swift.String?

    public init(
        currentActiveVersion: Swift.Int? = nil,
        currentActiveVersionArn: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        previousActiveVersion: Swift.Int? = nil,
        previousActiveVersionArn: Swift.String? = nil
    )
    {
        self.currentActiveVersion = currentActiveVersion
        self.currentActiveVersionArn = currentActiveVersionArn
        self.modelArn = modelArn
        self.modelName = modelName
        self.previousActiveVersion = previousActiveVersion
        self.previousActiveVersionArn = previousActiveVersionArn
    }
}

public struct UpdateInferenceSchedulerInput: Swift.Sendable {
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results from the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler to be updated.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler.
    public var roleArn: Swift.String?

    public init(
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.roleArn = roleArn
    }
}

public struct UpdateLabelGroupInput: Swift.Sendable {
    /// Updates the code indicating the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// The name of the label group to be updated.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
    }
}

public struct UpdateModelInput: Swift.Sendable {
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The Amazon S3 location where you want Amazon Lookout for Equipment to save the pointwise model diagnostics for the model. You must also specify the RoleArn request parameter.
    public var modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?
    /// The name of the model to update.
    /// This member is required.
    public var modelName: Swift.String?
    /// The ARN of the model to update.
    public var roleArn: Swift.String?

    public init(
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelDiagnosticsOutputConfiguration: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelDiagnosticsOutputConfiguration = modelDiagnosticsOutputConfiguration
        self.modelName = modelName
        self.roleArn = roleArn
    }
}

public struct UpdateRetrainingSchedulerInput: Swift.Sendable {
    /// The number of past days of data that will be used for retraining.
    public var lookbackWindow: Swift.String?
    /// The name of the model whose retraining scheduler you want to update.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates how the service will use new models. In MANAGED mode, new models will automatically be used for inference if they have better performance than the current model. In MANUAL mode, the new models will not be used [until they are manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// This parameter uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) standard to set the frequency at which you want retraining to occur in terms of Years, Months, and/or Days (note: other parameters like Time are not currently supported). The minimum value is 30 days (P30D) and the maximum value is 1 year (P1Y). For example, the following values are valid:
    ///
    /// * P3M15D – Every 3 months and 15 days
    ///
    /// * P2M – Every 2 months
    ///
    /// * P150D – Every 150 days
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: Foundation.Date?

    public init(
        lookbackWindow: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: Foundation.Date? = nil
    )
    {
        self.lookbackWindow = lookbackWindow
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
    }
}

extension CreateDatasetInput {

    static func urlPathProvider(_ value: CreateDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInferenceSchedulerInput {

    static func urlPathProvider(_ value: CreateInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLabelInput {

    static func urlPathProvider(_ value: CreateLabelInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLabelGroupInput {

    static func urlPathProvider(_ value: CreateLabelGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelInput {

    static func urlPathProvider(_ value: CreateModelInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRetrainingSchedulerInput {

    static func urlPathProvider(_ value: CreateRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDatasetInput {

    static func urlPathProvider(_ value: DeleteDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInferenceSchedulerInput {

    static func urlPathProvider(_ value: DeleteInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLabelInput {

    static func urlPathProvider(_ value: DeleteLabelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLabelGroupInput {

    static func urlPathProvider(_ value: DeleteLabelGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelInput {

    static func urlPathProvider(_ value: DeleteModelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRetrainingSchedulerInput {

    static func urlPathProvider(_ value: DeleteRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataIngestionJobInput {

    static func urlPathProvider(_ value: DescribeDataIngestionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDatasetInput {

    static func urlPathProvider(_ value: DescribeDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInferenceSchedulerInput {

    static func urlPathProvider(_ value: DescribeInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLabelInput {

    static func urlPathProvider(_ value: DescribeLabelInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLabelGroupInput {

    static func urlPathProvider(_ value: DescribeLabelGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelInput {

    static func urlPathProvider(_ value: DescribeModelInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelVersionInput {

    static func urlPathProvider(_ value: DescribeModelVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourcePolicyInput {

    static func urlPathProvider(_ value: DescribeResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRetrainingSchedulerInput {

    static func urlPathProvider(_ value: DescribeRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension ImportDatasetInput {

    static func urlPathProvider(_ value: ImportDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension ImportModelVersionInput {

    static func urlPathProvider(_ value: ImportModelVersionInput) -> Swift.String? {
        return "/"
    }
}

extension ListDataIngestionJobsInput {

    static func urlPathProvider(_ value: ListDataIngestionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDatasetsInput {

    static func urlPathProvider(_ value: ListDatasetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceEventsInput {

    static func urlPathProvider(_ value: ListInferenceEventsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceExecutionsInput {

    static func urlPathProvider(_ value: ListInferenceExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceSchedulersInput {

    static func urlPathProvider(_ value: ListInferenceSchedulersInput) -> Swift.String? {
        return "/"
    }
}

extension ListLabelGroupsInput {

    static func urlPathProvider(_ value: ListLabelGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLabelsInput {

    static func urlPathProvider(_ value: ListLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelsInput {

    static func urlPathProvider(_ value: ListModelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelVersionsInput {

    static func urlPathProvider(_ value: ListModelVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRetrainingSchedulersInput {

    static func urlPathProvider(_ value: ListRetrainingSchedulersInput) -> Swift.String? {
        return "/"
    }
}

extension ListSensorStatisticsInput {

    static func urlPathProvider(_ value: ListSensorStatisticsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension StartDataIngestionJobInput {

    static func urlPathProvider(_ value: StartDataIngestionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartInferenceSchedulerInput {

    static func urlPathProvider(_ value: StartInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension StartRetrainingSchedulerInput {

    static func urlPathProvider(_ value: StartRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension StopInferenceSchedulerInput {

    static func urlPathProvider(_ value: StopInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension StopRetrainingSchedulerInput {

    static func urlPathProvider(_ value: StopRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateActiveModelVersionInput {

    static func urlPathProvider(_ value: UpdateActiveModelVersionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateInferenceSchedulerInput {

    static func urlPathProvider(_ value: UpdateInferenceSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateLabelGroupInput {

    static func urlPathProvider(_ value: UpdateLabelGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateModelInput {

    static func urlPathProvider(_ value: UpdateModelInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRetrainingSchedulerInput {

    static func urlPathProvider(_ value: UpdateRetrainingSchedulerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDatasetInput {

    static func write(value: CreateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DatasetName"].write(value.datasetName)
        try writer["DatasetSchema"].write(value.datasetSchema, with: LookoutEquipmentClientTypes.DatasetSchema.write(value:to:))
        try writer["ServerSideKmsKeyId"].write(value.serverSideKmsKeyId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateInferenceSchedulerInput {

    static func write(value: CreateInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DataDelayOffsetInMinutes"].write(value.dataDelayOffsetInMinutes)
        try writer["DataInputConfiguration"].write(value.dataInputConfiguration, with: LookoutEquipmentClientTypes.InferenceInputConfiguration.write(value:to:))
        try writer["DataOutputConfiguration"].write(value.dataOutputConfiguration, with: LookoutEquipmentClientTypes.InferenceOutputConfiguration.write(value:to:))
        try writer["DataUploadFrequency"].write(value.dataUploadFrequency)
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
        try writer["ModelName"].write(value.modelName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["ServerSideKmsKeyId"].write(value.serverSideKmsKeyId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateLabelInput {

    static func write(value: CreateLabelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Equipment"].write(value.equipment)
        try writer["FaultCode"].write(value.faultCode)
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["Notes"].write(value.notes)
        try writer["Rating"].write(value.rating)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension CreateLabelGroupInput {

    static func write(value: CreateLabelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["FaultCodes"].writeList(value.faultCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateModelInput {

    static func write(value: CreateModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DataPreProcessingConfiguration"].write(value.dataPreProcessingConfiguration, with: LookoutEquipmentClientTypes.DataPreProcessingConfiguration.write(value:to:))
        try writer["DatasetName"].write(value.datasetName)
        try writer["DatasetSchema"].write(value.datasetSchema, with: LookoutEquipmentClientTypes.DatasetSchema.write(value:to:))
        try writer["EvaluationDataEndTime"].writeTimestamp(value.evaluationDataEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EvaluationDataStartTime"].writeTimestamp(value.evaluationDataStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LabelsInputConfiguration"].write(value.labelsInputConfiguration, with: LookoutEquipmentClientTypes.LabelsInputConfiguration.write(value:to:))
        try writer["ModelDiagnosticsOutputConfiguration"].write(value.modelDiagnosticsOutputConfiguration, with: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["OffCondition"].write(value.offCondition)
        try writer["RoleArn"].write(value.roleArn)
        try writer["ServerSideKmsKeyId"].write(value.serverSideKmsKeyId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingDataEndTime"].writeTimestamp(value.trainingDataEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["TrainingDataStartTime"].writeTimestamp(value.trainingDataStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension CreateRetrainingSchedulerInput {

    static func write(value: CreateRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["LookbackWindow"].write(value.lookbackWindow)
        try writer["ModelName"].write(value.modelName)
        try writer["PromoteMode"].write(value.promoteMode)
        try writer["RetrainingFrequency"].write(value.retrainingFrequency)
        try writer["RetrainingStartDate"].writeTimestamp(value.retrainingStartDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension DeleteDatasetInput {

    static func write(value: DeleteDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetName"].write(value.datasetName)
    }
}

extension DeleteInferenceSchedulerInput {

    static func write(value: DeleteInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
    }
}

extension DeleteLabelInput {

    static func write(value: DeleteLabelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["LabelId"].write(value.labelId)
    }
}

extension DeleteLabelGroupInput {

    static func write(value: DeleteLabelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupName"].write(value.labelGroupName)
    }
}

extension DeleteModelInput {

    static func write(value: DeleteModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeleteRetrainingSchedulerInput {

    static func write(value: DeleteRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension DescribeDataIngestionJobInput {

    static func write(value: DescribeDataIngestionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeDatasetInput {

    static func write(value: DescribeDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetName"].write(value.datasetName)
    }
}

extension DescribeInferenceSchedulerInput {

    static func write(value: DescribeInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
    }
}

extension DescribeLabelInput {

    static func write(value: DescribeLabelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["LabelId"].write(value.labelId)
    }
}

extension DescribeLabelGroupInput {

    static func write(value: DescribeLabelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupName"].write(value.labelGroupName)
    }
}

extension DescribeModelInput {

    static func write(value: DescribeModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension DescribeModelVersionInput {

    static func write(value: DescribeModelVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
        try writer["ModelVersion"].write(value.modelVersion)
    }
}

extension DescribeResourcePolicyInput {

    static func write(value: DescribeResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DescribeRetrainingSchedulerInput {

    static func write(value: DescribeRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension ImportDatasetInput {

    static func write(value: ImportDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DatasetName"].write(value.datasetName)
        try writer["ServerSideKmsKeyId"].write(value.serverSideKmsKeyId)
        try writer["SourceDatasetArn"].write(value.sourceDatasetArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ImportModelVersionInput {

    static func write(value: ImportModelVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DatasetName"].write(value.datasetName)
        try writer["InferenceDataImportStrategy"].write(value.inferenceDataImportStrategy)
        try writer["LabelsInputConfiguration"].write(value.labelsInputConfiguration, with: LookoutEquipmentClientTypes.LabelsInputConfiguration.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["ServerSideKmsKeyId"].write(value.serverSideKmsKeyId)
        try writer["SourceModelVersionArn"].write(value.sourceModelVersionArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListDataIngestionJobsInput {

    static func write(value: ListDataIngestionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetName"].write(value.datasetName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListDatasetsInput {

    static func write(value: ListDatasetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetNameBeginsWith"].write(value.datasetNameBeginsWith)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListInferenceEventsInput {

    static func write(value: ListInferenceEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
        try writer["IntervalEndTime"].writeTimestamp(value.intervalEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["IntervalStartTime"].writeTimestamp(value.intervalStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListInferenceExecutionsInput {

    static func write(value: ListInferenceExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataEndTimeBefore"].writeTimestamp(value.dataEndTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["DataStartTimeAfter"].writeTimestamp(value.dataStartTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListInferenceSchedulersInput {

    static func write(value: ListInferenceSchedulersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerNameBeginsWith"].write(value.inferenceSchedulerNameBeginsWith)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelName"].write(value.modelName)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListLabelGroupsInput {

    static func write(value: ListLabelGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupNameBeginsWith"].write(value.labelGroupNameBeginsWith)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListLabelsInput {

    static func write(value: ListLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Equipment"].write(value.equipment)
        try writer["FaultCode"].write(value.faultCode)
        try writer["IntervalEndTime"].writeTimestamp(value.intervalEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["IntervalStartTime"].writeTimestamp(value.intervalStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListModelsInput {

    static func write(value: ListModelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetNameBeginsWith"].write(value.datasetNameBeginsWith)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelNameBeginsWith"].write(value.modelNameBeginsWith)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListModelVersionsInput {

    static func write(value: ListModelVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAtEndTime"].writeTimestamp(value.createdAtEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedAtStartTime"].writeTimestamp(value.createdAtStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxModelVersion"].write(value.maxModelVersion)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MinModelVersion"].write(value.minModelVersion)
        try writer["ModelName"].write(value.modelName)
        try writer["NextToken"].write(value.nextToken)
        try writer["SourceType"].write(value.sourceType)
        try writer["Status"].write(value.status)
    }
}

extension ListRetrainingSchedulersInput {

    static func write(value: ListRetrainingSchedulersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelNameBeginsWith"].write(value.modelNameBeginsWith)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListSensorStatisticsInput {

    static func write(value: ListSensorStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetName"].write(value.datasetName)
        try writer["IngestionJobId"].write(value.ingestionJobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["PolicyRevisionId"].write(value.policyRevisionId)
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["ResourcePolicy"].write(value.resourcePolicy)
    }
}

extension StartDataIngestionJobInput {

    static func write(value: StartDataIngestionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DatasetName"].write(value.datasetName)
        try writer["IngestionInputConfiguration"].write(value.ingestionInputConfiguration, with: LookoutEquipmentClientTypes.IngestionInputConfiguration.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension StartInferenceSchedulerInput {

    static func write(value: StartInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
    }
}

extension StartRetrainingSchedulerInput {

    static func write(value: StartRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension StopInferenceSchedulerInput {

    static func write(value: StopInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
    }
}

extension StopRetrainingSchedulerInput {

    static func write(value: StopRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: LookoutEquipmentClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateActiveModelVersionInput {

    static func write(value: UpdateActiveModelVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
        try writer["ModelVersion"].write(value.modelVersion)
    }
}

extension UpdateInferenceSchedulerInput {

    static func write(value: UpdateInferenceSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataDelayOffsetInMinutes"].write(value.dataDelayOffsetInMinutes)
        try writer["DataInputConfiguration"].write(value.dataInputConfiguration, with: LookoutEquipmentClientTypes.InferenceInputConfiguration.write(value:to:))
        try writer["DataOutputConfiguration"].write(value.dataOutputConfiguration, with: LookoutEquipmentClientTypes.InferenceOutputConfiguration.write(value:to:))
        try writer["DataUploadFrequency"].write(value.dataUploadFrequency)
        try writer["InferenceSchedulerName"].write(value.inferenceSchedulerName)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateLabelGroupInput {

    static func write(value: UpdateLabelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FaultCodes"].writeList(value.faultCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelGroupName"].write(value.labelGroupName)
    }
}

extension UpdateModelInput {

    static func write(value: UpdateModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelsInputConfiguration"].write(value.labelsInputConfiguration, with: LookoutEquipmentClientTypes.LabelsInputConfiguration.write(value:to:))
        try writer["ModelDiagnosticsOutputConfiguration"].write(value.modelDiagnosticsOutputConfiguration, with: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateRetrainingSchedulerInput {

    static func write(value: UpdateRetrainingSchedulerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LookbackWindow"].write(value.lookbackWindow)
        try writer["ModelName"].write(value.modelName)
        try writer["PromoteMode"].write(value.promoteMode)
        try writer["RetrainingFrequency"].write(value.retrainingFrequency)
        try writer["RetrainingStartDate"].writeTimestamp(value.retrainingStartDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension CreateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetOutput()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension CreateInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInferenceSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInferenceSchedulerOutput()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.modelQuality = try reader["ModelQuality"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension CreateLabelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLabelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLabelOutput()
        value.labelId = try reader["LabelId"].readIfPresent()
        return value
    }
}

extension CreateLabelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLabelGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLabelGroupOutput()
        value.labelGroupArn = try reader["LabelGroupArn"].readIfPresent()
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        return value
    }
}

extension CreateModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension CreateRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRetrainingSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRetrainingSchedulerOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatasetOutput {
        return DeleteDatasetOutput()
    }
}

extension DeleteInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInferenceSchedulerOutput {
        return DeleteInferenceSchedulerOutput()
    }
}

extension DeleteLabelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLabelOutput {
        return DeleteLabelOutput()
    }
}

extension DeleteLabelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLabelGroupOutput {
        return DeleteLabelGroupOutput()
    }
}

extension DeleteModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelOutput {
        return DeleteModelOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRetrainingSchedulerOutput {
        return DeleteRetrainingSchedulerOutput()
    }
}

extension DescribeDataIngestionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataIngestionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataIngestionJobOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataEndTime = try reader["DataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataQualitySummary = try reader["DataQualitySummary"].readIfPresent(with: LookoutEquipmentClientTypes.DataQualitySummary.read(from:))
        value.dataStartTime = try reader["DataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.failedReason = try reader["FailedReason"].readIfPresent()
        value.ingestedDataSize = try reader["IngestedDataSize"].readIfPresent()
        value.ingestedFilesSummary = try reader["IngestedFilesSummary"].readIfPresent(with: LookoutEquipmentClientTypes.IngestedFilesSummary.read(from:))
        value.ingestionInputConfiguration = try reader["IngestionInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.IngestionInputConfiguration.read(from:))
        value.jobId = try reader["JobId"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.sourceDatasetArn = try reader["SourceDatasetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusDetail = try reader["StatusDetail"].readIfPresent()
        return value
    }
}

extension DescribeDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDatasetOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataEndTime = try reader["DataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataQualitySummary = try reader["DataQualitySummary"].readIfPresent(with: LookoutEquipmentClientTypes.DataQualitySummary.read(from:))
        value.dataStartTime = try reader["DataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.ingestedFilesSummary = try reader["IngestedFilesSummary"].readIfPresent(with: LookoutEquipmentClientTypes.IngestedFilesSummary.read(from:))
        value.ingestionInputConfiguration = try reader["IngestionInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.IngestionInputConfiguration.read(from:))
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.schema = try reader["Schema"].readIfPresent()
        value.serverSideKmsKeyId = try reader["ServerSideKmsKeyId"].readIfPresent()
        value.sourceDatasetArn = try reader["SourceDatasetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DescribeInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInferenceSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInferenceSchedulerOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataDelayOffsetInMinutes = try reader["DataDelayOffsetInMinutes"].readIfPresent()
        value.dataInputConfiguration = try reader["DataInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceInputConfiguration.read(from:))
        value.dataOutputConfiguration = try reader["DataOutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceOutputConfiguration.read(from:))
        value.dataUploadFrequency = try reader["DataUploadFrequency"].readIfPresent()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.latestInferenceResult = try reader["LatestInferenceResult"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.serverSideKmsKeyId = try reader["ServerSideKmsKeyId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeLabelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLabelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLabelOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.equipment = try reader["Equipment"].readIfPresent()
        value.faultCode = try reader["FaultCode"].readIfPresent()
        value.labelGroupArn = try reader["LabelGroupArn"].readIfPresent()
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        value.labelId = try reader["LabelId"].readIfPresent()
        value.notes = try reader["Notes"].readIfPresent()
        value.rating = try reader["Rating"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeLabelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLabelGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLabelGroupOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.faultCodes = try reader["FaultCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.labelGroupArn = try reader["LabelGroupArn"].readIfPresent()
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelOutput()
        value.accumulatedInferenceDataEndTime = try reader["AccumulatedInferenceDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.accumulatedInferenceDataStartTime = try reader["AccumulatedInferenceDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.activeModelVersion = try reader["ActiveModelVersion"].readIfPresent()
        value.activeModelVersionArn = try reader["ActiveModelVersionArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPreProcessingConfiguration = try reader["DataPreProcessingConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.DataPreProcessingConfiguration.read(from:))
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.evaluationDataEndTime = try reader["EvaluationDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.evaluationDataStartTime = try reader["EvaluationDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failedReason = try reader["FailedReason"].readIfPresent()
        value.importJobEndTime = try reader["ImportJobEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importJobStartTime = try reader["ImportJobStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.labelsInputConfiguration = try reader["LabelsInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.LabelsInputConfiguration.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestScheduledRetrainingAvailableDataInDays = try reader["LatestScheduledRetrainingAvailableDataInDays"].readIfPresent()
        value.latestScheduledRetrainingFailedReason = try reader["LatestScheduledRetrainingFailedReason"].readIfPresent()
        value.latestScheduledRetrainingModelVersion = try reader["LatestScheduledRetrainingModelVersion"].readIfPresent()
        value.latestScheduledRetrainingStartTime = try reader["LatestScheduledRetrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestScheduledRetrainingStatus = try reader["LatestScheduledRetrainingStatus"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelDiagnosticsOutputConfiguration = try reader["ModelDiagnosticsOutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration.read(from:))
        value.modelMetrics = try reader["ModelMetrics"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelQuality = try reader["ModelQuality"].readIfPresent()
        value.modelVersionActivatedAt = try reader["ModelVersionActivatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextScheduledRetrainingStartDate = try reader["NextScheduledRetrainingStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.offCondition = try reader["OffCondition"].readIfPresent()
        value.previousActiveModelVersion = try reader["PreviousActiveModelVersion"].readIfPresent()
        value.previousActiveModelVersionArn = try reader["PreviousActiveModelVersionArn"].readIfPresent()
        value.previousModelVersionActivatedAt = try reader["PreviousModelVersionActivatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.priorModelMetrics = try reader["PriorModelMetrics"].readIfPresent()
        value.retrainingSchedulerStatus = try reader["RetrainingSchedulerStatus"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.schema = try reader["Schema"].readIfPresent()
        value.serverSideKmsKeyId = try reader["ServerSideKmsKeyId"].readIfPresent()
        value.sourceModelVersionArn = try reader["SourceModelVersionArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.trainingDataEndTime = try reader["TrainingDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingDataStartTime = try reader["TrainingDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingExecutionEndTime = try reader["TrainingExecutionEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingExecutionStartTime = try reader["TrainingExecutionStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeModelVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelVersionOutput()
        value.autoPromotionResult = try reader["AutoPromotionResult"].readIfPresent()
        value.autoPromotionResultReason = try reader["AutoPromotionResultReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPreProcessingConfiguration = try reader["DataPreProcessingConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.DataPreProcessingConfiguration.read(from:))
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.evaluationDataEndTime = try reader["EvaluationDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.evaluationDataStartTime = try reader["EvaluationDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failedReason = try reader["FailedReason"].readIfPresent()
        value.importJobEndTime = try reader["ImportJobEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importJobStartTime = try reader["ImportJobStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importedDataSizeInBytes = try reader["ImportedDataSizeInBytes"].readIfPresent()
        value.labelsInputConfiguration = try reader["LabelsInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.LabelsInputConfiguration.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelDiagnosticsOutputConfiguration = try reader["ModelDiagnosticsOutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration.read(from:))
        value.modelDiagnosticsResultsObject = try reader["ModelDiagnosticsResultsObject"].readIfPresent(with: LookoutEquipmentClientTypes.S3Object.read(from:))
        value.modelMetrics = try reader["ModelMetrics"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelQuality = try reader["ModelQuality"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.modelVersionArn = try reader["ModelVersionArn"].readIfPresent()
        value.offCondition = try reader["OffCondition"].readIfPresent()
        value.priorModelMetrics = try reader["PriorModelMetrics"].readIfPresent()
        value.retrainingAvailableDataInDays = try reader["RetrainingAvailableDataInDays"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.schema = try reader["Schema"].readIfPresent()
        value.serverSideKmsKeyId = try reader["ServerSideKmsKeyId"].readIfPresent()
        value.sourceModelVersionArn = try reader["SourceModelVersionArn"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.trainingDataEndTime = try reader["TrainingDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingDataStartTime = try reader["TrainingDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingExecutionEndTime = try reader["TrainingExecutionEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingExecutionStartTime = try reader["TrainingExecutionStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePolicyOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent()
        return value
    }
}

extension DescribeRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRetrainingSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRetrainingSchedulerOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lookbackWindow = try reader["LookbackWindow"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.promoteMode = try reader["PromoteMode"].readIfPresent()
        value.retrainingFrequency = try reader["RetrainingFrequency"].readIfPresent()
        value.retrainingStartDate = try reader["RetrainingStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ImportDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportDatasetOutput()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ImportModelVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportModelVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportModelVersionOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.modelVersionArn = try reader["ModelVersionArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ListDataIngestionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataIngestionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataIngestionJobsOutput()
        value.dataIngestionJobSummaries = try reader["DataIngestionJobSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.DataIngestionJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetsOutput()
        value.datasetSummaries = try reader["DatasetSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.DatasetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceEventsOutput()
        value.inferenceEventSummaries = try reader["InferenceEventSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.InferenceEventSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceExecutionsOutput()
        value.inferenceExecutionSummaries = try reader["InferenceExecutionSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.InferenceExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceSchedulersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceSchedulersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceSchedulersOutput()
        value.inferenceSchedulerSummaries = try reader["InferenceSchedulerSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.InferenceSchedulerSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLabelGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLabelGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLabelGroupsOutput()
        value.labelGroupSummaries = try reader["LabelGroupSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.LabelGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLabelsOutput()
        value.labelSummaries = try reader["LabelSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.LabelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelsOutput()
        value.modelSummaries = try reader["ModelSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.ModelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelVersionsOutput()
        value.modelVersionSummaries = try reader["ModelVersionSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.ModelVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListRetrainingSchedulersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRetrainingSchedulersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRetrainingSchedulersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.retrainingSchedulerSummaries = try reader["RetrainingSchedulerSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.RetrainingSchedulerSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSensorStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSensorStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSensorStatisticsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.sensorStatisticsSummaries = try reader["SensorStatisticsSummaries"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.SensorStatisticsSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension StartDataIngestionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDataIngestionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDataIngestionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StartInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInferenceSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartInferenceSchedulerOutput()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StartRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartRetrainingSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartRetrainingSchedulerOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StopInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopInferenceSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopInferenceSchedulerOutput()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension StopRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopRetrainingSchedulerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopRetrainingSchedulerOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateActiveModelVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateActiveModelVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateActiveModelVersionOutput()
        value.currentActiveVersion = try reader["CurrentActiveVersion"].readIfPresent()
        value.currentActiveVersionArn = try reader["CurrentActiveVersionArn"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.previousActiveVersion = try reader["PreviousActiveVersion"].readIfPresent()
        value.previousActiveVersionArn = try reader["PreviousActiveVersionArn"].readIfPresent()
        return value
    }
}

extension UpdateInferenceSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInferenceSchedulerOutput {
        return UpdateInferenceSchedulerOutput()
    }
}

extension UpdateLabelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateLabelGroupOutput {
        return UpdateLabelGroupOutput()
    }
}

extension UpdateModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateModelOutput {
        return UpdateModelOutput()
    }
}

extension UpdateRetrainingSchedulerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRetrainingSchedulerOutput {
        return UpdateRetrainingSchedulerOutput()
    }
}

enum CreateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLabelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLabelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLabelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLabelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataIngestionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLabelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLabelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportModelVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataIngestionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceSchedulersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLabelGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRetrainingSchedulersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSensorStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDataIngestionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateActiveModelVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInferenceSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateLabelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRetrainingSchedulerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LookoutEquipmentClientTypes.IngestionInputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.IngestionInputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3InputConfiguration"].write(value.s3InputConfiguration, with: LookoutEquipmentClientTypes.IngestionS3InputConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.IngestionInputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.IngestionInputConfiguration()
        value.s3InputConfiguration = try reader["S3InputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.IngestionS3InputConfiguration.read(from:))
        return value
    }
}

extension LookoutEquipmentClientTypes.IngestionS3InputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.IngestionS3InputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["KeyPattern"].write(value.keyPattern)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.IngestionS3InputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.IngestionS3InputConfiguration()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.keyPattern = try reader["KeyPattern"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.DataQualitySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.DataQualitySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.DataQualitySummary()
        value.insufficientSensorData = try reader["InsufficientSensorData"].readIfPresent(with: LookoutEquipmentClientTypes.InsufficientSensorData.read(from:))
        value.missingSensorData = try reader["MissingSensorData"].readIfPresent(with: LookoutEquipmentClientTypes.MissingSensorData.read(from:))
        value.invalidSensorData = try reader["InvalidSensorData"].readIfPresent(with: LookoutEquipmentClientTypes.InvalidSensorData.read(from:))
        value.unsupportedTimestamps = try reader["UnsupportedTimestamps"].readIfPresent(with: LookoutEquipmentClientTypes.UnsupportedTimestamps.read(from:))
        value.duplicateTimestamps = try reader["DuplicateTimestamps"].readIfPresent(with: LookoutEquipmentClientTypes.DuplicateTimestamps.read(from:))
        return value
    }
}

extension LookoutEquipmentClientTypes.DuplicateTimestamps {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.DuplicateTimestamps {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.DuplicateTimestamps()
        value.totalNumberOfDuplicateTimestamps = try reader["TotalNumberOfDuplicateTimestamps"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.UnsupportedTimestamps {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.UnsupportedTimestamps {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.UnsupportedTimestamps()
        value.totalNumberOfUnsupportedTimestamps = try reader["TotalNumberOfUnsupportedTimestamps"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.InvalidSensorData {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InvalidSensorData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InvalidSensorData()
        value.affectedSensorCount = try reader["AffectedSensorCount"].readIfPresent() ?? 0
        value.totalNumberOfInvalidValues = try reader["TotalNumberOfInvalidValues"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.MissingSensorData {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.MissingSensorData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.MissingSensorData()
        value.affectedSensorCount = try reader["AffectedSensorCount"].readIfPresent() ?? 0
        value.totalNumberOfMissingValues = try reader["TotalNumberOfMissingValues"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.InsufficientSensorData {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InsufficientSensorData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InsufficientSensorData()
        value.missingCompleteSensorData = try reader["MissingCompleteSensorData"].readIfPresent(with: LookoutEquipmentClientTypes.MissingCompleteSensorData.read(from:))
        value.sensorsWithShortDateRange = try reader["SensorsWithShortDateRange"].readIfPresent(with: LookoutEquipmentClientTypes.SensorsWithShortDateRange.read(from:))
        return value
    }
}

extension LookoutEquipmentClientTypes.SensorsWithShortDateRange {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.SensorsWithShortDateRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.SensorsWithShortDateRange()
        value.affectedSensorCount = try reader["AffectedSensorCount"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.MissingCompleteSensorData {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.MissingCompleteSensorData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.MissingCompleteSensorData()
        value.affectedSensorCount = try reader["AffectedSensorCount"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.IngestedFilesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.IngestedFilesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.IngestedFilesSummary()
        value.totalNumberOfFiles = try reader["TotalNumberOfFiles"].readIfPresent() ?? 0
        value.ingestedNumberOfFiles = try reader["IngestedNumberOfFiles"].readIfPresent() ?? 0
        value.discardedFiles = try reader["DiscardedFiles"].readListIfPresent(memberReadingClosure: LookoutEquipmentClientTypes.S3Object.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LookoutEquipmentClientTypes.S3Object {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.S3Object {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.S3Object()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.key = try reader["Key"].readIfPresent() ?? ""
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceInputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.InferenceInputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceInputNameConfiguration"].write(value.inferenceInputNameConfiguration, with: LookoutEquipmentClientTypes.InferenceInputNameConfiguration.write(value:to:))
        try writer["InputTimeZoneOffset"].write(value.inputTimeZoneOffset)
        try writer["S3InputConfiguration"].write(value.s3InputConfiguration, with: LookoutEquipmentClientTypes.InferenceS3InputConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceInputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceInputConfiguration()
        value.s3InputConfiguration = try reader["S3InputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceS3InputConfiguration.read(from:))
        value.inputTimeZoneOffset = try reader["InputTimeZoneOffset"].readIfPresent()
        value.inferenceInputNameConfiguration = try reader["InferenceInputNameConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceInputNameConfiguration.read(from:))
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceInputNameConfiguration {

    static func write(value: LookoutEquipmentClientTypes.InferenceInputNameConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComponentTimestampDelimiter"].write(value.componentTimestampDelimiter)
        try writer["TimestampFormat"].write(value.timestampFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceInputNameConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceInputNameConfiguration()
        value.timestampFormat = try reader["TimestampFormat"].readIfPresent()
        value.componentTimestampDelimiter = try reader["ComponentTimestampDelimiter"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceS3InputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.InferenceS3InputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceS3InputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceS3InputConfiguration()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceOutputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.InferenceOutputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputConfiguration"].write(value.s3OutputConfiguration, with: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceOutputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceOutputConfiguration()
        value.s3OutputConfiguration = try reader["S3OutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceS3OutputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceS3OutputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceS3OutputConfiguration()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.LabelsInputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.LabelsInputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelGroupName"].write(value.labelGroupName)
        try writer["S3InputConfiguration"].write(value.s3InputConfiguration, with: LookoutEquipmentClientTypes.LabelsS3InputConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.LabelsInputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.LabelsInputConfiguration()
        value.s3InputConfiguration = try reader["S3InputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.LabelsS3InputConfiguration.read(from:))
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.LabelsS3InputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.LabelsS3InputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.LabelsS3InputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.LabelsS3InputConfiguration()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.DataPreProcessingConfiguration {

    static func write(value: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TargetSamplingRate"].write(value.targetSamplingRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.DataPreProcessingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.DataPreProcessingConfiguration()
        value.targetSamplingRate = try reader["TargetSamplingRate"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputConfiguration"].write(value.s3OutputConfiguration, with: LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration()
        value.s3OutputConfiguration = try reader["S3OutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration {

    static func write(value: LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.ModelDiagnosticsS3OutputConfiguration()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.DataIngestionJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.DataIngestionJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.DataIngestionJobSummary()
        value.jobId = try reader["JobId"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.ingestionInputConfiguration = try reader["IngestionInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.IngestionInputConfiguration.read(from:))
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.DatasetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.DatasetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.DatasetSummary()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceEventSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceEventSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceEventSummary()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.eventStartTime = try reader["EventStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventEndTime = try reader["EventEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.diagnostics = try reader["Diagnostics"].readIfPresent()
        value.eventDurationInSeconds = try reader["EventDurationInSeconds"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceExecutionSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.scheduledStartTime = try reader["ScheduledStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataStartTime = try reader["DataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataEndTime = try reader["DataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataInputConfiguration = try reader["DataInputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceInputConfiguration.read(from:))
        value.dataOutputConfiguration = try reader["DataOutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.InferenceOutputConfiguration.read(from:))
        value.customerResultObject = try reader["CustomerResultObject"].readIfPresent(with: LookoutEquipmentClientTypes.S3Object.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.failedReason = try reader["FailedReason"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.modelVersionArn = try reader["ModelVersionArn"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.InferenceSchedulerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.InferenceSchedulerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.InferenceSchedulerSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.inferenceSchedulerName = try reader["InferenceSchedulerName"].readIfPresent()
        value.inferenceSchedulerArn = try reader["InferenceSchedulerArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.dataDelayOffsetInMinutes = try reader["DataDelayOffsetInMinutes"].readIfPresent()
        value.dataUploadFrequency = try reader["DataUploadFrequency"].readIfPresent()
        value.latestInferenceResult = try reader["LatestInferenceResult"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.LabelGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.LabelGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.LabelGroupSummary()
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        value.labelGroupArn = try reader["LabelGroupArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LookoutEquipmentClientTypes.LabelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.LabelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.LabelSummary()
        value.labelGroupName = try reader["LabelGroupName"].readIfPresent()
        value.labelId = try reader["LabelId"].readIfPresent()
        value.labelGroupArn = try reader["LabelGroupArn"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rating = try reader["Rating"].readIfPresent()
        value.faultCode = try reader["FaultCode"].readIfPresent()
        value.equipment = try reader["Equipment"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LookoutEquipmentClientTypes.ModelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.ModelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.ModelSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.activeModelVersion = try reader["ActiveModelVersion"].readIfPresent()
        value.activeModelVersionArn = try reader["ActiveModelVersionArn"].readIfPresent()
        value.latestScheduledRetrainingStatus = try reader["LatestScheduledRetrainingStatus"].readIfPresent()
        value.latestScheduledRetrainingModelVersion = try reader["LatestScheduledRetrainingModelVersion"].readIfPresent()
        value.latestScheduledRetrainingStartTime = try reader["LatestScheduledRetrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextScheduledRetrainingStartDate = try reader["NextScheduledRetrainingStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.retrainingSchedulerStatus = try reader["RetrainingSchedulerStatus"].readIfPresent()
        value.modelDiagnosticsOutputConfiguration = try reader["ModelDiagnosticsOutputConfiguration"].readIfPresent(with: LookoutEquipmentClientTypes.ModelDiagnosticsOutputConfiguration.read(from:))
        value.modelQuality = try reader["ModelQuality"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.ModelVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.ModelVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.ModelVersionSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.modelVersionArn = try reader["ModelVersionArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.modelQuality = try reader["ModelQuality"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.RetrainingSchedulerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.RetrainingSchedulerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.RetrainingSchedulerSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.retrainingStartDate = try reader["RetrainingStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.retrainingFrequency = try reader["RetrainingFrequency"].readIfPresent()
        value.lookbackWindow = try reader["LookbackWindow"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.SensorStatisticsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.SensorStatisticsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.SensorStatisticsSummary()
        value.componentName = try reader["ComponentName"].readIfPresent()
        value.sensorName = try reader["SensorName"].readIfPresent()
        value.dataExists = try reader["DataExists"].readIfPresent() ?? false
        value.missingValues = try reader["MissingValues"].readIfPresent(with: LookoutEquipmentClientTypes.CountPercent.read(from:))
        value.invalidValues = try reader["InvalidValues"].readIfPresent(with: LookoutEquipmentClientTypes.CountPercent.read(from:))
        value.invalidDateEntries = try reader["InvalidDateEntries"].readIfPresent(with: LookoutEquipmentClientTypes.CountPercent.read(from:))
        value.duplicateTimestamps = try reader["DuplicateTimestamps"].readIfPresent(with: LookoutEquipmentClientTypes.CountPercent.read(from:))
        value.categoricalValues = try reader["CategoricalValues"].readIfPresent(with: LookoutEquipmentClientTypes.CategoricalValues.read(from:))
        value.multipleOperatingModes = try reader["MultipleOperatingModes"].readIfPresent(with: LookoutEquipmentClientTypes.MultipleOperatingModes.read(from:))
        value.largeTimestampGaps = try reader["LargeTimestampGaps"].readIfPresent(with: LookoutEquipmentClientTypes.LargeTimestampGaps.read(from:))
        value.monotonicValues = try reader["MonotonicValues"].readIfPresent(with: LookoutEquipmentClientTypes.MonotonicValues.read(from:))
        value.dataStartTime = try reader["DataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataEndTime = try reader["DataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LookoutEquipmentClientTypes.MonotonicValues {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.MonotonicValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.MonotonicValues()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.monotonicity = try reader["Monotonicity"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.LargeTimestampGaps {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.LargeTimestampGaps {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.LargeTimestampGaps()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.numberOfLargeTimestampGaps = try reader["NumberOfLargeTimestampGaps"].readIfPresent()
        value.maxTimestampGapInDays = try reader["MaxTimestampGapInDays"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.MultipleOperatingModes {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.MultipleOperatingModes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.MultipleOperatingModes()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LookoutEquipmentClientTypes.CategoricalValues {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.CategoricalValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.CategoricalValues()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.numberOfCategory = try reader["NumberOfCategory"].readIfPresent()
        return value
    }
}

extension LookoutEquipmentClientTypes.CountPercent {

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.CountPercent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.CountPercent()
        value.count = try reader["Count"].readIfPresent() ?? 0
        value.percentage = try reader["Percentage"].readIfPresent() ?? 0
        return value
    }
}

extension LookoutEquipmentClientTypes.Tag {

    static func write(value: LookoutEquipmentClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LookoutEquipmentClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LookoutEquipmentClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension LookoutEquipmentClientTypes.DatasetSchema {

    static func write(value: LookoutEquipmentClientTypes.DatasetSchema?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InlineDataSchema"].write(value.inlineDataSchema)
    }
}

public enum LookoutEquipmentClientTypes {}
