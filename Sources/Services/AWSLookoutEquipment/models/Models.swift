// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request could not be completed because you do not have access to the resource.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.CategoricalValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfCategory = "NumberOfCategory"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfCategory = self.numberOfCategory {
            try encodeContainer.encode(numberOfCategory, forKey: .numberOfCategory)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let numberOfCategoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfCategory)
        numberOfCategory = numberOfCategoryDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on categorical values in data.
    public struct CategoricalValues: Swift.Equatable {
        /// Indicates the number of categories in the data.
        public var numberOfCategory: Swift.Int?
        /// Indicates whether there is a potential data issue related to categorical values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init (
            numberOfCategory: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.numberOfCategory = numberOfCategory
            self.status = status
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request could not be completed due to a conflict with the current state of the target resource.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.CountPercent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case percentage = "Percentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if percentage != 0.0 {
            try encodeContainer.encode(percentage, forKey: .percentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let percentageDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .percentage) ?? 0.0
        percentage = percentageDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information of count and percentage.
    public struct CountPercent: Swift.Equatable {
        /// Indicates the count of occurences of the given statistic.
        /// This member is required.
        public var count: Swift.Int?
        /// Indicates the percentage of occurances of the given statistic.
        /// This member is required.
        public var percentage: Swift.Float

        public init (
            count: Swift.Int? = nil,
            percentage: Swift.Float = 0.0
        )
        {
            self.count = count
            self.percentage = percentage
        }
    }

}

extension CreateDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = self.datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDatasetInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the ingested data described in the dataset.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.status = output.status
        } else {
            self.datasetArn = nil
            self.datasetName = nil
            self.status = nil
        }
    }
}

public struct CreateDatasetOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dataset being created.
    public var datasetArn: Swift.String?
    /// The name of the dataset being created.
    public var datasetName: Swift.String?
    /// Indicates the status of the CreateDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init (
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.status = status
    }
}

struct CreateDatasetOutputResponseBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
}

extension CreateDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CreateInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInferenceSchedulerInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The interval (in minutes) of planned delay at the start of each inference segment. For example, if inference is set to run every ten minutes, the delay is set to five minutes and the time is 09:08. The inference scheduler will wake up at the configured interval (which, without a delay configured, would be 09:10) plus the additional five minute delay time (so 09:15) to check your Amazon S3 bucket. The delay provides a buffer for you to upload data at the same frequency, so that you don't have to stop and restart the scheduler when uploading new data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    /// This member is required.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
    /// This member is required.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source Amazon S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment runs inference on your data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    /// This member is required.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler being created.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The name of the previously trained ML model being used to create the inference scheduler.
    /// This member is required.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the inference scheduler.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateInferenceSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.status = nil
        }
    }
}

public struct CreateInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being created.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of inference scheduler being created.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates the status of the CreateInferenceScheduler operation.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.status = status
    }
}

struct CreateInferenceSchedulerOutputResponseBody: Swift.Equatable {
    let inferenceSchedulerArn: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension CreateInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CreateLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let faultCodes = faultCodes {
            var faultCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faultCodes)
            for faultcode0 in faultCodes {
                try faultCodesContainer.encode(faultcode0)
            }
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLabelGroupInput: Swift.Equatable {
    /// A unique identifier for the request to create a label group. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The acceptable fault codes (indicating the type of anomaly associated with the label) that can be used with this label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// Names a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Tags that provide metadata about the label group you are creating. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
        self.tags = tags
    }
}

struct CreateLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let faultCodes: [Swift.String]?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLabelGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLabelGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLabelGroupOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLabelGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateLabelGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
        } else {
            self.labelGroupArn = nil
            self.labelGroupName = nil
        }
    }
}

public struct CreateLabelGroupOutputResponse: Swift.Equatable {
    /// The ARN of the label group that you have created.
    public var labelGroupArn: Swift.String?
    /// The name of the label group that you have created. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var labelGroupName: Swift.String?

    public init (
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
    }
}

struct CreateLabelGroupOutputResponseBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
}

extension CreateLabelGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
    }
}

extension CreateLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupName = "LabelGroupName"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let notes = self.notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let rating = self.rating {
            try encodeContainer.encode(rating.rawValue, forKey: .rating)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension CreateLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLabelInput: Swift.Equatable {
    /// A unique identifier for the request to create a label. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The end time of the labeled event.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// Indicates that a label pertains to a particular piece of equipment. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var equipment: Swift.String?
    /// Provides additional information about the label. The fault code must be defined in the FaultCodes attribute of the label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The name of a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    /// This member is required.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the labeled event.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        clientToken: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupName = labelGroupName
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

struct CreateLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let rating: LookoutEquipmentClientTypes.LabelRating?
    let faultCode: Swift.String?
    let notes: Swift.String?
    let equipment: Swift.String?
    let clientToken: Swift.String?
}

extension CreateLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupName = "LabelGroupName"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateLabelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLabelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLabelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLabelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateLabelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelId = output.labelId
        } else {
            self.labelId = nil
        }
    }
}

public struct CreateLabelOutputResponse: Swift.Equatable {
    /// The ID of the label that you have created.
    public var labelId: Swift.String?

    public init (
        labelId: Swift.String? = nil
    )
    {
        self.labelId = labelId
    }
}

struct CreateLabelOutputResponseBody: Swift.Equatable {
    let labelId: Swift.String?
}

extension CreateLabelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelId = "LabelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

extension CreateModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataPreProcessingConfiguration = self.dataPreProcessingConfiguration {
            try encodeContainer.encode(dataPreProcessingConfiguration, forKey: .dataPreProcessingConfiguration)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = self.datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let evaluationDataEndTime = self.evaluationDataEndTime {
            try encodeContainer.encodeTimestamp(evaluationDataEndTime, format: .epochSeconds, forKey: .evaluationDataEndTime)
        }
        if let evaluationDataStartTime = self.evaluationDataStartTime {
            try encodeContainer.encodeTimestamp(evaluationDataStartTime, format: .epochSeconds, forKey: .evaluationDataStartTime)
        }
        if let labelsInputConfiguration = self.labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let offCondition = self.offCondition {
            try encodeContainer.encode(offCondition, forKey: .offCondition)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let trainingDataEndTime = self.trainingDataEndTime {
            try encodeContainer.encodeTimestamp(trainingDataEndTime, format: .epochSeconds, forKey: .trainingDataEndTime)
        }
        if let trainingDataStartTime = self.trainingDataStartTime {
            try encodeContainer.encodeTimestamp(trainingDataStartTime, format: .epochSeconds, forKey: .trainingDataStartTime)
        }
    }
}

extension CreateModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The name of the dataset for the ML model being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The data schema for the ML model being created.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Indicates the time reference in the dataset that should be used to end the subset of evaluation data for the ML model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of evaluation data for the ML model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// The input configuration for the labels being used for the ML model that's being created.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name for the ML model to be created.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the ML model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the ML model being created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?
    /// Indicates the time reference in the dataset that should be used to end the subset of training data for the ML model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of training data for the ML model.
    public var trainingDataStartTime: ClientRuntime.Date?

    public init (
        clientToken: Swift.String? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
    }
}

struct CreateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let clientToken: Swift.String?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let serverSideKmsKeyId: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
    let offCondition: Swift.String?
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}

extension CreateModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.status = output.status
        } else {
            self.modelArn = nil
            self.status = nil
        }
    }
}

public struct CreateModelOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// Indicates the status of the CreateModel operation.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init (
        modelArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.status = status
    }
}

struct CreateModelOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
    let status: LookoutEquipmentClientTypes.ModelStatus?
}

extension CreateModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes.DataIngestionJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = self.ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about a specified data ingestion job, including dataset information, data ingestion configuration, and status.
    public struct DataIngestionJobSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the dataset used in the data ingestion job.
        public var datasetArn: Swift.String?
        /// The name of the dataset used for the data ingestion job.
        public var datasetName: Swift.String?
        /// Specifies information for the input data for the data inference job, including data Amazon S3 location parameters.
        public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
        /// Indicates the job ID of the data ingestion job.
        public var jobId: Swift.String?
        /// Indicates the status of the data ingestion job.
        public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

        public init (
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
            jobId: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
        )
        {
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.ingestionInputConfiguration = ingestionInputConfiguration
            self.jobId = jobId
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.DataPreProcessingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetSamplingRate = "TargetSamplingRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetSamplingRate = self.targetSamplingRate {
            try encodeContainer.encode(targetSamplingRate.rawValue, forKey: .targetSamplingRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetSamplingRateDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.TargetSamplingRate.self, forKey: .targetSamplingRate)
        targetSamplingRate = targetSamplingRateDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public struct DataPreProcessingConfiguration: Swift.Equatable {
        /// The sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
        public var targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate?

        public init (
            targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate? = nil
        )
        {
            self.targetSamplingRate = targetSamplingRate
        }
    }

}

extension LookoutEquipmentClientTypes.DataQualitySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duplicateTimestamps = "DuplicateTimestamps"
        case insufficientSensorData = "InsufficientSensorData"
        case invalidSensorData = "InvalidSensorData"
        case missingSensorData = "MissingSensorData"
        case unsupportedTimestamps = "UnsupportedTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duplicateTimestamps = self.duplicateTimestamps {
            try encodeContainer.encode(duplicateTimestamps, forKey: .duplicateTimestamps)
        }
        if let insufficientSensorData = self.insufficientSensorData {
            try encodeContainer.encode(insufficientSensorData, forKey: .insufficientSensorData)
        }
        if let invalidSensorData = self.invalidSensorData {
            try encodeContainer.encode(invalidSensorData, forKey: .invalidSensorData)
        }
        if let missingSensorData = self.missingSensorData {
            try encodeContainer.encode(missingSensorData, forKey: .missingSensorData)
        }
        if let unsupportedTimestamps = self.unsupportedTimestamps {
            try encodeContainer.encode(unsupportedTimestamps, forKey: .unsupportedTimestamps)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insufficientSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InsufficientSensorData.self, forKey: .insufficientSensorData)
        insufficientSensorData = insufficientSensorDataDecoded
        let missingSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingSensorData.self, forKey: .missingSensorData)
        missingSensorData = missingSensorDataDecoded
        let invalidSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InvalidSensorData.self, forKey: .invalidSensorData)
        invalidSensorData = invalidSensorDataDecoded
        let unsupportedTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.UnsupportedTimestamps.self, forKey: .unsupportedTimestamps)
        unsupportedTimestamps = unsupportedTimestampsDecoded
        let duplicateTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DuplicateTimestamps.self, forKey: .duplicateTimestamps)
        duplicateTimestamps = duplicateTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// DataQualitySummary gives aggregated statistics over all the sensors about a completed ingestion job. It primarily gives more information about statistics over different incorrect data like MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, DuplicateTimeStamps.
    public struct DataQualitySummary: Swift.Equatable {
        /// Parameter that gives information about duplicate timestamps in the input data.
        /// This member is required.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps?
        /// Parameter that gives information about insufficient data for sensors in the dataset. This includes information about those sensors that have complete data missing and those with a short date range.
        /// This member is required.
        public var insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData?
        /// Parameter that gives information about data that is invalid over all the sensors in the input data.
        /// This member is required.
        public var invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData?
        /// Parameter that gives information about data that is missing over all the sensors in the input data.
        /// This member is required.
        public var missingSensorData: LookoutEquipmentClientTypes.MissingSensorData?
        /// Parameter that gives information about unsupported timestamps in the input data.
        /// This member is required.
        public var unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps?

        public init (
            duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps? = nil,
            insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData? = nil,
            invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData? = nil,
            missingSensorData: LookoutEquipmentClientTypes.MissingSensorData? = nil,
            unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps? = nil
        )
        {
            self.duplicateTimestamps = duplicateTimestamps
            self.insufficientSensorData = insufficientSensorData
            self.invalidSensorData = invalidSensorData
            self.missingSensorData = missingSensorData
            self.unsupportedTimestamps = unsupportedTimestamps
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DataUploadFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt15m
        case pt1h
        case pt30m
        case pt5m
        case sdkUnknown(Swift.String)

        public static var allCases: [DataUploadFrequency] {
            return [
                .pt10m,
                .pt15m,
                .pt1h,
                .pt30m,
                .pt5m,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt15m: return "PT15M"
            case .pt1h: return "PT1H"
            case .pt30m: return "PT30M"
            case .pt5m: return "PT5M"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataUploadFrequency(rawValue: rawValue) ?? DataUploadFrequency.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSchema: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineDataSchema = "InlineDataSchema"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineDataSchema = self.inlineDataSchema {
            try encodeContainer.encode(inlineDataSchema, forKey: .inlineDataSchema)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineDataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inlineDataSchema)
        inlineDataSchema = inlineDataSchemaDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the data schema used with the given dataset.
    public struct DatasetSchema: Swift.Equatable {
        ///
        public var inlineDataSchema: Swift.String?

        public init (
            inlineDataSchema: Swift.String? = nil
        )
        {
            self.inlineDataSchema = inlineDataSchema
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case created
        case ingestionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .created,
                .ingestionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .ingestionInProgress: return "INGESTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatus(rawValue: rawValue) ?? DatasetStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific data set, including name, ARN, and status.
    public struct DatasetSummary: Swift.Equatable {
        /// The time at which the dataset was created in Amazon Lookout for Equipment.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the specified dataset.
        public var datasetArn: Swift.String?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// Indicates the status of the dataset.
        public var status: LookoutEquipmentClientTypes.DatasetStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.DatasetStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.status = status
        }
    }

}

extension DeleteDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

extension DeleteDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDatasetInput: Swift.Equatable {
    /// The name of the dataset to be deleted.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DeleteDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
}

extension DeleteDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DeleteDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatasetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension DeleteInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be deleted.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DeleteInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension DeleteInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DeleteInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteInferenceSchedulerOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension DeleteLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLabelGroupInput: Swift.Equatable {
    /// The name of the label group that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init (
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

struct DeleteLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
}

extension DeleteLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension DeleteLabelGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLabelGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLabelGroupOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLabelGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLabelGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
    }
}

extension DeleteLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLabelInput: Swift.Equatable {
    /// The name of the label group that contains the label that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// The ID of the label that you want to delete.
    /// This member is required.
    public var labelId: Swift.String?

    public init (
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

struct DeleteLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelId: Swift.String?
}

extension DeleteLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

extension DeleteLabelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLabelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLabelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLabelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLabelOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DeleteModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelInput: Swift.Equatable {
    /// The name of the ML model to be deleted.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DeleteModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DeleteModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeDataIngestionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeDataIngestionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataIngestionJobInput: Swift.Equatable {
    /// The job ID of the data ingestion job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeDataIngestionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeDataIngestionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataIngestionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDataIngestionJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataIngestionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDataIngestionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataEndTime = output.dataEndTime
            self.dataQualitySummary = output.dataQualitySummary
            self.dataStartTime = output.dataStartTime
            self.datasetArn = output.datasetArn
            self.failedReason = output.failedReason
            self.ingestedDataSize = output.ingestedDataSize
            self.ingestedFilesSummary = output.ingestedFilesSummary
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.jobId = output.jobId
            self.roleArn = output.roleArn
            self.status = output.status
            self.statusDetail = output.statusDetail
        } else {
            self.createdAt = nil
            self.dataEndTime = nil
            self.dataQualitySummary = nil
            self.dataStartTime = nil
            self.datasetArn = nil
            self.failedReason = nil
            self.ingestedDataSize = nil
            self.ingestedFilesSummary = nil
            self.ingestionInputConfiguration = nil
            self.jobId = nil
            self.roleArn = nil
            self.status = nil
            self.statusDetail = nil
        }
    }
}

public struct DescribeDataIngestionJobOutputResponse: Swift.Equatable {
    /// The time at which the data ingestion job was created.
    public var createdAt: ClientRuntime.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataEndTime: ClientRuntime.Date?
    /// Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataStartTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job.
    public var datasetArn: Swift.String?
    /// Specifies the reason for failure when a data ingestion job has failed.
    public var failedReason: Swift.String?
    /// Indicates the size of the ingested dataset.
    public var ingestedDataSize: Swift.Int?
    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested.
    public var roleArn: Swift.String?
    /// Indicates the status of the DataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?
    /// Provides details about status of the ingestion job that is currently in progress.
    public var statusDetail: Swift.String?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataEndTime: ClientRuntime.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        failedReason: Swift.String? = nil,
        ingestedDataSize: Swift.Int? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        jobId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil,
        statusDetail: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.failedReason = failedReason
        self.ingestedDataSize = ingestedDataSize
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.jobId = jobId
        self.roleArn = roleArn
        self.status = status
        self.statusDetail = statusDetail
    }
}

struct DescribeDataIngestionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let datasetArn: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let roleArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
    let failedReason: Swift.String?
    let dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    let ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    let statusDetail: Swift.String?
    let ingestedDataSize: Swift.Int?
    let dataStartTime: ClientRuntime.Date?
    let dataEndTime: ClientRuntime.Date?
}

extension DescribeDataIngestionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataEndTime = "DataEndTime"
        case dataQualitySummary = "DataQualitySummary"
        case dataStartTime = "DataStartTime"
        case datasetArn = "DatasetArn"
        case failedReason = "FailedReason"
        case ingestedDataSize = "IngestedDataSize"
        case ingestedFilesSummary = "IngestedFilesSummary"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case roleArn = "RoleArn"
        case status = "Status"
        case statusDetail = "StatusDetail"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let dataQualitySummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataQualitySummary.self, forKey: .dataQualitySummary)
        dataQualitySummary = dataQualitySummaryDecoded
        let ingestedFilesSummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestedFilesSummary.self, forKey: .ingestedFilesSummary)
        ingestedFilesSummary = ingestedFilesSummaryDecoded
        let statusDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetail)
        statusDetail = statusDetailDecoded
        let ingestedDataSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestedDataSize)
        ingestedDataSize = ingestedDataSizeDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
    }
}

extension DescribeDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

extension DescribeDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDatasetInput: Swift.Equatable {
    /// The name of the dataset to be described.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DescribeDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
}

extension DescribeDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DescribeDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataEndTime = output.dataEndTime
            self.dataQualitySummary = output.dataQualitySummary
            self.dataStartTime = output.dataStartTime
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.ingestedFilesSummary = output.ingestedFilesSummary
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.lastUpdatedAt = output.lastUpdatedAt
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
        } else {
            self.createdAt = nil
            self.dataEndTime = nil
            self.dataQualitySummary = nil
            self.dataStartTime = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.ingestedFilesSummary = nil
            self.ingestionInputConfiguration = nil
            self.lastUpdatedAt = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
        }
    }
}

public struct DescribeDatasetOutputResponse: Swift.Equatable {
    /// Specifies the time the dataset was created in Lookout for Equipment.
    public var createdAt: ClientRuntime.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataEndTime: ClientRuntime.Date?
    /// Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataStartTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being described.
    public var datasetName: Swift.String?
    /// IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Specifies the time the dataset was last updated, if it was.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the dataset.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataEndTime: ClientRuntime.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.lastUpdatedAt = lastUpdatedAt
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
    }
}

struct DescribeDatasetOutputResponseBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
    let schema: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    let ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    let roleArn: Swift.String?
    let dataStartTime: ClientRuntime.Date?
    let dataEndTime: ClientRuntime.Date?
}

extension DescribeDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataEndTime = "DataEndTime"
        case dataQualitySummary = "DataQualitySummary"
        case dataStartTime = "DataStartTime"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestedFilesSummary = "IngestedFilesSummary"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case lastUpdatedAt = "LastUpdatedAt"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let dataQualitySummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataQualitySummary.self, forKey: .dataQualitySummary)
        dataQualitySummary = dataQualitySummaryDecoded
        let ingestedFilesSummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestedFilesSummary.self, forKey: .ingestedFilesSummary)
        ingestedFilesSummary = ingestedFilesSummaryDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
    }
}

extension DescribeInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension DescribeInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler being described.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DescribeInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension DescribeInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DescribeInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataDelayOffsetInMinutes = output.dataDelayOffsetInMinutes
            self.dataInputConfiguration = output.dataInputConfiguration
            self.dataOutputConfiguration = output.dataOutputConfiguration
            self.dataUploadFrequency = output.dataUploadFrequency
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.latestInferenceResult = output.latestInferenceResult
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.roleArn = output.roleArn
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.dataDelayOffsetInMinutes = nil
            self.dataInputConfiguration = nil
            self.dataOutputConfiguration = nil
            self.dataUploadFrequency = nil
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.latestInferenceResult = nil
            self.modelArn = nil
            self.modelName = nil
            self.roleArn = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeInferenceSchedulerOutputResponse: Swift.Equatable {
    /// Specifies the time at which the inference scheduler was created.
    public var createdAt: ClientRuntime.Date?
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results for the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// Specifies how often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The Amazon Resource Name (ARN) of the inference scheduler being described.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being described.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
    public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
    /// The Amazon Resource Name (ARN) of the ML model of the inference scheduler being described.
    public var modelArn: Swift.String?
    /// The name of the ML model of the inference scheduler being described.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler being described.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    /// Specifies the time at which the inference scheduler was last updated, if it was.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.latestInferenceResult = latestInferenceResult
        self.modelArn = modelArn
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeInferenceSchedulerOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
}

extension DescribeInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case latestInferenceResult = "LatestInferenceResult"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let latestInferenceResultDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LatestInferenceResult.self, forKey: .latestInferenceResult)
        latestInferenceResult = latestInferenceResultDecoded
    }
}

extension DescribeLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension DescribeLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLabelGroupInput: Swift.Equatable {
    /// Returns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init (
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

struct DescribeLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
}

extension DescribeLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension DescribeLabelGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLabelGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLabelGroupOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLabelGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLabelGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.faultCodes = output.faultCodes
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.faultCodes = nil
            self.labelGroupArn = nil
            self.labelGroupName = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeLabelGroupOutputResponse: Swift.Equatable {
    /// The time at which the label group was created.
    public var createdAt: ClientRuntime.Date?
    /// Codes indicating the type of anomaly associated with the labels in the lagbel group.
    public var faultCodes: [Swift.String]?
    /// The ARN of the label group.
    public var labelGroupArn: Swift.String?
    /// The name of the label group.
    public var labelGroupName: Swift.String?
    /// The time at which the label group was updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.faultCodes = faultCodes
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.updatedAt = updatedAt
    }
}

struct DescribeLabelGroupOutputResponseBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
    let faultCodes: [Swift.String]?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
}

extension DescribeLabelGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case faultCodes = "FaultCodes"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension DescribeLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
    }
}

extension DescribeLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLabelInput: Swift.Equatable {
    /// Returns the name of the group containing the label.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Returns the ID of the label.
    /// This member is required.
    public var labelId: Swift.String?

    public init (
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

struct DescribeLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelId: Swift.String?
}

extension DescribeLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

extension DescribeLabelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLabelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLabelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLabelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLabelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.endTime = output.endTime
            self.equipment = output.equipment
            self.faultCode = output.faultCode
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
            self.labelId = output.labelId
            self.notes = output.notes
            self.rating = output.rating
            self.startTime = output.startTime
        } else {
            self.createdAt = nil
            self.endTime = nil
            self.equipment = nil
            self.faultCode = nil
            self.labelGroupArn = nil
            self.labelGroupName = nil
            self.labelId = nil
            self.notes = nil
            self.rating = nil
            self.startTime = nil
        }
    }
}

public struct DescribeLabelOutputResponse: Swift.Equatable {
    /// The time at which the label was created.
    public var createdAt: ClientRuntime.Date?
    /// The end time of the requested label.
    public var endTime: ClientRuntime.Date?
    /// Indicates that a label pertains to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The ARN of the requested label group.
    public var labelGroupArn: Swift.String?
    /// The name of the requested label group.
    public var labelGroupName: Swift.String?
    /// The ID of the requested label.
    public var labelId: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the requested label.
    public var startTime: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        endTime: ClientRuntime.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.labelId = labelId
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

struct DescribeLabelOutputResponseBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
    let labelId: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let rating: LookoutEquipmentClientTypes.LabelRating?
    let faultCode: Swift.String?
    let notes: Swift.String?
    let equipment: Swift.String?
    let createdAt: ClientRuntime.Date?
}

extension DescribeLabelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension DescribeModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DescribeModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelInput: Swift.Equatable {
    /// The name of the ML model to be described.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DescribeModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DescribeModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataPreProcessingConfiguration = output.dataPreProcessingConfiguration
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.evaluationDataEndTime = output.evaluationDataEndTime
            self.evaluationDataStartTime = output.evaluationDataStartTime
            self.failedReason = output.failedReason
            self.labelsInputConfiguration = output.labelsInputConfiguration
            self.lastUpdatedTime = output.lastUpdatedTime
            self.modelArn = output.modelArn
            self.modelMetrics = output.modelMetrics
            self.modelName = output.modelName
            self.offCondition = output.offCondition
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
            self.trainingDataEndTime = output.trainingDataEndTime
            self.trainingDataStartTime = output.trainingDataStartTime
            self.trainingExecutionEndTime = output.trainingExecutionEndTime
            self.trainingExecutionStartTime = output.trainingExecutionStartTime
        } else {
            self.createdAt = nil
            self.dataPreProcessingConfiguration = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.evaluationDataEndTime = nil
            self.evaluationDataStartTime = nil
            self.failedReason = nil
            self.labelsInputConfiguration = nil
            self.lastUpdatedTime = nil
            self.modelArn = nil
            self.modelMetrics = nil
            self.modelName = nil
            self.offCondition = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
            self.trainingDataEndTime = nil
            self.trainingDataStartTime = nil
            self.trainingExecutionEndTime = nil
            self.trainingExecutionStartTime = nil
        }
    }
}

public struct DescribeModelOutputResponse: Swift.Equatable {
    /// Indicates the time and date at which the ML model was created.
    public var createdAt: ClientRuntime.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resouce Name (ARN) of the dataset used to create the ML model being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being used by the ML being described.
    public var datasetName: Swift.String?
    /// Indicates the time reference in the dataset that was used to end the subset of evaluation data for the ML model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the ML model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// If the training of the ML model failed, this indicates the reason for that failure.
    public var failedReason: Swift.String?
    /// Specifies configuration information about the labels input, including its S3 location.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the ML model was updated. The type of update is not specified.
    public var lastUpdatedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the ML model being described.
    public var modelArn: Swift.String?
    /// The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the ML model being described.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the ML model being described.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Specifies the current status of the model being described. Status describes the status of the most recent action of the model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?
    /// Indicates the time reference in the dataset that was used to end the subset of training data for the ML model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of training data for the ML model.
    public var trainingDataStartTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model was completed.
    public var trainingExecutionEndTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model began.
    public var trainingExecutionStartTime: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        failedReason: Swift.String? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        modelArn: Swift.String? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil,
        trainingExecutionEndTime: ClientRuntime.Date? = nil,
        trainingExecutionStartTime: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.modelArn = modelArn
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

struct DescribeModelOutputResponseBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let schema: Swift.String?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let status: LookoutEquipmentClientTypes.ModelStatus?
    let trainingExecutionStartTime: ClientRuntime.Date?
    let trainingExecutionEndTime: ClientRuntime.Date?
    let failedReason: Swift.String?
    let modelMetrics: Swift.String?
    let lastUpdatedTime: ClientRuntime.Date?
    let createdAt: ClientRuntime.Date?
    let serverSideKmsKeyId: Swift.String?
    let offCondition: Swift.String?
}

extension DescribeModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case failedReason = "FailedReason"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case lastUpdatedTime = "LastUpdatedTime"
        case modelArn = "ModelArn"
        case modelMetrics = "ModelMetrics"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
        case trainingExecutionEndTime = "TrainingExecutionEndTime"
        case trainingExecutionStartTime = "TrainingExecutionStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let trainingExecutionStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionStartTime)
        trainingExecutionStartTime = trainingExecutionStartTimeDecoded
        let trainingExecutionEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionEndTime)
        trainingExecutionEndTime = trainingExecutionEndTimeDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}

extension LookoutEquipmentClientTypes.DuplicateTimestamps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalNumberOfDuplicateTimestamps = "TotalNumberOfDuplicateTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalNumberOfDuplicateTimestamps = self.totalNumberOfDuplicateTimestamps {
            try encodeContainer.encode(totalNumberOfDuplicateTimestamps, forKey: .totalNumberOfDuplicateTimestamps)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfDuplicateTimestampsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfDuplicateTimestamps)
        totalNumberOfDuplicateTimestamps = totalNumberOfDuplicateTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information abount duplicate timestamps in the dataset.
    public struct DuplicateTimestamps: Swift.Equatable {
        /// Indicates the total number of duplicate timestamps.
        /// This member is required.
        public var totalNumberOfDuplicateTimestamps: Swift.Int?

        public init (
            totalNumberOfDuplicateTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfDuplicateTimestamps = totalNumberOfDuplicateTimestamps
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceEventSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diagnostics = "Diagnostics"
        case eventDurationInSeconds = "EventDurationInSeconds"
        case eventEndTime = "EventEndTime"
        case eventStartTime = "EventStartTime"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = self.diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let eventDurationInSeconds = self.eventDurationInSeconds {
            try encodeContainer.encode(eventDurationInSeconds, forKey: .eventDurationInSeconds)
        }
        if let eventEndTime = self.eventEndTime {
            try encodeContainer.encodeTimestamp(eventEndTime, format: .epochSeconds, forKey: .eventEndTime)
        }
        if let eventStartTime = self.eventStartTime {
            try encodeContainer.encodeTimestamp(eventStartTime, format: .epochSeconds, forKey: .eventStartTime)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let eventStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let eventDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventDurationInSeconds)
        eventDurationInSeconds = eventDurationInSecondsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.
    public struct InferenceEventSummary: Swift.Equatable {
        /// An array which specifies the names and values of all sensors contributing to an inference event.
        public var diagnostics: Swift.String?
        /// Indicates the size of an inference event in seconds.
        public var eventDurationInSeconds: Swift.Int?
        /// Indicates the ending time of an inference event.
        public var eventEndTime: ClientRuntime.Date?
        /// Indicates the starting time of an inference event.
        public var eventStartTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference events.
        public var inferenceSchedulerName: Swift.String?

        public init (
            diagnostics: Swift.String? = nil,
            eventDurationInSeconds: Swift.Int? = nil,
            eventEndTime: ClientRuntime.Date? = nil,
            eventStartTime: ClientRuntime.Date? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil
        )
        {
            self.diagnostics = diagnostics
            self.eventDurationInSeconds = eventDurationInSeconds
            self.eventEndTime = eventEndTime
            self.eventStartTime = eventStartTime
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum InferenceExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceExecutionStatus(rawValue: rawValue) ?? InferenceExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerResultObject = "CustomerResultObject"
        case dataEndTime = "DataEndTime"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataStartTime = "DataStartTime"
        case failedReason = "FailedReason"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case scheduledStartTime = "ScheduledStartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerResultObject = self.customerResultObject {
            try encodeContainer.encode(customerResultObject, forKey: .customerResultObject)
        }
        if let dataEndTime = self.dataEndTime {
            try encodeContainer.encodeTimestamp(dataEndTime, format: .epochSeconds, forKey: .dataEndTime)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataStartTime = self.dataStartTime {
            try encodeContainer.encodeTimestamp(dataStartTime, format: .epochSeconds, forKey: .dataStartTime)
        }
        if let failedReason = self.failedReason {
            try encodeContainer.encode(failedReason, forKey: .failedReason)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let scheduledStartTime = self.scheduledStartTime {
            try encodeContainer.encodeTimestamp(scheduledStartTime, format: .epochSeconds, forKey: .scheduledStartTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let scheduledStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .scheduledStartTime)
        scheduledStartTime = scheduledStartTimeDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let customerResultObjectDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.S3Object.self, forKey: .customerResultObject)
        customerResultObject = customerResultObjectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference execution, including input and output data configuration, inference scheduling information, status, and so on.
    public struct InferenceExecutionSummary: Swift.Equatable {
        ///
        public var customerResultObject: LookoutEquipmentClientTypes.S3Object?
        /// Indicates the time reference in the dataset at which the inference execution stopped.
        public var dataEndTime: ClientRuntime.Date?
        /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
        public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
        /// Specifies configuration information for the output results from for the inference execution, including the output Amazon S3 location.
        public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
        /// Indicates the time reference in the dataset at which the inference execution began.
        public var dataStartTime: ClientRuntime.Date?
        /// Specifies the reason for failure when an inference execution has failed.
        public var failedReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the ML model used for the inference execution.
        public var modelArn: Swift.String?
        /// The name of the ML model being used for the inference execution.
        public var modelName: Swift.String?
        /// Indicates the start time at which the inference scheduler began the specific inference execution.
        public var scheduledStartTime: ClientRuntime.Date?
        /// Indicates the status of the inference execution.
        public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

        public init (
            customerResultObject: LookoutEquipmentClientTypes.S3Object? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
            dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
            dataStartTime: ClientRuntime.Date? = nil,
            failedReason: Swift.String? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            scheduledStartTime: ClientRuntime.Date? = nil,
            status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
        )
        {
            self.customerResultObject = customerResultObject
            self.dataEndTime = dataEndTime
            self.dataInputConfiguration = dataInputConfiguration
            self.dataOutputConfiguration = dataOutputConfiguration
            self.dataStartTime = dataStartTime
            self.failedReason = failedReason
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.modelArn = modelArn
            self.modelName = modelName
            self.scheduledStartTime = scheduledStartTime
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceInputNameConfiguration = "InferenceInputNameConfiguration"
        case inputTimeZoneOffset = "InputTimeZoneOffset"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceInputNameConfiguration = self.inferenceInputNameConfiguration {
            try encodeContainer.encode(inferenceInputNameConfiguration, forKey: .inferenceInputNameConfiguration)
        }
        if let inputTimeZoneOffset = self.inputTimeZoneOffset {
            try encodeContainer.encode(inputTimeZoneOffset, forKey: .inputTimeZoneOffset)
        }
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let inputTimeZoneOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputTimeZoneOffset)
        inputTimeZoneOffset = inputTimeZoneOffsetDecoded
        let inferenceInputNameConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputNameConfiguration.self, forKey: .inferenceInputNameConfiguration)
        inferenceInputNameConfiguration = inferenceInputNameConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data..
    public struct InferenceInputConfiguration: Swift.Equatable {
        /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
        public var inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration?
        /// Indicates the difference between your time zone and Coordinated Universal Time (UTC).
        public var inputTimeZoneOffset: Swift.String?
        /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration?

        public init (
            inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration? = nil,
            inputTimeZoneOffset: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration? = nil
        )
        {
            self.inferenceInputNameConfiguration = inferenceInputNameConfiguration
            self.inputTimeZoneOffset = inputTimeZoneOffset
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputNameConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentTimestampDelimiter = "ComponentTimestampDelimiter"
        case timestampFormat = "TimestampFormat"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentTimestampDelimiter = self.componentTimestampDelimiter {
            try encodeContainer.encode(componentTimestampDelimiter, forKey: .componentTimestampDelimiter)
        }
        if let timestampFormat = self.timestampFormat {
            try encodeContainer.encode(timestampFormat, forKey: .timestampFormat)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampFormat)
        timestampFormat = timestampFormatDecoded
        let componentTimestampDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTimestampDelimiter)
        componentTimestampDelimiter = componentTimestampDelimiterDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
    public struct InferenceInputNameConfiguration: Swift.Equatable {
        /// Indicates the delimiter character used between items in the data.
        public var componentTimestampDelimiter: Swift.String?
        /// The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-).
        public var timestampFormat: Swift.String?

        public init (
            componentTimestampDelimiter: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.componentTimestampDelimiter = componentTimestampDelimiter
            self.timestampFormat = timestampFormat
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputConfiguration = "S3OutputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputConfiguration = self.s3OutputConfiguration {
            try encodeContainer.encode(s3OutputConfiguration, forKey: .s3OutputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3OutputConfiguration.self, forKey: .s3OutputConfiguration)
        s3OutputConfiguration = s3OutputConfigurationDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the output results from for the inference, including KMS key ID and output S3 location.
    public struct InferenceOutputConfiguration: Swift.Equatable {
        /// The ID number for the AWS KMS key used to encrypt the inference output.
        public var kmsKeyId: Swift.String?
        /// Specifies configuration information for the output results from for the inference, output S3 location.
        /// This member is required.
        public var s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputConfiguration = s3OutputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including input data S3 location.
    public struct InferenceS3InputConfiguration: Swift.Equatable {
        /// The bucket containing the input dataset for the inference.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the input data for the inference.
        public var `prefix`: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3OutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the output results from the inference, including output S3 location.
    public struct InferenceS3OutputConfiguration: Swift.Equatable {
        /// The bucket containing the output results from the inference
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the output results from the inference.
        public var `prefix`: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum InferenceSchedulerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceSchedulerStatus(rawValue: rawValue) ?? InferenceSchedulerStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceSchedulerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case latestInferenceResult = "LatestInferenceResult"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let latestInferenceResult = self.latestInferenceResult {
            try encodeContainer.encode(latestInferenceResult.rawValue, forKey: .latestInferenceResult)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let latestInferenceResultDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LatestInferenceResult.self, forKey: .latestInferenceResult)
        latestInferenceResult = latestInferenceResultDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference scheduler, including data delay offset, model name and ARN, status, and so on.
    public struct InferenceSchedulerSummary: Swift.Equatable {
        /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if an offset delay time of five minutes was selected, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        public var dataDelayOffsetInMinutes: Swift.Int?
        /// How often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
        public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
        /// The Amazon Resource Name (ARN) of the inference scheduler.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler.
        public var inferenceSchedulerName: Swift.String?
        /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
        public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
        /// The Amazon Resource Name (ARN) of the ML model used by the inference scheduler.
        public var modelArn: Swift.String?
        /// The name of the ML model used for the inference scheduler.
        public var modelName: Swift.String?
        /// Indicates the status of the inference scheduler.
        public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

        public init (
            dataDelayOffsetInMinutes: Swift.Int? = nil,
            dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
        )
        {
            self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
            self.dataUploadFrequency = dataUploadFrequency
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.latestInferenceResult = latestInferenceResult
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.IngestedFilesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discardedFiles = "DiscardedFiles"
        case ingestedNumberOfFiles = "IngestedNumberOfFiles"
        case totalNumberOfFiles = "TotalNumberOfFiles"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discardedFiles = discardedFiles {
            var discardedFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .discardedFiles)
            for s3object0 in discardedFiles {
                try discardedFilesContainer.encode(s3object0)
            }
        }
        if let ingestedNumberOfFiles = self.ingestedNumberOfFiles {
            try encodeContainer.encode(ingestedNumberOfFiles, forKey: .ingestedNumberOfFiles)
        }
        if let totalNumberOfFiles = self.totalNumberOfFiles {
            try encodeContainer.encode(totalNumberOfFiles, forKey: .totalNumberOfFiles)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfFiles)
        totalNumberOfFiles = totalNumberOfFilesDecoded
        let ingestedNumberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestedNumberOfFiles)
        ingestedNumberOfFiles = ingestedNumberOfFilesDecoded
        let discardedFilesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.S3Object?].self, forKey: .discardedFiles)
        var discardedFilesDecoded0:[LookoutEquipmentClientTypes.S3Object]? = nil
        if let discardedFilesContainer = discardedFilesContainer {
            discardedFilesDecoded0 = [LookoutEquipmentClientTypes.S3Object]()
            for structure0 in discardedFilesContainer {
                if let structure0 = structure0 {
                    discardedFilesDecoded0?.append(structure0)
                }
            }
        }
        discardedFiles = discardedFilesDecoded0
    }
}

extension LookoutEquipmentClientTypes {
    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public struct IngestedFilesSummary: Swift.Equatable {
        /// Indicates the number of files that were discarded. A file could be discarded because its format is invalid (for example, a jpg or pdf) or not readable.
        public var discardedFiles: [LookoutEquipmentClientTypes.S3Object]?
        /// Indicates the number of files that were successfully ingested.
        /// This member is required.
        public var ingestedNumberOfFiles: Swift.Int?
        /// Indicates the total number of files that were submitted for ingestion.
        /// This member is required.
        public var totalNumberOfFiles: Swift.Int?

        public init (
            discardedFiles: [LookoutEquipmentClientTypes.S3Object]? = nil,
            ingestedNumberOfFiles: Swift.Int? = nil,
            totalNumberOfFiles: Swift.Int? = nil
        )
        {
            self.discardedFiles = discardedFiles
            self.ingestedNumberOfFiles = ingestedNumberOfFiles
            self.totalNumberOfFiles = totalNumberOfFiles
        }
    }

}

extension LookoutEquipmentClientTypes.IngestionInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the data ingestion job, including input data S3 location.
    public struct IngestionInputConfiguration: Swift.Equatable {
        /// The location information for the S3 bucket used for input data for the data ingestion.
        /// This member is required.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration?

        public init (
            s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration? = nil
        )
        {
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum IngestionJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [IngestionJobStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IngestionJobStatus(rawValue: rawValue) ?? IngestionJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.IngestionS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case keyPattern = "KeyPattern"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPattern = self.keyPattern {
            try encodeContainer.encode(keyPattern, forKey: .keyPattern)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let keyPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPattern)
        keyPattern = keyPatternDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies S3 configuration information for the input data for the data ingestion job.
    public struct IngestionS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket used for the input data for the data ingestion.
        /// This member is required.
        public var bucket: Swift.String?
        /// Pattern for matching the Amazon S3 files which will be used for ingestion. If no KeyPattern is provided, we will use the default hierarchy file structure, which is same as KeyPattern {prefix}/{component_name}/*
        public var keyPattern: Swift.String?
        /// The prefix for the S3 location being used for the input data for the data ingestion.
        public var `prefix`: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPattern: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPattern = keyPattern
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.InsufficientSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case missingCompleteSensorData = "MissingCompleteSensorData"
        case sensorsWithShortDateRange = "SensorsWithShortDateRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let missingCompleteSensorData = self.missingCompleteSensorData {
            try encodeContainer.encode(missingCompleteSensorData, forKey: .missingCompleteSensorData)
        }
        if let sensorsWithShortDateRange = self.sensorsWithShortDateRange {
            try encodeContainer.encode(sensorsWithShortDateRange, forKey: .sensorsWithShortDateRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let missingCompleteSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingCompleteSensorData.self, forKey: .missingCompleteSensorData)
        missingCompleteSensorData = missingCompleteSensorDataDecoded
        let sensorsWithShortDateRangeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.SensorsWithShortDateRange.self, forKey: .sensorsWithShortDateRange)
        sensorsWithShortDateRange = sensorsWithShortDateRangeDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InsufficientSensorData: Swift.Equatable {
        /// Parameter that describes the total number of sensors that have data completely missing for it.
        /// This member is required.
        public var missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData?
        /// Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall.
        /// This member is required.
        public var sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange?

        public init (
            missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData? = nil,
            sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange? = nil
        )
        {
            self.missingCompleteSensorData = missingCompleteSensorData
            self.sensorsWithShortDateRange = sensorsWithShortDateRange
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Processing of the request has failed because of an unknown error, exception or failure.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.InvalidSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
        case totalNumberOfInvalidValues = "TotalNumberOfInvalidValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
        if let totalNumberOfInvalidValues = self.totalNumberOfInvalidValues {
            try encodeContainer.encode(totalNumberOfInvalidValues, forKey: .totalNumberOfInvalidValues)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
        let totalNumberOfInvalidValuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfInvalidValues)
        totalNumberOfInvalidValues = totalNumberOfInvalidValuesDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InvalidSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have at least some invalid values.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of invalid values across all the sensors.
        /// This member is required.
        public var totalNumberOfInvalidValues: Swift.Int?

        public init (
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfInvalidValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfInvalidValues = totalNumberOfInvalidValues
        }
    }

}

extension LookoutEquipmentClientTypes.LabelGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let labelGroupArn = self.labelGroupArn {
            try encodeContainer.encode(labelGroupArn, forKey: .labelGroupArn)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the label group.
    public struct LabelGroupSummary: Swift.Equatable {
        /// The time at which the label group was created.
        public var createdAt: ClientRuntime.Date?
        /// The ARN of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The time at which the label group was updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.updatedAt = updatedAt
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum LabelRating: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anomaly
        case neutral
        case noAnomaly
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelRating] {
            return [
                .anomaly,
                .neutral,
                .noAnomaly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anomaly: return "ANOMALY"
            case .neutral: return "NEUTRAL"
            case .noAnomaly: return "NO_ANOMALY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelRating(rawValue: rawValue) ?? LabelRating.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.LabelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let labelGroupArn = self.labelGroupArn {
            try encodeContainer.encode(labelGroupArn, forKey: .labelGroupArn)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
        if let rating = self.rating {
            try encodeContainer.encode(rating.rawValue, forKey: .rating)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Information about the label.
    public struct LabelSummary: Swift.Equatable {
        /// The time at which the label was created.
        public var createdAt: ClientRuntime.Date?
        /// The timestamp indicating the end of the label.
        public var endTime: ClientRuntime.Date?
        /// Indicates that a label pertains to a particular piece of equipment.
        public var equipment: Swift.String?
        /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
        public var faultCode: Swift.String?
        /// The ARN of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The ID of the label.
        public var labelId: Swift.String?
        /// Indicates whether a labeled event represents an anomaly.
        public var rating: LookoutEquipmentClientTypes.LabelRating?
        /// The timestamp indicating the start of the label.
        public var startTime: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            equipment: Swift.String? = nil,
            faultCode: Swift.String? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            labelId: Swift.String? = nil,
            rating: LookoutEquipmentClientTypes.LabelRating? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.endTime = endTime
            self.equipment = equipment
            self.faultCode = faultCode
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.labelId = labelId
            self.rating = rating
            self.startTime = startTime
        }
    }

}

extension LookoutEquipmentClientTypes.LabelsInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains the configuration information for the S3 location being used to hold label data.
    public struct LabelsInputConfiguration: Swift.Equatable {
        /// The name of the label group to be used for label data.
        public var labelGroupName: Swift.String?
        /// Contains location information for the S3 location being used for label data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration?

        public init (
            labelGroupName: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration? = nil
        )
        {
            self.labelGroupName = labelGroupName
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.LabelsS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// The location information (prefix and bucket name) for the s3 location being used for label data.
    public struct LabelsS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket holding the label data.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the label data.
        public var `prefix`: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.LargeTimestampGaps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxTimestampGapInDays = "MaxTimestampGapInDays"
        case numberOfLargeTimestampGaps = "NumberOfLargeTimestampGaps"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxTimestampGapInDays = self.maxTimestampGapInDays {
            try encodeContainer.encode(maxTimestampGapInDays, forKey: .maxTimestampGapInDays)
        }
        if let numberOfLargeTimestampGaps = self.numberOfLargeTimestampGaps {
            try encodeContainer.encode(numberOfLargeTimestampGaps, forKey: .numberOfLargeTimestampGaps)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let numberOfLargeTimestampGapsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLargeTimestampGaps)
        numberOfLargeTimestampGaps = numberOfLargeTimestampGapsDecoded
        let maxTimestampGapInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxTimestampGapInDays)
        maxTimestampGapInDays = maxTimestampGapInDaysDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on large gaps between consecutive timestamps in data.
    public struct LargeTimestampGaps: Swift.Equatable {
        /// Indicates the size of the largest timestamp gap, in days.
        public var maxTimestampGapInDays: Swift.Int?
        /// Indicates the number of large timestamp gaps, if there are any.
        public var numberOfLargeTimestampGaps: Swift.Int?
        /// Indicates whether there is a potential data issue related to large gaps in timestamps.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init (
            maxTimestampGapInDays: Swift.Int? = nil,
            numberOfLargeTimestampGaps: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.maxTimestampGapInDays = maxTimestampGapInDays
            self.numberOfLargeTimestampGaps = numberOfLargeTimestampGaps
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum LatestInferenceResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anomalous
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [LatestInferenceResult] {
            return [
                .anomalous,
                .normal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anomalous: return "ANOMALOUS"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LatestInferenceResult(rawValue: rawValue) ?? LatestInferenceResult.sdkUnknown(rawValue)
        }
    }
}

extension ListDataIngestionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListDataIngestionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDataIngestionJobsInput: Swift.Equatable {
    /// The name of the dataset being used for the data ingestion job.
    public var datasetName: Swift.String?
    /// Specifies the maximum number of data ingestion jobs to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?
    /// Indicates the status of the data ingestion job.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init (
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListDataIngestionJobsInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension ListDataIngestionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListDataIngestionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDataIngestionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDataIngestionJobsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDataIngestionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDataIngestionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataIngestionJobSummaries = output.dataIngestionJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.dataIngestionJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDataIngestionJobsOutputResponse: Swift.Equatable {
    /// Specifies information about the specific data ingestion job, including dataset name and status.
    public var dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?

    public init (
        dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataIngestionJobSummaries = dataIngestionJobSummaries
        self.nextToken = nextToken
    }
}

struct ListDataIngestionJobsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
}

extension ListDataIngestionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIngestionJobSummaries = "DataIngestionJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataIngestionJobSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DataIngestionJobSummary?].self, forKey: .dataIngestionJobSummaries)
        var dataIngestionJobSummariesDecoded0:[LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil
        if let dataIngestionJobSummariesContainer = dataIngestionJobSummariesContainer {
            dataIngestionJobSummariesDecoded0 = [LookoutEquipmentClientTypes.DataIngestionJobSummary]()
            for structure0 in dataIngestionJobSummariesContainer {
                if let structure0 = structure0 {
                    dataIngestionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        dataIngestionJobSummaries = dataIngestionJobSummariesDecoded0
    }
}

extension ListDatasetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = self.datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDatasetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDatasetsInput: Swift.Equatable {
    /// The beginning of the name of the datasets to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of datasets to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init (
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatasetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let datasetNameBeginsWith: Swift.String?
}

extension ListDatasetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListDatasetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatasetsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatasetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetSummaries = output.datasetSummaries
            self.nextToken = output.nextToken
        } else {
            self.datasetSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetsOutputResponse: Swift.Equatable {
    /// Provides information about the specified dataset, including creation time, dataset ARN, and status.
    public var datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init (
        datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

struct ListDatasetsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
}

extension ListDatasetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSummaries = "DatasetSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let datasetSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DatasetSummary?].self, forKey: .datasetSummaries)
        var datasetSummariesDecoded0:[LookoutEquipmentClientTypes.DatasetSummary]? = nil
        if let datasetSummariesContainer = datasetSummariesContainer {
            datasetSummariesDecoded0 = [LookoutEquipmentClientTypes.DatasetSummary]()
            for structure0 in datasetSummariesContainer {
                if let structure0 = structure0 {
                    datasetSummariesDecoded0?.append(structure0)
                }
            }
        }
        datasetSummaries = datasetSummariesDecoded0
    }
}

extension ListInferenceEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let intervalEndTime = self.intervalEndTime {
            try encodeContainer.encodeTimestamp(intervalEndTime, format: .epochSeconds, forKey: .intervalEndTime)
        }
        if let intervalStartTime = self.intervalStartTime {
            try encodeContainer.encodeTimestamp(intervalStartTime, format: .epochSeconds, forKey: .intervalStartTime)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListInferenceEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceEventsInput: Swift.Equatable {
    /// The name of the inference scheduler for the inference events listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Returns all the inference events with an end start time equal to or greater than less than the end time given
    /// This member is required.
    public var intervalEndTime: ClientRuntime.Date?
    /// Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.
    /// This member is required.
    public var intervalStartTime: ClientRuntime.Date?
    /// Specifies the maximum number of inference events to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference events.
    public var nextToken: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil,
        intervalEndTime: ClientRuntime.Date? = nil,
        intervalStartTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInferenceEventsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerName: Swift.String?
    let intervalStartTime: ClientRuntime.Date?
    let intervalEndTime: ClientRuntime.Date?
}

extension ListInferenceEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let intervalStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalStartTime)
        intervalStartTime = intervalStartTimeDecoded
        let intervalEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalEndTime)
        intervalEndTime = intervalEndTimeDecoded
    }
}

extension ListInferenceEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInferenceEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInferenceEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceEventSummaries = output.inferenceEventSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceEventSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceEventsOutputResponse: Swift.Equatable {
    /// Provides an array of information about the individual inference events returned from the ListInferenceEvents operation, including scheduler used, event start time, event end time, diagnostics, and so on.
    public var inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init (
        inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceEventSummaries = inferenceEventSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceEventsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
}

extension ListInferenceEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceEventSummaries = "InferenceEventSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceEventSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceEventSummary?].self, forKey: .inferenceEventSummaries)
        var inferenceEventSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceEventSummary]? = nil
        if let inferenceEventSummariesContainer = inferenceEventSummariesContainer {
            inferenceEventSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceEventSummary]()
            for structure0 in inferenceEventSummariesContainer {
                if let structure0 = structure0 {
                    inferenceEventSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceEventSummaries = inferenceEventSummariesDecoded0
    }
}

extension ListInferenceExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataEndTimeBefore = self.dataEndTimeBefore {
            try encodeContainer.encodeTimestamp(dataEndTimeBefore, format: .epochSeconds, forKey: .dataEndTimeBefore)
        }
        if let dataStartTimeAfter = self.dataStartTimeAfter {
            try encodeContainer.encodeTimestamp(dataStartTimeAfter, format: .epochSeconds, forKey: .dataStartTimeAfter)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListInferenceExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceExecutionsInput: Swift.Equatable {
    /// The time reference in the inferenced dataset before which Amazon Lookout for Equipment stopped the inference execution.
    public var dataEndTimeBefore: ClientRuntime.Date?
    /// The time reference in the inferenced dataset after which Amazon Lookout for Equipment started the inference execution.
    public var dataStartTimeAfter: ClientRuntime.Date?
    /// The name of the inference scheduler for the inference execution listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Specifies the maximum number of inference executions to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?
    /// The status of the inference execution.
    public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

    public init (
        dataEndTimeBefore: ClientRuntime.Date? = nil,
        dataStartTimeAfter: ClientRuntime.Date? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
    )
    {
        self.dataEndTimeBefore = dataEndTimeBefore
        self.dataStartTimeAfter = dataStartTimeAfter
        self.inferenceSchedulerName = inferenceSchedulerName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListInferenceExecutionsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerName: Swift.String?
    let dataStartTimeAfter: ClientRuntime.Date?
    let dataEndTimeBefore: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.InferenceExecutionStatus?
}

extension ListInferenceExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataStartTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTimeAfter)
        dataStartTimeAfter = dataStartTimeAfterDecoded
        let dataEndTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTimeBefore)
        dataEndTimeBefore = dataEndTimeBeforeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListInferenceExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInferenceExecutionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInferenceExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceExecutionSummaries = output.inferenceExecutionSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceExecutionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceExecutionsOutputResponse: Swift.Equatable {
    /// Provides an array of information about the individual inference executions returned from the ListInferenceExecutions operation, including model used, inference scheduler, data configuration, and so on.
    public var inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init (
        inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceExecutionSummaries = inferenceExecutionSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceExecutionsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
}

extension ListInferenceExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceExecutionSummaries = "InferenceExecutionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceExecutionSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceExecutionSummary?].self, forKey: .inferenceExecutionSummaries)
        var inferenceExecutionSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil
        if let inferenceExecutionSummariesContainer = inferenceExecutionSummariesContainer {
            inferenceExecutionSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceExecutionSummary]()
            for structure0 in inferenceExecutionSummariesContainer {
                if let structure0 = structure0 {
                    inferenceExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceExecutionSummaries = inferenceExecutionSummariesDecoded0
    }
}

extension ListInferenceSchedulersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerNameBeginsWith = self.inferenceSchedulerNameBeginsWith {
            try encodeContainer.encode(inferenceSchedulerNameBeginsWith, forKey: .inferenceSchedulerNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListInferenceSchedulersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceSchedulersInput: Swift.Equatable {
    /// The beginning of the name of the inference schedulers to be listed.
    public var inferenceSchedulerNameBeginsWith: Swift.String?
    /// Specifies the maximum number of inference schedulers to list.
    public var maxResults: Swift.Int?
    /// The name of the ML model used by the inference scheduler to be listed.
    public var modelName: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?
    /// Specifies the current status of the inference schedulers to list.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWith
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListInferenceSchedulersInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerNameBeginsWith: Swift.String?
    let modelName: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension ListInferenceSchedulersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerNameBeginsWith)
        inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWithDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListInferenceSchedulersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceSchedulersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInferenceSchedulersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceSchedulersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInferenceSchedulersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerSummaries = output.inferenceSchedulerSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceSchedulerSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceSchedulersOutputResponse: Swift.Equatable {
    /// Provides information about the specified inference scheduler, including data upload frequency, model name and ARN, and status.
    public var inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?

    public init (
        inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerSummaries = inferenceSchedulerSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceSchedulersOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
}

extension ListInferenceSchedulersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerSummaries = "InferenceSchedulerSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceSchedulerSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceSchedulerSummary?].self, forKey: .inferenceSchedulerSummaries)
        var inferenceSchedulerSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil
        if let inferenceSchedulerSummariesContainer = inferenceSchedulerSummariesContainer {
            inferenceSchedulerSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceSchedulerSummary]()
            for structure0 in inferenceSchedulerSummariesContainer {
                if let structure0 = structure0 {
                    inferenceSchedulerSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceSchedulerSummaries = inferenceSchedulerSummariesDecoded0
    }
}

extension ListLabelGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupNameBeginsWith = "LabelGroupNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupNameBeginsWith = self.labelGroupNameBeginsWith {
            try encodeContainer.encode(labelGroupNameBeginsWith, forKey: .labelGroupNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLabelGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelGroupsInput: Swift.Equatable {
    /// The beginning of the name of the label groups to be listed.
    public var labelGroupNameBeginsWith: Swift.String?
    /// Specifies the maximum number of label groups to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init (
        labelGroupNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupNameBeginsWith = labelGroupNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLabelGroupsInputBody: Swift.Equatable {
    let labelGroupNameBeginsWith: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListLabelGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupNameBeginsWith = "LabelGroupNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupNameBeginsWith)
        labelGroupNameBeginsWith = labelGroupNameBeginsWithDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListLabelGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLabelGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListLabelGroupsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLabelGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListLabelGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelGroupSummaries = output.labelGroupSummaries
            self.nextToken = output.nextToken
        } else {
            self.labelGroupSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelGroupsOutputResponse: Swift.Equatable {
    /// A summary of the label groups.
    public var labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init (
        labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupSummaries = labelGroupSummaries
        self.nextToken = nextToken
    }
}

struct ListLabelGroupsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]?
}

extension ListLabelGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupSummaries = "LabelGroupSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelGroupSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.LabelGroupSummary?].self, forKey: .labelGroupSummaries)
        var labelGroupSummariesDecoded0:[LookoutEquipmentClientTypes.LabelGroupSummary]? = nil
        if let labelGroupSummariesContainer = labelGroupSummariesContainer {
            labelGroupSummariesDecoded0 = [LookoutEquipmentClientTypes.LabelGroupSummary]()
            for structure0 in labelGroupSummariesContainer {
                if let structure0 = structure0 {
                    labelGroupSummariesDecoded0?.append(structure0)
                }
            }
        }
        labelGroupSummaries = labelGroupSummariesDecoded0
    }
}

extension ListLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case labelGroupName = "LabelGroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let intervalEndTime = self.intervalEndTime {
            try encodeContainer.encodeTimestamp(intervalEndTime, format: .epochSeconds, forKey: .intervalEndTime)
        }
        if let intervalStartTime = self.intervalStartTime {
            try encodeContainer.encodeTimestamp(intervalStartTime, format: .epochSeconds, forKey: .intervalStartTime)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelsInput: Swift.Equatable {
    /// Lists the labels that pertain to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Returns labels with a particular fault code.
    public var faultCode: Swift.String?
    /// Returns all labels with a start time earlier than the end time given.
    public var intervalEndTime: ClientRuntime.Date?
    /// Returns all the labels with a end time equal to or later than the start time given.
    public var intervalStartTime: ClientRuntime.Date?
    /// Retruns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Specifies the maximum number of labels to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init (
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        intervalEndTime: ClientRuntime.Date? = nil,
        intervalStartTime: ClientRuntime.Date? = nil,
        labelGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.equipment = equipment
        self.faultCode = faultCode
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.labelGroupName = labelGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLabelsInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let intervalStartTime: ClientRuntime.Date?
    let intervalEndTime: ClientRuntime.Date?
    let faultCode: Swift.String?
    let equipment: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case labelGroupName = "LabelGroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let intervalStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalStartTime)
        intervalStartTime = intervalStartTimeDecoded
        let intervalEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalEndTime)
        intervalEndTime = intervalEndTimeDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListLabelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelSummaries = output.labelSummaries
            self.nextToken = output.nextToken
        } else {
            self.labelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelsOutputResponse: Swift.Equatable {
    /// A summary of the items in the label group.
    public var labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init (
        labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelSummaries = labelSummaries
        self.nextToken = nextToken
    }
}

struct ListLabelsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
}

extension ListLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelSummaries = "LabelSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.LabelSummary?].self, forKey: .labelSummaries)
        var labelSummariesDecoded0:[LookoutEquipmentClientTypes.LabelSummary]? = nil
        if let labelSummariesContainer = labelSummariesContainer {
            labelSummariesDecoded0 = [LookoutEquipmentClientTypes.LabelSummary]()
            for structure0 in labelSummariesContainer {
                if let structure0 = structure0 {
                    labelSummariesDecoded0?.append(structure0)
                }
            }
        }
        labelSummaries = labelSummariesDecoded0
    }
}

extension ListModelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = self.datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelNameBeginsWith = self.modelNameBeginsWith {
            try encodeContainer.encode(modelNameBeginsWith, forKey: .modelNameBeginsWith)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListModelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelsInput: Swift.Equatable {
    /// The beginning of the name of the dataset of the ML models to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of ML models to list.
    public var maxResults: Swift.Int?
    /// The beginning of the name of the ML models being listed.
    public var modelNameBeginsWith: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of ML models.
    public var nextToken: Swift.String?
    /// The status of the ML model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init (
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListModelsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: LookoutEquipmentClientTypes.ModelStatus?
    let modelNameBeginsWith: Swift.String?
    let datasetNameBeginsWith: Swift.String?
}

extension ListModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let modelNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelNameBeginsWith)
        modelNameBeginsWith = modelNameBeginsWithDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListModelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelSummaries = output.modelSummaries
            self.nextToken = output.nextToken
        } else {
            self.modelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelsOutputResponse: Swift.Equatable {
    /// Provides information on the specified model, including created time, model and dataset ARNs, and status.
    public var modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
    /// An opaque pagination token indicating where to continue the listing of ML models.
    public var nextToken: Swift.String?

    public init (
        modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelSummaries = modelSummaries
        self.nextToken = nextToken
    }
}

struct ListModelsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
}

extension ListModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelSummaries = "ModelSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.ModelSummary?].self, forKey: .modelSummaries)
        var modelSummariesDecoded0:[LookoutEquipmentClientTypes.ModelSummary]? = nil
        if let modelSummariesContainer = modelSummariesContainer {
            modelSummariesDecoded0 = [LookoutEquipmentClientTypes.ModelSummary]()
            for structure0 in modelSummariesContainer {
                if let structure0 = structure0 {
                    modelSummariesDecoded0?.append(structure0)
                }
            }
        }
        modelSummaries = modelSummariesDecoded0
    }
}

extension ListSensorStatisticsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case ingestionJobId = "IngestionJobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionJobId = self.ingestionJobId {
            try encodeContainer.encode(ingestionJobId, forKey: .ingestionJobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListSensorStatisticsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSensorStatisticsInput: Swift.Equatable {
    /// The name of the dataset associated with the list of Sensor Statistics.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs.
    public var ingestionJobId: Swift.String?
    /// Specifies the maximum number of sensors for which to retrieve statistics.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?

    public init (
        datasetName: Swift.String? = nil,
        ingestionJobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.ingestionJobId = ingestionJobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSensorStatisticsInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let ingestionJobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSensorStatisticsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case ingestionJobId = "IngestionJobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let ingestionJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ingestionJobId)
        ingestionJobId = ingestionJobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSensorStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSensorStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSensorStatisticsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSensorStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSensorStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.sensorStatisticsSummaries = output.sensorStatisticsSummaries
        } else {
            self.nextToken = nil
            self.sensorStatisticsSummaries = nil
        }
    }
}

public struct ListSensorStatisticsOutputResponse: Swift.Equatable {
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?
    /// Provides ingestion-based statistics regarding the specified sensor with respect to various validation types, such as whether data exists, the number and percentage of missing values, and the number and percentage of duplicate timestamps.
    public var sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]?

    public init (
        nextToken: Swift.String? = nil,
        sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.sensorStatisticsSummaries = sensorStatisticsSummaries
    }
}

struct ListSensorStatisticsOutputResponseBody: Swift.Equatable {
    let sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]?
    let nextToken: Swift.String?
}

extension ListSensorStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case sensorStatisticsSummaries = "SensorStatisticsSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sensorStatisticsSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.SensorStatisticsSummary?].self, forKey: .sensorStatisticsSummaries)
        var sensorStatisticsSummariesDecoded0:[LookoutEquipmentClientTypes.SensorStatisticsSummary]? = nil
        if let sensorStatisticsSummariesContainer = sensorStatisticsSummariesContainer {
            sensorStatisticsSummariesDecoded0 = [LookoutEquipmentClientTypes.SensorStatisticsSummary]()
            for structure0 in sensorStatisticsSummariesContainer {
                if let structure0 = structure0 {
                    sensorStatisticsSummariesDecoded0?.append(structure0)
                }
            }
        }
        sensorStatisticsSummaries = sensorStatisticsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource (such as the dataset or model) that is the focus of the ListTagsForResource operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// Any tags associated with the resource.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LookoutEquipmentClientTypes.MissingCompleteSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on sensors that have sensor data completely missing.
    public struct MissingCompleteSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have data missing completely.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init (
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }

}

extension LookoutEquipmentClientTypes.MissingSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
        case totalNumberOfMissingValues = "TotalNumberOfMissingValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
        if let totalNumberOfMissingValues = self.totalNumberOfMissingValues {
            try encodeContainer.encode(totalNumberOfMissingValues, forKey: .totalNumberOfMissingValues)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
        let totalNumberOfMissingValuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfMissingValues)
        totalNumberOfMissingValues = totalNumberOfMissingValuesDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having missing data.
    public struct MissingSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have atleast some data missing.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of missing values across all the sensors.
        /// This member is required.
        public var totalNumberOfMissingValues: Swift.Int?

        public init (
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfMissingValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfMissingValues = totalNumberOfMissingValues
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.ModelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the specified ML model, including dataset and model names and ARNs, as well as status.
    public struct ModelSummary: Swift.Equatable {
        /// The time at which the specific model was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the dataset used to create the model.
        public var datasetArn: Swift.String?
        /// The name of the dataset being used for the ML model.
        public var datasetName: Swift.String?
        /// The Amazon Resource Name (ARN) of the ML model.
        public var modelArn: Swift.String?
        /// The name of the ML model.
        public var modelName: Swift.String?
        /// Indicates the status of the ML model.
        public var status: LookoutEquipmentClientTypes.ModelStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.ModelStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.MonotonicValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monotonicity = "Monotonicity"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monotonicity = self.monotonicity {
            try encodeContainer.encode(monotonicity.rawValue, forKey: .monotonicity)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let monotonicityDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.Monotonicity.self, forKey: .monotonicity)
        monotonicity = monotonicityDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on monotonic values in the data.
    public struct MonotonicValues: Swift.Equatable {
        /// Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC.
        public var monotonicity: LookoutEquipmentClientTypes.Monotonicity?
        /// Indicates whether there is a potential data issue related to having monotonic values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init (
            monotonicity: LookoutEquipmentClientTypes.Monotonicity? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.monotonicity = monotonicity
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum Monotonicity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case decreasing
        case increasing
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [Monotonicity] {
            return [
                .decreasing,
                .increasing,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .decreasing: return "DECREASING"
            case .increasing: return "INCREASING"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Monotonicity(rawValue: rawValue) ?? Monotonicity.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.MultipleOperatingModes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on operating modes in data.
    public struct MultipleOperatingModes: Swift.Equatable {
        /// Indicates whether there is a potential data issue related to having multiple operating modes.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init (
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource requested could not be found. Verify the resource ID and retry your request.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.S3Object: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about an S3 bucket.
    public struct S3Object: Swift.Equatable {
        /// The name of the specific S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object. Without this key, data in the bucket is not accessible.
        /// This member is required.
        public var key: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension LookoutEquipmentClientTypes.SensorStatisticsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoricalValues = "CategoricalValues"
        case componentName = "ComponentName"
        case dataEndTime = "DataEndTime"
        case dataExists = "DataExists"
        case dataStartTime = "DataStartTime"
        case duplicateTimestamps = "DuplicateTimestamps"
        case invalidDateEntries = "InvalidDateEntries"
        case invalidValues = "InvalidValues"
        case largeTimestampGaps = "LargeTimestampGaps"
        case missingValues = "MissingValues"
        case monotonicValues = "MonotonicValues"
        case multipleOperatingModes = "MultipleOperatingModes"
        case sensorName = "SensorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalValues = self.categoricalValues {
            try encodeContainer.encode(categoricalValues, forKey: .categoricalValues)
        }
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let dataEndTime = self.dataEndTime {
            try encodeContainer.encodeTimestamp(dataEndTime, format: .epochSeconds, forKey: .dataEndTime)
        }
        if dataExists != false {
            try encodeContainer.encode(dataExists, forKey: .dataExists)
        }
        if let dataStartTime = self.dataStartTime {
            try encodeContainer.encodeTimestamp(dataStartTime, format: .epochSeconds, forKey: .dataStartTime)
        }
        if let duplicateTimestamps = self.duplicateTimestamps {
            try encodeContainer.encode(duplicateTimestamps, forKey: .duplicateTimestamps)
        }
        if let invalidDateEntries = self.invalidDateEntries {
            try encodeContainer.encode(invalidDateEntries, forKey: .invalidDateEntries)
        }
        if let invalidValues = self.invalidValues {
            try encodeContainer.encode(invalidValues, forKey: .invalidValues)
        }
        if let largeTimestampGaps = self.largeTimestampGaps {
            try encodeContainer.encode(largeTimestampGaps, forKey: .largeTimestampGaps)
        }
        if let missingValues = self.missingValues {
            try encodeContainer.encode(missingValues, forKey: .missingValues)
        }
        if let monotonicValues = self.monotonicValues {
            try encodeContainer.encode(monotonicValues, forKey: .monotonicValues)
        }
        if let multipleOperatingModes = self.multipleOperatingModes {
            try encodeContainer.encode(multipleOperatingModes, forKey: .multipleOperatingModes)
        }
        if let sensorName = self.sensorName {
            try encodeContainer.encode(sensorName, forKey: .sensorName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let sensorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sensorName)
        sensorName = sensorNameDecoded
        let dataExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataExists) ?? false
        dataExists = dataExistsDecoded
        let missingValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .missingValues)
        missingValues = missingValuesDecoded
        let invalidValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .invalidValues)
        invalidValues = invalidValuesDecoded
        let invalidDateEntriesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .invalidDateEntries)
        invalidDateEntries = invalidDateEntriesDecoded
        let duplicateTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .duplicateTimestamps)
        duplicateTimestamps = duplicateTimestampsDecoded
        let categoricalValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CategoricalValues.self, forKey: .categoricalValues)
        categoricalValues = categoricalValuesDecoded
        let multipleOperatingModesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MultipleOperatingModes.self, forKey: .multipleOperatingModes)
        multipleOperatingModes = multipleOperatingModesDecoded
        let largeTimestampGapsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LargeTimestampGaps.self, forKey: .largeTimestampGaps)
        largeTimestampGaps = largeTimestampGapsDecoded
        let monotonicValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MonotonicValues.self, forKey: .monotonicValues)
        monotonicValues = monotonicValuesDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor.
    public struct SensorStatisticsSummary: Swift.Equatable {
        /// Parameter that describes potential risk about whether data associated with the sensor is categorical.
        public var categoricalValues: LookoutEquipmentClientTypes.CategoricalValues?
        /// Name of the component to which the particular sensor belongs for which the statistics belong to.
        public var componentName: Swift.String?
        /// Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to.
        public var dataEndTime: ClientRuntime.Date?
        /// Parameter that indicates whether data exists for the sensor that the statistics belong to.
        public var dataExists: Swift.Bool
        /// Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to.
        public var dataStartTime: ClientRuntime.Date?
        /// Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to.
        public var invalidDateEntries: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to.
        public var invalidValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps.
        public var largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps?
        /// Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to.
        public var missingValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic.
        public var monotonicValues: LookoutEquipmentClientTypes.MonotonicValues?
        /// Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode.
        public var multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes?
        /// Name of the sensor that the statistics belong to.
        public var sensorName: Swift.String?

        public init (
            categoricalValues: LookoutEquipmentClientTypes.CategoricalValues? = nil,
            componentName: Swift.String? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataExists: Swift.Bool = false,
            dataStartTime: ClientRuntime.Date? = nil,
            duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidDateEntries: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps? = nil,
            missingValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            monotonicValues: LookoutEquipmentClientTypes.MonotonicValues? = nil,
            multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes? = nil,
            sensorName: Swift.String? = nil
        )
        {
            self.categoricalValues = categoricalValues
            self.componentName = componentName
            self.dataEndTime = dataEndTime
            self.dataExists = dataExists
            self.dataStartTime = dataStartTime
            self.duplicateTimestamps = duplicateTimestamps
            self.invalidDateEntries = invalidDateEntries
            self.invalidValues = invalidValues
            self.largeTimestampGaps = largeTimestampGaps
            self.missingValues = missingValues
            self.monotonicValues = monotonicValues
            self.multipleOperatingModes = multipleOperatingModes
            self.sensorName = sensorName
        }
    }

}

extension LookoutEquipmentClientTypes.SensorsWithShortDateRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on sensors that have shorter date range.
    public struct SensorsWithShortDateRange: Swift.Equatable {
        /// Indicates the number of sensors that have less than 90 days of data.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init (
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }

}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Resource limitations have been exceeded.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartDataIngestionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = self.ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension StartDataIngestionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDataIngestionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being used by the data ingestion job.
    /// This member is required.
    public var datasetName: Swift.String?
    /// Specifies information for the input data for the data ingestion job, including dataset S3 location.
    /// This member is required.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.roleArn = roleArn
    }
}

struct StartDataIngestionJobInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let roleArn: Swift.String?
    let clientToken: Swift.String?
}

extension StartDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartDataIngestionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDataIngestionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDataIngestionJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDataIngestionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartDataIngestionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.status = output.status
        } else {
            self.jobId = nil
            self.status = nil
        }
    }
}

public struct StartDataIngestionJobOutputResponse: Swift.Equatable {
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// Indicates the status of the StartDataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init (
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.jobId = jobId
        self.status = status
    }
}

struct StartDataIngestionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension StartDataIngestionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension StartInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension StartInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be started.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StartInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension StartInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StartInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StartInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being started.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being started.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the ML model being used by the inference scheduler.
    public var modelArn: Swift.String?
    /// The name of the ML model being used by the inference scheduler.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StartInferenceSchedulerOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StartInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    public enum StatisticalIssueStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noIssueDetected
        case potentialIssueDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [StatisticalIssueStatus] {
            return [
                .noIssueDetected,
                .potentialIssueDetected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noIssueDetected: return "NO_ISSUE_DETECTED"
            case .potentialIssueDetected: return "POTENTIAL_ISSUE_DETECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatisticalIssueStatus(rawValue: rawValue) ?? StatisticalIssueStatus.sdkUnknown(rawValue)
        }
    }
}

extension StopInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension StopInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be stopped.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StopInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension StopInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StopInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StopInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference schedule being stopped.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being stopped.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the ML model used by the inference scheduler being stopped.
    public var modelArn: Swift.String?
    /// The name of the ML model used by the inference scheduler being stopped.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StopInferenceSchedulerOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StopInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// A tag is a key-value pair that can be added to a resource as metadata.
    public struct Tag: Swift.Equatable {
        /// The key for the specified tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the specific resource to which the tag should be associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag or tags to be associated with a specific resource. Both the tag key and value are specified.
    /// This member is required.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension LookoutEquipmentClientTypes {
    public enum TargetSamplingRate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt10s
        case pt15m
        case pt15s
        case pt1h
        case pt1m
        case pt1s
        case pt30m
        case pt30s
        case pt5m
        case pt5s
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetSamplingRate] {
            return [
                .pt10m,
                .pt10s,
                .pt15m,
                .pt15s,
                .pt1h,
                .pt1m,
                .pt1s,
                .pt30m,
                .pt30s,
                .pt5m,
                .pt5s,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt10s: return "PT10S"
            case .pt15m: return "PT15M"
            case .pt15s: return "PT15S"
            case .pt1h: return "PT1H"
            case .pt1m: return "PT1M"
            case .pt1s: return "PT1S"
            case .pt30m: return "PT30M"
            case .pt30s: return "PT30S"
            case .pt5m: return "PT5M"
            case .pt5s: return "PT5S"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetSamplingRate(rawValue: rawValue) ?? TargetSamplingRate.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.UnsupportedTimestamps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalNumberOfUnsupportedTimestamps = "TotalNumberOfUnsupportedTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalNumberOfUnsupportedTimestamps = self.totalNumberOfUnsupportedTimestamps {
            try encodeContainer.encode(totalNumberOfUnsupportedTimestamps, forKey: .totalNumberOfUnsupportedTimestamps)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfUnsupportedTimestampsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfUnsupportedTimestamps)
        totalNumberOfUnsupportedTimestamps = totalNumberOfUnsupportedTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information abount unsupported timestamps in the dataset.
    public struct UnsupportedTimestamps: Swift.Equatable {
        /// Indicates the total number of unsupported timestamps across the ingested data.
        /// This member is required.
        public var totalNumberOfUnsupportedTimestamps: Swift.Int?

        public init (
            totalNumberOfUnsupportedTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfUnsupportedTimestamps = totalNumberOfUnsupportedTimestamps
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which the tag is currently associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the key of the tag to be removed from a specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateInferenceSchedulerInput: Swift.Equatable {
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results from the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler to be updated.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler.
    public var roleArn: Swift.String?

    public init (
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.roleArn = roleArn
    }
}

struct UpdateInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
}

extension UpdateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateInferenceSchedulerOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let faultCodes = faultCodes {
            var faultCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faultCodes)
            for faultcode0 in faultCodes {
                try faultCodesContainer.encode(faultcode0)
            }
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension UpdateLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLabelGroupInput: Swift.Equatable {
    /// Updates the code indicating the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// The name of the label group to be updated.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init (
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
    }
}

struct UpdateLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let faultCodes: [Swift.String]?
}

extension UpdateLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
    }
}

extension UpdateLabelGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLabelGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateLabelGroupOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLabelGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLabelGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related AWS service that's being utilized.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
