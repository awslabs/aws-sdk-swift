// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request could not be completed because you do not have access to the resource.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes {
    public enum AutoPromotionResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case modelNotPromoted
        case modelPromoted
        case retrainingCancelled
        case retrainingCustomerError
        case retrainingInternalError
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoPromotionResult] {
            return [
                .modelNotPromoted,
                .modelPromoted,
                .retrainingCancelled,
                .retrainingCustomerError,
                .retrainingInternalError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .modelNotPromoted: return "MODEL_NOT_PROMOTED"
            case .modelPromoted: return "MODEL_PROMOTED"
            case .retrainingCancelled: return "RETRAINING_CANCELLED"
            case .retrainingCustomerError: return "RETRAINING_CUSTOMER_ERROR"
            case .retrainingInternalError: return "RETRAINING_INTERNAL_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoPromotionResult(rawValue: rawValue) ?? AutoPromotionResult.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.CategoricalValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfCategory = "NumberOfCategory"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfCategory = self.numberOfCategory {
            try encodeContainer.encode(numberOfCategory, forKey: .numberOfCategory)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let numberOfCategoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfCategory)
        numberOfCategory = numberOfCategoryDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on categorical values in data.
    public struct CategoricalValues: Swift.Equatable {
        /// Indicates the number of categories in the data.
        public var numberOfCategory: Swift.Int?
        /// Indicates whether there is a potential data issue related to categorical values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            numberOfCategory: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.numberOfCategory = numberOfCategory
            self.status = status
        }
    }

}

extension ConflictException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request could not be completed due to a conflict with the current state of the target resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.CountPercent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case percentage = "Percentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if percentage != 0.0 {
            try encodeContainer.encode(percentage, forKey: .percentage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let percentageDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .percentage) ?? 0.0
        percentage = percentageDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information of count and percentage.
    public struct CountPercent: Swift.Equatable {
        /// Indicates the count of occurences of the given statistic.
        /// This member is required.
        public var count: Swift.Int?
        /// Indicates the percentage of occurances of the given statistic.
        /// This member is required.
        public var percentage: Swift.Float

        public init(
            count: Swift.Int? = nil,
            percentage: Swift.Float = 0.0
        )
        {
            self.count = count
            self.percentage = percentage
        }
    }

}

extension CreateDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = self.datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDatasetInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the ingested data described in the dataset.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDatasetOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateDatasetOutputBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.status = output.status
        } else {
            self.datasetArn = nil
            self.datasetName = nil
            self.status = nil
        }
    }
}

public struct CreateDatasetOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dataset being created.
    public var datasetArn: Swift.String?
    /// The name of the dataset being created.
    public var datasetName: Swift.String?
    /// Indicates the status of the CreateDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.status = status
    }
}

struct CreateDatasetOutputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
}

extension CreateDatasetOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum CreateDatasetOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInferenceSchedulerInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The interval (in minutes) of planned delay at the start of each inference segment. For example, if inference is set to run every ten minutes, the delay is set to five minutes and the time is 09:08. The inference scheduler will wake up at the configured interval (which, without a delay configured, would be 09:10) plus the additional five minute delay time (so 09:15) to check your Amazon S3 bucket. The delay provides a buffer for you to upload data at the same frequency, so that you don't have to stop and restart the scheduler when uploading new data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    /// This member is required.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
    /// This member is required.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source Amazon S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment runs inference on your data. For more information, see [Understanding the inference process](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html).
    /// This member is required.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler being created.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The name of the previously trained machine learning model being used to create the inference scheduler.
    /// This member is required.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the inference scheduler.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateInferenceSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateInferenceSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.status = nil
        }
    }
}

public struct CreateInferenceSchedulerOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being created.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of inference scheduler being created.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates the status of the CreateInferenceScheduler operation.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.status = status
    }
}

struct CreateInferenceSchedulerOutputBody: Swift.Equatable {
    let inferenceSchedulerArn: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension CreateInferenceSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum CreateInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let faultCodes = faultCodes {
            var faultCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faultCodes)
            for faultcode0 in faultCodes {
                try faultCodesContainer.encode(faultcode0)
            }
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLabelGroupInput: Swift.Equatable {
    /// A unique identifier for the request to create a label group. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The acceptable fault codes (indicating the type of anomaly associated with the label) that can be used with this label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// Names a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Tags that provide metadata about the label group you are creating. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
        self.tags = tags
    }
}

struct CreateLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let faultCodes: [Swift.String]?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLabelGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLabelGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
        } else {
            self.labelGroupArn = nil
            self.labelGroupName = nil
        }
    }
}

public struct CreateLabelGroupOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the label group that you have created.
    public var labelGroupArn: Swift.String?
    /// The name of the label group that you have created. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
    }
}

struct CreateLabelGroupOutputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
}

extension CreateLabelGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
    }
}

enum CreateLabelGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupName = "LabelGroupName"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let notes = self.notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let rating = self.rating {
            try encodeContainer.encode(rating.rawValue, forKey: .rating)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension CreateLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLabelInput: Swift.Equatable {
    /// A unique identifier for the request to create a label. If you do not set the client request token, Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The end time of the labeled event.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// Indicates that a label pertains to a particular piece of equipment. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var equipment: Swift.String?
    /// Provides additional information about the label. The fault code must be defined in the FaultCodes attribute of the label group. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The name of a group of labels. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    /// This member is required.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the labeled event.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init(
        clientToken: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupName = labelGroupName
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

struct CreateLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let rating: LookoutEquipmentClientTypes.LabelRating?
    let faultCode: Swift.String?
    let notes: Swift.String?
    let equipment: Swift.String?
    let clientToken: Swift.String?
}

extension CreateLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupName = "LabelGroupName"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateLabelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLabelOutputBody = try responseDecoder.decode(responseBody: data)
            self.labelId = output.labelId
        } else {
            self.labelId = nil
        }
    }
}

public struct CreateLabelOutput: Swift.Equatable {
    /// The ID of the label that you have created.
    public var labelId: Swift.String?

    public init(
        labelId: Swift.String? = nil
    )
    {
        self.labelId = labelId
    }
}

struct CreateLabelOutputBody: Swift.Equatable {
    let labelId: Swift.String?
}

extension CreateLabelOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelId = "LabelId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

enum CreateLabelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataPreProcessingConfiguration = self.dataPreProcessingConfiguration {
            try encodeContainer.encode(dataPreProcessingConfiguration, forKey: .dataPreProcessingConfiguration)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = self.datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let evaluationDataEndTime = self.evaluationDataEndTime {
            try encodeContainer.encodeTimestamp(evaluationDataEndTime, format: .epochSeconds, forKey: .evaluationDataEndTime)
        }
        if let evaluationDataStartTime = self.evaluationDataStartTime {
            try encodeContainer.encodeTimestamp(evaluationDataStartTime, format: .epochSeconds, forKey: .evaluationDataStartTime)
        }
        if let labelsInputConfiguration = self.labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let offCondition = self.offCondition {
            try encodeContainer.encode(offCondition, forKey: .offCondition)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let trainingDataEndTime = self.trainingDataEndTime {
            try encodeContainer.encodeTimestamp(trainingDataEndTime, format: .epochSeconds, forKey: .trainingDataEndTime)
        }
        if let trainingDataStartTime = self.trainingDataStartTime {
            try encodeContainer.encodeTimestamp(trainingDataStartTime, format: .epochSeconds, forKey: .trainingDataStartTime)
        }
    }
}

extension CreateModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The name of the dataset for the machine learning model being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The data schema for the machine learning model being created.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Indicates the time reference in the dataset that should be used to end the subset of evaluation data for the machine learning model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of evaluation data for the machine learning model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// The input configuration for the labels being used for the machine learning model that's being created.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name for the machine learning model to be created.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the machine learning model being created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?
    /// Indicates the time reference in the dataset that should be used to end the subset of training data for the machine learning model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of training data for the machine learning model.
    public var trainingDataStartTime: ClientRuntime.Date?

    public init(
        clientToken: Swift.String? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
    }
}

struct CreateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let clientToken: Swift.String?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let serverSideKmsKeyId: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
    let offCondition: Swift.String?
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}

extension CreateModelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateModelOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.status = output.status
        } else {
            self.modelArn = nil
            self.status = nil
        }
    }
}

public struct CreateModelOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// Indicates the status of the CreateModel operation.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init(
        modelArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.status = status
    }
}

struct CreateModelOutputBody: Swift.Equatable {
    let modelArn: Swift.String?
    let status: LookoutEquipmentClientTypes.ModelStatus?
}

extension CreateModelOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum CreateModelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case lookbackWindow = "LookbackWindow"
        case modelName = "ModelName"
        case promoteMode = "PromoteMode"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let lookbackWindow = self.lookbackWindow {
            try encodeContainer.encode(lookbackWindow, forKey: .lookbackWindow)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let promoteMode = self.promoteMode {
            try encodeContainer.encode(promoteMode.rawValue, forKey: .promoteMode)
        }
        if let retrainingFrequency = self.retrainingFrequency {
            try encodeContainer.encode(retrainingFrequency, forKey: .retrainingFrequency)
        }
        if let retrainingStartDate = self.retrainingStartDate {
            try encodeContainer.encodeTimestamp(retrainingStartDate, format: .epochSeconds, forKey: .retrainingStartDate)
        }
    }
}

extension CreateRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRetrainingSchedulerInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The number of past days of data that will be used for retraining.
    /// This member is required.
    public var lookbackWindow: Swift.String?
    /// The name of the model to add the retraining scheduler to.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates how the service will use new models. In MANAGED mode, new models will automatically be used for inference if they have better performance than the current model. In MANUAL mode, the new models will not be used [until they are manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// This parameter uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) standard to set the frequency at which you want retraining to occur in terms of Years, Months, and/or Days (note: other parameters like Time are not currently supported). The minimum value is 30 days (P30D) and the maximum value is 1 year (P1Y). For example, the following values are valid:
    ///
    /// * P3M15D – Every 3 months and 15 days
    ///
    /// * P2M – Every 2 months
    ///
    /// * P150D – Every 150 days
    /// This member is required.
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: ClientRuntime.Date?

    public init(
        clientToken: Swift.String? = nil,
        lookbackWindow: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.lookbackWindow = lookbackWindow
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
    }
}

struct CreateRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let retrainingStartDate: ClientRuntime.Date?
    let retrainingFrequency: Swift.String?
    let lookbackWindow: Swift.String?
    let promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    let clientToken: Swift.String?
}

extension CreateRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case lookbackWindow = "LookbackWindow"
        case modelName = "ModelName"
        case promoteMode = "PromoteMode"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let retrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .retrainingStartDate)
        retrainingStartDate = retrainingStartDateDecoded
        let retrainingFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrainingFrequency)
        retrainingFrequency = retrainingFrequencyDecoded
        let lookbackWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lookbackWindow)
        lookbackWindow = lookbackWindowDecoded
        let promoteModeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelPromoteMode.self, forKey: .promoteMode)
        promoteMode = promoteModeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateRetrainingSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct CreateRetrainingSchedulerOutput: Swift.Equatable {
    /// The ARN of the model that you added the retraining scheduler to.
    public var modelArn: Swift.String?
    /// The name of the model that you added the retraining scheduler to.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct CreateRetrainingSchedulerOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
}

extension CreateRetrainingSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum CreateRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes.DataIngestionJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = self.ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about a specified data ingestion job, including dataset information, data ingestion configuration, and status.
    public struct DataIngestionJobSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the dataset used in the data ingestion job.
        public var datasetArn: Swift.String?
        /// The name of the dataset used for the data ingestion job.
        public var datasetName: Swift.String?
        /// Specifies information for the input data for the data inference job, including data Amazon S3 location parameters.
        public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
        /// Indicates the job ID of the data ingestion job.
        public var jobId: Swift.String?
        /// Indicates the status of the data ingestion job.
        public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

        public init(
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
            jobId: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
        )
        {
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.ingestionInputConfiguration = ingestionInputConfiguration
            self.jobId = jobId
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.DataPreProcessingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetSamplingRate = "TargetSamplingRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetSamplingRate = self.targetSamplingRate {
            try encodeContainer.encode(targetSamplingRate.rawValue, forKey: .targetSamplingRate)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetSamplingRateDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.TargetSamplingRate.self, forKey: .targetSamplingRate)
        targetSamplingRate = targetSamplingRateDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public struct DataPreProcessingConfiguration: Swift.Equatable {
        /// The sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
        public var targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate?

        public init(
            targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate? = nil
        )
        {
            self.targetSamplingRate = targetSamplingRate
        }
    }

}

extension LookoutEquipmentClientTypes.DataQualitySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duplicateTimestamps = "DuplicateTimestamps"
        case insufficientSensorData = "InsufficientSensorData"
        case invalidSensorData = "InvalidSensorData"
        case missingSensorData = "MissingSensorData"
        case unsupportedTimestamps = "UnsupportedTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duplicateTimestamps = self.duplicateTimestamps {
            try encodeContainer.encode(duplicateTimestamps, forKey: .duplicateTimestamps)
        }
        if let insufficientSensorData = self.insufficientSensorData {
            try encodeContainer.encode(insufficientSensorData, forKey: .insufficientSensorData)
        }
        if let invalidSensorData = self.invalidSensorData {
            try encodeContainer.encode(invalidSensorData, forKey: .invalidSensorData)
        }
        if let missingSensorData = self.missingSensorData {
            try encodeContainer.encode(missingSensorData, forKey: .missingSensorData)
        }
        if let unsupportedTimestamps = self.unsupportedTimestamps {
            try encodeContainer.encode(unsupportedTimestamps, forKey: .unsupportedTimestamps)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insufficientSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InsufficientSensorData.self, forKey: .insufficientSensorData)
        insufficientSensorData = insufficientSensorDataDecoded
        let missingSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingSensorData.self, forKey: .missingSensorData)
        missingSensorData = missingSensorDataDecoded
        let invalidSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InvalidSensorData.self, forKey: .invalidSensorData)
        invalidSensorData = invalidSensorDataDecoded
        let unsupportedTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.UnsupportedTimestamps.self, forKey: .unsupportedTimestamps)
        unsupportedTimestamps = unsupportedTimestampsDecoded
        let duplicateTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DuplicateTimestamps.self, forKey: .duplicateTimestamps)
        duplicateTimestamps = duplicateTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// DataQualitySummary gives aggregated statistics over all the sensors about a completed ingestion job. It primarily gives more information about statistics over different incorrect data like MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, DuplicateTimeStamps.
    public struct DataQualitySummary: Swift.Equatable {
        /// Parameter that gives information about duplicate timestamps in the input data.
        /// This member is required.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps?
        /// Parameter that gives information about insufficient data for sensors in the dataset. This includes information about those sensors that have complete data missing and those with a short date range.
        /// This member is required.
        public var insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData?
        /// Parameter that gives information about data that is invalid over all the sensors in the input data.
        /// This member is required.
        public var invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData?
        /// Parameter that gives information about data that is missing over all the sensors in the input data.
        /// This member is required.
        public var missingSensorData: LookoutEquipmentClientTypes.MissingSensorData?
        /// Parameter that gives information about unsupported timestamps in the input data.
        /// This member is required.
        public var unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps?

        public init(
            duplicateTimestamps: LookoutEquipmentClientTypes.DuplicateTimestamps? = nil,
            insufficientSensorData: LookoutEquipmentClientTypes.InsufficientSensorData? = nil,
            invalidSensorData: LookoutEquipmentClientTypes.InvalidSensorData? = nil,
            missingSensorData: LookoutEquipmentClientTypes.MissingSensorData? = nil,
            unsupportedTimestamps: LookoutEquipmentClientTypes.UnsupportedTimestamps? = nil
        )
        {
            self.duplicateTimestamps = duplicateTimestamps
            self.insufficientSensorData = insufficientSensorData
            self.invalidSensorData = invalidSensorData
            self.missingSensorData = missingSensorData
            self.unsupportedTimestamps = unsupportedTimestamps
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DataUploadFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt15m
        case pt1h
        case pt30m
        case pt5m
        case sdkUnknown(Swift.String)

        public static var allCases: [DataUploadFrequency] {
            return [
                .pt10m,
                .pt15m,
                .pt1h,
                .pt30m,
                .pt5m,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt15m: return "PT15M"
            case .pt1h: return "PT1H"
            case .pt30m: return "PT30M"
            case .pt5m: return "PT5M"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataUploadFrequency(rawValue: rawValue) ?? DataUploadFrequency.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSchema: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineDataSchema = "InlineDataSchema"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineDataSchema = self.inlineDataSchema {
            try encodeContainer.encode(inlineDataSchema, forKey: .inlineDataSchema)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineDataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inlineDataSchema)
        inlineDataSchema = inlineDataSchemaDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the data schema used with the given dataset.
    public struct DatasetSchema: Swift.Equatable {
        /// The data schema used within the given dataset.
        public var inlineDataSchema: Swift.String?

        public init(
            inlineDataSchema: Swift.String? = nil
        )
        {
            self.inlineDataSchema = inlineDataSchema
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case created
        case importInProgress
        case ingestionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .created,
                .importInProgress,
                .ingestionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .ingestionInProgress: return "INGESTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatus(rawValue: rawValue) ?? DatasetStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific data set, including name, ARN, and status.
    public struct DatasetSummary: Swift.Equatable {
        /// The time at which the dataset was created in Amazon Lookout for Equipment.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the specified dataset.
        public var datasetArn: Swift.String?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// Indicates the status of the dataset.
        public var status: LookoutEquipmentClientTypes.DatasetStatus?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.DatasetStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.status = status
        }
    }

}

extension DeleteDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

extension DeleteDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDatasetInput: Swift.Equatable {
    /// The name of the dataset to be deleted.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DeleteDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
}

extension DeleteDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DeleteDatasetOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDatasetOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDatasetOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension DeleteInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be deleted.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DeleteInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension DeleteInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DeleteInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteInferenceSchedulerOutput: Swift.Equatable {

    public init() { }
}

enum DeleteInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension DeleteLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLabelGroupInput: Swift.Equatable {
    /// The name of the label group that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

struct DeleteLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
}

extension DeleteLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension DeleteLabelGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLabelGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLabelGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
    }
}

extension DeleteLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLabelInput: Swift.Equatable {
    /// The name of the label group that contains the label that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// The ID of the label that you want to delete.
    /// This member is required.
    public var labelId: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

struct DeleteLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelId: Swift.String?
}

extension DeleteLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

extension DeleteLabelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLabelOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLabelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DeleteModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelInput: Swift.Equatable {
    /// The name of the machine learning model to be deleted.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DeleteModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DeleteModelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteModelOutput: Swift.Equatable {

    public init() { }
}

enum DeleteModelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource for which the resource policy should be deleted.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DeleteRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRetrainingSchedulerInput: Swift.Equatable {
    /// The name of the model whose retraining scheduler you want to delete.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DeleteRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DeleteRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteRetrainingSchedulerOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDataIngestionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeDataIngestionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataIngestionJobInput: Swift.Equatable {
    /// The job ID of the data ingestion job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeDataIngestionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeDataIngestionJobOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDataIngestionJobOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataEndTime = output.dataEndTime
            self.dataQualitySummary = output.dataQualitySummary
            self.dataStartTime = output.dataStartTime
            self.datasetArn = output.datasetArn
            self.failedReason = output.failedReason
            self.ingestedDataSize = output.ingestedDataSize
            self.ingestedFilesSummary = output.ingestedFilesSummary
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.jobId = output.jobId
            self.roleArn = output.roleArn
            self.sourceDatasetArn = output.sourceDatasetArn
            self.status = output.status
            self.statusDetail = output.statusDetail
        } else {
            self.createdAt = nil
            self.dataEndTime = nil
            self.dataQualitySummary = nil
            self.dataStartTime = nil
            self.datasetArn = nil
            self.failedReason = nil
            self.ingestedDataSize = nil
            self.ingestedFilesSummary = nil
            self.ingestionInputConfiguration = nil
            self.jobId = nil
            self.roleArn = nil
            self.sourceDatasetArn = nil
            self.status = nil
            self.statusDetail = nil
        }
    }
}

public struct DescribeDataIngestionJobOutput: Swift.Equatable {
    /// The time at which the data ingestion job was created.
    public var createdAt: ClientRuntime.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataEndTime: ClientRuntime.Date?
    /// Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job.
    public var dataStartTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job.
    public var datasetArn: Swift.String?
    /// Specifies the reason for failure when a data ingestion job has failed.
    public var failedReason: Swift.String?
    /// Indicates the size of the ingested dataset.
    public var ingestedDataSize: Swift.Int?
    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested.
    public var roleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the source dataset from which the data used for the data ingestion job was imported from.
    public var sourceDatasetArn: Swift.String?
    /// Indicates the status of the DataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?
    /// Provides details about status of the ingestion job that is currently in progress.
    public var statusDetail: Swift.String?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        dataEndTime: ClientRuntime.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        failedReason: Swift.String? = nil,
        ingestedDataSize: Swift.Int? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        jobId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil,
        statusDetail: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.failedReason = failedReason
        self.ingestedDataSize = ingestedDataSize
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.jobId = jobId
        self.roleArn = roleArn
        self.sourceDatasetArn = sourceDatasetArn
        self.status = status
        self.statusDetail = statusDetail
    }
}

struct DescribeDataIngestionJobOutputBody: Swift.Equatable {
    let jobId: Swift.String?
    let datasetArn: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let roleArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
    let failedReason: Swift.String?
    let dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    let ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    let statusDetail: Swift.String?
    let ingestedDataSize: Swift.Int?
    let dataStartTime: ClientRuntime.Date?
    let dataEndTime: ClientRuntime.Date?
    let sourceDatasetArn: Swift.String?
}

extension DescribeDataIngestionJobOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataEndTime = "DataEndTime"
        case dataQualitySummary = "DataQualitySummary"
        case dataStartTime = "DataStartTime"
        case datasetArn = "DatasetArn"
        case failedReason = "FailedReason"
        case ingestedDataSize = "IngestedDataSize"
        case ingestedFilesSummary = "IngestedFilesSummary"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case roleArn = "RoleArn"
        case sourceDatasetArn = "SourceDatasetArn"
        case status = "Status"
        case statusDetail = "StatusDetail"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let dataQualitySummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataQualitySummary.self, forKey: .dataQualitySummary)
        dataQualitySummary = dataQualitySummaryDecoded
        let ingestedFilesSummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestedFilesSummary.self, forKey: .ingestedFilesSummary)
        ingestedFilesSummary = ingestedFilesSummaryDecoded
        let statusDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetail)
        statusDetail = statusDetailDecoded
        let ingestedDataSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestedDataSize)
        ingestedDataSize = ingestedDataSizeDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let sourceDatasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDatasetArn)
        sourceDatasetArn = sourceDatasetArnDecoded
    }
}

enum DescribeDataIngestionJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

extension DescribeDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDatasetInput: Swift.Equatable {
    /// The name of the dataset to be described.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DescribeDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
}

extension DescribeDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DescribeDatasetOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDatasetOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataEndTime = output.dataEndTime
            self.dataQualitySummary = output.dataQualitySummary
            self.dataStartTime = output.dataStartTime
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.ingestedFilesSummary = output.ingestedFilesSummary
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.lastUpdatedAt = output.lastUpdatedAt
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.sourceDatasetArn = output.sourceDatasetArn
            self.status = output.status
        } else {
            self.createdAt = nil
            self.dataEndTime = nil
            self.dataQualitySummary = nil
            self.dataStartTime = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.ingestedFilesSummary = nil
            self.ingestionInputConfiguration = nil
            self.lastUpdatedAt = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.sourceDatasetArn = nil
            self.status = nil
        }
    }
}

public struct DescribeDatasetOutput: Swift.Equatable {
    /// Specifies the time the dataset was created in Lookout for Equipment.
    public var createdAt: ClientRuntime.Date?
    /// Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataEndTime: ClientRuntime.Date?
    /// Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps.
    public var dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    /// Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset.
    public var dataStartTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being described.
    public var datasetName: Swift.String?
    /// IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id.
    public var ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Specifies the time the dataset was last updated, if it was.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the source dataset from which the current data being described was imported from.
    public var sourceDatasetArn: Swift.String?
    /// Indicates the status of the dataset.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        dataEndTime: ClientRuntime.Date? = nil,
        dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary? = nil,
        dataStartTime: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.dataEndTime = dataEndTime
        self.dataQualitySummary = dataQualitySummary
        self.dataStartTime = dataStartTime
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.ingestedFilesSummary = ingestedFilesSummary
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.lastUpdatedAt = lastUpdatedAt
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceDatasetArn = sourceDatasetArn
        self.status = status
    }
}

struct DescribeDatasetOutputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
    let schema: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    let ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    let roleArn: Swift.String?
    let dataStartTime: ClientRuntime.Date?
    let dataEndTime: ClientRuntime.Date?
    let sourceDatasetArn: Swift.String?
}

extension DescribeDatasetOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataEndTime = "DataEndTime"
        case dataQualitySummary = "DataQualitySummary"
        case dataStartTime = "DataStartTime"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestedFilesSummary = "IngestedFilesSummary"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case lastUpdatedAt = "LastUpdatedAt"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceDatasetArn = "SourceDatasetArn"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let dataQualitySummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataQualitySummary.self, forKey: .dataQualitySummary)
        dataQualitySummary = dataQualitySummaryDecoded
        let ingestedFilesSummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestedFilesSummary.self, forKey: .ingestedFilesSummary)
        ingestedFilesSummary = ingestedFilesSummaryDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let sourceDatasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDatasetArn)
        sourceDatasetArn = sourceDatasetArnDecoded
    }
}

enum DescribeDatasetOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension DescribeInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler being described.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DescribeInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension DescribeInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DescribeInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeInferenceSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataDelayOffsetInMinutes = output.dataDelayOffsetInMinutes
            self.dataInputConfiguration = output.dataInputConfiguration
            self.dataOutputConfiguration = output.dataOutputConfiguration
            self.dataUploadFrequency = output.dataUploadFrequency
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.latestInferenceResult = output.latestInferenceResult
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.roleArn = output.roleArn
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.dataDelayOffsetInMinutes = nil
            self.dataInputConfiguration = nil
            self.dataOutputConfiguration = nil
            self.dataUploadFrequency = nil
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.latestInferenceResult = nil
            self.modelArn = nil
            self.modelName = nil
            self.roleArn = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeInferenceSchedulerOutput: Swift.Equatable {
    /// Specifies the time at which the inference scheduler was created.
    public var createdAt: ClientRuntime.Date?
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results for the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// Specifies how often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The Amazon Resource Name (ARN) of the inference scheduler being described.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being described.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
    public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
    /// The Amazon Resource Name (ARN) of the machine learning model of the inference scheduler being described.
    public var modelArn: Swift.String?
    /// The name of the machine learning model of the inference scheduler being described.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler being described.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    /// Specifies the time at which the inference scheduler was last updated, if it was.
    public var updatedAt: ClientRuntime.Date?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.latestInferenceResult = latestInferenceResult
        self.modelArn = modelArn
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeInferenceSchedulerOutputBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
}

extension DescribeInferenceSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case latestInferenceResult = "LatestInferenceResult"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let latestInferenceResultDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LatestInferenceResult.self, forKey: .latestInferenceResult)
        latestInferenceResult = latestInferenceResultDecoded
    }
}

enum DescribeInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension DescribeLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLabelGroupInput: Swift.Equatable {
    /// Returns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
    }
}

struct DescribeLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
}

extension DescribeLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension DescribeLabelGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLabelGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.faultCodes = output.faultCodes
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.faultCodes = nil
            self.labelGroupArn = nil
            self.labelGroupName = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeLabelGroupOutput: Swift.Equatable {
    /// The time at which the label group was created.
    public var createdAt: ClientRuntime.Date?
    /// Codes indicating the type of anomaly associated with the labels in the lagbel group.
    public var faultCodes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the label group.
    public var labelGroupArn: Swift.String?
    /// The name of the label group.
    public var labelGroupName: Swift.String?
    /// The time at which the label group was updated.
    public var updatedAt: ClientRuntime.Date?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        faultCodes: [Swift.String]? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.faultCodes = faultCodes
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.updatedAt = updatedAt
    }
}

struct DescribeLabelGroupOutputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
    let faultCodes: [Swift.String]?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
}

extension DescribeLabelGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case faultCodes = "FaultCodes"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case updatedAt = "UpdatedAt"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

enum DescribeLabelGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
    }
}

extension DescribeLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLabelInput: Swift.Equatable {
    /// Returns the name of the group containing the label.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Returns the ID of the label.
    /// This member is required.
    public var labelId: Swift.String?

    public init(
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil
    )
    {
        self.labelGroupName = labelGroupName
        self.labelId = labelId
    }
}

struct DescribeLabelInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelId: Swift.String?
}

extension DescribeLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
    }
}

extension DescribeLabelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLabelOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.endTime = output.endTime
            self.equipment = output.equipment
            self.faultCode = output.faultCode
            self.labelGroupArn = output.labelGroupArn
            self.labelGroupName = output.labelGroupName
            self.labelId = output.labelId
            self.notes = output.notes
            self.rating = output.rating
            self.startTime = output.startTime
        } else {
            self.createdAt = nil
            self.endTime = nil
            self.equipment = nil
            self.faultCode = nil
            self.labelGroupArn = nil
            self.labelGroupName = nil
            self.labelId = nil
            self.notes = nil
            self.rating = nil
            self.startTime = nil
        }
    }
}

public struct DescribeLabelOutput: Swift.Equatable {
    /// The time at which the label was created.
    public var createdAt: ClientRuntime.Date?
    /// The end time of the requested label.
    public var endTime: ClientRuntime.Date?
    /// Indicates that a label pertains to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCode: Swift.String?
    /// The Amazon Resource Name (ARN) of the requested label group.
    public var labelGroupArn: Swift.String?
    /// The name of the requested label group.
    public var labelGroupName: Swift.String?
    /// The ID of the requested label.
    public var labelId: Swift.String?
    /// Metadata providing additional information about the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var notes: Swift.String?
    /// Indicates whether a labeled event represents an anomaly.
    public var rating: LookoutEquipmentClientTypes.LabelRating?
    /// The start time of the requested label.
    public var startTime: ClientRuntime.Date?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        endTime: ClientRuntime.Date? = nil,
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        labelGroupArn: Swift.String? = nil,
        labelGroupName: Swift.String? = nil,
        labelId: Swift.String? = nil,
        notes: Swift.String? = nil,
        rating: LookoutEquipmentClientTypes.LabelRating? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.endTime = endTime
        self.equipment = equipment
        self.faultCode = faultCode
        self.labelGroupArn = labelGroupArn
        self.labelGroupName = labelGroupName
        self.labelId = labelId
        self.notes = notes
        self.rating = rating
        self.startTime = startTime
    }
}

struct DescribeLabelOutputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let labelGroupArn: Swift.String?
    let labelId: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let rating: LookoutEquipmentClientTypes.LabelRating?
    let faultCode: Swift.String?
    let notes: Swift.String?
    let equipment: Swift.String?
    let createdAt: ClientRuntime.Date?
}

extension DescribeLabelOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
        case notes = "Notes"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

enum DescribeLabelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DescribeModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelInput: Swift.Equatable {
    /// The name of the machine learning model to be described.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DescribeModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DescribeModelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeModelOutputBody = try responseDecoder.decode(responseBody: data)
            self.accumulatedInferenceDataEndTime = output.accumulatedInferenceDataEndTime
            self.accumulatedInferenceDataStartTime = output.accumulatedInferenceDataStartTime
            self.activeModelVersion = output.activeModelVersion
            self.activeModelVersionArn = output.activeModelVersionArn
            self.createdAt = output.createdAt
            self.dataPreProcessingConfiguration = output.dataPreProcessingConfiguration
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.evaluationDataEndTime = output.evaluationDataEndTime
            self.evaluationDataStartTime = output.evaluationDataStartTime
            self.failedReason = output.failedReason
            self.importJobEndTime = output.importJobEndTime
            self.importJobStartTime = output.importJobStartTime
            self.labelsInputConfiguration = output.labelsInputConfiguration
            self.lastUpdatedTime = output.lastUpdatedTime
            self.latestScheduledRetrainingAvailableDataInDays = output.latestScheduledRetrainingAvailableDataInDays
            self.latestScheduledRetrainingFailedReason = output.latestScheduledRetrainingFailedReason
            self.latestScheduledRetrainingModelVersion = output.latestScheduledRetrainingModelVersion
            self.latestScheduledRetrainingStartTime = output.latestScheduledRetrainingStartTime
            self.latestScheduledRetrainingStatus = output.latestScheduledRetrainingStatus
            self.modelArn = output.modelArn
            self.modelMetrics = output.modelMetrics
            self.modelName = output.modelName
            self.modelVersionActivatedAt = output.modelVersionActivatedAt
            self.nextScheduledRetrainingStartDate = output.nextScheduledRetrainingStartDate
            self.offCondition = output.offCondition
            self.previousActiveModelVersion = output.previousActiveModelVersion
            self.previousActiveModelVersionArn = output.previousActiveModelVersionArn
            self.previousModelVersionActivatedAt = output.previousModelVersionActivatedAt
            self.priorModelMetrics = output.priorModelMetrics
            self.retrainingSchedulerStatus = output.retrainingSchedulerStatus
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.sourceModelVersionArn = output.sourceModelVersionArn
            self.status = output.status
            self.trainingDataEndTime = output.trainingDataEndTime
            self.trainingDataStartTime = output.trainingDataStartTime
            self.trainingExecutionEndTime = output.trainingExecutionEndTime
            self.trainingExecutionStartTime = output.trainingExecutionStartTime
        } else {
            self.accumulatedInferenceDataEndTime = nil
            self.accumulatedInferenceDataStartTime = nil
            self.activeModelVersion = nil
            self.activeModelVersionArn = nil
            self.createdAt = nil
            self.dataPreProcessingConfiguration = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.evaluationDataEndTime = nil
            self.evaluationDataStartTime = nil
            self.failedReason = nil
            self.importJobEndTime = nil
            self.importJobStartTime = nil
            self.labelsInputConfiguration = nil
            self.lastUpdatedTime = nil
            self.latestScheduledRetrainingAvailableDataInDays = nil
            self.latestScheduledRetrainingFailedReason = nil
            self.latestScheduledRetrainingModelVersion = nil
            self.latestScheduledRetrainingStartTime = nil
            self.latestScheduledRetrainingStatus = nil
            self.modelArn = nil
            self.modelMetrics = nil
            self.modelName = nil
            self.modelVersionActivatedAt = nil
            self.nextScheduledRetrainingStartDate = nil
            self.offCondition = nil
            self.previousActiveModelVersion = nil
            self.previousActiveModelVersionArn = nil
            self.previousModelVersionActivatedAt = nil
            self.priorModelMetrics = nil
            self.retrainingSchedulerStatus = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.sourceModelVersionArn = nil
            self.status = nil
            self.trainingDataEndTime = nil
            self.trainingDataStartTime = nil
            self.trainingExecutionEndTime = nil
            self.trainingExecutionStartTime = nil
        }
    }
}

public struct DescribeModelOutput: Swift.Equatable {
    /// Indicates the end time of the inference data that has been accumulated.
    public var accumulatedInferenceDataEndTime: ClientRuntime.Date?
    /// Indicates the start time of the inference data that has been accumulated.
    public var accumulatedInferenceDataStartTime: ClientRuntime.Date?
    /// The name of the model version used by the inference schedular when running a scheduled inference execution.
    public var activeModelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.
    public var activeModelVersionArn: Swift.String?
    /// Indicates the time and date at which the machine learning model was created.
    public var createdAt: ClientRuntime.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being used by the machine learning being described.
    public var datasetName: Swift.String?
    /// Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// If the training of the machine learning model failed, this indicates the reason for that failure.
    public var failedReason: Swift.String?
    /// The date and time when the import job was completed. This field appears if the active model version was imported.
    public var importJobEndTime: ClientRuntime.Date?
    /// The date and time when the import job was started. This field appears if the active model version was imported.
    public var importJobStartTime: ClientRuntime.Date?
    /// Specifies configuration information about the labels input, including its S3 location.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the machine learning model was updated. The type of update is not specified.
    public var lastUpdatedTime: ClientRuntime.Date?
    /// Indicates the number of days of data used in the most recent scheduled retraining run.
    public var latestScheduledRetrainingAvailableDataInDays: Swift.Int?
    /// If the model version was generated by retraining and the training failed, this indicates the reason for that failure.
    public var latestScheduledRetrainingFailedReason: Swift.String?
    /// Indicates the most recent model version that was generated by retraining.
    public var latestScheduledRetrainingModelVersion: Swift.Int?
    /// Indicates the start time of the most recent scheduled retraining run.
    public var latestScheduledRetrainingStartTime: ClientRuntime.Date?
    /// Indicates the status of the most recent scheduled retraining run.
    public var latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus?
    /// The Amazon Resource Name (ARN) of the machine learning model being described.
    public var modelArn: Swift.String?
    /// The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the machine learning model being described.
    public var modelName: Swift.String?
    /// The date the active model version was activated.
    public var modelVersionActivatedAt: ClientRuntime.Date?
    /// Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var nextScheduledRetrainingStartDate: ClientRuntime.Date?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The model version that was set as the active model version prior to the current active model version.
    public var previousActiveModelVersion: Swift.Int?
    /// The ARN of the model version that was set as the active model version prior to the current active model version.
    public var previousActiveModelVersionArn: Swift.String?
    /// The date and time when the previous active model version was activated.
    public var previousModelVersionActivatedAt: ClientRuntime.Date?
    /// If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.
    public var priorModelMetrics: Swift.String?
    /// Indicates the status of the retraining scheduler.
    public var retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.
    public var sourceModelVersionArn: Swift.String?
    /// Specifies the current status of the model being described. Status describes the status of the most recent action of the model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?
    /// Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model.
    public var trainingDataStartTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the machine learning model was completed.
    public var trainingExecutionEndTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the machine learning model began.
    public var trainingExecutionStartTime: ClientRuntime.Date?

    public init(
        accumulatedInferenceDataEndTime: ClientRuntime.Date? = nil,
        accumulatedInferenceDataStartTime: ClientRuntime.Date? = nil,
        activeModelVersion: Swift.Int? = nil,
        activeModelVersionArn: Swift.String? = nil,
        createdAt: ClientRuntime.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        failedReason: Swift.String? = nil,
        importJobEndTime: ClientRuntime.Date? = nil,
        importJobStartTime: ClientRuntime.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        latestScheduledRetrainingAvailableDataInDays: Swift.Int? = nil,
        latestScheduledRetrainingFailedReason: Swift.String? = nil,
        latestScheduledRetrainingModelVersion: Swift.Int? = nil,
        latestScheduledRetrainingStartTime: ClientRuntime.Date? = nil,
        latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
        modelArn: Swift.String? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersionActivatedAt: ClientRuntime.Date? = nil,
        nextScheduledRetrainingStartDate: ClientRuntime.Date? = nil,
        offCondition: Swift.String? = nil,
        previousActiveModelVersion: Swift.Int? = nil,
        previousActiveModelVersionArn: Swift.String? = nil,
        previousModelVersionActivatedAt: ClientRuntime.Date? = nil,
        priorModelMetrics: Swift.String? = nil,
        retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil,
        trainingExecutionEndTime: ClientRuntime.Date? = nil,
        trainingExecutionStartTime: ClientRuntime.Date? = nil
    )
    {
        self.accumulatedInferenceDataEndTime = accumulatedInferenceDataEndTime
        self.accumulatedInferenceDataStartTime = accumulatedInferenceDataStartTime
        self.activeModelVersion = activeModelVersion
        self.activeModelVersionArn = activeModelVersionArn
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.importJobEndTime = importJobEndTime
        self.importJobStartTime = importJobStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.latestScheduledRetrainingAvailableDataInDays = latestScheduledRetrainingAvailableDataInDays
        self.latestScheduledRetrainingFailedReason = latestScheduledRetrainingFailedReason
        self.latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersion
        self.latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTime
        self.latestScheduledRetrainingStatus = latestScheduledRetrainingStatus
        self.modelArn = modelArn
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.modelVersionActivatedAt = modelVersionActivatedAt
        self.nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDate
        self.offCondition = offCondition
        self.previousActiveModelVersion = previousActiveModelVersion
        self.previousActiveModelVersionArn = previousActiveModelVersionArn
        self.previousModelVersionActivatedAt = previousModelVersionActivatedAt
        self.priorModelMetrics = priorModelMetrics
        self.retrainingSchedulerStatus = retrainingSchedulerStatus
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

struct DescribeModelOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let schema: Swift.String?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let status: LookoutEquipmentClientTypes.ModelStatus?
    let trainingExecutionStartTime: ClientRuntime.Date?
    let trainingExecutionEndTime: ClientRuntime.Date?
    let failedReason: Swift.String?
    let modelMetrics: Swift.String?
    let lastUpdatedTime: ClientRuntime.Date?
    let createdAt: ClientRuntime.Date?
    let serverSideKmsKeyId: Swift.String?
    let offCondition: Swift.String?
    let sourceModelVersionArn: Swift.String?
    let importJobStartTime: ClientRuntime.Date?
    let importJobEndTime: ClientRuntime.Date?
    let activeModelVersion: Swift.Int?
    let activeModelVersionArn: Swift.String?
    let modelVersionActivatedAt: ClientRuntime.Date?
    let previousActiveModelVersion: Swift.Int?
    let previousActiveModelVersionArn: Swift.String?
    let previousModelVersionActivatedAt: ClientRuntime.Date?
    let priorModelMetrics: Swift.String?
    let latestScheduledRetrainingFailedReason: Swift.String?
    let latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus?
    let latestScheduledRetrainingModelVersion: Swift.Int?
    let latestScheduledRetrainingStartTime: ClientRuntime.Date?
    let latestScheduledRetrainingAvailableDataInDays: Swift.Int?
    let nextScheduledRetrainingStartDate: ClientRuntime.Date?
    let accumulatedInferenceDataStartTime: ClientRuntime.Date?
    let accumulatedInferenceDataEndTime: ClientRuntime.Date?
    let retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
}

extension DescribeModelOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accumulatedInferenceDataEndTime = "AccumulatedInferenceDataEndTime"
        case accumulatedInferenceDataStartTime = "AccumulatedInferenceDataStartTime"
        case activeModelVersion = "ActiveModelVersion"
        case activeModelVersionArn = "ActiveModelVersionArn"
        case createdAt = "CreatedAt"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case failedReason = "FailedReason"
        case importJobEndTime = "ImportJobEndTime"
        case importJobStartTime = "ImportJobStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case lastUpdatedTime = "LastUpdatedTime"
        case latestScheduledRetrainingAvailableDataInDays = "LatestScheduledRetrainingAvailableDataInDays"
        case latestScheduledRetrainingFailedReason = "LatestScheduledRetrainingFailedReason"
        case latestScheduledRetrainingModelVersion = "LatestScheduledRetrainingModelVersion"
        case latestScheduledRetrainingStartTime = "LatestScheduledRetrainingStartTime"
        case latestScheduledRetrainingStatus = "LatestScheduledRetrainingStatus"
        case modelArn = "ModelArn"
        case modelMetrics = "ModelMetrics"
        case modelName = "ModelName"
        case modelVersionActivatedAt = "ModelVersionActivatedAt"
        case nextScheduledRetrainingStartDate = "NextScheduledRetrainingStartDate"
        case offCondition = "OffCondition"
        case previousActiveModelVersion = "PreviousActiveModelVersion"
        case previousActiveModelVersionArn = "PreviousActiveModelVersionArn"
        case previousModelVersionActivatedAt = "PreviousModelVersionActivatedAt"
        case priorModelMetrics = "PriorModelMetrics"
        case retrainingSchedulerStatus = "RetrainingSchedulerStatus"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceModelVersionArn = "SourceModelVersionArn"
        case status = "Status"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
        case trainingExecutionEndTime = "TrainingExecutionEndTime"
        case trainingExecutionStartTime = "TrainingExecutionStartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let trainingExecutionStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionStartTime)
        trainingExecutionStartTime = trainingExecutionStartTimeDecoded
        let trainingExecutionEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionEndTime)
        trainingExecutionEndTime = trainingExecutionEndTimeDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
        let sourceModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelVersionArn)
        sourceModelVersionArn = sourceModelVersionArnDecoded
        let importJobStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .importJobStartTime)
        importJobStartTime = importJobStartTimeDecoded
        let importJobEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .importJobEndTime)
        importJobEndTime = importJobEndTimeDecoded
        let activeModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeModelVersion)
        activeModelVersion = activeModelVersionDecoded
        let activeModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeModelVersionArn)
        activeModelVersionArn = activeModelVersionArnDecoded
        let modelVersionActivatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .modelVersionActivatedAt)
        modelVersionActivatedAt = modelVersionActivatedAtDecoded
        let previousActiveModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .previousActiveModelVersion)
        previousActiveModelVersion = previousActiveModelVersionDecoded
        let previousActiveModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousActiveModelVersionArn)
        previousActiveModelVersionArn = previousActiveModelVersionArnDecoded
        let previousModelVersionActivatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .previousModelVersionActivatedAt)
        previousModelVersionActivatedAt = previousModelVersionActivatedAtDecoded
        let priorModelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priorModelMetrics)
        priorModelMetrics = priorModelMetricsDecoded
        let latestScheduledRetrainingFailedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestScheduledRetrainingFailedReason)
        latestScheduledRetrainingFailedReason = latestScheduledRetrainingFailedReasonDecoded
        let latestScheduledRetrainingStatusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .latestScheduledRetrainingStatus)
        latestScheduledRetrainingStatus = latestScheduledRetrainingStatusDecoded
        let latestScheduledRetrainingModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestScheduledRetrainingModelVersion)
        latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersionDecoded
        let latestScheduledRetrainingStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestScheduledRetrainingStartTime)
        latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTimeDecoded
        let latestScheduledRetrainingAvailableDataInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestScheduledRetrainingAvailableDataInDays)
        latestScheduledRetrainingAvailableDataInDays = latestScheduledRetrainingAvailableDataInDaysDecoded
        let nextScheduledRetrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .nextScheduledRetrainingStartDate)
        nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDateDecoded
        let accumulatedInferenceDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .accumulatedInferenceDataStartTime)
        accumulatedInferenceDataStartTime = accumulatedInferenceDataStartTimeDecoded
        let accumulatedInferenceDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .accumulatedInferenceDataEndTime)
        accumulatedInferenceDataEndTime = accumulatedInferenceDataEndTimeDecoded
        let retrainingSchedulerStatusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .retrainingSchedulerStatus)
        retrainingSchedulerStatus = retrainingSchedulerStatusDecoded
    }
}

enum DescribeModelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeModelVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }
}

extension DescribeModelVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelVersionInput: Swift.Equatable {
    /// The name of the machine learning model that this version belongs to.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the machine learning model.
    /// This member is required.
    public var modelVersion: Swift.Int?

    public init(
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil
    )
    {
        self.modelName = modelName
        self.modelVersion = modelVersion
    }
}

struct DescribeModelVersionInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelVersion: Swift.Int?
}

extension DescribeModelVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
    }
}

extension DescribeModelVersionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeModelVersionOutputBody = try responseDecoder.decode(responseBody: data)
            self.autoPromotionResult = output.autoPromotionResult
            self.autoPromotionResultReason = output.autoPromotionResultReason
            self.createdAt = output.createdAt
            self.dataPreProcessingConfiguration = output.dataPreProcessingConfiguration
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.evaluationDataEndTime = output.evaluationDataEndTime
            self.evaluationDataStartTime = output.evaluationDataStartTime
            self.failedReason = output.failedReason
            self.importJobEndTime = output.importJobEndTime
            self.importJobStartTime = output.importJobStartTime
            self.importedDataSizeInBytes = output.importedDataSizeInBytes
            self.labelsInputConfiguration = output.labelsInputConfiguration
            self.lastUpdatedTime = output.lastUpdatedTime
            self.modelArn = output.modelArn
            self.modelMetrics = output.modelMetrics
            self.modelName = output.modelName
            self.modelVersion = output.modelVersion
            self.modelVersionArn = output.modelVersionArn
            self.offCondition = output.offCondition
            self.priorModelMetrics = output.priorModelMetrics
            self.retrainingAvailableDataInDays = output.retrainingAvailableDataInDays
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.sourceModelVersionArn = output.sourceModelVersionArn
            self.sourceType = output.sourceType
            self.status = output.status
            self.trainingDataEndTime = output.trainingDataEndTime
            self.trainingDataStartTime = output.trainingDataStartTime
            self.trainingExecutionEndTime = output.trainingExecutionEndTime
            self.trainingExecutionStartTime = output.trainingExecutionStartTime
        } else {
            self.autoPromotionResult = nil
            self.autoPromotionResultReason = nil
            self.createdAt = nil
            self.dataPreProcessingConfiguration = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.evaluationDataEndTime = nil
            self.evaluationDataStartTime = nil
            self.failedReason = nil
            self.importJobEndTime = nil
            self.importJobStartTime = nil
            self.importedDataSizeInBytes = nil
            self.labelsInputConfiguration = nil
            self.lastUpdatedTime = nil
            self.modelArn = nil
            self.modelMetrics = nil
            self.modelName = nil
            self.modelVersion = nil
            self.modelVersionArn = nil
            self.offCondition = nil
            self.priorModelMetrics = nil
            self.retrainingAvailableDataInDays = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.sourceModelVersionArn = nil
            self.sourceType = nil
            self.status = nil
            self.trainingDataEndTime = nil
            self.trainingDataStartTime = nil
            self.trainingExecutionEndTime = nil
            self.trainingExecutionStartTime = nil
        }
    }
}

public struct DescribeModelVersionOutput: Swift.Equatable {
    /// Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining.
    public var autoPromotionResult: LookoutEquipmentClientTypes.AutoPromotionResult?
    /// Indicates the reason for the AutoPromotionResult. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using MANUAL promote mode. The model will be promoted in MANAGED promote mode if the performance is better than the previous model.
    public var autoPromotionResultReason: Swift.String?
    /// Indicates the time and date at which the machine learning model version was created.
    public var createdAt: ClientRuntime.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resource Name (ARN) of the dataset used to train the model version.
    public var datasetArn: Swift.String?
    /// The name of the dataset used to train the model version.
    public var datasetName: Swift.String?
    /// The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// The failure message if the training of the model version failed.
    public var failedReason: Swift.String?
    /// The date and time when the import job completed. This field appears if the model version was imported.
    public var importJobEndTime: ClientRuntime.Date?
    /// The date and time when the import job began. This field appears if the model version was imported.
    public var importJobStartTime: ClientRuntime.Date?
    /// The size in bytes of the imported data. This field appears if the model version was imported.
    public var importedDataSizeInBytes: Swift.Int?
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the machine learning model version was updated.
    public var lastUpdatedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.
    public var modelArn: Swift.String?
    /// Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the machine learning model that this version belongs to.
    public var modelName: Swift.String?
    /// The version of the machine learning model.
    public var modelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version.
    public var modelVersionArn: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.
    public var priorModelMetrics: Swift.String?
    /// Indicates the number of days of data used in the most recent scheduled retraining run.
    public var retrainingAvailableDataInDays: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role that was used to train the model version.
    public var roleArn: Swift.String?
    /// The schema of the data used to train the model version.
    public var schema: Swift.String?
    /// The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// If model version was imported, then this field is the arn of the source model version.
    public var sourceModelVersionArn: Swift.String?
    /// Indicates whether this model version was created by training or by importing.
    public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    /// The current status of the model version.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?
    /// The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.
    public var trainingDataStartTime: ClientRuntime.Date?
    /// The time when the training of the version completed.
    public var trainingExecutionEndTime: ClientRuntime.Date?
    /// The time when the training of the version began.
    public var trainingExecutionStartTime: ClientRuntime.Date?

    public init(
        autoPromotionResult: LookoutEquipmentClientTypes.AutoPromotionResult? = nil,
        autoPromotionResultReason: Swift.String? = nil,
        createdAt: ClientRuntime.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        failedReason: Swift.String? = nil,
        importJobEndTime: ClientRuntime.Date? = nil,
        importJobStartTime: ClientRuntime.Date? = nil,
        importedDataSizeInBytes: Swift.Int? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        modelArn: Swift.String? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil,
        modelVersionArn: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        priorModelMetrics: Swift.String? = nil,
        retrainingAvailableDataInDays: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil,
        trainingExecutionEndTime: ClientRuntime.Date? = nil,
        trainingExecutionStartTime: ClientRuntime.Date? = nil
    )
    {
        self.autoPromotionResult = autoPromotionResult
        self.autoPromotionResultReason = autoPromotionResultReason
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.importJobEndTime = importJobEndTime
        self.importJobStartTime = importJobStartTime
        self.importedDataSizeInBytes = importedDataSizeInBytes
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.modelArn = modelArn
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.modelVersion = modelVersion
        self.modelVersionArn = modelVersionArn
        self.offCondition = offCondition
        self.priorModelMetrics = priorModelMetrics
        self.retrainingAvailableDataInDays = retrainingAvailableDataInDays
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.sourceType = sourceType
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

struct DescribeModelVersionOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let modelVersion: Swift.Int?
    let modelVersionArn: Swift.String?
    let status: LookoutEquipmentClientTypes.ModelVersionStatus?
    let sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let schema: Swift.String?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let trainingExecutionStartTime: ClientRuntime.Date?
    let trainingExecutionEndTime: ClientRuntime.Date?
    let failedReason: Swift.String?
    let modelMetrics: Swift.String?
    let lastUpdatedTime: ClientRuntime.Date?
    let createdAt: ClientRuntime.Date?
    let serverSideKmsKeyId: Swift.String?
    let offCondition: Swift.String?
    let sourceModelVersionArn: Swift.String?
    let importJobStartTime: ClientRuntime.Date?
    let importJobEndTime: ClientRuntime.Date?
    let importedDataSizeInBytes: Swift.Int?
    let priorModelMetrics: Swift.String?
    let retrainingAvailableDataInDays: Swift.Int?
    let autoPromotionResult: LookoutEquipmentClientTypes.AutoPromotionResult?
    let autoPromotionResultReason: Swift.String?
}

extension DescribeModelVersionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoPromotionResult = "AutoPromotionResult"
        case autoPromotionResultReason = "AutoPromotionResultReason"
        case createdAt = "CreatedAt"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case failedReason = "FailedReason"
        case importJobEndTime = "ImportJobEndTime"
        case importJobStartTime = "ImportJobStartTime"
        case importedDataSizeInBytes = "ImportedDataSizeInBytes"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case lastUpdatedTime = "LastUpdatedTime"
        case modelArn = "ModelArn"
        case modelMetrics = "ModelMetrics"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case modelVersionArn = "ModelVersionArn"
        case offCondition = "OffCondition"
        case priorModelMetrics = "PriorModelMetrics"
        case retrainingAvailableDataInDays = "RetrainingAvailableDataInDays"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceModelVersionArn = "SourceModelVersionArn"
        case sourceType = "SourceType"
        case status = "Status"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
        case trainingExecutionEndTime = "TrainingExecutionEndTime"
        case trainingExecutionStartTime = "TrainingExecutionStartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let modelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersionArn)
        modelVersionArn = modelVersionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .status)
        status = statusDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionSourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let trainingExecutionStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionStartTime)
        trainingExecutionStartTime = trainingExecutionStartTimeDecoded
        let trainingExecutionEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingExecutionEndTime)
        trainingExecutionEndTime = trainingExecutionEndTimeDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
        let sourceModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelVersionArn)
        sourceModelVersionArn = sourceModelVersionArnDecoded
        let importJobStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .importJobStartTime)
        importJobStartTime = importJobStartTimeDecoded
        let importJobEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .importJobEndTime)
        importJobEndTime = importJobEndTimeDecoded
        let importedDataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedDataSizeInBytes)
        importedDataSizeInBytes = importedDataSizeInBytesDecoded
        let priorModelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priorModelMetrics)
        priorModelMetrics = priorModelMetricsDecoded
        let retrainingAvailableDataInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retrainingAvailableDataInDays)
        retrainingAvailableDataInDays = retrainingAvailableDataInDaysDecoded
        let autoPromotionResultDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.AutoPromotionResult.self, forKey: .autoPromotionResult)
        autoPromotionResult = autoPromotionResultDecoded
        let autoPromotionResultReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoPromotionResultReason)
        autoPromotionResultReason = autoPromotionResultReasonDecoded
    }
}

enum DescribeModelVersionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DescribeResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that is associated with the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DescribeResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DescribeResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DescribeResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.lastModifiedTime = output.lastModifiedTime
            self.policyRevisionId = output.policyRevisionId
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.creationTime = nil
            self.lastModifiedTime = nil
            self.policyRevisionId = nil
            self.resourcePolicy = nil
        }
    }
}

public struct DescribeResourcePolicyOutput: Swift.Equatable {
    /// The time when the resource policy was created.
    public var creationTime: ClientRuntime.Date?
    /// The time when the resource policy was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The resource policy in a JSON-formatted string.
    public var resourcePolicy: Swift.String?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        policyRevisionId: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.policyRevisionId = policyRevisionId
        self.resourcePolicy = resourcePolicy
    }
}

struct DescribeResourcePolicyOutputBody: Swift.Equatable {
    let policyRevisionId: Swift.String?
    let resourcePolicy: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DescribeResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case policyRevisionId = "PolicyRevisionId"
        case resourcePolicy = "ResourcePolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

enum DescribeResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DescribeRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRetrainingSchedulerInput: Swift.Equatable {
    /// The name of the model that the retraining scheduler is attached to.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DescribeRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DescribeRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeRetrainingSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.lookbackWindow = output.lookbackWindow
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.promoteMode = output.promoteMode
            self.retrainingFrequency = output.retrainingFrequency
            self.retrainingStartDate = output.retrainingStartDate
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.lookbackWindow = nil
            self.modelArn = nil
            self.modelName = nil
            self.promoteMode = nil
            self.retrainingFrequency = nil
            self.retrainingStartDate = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeRetrainingSchedulerOutput: Swift.Equatable {
    /// Indicates the time and date at which the retraining scheduler was created.
    public var createdAt: ClientRuntime.Date?
    /// The number of past days of data used for retraining.
    public var lookbackWindow: Swift.String?
    /// The ARN of the model that the retraining scheduler is attached to.
    public var modelArn: Swift.String?
    /// The name of the model that the retraining scheduler is attached to.
    public var modelName: Swift.String?
    /// Indicates how the service uses new models. In MANAGED mode, new models are used for inference if they have better performance than the current model. In MANUAL mode, the new models are not used until they are [manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// The frequency at which the model retraining is set. This follows the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) guidelines.
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: ClientRuntime.Date?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    /// Indicates the time and date at which the retraining scheduler was updated.
    public var updatedAt: ClientRuntime.Date?

    public init(
        createdAt: ClientRuntime.Date? = nil,
        lookbackWindow: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: ClientRuntime.Date? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.lookbackWindow = lookbackWindow
        self.modelArn = modelArn
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeRetrainingSchedulerOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let retrainingStartDate: ClientRuntime.Date?
    let retrainingFrequency: Swift.String?
    let lookbackWindow: Swift.String?
    let status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    let promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
}

extension DescribeRetrainingSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case lookbackWindow = "LookbackWindow"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case promoteMode = "PromoteMode"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let retrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .retrainingStartDate)
        retrainingStartDate = retrainingStartDateDecoded
        let retrainingFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrainingFrequency)
        retrainingFrequency = retrainingFrequencyDecoded
        let lookbackWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lookbackWindow)
        lookbackWindow = lookbackWindowDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let promoteModeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelPromoteMode.self, forKey: .promoteMode)
        promoteMode = promoteModeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

enum DescribeRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes.DuplicateTimestamps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalNumberOfDuplicateTimestamps = "TotalNumberOfDuplicateTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalNumberOfDuplicateTimestamps = self.totalNumberOfDuplicateTimestamps {
            try encodeContainer.encode(totalNumberOfDuplicateTimestamps, forKey: .totalNumberOfDuplicateTimestamps)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfDuplicateTimestampsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfDuplicateTimestamps)
        totalNumberOfDuplicateTimestamps = totalNumberOfDuplicateTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information abount duplicate timestamps in the dataset.
    public struct DuplicateTimestamps: Swift.Equatable {
        /// Indicates the total number of duplicate timestamps.
        /// This member is required.
        public var totalNumberOfDuplicateTimestamps: Swift.Int?

        public init(
            totalNumberOfDuplicateTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfDuplicateTimestamps = totalNumberOfDuplicateTimestamps
        }
    }

}

extension ImportDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceDatasetArn = "SourceDatasetArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let sourceDatasetArn = self.sourceDatasetArn {
            try encodeContainer.encode(sourceDatasetArn, forKey: .sourceDatasetArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension ImportDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportDatasetInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the machine learning dataset to be created. If the dataset already exists, Amazon Lookout for Equipment overwrites the existing dataset. If you don't specify this field, it is filled with the name of the source dataset.
    public var datasetName: Swift.String?
    /// Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the dataset to import.
    /// This member is required.
    public var sourceDatasetArn: Swift.String?
    /// Any tags associated with the dataset to be created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceDatasetArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceDatasetArn = sourceDatasetArn
        self.tags = tags
    }
}

struct ImportDatasetInputBody: Swift.Equatable {
    let sourceDatasetArn: Swift.String?
    let datasetName: Swift.String?
    let clientToken: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension ImportDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceDatasetArn = "SourceDatasetArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDatasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDatasetArn)
        sourceDatasetArn = sourceDatasetArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ImportDatasetOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ImportDatasetOutputBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.jobId = output.jobId
            self.status = output.status
        } else {
            self.datasetArn = nil
            self.datasetName = nil
            self.jobId = nil
            self.status = nil
        }
    }
}

public struct ImportDatasetOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dataset that was imported.
    public var datasetArn: Swift.String?
    /// The name of the created machine learning dataset.
    public var datasetName: Swift.String?
    /// A unique identifier for the job of importing the dataset.
    public var jobId: Swift.String?
    /// The status of the ImportDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init(
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.jobId = jobId
        self.status = status
    }
}

struct ImportDatasetOutputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
    let jobId: Swift.String?
}

extension ImportDatasetOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case jobId = "JobId"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

enum ImportDatasetOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ImportModelVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case inferenceDataImportStrategy = "InferenceDataImportStrategy"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceModelVersionArn = "SourceModelVersionArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let inferenceDataImportStrategy = self.inferenceDataImportStrategy {
            try encodeContainer.encode(inferenceDataImportStrategy.rawValue, forKey: .inferenceDataImportStrategy)
        }
        if let labelsInputConfiguration = self.labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = self.serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let sourceModelVersionArn = self.sourceModelVersionArn {
            try encodeContainer.encode(sourceModelVersionArn, forKey: .sourceModelVersionArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension ImportModelVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportModelVersionInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset for the machine learning model being imported.
    /// This member is required.
    public var datasetName: Swift.String?
    /// Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:
    ///
    /// * NO_IMPORT – Don't import the data.
    ///
    /// * ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.
    ///
    /// * OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.
    public var inferenceDataImportStrategy: LookoutEquipmentClientTypes.InferenceDataImportStrategy?
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the model version to import.
    /// This member is required.
    public var sourceModelVersionArn: Swift.String?
    /// The tags associated with the machine learning model to be created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        inferenceDataImportStrategy: LookoutEquipmentClientTypes.InferenceDataImportStrategy? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        sourceModelVersionArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.inferenceDataImportStrategy = inferenceDataImportStrategy
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.sourceModelVersionArn = sourceModelVersionArn
        self.tags = tags
    }
}

struct ImportModelVersionInputBody: Swift.Equatable {
    let sourceModelVersionArn: Swift.String?
    let modelName: Swift.String?
    let datasetName: Swift.String?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let clientToken: Swift.String?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
    let inferenceDataImportStrategy: LookoutEquipmentClientTypes.InferenceDataImportStrategy?
}

extension ImportModelVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case inferenceDataImportStrategy = "InferenceDataImportStrategy"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case sourceModelVersionArn = "SourceModelVersionArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelVersionArn)
        sourceModelVersionArn = sourceModelVersionArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let inferenceDataImportStrategyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceDataImportStrategy.self, forKey: .inferenceDataImportStrategy)
        inferenceDataImportStrategy = inferenceDataImportStrategyDecoded
    }
}

extension ImportModelVersionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ImportModelVersionOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.modelVersion = output.modelVersion
            self.modelVersionArn = output.modelVersionArn
            self.status = output.status
        } else {
            self.modelArn = nil
            self.modelName = nil
            self.modelVersion = nil
            self.modelVersionArn = nil
            self.status = nil
        }
    }
}

public struct ImportModelVersionOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// The name for the machine learning model.
    public var modelName: Swift.String?
    /// The version of the model being created.
    public var modelVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the model version being created.
    public var modelVersionArn: Swift.String?
    /// The status of the ImportModelVersion operation.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil,
        modelVersionArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.modelVersion = modelVersion
        self.modelVersionArn = modelVersionArn
        self.status = status
    }
}

struct ImportModelVersionOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let modelVersionArn: Swift.String?
    let modelVersion: Swift.Int?
    let status: LookoutEquipmentClientTypes.ModelVersionStatus?
}

extension ImportModelVersionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case modelVersionArn = "ModelVersionArn"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersionArn)
        modelVersionArn = modelVersionArnDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum ImportModelVersionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes {
    public enum InferenceDataImportStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addWhenEmpty
        case noImport
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceDataImportStrategy] {
            return [
                .addWhenEmpty,
                .noImport,
                .overwrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addWhenEmpty: return "ADD_WHEN_EMPTY"
            case .noImport: return "NO_IMPORT"
            case .overwrite: return "OVERWRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceDataImportStrategy(rawValue: rawValue) ?? InferenceDataImportStrategy.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceEventSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diagnostics = "Diagnostics"
        case eventDurationInSeconds = "EventDurationInSeconds"
        case eventEndTime = "EventEndTime"
        case eventStartTime = "EventStartTime"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = self.diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let eventDurationInSeconds = self.eventDurationInSeconds {
            try encodeContainer.encode(eventDurationInSeconds, forKey: .eventDurationInSeconds)
        }
        if let eventEndTime = self.eventEndTime {
            try encodeContainer.encodeTimestamp(eventEndTime, format: .epochSeconds, forKey: .eventEndTime)
        }
        if let eventStartTime = self.eventStartTime {
            try encodeContainer.encodeTimestamp(eventStartTime, format: .epochSeconds, forKey: .eventStartTime)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let eventStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let eventDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventDurationInSeconds)
        eventDurationInSeconds = eventDurationInSecondsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.
    public struct InferenceEventSummary: Swift.Equatable {
        /// An array which specifies the names and values of all sensors contributing to an inference event.
        public var diagnostics: Swift.String?
        /// Indicates the size of an inference event in seconds.
        public var eventDurationInSeconds: Swift.Int?
        /// Indicates the ending time of an inference event.
        public var eventEndTime: ClientRuntime.Date?
        /// Indicates the starting time of an inference event.
        public var eventStartTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference events.
        public var inferenceSchedulerName: Swift.String?

        public init(
            diagnostics: Swift.String? = nil,
            eventDurationInSeconds: Swift.Int? = nil,
            eventEndTime: ClientRuntime.Date? = nil,
            eventStartTime: ClientRuntime.Date? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil
        )
        {
            self.diagnostics = diagnostics
            self.eventDurationInSeconds = eventDurationInSeconds
            self.eventEndTime = eventEndTime
            self.eventStartTime = eventStartTime
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum InferenceExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceExecutionStatus(rawValue: rawValue) ?? InferenceExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerResultObject = "CustomerResultObject"
        case dataEndTime = "DataEndTime"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataStartTime = "DataStartTime"
        case failedReason = "FailedReason"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case modelVersionArn = "ModelVersionArn"
        case scheduledStartTime = "ScheduledStartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerResultObject = self.customerResultObject {
            try encodeContainer.encode(customerResultObject, forKey: .customerResultObject)
        }
        if let dataEndTime = self.dataEndTime {
            try encodeContainer.encodeTimestamp(dataEndTime, format: .epochSeconds, forKey: .dataEndTime)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataStartTime = self.dataStartTime {
            try encodeContainer.encodeTimestamp(dataStartTime, format: .epochSeconds, forKey: .dataStartTime)
        }
        if let failedReason = self.failedReason {
            try encodeContainer.encode(failedReason, forKey: .failedReason)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let modelVersionArn = self.modelVersionArn {
            try encodeContainer.encode(modelVersionArn, forKey: .modelVersionArn)
        }
        if let scheduledStartTime = self.scheduledStartTime {
            try encodeContainer.encodeTimestamp(scheduledStartTime, format: .epochSeconds, forKey: .scheduledStartTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let scheduledStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .scheduledStartTime)
        scheduledStartTime = scheduledStartTimeDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let customerResultObjectDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.S3Object.self, forKey: .customerResultObject)
        customerResultObject = customerResultObjectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let modelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersionArn)
        modelVersionArn = modelVersionArnDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference execution, including input and output data configuration, inference scheduling information, status, and so on.
    public struct InferenceExecutionSummary: Swift.Equatable {
        /// The S3 object that the inference execution results were uploaded to.
        public var customerResultObject: LookoutEquipmentClientTypes.S3Object?
        /// Indicates the time reference in the dataset at which the inference execution stopped.
        public var dataEndTime: ClientRuntime.Date?
        /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
        public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
        /// Specifies configuration information for the output results from for the inference execution, including the output Amazon S3 location.
        public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
        /// Indicates the time reference in the dataset at which the inference execution began.
        public var dataStartTime: ClientRuntime.Date?
        /// Specifies the reason for failure when an inference execution has failed.
        public var failedReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the machine learning model used for the inference execution.
        public var modelArn: Swift.String?
        /// The name of the machine learning model being used for the inference execution.
        public var modelName: Swift.String?
        /// The model version used for the inference execution.
        public var modelVersion: Swift.Int?
        /// The Amazon Resource Number (ARN) of the model version used for the inference execution.
        public var modelVersionArn: Swift.String?
        /// Indicates the start time at which the inference scheduler began the specific inference execution.
        public var scheduledStartTime: ClientRuntime.Date?
        /// Indicates the status of the inference execution.
        public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

        public init(
            customerResultObject: LookoutEquipmentClientTypes.S3Object? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
            dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
            dataStartTime: ClientRuntime.Date? = nil,
            failedReason: Swift.String? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.Int? = nil,
            modelVersionArn: Swift.String? = nil,
            scheduledStartTime: ClientRuntime.Date? = nil,
            status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
        )
        {
            self.customerResultObject = customerResultObject
            self.dataEndTime = dataEndTime
            self.dataInputConfiguration = dataInputConfiguration
            self.dataOutputConfiguration = dataOutputConfiguration
            self.dataStartTime = dataStartTime
            self.failedReason = failedReason
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.modelArn = modelArn
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.modelVersionArn = modelVersionArn
            self.scheduledStartTime = scheduledStartTime
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceInputNameConfiguration = "InferenceInputNameConfiguration"
        case inputTimeZoneOffset = "InputTimeZoneOffset"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceInputNameConfiguration = self.inferenceInputNameConfiguration {
            try encodeContainer.encode(inferenceInputNameConfiguration, forKey: .inferenceInputNameConfiguration)
        }
        if let inputTimeZoneOffset = self.inputTimeZoneOffset {
            try encodeContainer.encode(inputTimeZoneOffset, forKey: .inputTimeZoneOffset)
        }
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let inputTimeZoneOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputTimeZoneOffset)
        inputTimeZoneOffset = inputTimeZoneOffsetDecoded
        let inferenceInputNameConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputNameConfiguration.self, forKey: .inferenceInputNameConfiguration)
        inferenceInputNameConfiguration = inferenceInputNameConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data..
    public struct InferenceInputConfiguration: Swift.Equatable {
        /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
        public var inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration?
        /// Indicates the difference between your time zone and Coordinated Universal Time (UTC).
        public var inputTimeZoneOffset: Swift.String?
        /// Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration?

        public init(
            inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration? = nil,
            inputTimeZoneOffset: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration? = nil
        )
        {
            self.inferenceInputNameConfiguration = inferenceInputNameConfiguration
            self.inputTimeZoneOffset = inputTimeZoneOffset
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputNameConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentTimestampDelimiter = "ComponentTimestampDelimiter"
        case timestampFormat = "TimestampFormat"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentTimestampDelimiter = self.componentTimestampDelimiter {
            try encodeContainer.encode(componentTimestampDelimiter, forKey: .componentTimestampDelimiter)
        }
        if let timestampFormat = self.timestampFormat {
            try encodeContainer.encode(timestampFormat, forKey: .timestampFormat)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampFormat)
        timestampFormat = timestampFormatDecoded
        let componentTimestampDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTimestampDelimiter)
        componentTimestampDelimiter = componentTimestampDelimiterDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
    public struct InferenceInputNameConfiguration: Swift.Equatable {
        /// Indicates the delimiter character used between items in the data.
        public var componentTimestampDelimiter: Swift.String?
        /// The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-).
        public var timestampFormat: Swift.String?

        public init(
            componentTimestampDelimiter: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.componentTimestampDelimiter = componentTimestampDelimiter
            self.timestampFormat = timestampFormat
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputConfiguration = "S3OutputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputConfiguration = self.s3OutputConfiguration {
            try encodeContainer.encode(s3OutputConfiguration, forKey: .s3OutputConfiguration)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3OutputConfiguration.self, forKey: .s3OutputConfiguration)
        s3OutputConfiguration = s3OutputConfigurationDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the output results from for the inference, including KMS key ID and output S3 location.
    public struct InferenceOutputConfiguration: Swift.Equatable {
        /// The ID number for the KMS key key used to encrypt the inference output.
        public var kmsKeyId: Swift.String?
        /// Specifies configuration information for the output results from for the inference, output S3 location.
        /// This member is required.
        public var s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputConfiguration = s3OutputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including input data S3 location.
    public struct InferenceS3InputConfiguration: Swift.Equatable {
        /// The bucket containing the input dataset for the inference.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the input data for the inference.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3OutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the output results from the inference, including output S3 location.
    public struct InferenceS3OutputConfiguration: Swift.Equatable {
        /// The bucket containing the output results from the inference
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the output results from the inference.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum InferenceSchedulerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceSchedulerStatus(rawValue: rawValue) ?? InferenceSchedulerStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceSchedulerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case latestInferenceResult = "LatestInferenceResult"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let latestInferenceResult = self.latestInferenceResult {
            try encodeContainer.encode(latestInferenceResult.rawValue, forKey: .latestInferenceResult)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let latestInferenceResultDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LatestInferenceResult.self, forKey: .latestInferenceResult)
        latestInferenceResult = latestInferenceResultDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference scheduler, including data delay offset, model name and ARN, status, and so on.
    public struct InferenceSchedulerSummary: Swift.Equatable {
        /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if an offset delay time of five minutes was selected, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        public var dataDelayOffsetInMinutes: Swift.Int?
        /// How often data is uploaded to the source S3 bucket for the input data. This value is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
        public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
        /// The Amazon Resource Name (ARN) of the inference scheduler.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler.
        public var inferenceSchedulerName: Swift.String?
        /// Indicates whether the latest execution for the inference scheduler was Anomalous (anomalous events found) or Normal (no anomalous events found).
        public var latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult?
        /// The Amazon Resource Name (ARN) of the machine learning model used by the inference scheduler.
        public var modelArn: Swift.String?
        /// The name of the machine learning model used for the inference scheduler.
        public var modelName: Swift.String?
        /// Indicates the status of the inference scheduler.
        public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

        public init(
            dataDelayOffsetInMinutes: Swift.Int? = nil,
            dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            latestInferenceResult: LookoutEquipmentClientTypes.LatestInferenceResult? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
        )
        {
            self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
            self.dataUploadFrequency = dataUploadFrequency
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.latestInferenceResult = latestInferenceResult
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.IngestedFilesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discardedFiles = "DiscardedFiles"
        case ingestedNumberOfFiles = "IngestedNumberOfFiles"
        case totalNumberOfFiles = "TotalNumberOfFiles"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discardedFiles = discardedFiles {
            var discardedFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .discardedFiles)
            for s3object0 in discardedFiles {
                try discardedFilesContainer.encode(s3object0)
            }
        }
        if let ingestedNumberOfFiles = self.ingestedNumberOfFiles {
            try encodeContainer.encode(ingestedNumberOfFiles, forKey: .ingestedNumberOfFiles)
        }
        if let totalNumberOfFiles = self.totalNumberOfFiles {
            try encodeContainer.encode(totalNumberOfFiles, forKey: .totalNumberOfFiles)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfFiles)
        totalNumberOfFiles = totalNumberOfFilesDecoded
        let ingestedNumberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestedNumberOfFiles)
        ingestedNumberOfFiles = ingestedNumberOfFilesDecoded
        let discardedFilesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.S3Object?].self, forKey: .discardedFiles)
        var discardedFilesDecoded0:[LookoutEquipmentClientTypes.S3Object]? = nil
        if let discardedFilesContainer = discardedFilesContainer {
            discardedFilesDecoded0 = [LookoutEquipmentClientTypes.S3Object]()
            for structure0 in discardedFilesContainer {
                if let structure0 = structure0 {
                    discardedFilesDecoded0?.append(structure0)
                }
            }
        }
        discardedFiles = discardedFilesDecoded0
    }
}

extension LookoutEquipmentClientTypes {
    /// Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.
    public struct IngestedFilesSummary: Swift.Equatable {
        /// Indicates the number of files that were discarded. A file could be discarded because its format is invalid (for example, a jpg or pdf) or not readable.
        public var discardedFiles: [LookoutEquipmentClientTypes.S3Object]?
        /// Indicates the number of files that were successfully ingested.
        /// This member is required.
        public var ingestedNumberOfFiles: Swift.Int?
        /// Indicates the total number of files that were submitted for ingestion.
        /// This member is required.
        public var totalNumberOfFiles: Swift.Int?

        public init(
            discardedFiles: [LookoutEquipmentClientTypes.S3Object]? = nil,
            ingestedNumberOfFiles: Swift.Int? = nil,
            totalNumberOfFiles: Swift.Int? = nil
        )
        {
            self.discardedFiles = discardedFiles
            self.ingestedNumberOfFiles = ingestedNumberOfFiles
            self.totalNumberOfFiles = totalNumberOfFiles
        }
    }

}

extension LookoutEquipmentClientTypes.IngestionInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the data ingestion job, including input data S3 location.
    public struct IngestionInputConfiguration: Swift.Equatable {
        /// The location information for the S3 bucket used for input data for the data ingestion.
        /// This member is required.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration?

        public init(
            s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration? = nil
        )
        {
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum IngestionJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [IngestionJobStatus] {
            return [
                .failed,
                .importInProgress,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IngestionJobStatus(rawValue: rawValue) ?? IngestionJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.IngestionS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case keyPattern = "KeyPattern"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPattern = self.keyPattern {
            try encodeContainer.encode(keyPattern, forKey: .keyPattern)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let keyPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPattern)
        keyPattern = keyPatternDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Specifies S3 configuration information for the input data for the data ingestion job.
    public struct IngestionS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket used for the input data for the data ingestion.
        /// This member is required.
        public var bucket: Swift.String?
        /// The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time. Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)
        public var keyPattern: Swift.String?
        /// The prefix for the S3 location being used for the input data for the data ingestion.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPattern: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPattern = keyPattern
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.InsufficientSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case missingCompleteSensorData = "MissingCompleteSensorData"
        case sensorsWithShortDateRange = "SensorsWithShortDateRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let missingCompleteSensorData = self.missingCompleteSensorData {
            try encodeContainer.encode(missingCompleteSensorData, forKey: .missingCompleteSensorData)
        }
        if let sensorsWithShortDateRange = self.sensorsWithShortDateRange {
            try encodeContainer.encode(sensorsWithShortDateRange, forKey: .sensorsWithShortDateRange)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let missingCompleteSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingCompleteSensorData.self, forKey: .missingCompleteSensorData)
        missingCompleteSensorData = missingCompleteSensorDataDecoded
        let sensorsWithShortDateRangeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.SensorsWithShortDateRange.self, forKey: .sensorsWithShortDateRange)
        sensorsWithShortDateRange = sensorsWithShortDateRangeDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InsufficientSensorData: Swift.Equatable {
        /// Parameter that describes the total number of sensors that have data completely missing for it.
        /// This member is required.
        public var missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData?
        /// Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall.
        /// This member is required.
        public var sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange?

        public init(
            missingCompleteSensorData: LookoutEquipmentClientTypes.MissingCompleteSensorData? = nil,
            sensorsWithShortDateRange: LookoutEquipmentClientTypes.SensorsWithShortDateRange? = nil
        )
        {
            self.missingCompleteSensorData = missingCompleteSensorData
            self.sensorsWithShortDateRange = sensorsWithShortDateRange
        }
    }

}

extension InternalServerException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing of the request has failed because of an unknown error, exception or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.InvalidSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
        case totalNumberOfInvalidValues = "TotalNumberOfInvalidValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
        if let totalNumberOfInvalidValues = self.totalNumberOfInvalidValues {
            try encodeContainer.encode(totalNumberOfInvalidValues, forKey: .totalNumberOfInvalidValues)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
        let totalNumberOfInvalidValuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfInvalidValues)
        totalNumberOfInvalidValues = totalNumberOfInvalidValuesDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having insufficient data.
    public struct InvalidSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have at least some invalid values.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of invalid values across all the sensors.
        /// This member is required.
        public var totalNumberOfInvalidValues: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfInvalidValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfInvalidValues = totalNumberOfInvalidValues
        }
    }

}

extension LookoutEquipmentClientTypes.LabelGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let labelGroupArn = self.labelGroupArn {
            try encodeContainer.encode(labelGroupArn, forKey: .labelGroupArn)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the label group.
    public struct LabelGroupSummary: Swift.Equatable {
        /// The time at which the label group was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The time at which the label group was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.updatedAt = updatedAt
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum LabelRating: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anomaly
        case neutral
        case noAnomaly
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelRating] {
            return [
                .anomaly,
                .neutral,
                .noAnomaly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anomaly: return "ANOMALY"
            case .neutral: return "NEUTRAL"
            case .noAnomaly: return "NO_ANOMALY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelRating(rawValue: rawValue) ?? LabelRating.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.LabelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let labelGroupArn = self.labelGroupArn {
            try encodeContainer.encode(labelGroupArn, forKey: .labelGroupArn)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
        if let rating = self.rating {
            try encodeContainer.encode(rating.rawValue, forKey: .rating)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Information about the label.
    public struct LabelSummary: Swift.Equatable {
        /// The time at which the label was created.
        public var createdAt: ClientRuntime.Date?
        /// The timestamp indicating the end of the label.
        public var endTime: ClientRuntime.Date?
        /// Indicates that a label pertains to a particular piece of equipment.
        public var equipment: Swift.String?
        /// Indicates the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
        public var faultCode: Swift.String?
        /// The Amazon Resource Name (ARN) of the label group.
        public var labelGroupArn: Swift.String?
        /// The name of the label group.
        public var labelGroupName: Swift.String?
        /// The ID of the label.
        public var labelId: Swift.String?
        /// Indicates whether a labeled event represents an anomaly.
        public var rating: LookoutEquipmentClientTypes.LabelRating?
        /// The timestamp indicating the start of the label.
        public var startTime: ClientRuntime.Date?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            equipment: Swift.String? = nil,
            faultCode: Swift.String? = nil,
            labelGroupArn: Swift.String? = nil,
            labelGroupName: Swift.String? = nil,
            labelId: Swift.String? = nil,
            rating: LookoutEquipmentClientTypes.LabelRating? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.endTime = endTime
            self.equipment = equipment
            self.faultCode = faultCode
            self.labelGroupArn = labelGroupArn
            self.labelGroupName = labelGroupName
            self.labelId = labelId
            self.rating = rating
            self.startTime = startTime
        }
    }

}

extension LookoutEquipmentClientTypes.LabelsInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupName = "LabelGroupName"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let s3InputConfiguration = self.s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains the configuration information for the S3 location being used to hold label data.
    public struct LabelsInputConfiguration: Swift.Equatable {
        /// The name of the label group to be used for label data.
        public var labelGroupName: Swift.String?
        /// Contains location information for the S3 location being used for label data.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration?

        public init(
            labelGroupName: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration? = nil
        )
        {
            self.labelGroupName = labelGroupName
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.LabelsS3InputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// The location information (prefix and bucket name) for the s3 location being used for label data.
    public struct LabelsS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket holding the label data.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the label data.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension LookoutEquipmentClientTypes.LargeTimestampGaps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxTimestampGapInDays = "MaxTimestampGapInDays"
        case numberOfLargeTimestampGaps = "NumberOfLargeTimestampGaps"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxTimestampGapInDays = self.maxTimestampGapInDays {
            try encodeContainer.encode(maxTimestampGapInDays, forKey: .maxTimestampGapInDays)
        }
        if let numberOfLargeTimestampGaps = self.numberOfLargeTimestampGaps {
            try encodeContainer.encode(numberOfLargeTimestampGaps, forKey: .numberOfLargeTimestampGaps)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let numberOfLargeTimestampGapsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLargeTimestampGaps)
        numberOfLargeTimestampGaps = numberOfLargeTimestampGapsDecoded
        let maxTimestampGapInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxTimestampGapInDays)
        maxTimestampGapInDays = maxTimestampGapInDaysDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on large gaps between consecutive timestamps in data.
    public struct LargeTimestampGaps: Swift.Equatable {
        /// Indicates the size of the largest timestamp gap, in days.
        public var maxTimestampGapInDays: Swift.Int?
        /// Indicates the number of large timestamp gaps, if there are any.
        public var numberOfLargeTimestampGaps: Swift.Int?
        /// Indicates whether there is a potential data issue related to large gaps in timestamps.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            maxTimestampGapInDays: Swift.Int? = nil,
            numberOfLargeTimestampGaps: Swift.Int? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.maxTimestampGapInDays = maxTimestampGapInDays
            self.numberOfLargeTimestampGaps = numberOfLargeTimestampGaps
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum LatestInferenceResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anomalous
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [LatestInferenceResult] {
            return [
                .anomalous,
                .normal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anomalous: return "ANOMALOUS"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LatestInferenceResult(rawValue: rawValue) ?? LatestInferenceResult.sdkUnknown(rawValue)
        }
    }
}

extension ListDataIngestionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListDataIngestionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDataIngestionJobsInput: Swift.Equatable {
    /// The name of the dataset being used for the data ingestion job.
    public var datasetName: Swift.String?
    /// Specifies the maximum number of data ingestion jobs to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?
    /// Indicates the status of the data ingestion job.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init(
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListDataIngestionJobsInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension ListDataIngestionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListDataIngestionJobsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDataIngestionJobsOutputBody = try responseDecoder.decode(responseBody: data)
            self.dataIngestionJobSummaries = output.dataIngestionJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.dataIngestionJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDataIngestionJobsOutput: Swift.Equatable {
    /// Specifies information about the specific data ingestion job, including dataset name and status.
    public var dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
    /// An opaque pagination token indicating where to continue the listing of data ingestion jobs.
    public var nextToken: Swift.String?

    public init(
        dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataIngestionJobSummaries = dataIngestionJobSummaries
        self.nextToken = nextToken
    }
}

struct ListDataIngestionJobsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
}

extension ListDataIngestionJobsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIngestionJobSummaries = "DataIngestionJobSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataIngestionJobSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DataIngestionJobSummary?].self, forKey: .dataIngestionJobSummaries)
        var dataIngestionJobSummariesDecoded0:[LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil
        if let dataIngestionJobSummariesContainer = dataIngestionJobSummariesContainer {
            dataIngestionJobSummariesDecoded0 = [LookoutEquipmentClientTypes.DataIngestionJobSummary]()
            for structure0 in dataIngestionJobSummariesContainer {
                if let structure0 = structure0 {
                    dataIngestionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        dataIngestionJobSummaries = dataIngestionJobSummariesDecoded0
    }
}

enum ListDataIngestionJobsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListDatasetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = self.datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDatasetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDatasetsInput: Swift.Equatable {
    /// The beginning of the name of the datasets to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of datasets to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatasetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let datasetNameBeginsWith: Swift.String?
}

extension ListDatasetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListDatasetsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDatasetsOutputBody = try responseDecoder.decode(responseBody: data)
            self.datasetSummaries = output.datasetSummaries
            self.nextToken = output.nextToken
        } else {
            self.datasetSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetsOutput: Swift.Equatable {
    /// Provides information about the specified dataset, including creation time, dataset ARN, and status.
    public var datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

struct ListDatasetsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
}

extension ListDatasetsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSummaries = "DatasetSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let datasetSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DatasetSummary?].self, forKey: .datasetSummaries)
        var datasetSummariesDecoded0:[LookoutEquipmentClientTypes.DatasetSummary]? = nil
        if let datasetSummariesContainer = datasetSummariesContainer {
            datasetSummariesDecoded0 = [LookoutEquipmentClientTypes.DatasetSummary]()
            for structure0 in datasetSummariesContainer {
                if let structure0 = structure0 {
                    datasetSummariesDecoded0?.append(structure0)
                }
            }
        }
        datasetSummaries = datasetSummariesDecoded0
    }
}

enum ListDatasetsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListInferenceEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let intervalEndTime = self.intervalEndTime {
            try encodeContainer.encodeTimestamp(intervalEndTime, format: .epochSeconds, forKey: .intervalEndTime)
        }
        if let intervalStartTime = self.intervalStartTime {
            try encodeContainer.encodeTimestamp(intervalStartTime, format: .epochSeconds, forKey: .intervalStartTime)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListInferenceEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceEventsInput: Swift.Equatable {
    /// The name of the inference scheduler for the inference events listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Returns all the inference events with an end start time equal to or greater than less than the end time given.
    /// This member is required.
    public var intervalEndTime: ClientRuntime.Date?
    /// Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.
    /// This member is required.
    public var intervalStartTime: ClientRuntime.Date?
    /// Specifies the maximum number of inference events to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference events.
    public var nextToken: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil,
        intervalEndTime: ClientRuntime.Date? = nil,
        intervalStartTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInferenceEventsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerName: Swift.String?
    let intervalStartTime: ClientRuntime.Date?
    let intervalEndTime: ClientRuntime.Date?
}

extension ListInferenceEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let intervalStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalStartTime)
        intervalStartTime = intervalStartTimeDecoded
        let intervalEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalEndTime)
        intervalEndTime = intervalEndTimeDecoded
    }
}

extension ListInferenceEventsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListInferenceEventsOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceEventSummaries = output.inferenceEventSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceEventSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceEventsOutput: Swift.Equatable {
    /// Provides an array of information about the individual inference events returned from the ListInferenceEvents operation, including scheduler used, event start time, event end time, diagnostics, and so on.
    public var inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init(
        inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceEventSummaries = inferenceEventSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceEventsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
}

extension ListInferenceEventsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceEventSummaries = "InferenceEventSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceEventSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceEventSummary?].self, forKey: .inferenceEventSummaries)
        var inferenceEventSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceEventSummary]? = nil
        if let inferenceEventSummariesContainer = inferenceEventSummariesContainer {
            inferenceEventSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceEventSummary]()
            for structure0 in inferenceEventSummariesContainer {
                if let structure0 = structure0 {
                    inferenceEventSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceEventSummaries = inferenceEventSummariesDecoded0
    }
}

enum ListInferenceEventsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListInferenceExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataEndTimeBefore = self.dataEndTimeBefore {
            try encodeContainer.encodeTimestamp(dataEndTimeBefore, format: .epochSeconds, forKey: .dataEndTimeBefore)
        }
        if let dataStartTimeAfter = self.dataStartTimeAfter {
            try encodeContainer.encodeTimestamp(dataStartTimeAfter, format: .epochSeconds, forKey: .dataStartTimeAfter)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListInferenceExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceExecutionsInput: Swift.Equatable {
    /// The time reference in the inferenced dataset before which Amazon Lookout for Equipment stopped the inference execution.
    public var dataEndTimeBefore: ClientRuntime.Date?
    /// The time reference in the inferenced dataset after which Amazon Lookout for Equipment started the inference execution.
    public var dataStartTimeAfter: ClientRuntime.Date?
    /// The name of the inference scheduler for the inference execution listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Specifies the maximum number of inference executions to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?
    /// The status of the inference execution.
    public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

    public init(
        dataEndTimeBefore: ClientRuntime.Date? = nil,
        dataStartTimeAfter: ClientRuntime.Date? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
    )
    {
        self.dataEndTimeBefore = dataEndTimeBefore
        self.dataStartTimeAfter = dataStartTimeAfter
        self.inferenceSchedulerName = inferenceSchedulerName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListInferenceExecutionsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerName: Swift.String?
    let dataStartTimeAfter: ClientRuntime.Date?
    let dataEndTimeBefore: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.InferenceExecutionStatus?
}

extension ListInferenceExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataStartTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTimeAfter)
        dataStartTimeAfter = dataStartTimeAfterDecoded
        let dataEndTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTimeBefore)
        dataEndTimeBefore = dataEndTimeBeforeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListInferenceExecutionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListInferenceExecutionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceExecutionSummaries = output.inferenceExecutionSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceExecutionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceExecutionsOutput: Swift.Equatable {
    /// Provides an array of information about the individual inference executions returned from the ListInferenceExecutions operation, including model used, inference scheduler, data configuration, and so on.
    public var inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference executions.
    public var nextToken: Swift.String?

    public init(
        inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceExecutionSummaries = inferenceExecutionSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceExecutionsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
}

extension ListInferenceExecutionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceExecutionSummaries = "InferenceExecutionSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceExecutionSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceExecutionSummary?].self, forKey: .inferenceExecutionSummaries)
        var inferenceExecutionSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil
        if let inferenceExecutionSummariesContainer = inferenceExecutionSummariesContainer {
            inferenceExecutionSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceExecutionSummary]()
            for structure0 in inferenceExecutionSummariesContainer {
                if let structure0 = structure0 {
                    inferenceExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceExecutionSummaries = inferenceExecutionSummariesDecoded0
    }
}

enum ListInferenceExecutionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListInferenceSchedulersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerNameBeginsWith = self.inferenceSchedulerNameBeginsWith {
            try encodeContainer.encode(inferenceSchedulerNameBeginsWith, forKey: .inferenceSchedulerNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListInferenceSchedulersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceSchedulersInput: Swift.Equatable {
    /// The beginning of the name of the inference schedulers to be listed.
    public var inferenceSchedulerNameBeginsWith: Swift.String?
    /// Specifies the maximum number of inference schedulers to list.
    public var maxResults: Swift.Int?
    /// The name of the machine learning model used by the inference scheduler to be listed.
    public var modelName: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?
    /// Specifies the current status of the inference schedulers.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWith
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListInferenceSchedulersInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerNameBeginsWith: Swift.String?
    let modelName: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension ListInferenceSchedulersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerNameBeginsWith)
        inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWithDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListInferenceSchedulersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListInferenceSchedulersOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerSummaries = output.inferenceSchedulerSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceSchedulerSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceSchedulersOutput: Swift.Equatable {
    /// Provides information about the specified inference scheduler, including data upload frequency, model name and ARN, and status.
    public var inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
    /// An opaque pagination token indicating where to continue the listing of inference schedulers.
    public var nextToken: Swift.String?

    public init(
        inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerSummaries = inferenceSchedulerSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceSchedulersOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
}

extension ListInferenceSchedulersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerSummaries = "InferenceSchedulerSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceSchedulerSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceSchedulerSummary?].self, forKey: .inferenceSchedulerSummaries)
        var inferenceSchedulerSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil
        if let inferenceSchedulerSummariesContainer = inferenceSchedulerSummariesContainer {
            inferenceSchedulerSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceSchedulerSummary]()
            for structure0 in inferenceSchedulerSummariesContainer {
                if let structure0 = structure0 {
                    inferenceSchedulerSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceSchedulerSummaries = inferenceSchedulerSummariesDecoded0
    }
}

enum ListInferenceSchedulersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListLabelGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupNameBeginsWith = "LabelGroupNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelGroupNameBeginsWith = self.labelGroupNameBeginsWith {
            try encodeContainer.encode(labelGroupNameBeginsWith, forKey: .labelGroupNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLabelGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelGroupsInput: Swift.Equatable {
    /// The beginning of the name of the label groups to be listed.
    public var labelGroupNameBeginsWith: Swift.String?
    /// Specifies the maximum number of label groups to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        labelGroupNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupNameBeginsWith = labelGroupNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLabelGroupsInputBody: Swift.Equatable {
    let labelGroupNameBeginsWith: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListLabelGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupNameBeginsWith = "LabelGroupNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupNameBeginsWith)
        labelGroupNameBeginsWith = labelGroupNameBeginsWithDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListLabelGroupsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListLabelGroupsOutputBody = try responseDecoder.decode(responseBody: data)
            self.labelGroupSummaries = output.labelGroupSummaries
            self.nextToken = output.nextToken
        } else {
            self.labelGroupSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelGroupsOutput: Swift.Equatable {
    /// A summary of the label groups.
    public var labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelGroupSummaries = labelGroupSummaries
        self.nextToken = nextToken
    }
}

struct ListLabelGroupsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let labelGroupSummaries: [LookoutEquipmentClientTypes.LabelGroupSummary]?
}

extension ListLabelGroupsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelGroupSummaries = "LabelGroupSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelGroupSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.LabelGroupSummary?].self, forKey: .labelGroupSummaries)
        var labelGroupSummariesDecoded0:[LookoutEquipmentClientTypes.LabelGroupSummary]? = nil
        if let labelGroupSummariesContainer = labelGroupSummariesContainer {
            labelGroupSummariesDecoded0 = [LookoutEquipmentClientTypes.LabelGroupSummary]()
            for structure0 in labelGroupSummariesContainer {
                if let structure0 = structure0 {
                    labelGroupSummariesDecoded0?.append(structure0)
                }
            }
        }
        labelGroupSummaries = labelGroupSummariesDecoded0
    }
}

enum ListLabelGroupsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case labelGroupName = "LabelGroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let intervalEndTime = self.intervalEndTime {
            try encodeContainer.encodeTimestamp(intervalEndTime, format: .epochSeconds, forKey: .intervalEndTime)
        }
        if let intervalStartTime = self.intervalStartTime {
            try encodeContainer.encodeTimestamp(intervalStartTime, format: .epochSeconds, forKey: .intervalStartTime)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelsInput: Swift.Equatable {
    /// Lists the labels that pertain to a particular piece of equipment.
    public var equipment: Swift.String?
    /// Returns labels with a particular fault code.
    public var faultCode: Swift.String?
    /// Returns all labels with a start time earlier than the end time given.
    public var intervalEndTime: ClientRuntime.Date?
    /// Returns all the labels with a end time equal to or later than the start time given.
    public var intervalStartTime: ClientRuntime.Date?
    /// Retruns the name of the label group.
    /// This member is required.
    public var labelGroupName: Swift.String?
    /// Specifies the maximum number of labels to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of label groups.
    public var nextToken: Swift.String?

    public init(
        equipment: Swift.String? = nil,
        faultCode: Swift.String? = nil,
        intervalEndTime: ClientRuntime.Date? = nil,
        intervalStartTime: ClientRuntime.Date? = nil,
        labelGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.equipment = equipment
        self.faultCode = faultCode
        self.intervalEndTime = intervalEndTime
        self.intervalStartTime = intervalStartTime
        self.labelGroupName = labelGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLabelsInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let intervalStartTime: ClientRuntime.Date?
    let intervalEndTime: ClientRuntime.Date?
    let faultCode: Swift.String?
    let equipment: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case labelGroupName = "LabelGroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let intervalStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalStartTime)
        intervalStartTime = intervalStartTimeDecoded
        let intervalEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .intervalEndTime)
        intervalEndTime = intervalEndTimeDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListLabelsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListLabelsOutputBody = try responseDecoder.decode(responseBody: data)
            self.labelSummaries = output.labelSummaries
            self.nextToken = output.nextToken
        } else {
            self.labelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelsOutput: Swift.Equatable {
    /// A summary of the items in the label group.
    public var labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
    /// An opaque pagination token indicating where to continue the listing of datasets.
    public var nextToken: Swift.String?

    public init(
        labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelSummaries = labelSummaries
        self.nextToken = nextToken
    }
}

struct ListLabelsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
}

extension ListLabelsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelSummaries = "LabelSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.LabelSummary?].self, forKey: .labelSummaries)
        var labelSummariesDecoded0:[LookoutEquipmentClientTypes.LabelSummary]? = nil
        if let labelSummariesContainer = labelSummariesContainer {
            labelSummariesDecoded0 = [LookoutEquipmentClientTypes.LabelSummary]()
            for structure0 in labelSummariesContainer {
                if let structure0 = structure0 {
                    labelSummariesDecoded0?.append(structure0)
                }
            }
        }
        labelSummaries = labelSummariesDecoded0
    }
}

enum ListLabelsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListModelVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAtEndTime = "CreatedAtEndTime"
        case createdAtStartTime = "CreatedAtStartTime"
        case maxModelVersion = "MaxModelVersion"
        case maxResults = "MaxResults"
        case minModelVersion = "MinModelVersion"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case sourceType = "SourceType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAtEndTime = self.createdAtEndTime {
            try encodeContainer.encodeTimestamp(createdAtEndTime, format: .epochSeconds, forKey: .createdAtEndTime)
        }
        if let createdAtStartTime = self.createdAtStartTime {
            try encodeContainer.encodeTimestamp(createdAtStartTime, format: .epochSeconds, forKey: .createdAtStartTime)
        }
        if let maxModelVersion = self.maxModelVersion {
            try encodeContainer.encode(maxModelVersion, forKey: .maxModelVersion)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let minModelVersion = self.minModelVersion {
            try encodeContainer.encode(minModelVersion, forKey: .minModelVersion)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListModelVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelVersionsInput: Swift.Equatable {
    /// Filter results to return all the model versions created before this time.
    public var createdAtEndTime: ClientRuntime.Date?
    /// Filter results to return all the model versions created after this time.
    public var createdAtStartTime: ClientRuntime.Date?
    /// Specifies the highest version of the model to return in the list.
    public var maxModelVersion: Swift.Int?
    /// Specifies the maximum number of machine learning model versions to list.
    public var maxResults: Swift.Int?
    /// Specifies the lowest version of the model to return in the list.
    public var minModelVersion: Swift.Int?
    /// Then name of the machine learning model for which the model versions are to be listed.
    /// This member is required.
    public var modelName: Swift.String?
    /// If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the NextToken field in the request to list the next page of results.
    public var nextToken: Swift.String?
    /// Filter the results based on the way the model version was generated.
    public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    /// Filter the results based on the current status of the model version.
    public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

    public init(
        createdAtEndTime: ClientRuntime.Date? = nil,
        createdAtStartTime: ClientRuntime.Date? = nil,
        maxModelVersion: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        minModelVersion: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
        status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
    )
    {
        self.createdAtEndTime = createdAtEndTime
        self.createdAtStartTime = createdAtStartTime
        self.maxModelVersion = maxModelVersion
        self.maxResults = maxResults
        self.minModelVersion = minModelVersion
        self.modelName = modelName
        self.nextToken = nextToken
        self.sourceType = sourceType
        self.status = status
    }
}

struct ListModelVersionsInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: LookoutEquipmentClientTypes.ModelVersionStatus?
    let sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
    let createdAtEndTime: ClientRuntime.Date?
    let createdAtStartTime: ClientRuntime.Date?
    let maxModelVersion: Swift.Int?
    let minModelVersion: Swift.Int?
}

extension ListModelVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAtEndTime = "CreatedAtEndTime"
        case createdAtStartTime = "CreatedAtStartTime"
        case maxModelVersion = "MaxModelVersion"
        case maxResults = "MaxResults"
        case minModelVersion = "MinModelVersion"
        case modelName = "ModelName"
        case nextToken = "NextToken"
        case sourceType = "SourceType"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .status)
        status = statusDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionSourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let createdAtEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAtEndTime)
        createdAtEndTime = createdAtEndTimeDecoded
        let createdAtStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAtStartTime)
        createdAtStartTime = createdAtStartTimeDecoded
        let maxModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxModelVersion)
        maxModelVersion = maxModelVersionDecoded
        let minModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minModelVersion)
        minModelVersion = minModelVersionDecoded
    }
}

extension ListModelVersionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListModelVersionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelVersionSummaries = output.modelVersionSummaries
            self.nextToken = output.nextToken
        } else {
            self.modelVersionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelVersionsOutput: Swift.Equatable {
    /// Provides information on the specified model version, including the created time, model and dataset ARNs, and status.
    public var modelVersionSummaries: [LookoutEquipmentClientTypes.ModelVersionSummary]?
    /// If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the NextToken field in the request to list the next page of results.
    public var nextToken: Swift.String?

    public init(
        modelVersionSummaries: [LookoutEquipmentClientTypes.ModelVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelVersionSummaries = modelVersionSummaries
        self.nextToken = nextToken
    }
}

struct ListModelVersionsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let modelVersionSummaries: [LookoutEquipmentClientTypes.ModelVersionSummary]?
}

extension ListModelVersionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelVersionSummaries = "ModelVersionSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelVersionSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.ModelVersionSummary?].self, forKey: .modelVersionSummaries)
        var modelVersionSummariesDecoded0:[LookoutEquipmentClientTypes.ModelVersionSummary]? = nil
        if let modelVersionSummariesContainer = modelVersionSummariesContainer {
            modelVersionSummariesDecoded0 = [LookoutEquipmentClientTypes.ModelVersionSummary]()
            for structure0 in modelVersionSummariesContainer {
                if let structure0 = structure0 {
                    modelVersionSummariesDecoded0?.append(structure0)
                }
            }
        }
        modelVersionSummaries = modelVersionSummariesDecoded0
    }
}

enum ListModelVersionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListModelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = self.datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelNameBeginsWith = self.modelNameBeginsWith {
            try encodeContainer.encode(modelNameBeginsWith, forKey: .modelNameBeginsWith)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListModelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelsInput: Swift.Equatable {
    /// The beginning of the name of the dataset of the machine learning models to be listed.
    public var datasetNameBeginsWith: Swift.String?
    /// Specifies the maximum number of machine learning models to list.
    public var maxResults: Swift.Int?
    /// The beginning of the name of the machine learning models being listed.
    public var modelNameBeginsWith: Swift.String?
    /// An opaque pagination token indicating where to continue the listing of machine learning models.
    public var nextToken: Swift.String?
    /// The status of the machine learning model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init(
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListModelsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: LookoutEquipmentClientTypes.ModelStatus?
    let modelNameBeginsWith: Swift.String?
    let datasetNameBeginsWith: Swift.String?
}

extension ListModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let modelNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelNameBeginsWith)
        modelNameBeginsWith = modelNameBeginsWithDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListModelsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListModelsOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelSummaries = output.modelSummaries
            self.nextToken = output.nextToken
        } else {
            self.modelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelsOutput: Swift.Equatable {
    /// Provides information on the specified model, including created time, model and dataset ARNs, and status.
    public var modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
    /// An opaque pagination token indicating where to continue the listing of machine learning models.
    public var nextToken: Swift.String?

    public init(
        modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelSummaries = modelSummaries
        self.nextToken = nextToken
    }
}

struct ListModelsOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
}

extension ListModelsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelSummaries = "ModelSummaries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.ModelSummary?].self, forKey: .modelSummaries)
        var modelSummariesDecoded0:[LookoutEquipmentClientTypes.ModelSummary]? = nil
        if let modelSummariesContainer = modelSummariesContainer {
            modelSummariesDecoded0 = [LookoutEquipmentClientTypes.ModelSummary]()
            for structure0 in modelSummariesContainer {
                if let structure0 = structure0 {
                    modelSummariesDecoded0?.append(structure0)
                }
            }
        }
        modelSummaries = modelSummariesDecoded0
    }
}

enum ListModelsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListRetrainingSchedulersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelNameBeginsWith = self.modelNameBeginsWith {
            try encodeContainer.encode(modelNameBeginsWith, forKey: .modelNameBeginsWith)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListRetrainingSchedulersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRetrainingSchedulersInput: Swift.Equatable {
    /// Specifies the maximum number of retraining schedulers to list.
    public var maxResults: Swift.Int?
    /// Specify this field to only list retraining schedulers whose machine learning models begin with the value you specify.
    public var modelNameBeginsWith: Swift.String?
    /// If the number of results exceeds the maximum, a pagination token is returned. Use the token in the request to show the next page of retraining schedulers.
    public var nextToken: Swift.String?
    /// Specify this field to only list retraining schedulers whose status matches the value you specify.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListRetrainingSchedulersInputBody: Swift.Equatable {
    let modelNameBeginsWith: Swift.String?
    let status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListRetrainingSchedulersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelNameBeginsWith)
        modelNameBeginsWith = modelNameBeginsWithDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListRetrainingSchedulersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListRetrainingSchedulersOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.retrainingSchedulerSummaries = output.retrainingSchedulerSummaries
        } else {
            self.nextToken = nil
            self.retrainingSchedulerSummaries = nil
        }
    }
}

public struct ListRetrainingSchedulersOutput: Swift.Equatable {
    /// If the number of results exceeds the maximum, this pagination token is returned. Use this token in the request to show the next page of retraining schedulers.
    public var nextToken: Swift.String?
    /// Provides information on the specified retraining scheduler, including the model name, model ARN, status, and start date.
    public var retrainingSchedulerSummaries: [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]?

    public init(
        nextToken: Swift.String? = nil,
        retrainingSchedulerSummaries: [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.retrainingSchedulerSummaries = retrainingSchedulerSummaries
    }
}

struct ListRetrainingSchedulersOutputBody: Swift.Equatable {
    let retrainingSchedulerSummaries: [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]?
    let nextToken: Swift.String?
}

extension ListRetrainingSchedulersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case retrainingSchedulerSummaries = "RetrainingSchedulerSummaries"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retrainingSchedulerSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.RetrainingSchedulerSummary?].self, forKey: .retrainingSchedulerSummaries)
        var retrainingSchedulerSummariesDecoded0:[LookoutEquipmentClientTypes.RetrainingSchedulerSummary]? = nil
        if let retrainingSchedulerSummariesContainer = retrainingSchedulerSummariesContainer {
            retrainingSchedulerSummariesDecoded0 = [LookoutEquipmentClientTypes.RetrainingSchedulerSummary]()
            for structure0 in retrainingSchedulerSummariesContainer {
                if let structure0 = structure0 {
                    retrainingSchedulerSummariesDecoded0?.append(structure0)
                }
            }
        }
        retrainingSchedulerSummaries = retrainingSchedulerSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListRetrainingSchedulersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListSensorStatisticsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case ingestionJobId = "IngestionJobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionJobId = self.ingestionJobId {
            try encodeContainer.encode(ingestionJobId, forKey: .ingestionJobId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListSensorStatisticsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSensorStatisticsInput: Swift.Equatable {
    /// The name of the dataset associated with the list of Sensor Statistics.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs.
    public var ingestionJobId: Swift.String?
    /// Specifies the maximum number of sensors for which to retrieve statistics.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?

    public init(
        datasetName: Swift.String? = nil,
        ingestionJobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.ingestionJobId = ingestionJobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSensorStatisticsInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let ingestionJobId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSensorStatisticsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case ingestionJobId = "IngestionJobId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let ingestionJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ingestionJobId)
        ingestionJobId = ingestionJobIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSensorStatisticsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListSensorStatisticsOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.sensorStatisticsSummaries = output.sensorStatisticsSummaries
        } else {
            self.nextToken = nil
            self.sensorStatisticsSummaries = nil
        }
    }
}

public struct ListSensorStatisticsOutput: Swift.Equatable {
    /// An opaque pagination token indicating where to continue the listing of sensor statistics.
    public var nextToken: Swift.String?
    /// Provides ingestion-based statistics regarding the specified sensor with respect to various validation types, such as whether data exists, the number and percentage of missing values, and the number and percentage of duplicate timestamps.
    public var sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]?

    public init(
        nextToken: Swift.String? = nil,
        sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.sensorStatisticsSummaries = sensorStatisticsSummaries
    }
}

struct ListSensorStatisticsOutputBody: Swift.Equatable {
    let sensorStatisticsSummaries: [LookoutEquipmentClientTypes.SensorStatisticsSummary]?
    let nextToken: Swift.String?
}

extension ListSensorStatisticsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case sensorStatisticsSummaries = "SensorStatisticsSummaries"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sensorStatisticsSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.SensorStatisticsSummary?].self, forKey: .sensorStatisticsSummaries)
        var sensorStatisticsSummariesDecoded0:[LookoutEquipmentClientTypes.SensorStatisticsSummary]? = nil
        if let sensorStatisticsSummariesContainer = sensorStatisticsSummariesContainer {
            sensorStatisticsSummariesDecoded0 = [LookoutEquipmentClientTypes.SensorStatisticsSummary]()
            for structure0 in sensorStatisticsSummariesContainer {
                if let structure0 = structure0 {
                    sensorStatisticsSummariesDecoded0?.append(structure0)
                }
            }
        }
        sensorStatisticsSummaries = sensorStatisticsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListSensorStatisticsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource (such as the dataset or model) that is the focus of the ListTagsForResource operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutput: Swift.Equatable {
    /// Any tags associated with the resource.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputBody: Swift.Equatable {
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension ListTagsForResourceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes.MissingCompleteSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on sensors that have sensor data completely missing.
    public struct MissingCompleteSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have data missing completely.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }

}

extension LookoutEquipmentClientTypes.MissingSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
        case totalNumberOfMissingValues = "TotalNumberOfMissingValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
        if let totalNumberOfMissingValues = self.totalNumberOfMissingValues {
            try encodeContainer.encode(totalNumberOfMissingValues, forKey: .totalNumberOfMissingValues)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
        let totalNumberOfMissingValuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfMissingValues)
        totalNumberOfMissingValues = totalNumberOfMissingValuesDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises aggregated information on sensors having missing data.
    public struct MissingSensorData: Swift.Equatable {
        /// Indicates the number of sensors that have atleast some data missing.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?
        /// Indicates the total number of missing values across all the sensors.
        /// This member is required.
        public var totalNumberOfMissingValues: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil,
            totalNumberOfMissingValues: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
            self.totalNumberOfMissingValues = totalNumberOfMissingValues
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum ModelPromoteMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case managed
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPromoteMode] {
            return [
                .managed,
                .manual,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPromoteMode(rawValue: rawValue) ?? ModelPromoteMode.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .failed,
                .importInProgress,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.ModelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeModelVersion = "ActiveModelVersion"
        case activeModelVersionArn = "ActiveModelVersionArn"
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case latestScheduledRetrainingModelVersion = "LatestScheduledRetrainingModelVersion"
        case latestScheduledRetrainingStartTime = "LatestScheduledRetrainingStartTime"
        case latestScheduledRetrainingStatus = "LatestScheduledRetrainingStatus"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case nextScheduledRetrainingStartDate = "NextScheduledRetrainingStartDate"
        case retrainingSchedulerStatus = "RetrainingSchedulerStatus"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeModelVersion = self.activeModelVersion {
            try encodeContainer.encode(activeModelVersion, forKey: .activeModelVersion)
        }
        if let activeModelVersionArn = self.activeModelVersionArn {
            try encodeContainer.encode(activeModelVersionArn, forKey: .activeModelVersionArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let latestScheduledRetrainingModelVersion = self.latestScheduledRetrainingModelVersion {
            try encodeContainer.encode(latestScheduledRetrainingModelVersion, forKey: .latestScheduledRetrainingModelVersion)
        }
        if let latestScheduledRetrainingStartTime = self.latestScheduledRetrainingStartTime {
            try encodeContainer.encodeTimestamp(latestScheduledRetrainingStartTime, format: .epochSeconds, forKey: .latestScheduledRetrainingStartTime)
        }
        if let latestScheduledRetrainingStatus = self.latestScheduledRetrainingStatus {
            try encodeContainer.encode(latestScheduledRetrainingStatus.rawValue, forKey: .latestScheduledRetrainingStatus)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextScheduledRetrainingStartDate = self.nextScheduledRetrainingStartDate {
            try encodeContainer.encodeTimestamp(nextScheduledRetrainingStartDate, format: .epochSeconds, forKey: .nextScheduledRetrainingStartDate)
        }
        if let retrainingSchedulerStatus = self.retrainingSchedulerStatus {
            try encodeContainer.encode(retrainingSchedulerStatus.rawValue, forKey: .retrainingSchedulerStatus)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let activeModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeModelVersion)
        activeModelVersion = activeModelVersionDecoded
        let activeModelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeModelVersionArn)
        activeModelVersionArn = activeModelVersionArnDecoded
        let latestScheduledRetrainingStatusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .latestScheduledRetrainingStatus)
        latestScheduledRetrainingStatus = latestScheduledRetrainingStatusDecoded
        let latestScheduledRetrainingModelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestScheduledRetrainingModelVersion)
        latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersionDecoded
        let latestScheduledRetrainingStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestScheduledRetrainingStartTime)
        latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTimeDecoded
        let nextScheduledRetrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .nextScheduledRetrainingStartDate)
        nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDateDecoded
        let retrainingSchedulerStatusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .retrainingSchedulerStatus)
        retrainingSchedulerStatus = retrainingSchedulerStatusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the specified machine learning model, including dataset and model names and ARNs, as well as status.
    public struct ModelSummary: Swift.Equatable {
        /// The model version that the inference scheduler uses to run an inference execution.
        public var activeModelVersion: Swift.Int?
        /// The Amazon Resource Name (ARN) of the model version that is set as active. The active model version is the model version that the inference scheduler uses to run an inference execution.
        public var activeModelVersionArn: Swift.String?
        /// The time at which the specific model was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the dataset used to create the model.
        public var datasetArn: Swift.String?
        /// The name of the dataset being used for the machine learning model.
        public var datasetName: Swift.String?
        /// Indicates the most recent model version that was generated by retraining.
        public var latestScheduledRetrainingModelVersion: Swift.Int?
        /// Indicates the start time of the most recent scheduled retraining run.
        public var latestScheduledRetrainingStartTime: ClientRuntime.Date?
        /// Indicates the status of the most recent scheduled retraining run.
        public var latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus?
        /// The Amazon Resource Name (ARN) of the machine learning model.
        public var modelArn: Swift.String?
        /// The name of the machine learning model.
        public var modelName: Swift.String?
        /// Indicates the date that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to [the nearest UTC day](https://docs.aws.amazon.com/https:/docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp).
        public var nextScheduledRetrainingStartDate: ClientRuntime.Date?
        /// Indicates the status of the retraining scheduler.
        public var retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
        /// Indicates the status of the machine learning model.
        public var status: LookoutEquipmentClientTypes.ModelStatus?

        public init(
            activeModelVersion: Swift.Int? = nil,
            activeModelVersionArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            latestScheduledRetrainingModelVersion: Swift.Int? = nil,
            latestScheduledRetrainingStartTime: ClientRuntime.Date? = nil,
            latestScheduledRetrainingStatus: LookoutEquipmentClientTypes.ModelVersionStatus? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            nextScheduledRetrainingStartDate: ClientRuntime.Date? = nil,
            retrainingSchedulerStatus: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil,
            status: LookoutEquipmentClientTypes.ModelStatus? = nil
        )
        {
            self.activeModelVersion = activeModelVersion
            self.activeModelVersionArn = activeModelVersionArn
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.latestScheduledRetrainingModelVersion = latestScheduledRetrainingModelVersion
            self.latestScheduledRetrainingStartTime = latestScheduledRetrainingStartTime
            self.latestScheduledRetrainingStatus = latestScheduledRetrainingStatus
            self.modelArn = modelArn
            self.modelName = modelName
            self.nextScheduledRetrainingStartDate = nextScheduledRetrainingStartDate
            self.retrainingSchedulerStatus = retrainingSchedulerStatus
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum ModelVersionSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `import`
        case retraining
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVersionSourceType] {
            return [
                .import,
                .retraining,
                .training,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .import: return "IMPORT"
            case .retraining: return "RETRAINING"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelVersionSourceType(rawValue: rawValue) ?? ModelVersionSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes {
    public enum ModelVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case importInProgress
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVersionStatus] {
            return [
                .canceled,
                .failed,
                .importInProgress,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelVersionStatus(rawValue: rawValue) ?? ModelVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.ModelVersionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case modelVersionArn = "ModelVersionArn"
        case sourceType = "SourceType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let modelVersionArn = self.modelVersionArn {
            try encodeContainer.encode(modelVersionArn, forKey: .modelVersionArn)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let modelVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersionArn)
        modelVersionArn = modelVersionArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionStatus.self, forKey: .status)
        status = statusDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelVersionSourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific model version.
    public struct ModelVersionSummary: Swift.Equatable {
        /// The time when this model version was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the model that this model version is a version of.
        public var modelArn: Swift.String?
        /// The name of the model that this model version is a version of.
        public var modelName: Swift.String?
        /// The version of the model.
        public var modelVersion: Swift.Int?
        /// The Amazon Resource Name (ARN) of the model version.
        public var modelVersionArn: Swift.String?
        /// Indicates how this model version was generated.
        public var sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType?
        /// The current status of the model version.
        public var status: LookoutEquipmentClientTypes.ModelVersionStatus?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.Int? = nil,
            modelVersionArn: Swift.String? = nil,
            sourceType: LookoutEquipmentClientTypes.ModelVersionSourceType? = nil,
            status: LookoutEquipmentClientTypes.ModelVersionStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.modelArn = modelArn
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.modelVersionArn = modelVersionArn
            self.sourceType = sourceType
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.MonotonicValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monotonicity = "Monotonicity"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monotonicity = self.monotonicity {
            try encodeContainer.encode(monotonicity.rawValue, forKey: .monotonicity)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let monotonicityDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.Monotonicity.self, forKey: .monotonicity)
        monotonicity = monotonicityDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on monotonic values in the data.
    public struct MonotonicValues: Swift.Equatable {
        /// Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC.
        public var monotonicity: LookoutEquipmentClientTypes.Monotonicity?
        /// Indicates whether there is a potential data issue related to having monotonic values.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            monotonicity: LookoutEquipmentClientTypes.Monotonicity? = nil,
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.monotonicity = monotonicity
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum Monotonicity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case decreasing
        case increasing
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [Monotonicity] {
            return [
                .decreasing,
                .increasing,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .decreasing: return "DECREASING"
            case .increasing: return "INCREASING"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Monotonicity(rawValue: rawValue) ?? Monotonicity.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.MultipleOperatingModes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on operating modes in data.
    public struct MultipleOperatingModes: Swift.Equatable {
        /// Indicates whether there is a potential data issue related to having multiple operating modes.
        /// This member is required.
        public var status: LookoutEquipmentClientTypes.StatisticalIssueStatus?

        public init(
            status: LookoutEquipmentClientTypes.StatisticalIssueStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
        case resourcePolicy = "ResourcePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourcePolicy = self.resourcePolicy {
            try encodeContainer.encode(resourcePolicy, forKey: .resourcePolicy)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource for which the policy is being created.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The JSON-formatted resource policy to create.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let resourcePolicy: Swift.String?
    let policyRevisionId: Swift.String?
    let clientToken: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
        case resourcePolicy = "ResourcePolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension PutResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.policyRevisionId = output.policyRevisionId
            self.resourceArn = output.resourceArn
        } else {
            self.policyRevisionId = nil
            self.resourceArn = nil
        }
    }
}

public struct PutResourcePolicyOutput: Swift.Equatable {
    /// A unique identifier for a revision of the resource policy.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource for which the policy was created.
    public var resourceArn: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyOutputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policyRevisionId: Swift.String?
}

extension PutResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

enum PutResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The resource requested could not be found. Verify the resource ID and retry your request.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes {
    public enum RetrainingSchedulerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RetrainingSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RetrainingSchedulerStatus(rawValue: rawValue) ?? RetrainingSchedulerStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.RetrainingSchedulerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lookbackWindow = "LookbackWindow"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lookbackWindow = self.lookbackWindow {
            try encodeContainer.encode(lookbackWindow, forKey: .lookbackWindow)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let retrainingFrequency = self.retrainingFrequency {
            try encodeContainer.encode(retrainingFrequency, forKey: .retrainingFrequency)
        }
        if let retrainingStartDate = self.retrainingStartDate {
            try encodeContainer.encodeTimestamp(retrainingStartDate, format: .epochSeconds, forKey: .retrainingStartDate)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let retrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .retrainingStartDate)
        retrainingStartDate = retrainingStartDateDecoded
        let retrainingFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrainingFrequency)
        retrainingFrequency = retrainingFrequencyDecoded
        let lookbackWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lookbackWindow)
        lookbackWindow = lookbackWindowDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the specified retraining scheduler, including model name, status, start date, frequency, and lookback window.
    public struct RetrainingSchedulerSummary: Swift.Equatable {
        /// The number of past days of data used for retraining.
        public var lookbackWindow: Swift.String?
        /// The ARN of the model that the retraining scheduler is attached to.
        public var modelArn: Swift.String?
        /// The name of the model that the retraining scheduler is attached to.
        public var modelName: Swift.String?
        /// The frequency at which the model retraining is set. This follows the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) guidelines.
        public var retrainingFrequency: Swift.String?
        /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
        public var retrainingStartDate: ClientRuntime.Date?
        /// The status of the retraining scheduler.
        public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

        public init(
            lookbackWindow: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            retrainingFrequency: Swift.String? = nil,
            retrainingStartDate: ClientRuntime.Date? = nil,
            status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
        )
        {
            self.lookbackWindow = lookbackWindow
            self.modelArn = modelArn
            self.modelName = modelName
            self.retrainingFrequency = retrainingFrequency
            self.retrainingStartDate = retrainingStartDate
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.S3Object: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Contains information about an S3 bucket.
    public struct S3Object: Swift.Equatable {
        /// The name of the specific S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The Amazon Web Services Key Management Service (KMS key) key being used to encrypt the S3 object. Without this key, data in the bucket is not accessible.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension LookoutEquipmentClientTypes.SensorStatisticsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoricalValues = "CategoricalValues"
        case componentName = "ComponentName"
        case dataEndTime = "DataEndTime"
        case dataExists = "DataExists"
        case dataStartTime = "DataStartTime"
        case duplicateTimestamps = "DuplicateTimestamps"
        case invalidDateEntries = "InvalidDateEntries"
        case invalidValues = "InvalidValues"
        case largeTimestampGaps = "LargeTimestampGaps"
        case missingValues = "MissingValues"
        case monotonicValues = "MonotonicValues"
        case multipleOperatingModes = "MultipleOperatingModes"
        case sensorName = "SensorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalValues = self.categoricalValues {
            try encodeContainer.encode(categoricalValues, forKey: .categoricalValues)
        }
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let dataEndTime = self.dataEndTime {
            try encodeContainer.encodeTimestamp(dataEndTime, format: .epochSeconds, forKey: .dataEndTime)
        }
        if dataExists != false {
            try encodeContainer.encode(dataExists, forKey: .dataExists)
        }
        if let dataStartTime = self.dataStartTime {
            try encodeContainer.encodeTimestamp(dataStartTime, format: .epochSeconds, forKey: .dataStartTime)
        }
        if let duplicateTimestamps = self.duplicateTimestamps {
            try encodeContainer.encode(duplicateTimestamps, forKey: .duplicateTimestamps)
        }
        if let invalidDateEntries = self.invalidDateEntries {
            try encodeContainer.encode(invalidDateEntries, forKey: .invalidDateEntries)
        }
        if let invalidValues = self.invalidValues {
            try encodeContainer.encode(invalidValues, forKey: .invalidValues)
        }
        if let largeTimestampGaps = self.largeTimestampGaps {
            try encodeContainer.encode(largeTimestampGaps, forKey: .largeTimestampGaps)
        }
        if let missingValues = self.missingValues {
            try encodeContainer.encode(missingValues, forKey: .missingValues)
        }
        if let monotonicValues = self.monotonicValues {
            try encodeContainer.encode(monotonicValues, forKey: .monotonicValues)
        }
        if let multipleOperatingModes = self.multipleOperatingModes {
            try encodeContainer.encode(multipleOperatingModes, forKey: .multipleOperatingModes)
        }
        if let sensorName = self.sensorName {
            try encodeContainer.encode(sensorName, forKey: .sensorName)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let sensorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sensorName)
        sensorName = sensorNameDecoded
        let dataExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataExists) ?? false
        dataExists = dataExistsDecoded
        let missingValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .missingValues)
        missingValues = missingValuesDecoded
        let invalidValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .invalidValues)
        invalidValues = invalidValuesDecoded
        let invalidDateEntriesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .invalidDateEntries)
        invalidDateEntries = invalidDateEntriesDecoded
        let duplicateTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CountPercent.self, forKey: .duplicateTimestamps)
        duplicateTimestamps = duplicateTimestampsDecoded
        let categoricalValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.CategoricalValues.self, forKey: .categoricalValues)
        categoricalValues = categoricalValuesDecoded
        let multipleOperatingModesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MultipleOperatingModes.self, forKey: .multipleOperatingModes)
        multipleOperatingModes = multipleOperatingModesDecoded
        let largeTimestampGapsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LargeTimestampGaps.self, forKey: .largeTimestampGaps)
        largeTimestampGaps = largeTimestampGapsDecoded
        let monotonicValuesDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MonotonicValues.self, forKey: .monotonicValues)
        monotonicValues = monotonicValuesDecoded
        let dataStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor.
    public struct SensorStatisticsSummary: Swift.Equatable {
        /// Parameter that describes potential risk about whether data associated with the sensor is categorical.
        public var categoricalValues: LookoutEquipmentClientTypes.CategoricalValues?
        /// Name of the component to which the particular sensor belongs for which the statistics belong to.
        public var componentName: Swift.String?
        /// Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to.
        public var dataEndTime: ClientRuntime.Date?
        /// Parameter that indicates whether data exists for the sensor that the statistics belong to.
        public var dataExists: Swift.Bool
        /// Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to.
        public var dataStartTime: ClientRuntime.Date?
        /// Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to.
        public var invalidDateEntries: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to.
        public var invalidValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps.
        public var largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps?
        /// Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to.
        public var missingValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic.
        public var monotonicValues: LookoutEquipmentClientTypes.MonotonicValues?
        /// Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode.
        public var multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes?
        /// Name of the sensor that the statistics belong to.
        public var sensorName: Swift.String?

        public init(
            categoricalValues: LookoutEquipmentClientTypes.CategoricalValues? = nil,
            componentName: Swift.String? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataExists: Swift.Bool = false,
            dataStartTime: ClientRuntime.Date? = nil,
            duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidDateEntries: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps? = nil,
            missingValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            monotonicValues: LookoutEquipmentClientTypes.MonotonicValues? = nil,
            multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes? = nil,
            sensorName: Swift.String? = nil
        )
        {
            self.categoricalValues = categoricalValues
            self.componentName = componentName
            self.dataEndTime = dataEndTime
            self.dataExists = dataExists
            self.dataStartTime = dataStartTime
            self.duplicateTimestamps = duplicateTimestamps
            self.invalidDateEntries = invalidDateEntries
            self.invalidValues = invalidValues
            self.largeTimestampGaps = largeTimestampGaps
            self.missingValues = missingValues
            self.monotonicValues = monotonicValues
            self.multipleOperatingModes = multipleOperatingModes
            self.sensorName = sensorName
        }
    }

}

extension LookoutEquipmentClientTypes.SensorsWithShortDateRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedSensorCount = "AffectedSensorCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedSensorCount = self.affectedSensorCount {
            try encodeContainer.encode(affectedSensorCount, forKey: .affectedSensorCount)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let affectedSensorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedSensorCount)
        affectedSensorCount = affectedSensorCountDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information on sensors that have shorter date range.
    public struct SensorsWithShortDateRange: Swift.Equatable {
        /// Indicates the number of sensors that have less than 90 days of data.
        /// This member is required.
        public var affectedSensorCount: Swift.Int?

        public init(
            affectedSensorCount: Swift.Int? = nil
        )
        {
            self.affectedSensorCount = affectedSensorCount
        }
    }

}

extension ServiceQuotaExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Resource limitations have been exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartDataIngestionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = self.ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension StartDataIngestionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDataIngestionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being used by the data ingestion job.
    /// This member is required.
    public var datasetName: Swift.String?
    /// Specifies information for the input data for the data ingestion job, including dataset S3 location.
    /// This member is required.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.roleArn = roleArn
    }
}

struct StartDataIngestionJobInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let roleArn: Swift.String?
    let clientToken: Swift.String?
}

extension StartDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartDataIngestionJobOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartDataIngestionJobOutputBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.status = output.status
        } else {
            self.jobId = nil
            self.status = nil
        }
    }
}

public struct StartDataIngestionJobOutput: Swift.Equatable {
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// Indicates the status of the StartDataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init(
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.jobId = jobId
        self.status = status
    }
}

struct StartDataIngestionJobOutputBody: Swift.Equatable {
    let jobId: Swift.String?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension StartDataIngestionJobOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum StartDataIngestionJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension StartInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be started.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StartInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension StartInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StartInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartInferenceSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StartInferenceSchedulerOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being started.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being started.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model being used by the inference scheduler.
    public var modelArn: Swift.String?
    /// The name of the machine learning model being used by the inference scheduler.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StartInferenceSchedulerOutputBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StartInferenceSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum StartInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension StartRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartRetrainingSchedulerInput: Swift.Equatable {
    /// The name of the model whose retraining scheduler you want to start.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct StartRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension StartRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension StartRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartRetrainingSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StartRetrainingSchedulerOutput: Swift.Equatable {
    /// The ARN of the model whose retraining scheduler is being started.
    public var modelArn: Swift.String?
    /// The name of the model whose retraining scheduler is being started.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StartRetrainingSchedulerOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
}

extension StartRetrainingSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum StartRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes {
    public enum StatisticalIssueStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noIssueDetected
        case potentialIssueDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [StatisticalIssueStatus] {
            return [
                .noIssueDetected,
                .potentialIssueDetected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noIssueDetected: return "NO_ISSUE_DETECTED"
            case .potentialIssueDetected: return "POTENTIAL_ISSUE_DETECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatisticalIssueStatus(rawValue: rawValue) ?? StatisticalIssueStatus.sdkUnknown(rawValue)
        }
    }
}

extension StopInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

extension StopInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be stopped.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init(
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StopInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
}

extension StopInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StopInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StopInferenceSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StopInferenceSchedulerOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference schedule being stopped.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being stopped.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model used by the inference scheduler being stopped.
    public var modelArn: Swift.String?
    /// The name of the machine learning model used by the inference scheduler being stopped.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init(
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StopInferenceSchedulerOutputBody: Swift.Equatable {
    let modelArn: Swift.String?
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let inferenceSchedulerArn: Swift.String?
    let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StopInferenceSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum StopInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StopRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension StopRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopRetrainingSchedulerInput: Swift.Equatable {
    /// The name of the model whose retraining scheduler you want to stop.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct StopRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension StopRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension StopRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StopRetrainingSchedulerOutputBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StopRetrainingSchedulerOutput: Swift.Equatable {
    /// The ARN of the model whose retraining scheduler is being stopped.
    public var modelArn: Swift.String?
    /// The name of the model whose retraining scheduler is being stopped.
    public var modelName: Swift.String?
    /// The status of the retraining scheduler.
    public var status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?

    public init(
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StopRetrainingSchedulerOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let status: LookoutEquipmentClientTypes.RetrainingSchedulerStatus?
}

extension StopRetrainingSchedulerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.RetrainingSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

enum StopRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// A tag is a key-value pair that can be added to a resource as metadata.
    public struct Tag: Swift.Equatable {
        /// The key for the specified tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the specific resource to which the tag should be associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag or tags to be associated with a specific resource. Both the tag key and value are specified.
    /// This member is required.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutput: Swift.Equatable {

    public init() { }
}

enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension LookoutEquipmentClientTypes {
    public enum TargetSamplingRate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt10s
        case pt15m
        case pt15s
        case pt1h
        case pt1m
        case pt1s
        case pt30m
        case pt30s
        case pt5m
        case pt5s
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetSamplingRate] {
            return [
                .pt10m,
                .pt10s,
                .pt15m,
                .pt15s,
                .pt1h,
                .pt1m,
                .pt1s,
                .pt30m,
                .pt30s,
                .pt5m,
                .pt5s,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt10s: return "PT10S"
            case .pt15m: return "PT15M"
            case .pt15s: return "PT15S"
            case .pt1h: return "PT1H"
            case .pt1m: return "PT1M"
            case .pt1s: return "PT1S"
            case .pt30m: return "PT30M"
            case .pt30s: return "PT30S"
            case .pt5m: return "PT5M"
            case .pt5s: return "PT5S"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetSamplingRate(rawValue: rawValue) ?? TargetSamplingRate.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.UnsupportedTimestamps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalNumberOfUnsupportedTimestamps = "TotalNumberOfUnsupportedTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalNumberOfUnsupportedTimestamps = self.totalNumberOfUnsupportedTimestamps {
            try encodeContainer.encode(totalNumberOfUnsupportedTimestamps, forKey: .totalNumberOfUnsupportedTimestamps)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalNumberOfUnsupportedTimestampsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfUnsupportedTimestamps)
        totalNumberOfUnsupportedTimestamps = totalNumberOfUnsupportedTimestampsDecoded
    }
}

extension LookoutEquipmentClientTypes {
    /// Entity that comprises information abount unsupported timestamps in the dataset.
    public struct UnsupportedTimestamps: Swift.Equatable {
        /// Indicates the total number of unsupported timestamps across the ingested data.
        /// This member is required.
        public var totalNumberOfUnsupportedTimestamps: Swift.Int?

        public init(
            totalNumberOfUnsupportedTimestamps: Swift.Int? = nil
        )
        {
            self.totalNumberOfUnsupportedTimestamps = totalNumberOfUnsupportedTimestamps
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which the tag is currently associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the key of the tag to be removed from a specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutput: Swift.Equatable {

    public init() { }
}

enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateActiveModelVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }
}

extension UpdateActiveModelVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateActiveModelVersionInput: Swift.Equatable {
    /// The name of the machine learning model for which the active model version is being set.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the machine learning model for which the active model version is being set.
    /// This member is required.
    public var modelVersion: Swift.Int?

    public init(
        modelName: Swift.String? = nil,
        modelVersion: Swift.Int? = nil
    )
    {
        self.modelName = modelName
        self.modelVersion = modelVersion
    }
}

struct UpdateActiveModelVersionInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelVersion: Swift.Int?
}

extension UpdateActiveModelVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
    }
}

extension UpdateActiveModelVersionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UpdateActiveModelVersionOutputBody = try responseDecoder.decode(responseBody: data)
            self.currentActiveVersion = output.currentActiveVersion
            self.currentActiveVersionArn = output.currentActiveVersionArn
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.previousActiveVersion = output.previousActiveVersion
            self.previousActiveVersionArn = output.previousActiveVersionArn
        } else {
            self.currentActiveVersion = nil
            self.currentActiveVersionArn = nil
            self.modelArn = nil
            self.modelName = nil
            self.previousActiveVersion = nil
            self.previousActiveVersionArn = nil
        }
    }
}

public struct UpdateActiveModelVersionOutput: Swift.Equatable {
    /// The version that is currently active of the machine learning model for which the active model version was set.
    public var currentActiveVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the machine learning model version that is the current active model version.
    public var currentActiveVersionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the machine learning model for which the active model version was set.
    public var modelArn: Swift.String?
    /// The name of the machine learning model for which the active model version was set.
    public var modelName: Swift.String?
    /// The previous version that was active of the machine learning model for which the active model version was set.
    public var previousActiveVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the machine learning model version that was the previous active model version.
    public var previousActiveVersionArn: Swift.String?

    public init(
        currentActiveVersion: Swift.Int? = nil,
        currentActiveVersionArn: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        previousActiveVersion: Swift.Int? = nil,
        previousActiveVersionArn: Swift.String? = nil
    )
    {
        self.currentActiveVersion = currentActiveVersion
        self.currentActiveVersionArn = currentActiveVersionArn
        self.modelArn = modelArn
        self.modelName = modelName
        self.previousActiveVersion = previousActiveVersion
        self.previousActiveVersionArn = previousActiveVersionArn
    }
}

struct UpdateActiveModelVersionOutputBody: Swift.Equatable {
    let modelName: Swift.String?
    let modelArn: Swift.String?
    let currentActiveVersion: Swift.Int?
    let previousActiveVersion: Swift.Int?
    let currentActiveVersionArn: Swift.String?
    let previousActiveVersionArn: Swift.String?
}

extension UpdateActiveModelVersionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentActiveVersion = "CurrentActiveVersion"
        case currentActiveVersionArn = "CurrentActiveVersionArn"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case previousActiveVersion = "PreviousActiveVersion"
        case previousActiveVersionArn = "PreviousActiveVersionArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let currentActiveVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentActiveVersion)
        currentActiveVersion = currentActiveVersionDecoded
        let previousActiveVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .previousActiveVersion)
        previousActiveVersion = previousActiveVersionDecoded
        let currentActiveVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentActiveVersionArn)
        currentActiveVersionArn = currentActiveVersionArnDecoded
        let previousActiveVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousActiveVersionArn)
        previousActiveVersionArn = previousActiveVersionArnDecoded
    }
}

enum UpdateActiveModelVersionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateInferenceSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = self.dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = self.dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = self.dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = self.dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateInferenceSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateInferenceSchedulerInput: Swift.Equatable {
    /// A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies information for the output results from the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler to be updated.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler.
    public var roleArn: Swift.String?

    public init(
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.roleArn = roleArn
    }
}

struct UpdateInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
}

extension UpdateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateInferenceSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateInferenceSchedulerOutput: Swift.Equatable {

    public init() { }
}

enum UpdateInferenceSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLabelGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let faultCodes = faultCodes {
            var faultCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faultCodes)
            for faultcode0 in faultCodes {
                try faultCodesContainer.encode(faultcode0)
            }
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
    }
}

extension UpdateLabelGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLabelGroupInput: Swift.Equatable {
    /// Updates the code indicating the type of anomaly associated with the label. Data in this field will be retained for service usage. Follow best practices for the security of your data.
    public var faultCodes: [Swift.String]?
    /// The name of the label group to be updated.
    /// This member is required.
    public var labelGroupName: Swift.String?

    public init(
        faultCodes: [Swift.String]? = nil,
        labelGroupName: Swift.String? = nil
    )
    {
        self.faultCodes = faultCodes
        self.labelGroupName = labelGroupName
    }
}

struct UpdateLabelGroupInputBody: Swift.Equatable {
    let labelGroupName: Swift.String?
    let faultCodes: [Swift.String]?
}

extension UpdateLabelGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faultCodes = "FaultCodes"
        case labelGroupName = "LabelGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let faultCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faultCodes)
        var faultCodesDecoded0:[Swift.String]? = nil
        if let faultCodesContainer = faultCodesContainer {
            faultCodesDecoded0 = [Swift.String]()
            for string0 in faultCodesContainer {
                if let string0 = string0 {
                    faultCodesDecoded0?.append(string0)
                }
            }
        }
        faultCodes = faultCodesDecoded0
    }
}

extension UpdateLabelGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLabelGroupOutput: Swift.Equatable {

    public init() { }
}

enum UpdateLabelGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelsInputConfiguration = self.labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateModelInput: Swift.Equatable {
    /// Contains the configuration information for the S3 location being used to hold label data.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name of the model to update.
    /// This member is required.
    public var modelName: Swift.String?
    /// The ARN of the model to update.
    public var roleArn: Swift.String?

    public init(
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.roleArn = roleArn
    }
}

struct UpdateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let roleArn: Swift.String?
}

extension UpdateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateModelOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateModelOutput: Swift.Equatable {

    public init() { }
}

enum UpdateModelOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateRetrainingSchedulerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lookbackWindow = "LookbackWindow"
        case modelName = "ModelName"
        case promoteMode = "PromoteMode"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lookbackWindow = self.lookbackWindow {
            try encodeContainer.encode(lookbackWindow, forKey: .lookbackWindow)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let promoteMode = self.promoteMode {
            try encodeContainer.encode(promoteMode.rawValue, forKey: .promoteMode)
        }
        if let retrainingFrequency = self.retrainingFrequency {
            try encodeContainer.encode(retrainingFrequency, forKey: .retrainingFrequency)
        }
        if let retrainingStartDate = self.retrainingStartDate {
            try encodeContainer.encodeTimestamp(retrainingStartDate, format: .epochSeconds, forKey: .retrainingStartDate)
        }
    }
}

extension UpdateRetrainingSchedulerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRetrainingSchedulerInput: Swift.Equatable {
    /// The number of past days of data that will be used for retraining.
    public var lookbackWindow: Swift.String?
    /// The name of the model whose retraining scheduler you want to update.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates how the service will use new models. In MANAGED mode, new models will automatically be used for inference if they have better performance than the current model. In MANUAL mode, the new models will not be used [until they are manually activated](https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation).
    public var promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
    /// This parameter uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) standard to set the frequency at which you want retraining to occur in terms of Years, Months, and/or Days (note: other parameters like Time are not currently supported). The minimum value is 30 days (P30D) and the maximum value is 1 year (P1Y). For example, the following values are valid:
    ///
    /// * P3M15D – Every 3 months and 15 days
    ///
    /// * P2M – Every 2 months
    ///
    /// * P150D – Every 150 days
    public var retrainingFrequency: Swift.String?
    /// The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.
    public var retrainingStartDate: ClientRuntime.Date?

    public init(
        lookbackWindow: Swift.String? = nil,
        modelName: Swift.String? = nil,
        promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode? = nil,
        retrainingFrequency: Swift.String? = nil,
        retrainingStartDate: ClientRuntime.Date? = nil
    )
    {
        self.lookbackWindow = lookbackWindow
        self.modelName = modelName
        self.promoteMode = promoteMode
        self.retrainingFrequency = retrainingFrequency
        self.retrainingStartDate = retrainingStartDate
    }
}

struct UpdateRetrainingSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let retrainingStartDate: ClientRuntime.Date?
    let retrainingFrequency: Swift.String?
    let lookbackWindow: Swift.String?
    let promoteMode: LookoutEquipmentClientTypes.ModelPromoteMode?
}

extension UpdateRetrainingSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lookbackWindow = "LookbackWindow"
        case modelName = "ModelName"
        case promoteMode = "PromoteMode"
        case retrainingFrequency = "RetrainingFrequency"
        case retrainingStartDate = "RetrainingStartDate"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let retrainingStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .retrainingStartDate)
        retrainingStartDate = retrainingStartDateDecoded
        let retrainingFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrainingFrequency)
        retrainingFrequency = retrainingFrequencyDecoded
        let lookbackWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lookbackWindow)
        lookbackWindow = lookbackWindowDecoded
        let promoteModeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelPromoteMode.self, forKey: .promoteMode)
        promoteMode = promoteModeDecoded
    }
}

extension UpdateRetrainingSchedulerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateRetrainingSchedulerOutput: Swift.Equatable {

    public init() { }
}

enum UpdateRetrainingSchedulerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related Amazon Web Services service that's being utilized.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
