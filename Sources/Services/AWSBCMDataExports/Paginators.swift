// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BCMDataExportsClient {
    /// Paginate over `[ListExecutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExecutionsOutput`
    public func listExecutionsPaginated(input: ListExecutionsInput) -> ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput> {
        return ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExecutions(input:))
    }
}

extension ListExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExecutionsInput {
        return ListExecutionsInput(
            exportArn: self.exportArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListExecutionsInput, OperationStackOutput == ListExecutionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listExecutionsPaginated`
    /// to access the nested member `[BCMDataExportsClientTypes.ExecutionReference]`
    /// - Returns: `[BCMDataExportsClientTypes.ExecutionReference]`
    public func executions() async throws -> [BCMDataExportsClientTypes.ExecutionReference] {
        return try await self.asyncCompactMap { item in item.executions }
    }
}
extension BCMDataExportsClient {
    /// Paginate over `[ListExportsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExportsOutput`
    public func listExportsPaginated(input: ListExportsInput) -> ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutput> {
        return ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExports(input:))
    }
}

extension ListExportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExportsInput {
        return ListExportsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListExportsInput, OperationStackOutput == ListExportsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listExportsPaginated`
    /// to access the nested member `[BCMDataExportsClientTypes.ExportReference]`
    /// - Returns: `[BCMDataExportsClientTypes.ExportReference]`
    public func exports() async throws -> [BCMDataExportsClientTypes.ExportReference] {
        return try await self.asyncCompactMap { item in item.exports }
    }
}
extension BCMDataExportsClient {
    /// Paginate over `[ListTablesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTablesOutput`
    public func listTablesPaginated(input: ListTablesInput) -> ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutput> {
        return ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTables(input:))
    }
}

extension ListTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTablesInput {
        return ListTablesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListTablesInput, OperationStackOutput == ListTablesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTablesPaginated`
    /// to access the nested member `[BCMDataExportsClientTypes.Table]`
    /// - Returns: `[BCMDataExportsClientTypes.Table]`
    public func tables() async throws -> [BCMDataExportsClientTypes.Table] {
        return try await self.asyncCompactMap { item in item.tables }
    }
}
